
STM32L4R9ZI-STWIN_PredictiveMaintenance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d668  080041c0  080041c0  000041c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000180d0  08021828  08021828  00021828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080398f8  080398f8  000407d0  2**0
                  CONTENTS
  4 .ARM          00000000  080398f8  080398f8  000407d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080398f8  080398f8  000407d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080398f8  080398f8  000398f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08039900  08039900  00039900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007d0  20000000  08039908  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013a7c  200007d0  0803a0d8  000407d0  2**3
                  ALLOC
 10 ._user_heap_stack 0002a004  2001424c  0803a0d8  0004424c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000407d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a9b3d  00000000  00000000  00040800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000f84a  00000000  00000000  000ea33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00053580  00000000  00000000  000f9b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004ce0  00000000  00000000  0014d108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000078c0  00000000  00000000  00151de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004b130  00000000  00000000  001596a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0007d267  00000000  00000000  001a47d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0017981f  00000000  00000000  00221a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  0039b25e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00011124  00000000  00000000  0039b31c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041c0 <__do_global_dtors_aux>:
 80041c0:	b510      	push	{r4, lr}
 80041c2:	4c05      	ldr	r4, [pc, #20]	; (80041d8 <__do_global_dtors_aux+0x18>)
 80041c4:	7823      	ldrb	r3, [r4, #0]
 80041c6:	b933      	cbnz	r3, 80041d6 <__do_global_dtors_aux+0x16>
 80041c8:	4b04      	ldr	r3, [pc, #16]	; (80041dc <__do_global_dtors_aux+0x1c>)
 80041ca:	b113      	cbz	r3, 80041d2 <__do_global_dtors_aux+0x12>
 80041cc:	4804      	ldr	r0, [pc, #16]	; (80041e0 <__do_global_dtors_aux+0x20>)
 80041ce:	f3af 8000 	nop.w
 80041d2:	2301      	movs	r3, #1
 80041d4:	7023      	strb	r3, [r4, #0]
 80041d6:	bd10      	pop	{r4, pc}
 80041d8:	200007d0 	.word	0x200007d0
 80041dc:	00000000 	.word	0x00000000
 80041e0:	0802180c 	.word	0x0802180c

080041e4 <frame_dummy>:
 80041e4:	b508      	push	{r3, lr}
 80041e6:	4b03      	ldr	r3, [pc, #12]	; (80041f4 <frame_dummy+0x10>)
 80041e8:	b11b      	cbz	r3, 80041f2 <frame_dummy+0xe>
 80041ea:	4903      	ldr	r1, [pc, #12]	; (80041f8 <frame_dummy+0x14>)
 80041ec:	4803      	ldr	r0, [pc, #12]	; (80041fc <frame_dummy+0x18>)
 80041ee:	f3af 8000 	nop.w
 80041f2:	bd08      	pop	{r3, pc}
 80041f4:	00000000 	.word	0x00000000
 80041f8:	200007d4 	.word	0x200007d4
 80041fc:	0802180c 	.word	0x0802180c

08004200 <arm_bitreversal_32>:
 8004200:	1c4b      	adds	r3, r1, #1
 8004202:	2b01      	cmp	r3, #1
 8004204:	bf98      	it	ls
 8004206:	4770      	bxls	lr
 8004208:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800420c:	1c91      	adds	r1, r2, #2
 800420e:	089b      	lsrs	r3, r3, #2

08004210 <arm_bitreversal_32_0>:
 8004210:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8004214:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8004218:	880a      	ldrh	r2, [r1, #0]
 800421a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800421e:	4480      	add	r8, r0
 8004220:	4481      	add	r9, r0
 8004222:	4402      	add	r2, r0
 8004224:	4484      	add	ip, r0
 8004226:	f8d9 7000 	ldr.w	r7, [r9]
 800422a:	f8d8 6000 	ldr.w	r6, [r8]
 800422e:	6815      	ldr	r5, [r2, #0]
 8004230:	f8dc 4000 	ldr.w	r4, [ip]
 8004234:	f8c9 6000 	str.w	r6, [r9]
 8004238:	f8c8 7000 	str.w	r7, [r8]
 800423c:	f8cc 5000 	str.w	r5, [ip]
 8004240:	6014      	str	r4, [r2, #0]
 8004242:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8004246:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800424a:	6855      	ldr	r5, [r2, #4]
 800424c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8004250:	f8c9 6004 	str.w	r6, [r9, #4]
 8004254:	f8c8 7004 	str.w	r7, [r8, #4]
 8004258:	f8cc 5004 	str.w	r5, [ip, #4]
 800425c:	6054      	str	r4, [r2, #4]
 800425e:	3108      	adds	r1, #8
 8004260:	3b01      	subs	r3, #1
 8004262:	d1d5      	bne.n	8004210 <arm_bitreversal_32_0>
 8004264:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8004268:	4770      	bx	lr

0800426a <arm_bitreversal_16>:
 800426a:	1c4b      	adds	r3, r1, #1
 800426c:	2b01      	cmp	r3, #1
 800426e:	bf98      	it	ls
 8004270:	4770      	bxls	lr
 8004272:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8004276:	1c91      	adds	r1, r2, #2
 8004278:	089b      	lsrs	r3, r3, #2

0800427a <arm_bitreversal_16_0>:
 800427a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800427e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8004282:	880a      	ldrh	r2, [r1, #0]
 8004284:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8004288:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800428c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8004290:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8004294:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8004298:	f8d9 7000 	ldr.w	r7, [r9]
 800429c:	f8d8 6000 	ldr.w	r6, [r8]
 80042a0:	6815      	ldr	r5, [r2, #0]
 80042a2:	f8dc 4000 	ldr.w	r4, [ip]
 80042a6:	f8c9 6000 	str.w	r6, [r9]
 80042aa:	f8c8 7000 	str.w	r7, [r8]
 80042ae:	f8cc 5000 	str.w	r5, [ip]
 80042b2:	6014      	str	r4, [r2, #0]
 80042b4:	3108      	adds	r1, #8
 80042b6:	3b01      	subs	r3, #1
 80042b8:	d1df      	bne.n	800427a <arm_bitreversal_16_0>
 80042ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80042be:	4770      	bx	lr

080042c0 <strcmp>:
 80042c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042c8:	2a01      	cmp	r2, #1
 80042ca:	bf28      	it	cs
 80042cc:	429a      	cmpcs	r2, r3
 80042ce:	d0f7      	beq.n	80042c0 <strcmp>
 80042d0:	1ad0      	subs	r0, r2, r3
 80042d2:	4770      	bx	lr

080042d4 <strlen>:
 80042d4:	4603      	mov	r3, r0
 80042d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042da:	2a00      	cmp	r2, #0
 80042dc:	d1fb      	bne.n	80042d6 <strlen+0x2>
 80042de:	1a18      	subs	r0, r3, r0
 80042e0:	3801      	subs	r0, #1
 80042e2:	4770      	bx	lr
	...

080042f0 <memchr>:
 80042f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80042f4:	2a10      	cmp	r2, #16
 80042f6:	db2b      	blt.n	8004350 <memchr+0x60>
 80042f8:	f010 0f07 	tst.w	r0, #7
 80042fc:	d008      	beq.n	8004310 <memchr+0x20>
 80042fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004302:	3a01      	subs	r2, #1
 8004304:	428b      	cmp	r3, r1
 8004306:	d02d      	beq.n	8004364 <memchr+0x74>
 8004308:	f010 0f07 	tst.w	r0, #7
 800430c:	b342      	cbz	r2, 8004360 <memchr+0x70>
 800430e:	d1f6      	bne.n	80042fe <memchr+0xe>
 8004310:	b4f0      	push	{r4, r5, r6, r7}
 8004312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800431a:	f022 0407 	bic.w	r4, r2, #7
 800431e:	f07f 0700 	mvns.w	r7, #0
 8004322:	2300      	movs	r3, #0
 8004324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004328:	3c08      	subs	r4, #8
 800432a:	ea85 0501 	eor.w	r5, r5, r1
 800432e:	ea86 0601 	eor.w	r6, r6, r1
 8004332:	fa85 f547 	uadd8	r5, r5, r7
 8004336:	faa3 f587 	sel	r5, r3, r7
 800433a:	fa86 f647 	uadd8	r6, r6, r7
 800433e:	faa5 f687 	sel	r6, r5, r7
 8004342:	b98e      	cbnz	r6, 8004368 <memchr+0x78>
 8004344:	d1ee      	bne.n	8004324 <memchr+0x34>
 8004346:	bcf0      	pop	{r4, r5, r6, r7}
 8004348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800434c:	f002 0207 	and.w	r2, r2, #7
 8004350:	b132      	cbz	r2, 8004360 <memchr+0x70>
 8004352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004356:	3a01      	subs	r2, #1
 8004358:	ea83 0301 	eor.w	r3, r3, r1
 800435c:	b113      	cbz	r3, 8004364 <memchr+0x74>
 800435e:	d1f8      	bne.n	8004352 <memchr+0x62>
 8004360:	2000      	movs	r0, #0
 8004362:	4770      	bx	lr
 8004364:	3801      	subs	r0, #1
 8004366:	4770      	bx	lr
 8004368:	2d00      	cmp	r5, #0
 800436a:	bf06      	itte	eq
 800436c:	4635      	moveq	r5, r6
 800436e:	3803      	subeq	r0, #3
 8004370:	3807      	subne	r0, #7
 8004372:	f015 0f01 	tst.w	r5, #1
 8004376:	d107      	bne.n	8004388 <memchr+0x98>
 8004378:	3001      	adds	r0, #1
 800437a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800437e:	bf02      	ittt	eq
 8004380:	3001      	addeq	r0, #1
 8004382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004386:	3001      	addeq	r0, #1
 8004388:	bcf0      	pop	{r4, r5, r6, r7}
 800438a:	3801      	subs	r0, #1
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop

08004390 <__aeabi_drsub>:
 8004390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004394:	e002      	b.n	800439c <__adddf3>
 8004396:	bf00      	nop

08004398 <__aeabi_dsub>:
 8004398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800439c <__adddf3>:
 800439c:	b530      	push	{r4, r5, lr}
 800439e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80043a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80043a6:	ea94 0f05 	teq	r4, r5
 80043aa:	bf08      	it	eq
 80043ac:	ea90 0f02 	teqeq	r0, r2
 80043b0:	bf1f      	itttt	ne
 80043b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80043b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80043ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80043be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80043c2:	f000 80e2 	beq.w	800458a <__adddf3+0x1ee>
 80043c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80043ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80043ce:	bfb8      	it	lt
 80043d0:	426d      	neglt	r5, r5
 80043d2:	dd0c      	ble.n	80043ee <__adddf3+0x52>
 80043d4:	442c      	add	r4, r5
 80043d6:	ea80 0202 	eor.w	r2, r0, r2
 80043da:	ea81 0303 	eor.w	r3, r1, r3
 80043de:	ea82 0000 	eor.w	r0, r2, r0
 80043e2:	ea83 0101 	eor.w	r1, r3, r1
 80043e6:	ea80 0202 	eor.w	r2, r0, r2
 80043ea:	ea81 0303 	eor.w	r3, r1, r3
 80043ee:	2d36      	cmp	r5, #54	; 0x36
 80043f0:	bf88      	it	hi
 80043f2:	bd30      	pophi	{r4, r5, pc}
 80043f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80043f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80043fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004404:	d002      	beq.n	800440c <__adddf3+0x70>
 8004406:	4240      	negs	r0, r0
 8004408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800440c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004418:	d002      	beq.n	8004420 <__adddf3+0x84>
 800441a:	4252      	negs	r2, r2
 800441c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004420:	ea94 0f05 	teq	r4, r5
 8004424:	f000 80a7 	beq.w	8004576 <__adddf3+0x1da>
 8004428:	f1a4 0401 	sub.w	r4, r4, #1
 800442c:	f1d5 0e20 	rsbs	lr, r5, #32
 8004430:	db0d      	blt.n	800444e <__adddf3+0xb2>
 8004432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004436:	fa22 f205 	lsr.w	r2, r2, r5
 800443a:	1880      	adds	r0, r0, r2
 800443c:	f141 0100 	adc.w	r1, r1, #0
 8004440:	fa03 f20e 	lsl.w	r2, r3, lr
 8004444:	1880      	adds	r0, r0, r2
 8004446:	fa43 f305 	asr.w	r3, r3, r5
 800444a:	4159      	adcs	r1, r3
 800444c:	e00e      	b.n	800446c <__adddf3+0xd0>
 800444e:	f1a5 0520 	sub.w	r5, r5, #32
 8004452:	f10e 0e20 	add.w	lr, lr, #32
 8004456:	2a01      	cmp	r2, #1
 8004458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800445c:	bf28      	it	cs
 800445e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004462:	fa43 f305 	asr.w	r3, r3, r5
 8004466:	18c0      	adds	r0, r0, r3
 8004468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800446c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004470:	d507      	bpl.n	8004482 <__adddf3+0xe6>
 8004472:	f04f 0e00 	mov.w	lr, #0
 8004476:	f1dc 0c00 	rsbs	ip, ip, #0
 800447a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800447e:	eb6e 0101 	sbc.w	r1, lr, r1
 8004482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004486:	d31b      	bcc.n	80044c0 <__adddf3+0x124>
 8004488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800448c:	d30c      	bcc.n	80044a8 <__adddf3+0x10c>
 800448e:	0849      	lsrs	r1, r1, #1
 8004490:	ea5f 0030 	movs.w	r0, r0, rrx
 8004494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004498:	f104 0401 	add.w	r4, r4, #1
 800449c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80044a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80044a4:	f080 809a 	bcs.w	80045dc <__adddf3+0x240>
 80044a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80044ac:	bf08      	it	eq
 80044ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80044b2:	f150 0000 	adcs.w	r0, r0, #0
 80044b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80044ba:	ea41 0105 	orr.w	r1, r1, r5
 80044be:	bd30      	pop	{r4, r5, pc}
 80044c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80044c4:	4140      	adcs	r0, r0
 80044c6:	eb41 0101 	adc.w	r1, r1, r1
 80044ca:	3c01      	subs	r4, #1
 80044cc:	bf28      	it	cs
 80044ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80044d2:	d2e9      	bcs.n	80044a8 <__adddf3+0x10c>
 80044d4:	f091 0f00 	teq	r1, #0
 80044d8:	bf04      	itt	eq
 80044da:	4601      	moveq	r1, r0
 80044dc:	2000      	moveq	r0, #0
 80044de:	fab1 f381 	clz	r3, r1
 80044e2:	bf08      	it	eq
 80044e4:	3320      	addeq	r3, #32
 80044e6:	f1a3 030b 	sub.w	r3, r3, #11
 80044ea:	f1b3 0220 	subs.w	r2, r3, #32
 80044ee:	da0c      	bge.n	800450a <__adddf3+0x16e>
 80044f0:	320c      	adds	r2, #12
 80044f2:	dd08      	ble.n	8004506 <__adddf3+0x16a>
 80044f4:	f102 0c14 	add.w	ip, r2, #20
 80044f8:	f1c2 020c 	rsb	r2, r2, #12
 80044fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8004500:	fa21 f102 	lsr.w	r1, r1, r2
 8004504:	e00c      	b.n	8004520 <__adddf3+0x184>
 8004506:	f102 0214 	add.w	r2, r2, #20
 800450a:	bfd8      	it	le
 800450c:	f1c2 0c20 	rsble	ip, r2, #32
 8004510:	fa01 f102 	lsl.w	r1, r1, r2
 8004514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004518:	bfdc      	itt	le
 800451a:	ea41 010c 	orrle.w	r1, r1, ip
 800451e:	4090      	lslle	r0, r2
 8004520:	1ae4      	subs	r4, r4, r3
 8004522:	bfa2      	ittt	ge
 8004524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004528:	4329      	orrge	r1, r5
 800452a:	bd30      	popge	{r4, r5, pc}
 800452c:	ea6f 0404 	mvn.w	r4, r4
 8004530:	3c1f      	subs	r4, #31
 8004532:	da1c      	bge.n	800456e <__adddf3+0x1d2>
 8004534:	340c      	adds	r4, #12
 8004536:	dc0e      	bgt.n	8004556 <__adddf3+0x1ba>
 8004538:	f104 0414 	add.w	r4, r4, #20
 800453c:	f1c4 0220 	rsb	r2, r4, #32
 8004540:	fa20 f004 	lsr.w	r0, r0, r4
 8004544:	fa01 f302 	lsl.w	r3, r1, r2
 8004548:	ea40 0003 	orr.w	r0, r0, r3
 800454c:	fa21 f304 	lsr.w	r3, r1, r4
 8004550:	ea45 0103 	orr.w	r1, r5, r3
 8004554:	bd30      	pop	{r4, r5, pc}
 8004556:	f1c4 040c 	rsb	r4, r4, #12
 800455a:	f1c4 0220 	rsb	r2, r4, #32
 800455e:	fa20 f002 	lsr.w	r0, r0, r2
 8004562:	fa01 f304 	lsl.w	r3, r1, r4
 8004566:	ea40 0003 	orr.w	r0, r0, r3
 800456a:	4629      	mov	r1, r5
 800456c:	bd30      	pop	{r4, r5, pc}
 800456e:	fa21 f004 	lsr.w	r0, r1, r4
 8004572:	4629      	mov	r1, r5
 8004574:	bd30      	pop	{r4, r5, pc}
 8004576:	f094 0f00 	teq	r4, #0
 800457a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800457e:	bf06      	itte	eq
 8004580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004584:	3401      	addeq	r4, #1
 8004586:	3d01      	subne	r5, #1
 8004588:	e74e      	b.n	8004428 <__adddf3+0x8c>
 800458a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800458e:	bf18      	it	ne
 8004590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004594:	d029      	beq.n	80045ea <__adddf3+0x24e>
 8004596:	ea94 0f05 	teq	r4, r5
 800459a:	bf08      	it	eq
 800459c:	ea90 0f02 	teqeq	r0, r2
 80045a0:	d005      	beq.n	80045ae <__adddf3+0x212>
 80045a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80045a6:	bf04      	itt	eq
 80045a8:	4619      	moveq	r1, r3
 80045aa:	4610      	moveq	r0, r2
 80045ac:	bd30      	pop	{r4, r5, pc}
 80045ae:	ea91 0f03 	teq	r1, r3
 80045b2:	bf1e      	ittt	ne
 80045b4:	2100      	movne	r1, #0
 80045b6:	2000      	movne	r0, #0
 80045b8:	bd30      	popne	{r4, r5, pc}
 80045ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80045be:	d105      	bne.n	80045cc <__adddf3+0x230>
 80045c0:	0040      	lsls	r0, r0, #1
 80045c2:	4149      	adcs	r1, r1
 80045c4:	bf28      	it	cs
 80045c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80045ca:	bd30      	pop	{r4, r5, pc}
 80045cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80045d0:	bf3c      	itt	cc
 80045d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80045d6:	bd30      	popcc	{r4, r5, pc}
 80045d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80045dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80045e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045e4:	f04f 0000 	mov.w	r0, #0
 80045e8:	bd30      	pop	{r4, r5, pc}
 80045ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80045ee:	bf1a      	itte	ne
 80045f0:	4619      	movne	r1, r3
 80045f2:	4610      	movne	r0, r2
 80045f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80045f8:	bf1c      	itt	ne
 80045fa:	460b      	movne	r3, r1
 80045fc:	4602      	movne	r2, r0
 80045fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004602:	bf06      	itte	eq
 8004604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004608:	ea91 0f03 	teqeq	r1, r3
 800460c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004610:	bd30      	pop	{r4, r5, pc}
 8004612:	bf00      	nop

08004614 <__aeabi_ui2d>:
 8004614:	f090 0f00 	teq	r0, #0
 8004618:	bf04      	itt	eq
 800461a:	2100      	moveq	r1, #0
 800461c:	4770      	bxeq	lr
 800461e:	b530      	push	{r4, r5, lr}
 8004620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004628:	f04f 0500 	mov.w	r5, #0
 800462c:	f04f 0100 	mov.w	r1, #0
 8004630:	e750      	b.n	80044d4 <__adddf3+0x138>
 8004632:	bf00      	nop

08004634 <__aeabi_i2d>:
 8004634:	f090 0f00 	teq	r0, #0
 8004638:	bf04      	itt	eq
 800463a:	2100      	moveq	r1, #0
 800463c:	4770      	bxeq	lr
 800463e:	b530      	push	{r4, r5, lr}
 8004640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800464c:	bf48      	it	mi
 800464e:	4240      	negmi	r0, r0
 8004650:	f04f 0100 	mov.w	r1, #0
 8004654:	e73e      	b.n	80044d4 <__adddf3+0x138>
 8004656:	bf00      	nop

08004658 <__aeabi_f2d>:
 8004658:	0042      	lsls	r2, r0, #1
 800465a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800465e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004666:	bf1f      	itttt	ne
 8004668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800466c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004674:	4770      	bxne	lr
 8004676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800467a:	bf08      	it	eq
 800467c:	4770      	bxeq	lr
 800467e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004682:	bf04      	itt	eq
 8004684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8004688:	4770      	bxeq	lr
 800468a:	b530      	push	{r4, r5, lr}
 800468c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004698:	e71c      	b.n	80044d4 <__adddf3+0x138>
 800469a:	bf00      	nop

0800469c <__aeabi_ul2d>:
 800469c:	ea50 0201 	orrs.w	r2, r0, r1
 80046a0:	bf08      	it	eq
 80046a2:	4770      	bxeq	lr
 80046a4:	b530      	push	{r4, r5, lr}
 80046a6:	f04f 0500 	mov.w	r5, #0
 80046aa:	e00a      	b.n	80046c2 <__aeabi_l2d+0x16>

080046ac <__aeabi_l2d>:
 80046ac:	ea50 0201 	orrs.w	r2, r0, r1
 80046b0:	bf08      	it	eq
 80046b2:	4770      	bxeq	lr
 80046b4:	b530      	push	{r4, r5, lr}
 80046b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80046ba:	d502      	bpl.n	80046c2 <__aeabi_l2d+0x16>
 80046bc:	4240      	negs	r0, r0
 80046be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80046c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80046c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80046ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80046ce:	f43f aed8 	beq.w	8004482 <__adddf3+0xe6>
 80046d2:	f04f 0203 	mov.w	r2, #3
 80046d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80046da:	bf18      	it	ne
 80046dc:	3203      	addne	r2, #3
 80046de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80046e2:	bf18      	it	ne
 80046e4:	3203      	addne	r2, #3
 80046e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80046ea:	f1c2 0320 	rsb	r3, r2, #32
 80046ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80046f2:	fa20 f002 	lsr.w	r0, r0, r2
 80046f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80046fa:	ea40 000e 	orr.w	r0, r0, lr
 80046fe:	fa21 f102 	lsr.w	r1, r1, r2
 8004702:	4414      	add	r4, r2
 8004704:	e6bd      	b.n	8004482 <__adddf3+0xe6>
 8004706:	bf00      	nop

08004708 <__aeabi_dmul>:
 8004708:	b570      	push	{r4, r5, r6, lr}
 800470a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800470e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004716:	bf1d      	ittte	ne
 8004718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800471c:	ea94 0f0c 	teqne	r4, ip
 8004720:	ea95 0f0c 	teqne	r5, ip
 8004724:	f000 f8de 	bleq	80048e4 <__aeabi_dmul+0x1dc>
 8004728:	442c      	add	r4, r5
 800472a:	ea81 0603 	eor.w	r6, r1, r3
 800472e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800473a:	bf18      	it	ne
 800473c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004748:	d038      	beq.n	80047bc <__aeabi_dmul+0xb4>
 800474a:	fba0 ce02 	umull	ip, lr, r0, r2
 800474e:	f04f 0500 	mov.w	r5, #0
 8004752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800475a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800475e:	f04f 0600 	mov.w	r6, #0
 8004762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004766:	f09c 0f00 	teq	ip, #0
 800476a:	bf18      	it	ne
 800476c:	f04e 0e01 	orrne.w	lr, lr, #1
 8004770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800477c:	d204      	bcs.n	8004788 <__aeabi_dmul+0x80>
 800477e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004782:	416d      	adcs	r5, r5
 8004784:	eb46 0606 	adc.w	r6, r6, r6
 8004788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800478c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800479c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80047a0:	bf88      	it	hi
 80047a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80047a6:	d81e      	bhi.n	80047e6 <__aeabi_dmul+0xde>
 80047a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80047ac:	bf08      	it	eq
 80047ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80047b2:	f150 0000 	adcs.w	r0, r0, #0
 80047b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80047ba:	bd70      	pop	{r4, r5, r6, pc}
 80047bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80047c0:	ea46 0101 	orr.w	r1, r6, r1
 80047c4:	ea40 0002 	orr.w	r0, r0, r2
 80047c8:	ea81 0103 	eor.w	r1, r1, r3
 80047cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80047d0:	bfc2      	ittt	gt
 80047d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80047d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80047da:	bd70      	popgt	{r4, r5, r6, pc}
 80047dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80047e0:	f04f 0e00 	mov.w	lr, #0
 80047e4:	3c01      	subs	r4, #1
 80047e6:	f300 80ab 	bgt.w	8004940 <__aeabi_dmul+0x238>
 80047ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80047ee:	bfde      	ittt	le
 80047f0:	2000      	movle	r0, #0
 80047f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80047f6:	bd70      	pople	{r4, r5, r6, pc}
 80047f8:	f1c4 0400 	rsb	r4, r4, #0
 80047fc:	3c20      	subs	r4, #32
 80047fe:	da35      	bge.n	800486c <__aeabi_dmul+0x164>
 8004800:	340c      	adds	r4, #12
 8004802:	dc1b      	bgt.n	800483c <__aeabi_dmul+0x134>
 8004804:	f104 0414 	add.w	r4, r4, #20
 8004808:	f1c4 0520 	rsb	r5, r4, #32
 800480c:	fa00 f305 	lsl.w	r3, r0, r5
 8004810:	fa20 f004 	lsr.w	r0, r0, r4
 8004814:	fa01 f205 	lsl.w	r2, r1, r5
 8004818:	ea40 0002 	orr.w	r0, r0, r2
 800481c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004828:	fa21 f604 	lsr.w	r6, r1, r4
 800482c:	eb42 0106 	adc.w	r1, r2, r6
 8004830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004834:	bf08      	it	eq
 8004836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800483a:	bd70      	pop	{r4, r5, r6, pc}
 800483c:	f1c4 040c 	rsb	r4, r4, #12
 8004840:	f1c4 0520 	rsb	r5, r4, #32
 8004844:	fa00 f304 	lsl.w	r3, r0, r4
 8004848:	fa20 f005 	lsr.w	r0, r0, r5
 800484c:	fa01 f204 	lsl.w	r2, r1, r4
 8004850:	ea40 0002 	orr.w	r0, r0, r2
 8004854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800485c:	f141 0100 	adc.w	r1, r1, #0
 8004860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004864:	bf08      	it	eq
 8004866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800486a:	bd70      	pop	{r4, r5, r6, pc}
 800486c:	f1c4 0520 	rsb	r5, r4, #32
 8004870:	fa00 f205 	lsl.w	r2, r0, r5
 8004874:	ea4e 0e02 	orr.w	lr, lr, r2
 8004878:	fa20 f304 	lsr.w	r3, r0, r4
 800487c:	fa01 f205 	lsl.w	r2, r1, r5
 8004880:	ea43 0302 	orr.w	r3, r3, r2
 8004884:	fa21 f004 	lsr.w	r0, r1, r4
 8004888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800488c:	fa21 f204 	lsr.w	r2, r1, r4
 8004890:	ea20 0002 	bic.w	r0, r0, r2
 8004894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800489c:	bf08      	it	eq
 800489e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80048a2:	bd70      	pop	{r4, r5, r6, pc}
 80048a4:	f094 0f00 	teq	r4, #0
 80048a8:	d10f      	bne.n	80048ca <__aeabi_dmul+0x1c2>
 80048aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80048ae:	0040      	lsls	r0, r0, #1
 80048b0:	eb41 0101 	adc.w	r1, r1, r1
 80048b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80048b8:	bf08      	it	eq
 80048ba:	3c01      	subeq	r4, #1
 80048bc:	d0f7      	beq.n	80048ae <__aeabi_dmul+0x1a6>
 80048be:	ea41 0106 	orr.w	r1, r1, r6
 80048c2:	f095 0f00 	teq	r5, #0
 80048c6:	bf18      	it	ne
 80048c8:	4770      	bxne	lr
 80048ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80048ce:	0052      	lsls	r2, r2, #1
 80048d0:	eb43 0303 	adc.w	r3, r3, r3
 80048d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80048d8:	bf08      	it	eq
 80048da:	3d01      	subeq	r5, #1
 80048dc:	d0f7      	beq.n	80048ce <__aeabi_dmul+0x1c6>
 80048de:	ea43 0306 	orr.w	r3, r3, r6
 80048e2:	4770      	bx	lr
 80048e4:	ea94 0f0c 	teq	r4, ip
 80048e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80048ec:	bf18      	it	ne
 80048ee:	ea95 0f0c 	teqne	r5, ip
 80048f2:	d00c      	beq.n	800490e <__aeabi_dmul+0x206>
 80048f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80048f8:	bf18      	it	ne
 80048fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80048fe:	d1d1      	bne.n	80048a4 <__aeabi_dmul+0x19c>
 8004900:	ea81 0103 	eor.w	r1, r1, r3
 8004904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004908:	f04f 0000 	mov.w	r0, #0
 800490c:	bd70      	pop	{r4, r5, r6, pc}
 800490e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004912:	bf06      	itte	eq
 8004914:	4610      	moveq	r0, r2
 8004916:	4619      	moveq	r1, r3
 8004918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800491c:	d019      	beq.n	8004952 <__aeabi_dmul+0x24a>
 800491e:	ea94 0f0c 	teq	r4, ip
 8004922:	d102      	bne.n	800492a <__aeabi_dmul+0x222>
 8004924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004928:	d113      	bne.n	8004952 <__aeabi_dmul+0x24a>
 800492a:	ea95 0f0c 	teq	r5, ip
 800492e:	d105      	bne.n	800493c <__aeabi_dmul+0x234>
 8004930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004934:	bf1c      	itt	ne
 8004936:	4610      	movne	r0, r2
 8004938:	4619      	movne	r1, r3
 800493a:	d10a      	bne.n	8004952 <__aeabi_dmul+0x24a>
 800493c:	ea81 0103 	eor.w	r1, r1, r3
 8004940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800494c:	f04f 0000 	mov.w	r0, #0
 8004950:	bd70      	pop	{r4, r5, r6, pc}
 8004952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800495a:	bd70      	pop	{r4, r5, r6, pc}

0800495c <__aeabi_ddiv>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800496a:	bf1d      	ittte	ne
 800496c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004970:	ea94 0f0c 	teqne	r4, ip
 8004974:	ea95 0f0c 	teqne	r5, ip
 8004978:	f000 f8a7 	bleq	8004aca <__aeabi_ddiv+0x16e>
 800497c:	eba4 0405 	sub.w	r4, r4, r5
 8004980:	ea81 0e03 	eor.w	lr, r1, r3
 8004984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800498c:	f000 8088 	beq.w	8004aa0 <__aeabi_ddiv+0x144>
 8004990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800499c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80049a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80049a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80049a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80049ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80049b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80049b4:	429d      	cmp	r5, r3
 80049b6:	bf08      	it	eq
 80049b8:	4296      	cmpeq	r6, r2
 80049ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80049be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80049c2:	d202      	bcs.n	80049ca <__aeabi_ddiv+0x6e>
 80049c4:	085b      	lsrs	r3, r3, #1
 80049c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80049ca:	1ab6      	subs	r6, r6, r2
 80049cc:	eb65 0503 	sbc.w	r5, r5, r3
 80049d0:	085b      	lsrs	r3, r3, #1
 80049d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80049d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80049da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80049de:	ebb6 0e02 	subs.w	lr, r6, r2
 80049e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80049e6:	bf22      	ittt	cs
 80049e8:	1ab6      	subcs	r6, r6, r2
 80049ea:	4675      	movcs	r5, lr
 80049ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80049f0:	085b      	lsrs	r3, r3, #1
 80049f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80049f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80049fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80049fe:	bf22      	ittt	cs
 8004a00:	1ab6      	subcs	r6, r6, r2
 8004a02:	4675      	movcs	r5, lr
 8004a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004a08:	085b      	lsrs	r3, r3, #1
 8004a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8004a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004a16:	bf22      	ittt	cs
 8004a18:	1ab6      	subcs	r6, r6, r2
 8004a1a:	4675      	movcs	r5, lr
 8004a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8004a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8004a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004a2e:	bf22      	ittt	cs
 8004a30:	1ab6      	subcs	r6, r6, r2
 8004a32:	4675      	movcs	r5, lr
 8004a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8004a3c:	d018      	beq.n	8004a70 <__aeabi_ddiv+0x114>
 8004a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8004a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8004a5a:	d1c0      	bne.n	80049de <__aeabi_ddiv+0x82>
 8004a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004a60:	d10b      	bne.n	8004a7a <__aeabi_ddiv+0x11e>
 8004a62:	ea41 0100 	orr.w	r1, r1, r0
 8004a66:	f04f 0000 	mov.w	r0, #0
 8004a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004a6e:	e7b6      	b.n	80049de <__aeabi_ddiv+0x82>
 8004a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004a74:	bf04      	itt	eq
 8004a76:	4301      	orreq	r1, r0
 8004a78:	2000      	moveq	r0, #0
 8004a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004a7e:	bf88      	it	hi
 8004a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004a84:	f63f aeaf 	bhi.w	80047e6 <__aeabi_dmul+0xde>
 8004a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8004a8c:	bf04      	itt	eq
 8004a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004a96:	f150 0000 	adcs.w	r0, r0, #0
 8004a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004aac:	bfc2      	ittt	gt
 8004aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8004ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004abc:	f04f 0e00 	mov.w	lr, #0
 8004ac0:	3c01      	subs	r4, #1
 8004ac2:	e690      	b.n	80047e6 <__aeabi_dmul+0xde>
 8004ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8004ac8:	e68d      	b.n	80047e6 <__aeabi_dmul+0xde>
 8004aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004ace:	ea94 0f0c 	teq	r4, ip
 8004ad2:	bf08      	it	eq
 8004ad4:	ea95 0f0c 	teqeq	r5, ip
 8004ad8:	f43f af3b 	beq.w	8004952 <__aeabi_dmul+0x24a>
 8004adc:	ea94 0f0c 	teq	r4, ip
 8004ae0:	d10a      	bne.n	8004af8 <__aeabi_ddiv+0x19c>
 8004ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004ae6:	f47f af34 	bne.w	8004952 <__aeabi_dmul+0x24a>
 8004aea:	ea95 0f0c 	teq	r5, ip
 8004aee:	f47f af25 	bne.w	800493c <__aeabi_dmul+0x234>
 8004af2:	4610      	mov	r0, r2
 8004af4:	4619      	mov	r1, r3
 8004af6:	e72c      	b.n	8004952 <__aeabi_dmul+0x24a>
 8004af8:	ea95 0f0c 	teq	r5, ip
 8004afc:	d106      	bne.n	8004b0c <__aeabi_ddiv+0x1b0>
 8004afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004b02:	f43f aefd 	beq.w	8004900 <__aeabi_dmul+0x1f8>
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	e722      	b.n	8004952 <__aeabi_dmul+0x24a>
 8004b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004b10:	bf18      	it	ne
 8004b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004b16:	f47f aec5 	bne.w	80048a4 <__aeabi_dmul+0x19c>
 8004b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8004b1e:	f47f af0d 	bne.w	800493c <__aeabi_dmul+0x234>
 8004b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004b26:	f47f aeeb 	bne.w	8004900 <__aeabi_dmul+0x1f8>
 8004b2a:	e712      	b.n	8004952 <__aeabi_dmul+0x24a>

08004b2c <__gedf2>:
 8004b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8004b30:	e006      	b.n	8004b40 <__cmpdf2+0x4>
 8004b32:	bf00      	nop

08004b34 <__ledf2>:
 8004b34:	f04f 0c01 	mov.w	ip, #1
 8004b38:	e002      	b.n	8004b40 <__cmpdf2+0x4>
 8004b3a:	bf00      	nop

08004b3c <__cmpdf2>:
 8004b3c:	f04f 0c01 	mov.w	ip, #1
 8004b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004b50:	bf18      	it	ne
 8004b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004b56:	d01b      	beq.n	8004b90 <__cmpdf2+0x54>
 8004b58:	b001      	add	sp, #4
 8004b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004b5e:	bf0c      	ite	eq
 8004b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004b64:	ea91 0f03 	teqne	r1, r3
 8004b68:	bf02      	ittt	eq
 8004b6a:	ea90 0f02 	teqeq	r0, r2
 8004b6e:	2000      	moveq	r0, #0
 8004b70:	4770      	bxeq	lr
 8004b72:	f110 0f00 	cmn.w	r0, #0
 8004b76:	ea91 0f03 	teq	r1, r3
 8004b7a:	bf58      	it	pl
 8004b7c:	4299      	cmppl	r1, r3
 8004b7e:	bf08      	it	eq
 8004b80:	4290      	cmpeq	r0, r2
 8004b82:	bf2c      	ite	cs
 8004b84:	17d8      	asrcs	r0, r3, #31
 8004b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004b8a:	f040 0001 	orr.w	r0, r0, #1
 8004b8e:	4770      	bx	lr
 8004b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b98:	d102      	bne.n	8004ba0 <__cmpdf2+0x64>
 8004b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004b9e:	d107      	bne.n	8004bb0 <__cmpdf2+0x74>
 8004ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004ba8:	d1d6      	bne.n	8004b58 <__cmpdf2+0x1c>
 8004baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004bae:	d0d3      	beq.n	8004b58 <__cmpdf2+0x1c>
 8004bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop

08004bb8 <__aeabi_cdrcmple>:
 8004bb8:	4684      	mov	ip, r0
 8004bba:	4610      	mov	r0, r2
 8004bbc:	4662      	mov	r2, ip
 8004bbe:	468c      	mov	ip, r1
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4663      	mov	r3, ip
 8004bc4:	e000      	b.n	8004bc8 <__aeabi_cdcmpeq>
 8004bc6:	bf00      	nop

08004bc8 <__aeabi_cdcmpeq>:
 8004bc8:	b501      	push	{r0, lr}
 8004bca:	f7ff ffb7 	bl	8004b3c <__cmpdf2>
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	bf48      	it	mi
 8004bd2:	f110 0f00 	cmnmi.w	r0, #0
 8004bd6:	bd01      	pop	{r0, pc}

08004bd8 <__aeabi_dcmpeq>:
 8004bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004bdc:	f7ff fff4 	bl	8004bc8 <__aeabi_cdcmpeq>
 8004be0:	bf0c      	ite	eq
 8004be2:	2001      	moveq	r0, #1
 8004be4:	2000      	movne	r0, #0
 8004be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8004bea:	bf00      	nop

08004bec <__aeabi_dcmplt>:
 8004bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004bf0:	f7ff ffea 	bl	8004bc8 <__aeabi_cdcmpeq>
 8004bf4:	bf34      	ite	cc
 8004bf6:	2001      	movcc	r0, #1
 8004bf8:	2000      	movcs	r0, #0
 8004bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8004bfe:	bf00      	nop

08004c00 <__aeabi_dcmple>:
 8004c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004c04:	f7ff ffe0 	bl	8004bc8 <__aeabi_cdcmpeq>
 8004c08:	bf94      	ite	ls
 8004c0a:	2001      	movls	r0, #1
 8004c0c:	2000      	movhi	r0, #0
 8004c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004c12:	bf00      	nop

08004c14 <__aeabi_dcmpge>:
 8004c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004c18:	f7ff ffce 	bl	8004bb8 <__aeabi_cdrcmple>
 8004c1c:	bf94      	ite	ls
 8004c1e:	2001      	movls	r0, #1
 8004c20:	2000      	movhi	r0, #0
 8004c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8004c26:	bf00      	nop

08004c28 <__aeabi_dcmpgt>:
 8004c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004c2c:	f7ff ffc4 	bl	8004bb8 <__aeabi_cdrcmple>
 8004c30:	bf34      	ite	cc
 8004c32:	2001      	movcc	r0, #1
 8004c34:	2000      	movcs	r0, #0
 8004c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8004c3a:	bf00      	nop

08004c3c <__aeabi_dcmpun>:
 8004c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004c44:	d102      	bne.n	8004c4c <__aeabi_dcmpun+0x10>
 8004c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004c4a:	d10a      	bne.n	8004c62 <__aeabi_dcmpun+0x26>
 8004c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004c54:	d102      	bne.n	8004c5c <__aeabi_dcmpun+0x20>
 8004c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004c5a:	d102      	bne.n	8004c62 <__aeabi_dcmpun+0x26>
 8004c5c:	f04f 0000 	mov.w	r0, #0
 8004c60:	4770      	bx	lr
 8004c62:	f04f 0001 	mov.w	r0, #1
 8004c66:	4770      	bx	lr

08004c68 <__aeabi_d2iz>:
 8004c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004c70:	d215      	bcs.n	8004c9e <__aeabi_d2iz+0x36>
 8004c72:	d511      	bpl.n	8004c98 <__aeabi_d2iz+0x30>
 8004c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004c7c:	d912      	bls.n	8004ca4 <__aeabi_d2iz+0x3c>
 8004c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8004c92:	bf18      	it	ne
 8004c94:	4240      	negne	r0, r0
 8004c96:	4770      	bx	lr
 8004c98:	f04f 0000 	mov.w	r0, #0
 8004c9c:	4770      	bx	lr
 8004c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004ca2:	d105      	bne.n	8004cb0 <__aeabi_d2iz+0x48>
 8004ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004ca8:	bf08      	it	eq
 8004caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004cae:	4770      	bx	lr
 8004cb0:	f04f 0000 	mov.w	r0, #0
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop

08004cb8 <__aeabi_d2uiz>:
 8004cb8:	004a      	lsls	r2, r1, #1
 8004cba:	d211      	bcs.n	8004ce0 <__aeabi_d2uiz+0x28>
 8004cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004cc0:	d211      	bcs.n	8004ce6 <__aeabi_d2uiz+0x2e>
 8004cc2:	d50d      	bpl.n	8004ce0 <__aeabi_d2uiz+0x28>
 8004cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004ccc:	d40e      	bmi.n	8004cec <__aeabi_d2uiz+0x34>
 8004cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004cda:	fa23 f002 	lsr.w	r0, r3, r2
 8004cde:	4770      	bx	lr
 8004ce0:	f04f 0000 	mov.w	r0, #0
 8004ce4:	4770      	bx	lr
 8004ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004cea:	d102      	bne.n	8004cf2 <__aeabi_d2uiz+0x3a>
 8004cec:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf0:	4770      	bx	lr
 8004cf2:	f04f 0000 	mov.w	r0, #0
 8004cf6:	4770      	bx	lr

08004cf8 <__aeabi_d2f>:
 8004cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004d00:	bf24      	itt	cs
 8004d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004d0a:	d90d      	bls.n	8004d28 <__aeabi_d2f+0x30>
 8004d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004d20:	bf08      	it	eq
 8004d22:	f020 0001 	biceq.w	r0, r0, #1
 8004d26:	4770      	bx	lr
 8004d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004d2c:	d121      	bne.n	8004d72 <__aeabi_d2f+0x7a>
 8004d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004d32:	bfbc      	itt	lt
 8004d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004d38:	4770      	bxlt	lr
 8004d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004d42:	f1c2 0218 	rsb	r2, r2, #24
 8004d46:	f1c2 0c20 	rsb	ip, r2, #32
 8004d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8004d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8004d52:	bf18      	it	ne
 8004d54:	f040 0001 	orrne.w	r0, r0, #1
 8004d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004d64:	ea40 000c 	orr.w	r0, r0, ip
 8004d68:	fa23 f302 	lsr.w	r3, r3, r2
 8004d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d70:	e7cc      	b.n	8004d0c <__aeabi_d2f+0x14>
 8004d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004d76:	d107      	bne.n	8004d88 <__aeabi_d2f+0x90>
 8004d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004d7c:	bf1e      	ittt	ne
 8004d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004d86:	4770      	bxne	lr
 8004d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop

08004d98 <__aeabi_d2lz>:
 8004d98:	b538      	push	{r3, r4, r5, lr}
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	4604      	mov	r4, r0
 8004da0:	460d      	mov	r5, r1
 8004da2:	f7ff ff23 	bl	8004bec <__aeabi_dcmplt>
 8004da6:	b928      	cbnz	r0, 8004db4 <__aeabi_d2lz+0x1c>
 8004da8:	4620      	mov	r0, r4
 8004daa:	4629      	mov	r1, r5
 8004dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004db0:	f000 b80a 	b.w	8004dc8 <__aeabi_d2ulz>
 8004db4:	4620      	mov	r0, r4
 8004db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8004dba:	f000 f805 	bl	8004dc8 <__aeabi_d2ulz>
 8004dbe:	4240      	negs	r0, r0
 8004dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004dc4:	bd38      	pop	{r3, r4, r5, pc}
 8004dc6:	bf00      	nop

08004dc8 <__aeabi_d2ulz>:
 8004dc8:	b5d0      	push	{r4, r6, r7, lr}
 8004dca:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <__aeabi_d2ulz+0x34>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	4606      	mov	r6, r0
 8004dd0:	460f      	mov	r7, r1
 8004dd2:	f7ff fc99 	bl	8004708 <__aeabi_dmul>
 8004dd6:	f7ff ff6f 	bl	8004cb8 <__aeabi_d2uiz>
 8004dda:	4604      	mov	r4, r0
 8004ddc:	f7ff fc1a 	bl	8004614 <__aeabi_ui2d>
 8004de0:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <__aeabi_d2ulz+0x38>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	f7ff fc90 	bl	8004708 <__aeabi_dmul>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4630      	mov	r0, r6
 8004dee:	4639      	mov	r1, r7
 8004df0:	f7ff fad2 	bl	8004398 <__aeabi_dsub>
 8004df4:	f7ff ff60 	bl	8004cb8 <__aeabi_d2uiz>
 8004df8:	4621      	mov	r1, r4
 8004dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8004dfc:	3df00000 	.word	0x3df00000
 8004e00:	41f00000 	.word	0x41f00000

08004e04 <HTS221_GetCapabilities>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
  Capabilities->Pressure    = 0;
  Capabilities->Temperature = 1;
 8004e04:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004e08:	600b      	str	r3, [r1, #0]
  Capabilities->LowPower    = 0;
  Capabilities->HumMaxOdr   = 12.5f;
 8004e0a:	4b03      	ldr	r3, [pc, #12]	; (8004e18 <HTS221_GetCapabilities+0x14>)
 8004e0c:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8004e0e:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60cb      	str	r3, [r1, #12]
  return HTS221_OK;
}
 8004e14:	2000      	movs	r0, #0
 8004e16:	4770      	bx	lr
 8004e18:	41480000 	.word	0x41480000

08004e1c <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8004e1c:	b510      	push	{r4, lr}
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8004e1e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8004e22:	2b01      	cmp	r3, #1
{
 8004e24:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 1U)
 8004e26:	d005      	beq.n	8004e34 <HTS221_HUM_Enable+0x18>
    return HTS221_OK;
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8004e28:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8004e2c:	b123      	cbz	r3, 8004e38 <HTS221_HUM_Enable+0x1c>
    {
      return HTS221_ERROR;
    }
  }

  pObj->hum_is_enabled = 1;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    return HTS221_OK;
 8004e34:	2000      	movs	r0, #0
 8004e36:	e007      	b.n	8004e48 <HTS221_HUM_Enable+0x2c>
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8004e38:	2101      	movs	r1, #1
 8004e3a:	301c      	adds	r0, #28
 8004e3c:	f000 fa28 	bl	8005290 <hts221_power_on_set>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d0f4      	beq.n	8004e2e <HTS221_HUM_Enable+0x12>
      return HTS221_ERROR;
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295

  return HTS221_OK;
}
 8004e48:	bd10      	pop	{r4, pc}

08004e4a <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8004e4a:	b510      	push	{r4, lr}
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004e4c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8004e50:	2b01      	cmp	r3, #1
{
 8004e52:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 1U)
 8004e54:	d005      	beq.n	8004e62 <HTS221_TEMP_Enable+0x18>
    return HTS221_OK;
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8004e56:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8004e5a:	b123      	cbz	r3, 8004e66 <HTS221_TEMP_Enable+0x1c>
    {
      return HTS221_ERROR;
    }
  }

  pObj->temp_is_enabled = 1;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    return HTS221_OK;
 8004e62:	2000      	movs	r0, #0
 8004e64:	e007      	b.n	8004e76 <HTS221_TEMP_Enable+0x2c>
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8004e66:	2101      	movs	r1, #1
 8004e68:	301c      	adds	r0, #28
 8004e6a:	f000 fa11 	bl	8005290 <hts221_power_on_set>
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	d0f4      	beq.n	8004e5c <HTS221_TEMP_Enable+0x12>
      return HTS221_ERROR;
 8004e72:	f04f 30ff 	mov.w	r0, #4294967295

  return HTS221_OK;
}
 8004e76:	bd10      	pop	{r4, pc}

08004e78 <HTS221_SetOutputDataRate>:
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8004e78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004e7c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8004e84:	b508      	push	{r3, lr}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8004e86:	d910      	bls.n	8004eaa <HTS221_SetOutputDataRate+0x32>
 8004e88:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 8004e8c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e94:	bf94      	ite	ls
 8004e96:	2102      	movls	r1, #2
 8004e98:	2103      	movhi	r1, #3
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8004e9a:	301c      	adds	r0, #28
 8004e9c:	f000 f988 	bl	80051b0 <hts221_data_rate_set>
 8004ea0:	3800      	subs	r0, #0
 8004ea2:	bf18      	it	ne
 8004ea4:	2001      	movne	r0, #1
  {
    return HTS221_ERROR;
  }

  return HTS221_OK;
}
 8004ea6:	4240      	negs	r0, r0
 8004ea8:	bd08      	pop	{r3, pc}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8004eaa:	2101      	movs	r1, #1
 8004eac:	e7f5      	b.n	8004e9a <HTS221_SetOutputDataRate+0x22>

08004eae <HTS221_Init>:
{
 8004eae:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 8004eb0:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
{
 8004eb4:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8004eb6:	b121      	cbz	r1, 8004ec2 <HTS221_Init+0x14>
  pObj->is_initialized = 1;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return HTS221_OK;
 8004ebe:	2000      	movs	r0, #0
}
 8004ec0:	bd38      	pop	{r3, r4, r5, pc}
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8004ec2:	f100 051c 	add.w	r5, r0, #28
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f000 f9e2 	bl	8005290 <hts221_power_on_set>
 8004ecc:	b110      	cbz	r0, 8004ed4 <HTS221_Init+0x26>
      return HTS221_ERROR;
 8004ece:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed2:	e7f5      	b.n	8004ec0 <HTS221_Init+0x12>
  {
    return HTS221_ERROR;
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	f000 f99e 	bl	8005218 <hts221_block_data_update_set>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d1f6      	bne.n	8004ece <HTS221_Init+0x20>
  {
    return HTS221_ERROR;
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8004ee0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f7ff ffc7 	bl	8004e78 <HTS221_SetOutputDataRate>
 8004eea:	2800      	cmp	r0, #0
 8004eec:	d0e4      	beq.n	8004eb8 <HTS221_Init+0xa>
 8004eee:	e7ee      	b.n	8004ece <HTS221_Init+0x20>

08004ef0 <HTS221_HUM_SetOutputDataRate>:
  return HTS221_SetOutputDataRate(pObj, Odr);
 8004ef0:	f7ff bfc2 	b.w	8004e78 <HTS221_SetOutputDataRate>

08004ef4 <HTS221_ReadID>:
{
 8004ef4:	b508      	push	{r3, lr}
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8004ef6:	301c      	adds	r0, #28
 8004ef8:	f000 f9c5 	bl	8005286 <hts221_device_id_get>
 8004efc:	3800      	subs	r0, #0
 8004efe:	bf18      	it	ne
 8004f00:	2001      	movne	r0, #1
}
 8004f02:	4240      	negs	r0, r0
 8004f04:	bd08      	pop	{r3, pc}
	...

08004f08 <HTS221_GetOutputDataRate>:
{
 8004f08:	b513      	push	{r0, r1, r4, lr}
 8004f0a:	460c      	mov	r4, r1
  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8004f0c:	301c      	adds	r0, #28
 8004f0e:	f10d 0107 	add.w	r1, sp, #7
 8004f12:	f000 f964 	bl	80051de <hts221_data_rate_get>
 8004f16:	b990      	cbnz	r0, 8004f3e <HTS221_GetOutputDataRate+0x36>
  switch (odr_low_level)
 8004f18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d80e      	bhi.n	8004f3e <HTS221_GetOutputDataRate+0x36>
 8004f20:	e8df f003 	tbb	[pc, r3]
 8004f24:	0b090602 	.word	0x0b090602
      *Odr = 0.0f;
 8004f28:	2300      	movs	r3, #0
      *Odr = 12.5f;
 8004f2a:	6023      	str	r3, [r4, #0]
}
 8004f2c:	b002      	add	sp, #8
 8004f2e:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 8004f30:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004f34:	e7f9      	b.n	8004f2a <HTS221_GetOutputDataRate+0x22>
      *Odr = 7.0f;
 8004f36:	4b03      	ldr	r3, [pc, #12]	; (8004f44 <HTS221_GetOutputDataRate+0x3c>)
 8004f38:	e7f7      	b.n	8004f2a <HTS221_GetOutputDataRate+0x22>
      *Odr = 12.5f;
 8004f3a:	4b03      	ldr	r3, [pc, #12]	; (8004f48 <HTS221_GetOutputDataRate+0x40>)
 8004f3c:	e7f5      	b.n	8004f2a <HTS221_GetOutputDataRate+0x22>
  switch (odr_low_level)
 8004f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f42:	e7f3      	b.n	8004f2c <HTS221_GetOutputDataRate+0x24>
 8004f44:	40e00000 	.word	0x40e00000
 8004f48:	41480000 	.word	0x41480000

08004f4c <HTS221_HUM_GetOutputDataRate>:
  return HTS221_GetOutputDataRate(pObj, Odr);
 8004f4c:	f7ff bfdc 	b.w	8004f08 <HTS221_GetOutputDataRate>

08004f50 <HTS221_HUM_GetHumidity>:
{
 8004f50:	b530      	push	{r4, r5, lr}
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8004f52:	f100 041c 	add.w	r4, r0, #28
{
 8004f56:	b087      	sub	sp, #28
 8004f58:	460d      	mov	r5, r1
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	a902      	add	r1, sp, #8
 8004f5e:	f000 fa12 	bl	8005386 <hts221_hum_adc_point_0_get>
 8004f62:	b118      	cbz	r0, 8004f6c <HTS221_HUM_GetHumidity+0x1c>
    return HTS221_ERROR;
 8004f64:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004f68:	b007      	add	sp, #28
 8004f6a:	bd30      	pop	{r4, r5, pc}
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8004f6c:	a903      	add	r1, sp, #12
 8004f6e:	4620      	mov	r0, r4
 8004f70:	f000 f9a5 	bl	80052be <hts221_hum_rh_point_0_get>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d1f5      	bne.n	8004f64 <HTS221_HUM_GetHumidity+0x14>
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8004f78:	a904      	add	r1, sp, #16
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f000 fa19 	bl	80053b2 <hts221_hum_adc_point_1_get>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d1ef      	bne.n	8004f64 <HTS221_HUM_GetHumidity+0x14>
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8004f84:	a905      	add	r1, sp, #20
 8004f86:	4620      	mov	r0, r4
 8004f88:	f000 f9ab 	bl	80052e2 <hts221_hum_rh_point_1_get>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d1e9      	bne.n	8004f64 <HTS221_HUM_GetHumidity+0x14>
  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 8004f90:	f8ad 0004 	strh.w	r0, [sp, #4]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8004f94:	a901      	add	r1, sp, #4
 8004f96:	4620      	mov	r0, r4
 8004f98:	f000 f955 	bl	8005246 <hts221_humidity_raw_get>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d1e1      	bne.n	8004f64 <HTS221_HUM_GetHumidity+0x14>
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8004fa0:	ed9d 6a03 	vldr	s12, [sp, #12]
 8004fa4:	eddd 7a05 	vldr	s15, [sp, #20]
 8004fa8:	eddd 6a02 	vldr	s13, [sp, #8]
 8004fac:	ed9d 7a04 	vldr	s14, [sp, #16]
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8004fb0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8004fb4:	ee77 5ac6 	vsub.f32	s11, s15, s12
 8004fb8:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8004fbc:	ee77 6a66 	vsub.f32	s13, s14, s13
 8004fc0:	eee6 7a07 	vfma.f32	s15, s12, s14
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8004fc4:	ee06 3a10 	vmov	s12, r3
 8004fc8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8004fcc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004fd0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  if (*Value < 0.0f)
 8004fd4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fdc:	d409      	bmi.n	8004ff2 <HTS221_HUM_GetHumidity+0xa2>
  if (*Value > 100.0f)
 8004fde:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005000 <HTS221_HUM_GetHumidity+0xb0>
 8004fe2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fea:	dc05      	bgt.n	8004ff8 <HTS221_HUM_GetHumidity+0xa8>
 8004fec:	ed85 7a00 	vstr	s14, [r5]
 8004ff0:	e7ba      	b.n	8004f68 <HTS221_HUM_GetHumidity+0x18>
    *Value = 0.0f;
 8004ff2:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8005004 <HTS221_HUM_GetHumidity+0xb4>
 8004ff6:	e7f9      	b.n	8004fec <HTS221_HUM_GetHumidity+0x9c>
    *Value = 100.0f;
 8004ff8:	edc5 7a00 	vstr	s15, [r5]
 8004ffc:	e7b4      	b.n	8004f68 <HTS221_HUM_GetHumidity+0x18>
 8004ffe:	bf00      	nop
 8005000:	42c80000 	.word	0x42c80000
 8005004:	00000000 	.word	0x00000000

08005008 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005008:	b430      	push	{r4, r5}
 800500a:	4604      	mov	r4, r0
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800500c:	6945      	ldr	r5, [r0, #20]
  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800500e:	68a4      	ldr	r4, [r4, #8]
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005010:	7b00      	ldrb	r0, [r0, #12]
  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8005012:	b924      	cbnz	r4, 800501e <ReadRegWrap+0x16>
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005014:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005018:	46ac      	mov	ip, r5
  }
}
 800501a:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800501c:	4760      	bx	ip
 800501e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005022:	e7f9      	b.n	8005018 <ReadRegWrap+0x10>

08005024 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005024:	b430      	push	{r4, r5}
 8005026:	4604      	mov	r4, r0
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005028:	6905      	ldr	r5, [r0, #16]
  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800502a:	68a4      	ldr	r4, [r4, #8]
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800502c:	7b00      	ldrb	r0, [r0, #12]
  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800502e:	b924      	cbnz	r4, 800503a <WriteRegWrap+0x16>
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005030:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005034:	46ac      	mov	ip, r5
  }
}
 8005036:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005038:	4760      	bx	ip
 800503a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800503e:	e7f9      	b.n	8005034 <WriteRegWrap+0x10>

08005040 <HTS221_HUM_Disable>:
{
 8005040:	b510      	push	{r4, lr}
 8005042:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 8005044:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8005048:	b130      	cbz	r0, 8005058 <HTS221_HUM_Disable+0x18>
  if (pObj->temp_is_enabled == 0U)
 800504a:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 800504e:	b121      	cbz	r1, 800505a <HTS221_HUM_Disable+0x1a>
  pObj->hum_is_enabled = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  return HTS221_OK;
 8005056:	4618      	mov	r0, r3
}
 8005058:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800505a:	f104 001c 	add.w	r0, r4, #28
 800505e:	f000 f917 	bl	8005290 <hts221_power_on_set>
 8005062:	2800      	cmp	r0, #0
 8005064:	d0f4      	beq.n	8005050 <HTS221_HUM_Disable+0x10>
      return HTS221_ERROR;
 8005066:	f04f 30ff 	mov.w	r0, #4294967295
 800506a:	e7f5      	b.n	8005058 <HTS221_HUM_Disable+0x18>

0800506c <HTS221_TEMP_Disable>:
{
 800506c:	b510      	push	{r4, lr}
 800506e:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 8005070:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8005074:	b130      	cbz	r0, 8005084 <HTS221_TEMP_Disable+0x18>
  if (pObj->hum_is_enabled == 0U)
 8005076:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 800507a:	b121      	cbz	r1, 8005086 <HTS221_TEMP_Disable+0x1a>
  pObj->temp_is_enabled = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  return HTS221_OK;
 8005082:	4618      	mov	r0, r3
}
 8005084:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8005086:	f104 001c 	add.w	r0, r4, #28
 800508a:	f000 f901 	bl	8005290 <hts221_power_on_set>
 800508e:	2800      	cmp	r0, #0
 8005090:	d0f4      	beq.n	800507c <HTS221_TEMP_Disable+0x10>
      return HTS221_ERROR;
 8005092:	f04f 30ff 	mov.w	r0, #4294967295
 8005096:	e7f5      	b.n	8005084 <HTS221_TEMP_Disable+0x18>

08005098 <HTS221_DeInit>:
{
 8005098:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 800509a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800509e:	2b01      	cmp	r3, #1
{
 80050a0:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 80050a2:	d003      	beq.n	80050ac <HTS221_DeInit+0x14>
  pObj->is_initialized = 0;
 80050a4:	2000      	movs	r0, #0
 80050a6:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 80050aa:	bd10      	pop	{r4, pc}
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80050ac:	f7ff ffc8 	bl	8005040 <HTS221_HUM_Disable>
 80050b0:	b110      	cbz	r0, 80050b8 <HTS221_DeInit+0x20>
      return HTS221_ERROR;
 80050b2:	f04f 30ff 	mov.w	r0, #4294967295
 80050b6:	e7f8      	b.n	80050aa <HTS221_DeInit+0x12>
    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80050b8:	4620      	mov	r0, r4
 80050ba:	f7ff ffd7 	bl	800506c <HTS221_TEMP_Disable>
 80050be:	2800      	cmp	r0, #0
 80050c0:	d0f0      	beq.n	80050a4 <HTS221_DeInit+0xc>
 80050c2:	e7f6      	b.n	80050b2 <HTS221_DeInit+0x1a>

080050c4 <HTS221_TEMP_SetOutputDataRate>:
 80050c4:	f7ff bed8 	b.w	8004e78 <HTS221_SetOutputDataRate>

080050c8 <HTS221_TEMP_GetOutputDataRate>:
 80050c8:	f7ff bf1e 	b.w	8004f08 <HTS221_GetOutputDataRate>

080050cc <HTS221_TEMP_GetTemperature>:
{
 80050cc:	b530      	push	{r4, r5, lr}
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 80050ce:	f100 041c 	add.w	r4, r0, #28
{
 80050d2:	b087      	sub	sp, #28
 80050d4:	460d      	mov	r5, r1
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 80050d6:	4620      	mov	r0, r4
 80050d8:	a902      	add	r1, sp, #8
 80050da:	f000 f980 	bl	80053de <hts221_temp_adc_point_0_get>
 80050de:	b118      	cbz	r0, 80050e8 <HTS221_TEMP_GetTemperature+0x1c>
    return HTS221_ERROR;
 80050e0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80050e4:	b007      	add	sp, #28
 80050e6:	bd30      	pop	{r4, r5, pc}
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80050e8:	a903      	add	r1, sp, #12
 80050ea:	4620      	mov	r0, r4
 80050ec:	f000 f90b 	bl	8005306 <hts221_temp_deg_point_0_get>
 80050f0:	2800      	cmp	r0, #0
 80050f2:	d1f5      	bne.n	80050e0 <HTS221_TEMP_GetTemperature+0x14>
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80050f4:	a904      	add	r1, sp, #16
 80050f6:	4620      	mov	r0, r4
 80050f8:	f000 f987 	bl	800540a <hts221_temp_adc_point_1_get>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	d1ef      	bne.n	80050e0 <HTS221_TEMP_GetTemperature+0x14>
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8005100:	a905      	add	r1, sp, #20
 8005102:	4620      	mov	r0, r4
 8005104:	f000 f91f 	bl	8005346 <hts221_temp_deg_point_1_get>
 8005108:	2800      	cmp	r0, #0
 800510a:	d1e9      	bne.n	80050e0 <HTS221_TEMP_GetTemperature+0x14>
  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 800510c:	f8ad 0004 	strh.w	r0, [sp, #4]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8005110:	a901      	add	r1, sp, #4
 8005112:	4620      	mov	r0, r4
 8005114:	f000 f8a7 	bl	8005266 <hts221_temperature_raw_get>
 8005118:	2800      	cmp	r0, #0
 800511a:	d1e1      	bne.n	80050e0 <HTS221_TEMP_GetTemperature+0x14>
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800511c:	eddd 6a03 	vldr	s13, [sp, #12]
 8005120:	eddd 7a05 	vldr	s15, [sp, #20]
 8005124:	ed9d 6a02 	vldr	s12, [sp, #8]
 8005128:	ed9d 7a04 	vldr	s14, [sp, #16]
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800512c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8005130:	ee77 5ae6 	vsub.f32	s11, s15, s13
 8005134:	ee66 7a67 	vnmul.f32	s15, s12, s15
 8005138:	eee6 7a87 	vfma.f32	s15, s13, s14
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800513c:	ee06 3a90 	vmov	s13, r3
 8005140:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8005144:	ee37 7a46 	vsub.f32	s14, s14, s12
 8005148:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800514c:	eec7 6a87 	vdiv.f32	s13, s15, s14
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8005150:	edc5 6a00 	vstr	s13, [r5]
  return HTS221_OK;
 8005154:	e7c6      	b.n	80050e4 <HTS221_TEMP_GetTemperature+0x18>
	...

08005158 <HTS221_RegisterBusIO>:
  if (pObj == NULL)
 8005158:	b1a0      	cbz	r0, 8005184 <HTS221_RegisterBusIO+0x2c>
    pObj->IO.DeInit    = pIO->DeInit;
 800515a:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 800515c:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800515e:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005160:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8005162:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 8005164:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8005166:	7b0a      	ldrb	r2, [r1, #12]
 8005168:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800516a:	690a      	ldr	r2, [r1, #16]
 800516c:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800516e:	694a      	ldr	r2, [r1, #20]
 8005170:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005172:	698a      	ldr	r2, [r1, #24]
 8005174:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8005176:	4a05      	ldr	r2, [pc, #20]	; (800518c <HTS221_RegisterBusIO+0x34>)
 8005178:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800517a:	4a05      	ldr	r2, [pc, #20]	; (8005190 <HTS221_RegisterBusIO+0x38>)
 800517c:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle   = pObj;
 800517e:	6240      	str	r0, [r0, #36]	; 0x24
    if (pObj->IO.Init != NULL)
 8005180:	b103      	cbz	r3, 8005184 <HTS221_RegisterBusIO+0x2c>
      ret = pObj->IO.Init();
 8005182:	4718      	bx	r3
}
 8005184:	f04f 30ff 	mov.w	r0, #4294967295
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	08005009 	.word	0x08005009
 8005190:	08005025 	.word	0x08005025

08005194 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 8005194:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005196:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800519a:	46a4      	mov	ip, r4
  return ret;
}
 800519c:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80051a0:	4760      	bx	ip

080051a2 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80051a2:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80051a4:	6804      	ldr	r4, [r0, #0]
 80051a6:	6880      	ldr	r0, [r0, #8]
 80051a8:	46a4      	mov	ip, r4
  return ret;
}
 80051aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80051ae:	4760      	bx	ip

080051b0 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80051b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80051b2:	2301      	movs	r3, #1
{
 80051b4:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80051b6:	aa01      	add	r2, sp, #4
 80051b8:	2120      	movs	r1, #32
{
 80051ba:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80051bc:	f7ff ffea 	bl	8005194 <hts221_read_reg>

  if (ret == 0) {
 80051c0:	b958      	cbnz	r0, 80051da <hts221_data_rate_set+0x2a>
    reg.odr = (uint8_t)val;
 80051c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80051c6:	f365 0301 	bfi	r3, r5, #0, #2
 80051ca:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80051ce:	aa01      	add	r2, sp, #4
 80051d0:	2301      	movs	r3, #1
 80051d2:	2120      	movs	r1, #32
 80051d4:	4620      	mov	r0, r4
 80051d6:	f7ff ffe4 	bl	80051a2 <hts221_write_reg>
  }

  return ret;
}
 80051da:	b003      	add	sp, #12
 80051dc:	bd30      	pop	{r4, r5, pc}

080051de <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80051de:	b513      	push	{r0, r1, r4, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80051e0:	2301      	movs	r3, #1
{
 80051e2:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80051e4:	aa01      	add	r2, sp, #4
 80051e6:	2120      	movs	r1, #32
 80051e8:	f7ff ffd4 	bl	8005194 <hts221_read_reg>

  switch (reg.odr) {
 80051ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d80d      	bhi.n	8005214 <hts221_data_rate_get+0x36>
 80051f8:	e8df f003 	tbb	[pc, r3]
 80051fc:	0a080602 	.word	0x0a080602
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8005200:	2300      	movs	r3, #0
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
      break;

    default:
      *val = HTS221_ODR_ND;
 8005202:	7023      	strb	r3, [r4, #0]
      break;
  }

  return ret;
}
 8005204:	b002      	add	sp, #8
 8005206:	bd10      	pop	{r4, pc}
      *val = HTS221_ODR_1Hz;
 8005208:	2301      	movs	r3, #1
 800520a:	e7fa      	b.n	8005202 <hts221_data_rate_get+0x24>
      *val = HTS221_ODR_7Hz;
 800520c:	2302      	movs	r3, #2
 800520e:	e7f8      	b.n	8005202 <hts221_data_rate_get+0x24>
      *val = HTS221_ODR_12Hz5;
 8005210:	2303      	movs	r3, #3
 8005212:	e7f6      	b.n	8005202 <hts221_data_rate_get+0x24>
      *val = HTS221_ODR_ND;
 8005214:	2304      	movs	r3, #4
 8005216:	e7f4      	b.n	8005202 <hts221_data_rate_get+0x24>

08005218 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005218:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800521a:	2301      	movs	r3, #1
{
 800521c:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800521e:	aa01      	add	r2, sp, #4
 8005220:	2120      	movs	r1, #32
{
 8005222:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8005224:	f7ff ffb6 	bl	8005194 <hts221_read_reg>

  if (ret == 0) {
 8005228:	b958      	cbnz	r0, 8005242 <hts221_block_data_update_set+0x2a>
    reg.bdu = val;
 800522a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800522e:	f365 0382 	bfi	r3, r5, #2, #1
 8005232:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8005236:	aa01      	add	r2, sp, #4
 8005238:	2301      	movs	r3, #1
 800523a:	2120      	movs	r1, #32
 800523c:	4620      	mov	r0, r4
 800523e:	f7ff ffb0 	bl	80051a2 <hts221_write_reg>
  }

  return ret;
}
 8005242:	b003      	add	sp, #12
 8005244:	bd30      	pop	{r4, r5, pc}

08005246 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005246:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8005248:	2302      	movs	r3, #2
{
 800524a:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 800524c:	aa01      	add	r2, sp, #4
 800524e:	2128      	movs	r1, #40	; 0x28
 8005250:	f7ff ffa0 	bl	8005194 <hts221_read_reg>
  *val = (int16_t)buff[1];
  *val = (*val * 256) +  (int16_t)buff[0];
 8005254:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005258:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800525c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005260:	8023      	strh	r3, [r4, #0]
  return ret;
}
 8005262:	b002      	add	sp, #8
 8005264:	bd10      	pop	{r4, pc}

08005266 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005266:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8005268:	2302      	movs	r3, #2
{
 800526a:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 800526c:	aa01      	add	r2, sp, #4
 800526e:	212a      	movs	r1, #42	; 0x2a
 8005270:	f7ff ff90 	bl	8005194 <hts221_read_reg>
  *val = (int16_t)buff[1];
  *val = (*val * 256) +  (int16_t)buff[0];
 8005274:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005278:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800527c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005280:	8023      	strh	r3, [r4, #0]
  return ret;
}
 8005282:	b002      	add	sp, #8
 8005284:	bd10      	pop	{r4, pc}

08005286 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005286:	460a      	mov	r2, r1
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8005288:	2301      	movs	r3, #1
 800528a:	210f      	movs	r1, #15
 800528c:	f7ff bf82 	b.w	8005194 <hts221_read_reg>

08005290 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005290:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8005292:	2301      	movs	r3, #1
{
 8005294:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8005296:	aa01      	add	r2, sp, #4
 8005298:	2120      	movs	r1, #32
{
 800529a:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800529c:	f7ff ff7a 	bl	8005194 <hts221_read_reg>

  if (ret == 0) {
 80052a0:	b958      	cbnz	r0, 80052ba <hts221_power_on_set+0x2a>
    reg.pd = val;
 80052a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80052a6:	f365 13c7 	bfi	r3, r5, #7, #1
 80052aa:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80052ae:	aa01      	add	r2, sp, #4
 80052b0:	2301      	movs	r3, #1
 80052b2:	2120      	movs	r1, #32
 80052b4:	4620      	mov	r0, r4
 80052b6:	f7ff ff74 	bl	80051a2 <hts221_write_reg>
  }

  return ret;
}
 80052ba:	b003      	add	sp, #12
 80052bc:	bd30      	pop	{r4, r5, pc}

080052be <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80052be:	b513      	push	{r0, r1, r4, lr}
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80052c0:	2301      	movs	r3, #1
{
 80052c2:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80052c4:	f10d 0207 	add.w	r2, sp, #7
 80052c8:	2130      	movs	r1, #48	; 0x30
 80052ca:	f7ff ff63 	bl	8005194 <hts221_read_reg>
  *val = coeff / 2.0f;
 80052ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eefa 7aef 	vcvt.f32.s32	s15, s15, #1
 80052da:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 80052de:	b002      	add	sp, #8
 80052e0:	bd10      	pop	{r4, pc}

080052e2 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80052e2:	b513      	push	{r0, r1, r4, lr}
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80052e4:	2301      	movs	r3, #1
{
 80052e6:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80052e8:	f10d 0207 	add.w	r2, sp, #7
 80052ec:	2131      	movs	r1, #49	; 0x31
 80052ee:	f7ff ff51 	bl	8005194 <hts221_read_reg>
  *val = coeff / 2.0f;
 80052f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eefa 7aef 	vcvt.f32.s32	s15, s15, #1
 80052fe:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 8005302:	b002      	add	sp, #8
 8005304:	bd10      	pop	{r4, pc}

08005306 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8005306:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8005308:	2301      	movs	r3, #1
{
 800530a:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800530c:	f10d 0207 	add.w	r2, sp, #7
 8005310:	2132      	movs	r1, #50	; 0x32
{
 8005312:	4605      	mov	r5, r0
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8005314:	f7ff ff3e 	bl	8005194 <hts221_read_reg>

  if (ret == 0) {
 8005318:	b998      	cbnz	r0, 8005342 <hts221_temp_deg_point_0_get+0x3c>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800531a:	2301      	movs	r3, #1
 800531c:	aa01      	add	r2, sp, #4
 800531e:	2135      	movs	r1, #53	; 0x35
 8005320:	4628      	mov	r0, r5
 8005322:	f7ff ff37 	bl	8005194 <hts221_read_reg>
    coeff_h = reg.t0_msb;
 8005326:	f89d 2004 	ldrb.w	r2, [sp, #4]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800532a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800532e:	f002 0203 	and.w	r2, r2, #3
 8005332:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
 800533e:	edc4 7a00 	vstr	s15, [r4]
  }

  return ret;
}
 8005342:	b003      	add	sp, #12
 8005344:	bd30      	pop	{r4, r5, pc}

08005346 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8005346:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8005348:	2301      	movs	r3, #1
{
 800534a:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800534c:	f10d 0207 	add.w	r2, sp, #7
 8005350:	2133      	movs	r1, #51	; 0x33
{
 8005352:	4605      	mov	r5, r0
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8005354:	f7ff ff1e 	bl	8005194 <hts221_read_reg>

  if (ret == 0) {
 8005358:	b998      	cbnz	r0, 8005382 <hts221_temp_deg_point_1_get+0x3c>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800535a:	2301      	movs	r3, #1
 800535c:	aa01      	add	r2, sp, #4
 800535e:	2135      	movs	r1, #53	; 0x35
 8005360:	4628      	mov	r0, r5
 8005362:	f7ff ff17 	bl	8005194 <hts221_read_reg>
    coeff_h = reg.t1_msb;
 8005366:	f89d 2004 	ldrb.w	r2, [sp, #4]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800536a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800536e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8005372:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
 800537e:	edc4 7a00 	vstr	s15, [r4]
  }

  return ret;
}
 8005382:	b003      	add	sp, #12
 8005384:	bd30      	pop	{r4, r5, pc}

08005386 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8005386:	b513      	push	{r0, r1, r4, lr}
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8005388:	2302      	movs	r3, #2
{
 800538a:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 800538c:	aa01      	add	r2, sp, #4
 800538e:	2136      	movs	r1, #54	; 0x36
 8005390:	f7ff ff00 	bl	8005194 <hts221_read_reg>
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8005394:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005398:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800539c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 80053a0:	b21b      	sxth	r3, r3
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053aa:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 80053ae:	b002      	add	sp, #8
 80053b0:	bd10      	pop	{r4, pc}

080053b2 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80053b2:	b513      	push	{r0, r1, r4, lr}
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80053b4:	2302      	movs	r3, #2
{
 80053b6:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80053b8:	aa01      	add	r2, sp, #4
 80053ba:	213a      	movs	r1, #58	; 0x3a
 80053bc:	f7ff feea 	bl	8005194 <hts221_read_reg>
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80053c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80053c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80053c8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 80053cc:	b21b      	sxth	r3, r3
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053d6:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 80053da:	b002      	add	sp, #8
 80053dc:	bd10      	pop	{r4, pc}

080053de <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80053de:	b513      	push	{r0, r1, r4, lr}
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80053e0:	2302      	movs	r3, #2
{
 80053e2:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80053e4:	aa01      	add	r2, sp, #4
 80053e6:	213c      	movs	r1, #60	; 0x3c
 80053e8:	f7ff fed4 	bl	8005194 <hts221_read_reg>
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80053ec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80053f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80053f4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 80053f8:	b21b      	sxth	r3, r3
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005402:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 8005406:	b002      	add	sp, #8
 8005408:	bd10      	pop	{r4, pc}

0800540a <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800540a:	b513      	push	{r0, r1, r4, lr}
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 800540c:	2302      	movs	r3, #2
{
 800540e:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8005410:	aa01      	add	r2, sp, #4
 8005412:	213e      	movs	r1, #62	; 0x3e
 8005414:	f7ff febe 	bl	8005194 <hts221_read_reg>
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8005418:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800541c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005420:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 8005424:	b21b      	sxth	r3, r3
 8005426:	ee07 3a90 	vmov	s15, r3
 800542a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800542e:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 8005432:	b002      	add	sp, #8
 8005434:	bd10      	pop	{r4, pc}
	...

08005438 <IIS2MDC_GetCapabilities>:

  Capabilities->Acc          = 0;
  Capabilities->Gyro         = 0;
  Capabilities->Magneto      = 1;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
 8005438:	2000      	movs	r0, #0
 800543a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800543e:	e9c1 3000 	strd	r3, r0, [r1]
  Capabilities->AccMaxFS     = 0;
  Capabilities->MagMaxFS     = 50;
 8005442:	2332      	movs	r3, #50	; 0x32
 8005444:	60cb      	str	r3, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8005446:	2300      	movs	r3, #0
 8005448:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 800544a:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 800544c:	4b01      	ldr	r3, [pc, #4]	; (8005454 <IIS2MDC_GetCapabilities+0x1c>)
  Capabilities->AccMaxFS     = 0;
 800544e:	6088      	str	r0, [r1, #8]
  Capabilities->MagMaxOdr    = 100.0f;
 8005450:	618b      	str	r3, [r1, #24]
  return IIS2MDC_OK;
}
 8005452:	4770      	bx	lr
 8005454:	42c80000 	.word	0x42c80000

08005458 <IIS2MDC_MAG_GetSensitivity>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 8005458:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800545c:	600b      	str	r3, [r1, #0]

  return IIS2MDC_OK;
}
 800545e:	2000      	movs	r0, #0
 8005460:	4770      	bx	lr

08005462 <IIS2MDC_MAG_GetFullScale>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
  UNUSED(pObj);
  *FullScale = 50;
 8005462:	2332      	movs	r3, #50	; 0x32
 8005464:	600b      	str	r3, [r1, #0]

  return IIS2MDC_OK;
}
 8005466:	2000      	movs	r0, #0
 8005468:	4770      	bx	lr

0800546a <IIS2MDC_MAG_SetFullScale>:
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
}
 800546a:	2000      	movs	r0, #0
 800546c:	4770      	bx	lr
	...

08005470 <IIS2MDC_MAG_SetOutputDataRate>:
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8005470:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8005474:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 800547c:	b508      	push	{r3, lr}
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 800547e:	d917      	bls.n	80054b0 <IIS2MDC_MAG_SetOutputDataRate+0x40>
 8005480:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8005484:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548c:	d912      	bls.n	80054b4 <IIS2MDC_MAG_SetOutputDataRate+0x44>
 800548e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80054b8 <IIS2MDC_MAG_SetOutputDataRate+0x48>
 8005492:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800549a:	bf94      	ite	ls
 800549c:	2102      	movls	r1, #2
 800549e:	2103      	movhi	r1, #3
  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 80054a0:	301c      	adds	r0, #28
 80054a2:	f000 f962 	bl	800576a <iis2mdc_data_rate_set>
 80054a6:	3800      	subs	r0, #0
 80054a8:	bf18      	it	ne
 80054aa:	2001      	movne	r0, #1
}
 80054ac:	4240      	negs	r0, r0
 80054ae:	bd08      	pop	{r3, pc}
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 80054b0:	2100      	movs	r1, #0
 80054b2:	e7f5      	b.n	80054a0 <IIS2MDC_MAG_SetOutputDataRate+0x30>
 80054b4:	2101      	movs	r1, #1
 80054b6:	e7f3      	b.n	80054a0 <IIS2MDC_MAG_SetOutputDataRate+0x30>
 80054b8:	42480000 	.word	0x42480000

080054bc <IIS2MDC_Init>:
{
 80054bc:	b538      	push	{r3, r4, r5, lr}
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 80054be:	f100 051c 	add.w	r5, r0, #28
{
 80054c2:	4604      	mov	r4, r0
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 80054c4:	2101      	movs	r1, #1
 80054c6:	4628      	mov	r0, r5
 80054c8:	f000 f97d 	bl	80057c6 <iis2mdc_block_data_update_set>
 80054cc:	b110      	cbz	r0, 80054d4 <IIS2MDC_Init+0x18>
    return IIS2MDC_ERROR;
 80054ce:	f04f 30ff 	mov.w	r0, #4294967295
}
 80054d2:	bd38      	pop	{r3, r4, r5, pc}
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 80054d4:	2102      	movs	r1, #2
 80054d6:	4628      	mov	r0, r5
 80054d8:	f000 f930 	bl	800573c <iis2mdc_operating_mode_set>
 80054dc:	2800      	cmp	r0, #0
 80054de:	d1f6      	bne.n	80054ce <IIS2MDC_Init+0x12>
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 80054e0:	2103      	movs	r1, #3
 80054e2:	4628      	mov	r0, r5
 80054e4:	f000 f941 	bl	800576a <iis2mdc_data_rate_set>
 80054e8:	4601      	mov	r1, r0
 80054ea:	2800      	cmp	r0, #0
 80054ec:	d1ef      	bne.n	80054ce <IIS2MDC_Init+0x12>
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 80054ee:	4628      	mov	r0, r5
 80054f0:	f000 f9a3 	bl	800583a <iis2mdc_self_test_set>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d1ea      	bne.n	80054ce <IIS2MDC_Init+0x12>
  pObj->is_initialized = 1;
 80054f8:	2301      	movs	r3, #1
 80054fa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return IIS2MDC_OK;
 80054fe:	e7e8      	b.n	80054d2 <IIS2MDC_Init+0x16>

08005500 <IIS2MDC_ReadID>:
{
 8005500:	b508      	push	{r3, lr}
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 8005502:	301c      	adds	r0, #28
 8005504:	f000 f994 	bl	8005830 <iis2mdc_device_id_get>
 8005508:	3800      	subs	r0, #0
 800550a:	bf18      	it	ne
 800550c:	2001      	movne	r0, #1
}
 800550e:	4240      	negs	r0, r0
 8005510:	bd08      	pop	{r3, pc}
	...

08005514 <IIS2MDC_MAG_GetOutputDataRate>:
{
 8005514:	b513      	push	{r0, r1, r4, lr}
 8005516:	460c      	mov	r4, r1
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 8005518:	301c      	adds	r0, #28
 800551a:	f10d 0107 	add.w	r1, sp, #7
 800551e:	f000 f93b 	bl	8005798 <iis2mdc_data_rate_get>
 8005522:	b988      	cbnz	r0, 8005548 <IIS2MDC_MAG_GetOutputDataRate+0x34>
  switch (odr_low_level)
 8005524:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005528:	2b03      	cmp	r3, #3
 800552a:	d80d      	bhi.n	8005548 <IIS2MDC_MAG_GetOutputDataRate+0x34>
 800552c:	e8df f003 	tbb	[pc, r3]
 8005530:	0a080602 	.word	0x0a080602
      *Odr = 10.0f;
 8005534:	4b06      	ldr	r3, [pc, #24]	; (8005550 <IIS2MDC_MAG_GetOutputDataRate+0x3c>)
      *Odr = 100.0f;
 8005536:	6023      	str	r3, [r4, #0]
}
 8005538:	b002      	add	sp, #8
 800553a:	bd10      	pop	{r4, pc}
      *Odr = 20.0f;
 800553c:	4b05      	ldr	r3, [pc, #20]	; (8005554 <IIS2MDC_MAG_GetOutputDataRate+0x40>)
 800553e:	e7fa      	b.n	8005536 <IIS2MDC_MAG_GetOutputDataRate+0x22>
      *Odr = 50.0f;
 8005540:	4b05      	ldr	r3, [pc, #20]	; (8005558 <IIS2MDC_MAG_GetOutputDataRate+0x44>)
 8005542:	e7f8      	b.n	8005536 <IIS2MDC_MAG_GetOutputDataRate+0x22>
      *Odr = 100.0f;
 8005544:	4b05      	ldr	r3, [pc, #20]	; (800555c <IIS2MDC_MAG_GetOutputDataRate+0x48>)
 8005546:	e7f6      	b.n	8005536 <IIS2MDC_MAG_GetOutputDataRate+0x22>
  switch (odr_low_level)
 8005548:	f04f 30ff 	mov.w	r0, #4294967295
 800554c:	e7f4      	b.n	8005538 <IIS2MDC_MAG_GetOutputDataRate+0x24>
 800554e:	bf00      	nop
 8005550:	41200000 	.word	0x41200000
 8005554:	41a00000 	.word	0x41a00000
 8005558:	42480000 	.word	0x42480000
 800555c:	42c80000 	.word	0x42c80000

08005560 <IIS2MDC_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 8005560:	b513      	push	{r0, r1, r4, lr}
 8005562:	460c      	mov	r4, r1
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8005564:	301c      	adds	r0, #28
 8005566:	4669      	mov	r1, sp
 8005568:	f000 f944 	bl	80057f4 <iis2mdc_magnetic_raw_get>
 800556c:	b950      	cbnz	r0, 8005584 <IIS2MDC_MAG_GetAxesRaw+0x24>
  {
    return IIS2MDC_ERROR;
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800556e:	f8bd 3000 	ldrh.w	r3, [sp]
 8005572:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8005574:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005578:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 800557a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800557e:	80a3      	strh	r3, [r4, #4]

  return IIS2MDC_OK;
}
 8005580:	b002      	add	sp, #8
 8005582:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 8005584:	f04f 30ff 	mov.w	r0, #4294967295
 8005588:	e7fa      	b.n	8005580 <IIS2MDC_MAG_GetAxesRaw+0x20>

0800558a <IIS2MDC_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 800558a:	b513      	push	{r0, r1, r4, lr}
 800558c:	460c      	mov	r4, r1
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 800558e:	301c      	adds	r0, #28
 8005590:	4669      	mov	r1, sp
 8005592:	f000 f92f 	bl	80057f4 <iis2mdc_magnetic_raw_get>
 8005596:	bb38      	cbnz	r0, 80055e8 <IIS2MDC_MAG_GetAxes+0x5e>

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005598:	f9bd 3000 	ldrsh.w	r3, [sp]
 800559c:	ee07 3a10 	vmov	s14, r3
 80055a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80055a4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80055a8:	ee27 7a26 	vmul.f32	s14, s14, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80055ac:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80055b0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80055b4:	ed84 7a00 	vstr	s14, [r4]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80055b8:	ee07 3a10 	vmov	s14, r3
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80055bc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80055c0:	ee07 3a90 	vmov	s15, r3
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80055c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80055c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80055cc:	ee27 7a26 	vmul.f32	s14, s14, s13
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80055d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80055d4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80055d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80055dc:	ed84 7a01 	vstr	s14, [r4, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80055e0:	edc4 7a02 	vstr	s15, [r4, #8]

  return IIS2MDC_OK;
}
 80055e4:	b002      	add	sp, #8
 80055e6:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ec:	e7fa      	b.n	80055e4 <IIS2MDC_MAG_GetAxes+0x5a>

080055ee <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80055ee:	b430      	push	{r4, r5}
 80055f0:	4604      	mov	r4, r0
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80055f2:	6945      	ldr	r5, [r0, #20]
  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80055f4:	68a4      	ldr	r4, [r4, #8]
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80055f6:	7b00      	ldrb	r0, [r0, #12]
  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80055f8:	b924      	cbnz	r4, 8005604 <ReadMagRegWrap+0x16>
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80055fa:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80055fe:	46ac      	mov	ip, r5
  }
}
 8005600:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005602:	4760      	bx	ip
 8005604:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005608:	e7f9      	b.n	80055fe <ReadMagRegWrap+0x10>

0800560a <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800560a:	b430      	push	{r4, r5}
 800560c:	4604      	mov	r4, r0
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800560e:	6905      	ldr	r5, [r0, #16]
  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8005610:	68a4      	ldr	r4, [r4, #8]
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005612:	7b00      	ldrb	r0, [r0, #12]
  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8005614:	b924      	cbnz	r4, 8005620 <WriteMagRegWrap+0x16>
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005616:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800561a:	46ac      	mov	ip, r5
  }
}
 800561c:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800561e:	4760      	bx	ip
 8005620:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005624:	e7f9      	b.n	800561a <WriteMagRegWrap+0x10>

08005626 <IIS2MDC_MAG_Enable>:
{
 8005626:	b510      	push	{r4, lr}
  if (pObj->mag_is_enabled == 1U)
 8005628:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800562c:	2b01      	cmp	r3, #1
{
 800562e:	4604      	mov	r4, r0
  if (pObj->mag_is_enabled == 1U)
 8005630:	d008      	beq.n	8005644 <IIS2MDC_MAG_Enable+0x1e>
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 8005632:	2100      	movs	r1, #0
 8005634:	301c      	adds	r0, #28
 8005636:	f000 f881 	bl	800573c <iis2mdc_operating_mode_set>
 800563a:	b928      	cbnz	r0, 8005648 <IIS2MDC_MAG_Enable+0x22>
  pObj->mag_is_enabled = 1;
 800563c:	2301      	movs	r3, #1
 800563e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8005642:	bd10      	pop	{r4, pc}
    return IIS2MDC_OK;
 8005644:	2000      	movs	r0, #0
 8005646:	e7fc      	b.n	8005642 <IIS2MDC_MAG_Enable+0x1c>
    return IIS2MDC_ERROR;
 8005648:	f04f 30ff 	mov.w	r0, #4294967295
 800564c:	e7f9      	b.n	8005642 <IIS2MDC_MAG_Enable+0x1c>

0800564e <IIS2MDC_MAG_Disable>:
{
 800564e:	b510      	push	{r4, lr}
 8005650:	4604      	mov	r4, r0
  if (pObj->mag_is_enabled == 0U)
 8005652:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8005656:	b138      	cbz	r0, 8005668 <IIS2MDC_MAG_Disable+0x1a>
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8005658:	2102      	movs	r1, #2
 800565a:	f104 001c 	add.w	r0, r4, #28
 800565e:	f000 f86d 	bl	800573c <iis2mdc_operating_mode_set>
 8005662:	b910      	cbnz	r0, 800566a <IIS2MDC_MAG_Disable+0x1c>
  pObj->mag_is_enabled = 0;
 8005664:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 8005668:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 800566a:	f04f 30ff 	mov.w	r0, #4294967295
 800566e:	e7fb      	b.n	8005668 <IIS2MDC_MAG_Disable+0x1a>

08005670 <IIS2MDC_DeInit>:
{
 8005670:	b510      	push	{r4, lr}
 8005672:	4604      	mov	r4, r0
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 8005674:	f7ff ffeb 	bl	800564e <IIS2MDC_MAG_Disable>
 8005678:	b910      	cbnz	r0, 8005680 <IIS2MDC_DeInit+0x10>
  pObj->is_initialized = 0;
 800567a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 800567e:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 8005680:	f04f 30ff 	mov.w	r0, #4294967295
 8005684:	e7fb      	b.n	800567e <IIS2MDC_DeInit+0xe>

08005686 <IIS2MDC_Write_Reg>:
{
 8005686:	b507      	push	{r0, r1, r2, lr}
  if (iis2mdc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != IIS2MDC_OK)
 8005688:	2301      	movs	r3, #1
{
 800568a:	f88d 2007 	strb.w	r2, [sp, #7]
  if (iis2mdc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != IIS2MDC_OK)
 800568e:	301c      	adds	r0, #28
 8005690:	f10d 0207 	add.w	r2, sp, #7
 8005694:	f000 f84b 	bl	800572e <iis2mdc_write_reg>
 8005698:	3800      	subs	r0, #0
 800569a:	bf18      	it	ne
 800569c:	2001      	movne	r0, #1
}
 800569e:	4240      	negs	r0, r0
 80056a0:	b003      	add	sp, #12
 80056a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080056a8 <IIS2MDC_RegisterBusIO>:
{
 80056a8:	b510      	push	{r4, lr}
  if (pObj == NULL)
 80056aa:	4604      	mov	r4, r0
 80056ac:	b910      	cbnz	r0, 80056b4 <IIS2MDC_RegisterBusIO+0xc>
    ret = IIS2MDC_ERROR;
 80056ae:	f04f 30ff 	mov.w	r0, #4294967295
}
 80056b2:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit    = pIO->DeInit;
 80056b4:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80056b6:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80056b8:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 80056ba:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80056bc:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 80056be:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 80056c0:	7b0a      	ldrb	r2, [r1, #12]
 80056c2:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80056c4:	690a      	ldr	r2, [r1, #16]
 80056c6:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80056c8:	694a      	ldr	r2, [r1, #20]
 80056ca:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80056cc:	698a      	ldr	r2, [r1, #24]
 80056ce:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80056d0:	4a11      	ldr	r2, [pc, #68]	; (8005718 <IIS2MDC_RegisterBusIO+0x70>)
 80056d2:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80056d4:	4a11      	ldr	r2, [pc, #68]	; (800571c <IIS2MDC_RegisterBusIO+0x74>)
 80056d6:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle    = pObj;
 80056d8:	6240      	str	r0, [r0, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0e7      	beq.n	80056ae <IIS2MDC_RegisterBusIO+0x6>
    else if (pObj->IO.Init() != IIS2MDC_OK)
 80056de:	4798      	blx	r3
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d1e4      	bne.n	80056ae <IIS2MDC_RegisterBusIO+0x6>
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 80056e4:	68a3      	ldr	r3, [r4, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0e3      	beq.n	80056b2 <IIS2MDC_RegisterBusIO+0xa>
        if (pObj->is_initialized == 0U)
 80056ea:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80056ee:	2a00      	cmp	r2, #0
 80056f0:	d1df      	bne.n	80056b2 <IIS2MDC_RegisterBusIO+0xa>
          if (pObj->IO.BusType == IIS2MDC_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d109      	bne.n	800570a <IIS2MDC_RegisterBusIO+0x62>
            if (IIS2MDC_Write_Reg(pObj, IIS2MDC_CFG_REG_C, data) != IIS2MDC_OK)
 80056f6:	2234      	movs	r2, #52	; 0x34
 80056f8:	2162      	movs	r1, #98	; 0x62
 80056fa:	4620      	mov	r0, r4
 80056fc:	f7ff ffc3 	bl	8005686 <IIS2MDC_Write_Reg>
            if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8005700:	3800      	subs	r0, #0
 8005702:	bf18      	it	ne
 8005704:	2001      	movne	r0, #1
 8005706:	4240      	negs	r0, r0
  return ret;
 8005708:	e7d3      	b.n	80056b2 <IIS2MDC_RegisterBusIO+0xa>
            if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 800570a:	2101      	movs	r1, #1
 800570c:	f104 001c 	add.w	r0, r4, #28
 8005710:	f000 f8aa 	bl	8005868 <iis2mdc_i2c_interface_set>
 8005714:	e7f4      	b.n	8005700 <IIS2MDC_RegisterBusIO+0x58>
 8005716:	bf00      	nop
 8005718:	080055ef 	.word	0x080055ef
 800571c:	0800560b 	.word	0x0800560b

08005720 <iis2mdc_read_reg>:
  *
  */
int32_t iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005720:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005722:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005726:	46a4      	mov	ip, r4
  return ret;
}
 8005728:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800572c:	4760      	bx	ip

0800572e <iis2mdc_write_reg>:
  *
  */
int32_t iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800572e:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005730:	6804      	ldr	r4, [r0, #0]
 8005732:	6880      	ldr	r0, [r0, #8]
 8005734:	46a4      	mov	ip, r4
  return ret;
}
 8005736:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800573a:	4760      	bx	ip

0800573c <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 800573c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800573e:	2301      	movs	r3, #1
{
 8005740:	460d      	mov	r5, r1
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8005742:	aa01      	add	r2, sp, #4
 8005744:	2160      	movs	r1, #96	; 0x60
{
 8005746:	4604      	mov	r4, r0
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8005748:	f7ff ffea 	bl	8005720 <iis2mdc_read_reg>

  if (ret == 0) {
 800574c:	b958      	cbnz	r0, 8005766 <iis2mdc_operating_mode_set+0x2a>
    reg.md = (uint8_t)val;
 800574e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005752:	f365 0301 	bfi	r3, r5, #0, #2
 8005756:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800575a:	aa01      	add	r2, sp, #4
 800575c:	2301      	movs	r3, #1
 800575e:	2160      	movs	r1, #96	; 0x60
 8005760:	4620      	mov	r0, r4
 8005762:	f7ff ffe4 	bl	800572e <iis2mdc_write_reg>
  }

  return ret;
}
 8005766:	b003      	add	sp, #12
 8005768:	bd30      	pop	{r4, r5, pc}

0800576a <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 800576a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800576c:	2301      	movs	r3, #1
{
 800576e:	460d      	mov	r5, r1
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8005770:	aa01      	add	r2, sp, #4
 8005772:	2160      	movs	r1, #96	; 0x60
{
 8005774:	4604      	mov	r4, r0
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8005776:	f7ff ffd3 	bl	8005720 <iis2mdc_read_reg>

  if (ret == 0) {
 800577a:	b958      	cbnz	r0, 8005794 <iis2mdc_data_rate_set+0x2a>
    reg.odr = (uint8_t)val;
 800577c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005780:	f365 0383 	bfi	r3, r5, #2, #2
 8005784:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8005788:	aa01      	add	r2, sp, #4
 800578a:	2301      	movs	r3, #1
 800578c:	2160      	movs	r1, #96	; 0x60
 800578e:	4620      	mov	r0, r4
 8005790:	f7ff ffcd 	bl	800572e <iis2mdc_write_reg>
  }

  return ret;
}
 8005794:	b003      	add	sp, #12
 8005796:	bd30      	pop	{r4, r5, pc}

08005798 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 8005798:	b513      	push	{r0, r1, r4, lr}
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800579a:	2301      	movs	r3, #1
 800579c:	aa01      	add	r2, sp, #4
{
 800579e:	460c      	mov	r4, r1
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80057a0:	2160      	movs	r1, #96	; 0x60
 80057a2:	f7ff ffbd 	bl	8005720 <iis2mdc_read_reg>

  switch (reg.odr) {
 80057a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80057aa:	f3c3 0281 	ubfx	r2, r3, #2, #2
 80057ae:	2a02      	cmp	r2, #2
 80057b0:	d007      	beq.n	80057c2 <iis2mdc_data_rate_get+0x2a>
 80057b2:	2a03      	cmp	r2, #3
 80057b4:	d005      	beq.n	80057c2 <iis2mdc_data_rate_get+0x2a>
 80057b6:	2a01      	cmp	r2, #1
 80057b8:	d003      	beq.n	80057c2 <iis2mdc_data_rate_get+0x2a>
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 80057ba:	2300      	movs	r3, #0
 80057bc:	7023      	strb	r3, [r4, #0]
      *val = IIS2MDC_ODR_10Hz;
      break;
  }

  return ret;
}
 80057be:	b002      	add	sp, #8
 80057c0:	bd10      	pop	{r4, pc}
      *val = IIS2MDC_ODR_100Hz;
 80057c2:	7022      	strb	r2, [r4, #0]
  return ret;
 80057c4:	e7fb      	b.n	80057be <iis2mdc_data_rate_get+0x26>

080057c6 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80057c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80057c8:	2301      	movs	r3, #1
{
 80057ca:	460d      	mov	r5, r1
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80057cc:	aa01      	add	r2, sp, #4
 80057ce:	2162      	movs	r1, #98	; 0x62
{
 80057d0:	4604      	mov	r4, r0
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80057d2:	f7ff ffa5 	bl	8005720 <iis2mdc_read_reg>

  if (ret == 0) {
 80057d6:	b958      	cbnz	r0, 80057f0 <iis2mdc_block_data_update_set+0x2a>
    reg.bdu = val;
 80057d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80057dc:	f365 1304 	bfi	r3, r5, #4, #1
 80057e0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80057e4:	aa01      	add	r2, sp, #4
 80057e6:	2301      	movs	r3, #1
 80057e8:	2162      	movs	r1, #98	; 0x62
 80057ea:	4620      	mov	r0, r4
 80057ec:	f7ff ff9f 	bl	800572e <iis2mdc_write_reg>
  }

  return ret;
}
 80057f0:	b003      	add	sp, #12
 80057f2:	bd30      	pop	{r4, r5, pc}

080057f4 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80057f4:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[6];
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 80057f6:	2306      	movs	r3, #6
{
 80057f8:	460c      	mov	r4, r1
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 80057fa:	466a      	mov	r2, sp
 80057fc:	2168      	movs	r1, #104	; 0x68
 80057fe:	f7ff ff8f 	bl	8005720 <iis2mdc_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8005802:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8005806:	f89d 3000 	ldrb.w	r3, [sp]
 800580a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800580e:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8005810:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005814:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8005818:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800581c:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 800581e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005822:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005826:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800582a:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 800582c:	b002      	add	sp, #8
 800582e:	bd10      	pop	{r4, pc}

08005830 <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005830:	460a      	mov	r2, r1
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 8005832:	2301      	movs	r3, #1
 8005834:	214f      	movs	r1, #79	; 0x4f
 8005836:	f7ff bf73 	b.w	8005720 <iis2mdc_read_reg>

0800583a <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800583a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800583c:	2301      	movs	r3, #1
{
 800583e:	460d      	mov	r5, r1
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8005840:	aa01      	add	r2, sp, #4
 8005842:	2162      	movs	r1, #98	; 0x62
{
 8005844:	4604      	mov	r4, r0
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8005846:	f7ff ff6b 	bl	8005720 <iis2mdc_read_reg>

  if (ret == 0) {
 800584a:	b958      	cbnz	r0, 8005864 <iis2mdc_self_test_set+0x2a>
    reg.self_test = val;
 800584c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005850:	f365 0341 	bfi	r3, r5, #1, #1
 8005854:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8005858:	aa01      	add	r2, sp, #4
 800585a:	2301      	movs	r3, #1
 800585c:	2162      	movs	r1, #98	; 0x62
 800585e:	4620      	mov	r0, r4
 8005860:	f7ff ff65 	bl	800572e <iis2mdc_write_reg>
  }

  return ret;
}
 8005864:	b003      	add	sp, #12
 8005866:	bd30      	pop	{r4, r5, pc}

08005868 <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 8005868:	b537      	push	{r0, r1, r2, r4, r5, lr}
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800586a:	2301      	movs	r3, #1
{
 800586c:	460d      	mov	r5, r1
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800586e:	aa01      	add	r2, sp, #4
 8005870:	2162      	movs	r1, #98	; 0x62
{
 8005872:	4604      	mov	r4, r0
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8005874:	f7ff ff54 	bl	8005720 <iis2mdc_read_reg>

  if (ret == 0) {
 8005878:	b958      	cbnz	r0, 8005892 <iis2mdc_i2c_interface_set+0x2a>
    reg.i2c_dis = (uint8_t)val;
 800587a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800587e:	f365 1345 	bfi	r3, r5, #5, #1
 8005882:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8005886:	aa01      	add	r2, sp, #4
 8005888:	2301      	movs	r3, #1
 800588a:	2162      	movs	r1, #98	; 0x62
 800588c:	4620      	mov	r0, r4
 800588e:	f7ff ff4e 	bl	800572e <iis2mdc_write_reg>
  }

  return ret;
}
 8005892:	b003      	add	sp, #12
 8005894:	bd30      	pop	{r4, r5, pc}

08005896 <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8005896:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005898:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800589c:	46a4      	mov	ip, r4
  return ret;
}
 800589e:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80058a2:	4760      	bx	ip

080058a4 <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 80058a4:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80058a6:	6804      	ldr	r4, [r0, #0]
 80058a8:	6880      	ldr	r0, [r0, #8]
 80058aa:	46a4      	mov	ip, r4
  return ret;
}
 80058ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80058b0:	4760      	bx	ip

080058b2 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 80058b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80058b4:	2301      	movs	r3, #1
{
 80058b6:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80058b8:	aa01      	add	r2, sp, #4
 80058ba:	2110      	movs	r1, #16
{
 80058bc:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80058be:	f7ff ffea 	bl	8005896 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0) {
 80058c2:	b958      	cbnz	r0, 80058dc <ism330dhcx_xl_full_scale_set+0x2a>
    ctrl1_xl.fs_xl = (uint8_t)val;
 80058c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80058c8:	f365 0383 	bfi	r3, r5, #2, #2
 80058cc:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 80058d0:	aa01      	add	r2, sp, #4
 80058d2:	2301      	movs	r3, #1
 80058d4:	2110      	movs	r1, #16
 80058d6:	4620      	mov	r0, r4
 80058d8:	f7ff ffe4 	bl	80058a4 <ism330dhcx_write_reg>
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 80058dc:	b003      	add	sp, #12
 80058de:	bd30      	pop	{r4, r5, pc}

080058e0 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 80058e0:	b513      	push	{r0, r1, r4, lr}
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80058e2:	2301      	movs	r3, #1
 80058e4:	aa01      	add	r2, sp, #4
{
 80058e6:	460c      	mov	r4, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80058e8:	2110      	movs	r1, #16
 80058ea:	f7ff ffd4 	bl	8005896 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl) {
 80058ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80058f2:	f3c3 0281 	ubfx	r2, r3, #2, #2
 80058f6:	2a02      	cmp	r2, #2
 80058f8:	d007      	beq.n	800590a <ism330dhcx_xl_full_scale_get+0x2a>
 80058fa:	2a03      	cmp	r2, #3
 80058fc:	d005      	beq.n	800590a <ism330dhcx_xl_full_scale_get+0x2a>
 80058fe:	2a01      	cmp	r2, #1
 8005900:	d003      	beq.n	800590a <ism330dhcx_xl_full_scale_get+0x2a>
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8005902:	2300      	movs	r3, #0
 8005904:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_2g;
      break;
  }

  return ret;
}
 8005906:	b002      	add	sp, #8
 8005908:	bd10      	pop	{r4, pc}
      *val = ISM330DHCX_8g;
 800590a:	7022      	strb	r2, [r4, #0]
  return ret;
 800590c:	e7fb      	b.n	8005906 <ism330dhcx_xl_full_scale_get+0x26>

0800590e <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 800590e:	b513      	push	{r0, r1, r4, lr}
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005910:	2301      	movs	r3, #1
{
 8005912:	460c      	mov	r4, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005914:	aa01      	add	r2, sp, #4
 8005916:	2110      	movs	r1, #16
 8005918:	f7ff ffbd 	bl	8005896 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl) {
 800591c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005920:	091b      	lsrs	r3, r3, #4
 8005922:	2b0b      	cmp	r3, #11
 8005924:	d81f      	bhi.n	8005966 <ism330dhcx_xl_data_rate_get+0x58>
 8005926:	e8df f003 	tbb	[pc, r3]
 800592a:	061e      	.short	0x061e
 800592c:	100e0c0a 	.word	0x100e0c0a
 8005930:	18161412 	.word	0x18161412
 8005934:	1c1a      	.short	0x1c1a
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
      break;

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8005936:	2301      	movs	r3, #1
    case ISM330DHCX_XL_ODR_6Hz5:
      *val = ISM330DHCX_XL_ODR_6Hz5;
      break;

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8005938:	7023      	strb	r3, [r4, #0]
      break;
  }

  return ret;
}
 800593a:	b002      	add	sp, #8
 800593c:	bd10      	pop	{r4, pc}
      *val = ISM330DHCX_XL_ODR_26Hz;
 800593e:	2302      	movs	r3, #2
 8005940:	e7fa      	b.n	8005938 <ism330dhcx_xl_data_rate_get+0x2a>
      *val = ISM330DHCX_XL_ODR_52Hz;
 8005942:	2303      	movs	r3, #3
 8005944:	e7f8      	b.n	8005938 <ism330dhcx_xl_data_rate_get+0x2a>
      *val = ISM330DHCX_XL_ODR_104Hz;
 8005946:	2304      	movs	r3, #4
 8005948:	e7f6      	b.n	8005938 <ism330dhcx_xl_data_rate_get+0x2a>
      *val = ISM330DHCX_XL_ODR_208Hz;
 800594a:	2305      	movs	r3, #5
 800594c:	e7f4      	b.n	8005938 <ism330dhcx_xl_data_rate_get+0x2a>
      *val = ISM330DHCX_XL_ODR_417Hz;
 800594e:	2306      	movs	r3, #6
 8005950:	e7f2      	b.n	8005938 <ism330dhcx_xl_data_rate_get+0x2a>
      *val = ISM330DHCX_XL_ODR_833Hz;
 8005952:	2307      	movs	r3, #7
 8005954:	e7f0      	b.n	8005938 <ism330dhcx_xl_data_rate_get+0x2a>
      *val = ISM330DHCX_XL_ODR_1667Hz;
 8005956:	2308      	movs	r3, #8
 8005958:	e7ee      	b.n	8005938 <ism330dhcx_xl_data_rate_get+0x2a>
      *val = ISM330DHCX_XL_ODR_3333Hz;
 800595a:	2309      	movs	r3, #9
 800595c:	e7ec      	b.n	8005938 <ism330dhcx_xl_data_rate_get+0x2a>
      *val = ISM330DHCX_XL_ODR_6667Hz;
 800595e:	230a      	movs	r3, #10
 8005960:	e7ea      	b.n	8005938 <ism330dhcx_xl_data_rate_get+0x2a>
      *val = ISM330DHCX_XL_ODR_6Hz5;
 8005962:	230b      	movs	r3, #11
 8005964:	e7e8      	b.n	8005938 <ism330dhcx_xl_data_rate_get+0x2a>
      *val = ISM330DHCX_XL_ODR_OFF;
 8005966:	2300      	movs	r3, #0
 8005968:	e7e6      	b.n	8005938 <ism330dhcx_xl_data_rate_get+0x2a>

0800596a <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 800596a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800596c:	2301      	movs	r3, #1
{
 800596e:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005970:	aa01      	add	r2, sp, #4
 8005972:	2111      	movs	r1, #17
{
 8005974:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005976:	f7ff ff8e 	bl	8005896 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0) {
 800597a:	b958      	cbnz	r0, 8005994 <ism330dhcx_gy_full_scale_set+0x2a>
    ctrl2_g.fs_g = (uint8_t)val;
 800597c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005980:	f365 0303 	bfi	r3, r5, #0, #4
 8005984:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8005988:	aa01      	add	r2, sp, #4
 800598a:	2301      	movs	r3, #1
 800598c:	2111      	movs	r1, #17
 800598e:	4620      	mov	r0, r4
 8005990:	f7ff ff88 	bl	80058a4 <ism330dhcx_write_reg>
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
}
 8005994:	b003      	add	sp, #12
 8005996:	bd30      	pop	{r4, r5, pc}

08005998 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8005998:	b513      	push	{r0, r1, r4, lr}
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800599a:	2301      	movs	r3, #1
{
 800599c:	460c      	mov	r4, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800599e:	aa01      	add	r2, sp, #4
 80059a0:	2111      	movs	r1, #17
 80059a2:	f7ff ff78 	bl	8005896 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g) {
 80059a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	2b0c      	cmp	r3, #12
 80059b0:	d808      	bhi.n	80059c4 <ism330dhcx_gy_full_scale_get+0x2c>
 80059b2:	e8df f003 	tbb	[pc, r3]
 80059b6:	130b      	.short	0x130b
 80059b8:	070d0707 	.word	0x070d0707
 80059bc:	070f0707 	.word	0x070f0707
 80059c0:	0707      	.short	0x0707
 80059c2:	11          	.byte	0x11
 80059c3:	00          	.byte	0x00
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 80059c4:	2302      	movs	r3, #2
    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
      break;

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 80059c6:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_125dps;
      break;
  }

  return ret;
}
 80059c8:	b002      	add	sp, #8
 80059ca:	bd10      	pop	{r4, pc}
      *val = ISM330DHCX_250dps;
 80059cc:	2300      	movs	r3, #0
 80059ce:	e7fa      	b.n	80059c6 <ism330dhcx_gy_full_scale_get+0x2e>
      *val = ISM330DHCX_500dps;
 80059d0:	2304      	movs	r3, #4
 80059d2:	e7f8      	b.n	80059c6 <ism330dhcx_gy_full_scale_get+0x2e>
      *val = ISM330DHCX_1000dps;
 80059d4:	2308      	movs	r3, #8
 80059d6:	e7f6      	b.n	80059c6 <ism330dhcx_gy_full_scale_get+0x2e>
      *val = ISM330DHCX_2000dps;
 80059d8:	230c      	movs	r3, #12
 80059da:	e7f4      	b.n	80059c6 <ism330dhcx_gy_full_scale_get+0x2e>
      *val = ISM330DHCX_4000dps;
 80059dc:	2301      	movs	r3, #1
 80059de:	e7f2      	b.n	80059c6 <ism330dhcx_gy_full_scale_get+0x2e>

080059e0 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 80059e0:	b513      	push	{r0, r1, r4, lr}
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80059e2:	2301      	movs	r3, #1
{
 80059e4:	460c      	mov	r4, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80059e6:	aa01      	add	r2, sp, #4
 80059e8:	2111      	movs	r1, #17
 80059ea:	f7ff ff54 	bl	8005896 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g) {
 80059ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80059f2:	091b      	lsrs	r3, r3, #4
 80059f4:	2b0a      	cmp	r3, #10
 80059f6:	d81d      	bhi.n	8005a34 <ism330dhcx_gy_data_rate_get+0x54>
 80059f8:	e8df f003 	tbb	[pc, r3]
 80059fc:	0c0a061c 	.word	0x0c0a061c
 8005a00:	1412100e 	.word	0x1412100e
 8005a04:	1816      	.short	0x1816
 8005a06:	1a          	.byte	0x1a
 8005a07:	00          	.byte	0x00
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
      break;

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8005a08:	2301      	movs	r3, #1
    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
      break;

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005a0a:	7023      	strb	r3, [r4, #0]
      break;
  }

  return ret;
}
 8005a0c:	b002      	add	sp, #8
 8005a0e:	bd10      	pop	{r4, pc}
      *val = ISM330DHCX_GY_ODR_26Hz;
 8005a10:	2302      	movs	r3, #2
 8005a12:	e7fa      	b.n	8005a0a <ism330dhcx_gy_data_rate_get+0x2a>
      *val = ISM330DHCX_GY_ODR_52Hz;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e7f8      	b.n	8005a0a <ism330dhcx_gy_data_rate_get+0x2a>
      *val = ISM330DHCX_GY_ODR_104Hz;
 8005a18:	2304      	movs	r3, #4
 8005a1a:	e7f6      	b.n	8005a0a <ism330dhcx_gy_data_rate_get+0x2a>
      *val = ISM330DHCX_GY_ODR_208Hz;
 8005a1c:	2305      	movs	r3, #5
 8005a1e:	e7f4      	b.n	8005a0a <ism330dhcx_gy_data_rate_get+0x2a>
      *val = ISM330DHCX_GY_ODR_417Hz;
 8005a20:	2306      	movs	r3, #6
 8005a22:	e7f2      	b.n	8005a0a <ism330dhcx_gy_data_rate_get+0x2a>
      *val = ISM330DHCX_GY_ODR_833Hz;
 8005a24:	2307      	movs	r3, #7
 8005a26:	e7f0      	b.n	8005a0a <ism330dhcx_gy_data_rate_get+0x2a>
      *val = ISM330DHCX_GY_ODR_1667Hz;
 8005a28:	2308      	movs	r3, #8
 8005a2a:	e7ee      	b.n	8005a0a <ism330dhcx_gy_data_rate_get+0x2a>
      *val = ISM330DHCX_GY_ODR_3333Hz;
 8005a2c:	2309      	movs	r3, #9
 8005a2e:	e7ec      	b.n	8005a0a <ism330dhcx_gy_data_rate_get+0x2a>
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8005a30:	230a      	movs	r3, #10
 8005a32:	e7ea      	b.n	8005a0a <ism330dhcx_gy_data_rate_get+0x2a>
      *val = ISM330DHCX_GY_ODR_OFF;
 8005a34:	2300      	movs	r3, #0
 8005a36:	e7e8      	b.n	8005a0a <ism330dhcx_gy_data_rate_get+0x2a>

08005a38 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8005a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005a3a:	2301      	movs	r3, #1
{
 8005a3c:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005a3e:	aa01      	add	r2, sp, #4
 8005a40:	2112      	movs	r1, #18
{
 8005a42:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005a44:	f7ff ff27 	bl	8005896 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8005a48:	b958      	cbnz	r0, 8005a62 <ism330dhcx_block_data_update_set+0x2a>
    ctrl3_c.bdu = (uint8_t)val;
 8005a4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005a4e:	f365 1386 	bfi	r3, r5, #6, #1
 8005a52:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8005a56:	aa01      	add	r2, sp, #4
 8005a58:	2301      	movs	r3, #1
 8005a5a:	2112      	movs	r1, #18
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f7ff ff21 	bl	80058a4 <ism330dhcx_write_reg>
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8005a62:	b003      	add	sp, #12
 8005a64:	bd30      	pop	{r4, r5, pc}

08005a66 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8005a66:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8005a68:	2306      	movs	r3, #6
{
 8005a6a:	460c      	mov	r4, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8005a6c:	466a      	mov	r2, sp
 8005a6e:	2122      	movs	r1, #34	; 0x22
 8005a70:	f7ff ff11 	bl	8005896 <ism330dhcx_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005a74:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8005a78:	f89d 3000 	ldrb.w	r3, [sp]
 8005a7c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005a80:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005a82:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005a86:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8005a8a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005a8e:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005a90:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005a94:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005a98:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005a9c:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 8005a9e:	b002      	add	sp, #8
 8005aa0:	bd10      	pop	{r4, pc}

08005aa2 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8005aa2:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8005aa4:	2306      	movs	r3, #6
{
 8005aa6:	460c      	mov	r4, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8005aa8:	466a      	mov	r2, sp
 8005aaa:	2128      	movs	r1, #40	; 0x28
 8005aac:	f7ff fef3 	bl	8005896 <ism330dhcx_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005ab0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8005ab4:	f89d 3000 	ldrb.w	r3, [sp]
 8005ab8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005abc:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005abe:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005ac2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8005ac6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005aca:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005acc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005ad0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005ad4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005ad8:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 8005ada:	b002      	add	sp, #8
 8005adc:	bd10      	pop	{r4, pc}

08005ade <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8005ade:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8005ae0:	2301      	movs	r3, #1
{
 8005ae2:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8005ae4:	aa01      	add	r2, sp, #4
 8005ae6:	4619      	mov	r1, r3
{
 8005ae8:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8005aea:	f7ff fed4 	bl	8005896 <ism330dhcx_read_reg>
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 8005aee:	b958      	cbnz	r0, 8005b08 <ism330dhcx_mem_bank_set+0x2a>
    func_cfg_access.reg_access = (uint8_t)val;
 8005af0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005af4:	f365 1387 	bfi	r3, r5, #6, #2
 8005af8:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8005afc:	2301      	movs	r3, #1
 8005afe:	aa01      	add	r2, sp, #4
 8005b00:	4619      	mov	r1, r3
 8005b02:	4620      	mov	r0, r4
 8005b04:	f7ff fece 	bl	80058a4 <ism330dhcx_write_reg>
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
}
 8005b08:	b003      	add	sp, #12
 8005b0a:	bd30      	pop	{r4, r5, pc}

08005b0c <ism330dhcx_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_data_ready_mode_set(stmdev_ctx_t *ctx,
                                       ism330dhcx_dataready_pulsed_t val)
{
 8005b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_COUNTER_BDR_REG1,
 8005b0e:	2301      	movs	r3, #1
{
 8005b10:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_COUNTER_BDR_REG1,
 8005b12:	aa01      	add	r2, sp, #4
 8005b14:	210b      	movs	r1, #11
{
 8005b16:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_COUNTER_BDR_REG1,
 8005b18:	f7ff febd 	bl	8005896 <ism330dhcx_read_reg>
                            (uint8_t *)&counter_bdr_reg1, 1);

  if (ret == 0) {
 8005b1c:	b958      	cbnz	r0, 8005b36 <ism330dhcx_data_ready_mode_set+0x2a>
    counter_bdr_reg1.dataready_pulsed = (uint8_t)val;
 8005b1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005b22:	f365 13c7 	bfi	r3, r5, #7, #1
 8005b26:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_COUNTER_BDR_REG1,
 8005b2a:	aa01      	add	r2, sp, #4
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	210b      	movs	r1, #11
 8005b30:	4620      	mov	r0, r4
 8005b32:	f7ff feb7 	bl	80058a4 <ism330dhcx_write_reg>
                               (uint8_t *)&counter_bdr_reg1, 1);
  }

  return ret;
}
 8005b36:	b003      	add	sp, #12
 8005b38:	bd30      	pop	{r4, r5, pc}

08005b3a <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005b3a:	460a      	mov	r2, r1
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	210f      	movs	r1, #15
 8005b40:	f7ff bea9 	b.w	8005896 <ism330dhcx_read_reg>

08005b44 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005b46:	2301      	movs	r3, #1
{
 8005b48:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005b4a:	aa01      	add	r2, sp, #4
 8005b4c:	2112      	movs	r1, #18
{
 8005b4e:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005b50:	f7ff fea1 	bl	8005896 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8005b54:	b958      	cbnz	r0, 8005b6e <ism330dhcx_reset_set+0x2a>
    ctrl3_c.sw_reset = (uint8_t)val;
 8005b56:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005b5a:	f365 0300 	bfi	r3, r5, #0, #1
 8005b5e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8005b62:	aa01      	add	r2, sp, #4
 8005b64:	2301      	movs	r3, #1
 8005b66:	2112      	movs	r1, #18
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f7ff fe9b 	bl	80058a4 <ism330dhcx_write_reg>
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8005b6e:	b003      	add	sp, #12
 8005b70:	bd30      	pop	{r4, r5, pc}

08005b72 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005b72:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005b74:	2301      	movs	r3, #1
{
 8005b76:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005b78:	aa01      	add	r2, sp, #4
 8005b7a:	2112      	movs	r1, #18
{
 8005b7c:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005b7e:	f7ff fe8a 	bl	8005896 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8005b82:	b958      	cbnz	r0, 8005b9c <ism330dhcx_auto_increment_set+0x2a>
    ctrl3_c.if_inc = (uint8_t)val;
 8005b84:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005b88:	f365 0382 	bfi	r3, r5, #2, #1
 8005b8c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8005b90:	aa01      	add	r2, sp, #4
 8005b92:	2301      	movs	r3, #1
 8005b94:	2112      	movs	r1, #18
 8005b96:	4620      	mov	r0, r4
 8005b98:	f7ff fe84 	bl	80058a4 <ism330dhcx_write_reg>
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8005b9c:	b003      	add	sp, #12
 8005b9e:	bd30      	pop	{r4, r5, pc}

08005ba0 <ism330dhcx_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                         ism330dhcx_hp_slope_xl_en_t val)
{
 8005ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL8_XL,
 8005ba2:	2301      	movs	r3, #1
{
 8005ba4:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL8_XL,
 8005ba6:	aa01      	add	r2, sp, #4
 8005ba8:	2117      	movs	r1, #23
{
 8005baa:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL8_XL,
 8005bac:	f7ff fe73 	bl	8005896 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl8_xl, 1);

  if (ret == 0) {
 8005bb0:	b9a8      	cbnz	r0, 8005bde <ism330dhcx_xl_hp_path_on_out_set+0x3e>
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 8005bb2:	f3c5 1300 	ubfx	r3, r5, #4, #1
 8005bb6:	f3c5 1140 	ubfx	r1, r5, #5, #1
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8005bc0:	ea43 1145 	orr.w	r1, r3, r5, lsl #5
 8005bc4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005bc8:	f003 030b 	and.w	r3, r3, #11
 8005bcc:	4319      	orrs	r1, r3
 8005bce:	f88d 1004 	strb.w	r1, [sp, #4]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL8_XL,
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	aa01      	add	r2, sp, #4
 8005bd6:	2117      	movs	r1, #23
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f7ff fe63 	bl	80058a4 <ism330dhcx_write_reg>
                               (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
}
 8005bde:	b003      	add	sp, #12
 8005be0:	bd30      	pop	{r4, r5, pc}

08005be2 <ism330dhcx_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8005be2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_fifo_ctrl1_t fifo_ctrl1;
  ism330dhcx_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8005be4:	2301      	movs	r3, #1
{
 8005be6:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8005be8:	aa01      	add	r2, sp, #4
 8005bea:	2108      	movs	r1, #8
{
 8005bec:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8005bee:	f7ff fe52 	bl	8005896 <ism330dhcx_read_reg>
                            (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0) {
 8005bf2:	b9a8      	cbnz	r0, 8005c20 <ism330dhcx_fifo_watermark_set+0x3e>
    fifo_ctrl2.wtm = (uint8_t)(val / 256U) & 0x01U;
 8005bf4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005bf8:	0a2b      	lsrs	r3, r5, #8
 8005bfa:	f363 0200 	bfi	r2, r3, #0, #1
 8005bfe:	f88d 2004 	strb.w	r2, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8005c02:	2301      	movs	r3, #1
 8005c04:	aa01      	add	r2, sp, #4
 8005c06:	2108      	movs	r1, #8
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f7ff fe4b 	bl	80058a4 <ism330dhcx_write_reg>
                               (uint8_t *)&fifo_ctrl2, 1);
  }

  if (ret == 0) {
 8005c0e:	b938      	cbnz	r0, 8005c20 <ism330dhcx_fifo_watermark_set+0x3e>
    fifo_ctrl1.wtm = (uint8_t)(val - (fifo_ctrl2.wtm * 256U));
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL1,
 8005c10:	2301      	movs	r3, #1
 8005c12:	466a      	mov	r2, sp
 8005c14:	2107      	movs	r1, #7
 8005c16:	4620      	mov	r0, r4
    fifo_ctrl1.wtm = (uint8_t)(val - (fifo_ctrl2.wtm * 256U));
 8005c18:	f88d 5000 	strb.w	r5, [sp]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL1,
 8005c1c:	f7ff fe42 	bl	80058a4 <ism330dhcx_write_reg>
                               (uint8_t *)&fifo_ctrl1, 1);
  }

  return ret;
}
 8005c20:	b003      	add	sp, #12
 8005c22:	bd30      	pop	{r4, r5, pc}

08005c24 <ism330dhcx_fifo_stop_on_wtm_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_stop_on_wtm_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 8005c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8005c26:	2301      	movs	r3, #1
{
 8005c28:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8005c2a:	aa01      	add	r2, sp, #4
 8005c2c:	2108      	movs	r1, #8
{
 8005c2e:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8005c30:	f7ff fe31 	bl	8005896 <ism330dhcx_read_reg>
                            (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0) {
 8005c34:	b958      	cbnz	r0, 8005c4e <ism330dhcx_fifo_stop_on_wtm_set+0x2a>
    fifo_ctrl2.stop_on_wtm = (uint8_t)val;
 8005c36:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005c3a:	f365 13c7 	bfi	r3, r5, #7, #1
 8005c3e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8005c42:	aa01      	add	r2, sp, #4
 8005c44:	2301      	movs	r3, #1
 8005c46:	2108      	movs	r1, #8
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f7ff fe2b 	bl	80058a4 <ism330dhcx_write_reg>
                               (uint8_t *)&fifo_ctrl2, 1);
  }

  return ret;
}
 8005c4e:	b003      	add	sp, #12
 8005c50:	bd30      	pop	{r4, r5, pc}

08005c52 <ism330dhcx_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_xl_t val)
{
 8005c52:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8005c54:	2301      	movs	r3, #1
{
 8005c56:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8005c58:	aa01      	add	r2, sp, #4
 8005c5a:	2109      	movs	r1, #9
{
 8005c5c:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8005c5e:	f7ff fe1a 	bl	8005896 <ism330dhcx_read_reg>
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0) {
 8005c62:	b958      	cbnz	r0, 8005c7c <ism330dhcx_fifo_xl_batch_set+0x2a>
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 8005c64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005c68:	f365 0303 	bfi	r3, r5, #0, #4
 8005c6c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8005c70:	aa01      	add	r2, sp, #4
 8005c72:	2301      	movs	r3, #1
 8005c74:	2109      	movs	r1, #9
 8005c76:	4620      	mov	r0, r4
 8005c78:	f7ff fe14 	bl	80058a4 <ism330dhcx_write_reg>
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
}
 8005c7c:	b003      	add	sp, #12
 8005c7e:	bd30      	pop	{r4, r5, pc}

08005c80 <ism330dhcx_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_gy_t val)
{
 8005c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8005c82:	2301      	movs	r3, #1
{
 8005c84:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8005c86:	aa01      	add	r2, sp, #4
 8005c88:	2109      	movs	r1, #9
{
 8005c8a:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8005c8c:	f7ff fe03 	bl	8005896 <ism330dhcx_read_reg>
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0) {
 8005c90:	b958      	cbnz	r0, 8005caa <ism330dhcx_fifo_gy_batch_set+0x2a>
    fifo_ctrl3.bdr_gy = (uint8_t)val;
 8005c92:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005c96:	f365 1307 	bfi	r3, r5, #4, #4
 8005c9a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8005c9e:	aa01      	add	r2, sp, #4
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	2109      	movs	r1, #9
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f7ff fdfd 	bl	80058a4 <ism330dhcx_write_reg>
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
}
 8005caa:	b003      	add	sp, #12
 8005cac:	bd30      	pop	{r4, r5, pc}

08005cae <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 8005cae:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8005cb0:	2301      	movs	r3, #1
{
 8005cb2:	460d      	mov	r5, r1
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8005cb4:	aa01      	add	r2, sp, #4
 8005cb6:	210a      	movs	r1, #10
{
 8005cb8:	4604      	mov	r4, r0
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8005cba:	f7ff fdec 	bl	8005896 <ism330dhcx_read_reg>
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 8005cbe:	b958      	cbnz	r0, 8005cd8 <ism330dhcx_fifo_mode_set+0x2a>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8005cc0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005cc4:	f365 0302 	bfi	r3, r5, #0, #3
 8005cc8:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8005ccc:	aa01      	add	r2, sp, #4
 8005cce:	2301      	movs	r3, #1
 8005cd0:	210a      	movs	r1, #10
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f7ff fde6 	bl	80058a4 <ism330dhcx_write_reg>
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
}
 8005cd8:	b003      	add	sp, #12
 8005cda:	bd30      	pop	{r4, r5, pc}

08005cdc <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	460d      	mov	r5, r1
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005ce0:	2102      	movs	r1, #2
{
 8005ce2:	4604      	mov	r4, r0
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005ce4:	f7ff fefb 	bl	8005ade <ism330dhcx_mem_bank_set>

  if (ret == 0) {
 8005ce8:	b998      	cbnz	r0, 8005d12 <ism330dhcx_fsm_enable_get+0x36>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 8005cea:	2301      	movs	r3, #1
 8005cec:	462a      	mov	r2, r5
 8005cee:	2146      	movs	r1, #70	; 0x46
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f7ff fdd0 	bl	8005896 <ism330dhcx_read_reg>
                              (uint8_t *)&val->fsm_enable_a, 1);
  }

  if (ret == 0) {
 8005cf6:	b960      	cbnz	r0, 8005d12 <ism330dhcx_fsm_enable_get+0x36>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	18ea      	adds	r2, r5, r3
 8005cfc:	2147      	movs	r1, #71	; 0x47
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f7ff fdc9 	bl	8005896 <ism330dhcx_read_reg>
                              (uint8_t *)&val->fsm_enable_b, 1);
  }

  if (ret == 0) {
 8005d04:	b928      	cbnz	r0, 8005d12 <ism330dhcx_fsm_enable_get+0x36>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005d06:	4601      	mov	r1, r0
 8005d08:	4620      	mov	r0, r4
  }

  return ret;
}
 8005d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005d0e:	f7ff bee6 	b.w	8005ade <ism330dhcx_mem_bank_set>
}
 8005d12:	bd38      	pop	{r3, r4, r5, pc}

08005d14 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8005d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d16:	460c      	mov	r4, r1
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005d18:	2102      	movs	r1, #2
{
 8005d1a:	4605      	mov	r5, r0
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005d1c:	f7ff fedf 	bl	8005ade <ism330dhcx_mem_bank_set>

  if (ret == 0) {
 8005d20:	b950      	cbnz	r0, 8005d38 <ism330dhcx_fsm_data_rate_get+0x24>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8005d22:	2301      	movs	r3, #1
 8005d24:	aa01      	add	r2, sp, #4
 8005d26:	215f      	movs	r1, #95	; 0x5f
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f7ff fdb4 	bl	8005896 <ism330dhcx_read_reg>
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 8005d2e:	b918      	cbnz	r0, 8005d38 <ism330dhcx_fsm_data_rate_get+0x24>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005d30:	4601      	mov	r1, r0
 8005d32:	4628      	mov	r0, r5
 8005d34:	f7ff fed3 	bl	8005ade <ism330dhcx_mem_bank_set>
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 8005d38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005d3c:	f3c3 02c1 	ubfx	r2, r3, #3, #2
 8005d40:	2a02      	cmp	r2, #2
 8005d42:	d007      	beq.n	8005d54 <ism330dhcx_fsm_data_rate_get+0x40>
 8005d44:	2a03      	cmp	r2, #3
 8005d46:	d005      	beq.n	8005d54 <ism330dhcx_fsm_data_rate_get+0x40>
 8005d48:	2a01      	cmp	r2, #1
 8005d4a:	d003      	beq.n	8005d54 <ism330dhcx_fsm_data_rate_get+0x40>
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_ODR_FSM_12Hz5;
      break;
  }

  return ret;
}
 8005d50:	b003      	add	sp, #12
 8005d52:	bd30      	pop	{r4, r5, pc}
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8005d54:	7022      	strb	r2, [r4, #0]
  return ret;
 8005d56:	e7fb      	b.n	8005d50 <ism330dhcx_fsm_data_rate_get+0x3c>

08005d58 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d5a:	460d      	mov	r5, r1
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005d5c:	2102      	movs	r1, #2
{
 8005d5e:	4604      	mov	r4, r0
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005d60:	f7ff febd 	bl	8005ade <ism330dhcx_mem_bank_set>

  if (ret == 0) {
 8005d64:	b978      	cbnz	r0, 8005d86 <ism330dhcx_mlc_get+0x2e>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 8005d66:	2301      	movs	r3, #1
 8005d68:	aa01      	add	r2, sp, #4
 8005d6a:	2105      	movs	r1, #5
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f7ff fd92 	bl	8005896 <ism330dhcx_read_reg>
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 8005d72:	b940      	cbnz	r0, 8005d86 <ism330dhcx_mlc_get+0x2e>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005d74:	4601      	mov	r1, r0
 8005d76:	4620      	mov	r0, r4
 8005d78:	f7ff feb1 	bl	8005ade <ism330dhcx_mem_bank_set>
    *val  = reg.mlc_en;
 8005d7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005d80:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005d84:	702b      	strb	r3, [r5, #0]
  }

  return ret;
}
 8005d86:	b003      	add	sp, #12
 8005d88:	bd30      	pop	{r4, r5, pc}

08005d8a <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8005d8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d8c:	460c      	mov	r4, r1
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005d8e:	2102      	movs	r1, #2
{
 8005d90:	4605      	mov	r5, r0
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005d92:	f7ff fea4 	bl	8005ade <ism330dhcx_mem_bank_set>

  if (ret == 0) {
 8005d96:	b9a8      	cbnz	r0, 8005dc4 <ism330dhcx_mlc_data_rate_get+0x3a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8005d98:	2301      	movs	r3, #1
 8005d9a:	aa01      	add	r2, sp, #4
 8005d9c:	2160      	movs	r1, #96	; 0x60
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f7ff fd79 	bl	8005896 <ism330dhcx_read_reg>
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 8005da4:	b970      	cbnz	r0, 8005dc4 <ism330dhcx_mlc_data_rate_get+0x3a>
    switch (reg.mlc_odr) {
 8005da6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005daa:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8005dae:	2a02      	cmp	r2, #2
 8005db0:	d00a      	beq.n	8005dc8 <ism330dhcx_mlc_data_rate_get+0x3e>
 8005db2:	2a03      	cmp	r2, #3
 8005db4:	d008      	beq.n	8005dc8 <ism330dhcx_mlc_data_rate_get+0x3e>
 8005db6:	2a01      	cmp	r2, #1
 8005db8:	d006      	beq.n	8005dc8 <ism330dhcx_mlc_data_rate_get+0x3e>
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8005dba:	7020      	strb	r0, [r4, #0]
      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
        break;
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f7ff fe8d 	bl	8005ade <ism330dhcx_mem_bank_set>
  }

  return ret;
}
 8005dc4:	b003      	add	sp, #12
 8005dc6:	bd30      	pop	{r4, r5, pc}
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8005dc8:	7022      	strb	r2, [r4, #0]
        break;
 8005dca:	e7f7      	b.n	8005dbc <ism330dhcx_mlc_data_rate_get+0x32>

08005dcc <ism330dhcx_xl_data_rate_set>:
{
 8005dcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dce:	460d      	mov	r5, r1
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8005dd0:	a901      	add	r1, sp, #4
{
 8005dd2:	4604      	mov	r4, r0
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8005dd4:	f7ff ff82 	bl	8005cdc <ism330dhcx_fsm_enable_get>
  if (ret == 0) {
 8005dd8:	bb98      	cbnz	r0, 8005e42 <ism330dhcx_xl_data_rate_set+0x76>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005dda:	f89d 2004 	ldrb.w	r2, [sp, #4]
          fsm_enable.fsm_enable_a.fsm2_en  |
 8005dde:	f3c2 0140 	ubfx	r1, r2, #1, #1
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005de2:	f3c2 0300 	ubfx	r3, r2, #0, #1
 8005de6:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_a.fsm3_en  |
 8005de8:	f3c2 0180 	ubfx	r1, r2, #2, #1
          fsm_enable.fsm_enable_a.fsm2_en  |
 8005dec:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_a.fsm4_en  |
 8005dee:	f3c2 01c0 	ubfx	r1, r2, #3, #1
          fsm_enable.fsm_enable_a.fsm3_en  |
 8005df2:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_a.fsm5_en  |
 8005df4:	f3c2 1100 	ubfx	r1, r2, #4, #1
          fsm_enable.fsm_enable_a.fsm4_en  |
 8005df8:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_a.fsm6_en  |
 8005dfa:	f3c2 1140 	ubfx	r1, r2, #5, #1
          fsm_enable.fsm_enable_a.fsm5_en  |
 8005dfe:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_a.fsm7_en  |
 8005e00:	f3c2 1180 	ubfx	r1, r2, #6, #1
          fsm_enable.fsm_enable_a.fsm6_en  |
 8005e04:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_a.fsm7_en  |
 8005e06:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
          fsm_enable.fsm_enable_b.fsm9_en  |
 8005e0a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005e0e:	f3c2 0100 	ubfx	r1, r2, #0, #1
          fsm_enable.fsm_enable_a.fsm8_en  |
 8005e12:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm10_en |
 8005e14:	f3c2 0140 	ubfx	r1, r2, #1, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 8005e18:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm11_en |
 8005e1a:	f3c2 0180 	ubfx	r1, r2, #2, #1
          fsm_enable.fsm_enable_b.fsm10_en |
 8005e1e:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm12_en |
 8005e20:	f3c2 01c0 	ubfx	r1, r2, #3, #1
          fsm_enable.fsm_enable_b.fsm11_en |
 8005e24:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm13_en |
 8005e26:	f3c2 1100 	ubfx	r1, r2, #4, #1
          fsm_enable.fsm_enable_b.fsm12_en |
 8005e2a:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm14_en |
 8005e2c:	f3c2 1140 	ubfx	r1, r2, #5, #1
          fsm_enable.fsm_enable_b.fsm13_en |
 8005e30:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 8005e32:	f3c2 1180 	ubfx	r1, r2, #6, #1
          fsm_enable.fsm_enable_b.fsm14_en |
 8005e36:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 8005e38:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005e3c:	07db      	lsls	r3, r3, #31
 8005e3e:	d402      	bmi.n	8005e46 <ism330dhcx_xl_data_rate_set+0x7a>
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8005e40:	2000      	movs	r0, #0
        switch (fsm_odr) {
 8005e42:	462e      	mov	r6, r5
 8005e44:	e012      	b.n	8005e6c <ism330dhcx_xl_data_rate_set+0xa0>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8005e46:	f10d 0101 	add.w	r1, sp, #1
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f7ff ff62 	bl	8005d14 <ism330dhcx_fsm_data_rate_get>
      if (ret == 0) {
 8005e50:	2800      	cmp	r0, #0
 8005e52:	d1f6      	bne.n	8005e42 <ism330dhcx_xl_data_rate_set+0x76>
        switch (fsm_odr) {
 8005e54:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d8f2      	bhi.n	8005e42 <ism330dhcx_xl_data_rate_set+0x76>
 8005e5c:	e8df f003 	tbb	[pc, r3]
 8005e60:	2b272302 	.word	0x2b272302
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8005e64:	2d01      	cmp	r5, #1
 8005e66:	462e      	mov	r6, r5
 8005e68:	bf38      	it	cc
 8005e6a:	2601      	movcc	r6, #1
  mlc_enable = PROPERTY_DISABLE;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f88d 3002 	strb.w	r3, [sp, #2]
  if (ret == 0) {
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d149      	bne.n	8005f0a <ism330dhcx_xl_data_rate_set+0x13e>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8005e76:	f10d 0102 	add.w	r1, sp, #2
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f7ff ff6c 	bl	8005d58 <ism330dhcx_mlc_get>
    if ( mlc_enable == PROPERTY_ENABLE ) {
 8005e80:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d13e      	bne.n	8005f06 <ism330dhcx_xl_data_rate_set+0x13a>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8005e88:	f10d 0103 	add.w	r1, sp, #3
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f7ff ff7c 	bl	8005d8a <ism330dhcx_mlc_data_rate_get>
      if (ret == 0) {
 8005e92:	2800      	cmp	r0, #0
 8005e94:	d139      	bne.n	8005f0a <ism330dhcx_xl_data_rate_set+0x13e>
        switch (mlc_odr) {
 8005e96:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d812      	bhi.n	8005ec4 <ism330dhcx_xl_data_rate_set+0xf8>
 8005e9e:	e8df f003 	tbb	[pc, r3]
 8005ea2:	260e      	.short	0x260e
 8005ea4:	2e2a      	.short	0x2e2a
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8005ea6:	2d01      	cmp	r5, #1
 8005ea8:	d8ca      	bhi.n	8005e40 <ism330dhcx_xl_data_rate_set+0x74>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005eaa:	2602      	movs	r6, #2
 8005eac:	e7de      	b.n	8005e6c <ism330dhcx_xl_data_rate_set+0xa0>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8005eae:	2d02      	cmp	r5, #2
 8005eb0:	d8c6      	bhi.n	8005e40 <ism330dhcx_xl_data_rate_set+0x74>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005eb2:	2603      	movs	r6, #3
 8005eb4:	e7da      	b.n	8005e6c <ism330dhcx_xl_data_rate_set+0xa0>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8005eb6:	2d03      	cmp	r5, #3
 8005eb8:	d8c2      	bhi.n	8005e40 <ism330dhcx_xl_data_rate_set+0x74>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005eba:	2604      	movs	r6, #4
 8005ebc:	e7d6      	b.n	8005e6c <ism330dhcx_xl_data_rate_set+0xa0>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8005ebe:	2d01      	cmp	r5, #1
 8005ec0:	bf38      	it	cc
 8005ec2:	2501      	movcc	r5, #1
        switch (mlc_odr) {
 8005ec4:	462e      	mov	r6, r5
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	466a      	mov	r2, sp
 8005eca:	2110      	movs	r1, #16
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f7ff fce2 	bl	8005896 <ism330dhcx_read_reg>
  if (ret == 0) {
 8005ed2:	b9d0      	cbnz	r0, 8005f0a <ism330dhcx_xl_data_rate_set+0x13e>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8005ed4:	f89d 3000 	ldrb.w	r3, [sp]
 8005ed8:	f366 1307 	bfi	r3, r6, #4, #4
 8005edc:	f88d 3000 	strb.w	r3, [sp]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005ee0:	466a      	mov	r2, sp
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	2110      	movs	r1, #16
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	f7ff fcdc 	bl	80058a4 <ism330dhcx_write_reg>
  return ret;
 8005eec:	e00d      	b.n	8005f0a <ism330dhcx_xl_data_rate_set+0x13e>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8005eee:	2d02      	cmp	r5, #2
 8005ef0:	bf38      	it	cc
 8005ef2:	2502      	movcc	r5, #2
 8005ef4:	e7e6      	b.n	8005ec4 <ism330dhcx_xl_data_rate_set+0xf8>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8005ef6:	2d03      	cmp	r5, #3
 8005ef8:	bf38      	it	cc
 8005efa:	2503      	movcc	r5, #3
 8005efc:	e7e2      	b.n	8005ec4 <ism330dhcx_xl_data_rate_set+0xf8>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8005efe:	2d04      	cmp	r5, #4
 8005f00:	bf38      	it	cc
 8005f02:	2504      	movcc	r5, #4
 8005f04:	e7de      	b.n	8005ec4 <ism330dhcx_xl_data_rate_set+0xf8>
  if (ret == 0) {
 8005f06:	2800      	cmp	r0, #0
 8005f08:	d0dd      	beq.n	8005ec6 <ism330dhcx_xl_data_rate_set+0xfa>
}
 8005f0a:	b002      	add	sp, #8
 8005f0c:	bd70      	pop	{r4, r5, r6, pc}

08005f0e <ism330dhcx_gy_data_rate_set>:
{
 8005f0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f10:	460d      	mov	r5, r1
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8005f12:	a901      	add	r1, sp, #4
{
 8005f14:	4604      	mov	r4, r0
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8005f16:	f7ff fee1 	bl	8005cdc <ism330dhcx_fsm_enable_get>
  if (ret == 0) {
 8005f1a:	bb98      	cbnz	r0, 8005f84 <ism330dhcx_gy_data_rate_set+0x76>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005f1c:	f89d 2004 	ldrb.w	r2, [sp, #4]
          fsm_enable.fsm_enable_a.fsm2_en  |
 8005f20:	f3c2 0140 	ubfx	r1, r2, #1, #1
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005f24:	f3c2 0300 	ubfx	r3, r2, #0, #1
 8005f28:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_a.fsm3_en  |
 8005f2a:	f3c2 0180 	ubfx	r1, r2, #2, #1
          fsm_enable.fsm_enable_a.fsm2_en  |
 8005f2e:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_a.fsm4_en  |
 8005f30:	f3c2 01c0 	ubfx	r1, r2, #3, #1
          fsm_enable.fsm_enable_a.fsm3_en  |
 8005f34:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_a.fsm5_en  |
 8005f36:	f3c2 1100 	ubfx	r1, r2, #4, #1
          fsm_enable.fsm_enable_a.fsm4_en  |
 8005f3a:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_a.fsm6_en  |
 8005f3c:	f3c2 1140 	ubfx	r1, r2, #5, #1
          fsm_enable.fsm_enable_a.fsm5_en  |
 8005f40:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_a.fsm7_en  |
 8005f42:	f3c2 1180 	ubfx	r1, r2, #6, #1
          fsm_enable.fsm_enable_a.fsm6_en  |
 8005f46:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_a.fsm7_en  |
 8005f48:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
          fsm_enable.fsm_enable_b.fsm9_en  |
 8005f4c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005f50:	f3c2 0100 	ubfx	r1, r2, #0, #1
          fsm_enable.fsm_enable_a.fsm8_en  |
 8005f54:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm10_en |
 8005f56:	f3c2 0140 	ubfx	r1, r2, #1, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 8005f5a:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm11_en |
 8005f5c:	f3c2 0180 	ubfx	r1, r2, #2, #1
          fsm_enable.fsm_enable_b.fsm10_en |
 8005f60:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm12_en |
 8005f62:	f3c2 01c0 	ubfx	r1, r2, #3, #1
          fsm_enable.fsm_enable_b.fsm11_en |
 8005f66:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm13_en |
 8005f68:	f3c2 1100 	ubfx	r1, r2, #4, #1
          fsm_enable.fsm_enable_b.fsm12_en |
 8005f6c:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm14_en |
 8005f6e:	f3c2 1140 	ubfx	r1, r2, #5, #1
          fsm_enable.fsm_enable_b.fsm13_en |
 8005f72:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 8005f74:	f3c2 1180 	ubfx	r1, r2, #6, #1
          fsm_enable.fsm_enable_b.fsm14_en |
 8005f78:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 8005f7a:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005f7e:	07db      	lsls	r3, r3, #31
 8005f80:	d402      	bmi.n	8005f88 <ism330dhcx_gy_data_rate_set+0x7a>
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8005f82:	2000      	movs	r0, #0
        switch (fsm_odr) {
 8005f84:	462e      	mov	r6, r5
 8005f86:	e012      	b.n	8005fae <ism330dhcx_gy_data_rate_set+0xa0>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8005f88:	f10d 0101 	add.w	r1, sp, #1
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f7ff fec1 	bl	8005d14 <ism330dhcx_fsm_data_rate_get>
      if (ret == 0) {
 8005f92:	2800      	cmp	r0, #0
 8005f94:	d1f6      	bne.n	8005f84 <ism330dhcx_gy_data_rate_set+0x76>
        switch (fsm_odr) {
 8005f96:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d8f2      	bhi.n	8005f84 <ism330dhcx_gy_data_rate_set+0x76>
 8005f9e:	e8df f003 	tbb	[pc, r3]
 8005fa2:	2302      	.short	0x2302
 8005fa4:	2b27      	.short	0x2b27
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8005fa6:	2d01      	cmp	r5, #1
 8005fa8:	462e      	mov	r6, r5
 8005faa:	bf38      	it	cc
 8005fac:	2601      	movcc	r6, #1
  mlc_enable = PROPERTY_DISABLE;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f88d 3002 	strb.w	r3, [sp, #2]
  if (ret == 0) {
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	d149      	bne.n	800604c <ism330dhcx_gy_data_rate_set+0x13e>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8005fb8:	f10d 0102 	add.w	r1, sp, #2
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f7ff fecb 	bl	8005d58 <ism330dhcx_mlc_get>
    if ( mlc_enable == PROPERTY_ENABLE ) {
 8005fc2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d13e      	bne.n	8006048 <ism330dhcx_gy_data_rate_set+0x13a>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8005fca:	f10d 0103 	add.w	r1, sp, #3
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f7ff fedb 	bl	8005d8a <ism330dhcx_mlc_data_rate_get>
      if (ret == 0) {
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d139      	bne.n	800604c <ism330dhcx_gy_data_rate_set+0x13e>
        switch (mlc_odr) {
 8005fd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	d812      	bhi.n	8006006 <ism330dhcx_gy_data_rate_set+0xf8>
 8005fe0:	e8df f003 	tbb	[pc, r3]
 8005fe4:	2e2a260e 	.word	0x2e2a260e
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8005fe8:	2d01      	cmp	r5, #1
 8005fea:	d8ca      	bhi.n	8005f82 <ism330dhcx_gy_data_rate_set+0x74>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005fec:	2602      	movs	r6, #2
 8005fee:	e7de      	b.n	8005fae <ism330dhcx_gy_data_rate_set+0xa0>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8005ff0:	2d02      	cmp	r5, #2
 8005ff2:	d8c6      	bhi.n	8005f82 <ism330dhcx_gy_data_rate_set+0x74>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005ff4:	2603      	movs	r6, #3
 8005ff6:	e7da      	b.n	8005fae <ism330dhcx_gy_data_rate_set+0xa0>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8005ff8:	2d03      	cmp	r5, #3
 8005ffa:	d8c2      	bhi.n	8005f82 <ism330dhcx_gy_data_rate_set+0x74>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005ffc:	2604      	movs	r6, #4
 8005ffe:	e7d6      	b.n	8005fae <ism330dhcx_gy_data_rate_set+0xa0>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8006000:	2d01      	cmp	r5, #1
 8006002:	bf38      	it	cc
 8006004:	2501      	movcc	r5, #1
        switch (mlc_odr) {
 8006006:	462e      	mov	r6, r5
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8006008:	2301      	movs	r3, #1
 800600a:	466a      	mov	r2, sp
 800600c:	2111      	movs	r1, #17
 800600e:	4620      	mov	r0, r4
 8006010:	f7ff fc41 	bl	8005896 <ism330dhcx_read_reg>
  if (ret == 0) {
 8006014:	b9d0      	cbnz	r0, 800604c <ism330dhcx_gy_data_rate_set+0x13e>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8006016:	f89d 3000 	ldrb.w	r3, [sp]
 800601a:	f366 1307 	bfi	r3, r6, #4, #4
 800601e:	f88d 3000 	strb.w	r3, [sp]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8006022:	466a      	mov	r2, sp
 8006024:	2301      	movs	r3, #1
 8006026:	2111      	movs	r1, #17
 8006028:	4620      	mov	r0, r4
 800602a:	f7ff fc3b 	bl	80058a4 <ism330dhcx_write_reg>
  return ret;
 800602e:	e00d      	b.n	800604c <ism330dhcx_gy_data_rate_set+0x13e>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8006030:	2d02      	cmp	r5, #2
 8006032:	bf38      	it	cc
 8006034:	2502      	movcc	r5, #2
 8006036:	e7e6      	b.n	8006006 <ism330dhcx_gy_data_rate_set+0xf8>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8006038:	2d03      	cmp	r5, #3
 800603a:	bf38      	it	cc
 800603c:	2503      	movcc	r5, #3
 800603e:	e7e2      	b.n	8006006 <ism330dhcx_gy_data_rate_set+0xf8>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8006040:	2d04      	cmp	r5, #4
 8006042:	bf38      	it	cc
 8006044:	2504      	movcc	r5, #4
 8006046:	e7de      	b.n	8006006 <ism330dhcx_gy_data_rate_set+0xf8>
  if (ret == 0) {
 8006048:	2800      	cmp	r0, #0
 800604a:	d0dd      	beq.n	8006008 <ism330dhcx_gy_data_rate_set+0xfa>
}
 800604c:	b002      	add	sp, #8
 800604e:	bd70      	pop	{r4, r5, r6, pc}

08006050 <LPS22HH_GetCapabilities>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
  Capabilities->Pressure    = 1;
  Capabilities->Temperature = 1;
 8006050:	f240 1301 	movw	r3, #257	; 0x101
 8006054:	600b      	str	r3, [r1, #0]
  Capabilities->LowPower    = 0;
  Capabilities->HumMaxOdr   = 0.0f;
 8006056:	2300      	movs	r3, #0
 8006058:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 800605a:	4b02      	ldr	r3, [pc, #8]	; (8006064 <LPS22HH_GetCapabilities+0x14>)
 800605c:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 200.0f;
 800605e:	60cb      	str	r3, [r1, #12]
  return LPS22HH_OK;
}
 8006060:	2000      	movs	r0, #0
 8006062:	4770      	bx	lr
 8006064:	43480000 	.word	0x43480000

08006068 <LPS22HH_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006068:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800606c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006074:	d928      	bls.n	80060c8 <LPS22HH_SetOutputDataRate_When_Disabled+0x60>
 8006076:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800607a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800607e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006082:	d923      	bls.n	80060cc <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8006084:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8006088:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800608c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006090:	d91e      	bls.n	80060d0 <LPS22HH_SetOutputDataRate_When_Disabled+0x68>
 8006092:	eddf 7a12 	vldr	s15, [pc, #72]	; 80060dc <LPS22HH_SetOutputDataRate_When_Disabled+0x74>
 8006096:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800609a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609e:	d919      	bls.n	80060d4 <LPS22HH_SetOutputDataRate_When_Disabled+0x6c>
 80060a0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80060e0 <LPS22HH_SetOutputDataRate_When_Disabled+0x78>
 80060a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80060a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ac:	d914      	bls.n	80060d8 <LPS22HH_SetOutputDataRate_When_Disabled+0x70>
 80060ae:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80060e4 <LPS22HH_SetOutputDataRate_When_Disabled+0x7c>
 80060b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80060b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ba:	bf94      	ite	ls
 80060bc:	2306      	movls	r3, #6
 80060be:	2307      	movhi	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80060c0:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
                 : (Odr <=  75.0f) ? LPS22HH_75_Hz
                 : (Odr <= 100.0f) ? LPS22HH_100_Hz
                 :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
}
 80060c4:	2000      	movs	r0, #0
 80060c6:	4770      	bx	lr
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80060c8:	2301      	movs	r3, #1
 80060ca:	e7f9      	b.n	80060c0 <LPS22HH_SetOutputDataRate_When_Disabled+0x58>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e7f7      	b.n	80060c0 <LPS22HH_SetOutputDataRate_When_Disabled+0x58>
 80060d0:	2303      	movs	r3, #3
 80060d2:	e7f5      	b.n	80060c0 <LPS22HH_SetOutputDataRate_When_Disabled+0x58>
 80060d4:	2304      	movs	r3, #4
 80060d6:	e7f3      	b.n	80060c0 <LPS22HH_SetOutputDataRate_When_Disabled+0x58>
 80060d8:	2305      	movs	r3, #5
 80060da:	e7f1      	b.n	80060c0 <LPS22HH_SetOutputDataRate_When_Disabled+0x58>
 80060dc:	42480000 	.word	0x42480000
 80060e0:	42960000 	.word	0x42960000
 80060e4:	42c80000 	.word	0x42c80000

080060e8 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80060e8:	b410      	push	{r4}
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80060ea:	6944      	ldr	r4, [r0, #20]
 80060ec:	7b00      	ldrb	r0, [r0, #12]
 80060ee:	46a4      	mov	ip, r4
}
 80060f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80060f4:	4760      	bx	ip

080060f6 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80060f6:	b410      	push	{r4}
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80060f8:	6904      	ldr	r4, [r0, #16]
 80060fa:	7b00      	ldrb	r0, [r0, #12]
 80060fc:	46a4      	mov	ip, r4
}
 80060fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006102:	4760      	bx	ip

08006104 <LPS22HH_Init>:
{
 8006104:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 8006106:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
 800610a:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 800610c:	bb23      	cbnz	r3, 8006158 <LPS22HH_Init+0x54>
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 800610e:	f100 051c 	add.w	r5, r0, #28
 8006112:	2111      	movs	r1, #17
 8006114:	4628      	mov	r0, r5
 8006116:	f000 fabf 	bl	8006698 <lps22hh_i3c_interface_set>
 800611a:	b110      	cbz	r0, 8006122 <LPS22HH_Init+0x1e>
      return LPS22HH_ERROR;
 800611c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006120:	bd38      	pop	{r3, r4, r5, pc}
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8006122:	2110      	movs	r1, #16
 8006124:	4628      	mov	r0, r5
 8006126:	f000 f9e4 	bl	80064f2 <lps22hh_data_rate_set>
 800612a:	4601      	mov	r1, r0
 800612c:	2800      	cmp	r0, #0
 800612e:	d1f5      	bne.n	800611c <LPS22HH_Init+0x18>
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8006130:	4628      	mov	r0, r5
 8006132:	f000 fa9a 	bl	800666a <lps22hh_lp_bandwidth_set>
 8006136:	2800      	cmp	r0, #0
 8006138:	d1f0      	bne.n	800611c <LPS22HH_Init+0x18>
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 800613a:	2101      	movs	r1, #1
 800613c:	4628      	mov	r0, r5
 800613e:	f000 f9c1 	bl	80064c4 <lps22hh_block_data_update_set>
 8006142:	2800      	cmp	r0, #0
 8006144:	d1ea      	bne.n	800611c <LPS22HH_Init+0x18>
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8006146:	2101      	movs	r1, #1
 8006148:	4628      	mov	r0, r5
 800614a:	f000 fa77 	bl	800663c <lps22hh_auto_increment_set>
 800614e:	2800      	cmp	r0, #0
 8006150:	d1e4      	bne.n	800611c <LPS22HH_Init+0x18>
  pObj->last_odr = LPS22HH_25_Hz;
 8006152:	2303      	movs	r3, #3
 8006154:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  pObj->is_initialized = 1U;
 8006158:	2301      	movs	r3, #1
 800615a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return LPS22HH_OK;
 800615e:	2000      	movs	r0, #0
 8006160:	e7de      	b.n	8006120 <LPS22HH_Init+0x1c>

08006162 <LPS22HH_ReadID>:
{
 8006162:	b508      	push	{r3, lr}
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8006164:	301c      	adds	r0, #28
 8006166:	f000 fa64 	bl	8006632 <lps22hh_device_id_get>
 800616a:	3800      	subs	r0, #0
 800616c:	bf18      	it	ne
 800616e:	2001      	movne	r0, #1
}
 8006170:	4240      	negs	r0, r0
 8006172:	bd08      	pop	{r3, pc}

08006174 <LPS22HH_GetOutputDataRate>:
{
 8006174:	b513      	push	{r0, r1, r4, lr}
 8006176:	460c      	mov	r4, r1
  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8006178:	301c      	adds	r0, #28
 800617a:	f10d 0107 	add.w	r1, sp, #7
 800617e:	f000 f9e6 	bl	800654e <lps22hh_data_rate_get>
 8006182:	b9e0      	cbnz	r0, 80061be <LPS22HH_GetOutputDataRate+0x4a>
  switch (odr_low_level)
 8006184:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006188:	2b07      	cmp	r3, #7
 800618a:	d818      	bhi.n	80061be <LPS22HH_GetOutputDataRate+0x4a>
 800618c:	e8df f003 	tbb	[pc, r3]
 8006190:	0d0b0804 	.word	0x0d0b0804
 8006194:	1513110f 	.word	0x1513110f
      *Odr = 0.0f;
 8006198:	2300      	movs	r3, #0
      *Odr = 200.0f;
 800619a:	6023      	str	r3, [r4, #0]
}
 800619c:	b002      	add	sp, #8
 800619e:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 80061a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80061a4:	e7f9      	b.n	800619a <LPS22HH_GetOutputDataRate+0x26>
      *Odr = 10.0f;
 80061a6:	4b07      	ldr	r3, [pc, #28]	; (80061c4 <LPS22HH_GetOutputDataRate+0x50>)
 80061a8:	e7f7      	b.n	800619a <LPS22HH_GetOutputDataRate+0x26>
      *Odr = 25.0f;
 80061aa:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <LPS22HH_GetOutputDataRate+0x54>)
 80061ac:	e7f5      	b.n	800619a <LPS22HH_GetOutputDataRate+0x26>
      *Odr = 50.0f;
 80061ae:	4b07      	ldr	r3, [pc, #28]	; (80061cc <LPS22HH_GetOutputDataRate+0x58>)
 80061b0:	e7f3      	b.n	800619a <LPS22HH_GetOutputDataRate+0x26>
      *Odr = 75.0f;
 80061b2:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <LPS22HH_GetOutputDataRate+0x5c>)
 80061b4:	e7f1      	b.n	800619a <LPS22HH_GetOutputDataRate+0x26>
      *Odr = 100.0f;
 80061b6:	4b07      	ldr	r3, [pc, #28]	; (80061d4 <LPS22HH_GetOutputDataRate+0x60>)
 80061b8:	e7ef      	b.n	800619a <LPS22HH_GetOutputDataRate+0x26>
      *Odr = 200.0f;
 80061ba:	4b07      	ldr	r3, [pc, #28]	; (80061d8 <LPS22HH_GetOutputDataRate+0x64>)
 80061bc:	e7ed      	b.n	800619a <LPS22HH_GetOutputDataRate+0x26>
  switch (odr_low_level)
 80061be:	f04f 30ff 	mov.w	r0, #4294967295
 80061c2:	e7eb      	b.n	800619c <LPS22HH_GetOutputDataRate+0x28>
 80061c4:	41200000 	.word	0x41200000
 80061c8:	41c80000 	.word	0x41c80000
 80061cc:	42480000 	.word	0x42480000
 80061d0:	42960000 	.word	0x42960000
 80061d4:	42c80000 	.word	0x42c80000
 80061d8:	43480000 	.word	0x43480000

080061dc <LPS22HH_PRESS_GetOutputDataRate>:
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80061dc:	f7ff bfca 	b.w	8006174 <LPS22HH_GetOutputDataRate>

080061e0 <LPS22HH_SetOutputDataRate_When_Enabled>:
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80061e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80061e4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80061e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	4604      	mov	r4, r0
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80061f0:	d934      	bls.n	800625c <LPS22HH_SetOutputDataRate_When_Enabled+0x7c>
 80061f2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80061f6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80061fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061fe:	d92f      	bls.n	8006260 <LPS22HH_SetOutputDataRate_When_Enabled+0x80>
 8006200:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8006204:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620c:	d92a      	bls.n	8006264 <LPS22HH_SetOutputDataRate_When_Enabled+0x84>
 800620e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8006278 <LPS22HH_SetOutputDataRate_When_Enabled+0x98>
 8006212:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800621a:	d925      	bls.n	8006268 <LPS22HH_SetOutputDataRate_When_Enabled+0x88>
 800621c:	eddf 7a17 	vldr	s15, [pc, #92]	; 800627c <LPS22HH_SetOutputDataRate_When_Enabled+0x9c>
 8006220:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006228:	d920      	bls.n	800626c <LPS22HH_SetOutputDataRate_When_Enabled+0x8c>
 800622a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8006280 <LPS22HH_SetOutputDataRate_When_Enabled+0xa0>
 800622e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006236:	bf94      	ite	ls
 8006238:	2106      	movls	r1, #6
 800623a:	2107      	movhi	r1, #7
  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 800623c:	f104 051c 	add.w	r5, r4, #28
 8006240:	4628      	mov	r0, r5
 8006242:	f000 f956 	bl	80064f2 <lps22hh_data_rate_set>
 8006246:	b998      	cbnz	r0, 8006270 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006248:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 800624c:	4628      	mov	r0, r5
 800624e:	f000 f97e 	bl	800654e <lps22hh_data_rate_get>
 8006252:	3800      	subs	r0, #0
 8006254:	bf18      	it	ne
 8006256:	2001      	movne	r0, #1
 8006258:	4240      	negs	r0, r0
}
 800625a:	bd38      	pop	{r3, r4, r5, pc}
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800625c:	2101      	movs	r1, #1
 800625e:	e7ed      	b.n	800623c <LPS22HH_SetOutputDataRate_When_Enabled+0x5c>
 8006260:	2102      	movs	r1, #2
 8006262:	e7eb      	b.n	800623c <LPS22HH_SetOutputDataRate_When_Enabled+0x5c>
 8006264:	2103      	movs	r1, #3
 8006266:	e7e9      	b.n	800623c <LPS22HH_SetOutputDataRate_When_Enabled+0x5c>
 8006268:	2104      	movs	r1, #4
 800626a:	e7e7      	b.n	800623c <LPS22HH_SetOutputDataRate_When_Enabled+0x5c>
 800626c:	2105      	movs	r1, #5
 800626e:	e7e5      	b.n	800623c <LPS22HH_SetOutputDataRate_When_Enabled+0x5c>
    return LPS22HH_ERROR;
 8006270:	f04f 30ff 	mov.w	r0, #4294967295
 8006274:	e7f1      	b.n	800625a <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8006276:	bf00      	nop
 8006278:	42480000 	.word	0x42480000
 800627c:	42960000 	.word	0x42960000
 8006280:	42c80000 	.word	0x42c80000

08006284 <LPS22HH_PRESS_SetOutputDataRate>:
  if (pObj->press_is_enabled == 1U)
 8006284:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <LPS22HH_PRESS_SetOutputDataRate+0xc>
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800628c:	f7ff bfa8 	b.w	80061e0 <LPS22HH_SetOutputDataRate_When_Enabled>
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006290:	f7ff beea 	b.w	8006068 <LPS22HH_SetOutputDataRate_When_Disabled>

08006294 <LPS22HH_TEMP_SetOutputDataRate>:
  if (pObj->temp_is_enabled == 1U)
 8006294:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <LPS22HH_TEMP_SetOutputDataRate+0xc>
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800629c:	f7ff bfa0 	b.w	80061e0 <LPS22HH_SetOutputDataRate_When_Enabled>
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80062a0:	f7ff bee2 	b.w	8006068 <LPS22HH_SetOutputDataRate_When_Disabled>

080062a4 <LPS22HH_PRESS_GetPressure>:
{
 80062a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80062a6:	2300      	movs	r3, #0
{
 80062a8:	460d      	mov	r5, r1
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 80062aa:	301c      	adds	r0, #28
 80062ac:	a901      	add	r1, sp, #4
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80062ae:	9301      	str	r3, [sp, #4]
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 80062b0:	f000 f99a 	bl	80065e8 <lps22hh_pressure_raw_get>
 80062b4:	4604      	mov	r4, r0
 80062b6:	b938      	cbnz	r0, 80062c8 <LPS22HH_PRESS_GetPressure+0x24>
  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 80062b8:	9801      	ldr	r0, [sp, #4]
 80062ba:	f000 f8f1 	bl	80064a0 <lps22hh_from_lsb_to_hpa>
 80062be:	ed85 0a00 	vstr	s0, [r5]
}
 80062c2:	4620      	mov	r0, r4
 80062c4:	b003      	add	sp, #12
 80062c6:	bd30      	pop	{r4, r5, pc}
    return LPS22HH_ERROR;
 80062c8:	f04f 34ff 	mov.w	r4, #4294967295
 80062cc:	e7f9      	b.n	80062c2 <LPS22HH_PRESS_GetPressure+0x1e>

080062ce <LPS22HH_TEMP_GetTemperature>:
{
 80062ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80062d0:	2300      	movs	r3, #0
{
 80062d2:	460d      	mov	r5, r1
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 80062d4:	301c      	adds	r0, #28
 80062d6:	a901      	add	r1, sp, #4
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80062d8:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 80062dc:	f000 f999 	bl	8006612 <lps22hh_temperature_raw_get>
 80062e0:	4604      	mov	r4, r0
 80062e2:	b940      	cbnz	r0, 80062f6 <LPS22HH_TEMP_GetTemperature+0x28>
  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 80062e4:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80062e8:	f000 f8e0 	bl	80064ac <lps22hh_from_lsb_to_celsius>
 80062ec:	ed85 0a00 	vstr	s0, [r5]
}
 80062f0:	4620      	mov	r0, r4
 80062f2:	b003      	add	sp, #12
 80062f4:	bd30      	pop	{r4, r5, pc}
    return LPS22HH_ERROR;
 80062f6:	f04f 34ff 	mov.w	r4, #4294967295
 80062fa:	e7f9      	b.n	80062f0 <LPS22HH_TEMP_GetTemperature+0x22>

080062fc <LPS22HH_PRESS_Enable>:
{
 80062fc:	b510      	push	{r4, lr}
  if (pObj->press_is_enabled == 1U)
 80062fe:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8006302:	2b01      	cmp	r3, #1
{
 8006304:	4604      	mov	r4, r0
  if (pObj->press_is_enabled == 1U)
 8006306:	d009      	beq.n	800631c <LPS22HH_PRESS_Enable+0x20>
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8006308:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 800630c:	301c      	adds	r0, #28
 800630e:	f000 f8f0 	bl	80064f2 <lps22hh_data_rate_set>
 8006312:	b928      	cbnz	r0, 8006320 <LPS22HH_PRESS_Enable+0x24>
  pObj->press_is_enabled = 1;
 8006314:	2301      	movs	r3, #1
 8006316:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 800631a:	bd10      	pop	{r4, pc}
    return LPS22HH_OK;
 800631c:	2000      	movs	r0, #0
 800631e:	e7fc      	b.n	800631a <LPS22HH_PRESS_Enable+0x1e>
    return LPS22HH_ERROR;
 8006320:	f04f 30ff 	mov.w	r0, #4294967295
 8006324:	e7f9      	b.n	800631a <LPS22HH_PRESS_Enable+0x1e>

08006326 <LPS22HH_TEMP_Enable>:
{
 8006326:	b510      	push	{r4, lr}
  if (pObj->temp_is_enabled == 1U)
 8006328:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800632c:	2b01      	cmp	r3, #1
{
 800632e:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 1U)
 8006330:	d009      	beq.n	8006346 <LPS22HH_TEMP_Enable+0x20>
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8006332:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8006336:	301c      	adds	r0, #28
 8006338:	f000 f8db 	bl	80064f2 <lps22hh_data_rate_set>
 800633c:	b928      	cbnz	r0, 800634a <LPS22HH_TEMP_Enable+0x24>
  pObj->temp_is_enabled = 1;
 800633e:	2301      	movs	r3, #1
 8006340:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
}
 8006344:	bd10      	pop	{r4, pc}
    return LPS22HH_OK;
 8006346:	2000      	movs	r0, #0
 8006348:	e7fc      	b.n	8006344 <LPS22HH_TEMP_Enable+0x1e>
    return LPS22HH_ERROR;
 800634a:	f04f 30ff 	mov.w	r0, #4294967295
 800634e:	e7f9      	b.n	8006344 <LPS22HH_TEMP_Enable+0x1e>

08006350 <LPS22HH_PRESS_Disable>:
{
 8006350:	b538      	push	{r3, r4, r5, lr}
 8006352:	4604      	mov	r4, r0
  if (pObj->press_is_enabled == 0U)
 8006354:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8006358:	b130      	cbz	r0, 8006368 <LPS22HH_PRESS_Disable+0x18>
  if (pObj->temp_is_enabled == 0U)
 800635a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800635e:	b123      	cbz	r3, 800636a <LPS22HH_PRESS_Disable+0x1a>
  pObj->press_is_enabled = 0;
 8006360:	2300      	movs	r3, #0
 8006362:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  return LPS22HH_OK;
 8006366:	4618      	mov	r0, r3
}
 8006368:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800636a:	f104 051c 	add.w	r5, r4, #28
 800636e:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8006372:	4628      	mov	r0, r5
 8006374:	f000 f8eb 	bl	800654e <lps22hh_data_rate_get>
 8006378:	4601      	mov	r1, r0
 800637a:	b110      	cbz	r0, 8006382 <LPS22HH_PRESS_Disable+0x32>
      return LPS22HH_ERROR;
 800637c:	f04f 30ff 	mov.w	r0, #4294967295
 8006380:	e7f2      	b.n	8006368 <LPS22HH_PRESS_Disable+0x18>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8006382:	4628      	mov	r0, r5
 8006384:	f000 f8b5 	bl	80064f2 <lps22hh_data_rate_set>
 8006388:	2800      	cmp	r0, #0
 800638a:	d0e9      	beq.n	8006360 <LPS22HH_PRESS_Disable+0x10>
 800638c:	e7f6      	b.n	800637c <LPS22HH_PRESS_Disable+0x2c>

0800638e <LPS22HH_TEMP_Disable>:
{
 800638e:	b538      	push	{r3, r4, r5, lr}
 8006390:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 8006392:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8006396:	b130      	cbz	r0, 80063a6 <LPS22HH_TEMP_Disable+0x18>
  if (pObj->press_is_enabled == 0U)
 8006398:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800639c:	b123      	cbz	r3, 80063a8 <LPS22HH_TEMP_Disable+0x1a>
  pObj->temp_is_enabled = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  return LPS22HH_OK;
 80063a4:	4618      	mov	r0, r3
}
 80063a6:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80063a8:	f104 051c 	add.w	r5, r4, #28
 80063ac:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 80063b0:	4628      	mov	r0, r5
 80063b2:	f000 f8cc 	bl	800654e <lps22hh_data_rate_get>
 80063b6:	4601      	mov	r1, r0
 80063b8:	b110      	cbz	r0, 80063c0 <LPS22HH_TEMP_Disable+0x32>
      return LPS22HH_ERROR;
 80063ba:	f04f 30ff 	mov.w	r0, #4294967295
 80063be:	e7f2      	b.n	80063a6 <LPS22HH_TEMP_Disable+0x18>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80063c0:	4628      	mov	r0, r5
 80063c2:	f000 f896 	bl	80064f2 <lps22hh_data_rate_set>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d0e9      	beq.n	800639e <LPS22HH_TEMP_Disable+0x10>
 80063ca:	e7f6      	b.n	80063ba <LPS22HH_TEMP_Disable+0x2c>

080063cc <LPS22HH_DeInit>:
{
 80063cc:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 80063ce:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80063d2:	2b01      	cmp	r3, #1
{
 80063d4:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 80063d6:	d003      	beq.n	80063e0 <LPS22HH_DeInit+0x14>
  pObj->is_initialized = 0;
 80063d8:	2000      	movs	r0, #0
 80063da:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 80063de:	bd10      	pop	{r4, pc}
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 80063e0:	f7ff ffb6 	bl	8006350 <LPS22HH_PRESS_Disable>
 80063e4:	b110      	cbz	r0, 80063ec <LPS22HH_DeInit+0x20>
      return LPS22HH_ERROR;
 80063e6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ea:	e7f8      	b.n	80063de <LPS22HH_DeInit+0x12>
    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 80063ec:	4620      	mov	r0, r4
 80063ee:	f7ff ffce 	bl	800638e <LPS22HH_TEMP_Disable>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d0f0      	beq.n	80063d8 <LPS22HH_DeInit+0xc>
 80063f6:	e7f6      	b.n	80063e6 <LPS22HH_DeInit+0x1a>

080063f8 <LPS22HH_TEMP_GetOutputDataRate>:
 80063f8:	f7ff bebc 	b.w	8006174 <LPS22HH_GetOutputDataRate>

080063fc <LPS22HH_Write_Reg>:
{
 80063fc:	b507      	push	{r0, r1, r2, lr}
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 80063fe:	2301      	movs	r3, #1
{
 8006400:	f88d 2007 	strb.w	r2, [sp, #7]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8006404:	301c      	adds	r0, #28
 8006406:	f10d 0207 	add.w	r2, sp, #7
 800640a:	f000 f842 	bl	8006492 <lps22hh_write_reg>
 800640e:	3800      	subs	r0, #0
 8006410:	bf18      	it	ne
 8006412:	2001      	movne	r0, #1
}
 8006414:	4240      	negs	r0, r0
 8006416:	b003      	add	sp, #12
 8006418:	f85d fb04 	ldr.w	pc, [sp], #4

0800641c <LPS22HH_RegisterBusIO>:
{
 800641c:	b510      	push	{r4, lr}
  if (pObj == NULL)
 800641e:	4604      	mov	r4, r0
 8006420:	b910      	cbnz	r0, 8006428 <LPS22HH_RegisterBusIO+0xc>
    ret = LPS22HH_ERROR;
 8006422:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006426:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit    = pIO->DeInit;
 8006428:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 800642a:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800642c:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 800642e:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8006430:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 8006432:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8006434:	7b0a      	ldrb	r2, [r1, #12]
 8006436:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006438:	690a      	ldr	r2, [r1, #16]
 800643a:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800643c:	694a      	ldr	r2, [r1, #20]
 800643e:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006440:	698a      	ldr	r2, [r1, #24]
 8006442:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8006444:	4a0d      	ldr	r2, [pc, #52]	; (800647c <LPS22HH_RegisterBusIO+0x60>)
 8006446:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8006448:	4a0d      	ldr	r2, [pc, #52]	; (8006480 <LPS22HH_RegisterBusIO+0x64>)
 800644a:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle   = pObj;
 800644c:	6240      	str	r0, [r0, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 800644e:	2b00      	cmp	r3, #0
 8006450:	d0e7      	beq.n	8006422 <LPS22HH_RegisterBusIO+0x6>
    else if (pObj->IO.Init() != LPS22HH_OK)
 8006452:	4798      	blx	r3
 8006454:	2800      	cmp	r0, #0
 8006456:	d1e4      	bne.n	8006422 <LPS22HH_RegisterBusIO+0x6>
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006458:	68a3      	ldr	r3, [r4, #8]
 800645a:	2b02      	cmp	r3, #2
 800645c:	d1e3      	bne.n	8006426 <LPS22HH_RegisterBusIO+0xa>
        if (pObj->is_initialized == 0U)
 800645e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1df      	bne.n	8006426 <LPS22HH_RegisterBusIO+0xa>
          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8006466:	2201      	movs	r2, #1
 8006468:	2110      	movs	r1, #16
 800646a:	4620      	mov	r0, r4
 800646c:	f7ff ffc6 	bl	80063fc <LPS22HH_Write_Reg>
 8006470:	3800      	subs	r0, #0
 8006472:	bf18      	it	ne
 8006474:	2001      	movne	r0, #1
 8006476:	4240      	negs	r0, r0
  return ret;
 8006478:	e7d5      	b.n	8006426 <LPS22HH_RegisterBusIO+0xa>
 800647a:	bf00      	nop
 800647c:	080060e9 	.word	0x080060e9
 8006480:	080060f7 	.word	0x080060f7

08006484 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006484:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006486:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800648a:	46a4      	mov	ip, r4
  return ret;
}
 800648c:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006490:	4760      	bx	ip

08006492 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006492:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006494:	6804      	ldr	r4, [r0, #0]
 8006496:	6880      	ldr	r0, [r0, #8]
 8006498:	46a4      	mov	ip, r4
  return ret;
}
 800649a:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800649e:	4760      	bx	ip

080064a0 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80064a0:	ee00 0a10 	vmov	s0, r0
  return ( (float_t) lsb / 1048576.0f );
}
 80064a4:	eebb 0ac6 	vcvt.f32.u32	s0, s0, #20
 80064a8:	4770      	bx	lr
	...

080064ac <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
  return ( (float_t) lsb / 100.0f );
 80064ac:	ee07 0a90 	vmov	s15, r0
}
 80064b0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80064c0 <lps22hh_from_lsb_to_celsius+0x14>
  return ( (float_t) lsb / 100.0f );
 80064b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80064b8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	42c80000 	.word	0x42c80000

080064c4 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80064c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80064c6:	2301      	movs	r3, #1
{
 80064c8:	460d      	mov	r5, r1
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80064ca:	aa01      	add	r2, sp, #4
 80064cc:	2110      	movs	r1, #16
{
 80064ce:	4604      	mov	r4, r0
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80064d0:	f7ff ffd8 	bl	8006484 <lps22hh_read_reg>

  if (ret == 0) {
 80064d4:	b958      	cbnz	r0, 80064ee <lps22hh_block_data_update_set+0x2a>
    reg.bdu = val;
 80064d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80064da:	f365 0341 	bfi	r3, r5, #1, #1
 80064de:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80064e2:	aa01      	add	r2, sp, #4
 80064e4:	2301      	movs	r3, #1
 80064e6:	2110      	movs	r1, #16
 80064e8:	4620      	mov	r0, r4
 80064ea:	f7ff ffd2 	bl	8006492 <lps22hh_write_reg>
  }

  return ret;
}
 80064ee:	b003      	add	sp, #12
 80064f0:	bd30      	pop	{r4, r5, pc}

080064f2 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80064f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80064f4:	2301      	movs	r3, #1
{
 80064f6:	460c      	mov	r4, r1
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80064f8:	466a      	mov	r2, sp
 80064fa:	2110      	movs	r1, #16
{
 80064fc:	4605      	mov	r5, r0
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80064fe:	f7ff ffc1 	bl	8006484 <lps22hh_read_reg>
                         1);

  if (ret == 0) {
 8006502:	bb10      	cbnz	r0, 800654a <lps22hh_data_rate_set+0x58>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8006504:	2301      	movs	r3, #1
 8006506:	aa01      	add	r2, sp, #4
 8006508:	2111      	movs	r1, #17
 800650a:	4628      	mov	r0, r5
 800650c:	f7ff ffba 	bl	8006484 <lps22hh_read_reg>
                           1);
  }

  if (ret == 0) {
 8006510:	b9d8      	cbnz	r0, 800654a <lps22hh_data_rate_set+0x58>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006512:	f89d 3000 	ldrb.w	r3, [sp]
 8006516:	f364 1306 	bfi	r3, r4, #4, #3
 800651a:	f88d 3000 	strb.w	r3, [sp]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800651e:	466a      	mov	r2, sp
 8006520:	2301      	movs	r3, #1
 8006522:	2110      	movs	r1, #16
 8006524:	4628      	mov	r0, r5
 8006526:	f7ff ffb4 	bl	8006492 <lps22hh_write_reg>
                            1);
  }

  if (ret == 0) {
 800652a:	b970      	cbnz	r0, 800654a <lps22hh_data_rate_set+0x58>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 800652c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8006530:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8006534:	f021 0103 	bic.w	r1, r1, #3
 8006538:	430c      	orrs	r4, r1
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800653a:	2301      	movs	r3, #1
 800653c:	aa01      	add	r2, sp, #4
 800653e:	2111      	movs	r1, #17
 8006540:	4628      	mov	r0, r5
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006542:	f88d 4004 	strb.w	r4, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8006546:	f7ff ffa4 	bl	8006492 <lps22hh_write_reg>
                            1);
  }

  return ret;
}
 800654a:	b003      	add	sp, #12
 800654c:	bd30      	pop	{r4, r5, pc}

0800654e <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 800654e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8006550:	2301      	movs	r3, #1
{
 8006552:	460c      	mov	r4, r1
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8006554:	466a      	mov	r2, sp
 8006556:	2110      	movs	r1, #16
{
 8006558:	4605      	mov	r5, r0
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800655a:	f7ff ff93 	bl	8006484 <lps22hh_read_reg>
                         1);

  if (ret == 0) {
 800655e:	bb38      	cbnz	r0, 80065b0 <lps22hh_data_rate_get+0x62>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8006560:	2301      	movs	r3, #1
 8006562:	aa01      	add	r2, sp, #4
 8006564:	2111      	movs	r1, #17
 8006566:	4628      	mov	r0, r5
 8006568:	f7ff ff8c 	bl	8006484 <lps22hh_read_reg>
                           1);
  }

  if (ret == 0) {
 800656c:	bb00      	cbnz	r0, 80065b0 <lps22hh_data_rate_get+0x62>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800656e:	2301      	movs	r3, #1
 8006570:	aa01      	add	r2, sp, #4
 8006572:	2111      	movs	r1, #17
 8006574:	4628      	mov	r0, r5
 8006576:	f7ff ff85 	bl	8006484 <lps22hh_read_reg>
                           1);

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800657a:	f89d 3004 	ldrb.w	r3, [sp, #4]
             ctrl_reg1.odr )) {
 800657e:	f89d 2000 	ldrb.w	r2, [sp]
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	f003 0318 	and.w	r3, r3, #24
             ctrl_reg1.odr )) {
 8006588:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800658c:	4413      	add	r3, r2
 800658e:	2b15      	cmp	r3, #21
 8006590:	d828      	bhi.n	80065e4 <lps22hh_data_rate_get+0x96>
 8006592:	e8df f003 	tbb	[pc, r3]
 8006596:	0f27      	.short	0x0f27
 8006598:	17151311 	.word	0x17151311
 800659c:	270b2523 	.word	0x270b2523
 80065a0:	27272727 	.word	0x27272727
 80065a4:	19272727 	.word	0x19272727
 80065a8:	211f1d1b 	.word	0x211f1d1b
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
        break;

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 80065ac:	2308      	movs	r3, #8
      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
        break;

      default:
        *val = LPS22HH_POWER_DOWN;
 80065ae:	7023      	strb	r3, [r4, #0]
        break;
    }
  }

  return ret;
}
 80065b0:	b003      	add	sp, #12
 80065b2:	bd30      	pop	{r4, r5, pc}
        *val = LPS22HH_1_Hz;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e7fa      	b.n	80065ae <lps22hh_data_rate_get+0x60>
        *val = LPS22HH_10_Hz;
 80065b8:	2302      	movs	r3, #2
 80065ba:	e7f8      	b.n	80065ae <lps22hh_data_rate_get+0x60>
        *val = LPS22HH_25_Hz;
 80065bc:	2303      	movs	r3, #3
 80065be:	e7f6      	b.n	80065ae <lps22hh_data_rate_get+0x60>
        *val = LPS22HH_50_Hz;
 80065c0:	2304      	movs	r3, #4
 80065c2:	e7f4      	b.n	80065ae <lps22hh_data_rate_get+0x60>
        *val = LPS22HH_75_Hz;
 80065c4:	2305      	movs	r3, #5
 80065c6:	e7f2      	b.n	80065ae <lps22hh_data_rate_get+0x60>
        *val = LPS22HH_1_Hz_LOW_NOISE;
 80065c8:	2311      	movs	r3, #17
 80065ca:	e7f0      	b.n	80065ae <lps22hh_data_rate_get+0x60>
        *val = LPS22HH_10_Hz_LOW_NOISE;
 80065cc:	2312      	movs	r3, #18
 80065ce:	e7ee      	b.n	80065ae <lps22hh_data_rate_get+0x60>
        *val = LPS22HH_25_Hz_LOW_NOISE;
 80065d0:	2313      	movs	r3, #19
 80065d2:	e7ec      	b.n	80065ae <lps22hh_data_rate_get+0x60>
        *val = LPS22HH_50_Hz_LOW_NOISE;
 80065d4:	2314      	movs	r3, #20
 80065d6:	e7ea      	b.n	80065ae <lps22hh_data_rate_get+0x60>
        *val = LPS22HH_75_Hz_LOW_NOISE;
 80065d8:	2315      	movs	r3, #21
 80065da:	e7e8      	b.n	80065ae <lps22hh_data_rate_get+0x60>
        *val = LPS22HH_100_Hz;
 80065dc:	2306      	movs	r3, #6
 80065de:	e7e6      	b.n	80065ae <lps22hh_data_rate_get+0x60>
        *val = LPS22HH_200_Hz;
 80065e0:	2307      	movs	r3, #7
 80065e2:	e7e4      	b.n	80065ae <lps22hh_data_rate_get+0x60>
        *val = LPS22HH_POWER_DOWN;
 80065e4:	2300      	movs	r3, #0
 80065e6:	e7e2      	b.n	80065ae <lps22hh_data_rate_get+0x60>

080065e8 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80065e8:	b513      	push	{r0, r1, r4, lr}
  int32_t ret;
  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80065ea:	2303      	movs	r3, #3
{
 80065ec:	460c      	mov	r4, r1
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80065ee:	aa01      	add	r2, sp, #4
 80065f0:	2128      	movs	r1, #40	; 0x28
 80065f2:	f7ff ff47 	bl	8006484 <lps22hh_read_reg>
  *buff = reg[2];
  *buff = (*buff * 256) + reg[1];
 80065f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
  *buff = reg[2];
 80065fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
  *buff = (*buff * 256) + reg[1];
 80065fe:	eb03 2202 	add.w	r2, r3, r2, lsl #8
  *buff = (*buff * 256) + reg[0];
 8006602:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006606:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *buff *= 256;
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	6023      	str	r3, [r4, #0]
  return ret;
}
 800660e:	b002      	add	sp, #8
 8006610:	bd10      	pop	{r4, pc}

08006612 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006612:	b513      	push	{r0, r1, r4, lr}
  int32_t ret;
  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006614:	2302      	movs	r3, #2
{
 8006616:	460c      	mov	r4, r1
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006618:	aa01      	add	r2, sp, #4
 800661a:	212b      	movs	r1, #43	; 0x2b
 800661c:	f7ff ff32 	bl	8006484 <lps22hh_read_reg>
  *buff = reg[1];
  *buff = (*buff * 256) + reg[0];
 8006620:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8006624:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006628:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800662c:	8023      	strh	r3, [r4, #0]
  return ret;
}
 800662e:	b002      	add	sp, #8
 8006630:	bd10      	pop	{r4, pc}

08006632 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006632:	460a      	mov	r2, r1
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006634:	2301      	movs	r3, #1
 8006636:	210f      	movs	r1, #15
 8006638:	f7ff bf24 	b.w	8006484 <lps22hh_read_reg>

0800663c <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800663c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800663e:	2301      	movs	r3, #1
{
 8006640:	460d      	mov	r5, r1
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006642:	aa01      	add	r2, sp, #4
 8006644:	2111      	movs	r1, #17
{
 8006646:	4604      	mov	r4, r0
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006648:	f7ff ff1c 	bl	8006484 <lps22hh_read_reg>

  if (ret == 0) {
 800664c:	b958      	cbnz	r0, 8006666 <lps22hh_auto_increment_set+0x2a>
    reg.if_add_inc = val;
 800664e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006652:	f365 1304 	bfi	r3, r5, #4, #1
 8006656:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800665a:	aa01      	add	r2, sp, #4
 800665c:	2301      	movs	r3, #1
 800665e:	2111      	movs	r1, #17
 8006660:	4620      	mov	r0, r4
 8006662:	f7ff ff16 	bl	8006492 <lps22hh_write_reg>
  }

  return ret;
}
 8006666:	b003      	add	sp, #12
 8006668:	bd30      	pop	{r4, r5, pc}

0800666a <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 800666a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800666c:	2301      	movs	r3, #1
{
 800666e:	460d      	mov	r5, r1
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006670:	aa01      	add	r2, sp, #4
 8006672:	2110      	movs	r1, #16
{
 8006674:	4604      	mov	r4, r0
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006676:	f7ff ff05 	bl	8006484 <lps22hh_read_reg>

  if (ret == 0) {
 800667a:	b958      	cbnz	r0, 8006694 <lps22hh_lp_bandwidth_set+0x2a>
    reg.lpfp_cfg = (uint8_t)val;
 800667c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006680:	f365 0383 	bfi	r3, r5, #2, #2
 8006684:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006688:	aa01      	add	r2, sp, #4
 800668a:	2301      	movs	r3, #1
 800668c:	2110      	movs	r1, #16
 800668e:	4620      	mov	r0, r4
 8006690:	f7ff feff 	bl	8006492 <lps22hh_write_reg>
  }

  return ret;
}
 8006694:	b003      	add	sp, #12
 8006696:	bd30      	pop	{r4, r5, pc}

08006698 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8006698:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hh_if_ctrl_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 800669a:	2301      	movs	r3, #1
{
 800669c:	460c      	mov	r4, r1
  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 800669e:	aa01      	add	r2, sp, #4
 80066a0:	210e      	movs	r1, #14
{
 80066a2:	4605      	mov	r5, r0
  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80066a4:	f7ff feee 	bl	8006484 <lps22hh_read_reg>

  if (ret == 0) {
 80066a8:	b990      	cbnz	r0, 80066d0 <lps22hh_i3c_interface_set+0x38>
    reg.i3c_disable = ((uint8_t)val & 0x01u);
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 80066aa:	0923      	lsrs	r3, r4, #4
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 80066ac:	0064      	lsls	r4, r4, #1
 80066ae:	f004 0402 	and.w	r4, r4, #2
 80066b2:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
 80066b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80066ba:	f003 037d 	and.w	r3, r3, #125	; 0x7d
 80066be:	431c      	orrs	r4, r3
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80066c0:	aa01      	add	r2, sp, #4
 80066c2:	2301      	movs	r3, #1
 80066c4:	210e      	movs	r1, #14
 80066c6:	4628      	mov	r0, r5
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 80066c8:	f88d 4004 	strb.w	r4, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80066cc:	f7ff fee1 	bl	8006492 <lps22hh_write_reg>
  }

  return ret;
}
 80066d0:	b003      	add	sp, #12
 80066d2:	bd30      	pop	{r4, r5, pc}

080066d4 <BSP_ADC1_Initialization>:
* @param  ADC_InitFor who wants to Init the ADC: Audio or Battery Charger
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_PERIPH_FAILURE in case of failures
*/
int32_t BSP_ADC1_Initialization(ADC_InitUsedDef ADC_InitFor)
{
 80066d4:	b570      	push	{r4, r5, r6, lr}
  /* If the ADC is not yet initialized */
  if(ADC_UsedFor == ADC1_NOT_USED){
 80066d6:	4c1a      	ldr	r4, [pc, #104]	; (8006740 <BSP_ADC1_Initialization+0x6c>)
 80066d8:	7823      	ldrb	r3, [r4, #0]
{
 80066da:	4605      	mov	r5, r0
  if(ADC_UsedFor == ADC1_NOT_USED){
 80066dc:	b123      	cbz	r3, 80066e8 <BSP_ADC1_Initialization+0x14>
      return BSP_ERROR_PERIPH_FAILURE;
    } 
  }

  /* Set that we had Initiliazed the ADC for Audio or For Battery Charger */
  ADC_UsedFor |= ADC_InitFor;
 80066de:	7820      	ldrb	r0, [r4, #0]
 80066e0:	4305      	orrs	r5, r0
 80066e2:	7025      	strb	r5, [r4, #0]

  return BSP_ERROR_NONE;
 80066e4:	2000      	movs	r0, #0
}
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
    ADC1_Handle.Instance = ADC1;
 80066e8:	4a16      	ldr	r2, [pc, #88]	; (8006744 <BSP_ADC1_Initialization+0x70>)
    ADC1_Handle.Init.ScanConvMode = (uint32_t)DISABLE;
 80066ea:	6163      	str	r3, [r4, #20]
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80066ec:	2104      	movs	r1, #4
    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80066ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    ADC1_Handle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80066f2:	e9c4 2301 	strd	r2, r3, [r4, #4]
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 80066f6:	1866      	adds	r6, r4, r1
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 80066f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066fc:	83a2      	strh	r2, [r4, #28]
    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80066fe:	63a0      	str	r0, [r4, #56]	; 0x38
    ADC1_Handle.Init.NbrOfConversion = 1; 
 8006700:	2201      	movs	r2, #1
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 8006702:	4630      	mov	r0, r6
    ADC1_Handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006704:	e9c4 3303 	strd	r3, r3, [r4, #12]
    ADC1_Handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006708:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    ADC1_Handle.Init.Oversampling.TriggeredMode         = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;         /* Specifies whether or not a trigger is needed for each sample */
 800670c:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
    ADC1_Handle.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8006710:	e9c4 2113 	strd	r2, r1, [r4, #76]	; 0x4c
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006714:	61a1      	str	r1, [r4, #24]
    ADC1_Handle.Init.NbrOfConversion = 1; 
 8006716:	6222      	str	r2, [r4, #32]
    ADC1_Handle.Init.NbrOfDiscConversion      = 1;
 8006718:	62a2      	str	r2, [r4, #40]	; 0x28
    ADC1_Handle.Init.DiscontinuousConvMode = DISABLE;
 800671a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    ADC1_Handle.Init.DMAContinuousRequests = DISABLE;
 800671e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    ADC1_Handle.Init.OversamplingMode = DISABLE;
 8006722:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 8006726:	f001 ff9d 	bl	8008664 <HAL_ADC_Init>
 800672a:	b110      	cbz	r0, 8006732 <BSP_ADC1_Initialization+0x5e>
      return BSP_ERROR_PERIPH_FAILURE;
 800672c:	f06f 0003 	mvn.w	r0, #3
 8006730:	e7d9      	b.n	80066e6 <BSP_ADC1_Initialization+0x12>
    if (HAL_ADCEx_Calibration_Start(&ADC1_Handle, ADC_SINGLE_ENDED) != HAL_OK)
 8006732:	217f      	movs	r1, #127	; 0x7f
 8006734:	4630      	mov	r0, r6
 8006736:	f002 fb74 	bl	8008e22 <HAL_ADCEx_Calibration_Start>
 800673a:	2800      	cmp	r0, #0
 800673c:	d0cf      	beq.n	80066de <BSP_ADC1_Initialization+0xa>
 800673e:	e7f5      	b.n	800672c <BSP_ADC1_Initialization+0x58>
 8006740:	200007ec 	.word	0x200007ec
 8006744:	50040000 	.word	0x50040000

08006748 <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{ 
  UNUSED(hadc);
  /*##-1- Enable peripherals  ################################################*/
  /* ADC Periph clock enable */
  __HAL_RCC_ADC_CLK_ENABLE();
 8006748:	4b0a      	ldr	r3, [pc, #40]	; (8006774 <HAL_ADC_MspInit+0x2c>)
 800674a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800674c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006750:	64da      	str	r2, [r3, #76]	; 0x4c
 8006752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{ 
 8006754:	b082      	sub	sp, #8
  __HAL_RCC_ADC_CLK_ENABLE();
 8006756:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800675a:	9201      	str	r2, [sp, #4]
 800675c:	9a01      	ldr	r2, [sp, #4]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 800675e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006762:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006766:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800676a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800676e:	b002      	add	sp, #8
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40021000 	.word	0x40021000

08006778 <BSP_PB_PWR_Init>:
* @brief  Initialize the Power button PWR.
* @param  None
* @retval None
*/
void BSP_PB_PWR_Init(void)
{
 8006778:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  
  POWER_BUTTON_GPIO_CLK_ENABLE();
 800677a:	4b10      	ldr	r3, [pc, #64]	; (80067bc <BSP_PB_PWR_Init+0x44>)
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800677c:	4810      	ldr	r0, [pc, #64]	; (80067c0 <BSP_PB_PWR_Init+0x48>)
  POWER_BUTTON_GPIO_CLK_ENABLE();
 800677e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006780:	f042 0208 	orr.w	r2, r2, #8
 8006784:	64da      	str	r2, [r3, #76]	; 0x4c
 8006786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006788:	f003 0308 	and.w	r3, r3, #8
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
 8006790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006794:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8006796:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006798:	e9cd 3303 	strd	r3, r3, [sp, #12]
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800679c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800679e:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <BSP_PB_PWR_Init+0x4c>)
 80067a0:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80067a2:	f003 fe31 	bl	800a408 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type) POWER_BUTTON_EXTI_IRQn, 0x0F, 0x00);
 80067a6:	2200      	movs	r2, #0
 80067a8:	210f      	movs	r1, #15
 80067aa:	2028      	movs	r0, #40	; 0x28
 80067ac:	f002 fe62 	bl	8009474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type) POWER_BUTTON_EXTI_IRQn);
 80067b0:	2028      	movs	r0, #40	; 0x28
 80067b2:	f002 fe91 	bl	80094d8 <HAL_NVIC_EnableIRQ>
  
}
 80067b6:	b007      	add	sp, #28
 80067b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80067bc:	40021000 	.word	0x40021000
 80067c0:	48000c00 	.word	0x48000c00
 80067c4:	10110000 	.word	0x10110000

080067c8 <BSP_PB_Init>:
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80067c8:	4b15      	ldr	r3, [pc, #84]	; (8006820 <BSP_PB_Init+0x58>)
{
 80067ca:	b510      	push	{r4, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80067cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067ce:	f042 0210 	orr.w	r2, r2, #16
 80067d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80067d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 80067d6:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80067d8:	f003 0310 	and.w	r3, r3, #16
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	9b00      	ldr	r3, [sp, #0]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80067e0:	2301      	movs	r3, #1
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80067e2:	9301      	str	r3, [sp, #4]
  if (ButtonMode == BUTTON_MODE_GPIO)
 80067e4:	b951      	cbnz	r1, 80067fc <BSP_PB_Init+0x34>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067e6:	9102      	str	r1, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80067e8:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80067ea:	480e      	ldr	r0, [pc, #56]	; (8006824 <BSP_PB_Init+0x5c>)
 80067ec:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80067ee:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80067f2:	f003 fe09 	bl	800a408 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }

  return BSP_ERROR_NONE;  
}
 80067f6:	2000      	movs	r0, #0
 80067f8:	b006      	add	sp, #24
 80067fa:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80067fc:	4b0a      	ldr	r3, [pc, #40]	; (8006828 <BSP_PB_Init+0x60>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80067fe:	4809      	ldr	r0, [pc, #36]	; (8006824 <BSP_PB_Init+0x5c>)
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006800:	2400      	movs	r4, #0
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8006802:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006804:	e9cd 3402 	strd	r3, r4, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8006808:	f003 fdfe 	bl	800a408 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800680c:	4622      	mov	r2, r4
 800680e:	210f      	movs	r1, #15
 8006810:	2006      	movs	r0, #6
 8006812:	f002 fe2f 	bl	8009474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8006816:	2006      	movs	r0, #6
 8006818:	f002 fe5e 	bl	80094d8 <HAL_NVIC_EnableIRQ>
 800681c:	e7eb      	b.n	80067f6 <BSP_PB_Init+0x2e>
 800681e:	bf00      	nop
 8006820:	40021000 	.word	0x40021000
 8006824:	48001000 	.word	0x48001000
 8006828:	10210000 	.word	0x10210000

0800682c <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800682c:	b510      	push	{r4, lr}
 800682e:	4b14      	ldr	r3, [pc, #80]	; (8006880 <BSP_LED_Init+0x54>)
 8006830:	b088      	sub	sp, #32
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 8006832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006834:	b9d0      	cbnz	r0, 800686c <BSP_LED_Init+0x40>
 8006836:	f042 0210 	orr.w	r2, r2, #16
 800683a:	64da      	str	r2, [r3, #76]	; 0x4c
 800683c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683e:	f003 0310 	and.w	r3, r3, #16
 8006842:	9301      	str	r3, [sp, #4]
 8006844:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8006846:	4b0f      	ldr	r3, [pc, #60]	; (8006884 <BSP_LED_Init+0x58>)
 8006848:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
 800684c:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800684e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006852:	2400      	movs	r4, #0
 8006854:	2201      	movs	r2, #1
 8006856:	e9cd 2404 	strd	r2, r4, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800685a:	6840      	ldr	r0, [r0, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800685c:	2202      	movs	r2, #2
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800685e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8006860:	9206      	str	r2, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006862:	f003 fdd1 	bl	800a408 <HAL_GPIO_Init>
  
  return BSP_ERROR_NONE;    
}
 8006866:	4620      	mov	r0, r4
 8006868:	b008      	add	sp, #32
 800686a:	bd10      	pop	{r4, pc}
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 800686c:	f042 0208 	orr.w	r2, r2, #8
 8006870:	64da      	str	r2, [r3, #76]	; 0x4c
 8006872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006874:	f003 0308 	and.w	r3, r3, #8
 8006878:	9302      	str	r3, [sp, #8]
 800687a:	9b02      	ldr	r3, [sp, #8]
 800687c:	e7e3      	b.n	8006846 <BSP_LED_Init+0x1a>
 800687e:	bf00      	nop
 8006880:	40021000 	.word	0x40021000
 8006884:	08021828 	.word	0x08021828

08006888 <BSP_LED_On>:
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8006888:	4b05      	ldr	r3, [pc, #20]	; (80068a0 <BSP_LED_On+0x18>)
{
 800688a:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800688c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8006890:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8006894:	6860      	ldr	r0, [r4, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f003 ff28 	bl	800a6ec <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
}
 800689c:	2000      	movs	r0, #0
 800689e:	bd10      	pop	{r4, pc}
 80068a0:	08021828 	.word	0x08021828

080068a4 <BSP_LED_Off>:
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <BSP_LED_Off+0x18>)
{
 80068a6:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80068a8:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 80068ac:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80068b0:	6860      	ldr	r0, [r4, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f003 ff1a 	bl	800a6ec <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
}
 80068b8:	2000      	movs	r0, #0
 80068ba:	bd10      	pop	{r4, pc}
 80068bc:	08021828 	.word	0x08021828

080068c0 <BSP_AUDIO_IN_DeInit>:
  
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
  {
    return BSP_ERROR_WRONG_PARAM;
  }	
  else if (Instance == 0U)
 80068c0:	2801      	cmp	r0, #1
{
 80068c2:	b538      	push	{r3, r4, r5, lr}
  else if (Instance == 0U)
 80068c4:	d141      	bne.n	800694a <BSP_AUDIO_IN_DeInit+0x8a>
  {
    return BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if ((AudioInCtx[Instance].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 80068c6:	4d22      	ldr	r5, [pc, #136]	; (8006950 <BSP_AUDIO_IN_DeInit+0x90>)
 80068c8:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 80068ca:	f014 0402 	ands.w	r4, r4, #2
 80068ce:	d01b      	beq.n	8006908 <BSP_AUDIO_IN_DeInit+0x48>
    {
      /* De-initializes DFSDM Filter handle */
      if(DMic_OnBoard_DfsdmFilter.Instance != NULL)
 80068d0:	f8d5 4098 	ldr.w	r4, [r5, #152]	; 0x98
 80068d4:	b15c      	cbz	r4, 80068ee <BSP_AUDIO_IN_DeInit+0x2e>
      {
        if(HAL_OK != HAL_DFSDM_FilterDeInit(&DMic_OnBoard_DfsdmFilter))
 80068d6:	f105 0098 	add.w	r0, r5, #152	; 0x98
 80068da:	f003 f8ca 	bl	8009a72 <HAL_DFSDM_FilterDeInit>
        {
          ret =  BSP_ERROR_PERIPH_FAILURE;
        }
        DMic_OnBoard_DfsdmFilter.Instance = NULL;
 80068de:	2300      	movs	r3, #0
          ret =  BSP_ERROR_PERIPH_FAILURE;
 80068e0:	2800      	cmp	r0, #0
 80068e2:	bf0c      	ite	eq
 80068e4:	2400      	moveq	r4, #0
 80068e6:	f06f 0403 	mvnne.w	r4, #3
        DMic_OnBoard_DfsdmFilter.Instance = NULL;
 80068ea:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      }
      
      /* De-initializes DFSDM Channel handle */
      if(DMic_OnBoard_DfsdmChannel.Instance != NULL)
 80068ee:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
 80068f2:	b14b      	cbz	r3, 8006908 <BSP_AUDIO_IN_DeInit+0x48>
      {    
        if(HAL_OK != HAL_DFSDM_ChannelDeInit(&DMic_OnBoard_DfsdmChannel))
 80068f4:	4817      	ldr	r0, [pc, #92]	; (8006954 <BSP_AUDIO_IN_DeInit+0x94>)
 80068f6:	f003 f819 	bl	800992c <HAL_DFSDM_ChannelDeInit>
        {
          ret =  BSP_ERROR_PERIPH_FAILURE;
        }
        DMic_OnBoard_DfsdmChannel.Instance = NULL;
 80068fa:	2300      	movs	r3, #0
          ret =  BSP_ERROR_PERIPH_FAILURE;
 80068fc:	2800      	cmp	r0, #0
 80068fe:	bf18      	it	ne
 8006900:	f06f 0403 	mvnne.w	r4, #3
        DMic_OnBoard_DfsdmChannel.Instance = NULL;
 8006904:	f8c5 30ec 	str.w	r3, [r5, #236]	; 0xec
      }
    }
    if ((AudioInCtx[Instance].Device & ONBOARD_ANALOG_MIC_MASK) != 0U)
 8006908:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800690a:	07db      	lsls	r3, r3, #31
 800690c:	d519      	bpl.n	8006942 <BSP_AUDIO_IN_DeInit+0x82>
    {
      /* De-initializes DFSDM Filter handle */
      if(AMic_OnBoard_DfsdmFilter.Instance != NULL)
 800690e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006912:	b14b      	cbz	r3, 8006928 <BSP_AUDIO_IN_DeInit+0x68>
      {
        if(HAL_OK != HAL_DFSDM_FilterDeInit(&AMic_OnBoard_DfsdmFilter))
 8006914:	4810      	ldr	r0, [pc, #64]	; (8006958 <BSP_AUDIO_IN_DeInit+0x98>)
 8006916:	f003 f8ac 	bl	8009a72 <HAL_DFSDM_FilterDeInit>
        {
          ret =  BSP_ERROR_PERIPH_FAILURE;
        }
        AMic_OnBoard_DfsdmFilter.Instance = NULL;
 800691a:	2300      	movs	r3, #0
          ret =  BSP_ERROR_PERIPH_FAILURE;
 800691c:	2800      	cmp	r0, #0
 800691e:	bf18      	it	ne
 8006920:	f06f 0403 	mvnne.w	r4, #3
        AMic_OnBoard_DfsdmFilter.Instance = NULL;
 8006924:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
      }
      
      /* De-initializes DFSDM Channel handle */
      if(AMic_OnBoard_DfsdmChannel.Instance != NULL)
 8006928:	f8d5 3178 	ldr.w	r3, [r5, #376]	; 0x178
 800692c:	b14b      	cbz	r3, 8006942 <BSP_AUDIO_IN_DeInit+0x82>
      {     
        if(HAL_OK != HAL_DFSDM_ChannelDeInit(&AMic_OnBoard_DfsdmChannel))
 800692e:	480b      	ldr	r0, [pc, #44]	; (800695c <BSP_AUDIO_IN_DeInit+0x9c>)
 8006930:	f002 fffc 	bl	800992c <HAL_DFSDM_ChannelDeInit>
        {
          ret =  BSP_ERROR_PERIPH_FAILURE;
        }
        AMic_OnBoard_DfsdmChannel.Instance = NULL;
 8006934:	2300      	movs	r3, #0
          ret =  BSP_ERROR_PERIPH_FAILURE;
 8006936:	2800      	cmp	r0, #0
 8006938:	bf18      	it	ne
 800693a:	f06f 0403 	mvnne.w	r4, #3
        AMic_OnBoard_DfsdmChannel.Instance = NULL;
 800693e:	f8c5 3178 	str.w	r3, [r5, #376]	; 0x178
      }
    }
  }
  
  /* Update BSP AUDIO IN state */     
  AudioInCtx[Instance].State = AUDIO_IN_STATE_RESET; 	
 8006942:	2300      	movs	r3, #0
 8006944:	672b      	str	r3, [r5, #112]	; 0x70
  return ret;
}
 8006946:	4620      	mov	r0, r4
 8006948:	bd38      	pop	{r3, r4, r5, pc}
    return BSP_ERROR_WRONG_PARAM;
 800694a:	f06f 0401 	mvn.w	r4, #1
 800694e:	e7fa      	b.n	8006946 <BSP_AUDIO_IN_DeInit+0x86>
 8006950:	200008ec 	.word	0x200008ec
 8006954:	200009d8 	.word	0x200009d8
 8006958:	20000a10 	.word	0x20000a10
 800695c:	20000a64 	.word	0x20000a64

08006960 <BSP_AUDIO_IN_Record>:
* @param  pbuf     Main buffer pointer for the recorded data storing  
* @param  Size     Size of the record buffer
* @retval BSP status
*/
int32_t BSP_AUDIO_IN_Record(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 8006960:	b537      	push	{r0, r1, r2, r4, r5, lr}
  int32_t ret = BSP_ERROR_NONE;
  AudioInCtx[Instance].pBuff = (uint16_t*)pBuf;
 8006962:	4d18      	ldr	r5, [pc, #96]	; (80069c4 <BSP_AUDIO_IN_Record+0x64>)
 8006964:	234c      	movs	r3, #76	; 0x4c
 8006966:	fb03 5300 	mla	r3, r3, r0, r5
  
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
  {
    return BSP_ERROR_WRONG_PARAM;
  }
  else if (Instance == 0U)
 800696a:	2801      	cmp	r0, #1
  AudioInCtx[Instance].pBuff = (uint16_t*)pBuf;
 800696c:	6159      	str	r1, [r3, #20]
  else if (Instance == 0U)
 800696e:	d125      	bne.n	80069bc <BSP_AUDIO_IN_Record+0x5c>
  {	
    return BSP_ERROR_WRONG_PARAM;	  
  }
  else
  {	
    if ((AudioInCtx[Instance].Device & ONBOARD_ANALOG_MIC_MASK) != 0U)
 8006970:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8006972:	f014 0401 	ands.w	r4, r4, #1
 8006976:	d010      	beq.n	800699a <BSP_AUDIO_IN_Record+0x3a>
    {
      if (HAL_ADC_Start(&ADC1_Handle) != HAL_OK)
 8006978:	4813      	ldr	r0, [pc, #76]	; (80069c8 <BSP_AUDIO_IN_Record+0x68>)
 800697a:	9201      	str	r2, [sp, #4]
 800697c:	f002 f9a8 	bl	8008cd0 <HAL_ADC_Start>
      {
        ret =  BSP_ERROR_PERIPH_FAILURE;
      }
      (void)HAL_DFSDM_FilterRegularStart_DMA(&AMic_OnBoard_DfsdmFilter, DFSDM_OUT, NbrOfBytes);
 8006980:	9a01      	ldr	r2, [sp, #4]
        ret =  BSP_ERROR_PERIPH_FAILURE;
 8006982:	2800      	cmp	r0, #0
      (void)HAL_DFSDM_FilterRegularStart_DMA(&AMic_OnBoard_DfsdmFilter, DFSDM_OUT, NbrOfBytes);
 8006984:	f505 71d8 	add.w	r1, r5, #432	; 0x1b0
 8006988:	f505 7092 	add.w	r0, r5, #292	; 0x124
        ret =  BSP_ERROR_PERIPH_FAILURE;
 800698c:	bf0c      	ite	eq
 800698e:	2400      	moveq	r4, #0
 8006990:	f06f 0403 	mvnne.w	r4, #3
      (void)HAL_DFSDM_FilterRegularStart_DMA(&AMic_OnBoard_DfsdmFilter, DFSDM_OUT, NbrOfBytes);
 8006994:	f003 f89a 	bl	8009acc <HAL_DFSDM_FilterRegularStart_DMA>
 8006998:	9a01      	ldr	r2, [sp, #4]
    }
    
    if ((AudioInCtx[Instance].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 800699a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800699c:	079b      	lsls	r3, r3, #30
 800699e:	d508      	bpl.n	80069b2 <BSP_AUDIO_IN_Record+0x52>
    {
      if (HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&DMic_OnBoard_DfsdmFilter,
 80069a0:	490a      	ldr	r1, [pc, #40]	; (80069cc <BSP_AUDIO_IN_Record+0x6c>)
 80069a2:	f5a1 70cc 	sub.w	r0, r1, #408	; 0x198
 80069a6:	f003 f891 	bl	8009acc <HAL_DFSDM_FilterRegularStart_DMA>
                                                     (int32_t*) RecBuff,
                                                     NbrOfBytes)) 
      {
        ret =  BSP_ERROR_PERIPH_FAILURE;
 80069aa:	2800      	cmp	r0, #0
 80069ac:	bf18      	it	ne
 80069ae:	f06f 0403 	mvnne.w	r4, #3
      }    		
    }    
  }
  
  /* Update BSP AUDIO IN state */     
  AudioInCtx[Instance].State = AUDIO_IN_STATE_RECORDING;
 80069b2:	2301      	movs	r3, #1
 80069b4:	672b      	str	r3, [r5, #112]	; 0x70
  return ret;  
}
 80069b6:	4620      	mov	r0, r4
 80069b8:	b003      	add	sp, #12
 80069ba:	bd30      	pop	{r4, r5, pc}
    return BSP_ERROR_WRONG_PARAM;	  
 80069bc:	f06f 0401 	mvn.w	r4, #1
 80069c0:	e7f9      	b.n	80069b6 <BSP_AUDIO_IN_Record+0x56>
 80069c2:	bf00      	nop
 80069c4:	200008ec 	.word	0x200008ec
 80069c8:	200007f0 	.word	0x200007f0
 80069cc:	20000b1c 	.word	0x20000b1c

080069d0 <BSP_AUDIO_IN_Stop>:
  int32_t ret = BSP_ERROR_NONE;  
  if(Instance >= AUDIO_IN_INSTANCES_NBR) 
  {
    return BSP_ERROR_WRONG_PARAM;  
  }
  else if (Instance == 0U)
 80069d0:	2801      	cmp	r0, #1
{
 80069d2:	b538      	push	{r3, r4, r5, lr}
  else if (Instance == 0U)
 80069d4:	d122      	bne.n	8006a1c <BSP_AUDIO_IN_Stop+0x4c>
  {
    return  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if ((AudioInCtx[Instance].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 80069d6:	4d13      	ldr	r5, [pc, #76]	; (8006a24 <BSP_AUDIO_IN_Stop+0x54>)
 80069d8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80069da:	079a      	lsls	r2, r3, #30
 80069dc:	d415      	bmi.n	8006a0a <BSP_AUDIO_IN_Stop+0x3a>
  int32_t ret = BSP_ERROR_NONE;  
 80069de:	2400      	movs	r4, #0
      if(HAL_DFSDM_FilterRegularStop_DMA(&DMic_OnBoard_DfsdmFilter) != HAL_OK)
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
      }	
    }
    if ((AudioInCtx[Instance].Device & ONBOARD_ANALOG_MIC_MASK) != 0U)
 80069e0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80069e2:	07db      	lsls	r3, r3, #31
 80069e4:	d50d      	bpl.n	8006a02 <BSP_AUDIO_IN_Stop+0x32>
    {
      if(HAL_DFSDM_FilterRegularStop_DMA(&AMic_OnBoard_DfsdmFilter) != HAL_OK)
 80069e6:	4810      	ldr	r0, [pc, #64]	; (8006a28 <BSP_AUDIO_IN_Stop+0x58>)
 80069e8:	f003 f8ac 	bl	8009b44 <HAL_DFSDM_FilterRegularStop_DMA>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80069ec:	2800      	cmp	r0, #0
      }
      
      if (HAL_ADC_Stop(&ADC1_Handle) != HAL_OK)
 80069ee:	480f      	ldr	r0, [pc, #60]	; (8006a2c <BSP_AUDIO_IN_Stop+0x5c>)
        ret = BSP_ERROR_PERIPH_FAILURE;
 80069f0:	bf18      	it	ne
 80069f2:	f06f 0403 	mvnne.w	r4, #3
      if (HAL_ADC_Stop(&ADC1_Handle) != HAL_OK)
 80069f6:	f002 f9e0 	bl	8008dba <HAL_ADC_Stop>
      {
        ret =  BSP_ERROR_PERIPH_FAILURE;
 80069fa:	2800      	cmp	r0, #0
 80069fc:	bf18      	it	ne
 80069fe:	f06f 0403 	mvnne.w	r4, #3
      }
    }
  }
  
  /* Update BSP AUDIO IN state */     
  AudioInCtx[Instance].State = AUDIO_IN_STATE_STOP;
 8006a02:	2302      	movs	r3, #2
 8006a04:	672b      	str	r3, [r5, #112]	; 0x70
  return ret; 	
}
 8006a06:	4620      	mov	r0, r4
 8006a08:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_DFSDM_FilterRegularStop_DMA(&DMic_OnBoard_DfsdmFilter) != HAL_OK)
 8006a0a:	f105 0098 	add.w	r0, r5, #152	; 0x98
 8006a0e:	f003 f899 	bl	8009b44 <HAL_DFSDM_FilterRegularStop_DMA>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d0e3      	beq.n	80069de <BSP_AUDIO_IN_Stop+0xe>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006a16:	f06f 0403 	mvn.w	r4, #3
 8006a1a:	e7e1      	b.n	80069e0 <BSP_AUDIO_IN_Stop+0x10>
    return  BSP_ERROR_WRONG_PARAM;
 8006a1c:	f06f 0401 	mvn.w	r4, #1
 8006a20:	e7f1      	b.n	8006a06 <BSP_AUDIO_IN_Stop+0x36>
 8006a22:	bf00      	nop
 8006a24:	200008ec 	.word	0x200008ec
 8006a28:	20000a10 	.word	0x20000a10
 8006a2c:	200007f0 	.word	0x200007f0

08006a30 <BSP_AUDIO_IN_SetVolume>:
  
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
  {
    return BSP_ERROR_WRONG_PARAM;
  }
  else if (Instance == 0U)
 8006a30:	2801      	cmp	r0, #1
    return BSP_ERROR_WRONG_PARAM;
  } 
  else
  {  
  /* Update AudioIn Context */
  AudioInCtx[Instance].Volume = Volume;
 8006a32:	bf03      	ittte	eq
 8006a34:	4b02      	ldreq	r3, [pc, #8]	; (8006a40 <BSP_AUDIO_IN_SetVolume+0x10>)
  /* Return BSP status */
  return ret;  
 8006a36:	2000      	moveq	r0, #0
  AudioInCtx[Instance].Volume = Volume;
 8006a38:	66d9      	streq	r1, [r3, #108]	; 0x6c
    return BSP_ERROR_WRONG_PARAM;
 8006a3a:	f06f 0001 	mvnne.w	r0, #1
  }
}
 8006a3e:	4770      	bx	lr
 8006a40:	200008ec 	.word	0x200008ec

08006a44 <HAL_DFSDM_FilterRegConvCpltCallback>:
using HAL_DFSDM_FilterGetRegularValue.
* @param  hdfsdm_filter   DFSDM filter handle.
* @retval None
*/
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8006a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  UNUSED(hdfsdm_filter);
  uint32_t j;
  
  if(AudioInCtx[1].IsMultiBuff == 1U)
 8006a48:	4b72      	ldr	r3, [pc, #456]	; (8006c14 <HAL_DFSDM_FilterRegConvCpltCallback+0x1d0>)
 8006a4a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006a4c:	2a01      	cmp	r2, #1
{
 8006a4e:	b085      	sub	sp, #20
  if(AudioInCtx[1].IsMultiBuff == 1U)
 8006a50:	d105      	bne.n	8006a5e <HAL_DFSDM_FilterRegConvCpltCallback+0x1a>
  {
    /* Call the record update function to get the second half */
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
 8006a52:	2001      	movs	r0, #1
 8006a54:	f012 f89a 	bl	8018b8c <BSP_AUDIO_IN_TransferComplete_CallBack>
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr*j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);    
      }
    }
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
  }
}
 8006a58:	b005      	add	sp, #20
 8006a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((AudioInCtx[1].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 8006a5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a60:	f012 0402 	ands.w	r4, r2, #2
 8006a64:	f000 8083 	beq.w	8006b6e <HAL_DFSDM_FilterRegConvCpltCallback+0x12a>
 8006a68:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8006a6a:	6d58      	ldr	r0, [r3, #84]	; 0x54
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[0].oldOut, -32760, 32760);
 8006a6c:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 8006c18 <HAL_DFSDM_FilterRegConvCpltCallback+0x1d4>
 8006a70:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 8006c1c <HAL_DFSDM_FilterRegConvCpltCallback+0x1d8>
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8006a74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a78:	006d      	lsls	r5, r5, #1
 8006a7a:	fbb0 f0f2 	udiv	r0, r0, r2
        AudioInCtx[1].HP_Filters[0].Z = ((RecBuff[j + ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT)] /256) * (int32_t)(AudioInCtx[1].Volume))/128;
 8006a7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006a80:	9201      	str	r2, [sp, #4]
 8006a82:	f503 79d8 	add.w	r9, r3, #432	; 0x1b0
 8006a86:	f503 740c 	add.w	r4, r3, #560	; 0x230
 8006a8a:	9503      	str	r5, [sp, #12]
 8006a8c:	e9d3 e11f 	ldrd	lr, r1, [r3, #124]	; 0x7c
 8006a90:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8006a92:	e9d3 c721 	ldrd	ip, r7, [r3, #132]	; 0x84
 8006a96:	e9d3 2623 	ldrd	r2, r6, [r3, #140]	; 0x8c
 8006a9a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8006a9e:	eb09 0880 	add.w	r8, r9, r0, lsl #2
 8006aa2:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
 8006aa6:	9402      	str	r4, [sp, #8]
 8006aa8:	3502      	adds	r5, #2
 8006aaa:	4604      	mov	r4, r0
        AudioInCtx[1].HP_Filters[0].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[0].oldOut + AudioInCtx[1].HP_Filters[0].Z - AudioInCtx[1].HP_Filters[0].oldIn)) / 256;
 8006aac:	f04f 09fc 	mov.w	r9, #252	; 0xfc
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[0].oldOut, -32760, 32760);
 8006ab0:	2000      	movs	r0, #0
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8006ab2:	4544      	cmp	r4, r8
 8006ab4:	d108      	bne.n	8006ac8 <HAL_DFSDM_FilterRegConvCpltCallback+0x84>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d0cb      	beq.n	8006a52 <HAL_DFSDM_FilterRegConvCpltCallback+0xe>
 8006aba:	e9c3 e11f 	strd	lr, r1, [r3, #124]	; 0x7c
 8006abe:	e9c3 c721 	strd	ip, r7, [r3, #132]	; 0x84
 8006ac2:	e9c3 2623 	strd	r2, r6, [r3, #140]	; 0x8c
 8006ac6:	e7c4      	b.n	8006a52 <HAL_DFSDM_FilterRegConvCpltCallback+0xe>
        AudioInCtx[1].HP_Filters[0].Z = ((RecBuff[j + ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT)] /256) * (int32_t)(AudioInCtx[1].Volume))/128;
 8006ac8:	9f02      	ldr	r7, [sp, #8]
 8006aca:	f857 0b04 	ldr.w	r0, [r7], #4
 8006ace:	9702      	str	r7, [sp, #8]
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	bfb8      	it	lt
 8006ad4:	30ff      	addlt	r0, #255	; 0xff
 8006ad6:	9f01      	ldr	r7, [sp, #4]
 8006ad8:	1200      	asrs	r0, r0, #8
 8006ada:	4378      	muls	r0, r7
 8006adc:	bf48      	it	mi
 8006ade:	307f      	addmi	r0, #127	; 0x7f
 8006ae0:	ea4f 1ee0 	mov.w	lr, r0, asr #7
        AudioInCtx[1].HP_Filters[0].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[0].oldOut + AudioInCtx[1].HP_Filters[0].Z - AudioInCtx[1].HP_Filters[0].oldIn)) / 256;
 8006ae4:	eb01 10e0 	add.w	r0, r1, r0, asr #7
 8006ae8:	eba0 0c0c 	sub.w	ip, r0, ip
 8006aec:	fb09 fc0c 	mul.w	ip, r9, ip
 8006af0:	f1bc 0f00 	cmp.w	ip, #0
 8006af4:	4661      	mov	r1, ip
 8006af6:	bfb8      	it	lt
 8006af8:	f10c 01ff 	addlt.w	r1, ip, #255	; 0xff
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[0].oldOut, -32760, 32760);
 8006afc:	45d4      	cmp	ip, sl
        AudioInCtx[1].HP_Filters[0].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[0].oldOut + AudioInCtx[1].HP_Filters[0].Z - AudioInCtx[1].HP_Filters[0].oldIn)) / 256;
 8006afe:	ea4f 2121 	mov.w	r1, r1, asr #8
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[0].oldOut, -32760, 32760);
 8006b02:	db28      	blt.n	8006b56 <HAL_DFSDM_FilterRegConvCpltCallback+0x112>
 8006b04:	45dc      	cmp	ip, fp
 8006b06:	da29      	bge.n	8006b5c <HAL_DFSDM_FilterRegConvCpltCallback+0x118>
 8006b08:	b288      	uxth	r0, r1
 8006b0a:	f825 0c02 	strh.w	r0, [r5, #-2]
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j + ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT)] /256) * (int32_t)(AudioInCtx[1].Volume))/512;
 8006b0e:	f858 0b04 	ldr.w	r0, [r8], #4
 8006b12:	9f01      	ldr	r7, [sp, #4]
 8006b14:	2800      	cmp	r0, #0
 8006b16:	bfb8      	it	lt
 8006b18:	30ff      	addlt	r0, #255	; 0xff
 8006b1a:	1200      	asrs	r0, r0, #8
 8006b1c:	4378      	muls	r0, r7
 8006b1e:	bf48      	it	mi
 8006b20:	f200 10ff 	addwmi	r0, r0, #511	; 0x1ff
 8006b24:	1247      	asrs	r7, r0, #9
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8006b26:	eb02 2060 	add.w	r0, r2, r0, asr #9
 8006b2a:	1b86      	subs	r6, r0, r6
 8006b2c:	fb09 f606 	mul.w	r6, r9, r6
 8006b30:	2e00      	cmp	r6, #0
 8006b32:	4632      	mov	r2, r6
 8006b34:	bfb8      	it	lt
 8006b36:	f106 02ff 	addlt.w	r2, r6, #255	; 0xff
        AudioInCtx[1].pBuff[(AudioInCtx[1].ChannelsNbr*j)+1U] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);          
 8006b3a:	4556      	cmp	r6, sl
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8006b3c:	ea4f 2222 	mov.w	r2, r2, asr #8
        AudioInCtx[1].pBuff[(AudioInCtx[1].ChannelsNbr*j)+1U] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);          
 8006b40:	db0f      	blt.n	8006b62 <HAL_DFSDM_FilterRegConvCpltCallback+0x11e>
 8006b42:	455e      	cmp	r6, fp
 8006b44:	da10      	bge.n	8006b68 <HAL_DFSDM_FilterRegConvCpltCallback+0x124>
 8006b46:	b290      	uxth	r0, r2
 8006b48:	8028      	strh	r0, [r5, #0]
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8006b4a:	9803      	ldr	r0, [sp, #12]
        AudioInCtx[1].HP_Filters[1].oldIn = AudioInCtx[1].HP_Filters[1].Z;
 8006b4c:	463e      	mov	r6, r7
 8006b4e:	4405      	add	r5, r0
        AudioInCtx[1].HP_Filters[0].oldIn = AudioInCtx[1].HP_Filters[0].Z;
 8006b50:	46f4      	mov	ip, lr
        AudioInCtx[1].pBuff[(AudioInCtx[1].ChannelsNbr*j)+1U] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);          
 8006b52:	2001      	movs	r0, #1
 8006b54:	e7ad      	b.n	8006ab2 <HAL_DFSDM_FilterRegConvCpltCallback+0x6e>
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[0].oldOut, -32760, 32760);
 8006b56:	f248 0008 	movw	r0, #32776	; 0x8008
 8006b5a:	e7d6      	b.n	8006b0a <HAL_DFSDM_FilterRegConvCpltCallback+0xc6>
 8006b5c:	f647 70f8 	movw	r0, #32760	; 0x7ff8
 8006b60:	e7d3      	b.n	8006b0a <HAL_DFSDM_FilterRegConvCpltCallback+0xc6>
        AudioInCtx[1].pBuff[(AudioInCtx[1].ChannelsNbr*j)+1U] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);          
 8006b62:	f248 0008 	movw	r0, #32776	; 0x8008
 8006b66:	e7ef      	b.n	8006b48 <HAL_DFSDM_FilterRegConvCpltCallback+0x104>
 8006b68:	f647 70f8 	movw	r0, #32760	; 0x7ff8
 8006b6c:	e7ec      	b.n	8006b48 <HAL_DFSDM_FilterRegConvCpltCallback+0x104>
    if (AudioInCtx[1].Device == ONBOARD_ANALOG_MIC_MASK)
 8006b6e:	2a01      	cmp	r2, #1
 8006b70:	f47f af6f 	bne.w	8006a52 <HAL_DFSDM_FilterRegConvCpltCallback+0xe>
 8006b74:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8006b76:	6d5d      	ldr	r5, [r3, #84]	; 0x54
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j + ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT)] /256) * (int32_t)(AudioInCtx[1].Volume))/512;
 8006b78:	f8d3 806c 	ldr.w	r8, [r3, #108]	; 0x6c
 8006b7c:	f8d3 c060 	ldr.w	ip, [r3, #96]	; 0x60
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr*j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);    
 8006b80:	f8df a094 	ldr.w	sl, [pc, #148]	; 8006c18 <HAL_DFSDM_FilterRegConvCpltCallback+0x1d4>
 8006b84:	f8df b094 	ldr.w	fp, [pc, #148]	; 8006c1c <HAL_DFSDM_FilterRegConvCpltCallback+0x1d8>
 8006b88:	e9d3 7022 	ldrd	r7, r0, [r3, #136]	; 0x88
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8006b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b90:	f503 76d8 	add.w	r6, r3, #432	; 0x1b0
 8006b94:	fbb5 f5f2 	udiv	r5, r5, r2
 8006b98:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006b9c:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 8006ba0:	eb06 0685 	add.w	r6, r6, r5, lsl #2
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr*j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);    
 8006ba4:	4621      	mov	r1, r4
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8006ba6:	f04f 09fc 	mov.w	r9, #252	; 0xfc
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8006baa:	42a5      	cmp	r5, r4
 8006bac:	d107      	bne.n	8006bbe <HAL_DFSDM_FilterRegConvCpltCallback+0x17a>
 8006bae:	2900      	cmp	r1, #0
 8006bb0:	f43f af4f 	beq.w	8006a52 <HAL_DFSDM_FilterRegConvCpltCallback+0xe>
 8006bb4:	e9c3 7022 	strd	r7, r0, [r3, #136]	; 0x88
 8006bb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006bbc:	e749      	b.n	8006a52 <HAL_DFSDM_FilterRegConvCpltCallback+0xe>
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j + ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT)] /256) * (int32_t)(AudioInCtx[1].Volume))/512;
 8006bbe:	f856 1b04 	ldr.w	r1, [r6], #4
 8006bc2:	2900      	cmp	r1, #0
 8006bc4:	bfb8      	it	lt
 8006bc6:	31ff      	addlt	r1, #255	; 0xff
 8006bc8:	4647      	mov	r7, r8
 8006bca:	1209      	asrs	r1, r1, #8
 8006bcc:	4379      	muls	r1, r7
 8006bce:	bf48      	it	mi
 8006bd0:	f201 11ff 	addwmi	r1, r1, #511	; 0x1ff
 8006bd4:	124f      	asrs	r7, r1, #9
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8006bd6:	eb00 2161 	add.w	r1, r0, r1, asr #9
 8006bda:	1a8a      	subs	r2, r1, r2
 8006bdc:	fb09 f202 	mul.w	r2, r9, r2
 8006be0:	2a00      	cmp	r2, #0
 8006be2:	4610      	mov	r0, r2
 8006be4:	bfb8      	it	lt
 8006be6:	f102 00ff 	addlt.w	r0, r2, #255	; 0xff
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr*j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);    
 8006bea:	4552      	cmp	r2, sl
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8006bec:	ea4f 2020 	mov.w	r0, r0, asr #8
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr*j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);    
 8006bf0:	db09      	blt.n	8006c06 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c2>
 8006bf2:	455a      	cmp	r2, fp
 8006bf4:	da0a      	bge.n	8006c0c <HAL_DFSDM_FilterRegConvCpltCallback+0x1c8>
 8006bf6:	b282      	uxth	r2, r0
 8006bf8:	f8ac 2000 	strh.w	r2, [ip]
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8006bfc:	3401      	adds	r4, #1
 8006bfe:	44f4      	add	ip, lr
        AudioInCtx[1].HP_Filters[1].oldIn = AudioInCtx[1].HP_Filters[1].Z;
 8006c00:	463a      	mov	r2, r7
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U) * N_MS_PER_INTERRUPT); j++)
 8006c02:	2101      	movs	r1, #1
 8006c04:	e7d1      	b.n	8006baa <HAL_DFSDM_FilterRegConvCpltCallback+0x166>
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr*j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);    
 8006c06:	f248 0208 	movw	r2, #32776	; 0x8008
 8006c0a:	e7f5      	b.n	8006bf8 <HAL_DFSDM_FilterRegConvCpltCallback+0x1b4>
 8006c0c:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8006c10:	e7f2      	b.n	8006bf8 <HAL_DFSDM_FilterRegConvCpltCallback+0x1b4>
 8006c12:	bf00      	nop
 8006c14:	200008ec 	.word	0x200008ec
 8006c18:	ff800701 	.word	0xff800701
 8006c1c:	007ff900 	.word	0x007ff900

08006c20 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
* @brief  Half regular conversion complete callback. 
* @param  hdfsdm_filter   DFSDM filter handle.
* @retval None
*/
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8006c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  UNUSED(hdfsdm_filter);
  uint32_t j;
  
  if(AudioInCtx[1].IsMultiBuff == 1U)
 8006c24:	4b6e      	ldr	r3, [pc, #440]	; (8006de0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c0>)
 8006c26:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006c28:	2a01      	cmp	r2, #1
{
 8006c2a:	b085      	sub	sp, #20
  if(AudioInCtx[1].IsMultiBuff == 1U)
 8006c2c:	d105      	bne.n	8006c3a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a>
  {
    /* Call the record update function to get the second half */
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
 8006c2e:	2001      	movs	r0, #1
 8006c30:	f011 ffa4 	bl	8018b7c <BSP_AUDIO_IN_HalfTransfer_CallBack>
      }
    }
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
  }
  
}
 8006c34:	b005      	add	sp, #20
 8006c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((AudioInCtx[1].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 8006c3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c3c:	f012 0402 	ands.w	r4, r2, #2
 8006c40:	d07f      	beq.n	8006d42 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x122>
 8006c42:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
        AudioInCtx[1].HP_Filters[0].Z = ((RecBuff[j] /256) *  (int32_t)(AudioInCtx[1].Volume)) /128;
 8006c44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8006c46:	6d5f      	ldr	r7, [r3, #84]	; 0x54
        AudioInCtx[1].HP_Filters[0].Z = ((RecBuff[j] /256) *  (int32_t)(AudioInCtx[1].Volume)) /128;
 8006c48:	9200      	str	r2, [sp, #0]
 8006c4a:	0064      	lsls	r4, r4, #1
 8006c4c:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8006c50:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
 8006c54:	9402      	str	r4, [sp, #8]
 8006c56:	fbb7 f7f9 	udiv	r7, r7, r9
 8006c5a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * (j)] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[0].oldOut, -32760, 32760);
 8006c5c:	f8df a184 	ldr.w	sl, [pc, #388]	; 8006de4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c4>
 8006c60:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006de8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c8>
 8006c64:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8006c68:	e9d3 e11f 	ldrd	lr, r1, [r3, #124]	; 0x7c
 8006c6c:	e9d3 c621 	ldrd	ip, r6, [r3, #132]	; 0x84
 8006c70:	e9d3 2523 	ldrd	r2, r5, [r3, #140]	; 0x8c
 8006c74:	9703      	str	r7, [sp, #12]
 8006c76:	2700      	movs	r7, #0
 8006c78:	f503 780c 	add.w	r8, r3, #560	; 0x230
 8006c7c:	3402      	adds	r4, #2
 8006c7e:	9701      	str	r7, [sp, #4]
        AudioInCtx[1].HP_Filters[0].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[0].oldOut + AudioInCtx[1].HP_Filters[0].Z - AudioInCtx[1].HP_Filters[0].oldIn)) / 256;
 8006c80:	f04f 09fc 	mov.w	r9, #252	; 0xfc
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8006c84:	9f03      	ldr	r7, [sp, #12]
 8006c86:	4287      	cmp	r7, r0
 8006c88:	d109      	bne.n	8006c9e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x7e>
 8006c8a:	9801      	ldr	r0, [sp, #4]
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d0ce      	beq.n	8006c2e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe>
 8006c90:	e9c3 e11f 	strd	lr, r1, [r3, #124]	; 0x7c
 8006c94:	e9c3 c621 	strd	ip, r6, [r3, #132]	; 0x84
 8006c98:	e9c3 2523 	strd	r2, r5, [r3, #140]	; 0x8c
 8006c9c:	e7c7      	b.n	8006c2e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe>
        AudioInCtx[1].HP_Filters[0].Z = ((RecBuff[j] /256) *  (int32_t)(AudioInCtx[1].Volume)) /128;
 8006c9e:	f858 6b04 	ldr.w	r6, [r8], #4
 8006ca2:	9f00      	ldr	r7, [sp, #0]
 8006ca4:	2e00      	cmp	r6, #0
 8006ca6:	bfb8      	it	lt
 8006ca8:	36ff      	addlt	r6, #255	; 0xff
 8006caa:	1236      	asrs	r6, r6, #8
 8006cac:	437e      	muls	r6, r7
 8006cae:	bf48      	it	mi
 8006cb0:	367f      	addmi	r6, #127	; 0x7f
 8006cb2:	ea4f 1ee6 	mov.w	lr, r6, asr #7
        AudioInCtx[1].HP_Filters[0].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[0].oldOut + AudioInCtx[1].HP_Filters[0].Z - AudioInCtx[1].HP_Filters[0].oldIn)) / 256;
 8006cb6:	eb01 16e6 	add.w	r6, r1, r6, asr #7
 8006cba:	eba6 0c0c 	sub.w	ip, r6, ip
 8006cbe:	fb09 fc0c 	mul.w	ip, r9, ip
 8006cc2:	f1bc 0f00 	cmp.w	ip, #0
 8006cc6:	4661      	mov	r1, ip
 8006cc8:	bfb8      	it	lt
 8006cca:	f10c 01ff 	addlt.w	r1, ip, #255	; 0xff
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * (j)] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[0].oldOut, -32760, 32760);
 8006cce:	45d4      	cmp	ip, sl
        AudioInCtx[1].HP_Filters[0].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[0].oldOut + AudioInCtx[1].HP_Filters[0].Z - AudioInCtx[1].HP_Filters[0].oldIn)) / 256;
 8006cd0:	ea4f 2121 	mov.w	r1, r1, asr #8
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * (j)] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[0].oldOut, -32760, 32760);
 8006cd4:	db29      	blt.n	8006d2a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x10a>
 8006cd6:	45dc      	cmp	ip, fp
 8006cd8:	da2a      	bge.n	8006d30 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x110>
 8006cda:	b28e      	uxth	r6, r1
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j]  /256) *  (int32_t)(AudioInCtx[1].Volume)) /512;
 8006cdc:	f850 7b04 	ldr.w	r7, [r0], #4
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * (j)] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[0].oldOut, -32760, 32760);
 8006ce0:	f824 6c02 	strh.w	r6, [r4, #-2]
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j]  /256) *  (int32_t)(AudioInCtx[1].Volume)) /512;
 8006ce4:	2f00      	cmp	r7, #0
 8006ce6:	9e00      	ldr	r6, [sp, #0]
 8006ce8:	bfb8      	it	lt
 8006cea:	37ff      	addlt	r7, #255	; 0xff
 8006cec:	123f      	asrs	r7, r7, #8
 8006cee:	4377      	muls	r7, r6
 8006cf0:	bf48      	it	mi
 8006cf2:	f207 17ff 	addwmi	r7, r7, #511	; 0x1ff
 8006cf6:	127e      	asrs	r6, r7, #9
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8006cf8:	eb02 2767 	add.w	r7, r2, r7, asr #9
 8006cfc:	1b7d      	subs	r5, r7, r5
 8006cfe:	fb09 f505 	mul.w	r5, r9, r5
 8006d02:	2d00      	cmp	r5, #0
 8006d04:	462a      	mov	r2, r5
 8006d06:	bfb8      	it	lt
 8006d08:	f105 02ff 	addlt.w	r2, r5, #255	; 0xff
        AudioInCtx[1].pBuff[(AudioInCtx[1].ChannelsNbr*j)+1U] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8006d0c:	4555      	cmp	r5, sl
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8006d0e:	ea4f 2222 	mov.w	r2, r2, asr #8
        AudioInCtx[1].pBuff[(AudioInCtx[1].ChannelsNbr*j)+1U] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8006d12:	db10      	blt.n	8006d36 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x116>
 8006d14:	455d      	cmp	r5, fp
 8006d16:	da11      	bge.n	8006d3c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x11c>
 8006d18:	b295      	uxth	r5, r2
 8006d1a:	8025      	strh	r5, [r4, #0]
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8006d1c:	9d02      	ldr	r5, [sp, #8]
        AudioInCtx[1].pBuff[(AudioInCtx[1].ChannelsNbr*j)+1U] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8006d1e:	2701      	movs	r7, #1
 8006d20:	442c      	add	r4, r5
        AudioInCtx[1].HP_Filters[0].oldIn = AudioInCtx[1].HP_Filters[0].Z;
 8006d22:	46f4      	mov	ip, lr
        AudioInCtx[1].HP_Filters[1].oldIn = AudioInCtx[1].HP_Filters[1].Z;
 8006d24:	4635      	mov	r5, r6
        AudioInCtx[1].pBuff[(AudioInCtx[1].ChannelsNbr*j)+1U] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8006d26:	9701      	str	r7, [sp, #4]
 8006d28:	e7ac      	b.n	8006c84 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x64>
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr * (j)] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[0].oldOut, -32760, 32760);
 8006d2a:	f248 0608 	movw	r6, #32776	; 0x8008
 8006d2e:	e7d5      	b.n	8006cdc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xbc>
 8006d30:	f647 76f8 	movw	r6, #32760	; 0x7ff8
 8006d34:	e7d2      	b.n	8006cdc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xbc>
        AudioInCtx[1].pBuff[(AudioInCtx[1].ChannelsNbr*j)+1U] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8006d36:	f248 0508 	movw	r5, #32776	; 0x8008
 8006d3a:	e7ee      	b.n	8006d1a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xfa>
 8006d3c:	f647 75f8 	movw	r5, #32760	; 0x7ff8
 8006d40:	e7eb      	b.n	8006d1a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xfa>
    if (AudioInCtx[1].Device == ONBOARD_ANALOG_MIC_MASK)
 8006d42:	2a01      	cmp	r2, #1
 8006d44:	f47f af73 	bne.w	8006c2e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe>
 8006d48:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8006d4a:	6d5e      	ldr	r6, [r3, #84]	; 0x54
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j]  /256) *  (int32_t)(AudioInCtx[1].Volume)) /512;
 8006d4c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8006d50:	6e1f      	ldr	r7, [r3, #96]	; 0x60
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr*j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8006d52:	f8df a090 	ldr.w	sl, [pc, #144]	; 8006de4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c4>
 8006d56:	f8df b090 	ldr.w	fp, [pc, #144]	; 8006de8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c8>
 8006d5a:	e9d3 5022 	ldrd	r5, r0, [r3, #136]	; 0x88
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8006d5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d62:	fbb6 f6f2 	udiv	r6, r6, r2
 8006d66:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006d6a:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006d6e:	f503 78d8 	add.w	r8, r3, #432	; 0x1b0
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr*j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8006d72:	4621      	mov	r1, r4
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8006d74:	f04f 09fc 	mov.w	r9, #252	; 0xfc
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8006d78:	42a6      	cmp	r6, r4
 8006d7a:	d107      	bne.n	8006d8c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x16c>
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	f43f af56 	beq.w	8006c2e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe>
 8006d82:	e9c3 5022 	strd	r5, r0, [r3, #136]	; 0x88
 8006d86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006d8a:	e750      	b.n	8006c2e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe>
        AudioInCtx[1].HP_Filters[1].Z = ((DFSDM_OUT[j]  /256) *  (int32_t)(AudioInCtx[1].Volume)) /512;
 8006d8c:	f858 1b04 	ldr.w	r1, [r8], #4
 8006d90:	2900      	cmp	r1, #0
 8006d92:	bfb8      	it	lt
 8006d94:	31ff      	addlt	r1, #255	; 0xff
 8006d96:	4675      	mov	r5, lr
 8006d98:	1209      	asrs	r1, r1, #8
 8006d9a:	4369      	muls	r1, r5
 8006d9c:	bf48      	it	mi
 8006d9e:	f201 11ff 	addwmi	r1, r1, #511	; 0x1ff
 8006da2:	124d      	asrs	r5, r1, #9
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8006da4:	eb00 2161 	add.w	r1, r0, r1, asr #9
 8006da8:	1a8a      	subs	r2, r1, r2
 8006daa:	fb09 f202 	mul.w	r2, r9, r2
 8006dae:	2a00      	cmp	r2, #0
 8006db0:	4610      	mov	r0, r2
 8006db2:	bfb8      	it	lt
 8006db4:	f102 00ff 	addlt.w	r0, r2, #255	; 0xff
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr*j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8006db8:	4552      	cmp	r2, sl
        AudioInCtx[1].HP_Filters[1].oldOut = (0xFC * (AudioInCtx[1].HP_Filters[1].oldOut + AudioInCtx[1].HP_Filters[1].Z - AudioInCtx[1].HP_Filters[1].oldIn)) / 256;
 8006dba:	ea4f 2020 	mov.w	r0, r0, asr #8
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr*j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8006dbe:	db08      	blt.n	8006dd2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b2>
 8006dc0:	455a      	cmp	r2, fp
 8006dc2:	da09      	bge.n	8006dd8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b8>
 8006dc4:	b282      	uxth	r2, r0
 8006dc6:	803a      	strh	r2, [r7, #0]
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8006dc8:	3401      	adds	r4, #1
 8006dca:	4467      	add	r7, ip
        AudioInCtx[1].HP_Filters[1].oldIn = AudioInCtx[1].HP_Filters[1].Z;
 8006dcc:	462a      	mov	r2, r5
      for (j = 0U; j < ((AudioInCtx[1].SampleRate / 1000U)* N_MS_PER_INTERRUPT); j++)
 8006dce:	2101      	movs	r1, #1
 8006dd0:	e7d2      	b.n	8006d78 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x158>
        AudioInCtx[1].pBuff[AudioInCtx[1].ChannelsNbr*j] = (uint16_t) SaturaLH(AudioInCtx[1].HP_Filters[1].oldOut, -32760, 32760);
 8006dd2:	f248 0208 	movw	r2, #32776	; 0x8008
 8006dd6:	e7f6      	b.n	8006dc6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a6>
 8006dd8:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8006ddc:	e7f3      	b.n	8006dc6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a6>
 8006dde:	bf00      	nop
 8006de0:	200008ec 	.word	0x200008ec
 8006de4:	ff800701 	.word	0xff800701
 8006de8:	007ff900 	.word	0x007ff900

08006dec <MX_DFSDM_Init>:
*         - Oversampling = CLK(input DFSDM)/(Clock_Divider * AudioFreq)
* @retval HAL_status
*/
__weak HAL_StatusTypeDef MX_DFSDM_Init(DFSDM_Filter_HandleTypeDef *hDfsdmFilter, DFSDM_Channel_HandleTypeDef *hDfsdmChannel, MX_DFSDM_Config *MXConfig)
{
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006dec:	4b4d      	ldr	r3, [pc, #308]	; (8006f24 <MX_DFSDM_Init+0x138>)
{
 8006dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006df0:	4615      	mov	r5, r2
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006df2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006df4:	f042 0204 	orr.w	r2, r2, #4
 8006df8:	649a      	str	r2, [r3, #72]	; 0x48
 8006dfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
{
 8006dfc:	b085      	sub	sp, #20
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006dfe:	f002 0204 	and.w	r2, r2, #4
 8006e02:	9201      	str	r2, [sp, #4]
 8006e04:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DFSDM_CLK_ENABLE();
 8006e06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e08:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006e0c:	661a      	str	r2, [r3, #96]	; 0x60
 8006e0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e10:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8006e14:	9202      	str	r2, [sp, #8]
 8006e16:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006e18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e1a:	f042 0201 	orr.w	r2, r2, #1
 8006e1e:	649a      	str	r2, [r3, #72]	; 0x48
 8006e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	9303      	str	r3, [sp, #12]
 8006e28:	9b03      	ldr	r3, [sp, #12]
  
  /* MIC channels initialization */
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(hDfsdmChannel);
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
  hDfsdmChannel->Instance                      = MXConfig->ChannelInstance;  
 8006e30:	692a      	ldr	r2, [r5, #16]
 8006e32:	600a      	str	r2, [r1, #0]
  hDfsdmChannel->Init.OutputClock.Activation   = MXConfig->Activation;
 8006e34:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 8006e38:	710a      	strb	r2, [r1, #4]
  hDfsdmChannel->Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO; 
 8006e3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006e3e:	608a      	str	r2, [r1, #8]
  hDfsdmChannel->Init.OutputClock.Divider      = (uint32_t) (MXConfig->ClockDivider); 
 8006e40:	6a2a      	ldr	r2, [r5, #32]
 8006e42:	60ca      	str	r2, [r1, #12]
  hDfsdmChannel->Init.Input.Multiplexer        = MXConfig->Multiplexer;  
 8006e44:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  hDfsdmChannel->Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 8006e46:	e9c1 2304 	strd	r2, r3, [r1, #16]
  hDfsdmChannel->Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL; 
 8006e4a:	2204      	movs	r2, #4
  hDfsdmChannel->Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 8006e4c:	e9c1 2308 	strd	r2, r3, [r1, #32]
  hDfsdmChannel->Init.Awd.Oversampling         = 10; 
 8006e50:	220a      	movs	r2, #10
  hDfsdmChannel->Init.Offset                   = 0;
 8006e52:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  hDfsdmChannel->Init.RightBitShift            = MXConfig->RightBitShift;
 8006e56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e58:	630b      	str	r3, [r1, #48]	; 0x30
  hDfsdmChannel->Init.Input.Pins               = MXConfig->DigitalMicPins; 
 8006e5a:	696b      	ldr	r3, [r5, #20]
 8006e5c:	618b      	str	r3, [r1, #24]
  hDfsdmChannel->Init.SerialInterface.Type     = MXConfig->DigitalMicType;
 8006e5e:	69ab      	ldr	r3, [r5, #24]
 8006e60:	61cb      	str	r3, [r1, #28]
{
 8006e62:	4604      	mov	r4, r0
 8006e64:	4608      	mov	r0, r1
  
  if(HAL_OK != HAL_DFSDM_ChannelInit(hDfsdmChannel))
 8006e66:	f002 fced 	bl	8009844 <HAL_DFSDM_ChannelInit>
 8006e6a:	b118      	cbz	r0, 8006e74 <MX_DFSDM_Init+0x88>
  {
    return HAL_ERROR;
 8006e6c:	2601      	movs	r6, #1
      HAL_NVIC_EnableIRQ(DFSDM_DMA_ANALOG_IRQn);  
    }
  }
  
  return HAL_OK;
}
 8006e6e:	4630      	mov	r0, r6
 8006e70:	b005      	add	sp, #20
 8006e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(hDfsdmFilter); 
 8006e74:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
  hDfsdmFilter->Instance                          = MXConfig->FilterInstance; 
 8006e78:	682b      	ldr	r3, [r5, #0]
 8006e7a:	6023      	str	r3, [r4, #0]
  hDfsdmFilter->Init.RegularParam.Trigger         = MXConfig->RegularTrigger;
 8006e7c:	686b      	ldr	r3, [r5, #4]
 8006e7e:	6063      	str	r3, [r4, #4]
  hDfsdmFilter->Init.RegularParam.FastMode        = ENABLE;
 8006e80:	f240 1301 	movw	r3, #257	; 0x101
  hDfsdmFilter->Init.InjectedParam.ScanMode       = DISABLE;
 8006e84:	7420      	strb	r0, [r4, #16]
  hDfsdmFilter->Init.RegularParam.FastMode        = ENABLE;
 8006e86:	8123      	strh	r3, [r4, #8]
  hDfsdmFilter->Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 8006e88:	60e0      	str	r0, [r4, #12]
  hDfsdmFilter->Init.InjectedParam.DmaMode        = MXConfig->DmaMode;
 8006e8a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8006e8e:	7463      	strb	r3, [r4, #17]
  hDfsdmFilter->Init.FilterParam.SincOrder        = MXConfig->SincOrder;
 8006e90:	68ab      	ldr	r3, [r5, #8]
 8006e92:	61e3      	str	r3, [r4, #28]
  hDfsdmFilter->Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8006e94:	f44f 5700 	mov.w	r7, #8192	; 0x2000
  hDfsdmFilter->Init.FilterParam.Oversampling     = MXConfig->Oversampling;   
 8006e98:	68eb      	ldr	r3, [r5, #12]
  hDfsdmFilter->Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8006e9a:	6160      	str	r0, [r4, #20]
  hDfsdmFilter->Init.FilterParam.IntOversampling  = 1;
 8006e9c:	2601      	movs	r6, #1
  hDfsdmFilter->Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8006e9e:	61a7      	str	r7, [r4, #24]
  hDfsdmFilter->Init.FilterParam.Oversampling     = MXConfig->Oversampling;   
 8006ea0:	6223      	str	r3, [r4, #32]
  hDfsdmFilter->Init.FilterParam.IntOversampling  = 1;
 8006ea2:	6266      	str	r6, [r4, #36]	; 0x24
  if(HAL_DFSDM_FilterInit(hDfsdmFilter) != HAL_OK)
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f002 fd71 	bl	800998c <HAL_DFSDM_FilterInit>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d1de      	bne.n	8006e6c <MX_DFSDM_Init+0x80>
  if(HAL_DFSDM_FilterConfigRegChannel(hDfsdmFilter, MXConfig->Channel4Filter, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8006eae:	4632      	mov	r2, r6
 8006eb0:	69e9      	ldr	r1, [r5, #28]
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f002 fded 	bl	8009a92 <HAL_DFSDM_FilterConfigRegChannel>
 8006eb8:	4606      	mov	r6, r0
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d1d6      	bne.n	8006e6c <MX_DFSDM_Init+0x80>
  if (MXConfig->FilterInstance == AMIC_ONBOARD_FILTER)
 8006ebe:	682a      	ldr	r2, [r5, #0]
 8006ec0:	4b19      	ldr	r3, [pc, #100]	; (8006f28 <MX_DFSDM_Init+0x13c>)
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d1d3      	bne.n	8006e6e <MX_DFSDM_Init+0x82>
    AMic_OnBoard_Dma.Init.Request = DMA_REQUEST_ANALOG;
 8006ec6:	4d19      	ldr	r5, [pc, #100]	; (8006f2c <MX_DFSDM_Init+0x140>)
 8006ec8:	2357      	movs	r3, #87	; 0x57
    AMic_OnBoard_Dma.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006eca:	e9c5 30ad 	strd	r3, r0, [r5, #692]	; 0x2b4
    AMic_OnBoard_Dma.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006ece:	2280      	movs	r2, #128	; 0x80
 8006ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ed4:	e9c5 23b0 	strd	r2, r3, [r5, #704]	; 0x2c0
    AMic_OnBoard_Dma.Init.Mode = DMA_CIRCULAR;
 8006ed8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006edc:	2320      	movs	r3, #32
 8006ede:	e9c5 13b2 	strd	r1, r3, [r5, #712]	; 0x2c8
    AMic_OnBoard_Dma.Instance = DFSDM_DMA_ANALOG;
 8006ee2:	4b13      	ldr	r3, [pc, #76]	; (8006f30 <MX_DFSDM_Init+0x144>)
 8006ee4:	f8c5 32b0 	str.w	r3, [r5, #688]	; 0x2b0
    __HAL_LINKDMA(hDfsdmFilter, hdmaReg, AMic_OnBoard_Dma);
 8006ee8:	f505 732c 	add.w	r3, r5, #688	; 0x2b0
 8006eec:	62a3      	str	r3, [r4, #40]	; 0x28
    if (AudioInCtx[1].ChannelsNbr == 1U)
 8006eee:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    AMic_OnBoard_Dma.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ef0:	f8c5 02bc 	str.w	r0, [r5, #700]	; 0x2bc
    if (AudioInCtx[1].ChannelsNbr == 1U)
 8006ef4:	2b01      	cmp	r3, #1
      __HAL_DMA_RESET_HANDLE_STATE(&AMic_OnBoard_Dma);
 8006ef6:	bf08      	it	eq
 8006ef8:	f885 02d5 	strbeq.w	r0, [r5, #725]	; 0x2d5
    (void)HAL_DMA_Init(&AMic_OnBoard_Dma);
 8006efc:	480d      	ldr	r0, [pc, #52]	; (8006f34 <MX_DFSDM_Init+0x148>)
    AMic_OnBoard_Dma.Init.Priority = DMA_PRIORITY_HIGH;
 8006efe:	f8c5 72d0 	str.w	r7, [r5, #720]	; 0x2d0
    __HAL_LINKDMA(hDfsdmFilter, hdmaReg, AMic_OnBoard_Dma);
 8006f02:	f8c5 42d8 	str.w	r4, [r5, #728]	; 0x2d8
    (void)HAL_DMA_Init(&AMic_OnBoard_Dma);
 8006f06:	f002 ff3f 	bl	8009d88 <HAL_DMA_Init>
    if (AudioInCtx[1].ChannelsNbr == 1U)
 8006f0a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d1ae      	bne.n	8006e6e <MX_DFSDM_Init+0x82>
      HAL_NVIC_SetPriority(DFSDM_DMA_ANALOG_IRQn, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8006f10:	2200      	movs	r2, #0
 8006f12:	2106      	movs	r1, #6
 8006f14:	200e      	movs	r0, #14
 8006f16:	f002 faad 	bl	8009474 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DFSDM_DMA_ANALOG_IRQn);  
 8006f1a:	200e      	movs	r0, #14
 8006f1c:	f002 fadc 	bl	80094d8 <HAL_NVIC_EnableIRQ>
 8006f20:	e7a5      	b.n	8006e6e <MX_DFSDM_Init+0x82>
 8006f22:	bf00      	nop
 8006f24:	40021000 	.word	0x40021000
 8006f28:	40016180 	.word	0x40016180
 8006f2c:	200008ec 	.word	0x200008ec
 8006f30:	40020044 	.word	0x40020044
 8006f34:	20000b9c 	.word	0x20000b9c

08006f38 <DFSDM_ChannelMspInit>:
void DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hDfsdmChannel)
{
  GPIO_InitTypeDef  GPIO_InitStruct;  
  
  /* Enable DFSDM clock */
  __HAL_RCC_DFSDM1_CLK_ENABLE();
 8006f38:	4b1e      	ldr	r3, [pc, #120]	; (8006fb4 <DFSDM_ChannelMspInit+0x7c>)
{
 8006f3a:	b510      	push	{r4, lr}
  __HAL_RCC_DFSDM1_CLK_ENABLE();
 8006f3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006f3e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006f42:	661a      	str	r2, [r3, #96]	; 0x60
 8006f44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8006f46:	b088      	sub	sp, #32
  __HAL_RCC_DFSDM1_CLK_ENABLE();
 8006f48:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8006f4c:	9200      	str	r2, [sp, #0]
 8006f4e:	9a00      	ldr	r2, [sp, #0]
  
  if ((AudioInCtx[1].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 8006f50:	4a19      	ldr	r2, [pc, #100]	; (8006fb8 <DFSDM_ChannelMspInit+0x80>)
 8006f52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006f54:	0791      	lsls	r1, r2, #30
 8006f56:	d52a      	bpl.n	8006fae <DFSDM_ChannelMspInit+0x76>
  {
    if (hDfsdmChannel->Instance == DMIC_ONBOARD_CHANNEL)
 8006f58:	6801      	ldr	r1, [r0, #0]
 8006f5a:	4a18      	ldr	r2, [pc, #96]	; (8006fbc <DFSDM_ChannelMspInit+0x84>)
 8006f5c:	4291      	cmp	r1, r2
 8006f5e:	d126      	bne.n	8006fae <DFSDM_ChannelMspInit+0x76>
    {  
      /* Enable GPIO clock */
      DMIC_ONBOARD_DATAIN_GPIO_CLK_ENABLE();
 8006f60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      GPIO_InitStruct.Pin = DMIC_ONBOARD_CKOUT_PIN;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
      GPIO_InitStruct.Alternate = DMIC_ONBOARD_CKOUT_DATIN_AF;
      HAL_GPIO_Init(DMIC_ONBOARD_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 8006f62:	4817      	ldr	r0, [pc, #92]	; (8006fc0 <DFSDM_ChannelMspInit+0x88>)
      DMIC_ONBOARD_DATAIN_GPIO_CLK_ENABLE();
 8006f64:	f042 0202 	orr.w	r2, r2, #2
 8006f68:	64da      	str	r2, [r3, #76]	; 0x4c
 8006f6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f6c:	f002 0202 	and.w	r2, r2, #2
 8006f70:	9201      	str	r2, [sp, #4]
 8006f72:	9a01      	ldr	r2, [sp, #4]
      DMIC_ONBOARD_CKOUT_GPIO_CLK_ENABLE();
 8006f74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f76:	f042 0210 	orr.w	r2, r2, #16
 8006f7a:	64da      	str	r2, [r3, #76]	; 0x4c
 8006f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f7e:	f003 0310 	and.w	r3, r3, #16
 8006f82:	9302      	str	r3, [sp, #8]
 8006f84:	9b02      	ldr	r3, [sp, #8]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	e9cd 2303 	strd	r2, r3, [sp, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006f90:	9305      	str	r3, [sp, #20]
      GPIO_InitStruct.Alternate = DMIC_ONBOARD_CKOUT_DATIN_AF;
 8006f92:	2406      	movs	r4, #6
 8006f94:	2303      	movs	r3, #3
      HAL_GPIO_Init(DMIC_ONBOARD_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 8006f96:	a903      	add	r1, sp, #12
      GPIO_InitStruct.Alternate = DMIC_ONBOARD_CKOUT_DATIN_AF;
 8006f98:	e9cd 3406 	strd	r3, r4, [sp, #24]
      HAL_GPIO_Init(DMIC_ONBOARD_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 8006f9c:	f003 fa34 	bl	800a408 <HAL_GPIO_Init>
      
      /* DFSDM pin configuration: DMIC_DATIN1 pin --------------------------------*/
      GPIO_InitStruct.Pin = DMIC_ONBOARD_DATIN_PIN;
 8006fa0:	2340      	movs	r3, #64	; 0x40
      GPIO_InitStruct.Alternate = DMIC_ONBOARD_DATAIN_DATIN_AF ;
      HAL_GPIO_Init(DMIC_ONBOARD_DATIN_GPIO_PORT, &GPIO_InitStruct);
 8006fa2:	4808      	ldr	r0, [pc, #32]	; (8006fc4 <DFSDM_ChannelMspInit+0x8c>)
      GPIO_InitStruct.Pin = DMIC_ONBOARD_DATIN_PIN;
 8006fa4:	9303      	str	r3, [sp, #12]
      HAL_GPIO_Init(DMIC_ONBOARD_DATIN_GPIO_PORT, &GPIO_InitStruct);
 8006fa6:	a903      	add	r1, sp, #12
      GPIO_InitStruct.Alternate = DMIC_ONBOARD_DATAIN_DATIN_AF ;
 8006fa8:	9407      	str	r4, [sp, #28]
      HAL_GPIO_Init(DMIC_ONBOARD_DATIN_GPIO_PORT, &GPIO_InitStruct);
 8006faa:	f003 fa2d 	bl	800a408 <HAL_GPIO_Init>
    }
  }
}
 8006fae:	b008      	add	sp, #32
 8006fb0:	bd10      	pop	{r4, pc}
 8006fb2:	bf00      	nop
 8006fb4:	40021000 	.word	0x40021000
 8006fb8:	200008ec 	.word	0x200008ec
 8006fbc:	400160a0 	.word	0x400160a0
 8006fc0:	48001000 	.word	0x48001000
 8006fc4:	48000400 	.word	0x48000400

08006fc8 <DFSDM_FilterMspInit>:
* @brief  Initialize the DFSDM filter MSP.
* @param  hDfsdmFilter DFSDM Filter handle
* @retval None
*/
void DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hDfsdmFilter)
{
 8006fc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* Enable DFSDM clock */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006fca:	4b29      	ldr	r3, [pc, #164]	; (8007070 <DFSDM_FilterMspInit+0xa8>)
 8006fcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fce:	f042 0204 	orr.w	r2, r2, #4
 8006fd2:	649a      	str	r2, [r3, #72]	; 0x48
 8006fd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fd6:	f002 0204 	and.w	r2, r2, #4
 8006fda:	9201      	str	r2, [sp, #4]
 8006fdc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DFSDM_CLK_ENABLE();
 8006fde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006fe0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006fe4:	661a      	str	r2, [r3, #96]	; 0x60
 8006fe6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006fe8:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8006fec:	9202      	str	r2, [sp, #8]
 8006fee:	9a02      	ldr	r2, [sp, #8]
  
  /* Enable the DMA clock */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006ff0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ff2:	f042 0201 	orr.w	r2, r2, #1
 8006ff6:	649a      	str	r2, [r3, #72]	; 0x48
 8006ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	9303      	str	r3, [sp, #12]
 8007000:	9b03      	ldr	r3, [sp, #12]
  
  if ((AudioInCtx[1].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 8007002:	4b1c      	ldr	r3, [pc, #112]	; (8007074 <DFSDM_FilterMspInit+0xac>)
 8007004:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007006:	0792      	lsls	r2, r2, #30
 8007008:	d530      	bpl.n	800706c <DFSDM_FilterMspInit+0xa4>
  {
    if (hDfsdmFilter->Instance == DMIC_ONBOARD_FILTER)
 800700a:	6801      	ldr	r1, [r0, #0]
 800700c:	4a1a      	ldr	r2, [pc, #104]	; (8007078 <DFSDM_FilterMspInit+0xb0>)
 800700e:	4291      	cmp	r1, r2
 8007010:	d12c      	bne.n	800706c <DFSDM_FilterMspInit+0xa4>
    {
      /*********** Configure DMA stream for DIGITAL microphone *******************/
      DMic_OnBoard_Dma.Init.Direction           = DMA_PERIPH_TO_MEMORY;
      DMic_OnBoard_Dma.Init.PeriphInc           = DMA_PINC_DISABLE;
      DMic_OnBoard_Dma.Init.MemInc              = DMA_MINC_ENABLE;
      DMic_OnBoard_Dma.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007012:	2180      	movs	r1, #128	; 0x80
 8007014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007018:	e9c3 12c8 	strd	r1, r2, [r3, #800]	; 0x320
      DMic_OnBoard_Dma.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
      DMic_OnBoard_Dma.Init.Mode                = DMA_CIRCULAR;
 800701c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007020:	2220      	movs	r2, #32
 8007022:	e9c3 02ca 	strd	r0, r2, [r3, #808]	; 0x328
      DMic_OnBoard_Dma.Init.Priority            = DMA_PRIORITY_HIGH;
 8007026:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800702a:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
      DMic_OnBoard_Dma.Init.Request             = DMA_REQUEST_DIGITAL;
      
      DMic_OnBoard_Dma.Instance                 = DFSDM_DMA_DIGITAL;
 800702e:	4a13      	ldr	r2, [pc, #76]	; (800707c <DFSDM_FilterMspInit+0xb4>)
 8007030:	f04f 0e56 	mov.w	lr, #86	; 0x56
 8007034:	e9c3 2ec4 	strd	r2, lr, [r3, #784]	; 0x310
      DMic_OnBoard_Dma.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8007038:	2400      	movs	r4, #0
      
      /* Associate the DMA handle */
      __HAL_LINKDMA(&DMic_OnBoard_DfsdmFilter, hdmaReg, DMic_OnBoard_Dma);
 800703a:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800703e:	f503 7044 	add.w	r0, r3, #784	; 0x310
 8007042:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
      DMic_OnBoard_Dma.Init.PeriphInc           = DMA_PINC_DISABLE;
 8007046:	e9c3 44c6 	strd	r4, r4, [r3, #792]	; 0x318
      __HAL_LINKDMA(&DMic_OnBoard_DfsdmFilter, hdmaReg, DMic_OnBoard_Dma);
 800704a:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
      
      /* Reset DMA handle state */
      __HAL_DMA_RESET_HANDLE_STATE(&DMic_OnBoard_Dma);
 800704e:	f883 4335 	strb.w	r4, [r3, #821]	; 0x335
      
      /* Configure the DMA Channel */
      (void)HAL_DMA_Init(&DMic_OnBoard_Dma);      
 8007052:	f002 fe99 	bl	8009d88 <HAL_DMA_Init>
      
      /* DMA IRQ Channel configuration */
      HAL_NVIC_SetPriority(DFSDM_DMA_DIGITAL_IRQn, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8007056:	4622      	mov	r2, r4
 8007058:	2106      	movs	r1, #6
 800705a:	2011      	movs	r0, #17
 800705c:	f002 fa0a 	bl	8009474 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DFSDM_DMA_DIGITAL_IRQn);
 8007060:	2011      	movs	r0, #17
    }
  }
}
 8007062:	b004      	add	sp, #16
 8007064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_NVIC_EnableIRQ(DFSDM_DMA_DIGITAL_IRQn);
 8007068:	f002 ba36 	b.w	80094d8 <HAL_NVIC_EnableIRQ>
}
 800706c:	b004      	add	sp, #16
 800706e:	bd10      	pop	{r4, pc}
 8007070:	40021000 	.word	0x40021000
 8007074:	200008ec 	.word	0x200008ec
 8007078:	40016100 	.word	0x40016100
 800707c:	40020080 	.word	0x40020080

08007080 <HAL_ADC_Audio_MspInit>:
* @brief  Initialize the ADC MSP.
* @param  hDfsdmFilter ADC handle
* @retval None
*/
void HAL_ADC_Audio_MspInit(ADC_HandleTypeDef *hadc)
{
 8007080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (HAL_ADC_Counter == 0)
 8007084:	4c36      	ldr	r4, [pc, #216]	; (8007160 <HAL_ADC_Audio_MspInit+0xe0>)
 8007086:	f8d4 5370 	ldr.w	r5, [r4, #880]	; 0x370
{
 800708a:	b08a      	sub	sp, #40	; 0x28
 800708c:	4606      	mov	r6, r0
  if (HAL_ADC_Counter == 0)
 800708e:	2d00      	cmp	r5, #0
 8007090:	d15d      	bne.n	800714e <HAL_ADC_Audio_MspInit+0xce>
    GPIO_InitTypeDef          GPIO_InitStruct;
    static DMA_HandleTypeDef         DmaHandle;
    
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO clock ****************************************/
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007092:	4b34      	ldr	r3, [pc, #208]	; (8007164 <HAL_ADC_Audio_MspInit+0xe4>)
    /*##- 2- Configure peripheral GPIO #########################################*/
    /* ADC Channel GPIO pin configuration */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007094:	4834      	ldr	r0, [pc, #208]	; (8007168 <HAL_ADC_Audio_MspInit+0xe8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007098:	f042 0204 	orr.w	r2, r2, #4
 800709c:	64da      	str	r2, [r3, #76]	; 0x4c
 800709e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070a0:	f002 0204 	and.w	r2, r2, #4
 80070a4:	9201      	str	r2, [sp, #4]
 80070a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
 80070a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80070b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070b2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80070b6:	9202      	str	r2, [sp, #8]
 80070b8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 80070ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80070be:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80070c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80070c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    __HAL_RCC_DMA1_CLK_ENABLE();
 80070ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070cc:	f042 0201 	orr.w	r2, r2, #1
 80070d0:	649a      	str	r2, [r3, #72]	; 0x48
 80070d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070d4:	f002 0201 	and.w	r2, r2, #1
 80070d8:	9203      	str	r2, [sp, #12]
 80070da:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80070dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070de:	f042 0204 	orr.w	r2, r2, #4
 80070e2:	649a      	str	r2, [r3, #72]	; 0x48
 80070e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070e6:	9507      	str	r5, [sp, #28]
    __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80070ee:	270b      	movs	r7, #11
    __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80070f0:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070f2:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e9cd 3705 	strd	r3, r7, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070fa:	f003 f985 	bl	800a408 <HAL_GPIO_Init>
    
    /*##- 3- Configure DMA #####################################################*/ 
    
    /*********************** Configure DMA parameters ***************************/
    DmaHandle.Instance                 = DMA1_Channel1;
    DmaHandle.Init.Request             = DMA_REQUEST_ADC1;
 80070fe:	4a1b      	ldr	r2, [pc, #108]	; (800716c <HAL_ADC_Audio_MspInit+0xec>)
 8007100:	2305      	movs	r3, #5
 8007102:	e9c4 23dd 	strd	r2, r3, [r4, #884]	; 0x374
    DmaHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    DmaHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
    DmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
    DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007106:	2180      	movs	r1, #128	; 0x80
 8007108:	f44f 7380 	mov.w	r3, #256	; 0x100
 800710c:	e9c4 13e1 	strd	r1, r3, [r4, #900]	; 0x384
    DmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
    DmaHandle.Init.Mode                = DMA_CIRCULAR;
    DmaHandle.Init.Priority            = DMA_PRIORITY_MEDIUM;
    /* Deinitialize  & Initialize the DMA for new transfer */
    (void)HAL_DMA_DeInit(&DmaHandle);
 8007110:	f504 785d 	add.w	r8, r4, #884	; 0x374
    DmaHandle.Init.Mode                = DMA_CIRCULAR;
 8007114:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007118:	2320      	movs	r3, #32
 800711a:	e9c4 03e3 	strd	r0, r3, [r4, #908]	; 0x38c
    DmaHandle.Init.Priority            = DMA_PRIORITY_MEDIUM;
 800711e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    (void)HAL_DMA_DeInit(&DmaHandle);
 8007122:	4640      	mov	r0, r8
    DmaHandle.Init.Priority            = DMA_PRIORITY_MEDIUM;
 8007124:	f8c4 3394 	str.w	r3, [r4, #916]	; 0x394
    DmaHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8007128:	e9c4 55df 	strd	r5, r5, [r4, #892]	; 0x37c
    (void)HAL_DMA_DeInit(&DmaHandle);
 800712c:	f002 fe9e 	bl	8009e6c <HAL_DMA_DeInit>
    (void)HAL_DMA_Init(&DmaHandle);
 8007130:	4640      	mov	r0, r8
 8007132:	f002 fe29 	bl	8009d88 <HAL_DMA_Init>
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hadc, DMA_Handle, DmaHandle);
    
    /* NVIC configuration for DMA Input data interrupt */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8007136:	4638      	mov	r0, r7
    __HAL_LINKDMA(hadc, DMA_Handle, DmaHandle);
 8007138:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800713c:	462a      	mov	r2, r5
 800713e:	2101      	movs	r1, #1
    __HAL_LINKDMA(hadc, DMA_Handle, DmaHandle);
 8007140:	f8c4 639c 	str.w	r6, [r4, #924]	; 0x39c
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8007144:	f002 f996 	bl	8009474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);  
 8007148:	4638      	mov	r0, r7
 800714a:	f002 f9c5 	bl	80094d8 <HAL_NVIC_EnableIRQ>
  }
  
  HAL_ADC_Counter++;
 800714e:	f8d4 3370 	ldr.w	r3, [r4, #880]	; 0x370
 8007152:	3301      	adds	r3, #1
 8007154:	f8c4 3370 	str.w	r3, [r4, #880]	; 0x370
}
 8007158:	b00a      	add	sp, #40	; 0x28
 800715a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800715e:	bf00      	nop
 8007160:	200008ec 	.word	0x200008ec
 8007164:	40021000 	.word	0x40021000
 8007168:	48000800 	.word	0x48000800
 800716c:	40020008 	.word	0x40020008

08007170 <MX_ADC1_Init>:
{
 8007170:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8007172:	2218      	movs	r2, #24
 8007174:	2100      	movs	r1, #0
 8007176:	4668      	mov	r0, sp
 8007178:	f015 f874 	bl	801c264 <memset>
  (void)BSP_ADC1_Initialization(ADC1_FOR_AUDIO);  
 800717c:	2001      	movs	r0, #1
 800717e:	f7ff faa9 	bl	80066d4 <BSP_ADC1_Initialization>
  HAL_ADC_Audio_MspInit(&ADC1_Handle);
 8007182:	480b      	ldr	r0, [pc, #44]	; (80071b0 <MX_ADC1_Init+0x40>)
 8007184:	f7ff ff7c 	bl	8007080 <HAL_ADC_Audio_MspInit>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007188:	4a0a      	ldr	r2, [pc, #40]	; (80071b4 <MX_ADC1_Init+0x44>)
 800718a:	2306      	movs	r3, #6
 800718c:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007190:	2102      	movs	r1, #2
 8007192:	237f      	movs	r3, #127	; 0x7f
 8007194:	e9cd 1302 	strd	r1, r3, [sp, #8]
  sConfig.Offset = 0x800;                                 /* Parameter discarded because offset correction is disabled */
 8007198:	2000      	movs	r0, #0
 800719a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800719e:	e9cd 0304 	strd	r0, r3, [sp, #16]
  (void)HAL_ADC_ConfigChannel(&ADC1_Handle, &sConfig);
 80071a2:	4669      	mov	r1, sp
 80071a4:	4802      	ldr	r0, [pc, #8]	; (80071b0 <MX_ADC1_Init+0x40>)
 80071a6:	f001 fb31 	bl	800880c <HAL_ADC_ConfigChannel>
}
 80071aa:	b007      	add	sp, #28
 80071ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80071b0:	200007f0 	.word	0x200007f0
 80071b4:	08600004 	.word	0x08600004

080071b8 <BSP_AUDIO_IN_Init>:
{
 80071b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 80071ba:	2801      	cmp	r0, #1
{
 80071bc:	b08f      	sub	sp, #60	; 0x3c
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 80071be:	d903      	bls.n	80071c8 <BSP_AUDIO_IN_Init+0x10>
    return BSP_ERROR_WRONG_PARAM;  
 80071c0:	f06f 0001 	mvn.w	r0, #1
}
 80071c4:	b00f      	add	sp, #60	; 0x3c
 80071c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    AudioInCtx[Instance].Device          = AudioInit->Device;
 80071c8:	4c70      	ldr	r4, [pc, #448]	; (800738c <BSP_AUDIO_IN_Init+0x1d4>)
    AudioInCtx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;  
 80071ca:	68cd      	ldr	r5, [r1, #12]
    AudioInCtx[Instance].Device          = AudioInit->Device;
 80071cc:	680a      	ldr	r2, [r1, #0]
 80071ce:	234c      	movs	r3, #76	; 0x4c
 80071d0:	fb03 4300 	mla	r3, r3, r0, r4
    AudioInCtx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;  
 80071d4:	611d      	str	r5, [r3, #16]
    AudioInCtx[Instance].SampleRate      = AudioInit->SampleRate; 
 80071d6:	684d      	ldr	r5, [r1, #4]
 80071d8:	609d      	str	r5, [r3, #8]
    AudioInCtx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 80071da:	688d      	ldr	r5, [r1, #8]
 80071dc:	60dd      	str	r5, [r3, #12]
    AudioInCtx[Instance].Volume          = AudioInit->Volume;
 80071de:	6909      	ldr	r1, [r1, #16]
    AudioInCtx[Instance].Device          = AudioInit->Device;
 80071e0:	605a      	str	r2, [r3, #4]
    AudioInCtx[Instance].State           = AUDIO_IN_STATE_RESET;
 80071e2:	2500      	movs	r5, #0
    AudioInCtx[Instance].Volume          = AudioInit->Volume;
 80071e4:	6219      	str	r1, [r3, #32]
    AudioInCtx[Instance].State           = AUDIO_IN_STATE_RESET;
 80071e6:	625d      	str	r5, [r3, #36]	; 0x24
    if(Instance == 0U)
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d0e9      	beq.n	80071c0 <BSP_AUDIO_IN_Init+0x8>
      if ((AudioInCtx[Instance].Device & ONBOARD_DIGITAL_MIC_MASK) != 0U)
 80071ec:	0796      	lsls	r6, r2, #30
 80071ee:	f140 809c 	bpl.w	800732a <BSP_AUDIO_IN_Init+0x172>
        DMic_OnBoard_DfsdmFilter.Instance  = DMIC_ONBOARD_FILTER;
 80071f2:	4620      	mov	r0, r4
 80071f4:	4f66      	ldr	r7, [pc, #408]	; (8007390 <BSP_AUDIO_IN_Init+0x1d8>)
        DMic_OnBoard_DfsdmChannel.Instance = DMIC_ONBOARD_CHANNEL;
 80071f6:	4e67      	ldr	r6, [pc, #412]	; (8007394 <BSP_AUDIO_IN_Init+0x1dc>)
        DMic_OnBoard_DfsdmFilter.Instance  = DMIC_ONBOARD_FILTER;
 80071f8:	f840 7f98 	str.w	r7, [r0, #152]!
        DMic_OnBoard_DfsdmChannel.Instance = DMIC_ONBOARD_CHANNEL;
 80071fc:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
        DFSDM_FilterMspInit(&DMic_OnBoard_DfsdmFilter);      
 8007200:	f7ff fee2 	bl	8006fc8 <DFSDM_FilterMspInit>
        DFSDM_ChannelMspInit(&DMic_OnBoard_DfsdmChannel);
 8007204:	f104 00ec 	add.w	r0, r4, #236	; 0xec
 8007208:	f7ff fe96 	bl	8006f38 <DFSDM_ChannelMspInit>
        dfsdm_config.Channel4Filter  = DFSDM_CHANNEL_5;
 800720c:	4a62      	ldr	r2, [pc, #392]	; (8007398 <BSP_AUDIO_IN_Init+0x1e0>)
        dfsdm_config.FilterInstance  = DMIC_ONBOARD_FILTER;
 800720e:	9701      	str	r7, [sp, #4]
        dfsdm_config.Channel4Filter  = DFSDM_CHANNEL_5;
 8007210:	2301      	movs	r3, #1
 8007212:	e9cd 3207 	strd	r3, r2, [sp, #28]
        dfsdm_config.Activation      = ENABLE;
 8007216:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
        dfsdm_config.SincOrder       = DFSDM_FILTER_ORDER(AudioInCtx[Instance].SampleRate);
 800721a:	6d63      	ldr	r3, [r4, #84]	; 0x54
        dfsdm_config.RegularTrigger  = DFSDM_FILTER_SW_TRIGGER; 
 800721c:	9502      	str	r5, [sp, #8]
        dfsdm_config.SincOrder       = DFSDM_FILTER_ORDER(AudioInCtx[Instance].SampleRate);
 800721e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
        dfsdm_config.DigitalMicPins  = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8007222:	e9cd 6505 	strd	r6, r5, [sp, #20]
        dfsdm_config.DmaMode         = DISABLE;
 8007226:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
        dfsdm_config.Multiplexer     = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800722a:	950c      	str	r5, [sp, #48]	; 0x30
        dfsdm_config.SincOrder       = DFSDM_FILTER_ORDER(AudioInCtx[Instance].SampleRate);
 800722c:	d067      	beq.n	80072fe <BSP_AUDIO_IN_Init+0x146>
 800722e:	f642 3211 	movw	r2, #11025	; 0x2b11
 8007232:	4293      	cmp	r3, r2
 8007234:	d060      	beq.n	80072f8 <BSP_AUDIO_IN_Init+0x140>
 8007236:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800723a:	d060      	beq.n	80072fe <BSP_AUDIO_IN_Init+0x146>
 800723c:	f245 6222 	movw	r2, #22050	; 0x5622
 8007240:	4293      	cmp	r3, r2
 8007242:	bf0c      	ite	eq
 8007244:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8007248:	f04f 4220 	movne.w	r2, #2684354560	; 0xa0000000
        dfsdm_config.Oversampling    = DFSDM_OVER_SAMPLING(AudioInCtx[Instance].SampleRate);
 800724c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
        dfsdm_config.SincOrder       = DFSDM_FILTER_ORDER(AudioInCtx[Instance].SampleRate);
 8007250:	9203      	str	r2, [sp, #12]
        dfsdm_config.Oversampling    = DFSDM_OVER_SAMPLING(AudioInCtx[Instance].SampleRate);
 8007252:	d057      	beq.n	8007304 <BSP_AUDIO_IN_Init+0x14c>
 8007254:	f642 3211 	movw	r2, #11025	; 0x2b11
 8007258:	4293      	cmp	r3, r2
 800725a:	d053      	beq.n	8007304 <BSP_AUDIO_IN_Init+0x14c>
 800725c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8007260:	d053      	beq.n	800730a <BSP_AUDIO_IN_Init+0x152>
 8007262:	f245 6222 	movw	r2, #22050	; 0x5622
 8007266:	4293      	cmp	r3, r2
 8007268:	d04f      	beq.n	800730a <BSP_AUDIO_IN_Init+0x152>
 800726a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800726e:	d04e      	beq.n	800730e <BSP_AUDIO_IN_Init+0x156>
 8007270:	f64a 4244 	movw	r2, #44100	; 0xac44
 8007274:	4293      	cmp	r3, r2
 8007276:	d04a      	beq.n	800730e <BSP_AUDIO_IN_Init+0x156>
 8007278:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800727c:	4293      	cmp	r3, r2
 800727e:	bf14      	ite	ne
 8007280:	2220      	movne	r2, #32
 8007282:	2240      	moveq	r2, #64	; 0x40
        dfsdm_config.ClockDivider    = DFSDM_CLOCK_DIVIDER(AudioInCtx[Instance].SampleRate);
 8007284:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
        dfsdm_config.Oversampling    = DFSDM_OVER_SAMPLING(AudioInCtx[Instance].SampleRate);
 8007288:	9204      	str	r2, [sp, #16]
        dfsdm_config.ClockDivider    = DFSDM_CLOCK_DIVIDER(AudioInCtx[Instance].SampleRate);
 800728a:	d042      	beq.n	8007312 <BSP_AUDIO_IN_Init+0x15a>
 800728c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8007290:	d03f      	beq.n	8007312 <BSP_AUDIO_IN_Init+0x15a>
 8007292:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8007296:	d03c      	beq.n	8007312 <BSP_AUDIO_IN_Init+0x15a>
 8007298:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800729c:	4293      	cmp	r3, r2
 800729e:	d03a      	beq.n	8007316 <BSP_AUDIO_IN_Init+0x15e>
 80072a0:	4a3e      	ldr	r2, [pc, #248]	; (800739c <BSP_AUDIO_IN_Init+0x1e4>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	bf14      	ite	ne
 80072a6:	2202      	movne	r2, #2
 80072a8:	2204      	moveq	r2, #4
        dfsdm_config.RightBitShift   = DFSDM_MIC_BIT_SHIFT(AudioInCtx[Instance].SampleRate);
 80072aa:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
        dfsdm_config.ClockDivider    = DFSDM_CLOCK_DIVIDER(AudioInCtx[Instance].SampleRate);
 80072ae:	9209      	str	r2, [sp, #36]	; 0x24
        dfsdm_config.RightBitShift   = DFSDM_MIC_BIT_SHIFT(AudioInCtx[Instance].SampleRate);
 80072b0:	d033      	beq.n	800731a <BSP_AUDIO_IN_Init+0x162>
 80072b2:	f642 3211 	movw	r2, #11025	; 0x2b11
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d031      	beq.n	800731e <BSP_AUDIO_IN_Init+0x166>
 80072ba:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80072be:	d030      	beq.n	8007322 <BSP_AUDIO_IN_Init+0x16a>
 80072c0:	f245 6222 	movw	r2, #22050	; 0x5622
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d02c      	beq.n	8007322 <BSP_AUDIO_IN_Init+0x16a>
 80072c8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80072cc:	d02b      	beq.n	8007326 <BSP_AUDIO_IN_Init+0x16e>
 80072ce:	f64a 4244 	movw	r2, #44100	; 0xac44
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d027      	beq.n	8007326 <BSP_AUDIO_IN_Init+0x16e>
 80072d6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80072da:	4293      	cmp	r3, r2
 80072dc:	bf14      	ite	ne
 80072de:	2305      	movne	r3, #5
 80072e0:	230a      	moveq	r3, #10
        if(MX_DFSDM_Init(&DMic_OnBoard_DfsdmFilter, &DMic_OnBoard_DfsdmChannel, &dfsdm_config) != HAL_OK)
 80072e2:	492f      	ldr	r1, [pc, #188]	; (80073a0 <BSP_AUDIO_IN_Init+0x1e8>)
        dfsdm_config.RightBitShift   = DFSDM_MIC_BIT_SHIFT(AudioInCtx[Instance].SampleRate);
 80072e4:	930a      	str	r3, [sp, #40]	; 0x28
        if(MX_DFSDM_Init(&DMic_OnBoard_DfsdmFilter, &DMic_OnBoard_DfsdmChannel, &dfsdm_config) != HAL_OK)
 80072e6:	aa01      	add	r2, sp, #4
 80072e8:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
 80072ec:	f7ff fd7e 	bl	8006dec <MX_DFSDM_Init>
 80072f0:	b1d8      	cbz	r0, 800732a <BSP_AUDIO_IN_Init+0x172>
          return BSP_ERROR_PERIPH_FAILURE;
 80072f2:	f06f 0003 	mvn.w	r0, #3
 80072f6:	e765      	b.n	80071c4 <BSP_AUDIO_IN_Init+0xc>
        dfsdm_config.SincOrder       = DFSDM_FILTER_ORDER(AudioInCtx[Instance].SampleRate);
 80072f8:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80072fc:	e7a6      	b.n	800724c <BSP_AUDIO_IN_Init+0x94>
 80072fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007302:	e7a3      	b.n	800724c <BSP_AUDIO_IN_Init+0x94>
        dfsdm_config.Oversampling    = DFSDM_OVER_SAMPLING(AudioInCtx[Instance].SampleRate);
 8007304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007308:	e7bc      	b.n	8007284 <BSP_AUDIO_IN_Init+0xcc>
 800730a:	2280      	movs	r2, #128	; 0x80
 800730c:	e7ba      	b.n	8007284 <BSP_AUDIO_IN_Init+0xcc>
 800730e:	2240      	movs	r2, #64	; 0x40
 8007310:	e7b8      	b.n	8007284 <BSP_AUDIO_IN_Init+0xcc>
        dfsdm_config.ClockDivider    = DFSDM_CLOCK_DIVIDER(AudioInCtx[Instance].SampleRate);
 8007312:	2206      	movs	r2, #6
 8007314:	e7c9      	b.n	80072aa <BSP_AUDIO_IN_Init+0xf2>
 8007316:	2204      	movs	r2, #4
 8007318:	e7c7      	b.n	80072aa <BSP_AUDIO_IN_Init+0xf2>
        dfsdm_config.RightBitShift   = DFSDM_MIC_BIT_SHIFT(AudioInCtx[Instance].SampleRate);
 800731a:	230c      	movs	r3, #12
 800731c:	e7e1      	b.n	80072e2 <BSP_AUDIO_IN_Init+0x12a>
 800731e:	2305      	movs	r3, #5
 8007320:	e7df      	b.n	80072e2 <BSP_AUDIO_IN_Init+0x12a>
 8007322:	2308      	movs	r3, #8
 8007324:	e7dd      	b.n	80072e2 <BSP_AUDIO_IN_Init+0x12a>
 8007326:	230a      	movs	r3, #10
 8007328:	e7db      	b.n	80072e2 <BSP_AUDIO_IN_Init+0x12a>
      if ((AudioInCtx[Instance].Device & ONBOARD_ANALOG_MIC_MASK) != 0U)
 800732a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800732c:	07dd      	lsls	r5, r3, #31
 800732e:	d528      	bpl.n	8007382 <BSP_AUDIO_IN_Init+0x1ca>
        dfsdm_config.FilterInstance  = AMIC_ONBOARD_FILTER;
 8007330:	4b1c      	ldr	r3, [pc, #112]	; (80073a4 <BSP_AUDIO_IN_Init+0x1ec>)
        if(AudioInCtx[Instance].ChannelsNbr == 1U)
 8007332:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        dfsdm_config.FilterInstance  = AMIC_ONBOARD_FILTER;
 8007334:	9301      	str	r3, [sp, #4]
        dfsdm_config.ChannelInstance = AMIC_ONBOARD_CHANNEL;
 8007336:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800733a:	9305      	str	r3, [sp, #20]
        dfsdm_config.DigitalMicType  = DFSDM_CHANNEL_SPI_FALLING;/*NU*/
 800733c:	2301      	movs	r3, #1
        if(AudioInCtx[Instance].ChannelsNbr == 1U)
 800733e:	1ac9      	subs	r1, r1, r3
        dfsdm_config.DigitalMicType  = DFSDM_CHANNEL_SPI_FALLING;/*NU*/
 8007340:	f04f 0200 	mov.w	r2, #0
        if(AudioInCtx[Instance].ChannelsNbr == 1U)
 8007344:	bf18      	it	ne
 8007346:	2101      	movne	r1, #1
        dfsdm_config.DigitalMicType  = DFSDM_CHANNEL_SPI_FALLING;/*NU*/
 8007348:	e9cd 2306 	strd	r2, r3, [sp, #24]
        dfsdm_config.Channel4Filter  = DFSDM_CHANNEL_0;
 800734c:	9102      	str	r1, [sp, #8]
        dfsdm_config.DmaMode	     = DISABLE;
 800734e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
        if(MX_DFSDM_Init(&AMic_OnBoard_DfsdmFilter, &AMic_OnBoard_DfsdmChannel, &dfsdm_config) != HAL_OK)
 8007352:	4915      	ldr	r1, [pc, #84]	; (80073a8 <BSP_AUDIO_IN_Init+0x1f0>)
        dfsdm_config.Activation      = DISABLE;
 8007354:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
        dfsdm_config.Multiplexer     = DFSDM_CHANNEL_ADC_OUTPUT;
 8007358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
        dfsdm_config.Oversampling    = DECIMATION_RATIO_DFSDM;
 800735c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
        dfsdm_config.Multiplexer     = DFSDM_CHANNEL_ADC_OUTPUT;
 8007360:	920c      	str	r2, [sp, #48]	; 0x30
        dfsdm_config.Oversampling    = DECIMATION_RATIO_DFSDM;
 8007362:	22c0      	movs	r2, #192	; 0xc0
 8007364:	e9cd 0203 	strd	r0, r2, [sp, #12]
        dfsdm_config.Channel4Filter  = DFSDM_CHANNEL_0;
 8007368:	9308      	str	r3, [sp, #32]
        dfsdm_config.ClockDivider    = 1;/*NU*/
 800736a:	9309      	str	r3, [sp, #36]	; 0x24
        if(MX_DFSDM_Init(&AMic_OnBoard_DfsdmFilter, &AMic_OnBoard_DfsdmChannel, &dfsdm_config) != HAL_OK)
 800736c:	aa01      	add	r2, sp, #4
        dfsdm_config.RightBitShift   = RBITSHIFT;
 800736e:	2307      	movs	r3, #7
        if(MX_DFSDM_Init(&AMic_OnBoard_DfsdmFilter, &AMic_OnBoard_DfsdmChannel, &dfsdm_config) != HAL_OK)
 8007370:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
        dfsdm_config.RightBitShift   = RBITSHIFT;
 8007374:	930a      	str	r3, [sp, #40]	; 0x28
        if(MX_DFSDM_Init(&AMic_OnBoard_DfsdmFilter, &AMic_OnBoard_DfsdmChannel, &dfsdm_config) != HAL_OK)
 8007376:	f7ff fd39 	bl	8006dec <MX_DFSDM_Init>
 800737a:	2800      	cmp	r0, #0
 800737c:	d1b9      	bne.n	80072f2 <BSP_AUDIO_IN_Init+0x13a>
        MX_ADC1_Init();
 800737e:	f7ff fef7 	bl	8007170 <MX_ADC1_Init>
  AudioInCtx[Instance].State = AUDIO_IN_STATE_STOP; 
 8007382:	2302      	movs	r3, #2
 8007384:	6723      	str	r3, [r4, #112]	; 0x70
  return BSP_ERROR_NONE; 
 8007386:	2000      	movs	r0, #0
 8007388:	e71c      	b.n	80071c4 <BSP_AUDIO_IN_Init+0xc>
 800738a:	bf00      	nop
 800738c:	200008ec 	.word	0x200008ec
 8007390:	40016100 	.word	0x40016100
 8007394:	400160a0 	.word	0x400160a0
 8007398:	00050020 	.word	0x00050020
 800739c:	00017700 	.word	0x00017700
 80073a0:	200009d8 	.word	0x200009d8
 80073a4:	40016180 	.word	0x40016180
 80073a8:	20000a64 	.word	0x20000a64

080073ac <HAL_TIM_BC_MspInit.part.0>:
{
  
  if(htim->Instance==STBC02_USED_TIM)
  {
    /* STBC02_USED_TIM clock enable */
    STBC02_USED_TIM_CLK_ENABLE();
 80073ac:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <HAL_TIM_BC_MspInit.part.0+0x2c>)
void HAL_TIM_BC_MspInit(TIM_HandleTypeDef *htim)
 80073ae:	b507      	push	{r0, r1, r2, lr}
    STBC02_USED_TIM_CLK_ENABLE();
 80073b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073b2:	f042 0220 	orr.w	r2, r2, #32
 80073b6:	659a      	str	r2, [r3, #88]	; 0x58
 80073b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	9301      	str	r3, [sp, #4]
    
    /* STBC02_USED_TIM interrupt Init */
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 80073c0:	2200      	movs	r2, #0
 80073c2:	2103      	movs	r1, #3
 80073c4:	2037      	movs	r0, #55	; 0x37
    STBC02_USED_TIM_CLK_ENABLE();
 80073c6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 80073c8:	f002 f854 	bl	8009474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(STBC02_USED_TIM_IRQn);
 80073cc:	2037      	movs	r0, #55	; 0x37
  }
}
 80073ce:	b003      	add	sp, #12
 80073d0:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(STBC02_USED_TIM_IRQn);
 80073d4:	f002 b880 	b.w	80094d8 <HAL_NVIC_EnableIRQ>
 80073d8:	40021000 	.word	0x40021000

080073dc <BSP_BC_CmdSend>:
{
 80073dc:	b570      	push	{r4, r5, r6, lr}
 80073de:	4604      	mov	r4, r0
  uint32_t tk = STBC02_GetTick();
 80073e0:	f001 f920 	bl	8008624 <HAL_GetTick>
  stbc02_SwCmdSel = stbc02_SwCmd;
 80073e4:	4d0a      	ldr	r5, [pc, #40]	; (8007410 <BSP_BC_CmdSend+0x34>)
  uint32_t tk = STBC02_GetTick();
 80073e6:	4606      	mov	r6, r0
  stbc02_SwState = start;
 80073e8:	2301      	movs	r3, #1
  (void)HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 80073ea:	1d28      	adds	r0, r5, #4
  stbc02_SwCmdSel = stbc02_SwCmd;
 80073ec:	702c      	strb	r4, [r5, #0]
  stbc02_SwState = start;
 80073ee:	706b      	strb	r3, [r5, #1]
  (void)HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 80073f0:	f005 ff18 	bl	800d224 <HAL_TIM_Base_Start_IT>
  while(stbc02_SwState != idle)
 80073f4:	786c      	ldrb	r4, [r5, #1]
 80073f6:	b924      	cbnz	r4, 8007402 <BSP_BC_CmdSend+0x26>
  (void)HAL_TIM_Base_Stop_IT(&hstbc02_UsedTim);
 80073f8:	4806      	ldr	r0, [pc, #24]	; (8007414 <BSP_BC_CmdSend+0x38>)
 80073fa:	f005 ff4d 	bl	800d298 <HAL_TIM_Base_Stop_IT>
  return 0;
 80073fe:	4620      	mov	r0, r4
}
 8007400:	bd70      	pop	{r4, r5, r6, pc}
    if ( (STBC02_GetTick() - tk) > 10U )
 8007402:	f001 f90f 	bl	8008624 <HAL_GetTick>
 8007406:	1b80      	subs	r0, r0, r6
 8007408:	280a      	cmp	r0, #10
 800740a:	d9f3      	bls.n	80073f4 <BSP_BC_CmdSend+0x18>
      return 1;
 800740c:	2001      	movs	r0, #1
 800740e:	e7f7      	b.n	8007400 <BSP_BC_CmdSend+0x24>
 8007410:	20000cc0 	.word	0x20000cc0
 8007414:	20000cc4 	.word	0x20000cc4

08007418 <BSP_BC_IsChgPinToggling>:
{
 8007418:	b510      	push	{r4, lr}
  if ( (STBC02_GetTick() - stbc02_ChgPinToggledTime) > 500U )
 800741a:	4c0b      	ldr	r4, [pc, #44]	; (8007448 <BSP_BC_IsChgPinToggling+0x30>)
 800741c:	f001 f902 	bl	8008624 <HAL_GetTick>
 8007420:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007422:	1ac0      	subs	r0, r0, r3
 8007424:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8007428:	d90c      	bls.n	8007444 <BSP_BC_IsChgPinToggling+0x2c>
    stbc02_ChgPinState = HAL_GPIO_ReadPin(STBC02_CHG_GPIO_PORT, STBC02_CHG_PIN);
 800742a:	4808      	ldr	r0, [pc, #32]	; (800744c <BSP_BC_IsChgPinToggling+0x34>)
 800742c:	2101      	movs	r1, #1
 800742e:	f003 f957 	bl	800a6e0 <HAL_GPIO_ReadPin>
    if (stbc02_ChgPinState == GPIO_PIN_RESET)
 8007432:	b910      	cbnz	r0, 800743a <BSP_BC_IsChgPinToggling+0x22>
      stbc02_ChgState = NotValidInput;
 8007434:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
}
 8007438:	bd10      	pop	{r4, pc}
      stbc02_ChgState = ValidInput;
 800743a:	2301      	movs	r3, #1
 800743c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8007440:	2000      	movs	r0, #0
 8007442:	e7f9      	b.n	8007438 <BSP_BC_IsChgPinToggling+0x20>
  return 1;
 8007444:	2001      	movs	r0, #1
 8007446:	e7f7      	b.n	8007438 <BSP_BC_IsChgPinToggling+0x20>
 8007448:	20000cc0 	.word	0x20000cc0
 800744c:	48000400 	.word	0x48000400

08007450 <BSP_BC_GetVoltage>:
{
 8007450:	b510      	push	{r4, lr}
 8007452:	4604      	mov	r4, r0
  if (HAL_ADCEx_InjectedStart(&ADC1_Handle) != HAL_OK)
 8007454:	4813      	ldr	r0, [pc, #76]	; (80074a4 <BSP_BC_GetVoltage+0x54>)
 8007456:	f001 fd2e 	bl	8008eb6 <HAL_ADCEx_InjectedStart>
 800745a:	b9e8      	cbnz	r0, 8007498 <BSP_BC_GetVoltage+0x48>
  if (HAL_ADCEx_InjectedPollForConversion(&ADC1_Handle, 10) != HAL_OK)
 800745c:	4811      	ldr	r0, [pc, #68]	; (80074a4 <BSP_BC_GetVoltage+0x54>)
 800745e:	210a      	movs	r1, #10
 8007460:	f001 fd72 	bl	8008f48 <HAL_ADCEx_InjectedPollForConversion>
 8007464:	b9d8      	cbnz	r0, 800749e <BSP_BC_GetVoltage+0x4e>
  if ((HAL_ADC_GetState(&ADC1_Handle) & HAL_ADC_STATE_INJ_EOC) == HAL_ADC_STATE_INJ_EOC)
 8007466:	480f      	ldr	r0, [pc, #60]	; (80074a4 <BSP_BC_GetVoltage+0x54>)
 8007468:	f001 fb8e 	bl	8008b88 <HAL_ADC_GetState>
 800746c:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8007470:	d003      	beq.n	800747a <BSP_BC_GetVoltage+0x2a>
    uhADCxConvertedValue = HAL_ADCEx_InjectedGetValue(&ADC1_Handle,ADC_INJECTED_RANK_1);
 8007472:	480c      	ldr	r0, [pc, #48]	; (80074a4 <BSP_BC_GetVoltage+0x54>)
 8007474:	2108      	movs	r1, #8
 8007476:	f001 fdb9 	bl	8008fec <HAL_ADCEx_InjectedGetValue>
  Voltage = (2700U * (uint32_t)uhADCxConvertedValue) / (4095U);  // [0-2.7V]
 800747a:	f640 238c 	movw	r3, #2700	; 0xa8c
 800747e:	4343      	muls	r3, r0
 8007480:	f640 70ff 	movw	r0, #4095	; 0xfff
 8007484:	fbb3 f3f0 	udiv	r3, r3, r0
  Voltage = ((56U+100U)*Voltage)/100U;   // [0-4.2V]
 8007488:	209c      	movs	r0, #156	; 0x9c
 800748a:	4343      	muls	r3, r0
 800748c:	2064      	movs	r0, #100	; 0x64
 800748e:	fbb3 f3f0 	udiv	r3, r3, r0
  return BSP_ERROR_NONE;
 8007492:	2000      	movs	r0, #0
  *mV= Voltage;
 8007494:	6023      	str	r3, [r4, #0]
}
 8007496:	bd10      	pop	{r4, pc}
    return BSP_ERROR_COMPONENT_FAILURE;
 8007498:	f06f 0004 	mvn.w	r0, #4
 800749c:	e7fb      	b.n	8007496 <BSP_BC_GetVoltage+0x46>
    return BSP_ERROR_CLOCK_FAILURE;
 800749e:	f06f 0008 	mvn.w	r0, #8
 80074a2:	e7f8      	b.n	8007496 <BSP_BC_GetVoltage+0x46>
 80074a4:	200007f0 	.word	0x200007f0

080074a8 <BSP_BC_GetVoltageAndLevel>:
{
 80074a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t Voltage = 0;
 80074aa:	2300      	movs	r3, #0
{
 80074ac:	4604      	mov	r4, r0
  (void)BSP_BC_GetVoltage(&Voltage);
 80074ae:	a801      	add	r0, sp, #4
{
 80074b0:	460d      	mov	r5, r1
  uint32_t Voltage = 0;
 80074b2:	9301      	str	r3, [sp, #4]
  (void)BSP_BC_GetVoltage(&Voltage);
 80074b4:	f7ff ffcc 	bl	8007450 <BSP_BC_GetVoltage>
  WindowVoltage[WindowPostion]= Voltage;
 80074b8:	4b1f      	ldr	r3, [pc, #124]	; (8007538 <BSP_BC_GetVoltageAndLevel+0x90>)
 80074ba:	9801      	ldr	r0, [sp, #4]
 80074bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80074be:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  WindowPostion++;  
 80074c2:	3201      	adds	r2, #1
  if(WindowPostion==WINDOW_VOLTAGE_DIM)
 80074c4:	2a10      	cmp	r2, #16
  WindowVoltage[WindowPostion]= Voltage;
 80074c6:	65c8      	str	r0, [r1, #92]	; 0x5c
  WindowPostion++;  
 80074c8:	659a      	str	r2, [r3, #88]	; 0x58
  if(WindowPostion==WINDOW_VOLTAGE_DIM)
 80074ca:	d107      	bne.n	80074dc <BSP_BC_GetVoltageAndLevel+0x34>
    if(VoltageWindowInit==0)
 80074cc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80074d0:	b912      	cbnz	r2, 80074d8 <BSP_BC_GetVoltageAndLevel+0x30>
      VoltageWindowInit =1;
 80074d2:	2201      	movs	r2, #1
 80074d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    WindowPostion     =0;
 80074d8:	2200      	movs	r2, #0
 80074da:	659a      	str	r2, [r3, #88]	; 0x58
  if(VoltageWindowInit == 1)
 80074dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d10a      	bne.n	80074fa <BSP_BC_GetVoltageAndLevel+0x52>
 80074e4:	2300      	movs	r3, #0
 80074e6:	4915      	ldr	r1, [pc, #84]	; (800753c <BSP_BC_GetVoltageAndLevel+0x94>)
    for(Counter=0;Counter<WINDOW_VOLTAGE_DIM;Counter++) 
 80074e8:	461a      	mov	r2, r3
      Voltage+=WindowVoltage[Counter];
 80074ea:	f851 0b04 	ldr.w	r0, [r1], #4
    for(Counter=0;Counter<WINDOW_VOLTAGE_DIM;Counter++) 
 80074ee:	3201      	adds	r2, #1
 80074f0:	2a10      	cmp	r2, #16
      Voltage+=WindowVoltage[Counter];
 80074f2:	4403      	add	r3, r0
    for(Counter=0;Counter<WINDOW_VOLTAGE_DIM;Counter++) 
 80074f4:	d1f9      	bne.n	80074ea <BSP_BC_GetVoltageAndLevel+0x42>
    Voltage>>=4;    
 80074f6:	091b      	lsrs	r3, r3, #4
 80074f8:	9301      	str	r3, [sp, #4]
  if(Voltage > (uint32_t)MAX_VOLTAGE) 
 80074fa:	9b01      	ldr	r3, [sp, #4]
 80074fc:	f241 0281 	movw	r2, #4225	; 0x1081
 8007500:	4293      	cmp	r3, r2
 8007502:	d910      	bls.n	8007526 <BSP_BC_GetVoltageAndLevel+0x7e>
    Voltage= MAX_VOLTAGE;
 8007504:	9201      	str	r2, [sp, #4]
  *BatteryLevel= (((Voltage - (uint32_t)MIN_VOLTAGE) * 100U)/(uint32_t)(MAX_VOLTAGE - MIN_VOLTAGE));
 8007506:	9a01      	ldr	r2, [sp, #4]
 8007508:	2364      	movs	r3, #100	; 0x64
 800750a:	4353      	muls	r3, r2
 800750c:	f240 31cf 	movw	r1, #975	; 0x3cf
}
 8007510:	2000      	movs	r0, #0
  *BatteryLevel= (((Voltage - (uint32_t)MIN_VOLTAGE) * 100U)/(uint32_t)(MAX_VOLTAGE - MIN_VOLTAGE));
 8007512:	f5a3 239e 	sub.w	r3, r3, #323584	; 0x4f000
 8007516:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800751a:	fbb3 f3f1 	udiv	r3, r3, r1
 800751e:	602b      	str	r3, [r5, #0]
  *mV = Voltage;
 8007520:	6022      	str	r2, [r4, #0]
}
 8007522:	b003      	add	sp, #12
 8007524:	bd30      	pop	{r4, r5, pc}
  if(Voltage < (uint32_t)MIN_VOLTAGE) 
 8007526:	f640 42b1 	movw	r2, #3249	; 0xcb1
 800752a:	4293      	cmp	r3, r2
    Voltage= MIN_VOLTAGE;
 800752c:	bf9c      	itt	ls
 800752e:	f640 43b2 	movwls	r3, #3250	; 0xcb2
 8007532:	9301      	strls	r3, [sp, #4]
 8007534:	e7e7      	b.n	8007506 <BSP_BC_GetVoltageAndLevel+0x5e>
 8007536:	bf00      	nop
 8007538:	20000cc0 	.word	0x20000cc0
 800753c:	20000d1c 	.word	0x20000d1c

08007540 <BC_IO_SW_SEL_Init>:
{
 8007540:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 8007542:	4b0e      	ldr	r3, [pc, #56]	; (800757c <BC_IO_SW_SEL_Init+0x3c>)
  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8007544:	480e      	ldr	r0, [pc, #56]	; (8007580 <BC_IO_SW_SEL_Init+0x40>)
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 8007546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007548:	f042 0220 	orr.w	r2, r2, #32
 800754c:	64da      	str	r2, [r3, #76]	; 0x4c
 800754e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007550:	f003 0320 	and.w	r3, r3, #32
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007558:	2140      	movs	r1, #64	; 0x40
 800755a:	2301      	movs	r3, #1
 800755c:	e9cd 1301 	strd	r1, r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007560:	2200      	movs	r2, #0
 8007562:	2302      	movs	r3, #2
 8007564:	e9cd 2303 	strd	r2, r3, [sp, #12]
  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8007568:	f003 f8c0 	bl	800a6ec <HAL_GPIO_WritePin>
  HAL_GPIO_Init(STBC02_SW_SEL_GPIO_PORT, &GPIO_InitStruct);
 800756c:	4804      	ldr	r0, [pc, #16]	; (8007580 <BC_IO_SW_SEL_Init+0x40>)
 800756e:	a901      	add	r1, sp, #4
 8007570:	f002 ff4a 	bl	800a408 <HAL_GPIO_Init>
}
 8007574:	b007      	add	sp, #28
 8007576:	f85d fb04 	ldr.w	pc, [sp], #4
 800757a:	bf00      	nop
 800757c:	40021000 	.word	0x40021000
 8007580:	48001400 	.word	0x48001400

08007584 <BC_CmdMng>:
{
 8007584:	b510      	push	{r4, lr}
  TIMx_Pulse++;
 8007586:	4c2b      	ldr	r4, [pc, #172]	; (8007634 <BC_CmdMng+0xb0>)
 8007588:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
  switch (stbc02_SwState)
 800758c:	7862      	ldrb	r2, [r4, #1]
  TIMx_Pulse++;
 800758e:	3301      	adds	r3, #1
 8007590:	b29b      	uxth	r3, r3
  switch (stbc02_SwState)
 8007592:	3a01      	subs	r2, #1
  TIMx_Pulse++;
 8007594:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
  switch (stbc02_SwState)
 8007598:	2a05      	cmp	r2, #5
 800759a:	d812      	bhi.n	80075c2 <BC_CmdMng+0x3e>
 800759c:	e8df f002 	tbb	[pc, r2]
 80075a0:	12121203 	.word	0x12121203
 80075a4:	221a      	.short	0x221a
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 80075a6:	4824      	ldr	r0, [pc, #144]	; (8007638 <BC_CmdMng+0xb4>)
 80075a8:	2140      	movs	r1, #64	; 0x40
 80075aa:	f003 f8a4 	bl	800a6f6 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 80075ae:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 80075b2:	3346      	adds	r3, #70	; 0x46
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 80075b4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
    stbc02_sw_state_prv = stbc02_SwState;
 80075b8:	7863      	ldrb	r3, [r4, #1]
 80075ba:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
    stbc02_SwState = wait;
 80075be:	2306      	movs	r3, #6
 80075c0:	7063      	strb	r3, [r4, #1]
}
 80075c2:	bd10      	pop	{r4, pc}
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 80075c4:	481c      	ldr	r0, [pc, #112]	; (8007638 <BC_CmdMng+0xb4>)
 80075c6:	2140      	movs	r1, #64	; 0x40
 80075c8:	f003 f895 	bl	800a6f6 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 80075cc:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 80075d0:	3314      	adds	r3, #20
 80075d2:	e7ef      	b.n	80075b4 <BC_CmdMng+0x30>
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 80075d4:	4818      	ldr	r0, [pc, #96]	; (8007638 <BC_CmdMng+0xb4>)
 80075d6:	2140      	movs	r1, #64	; 0x40
 80075d8:	f003 f88d 	bl	800a6f6 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 80075dc:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 80075e0:	3364      	adds	r3, #100	; 0x64
 80075e2:	e7e7      	b.n	80075b4 <BC_CmdMng+0x30>
    if ( TIMx_Pulse > TIMx_PulseTCS )
 80075e4:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d2ea      	bcs.n	80075c2 <BC_CmdMng+0x3e>
      if ( stbc02_sw_state_prv == stop_h )
 80075ec:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 80075f0:	2b05      	cmp	r3, #5
 80075f2:	d109      	bne.n	8007608 <BC_CmdMng+0x84>
        CmdPulse = 0;
 80075f4:	2200      	movs	r2, #0
 80075f6:	f884 20a5 	strb.w	r2, [r4, #165]	; 0xa5
        stbc02_SwState = idle;
 80075fa:	7062      	strb	r2, [r4, #1]
        HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 80075fc:	480e      	ldr	r0, [pc, #56]	; (8007638 <BC_CmdMng+0xb4>)
}
 80075fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8007602:	2140      	movs	r1, #64	; 0x40
 8007604:	f003 b872 	b.w	800a6ec <HAL_GPIO_WritePin>
        if ( stbc02_sw_state_prv == pulse_h )
 8007608:	2b03      	cmp	r3, #3
 800760a:	d10b      	bne.n	8007624 <BC_CmdMng+0xa0>
          CmdPulse++;
 800760c:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8007610:	7822      	ldrb	r2, [r4, #0]
          CmdPulse++;
 8007612:	3301      	adds	r3, #1
 8007614:	b2db      	uxtb	r3, r3
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8007616:	429a      	cmp	r2, r3
          CmdPulse++;
 8007618:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 800761c:	d908      	bls.n	8007630 <BC_CmdMng+0xac>
            stbc02_sw_state_prv = start;
 800761e:	2301      	movs	r3, #1
 8007620:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1U);
 8007624:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8007628:	3301      	adds	r3, #1
 800762a:	7063      	strb	r3, [r4, #1]
        __NOP();
 800762c:	bf00      	nop
}
 800762e:	e7c8      	b.n	80075c2 <BC_CmdMng+0x3e>
            __NOP();
 8007630:	bf00      	nop
 8007632:	e7f7      	b.n	8007624 <BC_CmdMng+0xa0>
 8007634:	20000cc0 	.word	0x20000cc0
 8007638:	48001400 	.word	0x48001400

0800763c <BC_ChgPinFreqGet>:
{  
 800763c:	b510      	push	{r4, lr}
  if(uhCaptureIndex == 0U)
 800763e:	4c10      	ldr	r4, [pc, #64]	; (8007680 <BC_ChgPinFreqGet+0x44>)
 8007640:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
 8007644:	b9c3      	cbnz	r3, 8007678 <BC_ChgPinFreqGet+0x3c>
    uwIC2Value1 = HAL_GetTick();
 8007646:	f000 ffed 	bl	8008624 <HAL_GetTick>
    uhCaptureIndex = 1;
 800764a:	2301      	movs	r3, #1
    uwIC2Value1 = HAL_GetTick();
 800764c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    uhCaptureIndex = 1;
 8007650:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
    uwIC2Value2 = HAL_GetTick();
 8007654:	f000 ffe6 	bl	8008624 <HAL_GetTick>
      uwDiffCapture = ((0xFFFFFFFFU - uwIC2Value1) + uwIC2Value2) + 1U;
 8007658:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800765c:	1ac0      	subs	r0, r0, r3
 800765e:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
    if (uwDiffCapture != 0U)
 8007662:	b158      	cbz	r0, 800767c <BC_ChgPinFreqGet+0x40>
      uwFrequency = 10000U / uwDiffCapture;
 8007664:	f242 7310 	movw	r3, #10000	; 0x2710
 8007668:	fbb3 f0f0 	udiv	r0, r3, r0
      uhCaptureIndex = 0U;
 800766c:	2300      	movs	r3, #0
      uwFrequency = 10000U / uwDiffCapture;
 800766e:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
      uhCaptureIndex = 0U;
 8007672:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
}
 8007676:	e001      	b.n	800767c <BC_ChgPinFreqGet+0x40>
  if(uhCaptureIndex == 1U)
 8007678:	2b01      	cmp	r3, #1
 800767a:	d0eb      	beq.n	8007654 <BC_ChgPinFreqGet+0x18>
}
 800767c:	bd10      	pop	{r4, pc}
 800767e:	bf00      	nop
 8007680:	20000cc0 	.word	0x20000cc0

08007684 <BSP_BC_ChgPinHasToggled>:
{
 8007684:	b508      	push	{r3, lr}
  BC_ChgPinFreqGet();
 8007686:	f7ff ffd9 	bl	800763c <BC_ChgPinFreqGet>
  stbc02_ChgPinToggledTime = STBC02_GetTick();
 800768a:	f000 ffcb 	bl	8008624 <HAL_GetTick>
 800768e:	4b01      	ldr	r3, [pc, #4]	; (8007694 <BSP_BC_ChgPinHasToggled+0x10>)
 8007690:	6518      	str	r0, [r3, #80]	; 0x50
}
 8007692:	bd08      	pop	{r3, pc}
 8007694:	20000cc0 	.word	0x20000cc0

08007698 <BC_ChgPinFreq2ChgSts>:
  Batt_Freq = (float)uwFrequency/(float)10;
 8007698:	481d      	ldr	r0, [pc, #116]	; (8007710 <BC_ChgPinFreq2ChgSts+0x78>)
 800769a:	edd0 7a2c 	vldr	s15, [r0, #176]	; 0xb0
 800769e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80076a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
  if (Batt_Freq > (float)0)
 80076aa:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80076ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b2:	dd24      	ble.n	80076fe <BC_ChgPinFreq2ChgSts+0x66>
 80076b4:	4a17      	ldr	r2, [pc, #92]	; (8007714 <BC_ChgPinFreq2ChgSts+0x7c>)
    for (ChgState =  EndOfCharge; ChgState < BatteryTemperatureFault; ChgState++)
 80076b6:	2303      	movs	r3, #3
 80076b8:	4611      	mov	r1, r2
      if ( (Batt_Freq < ((stbc02_ChgStateNameAndFreq[ChgState].freq + stbc02_ChgStateNameAndFreq[(uint8_t)ChgState+1U].freq)/(float)2)) )
 80076ba:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80076be:	ed92 7a07 	vldr	s14, [r2, #28]
 80076c2:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80076c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80076ca:	ee27 7a06 	vmul.f32	s14, s14, s12
 80076ce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80076d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076d6:	dd13      	ble.n	8007700 <BC_ChgPinFreq2ChgSts+0x68>
        stbc02_ChgState = ChgState;
 80076d8:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    if ( (Batt_Freq > ((stbc02_ChgStateNameAndFreq[(uint8_t)ChgState-1U].freq + stbc02_ChgStateNameAndFreq[ChgState].freq)/(float)2)) )
 80076dc:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80076e0:	ed52 7a01 	vldr	s15, [r2, #-4]
 80076e4:	ed92 7a01 	vldr	s14, [r2, #4]
 80076e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076ec:	ee67 7a86 	vmul.f32	s15, s15, s12
 80076f0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80076f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      stbc02_ChgState = ChgState;
 80076f8:	bf48      	it	mi
 80076fa:	f880 3054 	strbmi.w	r3, [r0, #84]	; 0x54
}
 80076fe:	4770      	bx	lr
    for (ChgState =  EndOfCharge; ChgState < BatteryTemperatureFault; ChgState++)
 8007700:	3301      	adds	r3, #1
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b09      	cmp	r3, #9
 8007706:	f102 0208 	add.w	r2, r2, #8
 800770a:	d1d8      	bne.n	80076be <BC_ChgPinFreq2ChgSts+0x26>
 800770c:	e7e6      	b.n	80076dc <BC_ChgPinFreq2ChgSts+0x44>
 800770e:	bf00      	nop
 8007710:	20000cc0 	.word	0x20000cc0
 8007714:	08021834 	.word	0x08021834

08007718 <BSP_BC_GetState>:
{
 8007718:	b510      	push	{r4, lr}
 800771a:	4604      	mov	r4, r0
  if (BSP_BC_IsChgPinToggling() == 1)
 800771c:	f7ff fe7c 	bl	8007418 <BSP_BC_IsChgPinToggling>
 8007720:	2801      	cmp	r0, #1
 8007722:	d101      	bne.n	8007728 <BSP_BC_GetState+0x10>
    BC_ChgPinFreq2ChgSts();
 8007724:	f7ff ffb8 	bl	8007698 <BC_ChgPinFreq2ChgSts>
  BC_State->Id = stbc02_ChgState;
 8007728:	4b06      	ldr	r3, [pc, #24]	; (8007744 <BSP_BC_GetState+0x2c>)
  (void)strncpy((char *) BC_State->Name, (char *)stbc02_ChgStateNameAndFreq[stbc02_ChgState].name, 32);
 800772a:	4907      	ldr	r1, [pc, #28]	; (8007748 <BSP_BC_GetState+0x30>)
  BC_State->Id = stbc02_ChgState;
 800772c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007730:	4620      	mov	r0, r4
  (void)strncpy((char *) BC_State->Name, (char *)stbc02_ChgStateNameAndFreq[stbc02_ChgState].name, 32);
 8007732:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
  BC_State->Id = stbc02_ChgState;
 8007736:	f800 3b01 	strb.w	r3, [r0], #1
  (void)strncpy((char *) BC_State->Name, (char *)stbc02_ChgStateNameAndFreq[stbc02_ChgState].name, 32);
 800773a:	2220      	movs	r2, #32
}
 800773c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)strncpy((char *) BC_State->Name, (char *)stbc02_ChgStateNameAndFreq[stbc02_ChgState].name, 32);
 8007740:	f015 bb86 	b.w	801ce50 <strncpy>
 8007744:	20000cc0 	.word	0x20000cc0
 8007748:	08021834 	.word	0x08021834

0800774c <BC_Chg_TIMx_Init>:
{
 800774c:	b530      	push	{r4, r5, lr}
  TimBCHandle.Instance = TIM3;
 800774e:	4c13      	ldr	r4, [pc, #76]	; (800779c <BC_Chg_TIMx_Init+0x50>)
 8007750:	4b13      	ldr	r3, [pc, #76]	; (80077a0 <BC_Chg_TIMx_Init+0x54>)
 8007752:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
  TimBCHandle.Init.Prescaler         = 0;
 8007756:	2500      	movs	r5, #0
  TimBCHandle.Init.Period            = 0xFFFF;
 8007758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800775c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  TimBCHandle.Init.Prescaler         = 0;
 8007760:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
  TimBCHandle.Init.ClockDivision     = 0;
 8007764:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
  TimBCHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8007768:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
  TimBCHandle.Init.RepetitionCounter = 0;
 800776c:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
  (void)HAL_TIM_IC_Init(&TimBCHandle);
 8007770:	34b4      	adds	r4, #180	; 0xb4
{
 8007772:	b085      	sub	sp, #20
  (void)HAL_TIM_IC_Init(&TimBCHandle);
 8007774:	4620      	mov	r0, r4
 8007776:	f005 ff35 	bl	800d5e4 <HAL_TIM_IC_Init>
  sICConfig.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800777a:	2301      	movs	r3, #1
  (void)HAL_TIM_IC_ConfigChannel(&TimBCHandle, &sICConfig, TIM_CHANNEL_3);
 800777c:	2208      	movs	r2, #8
 800777e:	4669      	mov	r1, sp
 8007780:	4620      	mov	r0, r4
  sICConfig.ICPrescaler = TIM_ICPSC_DIV1;
 8007782:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sICConfig.ICPolarity  = TIM_ICPOLARITY_RISING;
 8007786:	9500      	str	r5, [sp, #0]
  sICConfig.ICFilter    = 0;   
 8007788:	9503      	str	r5, [sp, #12]
  (void)HAL_TIM_IC_ConfigChannel(&TimBCHandle, &sICConfig, TIM_CHANNEL_3);
 800778a:	f006 f80b 	bl	800d7a4 <HAL_TIM_IC_ConfigChannel>
  (void)HAL_TIM_IC_Start_IT(&TimBCHandle, TIM_CHANNEL_3);
 800778e:	2108      	movs	r1, #8
 8007790:	4620      	mov	r0, r4
 8007792:	f006 f9a7 	bl	800dae4 <HAL_TIM_IC_Start_IT>
}
 8007796:	b005      	add	sp, #20
 8007798:	bd30      	pop	{r4, r5, pc}
 800779a:	bf00      	nop
 800779c:	20000cc0 	.word	0x20000cc0
 80077a0:	40000400 	.word	0x40000400

080077a4 <BSP_BC_Chrg_Init>:
  BC_Chg_TIMx_Init();
 80077a4:	f7ff bfd2 	b.w	800774c <BC_Chg_TIMx_Init>

080077a8 <BC_TIMx_Init>:
{
 80077a8:	b530      	push	{r4, r5, lr}
 80077aa:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077ac:	2300      	movs	r3, #0
 80077ae:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80077b2:	9303      	str	r3, [sp, #12]
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 80077b4:	f004 fc52 	bl	800c05c <HAL_RCC_GetPCLK1Freq>
 80077b8:	4b1b      	ldr	r3, [pc, #108]	; (8007828 <BC_TIMx_Init+0x80>)
  float prescaler = 0.0f;
 80077ba:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800782c <BC_TIMx_Init+0x84>
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 80077be:	689b      	ldr	r3, [r3, #8]
    period = (((float)freq)/(prescaler) * STBC02_USED_TIM_PERIOD);
 80077c0:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8007830 <BC_TIMx_Init+0x88>
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 80077c4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80077c8:	bf0c      	ite	eq
 80077ca:	2301      	moveq	r3, #1
 80077cc:	2302      	movne	r3, #2
 80077ce:	4358      	muls	r0, r3
    period = (((float)freq)/(prescaler) * STBC02_USED_TIM_PERIOD);
 80077d0:	ee07 0a10 	vmov	s14, r0
 80077d4:	eef8 6a47 	vcvt.f32.u32	s13, s14
    prescaler++;
 80077d8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80077dc:	ee77 7aa5 	vadd.f32	s15, s15, s11
    period = (((float)freq)/(prescaler) * STBC02_USED_TIM_PERIOD);
 80077e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e4:	ee27 7a06 	vmul.f32	s14, s14, s12
    loop_counter = (uint32_t) period;
 80077e8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80077ec:	ee17 2a10 	vmov	r2, s14
  } while (loop_counter > 65535U);
 80077f0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80077f4:	d2f2      	bcs.n	80077dc <BC_TIMx_Init+0x34>
  hstbc02_UsedTim.Instance = STBC02_USED_TIM; 
 80077f6:	4c0f      	ldr	r4, [pc, #60]	; (8007834 <BC_TIMx_Init+0x8c>)
 80077f8:	4b0f      	ldr	r3, [pc, #60]	; (8007838 <BC_TIMx_Init+0x90>)
 80077fa:	6063      	str	r3, [r4, #4]
  hstbc02_UsedTim.Init.Prescaler = ((uint32_t)prescaler-1U);
 80077fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  hstbc02_UsedTim.Init.CounterMode = TIM_COUNTERMODE_UP; 
 8007800:	2500      	movs	r5, #0
  hstbc02_UsedTim.Init.Prescaler = ((uint32_t)prescaler-1U);
 8007802:	ee17 3a90 	vmov	r3, s15
 8007806:	3b01      	subs	r3, #1
  hstbc02_UsedTim.Init.Period = (uint32_t)period;
 8007808:	e9c4 5203 	strd	r5, r2, [r4, #12]
  hstbc02_UsedTim.Init.Prescaler = ((uint32_t)prescaler-1U);
 800780c:	60a3      	str	r3, [r4, #8]
  if(htim->Instance==STBC02_USED_TIM)
 800780e:	f7ff fdcd 	bl	80073ac <HAL_TIM_BC_MspInit.part.0>
  (void)HAL_TIM_Base_Init(&hstbc02_UsedTim);
 8007812:	1d20      	adds	r0, r4, #4
 8007814:	f005 fe86 	bl	800d524 <HAL_TIM_Base_Init>
  (void)HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig);
 8007818:	a901      	add	r1, sp, #4
 800781a:	1d20      	adds	r0, r4, #4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800781c:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800781e:	9503      	str	r5, [sp, #12]
  (void)HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig);
 8007820:	f006 f9fa 	bl	800dc18 <HAL_TIMEx_MasterConfigSynchronization>
}
 8007824:	b005      	add	sp, #20
 8007826:	bd30      	pop	{r4, r5, pc}
 8007828:	40021000 	.word	0x40021000
 800782c:	00000000 	.word	0x00000000
 8007830:	36a7c5ac 	.word	0x36a7c5ac
 8007834:	20000cc0 	.word	0x20000cc0
 8007838:	40001400 	.word	0x40001400

0800783c <BSP_BC_Init>:
{
 800783c:	b508      	push	{r3, lr}
  BC_TIMx_Init();
 800783e:	f7ff ffb3 	bl	80077a8 <BC_TIMx_Init>
}
 8007842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BC_IO_SW_SEL_Init();
 8007846:	f7ff be7b 	b.w	8007540 <BC_IO_SW_SEL_Init>
	...

0800784c <HAL_TIM_IC_MspInit>:
  __HAL_RCC_TIM3_CLK_ENABLE();
 800784c:	4b15      	ldr	r3, [pc, #84]	; (80078a4 <HAL_TIM_IC_MspInit+0x58>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800784e:	4816      	ldr	r0, [pc, #88]	; (80078a8 <HAL_TIM_IC_MspInit+0x5c>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 8007850:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8007852:	b510      	push	{r4, lr}
  __HAL_RCC_TIM3_CLK_ENABLE();
 8007854:	f042 0202 	orr.w	r2, r2, #2
 8007858:	659a      	str	r2, [r3, #88]	; 0x58
 800785a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 800785c:	b088      	sub	sp, #32
  __HAL_RCC_TIM3_CLK_ENABLE();
 800785e:	f002 0202 	and.w	r2, r2, #2
 8007862:	9201      	str	r2, [sp, #4]
 8007864:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007868:	f042 0202 	orr.w	r2, r2, #2
 800786c:	64da      	str	r2, [r3, #76]	; 0x4c
 800786e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007876:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007878:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800787a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800787c:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800787e:	2203      	movs	r2, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007880:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007882:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007886:	e9cd 4303 	strd	r4, r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800788a:	f002 fdbd 	bl	800a408 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 800788e:	4622      	mov	r2, r4
 8007890:	2100      	movs	r1, #0
 8007892:	201d      	movs	r0, #29
 8007894:	f001 fdee 	bl	8009474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007898:	201d      	movs	r0, #29
 800789a:	f001 fe1d 	bl	80094d8 <HAL_NVIC_EnableIRQ>
}
 800789e:	b008      	add	sp, #32
 80078a0:	bd10      	pop	{r4, pc}
 80078a2:	bf00      	nop
 80078a4:	40021000 	.word	0x40021000
 80078a8:	48000400 	.word	0x48000400

080078ac <HAL_ADC_BC_MspInit>:
* @brief  Initialize the ADC MSP.
* @param BC_AdcHandle ADC handle
* @retval None
*/
void HAL_ADC_BC_MspInit()
{
 80078ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078ae:	2300      	movs	r3, #0
 80078b0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80078b4:	9305      	str	r3, [sp, #20]
  
  /* STBC02_USED_ADC GPIO Configuration */
  STBC02_BATMS_GPIO_CLK_ENABLE();
 80078b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 80078be:	480a      	ldr	r0, [pc, #40]	; (80078e8 <HAL_ADC_BC_MspInit+0x3c>)
  STBC02_BATMS_GPIO_CLK_ENABLE();
 80078c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078c2:	f042 0204 	orr.w	r2, r2, #4
 80078c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80078c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ca:	f003 0304 	and.w	r3, r3, #4
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
 80078d2:	2210      	movs	r2, #16
 80078d4:	230b      	movs	r3, #11
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 80078d6:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
 80078d8:	e9cd 2301 	strd	r2, r3, [sp, #4]
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 80078dc:	f002 fd94 	bl	800a408 <HAL_GPIO_Init>
  
}
 80078e0:	b007      	add	sp, #28
 80078e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80078e6:	bf00      	nop
 80078e8:	48000800 	.word	0x48000800

080078ec <BSP_BC_BatMS_Init>:
{
 80078ec:	b510      	push	{r4, lr}
  (void)BSP_ADC1_Initialization(ADC1_FOR_BC);
 80078ee:	2002      	movs	r0, #2
{
 80078f0:	b08e      	sub	sp, #56	; 0x38
  (void)BSP_ADC1_Initialization(ADC1_FOR_BC);
 80078f2:	f7fe feef 	bl	80066d4 <BSP_ADC1_Initialization>
* @retval 0 in case of success
* @retval 1 in case of failure
*/
static int32_t Channel_ADC1_Init(void)
{
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80078f6:	2234      	movs	r2, #52	; 0x34
 80078f8:	2100      	movs	r1, #0
 80078fa:	a801      	add	r0, sp, #4
 80078fc:	f014 fcb2 	bl	801c264 <memset>
  static uint8_t ADC_stopped=0;
  uint32_t ADC_Status;
  
  
  ADC_Status= HAL_ADC_GetState(&ADC1_Handle);
 8007900:	4819      	ldr	r0, [pc, #100]	; (8007968 <BSP_BC_BatMS_Init+0x7c>)
 8007902:	4c1a      	ldr	r4, [pc, #104]	; (800796c <BSP_BC_BatMS_Init+0x80>)
 8007904:	f001 f940 	bl	8008b88 <HAL_ADC_GetState>
  if ((ADC_Status & HAL_ADC_STATE_REG_BUSY) == HAL_ADC_STATE_REG_BUSY)
 8007908:	f410 7f80 	tst.w	r0, #256	; 0x100
 800790c:	d005      	beq.n	800791a <BSP_BC_BatMS_Init+0x2e>
  {
    (void)HAL_ADC_Stop(&ADC1_Handle);
 800790e:	4816      	ldr	r0, [pc, #88]	; (8007968 <BSP_BC_BatMS_Init+0x7c>)
 8007910:	f001 fa53 	bl	8008dba <HAL_ADC_Stop>
    ADC_stopped=1;
 8007914:	2301      	movs	r3, #1
 8007916:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
  }
  
  
  /* Configure ADC injected channel */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800791a:	4a15      	ldr	r2, [pc, #84]	; (8007970 <BSP_BC_BatMS_Init+0x84>)
 800791c:	2308      	movs	r3, #8
 800791e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8007922:	2107      	movs	r1, #7
 8007924:	237f      	movs	r3, #127	; 0x7f
 8007926:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  sConfigInjected.InjectedOffset = 0;
 800792a:	2004      	movs	r0, #4
 800792c:	2300      	movs	r3, #0
  sConfigInjected.InjectedNbrOfConversion = 1;
 800792e:	2201      	movs	r2, #1
  sConfigInjected.InjectedOffset = 0;
 8007930:	e9cd 0305 	strd	r0, r3, [sp, #20]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 8007934:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8007938:	f8ad 3020 	strh.w	r3, [sp, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 800793c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
  sConfigInjected.InjecOversamplingMode = DISABLE; 
 8007940:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  sConfigInjected.InjectedNbrOfConversion = 1;
 8007944:	9207      	str	r2, [sp, #28]
  
  HAL_ADC_BC_MspInit();
 8007946:	f7ff ffb1 	bl	80078ac <HAL_ADC_BC_MspInit>
  
  
  (void)HAL_ADCEx_InjectedConfigChannel(&ADC1_Handle, &sConfigInjected);
 800794a:	4807      	ldr	r0, [pc, #28]	; (8007968 <BSP_BC_BatMS_Init+0x7c>)
 800794c:	a901      	add	r1, sp, #4
 800794e:	f001 fb65 	bl	800901c <HAL_ADCEx_InjectedConfigChannel>
  
  if (ADC_stopped == 1U)
 8007952:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
 8007956:	2b01      	cmp	r3, #1
 8007958:	d102      	bne.n	8007960 <BSP_BC_BatMS_Init+0x74>
  {
    (void)HAL_ADC_Start(&ADC1_Handle);
 800795a:	4803      	ldr	r0, [pc, #12]	; (8007968 <BSP_BC_BatMS_Init+0x7c>)
 800795c:	f001 f9b8 	bl	8008cd0 <HAL_ADC_Start>
}
 8007960:	2000      	movs	r0, #0
 8007962:	b00e      	add	sp, #56	; 0x38
 8007964:	bd10      	pop	{r4, pc}
 8007966:	bf00      	nop
 8007968:	200007f0 	.word	0x200007f0
 800796c:	20000cc0 	.word	0x20000cc0
 8007970:	36902000 	.word	0x36902000

08007974 <EXTI15_10_IRQHandler>:
}


void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8007974:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007978:	f002 bec6 	b.w	800a708 <HAL_GPIO_EXTI_IRQHandler>

0800797c <TIM7_IRQHandler>:
/**
* @brief This function handles STBC02_USED_TIM global interrupt.
*/
void STBC02_USED_TIM_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&hstbc02_UsedTim);
 800797c:	4801      	ldr	r0, [pc, #4]	; (8007984 <TIM7_IRQHandler+0x8>)
 800797e:	f005 bcbb 	b.w	800d2f8 <HAL_TIM_IRQHandler>
 8007982:	bf00      	nop
 8007984:	20000cc4 	.word	0x20000cc4

08007988 <TIM3_IRQHandler>:
* @param  None
* @retval None
*/
void TIM3_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimBCHandle);
 8007988:	4801      	ldr	r0, [pc, #4]	; (8007990 <TIM3_IRQHandler+0x8>)
 800798a:	f005 bcb5 	b.w	800d2f8 <HAL_TIM_IRQHandler>
 800798e:	bf00      	nop
 8007990:	20000d74 	.word	0x20000d74

08007994 <BSP_I2C2_DeInit>:
static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
  UNUSED(i2cHandle);
  
  /* Peripheral clock disable */
  __HAL_RCC_I2C2_CLK_DISABLE();
 8007994:	4a09      	ldr	r2, [pc, #36]	; (80079bc <BSP_I2C2_DeInit+0x28>)
  
  /**I2C2 GPIO Configuration    
  PF1     ------> I2C2_SCL
  PF0     ------> I2C2_SDA 
  */
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0);
 8007996:	480a      	ldr	r0, [pc, #40]	; (80079c0 <BSP_I2C2_DeInit+0x2c>)
{
 8007998:	b508      	push	{r3, lr}
  __HAL_RCC_I2C2_CLK_DISABLE();
 800799a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800799c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80079a0:	6593      	str	r3, [r2, #88]	; 0x58
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0);
 80079a2:	2103      	movs	r1, #3
 80079a4:	f002 fe0a 	bl	800a5bc <HAL_GPIO_DeInit>
  if (HAL_I2C_DeInit(&hi2c2) == HAL_OK)
 80079a8:	4806      	ldr	r0, [pc, #24]	; (80079c4 <BSP_I2C2_DeInit+0x30>)
 80079aa:	f003 f853 	bl	800aa54 <HAL_I2C_DeInit>
    ret = BSP_ERROR_NONE;
 80079ae:	2800      	cmp	r0, #0
}
 80079b0:	bf14      	ite	ne
 80079b2:	f06f 0007 	mvnne.w	r0, #7
 80079b6:	2000      	moveq	r0, #0
 80079b8:	bd08      	pop	{r3, pc}
 80079ba:	bf00      	nop
 80079bc:	40021000 	.word	0x40021000
 80079c0:	48001400 	.word	0x48001400
 80079c4:	20000e10 	.word	0x20000e10

080079c8 <BSP_I2C2_WriteReg>:
{
 80079c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(HAL_I2C_Mem_Write(&hi2c2, (uint8_t)DevAddr,
 80079ca:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80079ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079d2:	9200      	str	r2, [sp, #0]
 80079d4:	2301      	movs	r3, #1
 80079d6:	460a      	mov	r2, r1
 80079d8:	b2c1      	uxtb	r1, r0
 80079da:	4805      	ldr	r0, [pc, #20]	; (80079f0 <BSP_I2C2_WriteReg+0x28>)
 80079dc:	f003 f853 	bl	800aa86 <HAL_I2C_Mem_Write>
    ret = BSP_ERROR_NONE;
 80079e0:	2800      	cmp	r0, #0
}
 80079e2:	bf14      	ite	ne
 80079e4:	f06f 0007 	mvnne.w	r0, #7
 80079e8:	2000      	moveq	r0, #0
 80079ea:	b004      	add	sp, #16
 80079ec:	bd10      	pop	{r4, pc}
 80079ee:	bf00      	nop
 80079f0:	20000e10 	.word	0x20000e10

080079f4 <BSP_I2C2_ReadReg>:
{
 80079f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, (uint16_t)Reg,
 80079f6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80079fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079fe:	9200      	str	r2, [sp, #0]
 8007a00:	2301      	movs	r3, #1
 8007a02:	460a      	mov	r2, r1
 8007a04:	4601      	mov	r1, r0
 8007a06:	4805      	ldr	r0, [pc, #20]	; (8007a1c <BSP_I2C2_ReadReg+0x28>)
 8007a08:	f003 f8f4 	bl	800abf4 <HAL_I2C_Mem_Read>
    ret = (int32_t)HAL_OK;
 8007a0c:	2800      	cmp	r0, #0
}
 8007a0e:	bf14      	ite	ne
 8007a10:	f06f 0007 	mvnne.w	r0, #7
 8007a14:	2000      	moveq	r0, #0
 8007a16:	b004      	add	sp, #16
 8007a18:	bd10      	pop	{r4, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000e10 	.word	0x20000e10

08007a20 <BSP_SPI2_SendRecv>:
{
 8007a20:	b513      	push	{r0, r1, r4, lr}
  if(HAL_SPI_TransmitReceive(&hbusspi2, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8007a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8007a26:	4614      	mov	r4, r2
  if(HAL_SPI_TransmitReceive(&hbusspi2, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	460a      	mov	r2, r1
 8007a2e:	4601      	mov	r1, r0
 8007a30:	4804      	ldr	r0, [pc, #16]	; (8007a44 <BSP_SPI2_SendRecv+0x24>)
 8007a32:	f005 f8e4 	bl	800cbfe <HAL_SPI_TransmitReceive>
      ret = (int32_t)len;
 8007a36:	2800      	cmp	r0, #0
}
 8007a38:	bf0c      	ite	eq
 8007a3a:	4620      	moveq	r0, r4
 8007a3c:	f06f 0005 	mvnne.w	r0, #5
 8007a40:	b002      	add	sp, #8
 8007a42:	bd10      	pop	{r4, pc}
 8007a44:	20000f58 	.word	0x20000f58

08007a48 <BSP_SPI3_DeInit>:
  __HAL_RCC_SPI3_CLK_DISABLE();
 8007a48:	4a09      	ldr	r2, [pc, #36]	; (8007a70 <BSP_SPI3_DeInit+0x28>)
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_5);
 8007a4a:	480a      	ldr	r0, [pc, #40]	; (8007a74 <BSP_SPI3_DeInit+0x2c>)
{
 8007a4c:	b508      	push	{r3, lr}
  __HAL_RCC_SPI3_CLK_DISABLE();
 8007a4e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007a50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a54:	6593      	str	r3, [r2, #88]	; 0x58
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_5);
 8007a56:	2128      	movs	r1, #40	; 0x28
 8007a58:	f002 fdb0 	bl	800a5bc <HAL_GPIO_DeInit>
  if (HAL_SPI_DeInit(&hbusspi3) == HAL_OK) 
 8007a5c:	4806      	ldr	r0, [pc, #24]	; (8007a78 <BSP_SPI3_DeInit+0x30>)
 8007a5e:	f004 ffef 	bl	800ca40 <HAL_SPI_DeInit>
    ret = BSP_ERROR_NONE;
 8007a62:	2800      	cmp	r0, #0
}
 8007a64:	bf14      	ite	ne
 8007a66:	f06f 0007 	mvnne.w	r0, #7
 8007a6a:	2000      	moveq	r0, #0
 8007a6c:	bd08      	pop	{r3, pc}
 8007a6e:	bf00      	nop
 8007a70:	40021000 	.word	0x40021000
 8007a74:	48000400 	.word	0x48000400
 8007a78:	20000fbc 	.word	0x20000fbc

08007a7c <BSP_SPI3_Send>:
{
 8007a7c:	b510      	push	{r4, lr}
  if(HAL_SPI_Transmit(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8007a7e:	460a      	mov	r2, r1
{
 8007a80:	460c      	mov	r4, r1
  if(HAL_SPI_Transmit(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8007a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a86:	4601      	mov	r1, r0
 8007a88:	4804      	ldr	r0, [pc, #16]	; (8007a9c <BSP_SPI3_Send+0x20>)
 8007a8a:	f004 ffef 	bl	800ca6c <HAL_SPI_Transmit>
      ret = (int32_t)len;
 8007a8e:	2800      	cmp	r0, #0
}
 8007a90:	bf0c      	ite	eq
 8007a92:	4620      	moveq	r0, r4
 8007a94:	f06f 0005 	mvnne.w	r0, #5
 8007a98:	bd10      	pop	{r4, pc}
 8007a9a:	bf00      	nop
 8007a9c:	20000fbc 	.word	0x20000fbc

08007aa0 <BSP_SPI3_Recv>:
{
 8007aa0:	b510      	push	{r4, lr}
  if(HAL_SPI_Receive(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8007aa2:	460a      	mov	r2, r1
{
 8007aa4:	460c      	mov	r4, r1
  if(HAL_SPI_Receive(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8007aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007aaa:	4601      	mov	r1, r0
 8007aac:	4804      	ldr	r0, [pc, #16]	; (8007ac0 <BSP_SPI3_Recv+0x20>)
 8007aae:	f005 f9d2 	bl	800ce56 <HAL_SPI_Receive>
      ret = (int32_t)len;
 8007ab2:	2800      	cmp	r0, #0
}
 8007ab4:	bf0c      	ite	eq
 8007ab6:	4620      	moveq	r0, r4
 8007ab8:	f06f 0005 	mvnne.w	r0, #5
 8007abc:	bd10      	pop	{r4, pc}
 8007abe:	bf00      	nop
 8007ac0:	20000fbc 	.word	0x20000fbc

08007ac4 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8007ac4:	f000 bdae 	b.w	8008624 <HAL_GetTick>

08007ac8 <MX_SPI2_Init>:
  hspi->Init.Mode = SPI_MODE_MASTER;
 8007ac8:	4910      	ldr	r1, [pc, #64]	; (8007b0c <MX_SPI2_Init+0x44>)
 8007aca:	f44f 7282 	mov.w	r2, #260	; 0x104
{
 8007ace:	b508      	push	{r3, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 8007ad0:	e9c0 1200 	strd	r1, r2, [r0]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8007ada:	e9c0 2102 	strd	r2, r1, [r0, #8]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8007ade:	f04f 0c01 	mov.w	ip, #1
 8007ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ae6:	e9c0 c105 	strd	ip, r1, [r0, #20]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8007aea:	2130      	movs	r1, #48	; 0x30
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007aec:	e9c0 1207 	strd	r1, r2, [r0, #28]
  hspi->Init.CRCPolynomial = 7;
 8007af0:	2107      	movs	r1, #7
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007af2:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007af6:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007afa:	6102      	str	r2, [r0, #16]
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8007afc:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8007afe:	f004 ff34 	bl	800c96a <HAL_SPI_Init>
}
 8007b02:	3800      	subs	r0, #0
 8007b04:	bf18      	it	ne
 8007b06:	2001      	movne	r0, #1
 8007b08:	bd08      	pop	{r3, pc}
 8007b0a:	bf00      	nop
 8007b0c:	40003800 	.word	0x40003800

08007b10 <BSP_SPI2_Init>:
{
 8007b10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  hbusspi2.Instance  = SPI2;
 8007b14:	4d20      	ldr	r5, [pc, #128]	; (8007b98 <BSP_SPI2_Init+0x88>)
 8007b16:	4b21      	ldr	r3, [pc, #132]	; (8007b9c <BSP_SPI2_Init+0x8c>)
 8007b18:	f8c5 3194 	str.w	r3, [r5, #404]	; 0x194
  if (HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET) 
 8007b1c:	f505 76ca 	add.w	r6, r5, #404	; 0x194
{
 8007b20:	b087      	sub	sp, #28
  if (HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET) 
 8007b22:	4630      	mov	r0, r6
 8007b24:	f005 fa4f 	bl	800cfc6 <HAL_SPI_GetState>
 8007b28:	4604      	mov	r4, r0
 8007b2a:	b148      	cbz	r0, 8007b40 <BSP_SPI2_Init+0x30>
  int32_t ret = BSP_ERROR_NONE;
 8007b2c:	2000      	movs	r0, #0
  __HAL_SPI_ENABLE(&hbusspi2);
 8007b2e:	f8d5 2194 	ldr.w	r2, [r5, #404]	; 0x194
 8007b32:	6813      	ldr	r3, [r2, #0]
 8007b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b38:	6013      	str	r3, [r2, #0]
}
 8007b3a:	b007      	add	sp, #28
 8007b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_RCC_SPI2_CLK_ENABLE();
 8007b40:	4b17      	ldr	r3, [pc, #92]	; (8007ba0 <BSP_SPI2_Init+0x90>)
 8007b42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007b44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b48:	659a      	str	r2, [r3, #88]	; 0x58
 8007b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b4c:	9003      	str	r0, [sp, #12]
  __HAL_RCC_SPI2_CLK_ENABLE();
 8007b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007b56:	4813      	ldr	r0, [pc, #76]	; (8007ba4 <BSP_SPI2_Init+0x94>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b58:	230a      	movs	r3, #10
 8007b5a:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007b5e:	f04f 0803 	mov.w	r8, #3
 8007b62:	2705      	movs	r7, #5
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007b64:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b66:	e9cd 3901 	strd	r3, r9, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007b6a:	e9cd 8704 	strd	r8, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007b6e:	f002 fc4b 	bl	800a408 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b72:	480d      	ldr	r0, [pc, #52]	; (8007ba8 <BSP_SPI2_Init+0x98>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;  
 8007b74:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007b76:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b78:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b7a:	e9cd 3901 	strd	r3, r9, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b7e:	e9cd 4803 	strd	r4, r8, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b82:	f002 fc41 	bl	800a408 <HAL_GPIO_Init>
    if (MX_SPI2_Init(&hbusspi2) != HAL_OK)
 8007b86:	4630      	mov	r0, r6
 8007b88:	f7ff ff9e 	bl	8007ac8 <MX_SPI2_Init>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d0cd      	beq.n	8007b2c <BSP_SPI2_Init+0x1c>
      ret = BSP_ERROR_BUS_FAILURE;
 8007b90:	f06f 0007 	mvn.w	r0, #7
 8007b94:	e7cb      	b.n	8007b2e <BSP_SPI2_Init+0x1e>
 8007b96:	bf00      	nop
 8007b98:	20000dc4 	.word	0x20000dc4
 8007b9c:	40003800 	.word	0x40003800
 8007ba0:	40021000 	.word	0x40021000
 8007ba4:	48000c00 	.word	0x48000c00
 8007ba8:	48000800 	.word	0x48000800

08007bac <MX_SPI3_Init>:
  hspi->Init.Mode = SPI_MODE_MASTER;
 8007bac:	4a13      	ldr	r2, [pc, #76]	; (8007bfc <MX_SPI3_Init+0x50>)
 8007bae:	f44f 7382 	mov.w	r3, #260	; 0x104
{
 8007bb2:	b510      	push	{r4, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 8007bb4:	e9c0 2300 	strd	r2, r3, [r0]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007bbe:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8007bc2:	2102      	movs	r1, #2
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007bca:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8007bce:	2218      	movs	r2, #24
 8007bd0:	e9c0 c206 	strd	ip, r2, [r0, #24]
  hspi->Init.CRCPolynomial = 7;
 8007bd4:	2207      	movs	r2, #7
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007bd6:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
{
 8007bda:	4604      	mov	r4, r0
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8007bdc:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007be0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007be2:	2308      	movs	r3, #8
 8007be4:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8007be6:	f004 fec0 	bl	800c96a <HAL_SPI_Init>
  __HAL_SPI_ENABLE(hspi);
 8007bea:	6822      	ldr	r2, [r4, #0]
 8007bec:	6813      	ldr	r3, [r2, #0]
}
 8007bee:	3800      	subs	r0, #0
  __HAL_SPI_ENABLE(hspi);
 8007bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf4:	6013      	str	r3, [r2, #0]
}
 8007bf6:	bf18      	it	ne
 8007bf8:	2001      	movne	r0, #1
 8007bfa:	bd10      	pop	{r4, pc}
 8007bfc:	40003c00 	.word	0x40003c00

08007c00 <BSP_SPI3_Init>:
{
 8007c00:	b510      	push	{r4, lr}
  hbusspi3.Instance  = SPI3;
 8007c02:	4c1b      	ldr	r4, [pc, #108]	; (8007c70 <BSP_SPI3_Init+0x70>)
 8007c04:	4b1b      	ldr	r3, [pc, #108]	; (8007c74 <BSP_SPI3_Init+0x74>)
 8007c06:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  if (HAL_SPI_GetState(&hbusspi3) == HAL_SPI_STATE_RESET) 
 8007c0a:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
{
 8007c0e:	b088      	sub	sp, #32
  if (HAL_SPI_GetState(&hbusspi3) == HAL_SPI_STATE_RESET) 
 8007c10:	4620      	mov	r0, r4
 8007c12:	f005 f9d8 	bl	800cfc6 <HAL_SPI_GetState>
 8007c16:	b110      	cbz	r0, 8007c1e <BSP_SPI3_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 8007c18:	2000      	movs	r0, #0
}
 8007c1a:	b008      	add	sp, #32
 8007c1c:	bd10      	pop	{r4, pc}
  __HAL_RCC_SPI3_CLK_ENABLE();
 8007c1e:	4b16      	ldr	r3, [pc, #88]	; (8007c78 <BSP_SPI3_Init+0x78>)
 8007c20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007c22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c26:	659a      	str	r2, [r3, #88]	; 0x58
 8007c28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007c2a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8007c2e:	9201      	str	r2, [sp, #4]
 8007c30:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c34:	f042 0202 	orr.w	r2, r2, #2
 8007c38:	64da      	str	r2, [r3, #76]	; 0x4c
 8007c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c3c:	9005      	str	r0, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	9302      	str	r3, [sp, #8]
 8007c44:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c46:	480d      	ldr	r0, [pc, #52]	; (8007c7c <BSP_SPI3_Init+0x7c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c48:	2238      	movs	r2, #56	; 0x38
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007c50:	2103      	movs	r1, #3
 8007c52:	2306      	movs	r3, #6
 8007c54:	e9cd 1306 	strd	r1, r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c58:	a903      	add	r1, sp, #12
 8007c5a:	f002 fbd5 	bl	800a408 <HAL_GPIO_Init>
    if (MX_SPI3_Init(&hbusspi3) != HAL_OK)
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f7ff ffa4 	bl	8007bac <MX_SPI3_Init>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d0d7      	beq.n	8007c18 <BSP_SPI3_Init+0x18>
      ret = BSP_ERROR_BUS_FAILURE;
 8007c68:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8007c6c:	e7d5      	b.n	8007c1a <BSP_SPI3_Init+0x1a>
 8007c6e:	bf00      	nop
 8007c70:	20000dc4 	.word	0x20000dc4
 8007c74:	40003c00 	.word	0x40003c00
 8007c78:	40021000 	.word	0x40021000
 8007c7c:	48000400 	.word	0x48000400

08007c80 <MX_I2C2_Init>:
  hi2c->Init.Timing = 0x00B03FDB;
 8007c80:	4a11      	ldr	r2, [pc, #68]	; (8007cc8 <MX_I2C2_Init+0x48>)
 8007c82:	4b12      	ldr	r3, [pc, #72]	; (8007ccc <MX_I2C2_Init+0x4c>)
{
 8007c84:	b570      	push	{r4, r5, r6, lr}
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007c86:	2600      	movs	r6, #0
  hi2c->Init.Timing = 0x00B03FDB;
 8007c88:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e9c0 6302 	strd	r6, r3, [r0, #8]
  hi2c->Init.OwnAddress2 = 0;
 8007c92:	e9c0 6604 	strd	r6, r6, [r0, #16]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007c96:	e9c0 6606 	strd	r6, r6, [r0, #24]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007c9a:	6206      	str	r6, [r0, #32]
{
 8007c9c:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8007c9e:	f002 fe87 	bl	800a9b0 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007ca2:	4631      	mov	r1, r6
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8007ca4:	4605      	mov	r5, r0
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f003 f863 	bl	800ad72 <HAL_I2CEx_ConfigAnalogFilter>
 8007cac:	4305      	orrs	r5, r0
 8007cae:	b2ed      	uxtb	r5, r5
    ret = HAL_ERROR;
 8007cb0:	1bad      	subs	r5, r5, r6
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	4620      	mov	r0, r4
    ret = HAL_ERROR;
 8007cb6:	bf18      	it	ne
 8007cb8:	2501      	movne	r5, #1
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8007cba:	f003 f880 	bl	800adbe <HAL_I2CEx_ConfigDigitalFilter>
    ret = HAL_ERROR;
 8007cbe:	42b0      	cmp	r0, r6
}
 8007cc0:	bf0c      	ite	eq
 8007cc2:	4628      	moveq	r0, r5
 8007cc4:	2001      	movne	r0, #1
 8007cc6:	bd70      	pop	{r4, r5, r6, pc}
 8007cc8:	40005800 	.word	0x40005800
 8007ccc:	00b03fdb 	.word	0x00b03fdb

08007cd0 <BSP_I2C2_Init>:
{
 8007cd0:	b530      	push	{r4, r5, lr}
  hi2c2.Instance  = I2C2;
 8007cd2:	4d2d      	ldr	r5, [pc, #180]	; (8007d88 <BSP_I2C2_Init+0xb8>)
 8007cd4:	4b2d      	ldr	r3, [pc, #180]	; (8007d8c <BSP_I2C2_Init+0xbc>)
 8007cd6:	f845 3f4c 	str.w	r3, [r5, #76]!
{
 8007cda:	b0b1      	sub	sp, #196	; 0xc4
  if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8007cdc:	4628      	mov	r0, r5
 8007cde:	f003 f845 	bl	800ad6c <HAL_I2C_GetState>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d14d      	bne.n	8007d82 <BSP_I2C2_Init+0xb2>
  __GPIOF_CLK_ENABLE();
 8007ce6:	4c2a      	ldr	r4, [pc, #168]	; (8007d90 <BSP_I2C2_Init+0xc0>)
  RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8007ce8:	901f      	str	r0, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8007cea:	2380      	movs	r3, #128	; 0x80
  RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8007cec:	9001      	str	r0, [sp, #4]
  (void)HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8007cee:	a809      	add	r0, sp, #36	; 0x24
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8007cf0:	9309      	str	r3, [sp, #36]	; 0x24
  (void)HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8007cf2:	f004 fac9 	bl	800c288 <HAL_RCCEx_PeriphCLKConfig>
  __GPIOF_CLK_ENABLE();
 8007cf6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007cf8:	4826      	ldr	r0, [pc, #152]	; (8007d94 <BSP_I2C2_Init+0xc4>)
  __GPIOF_CLK_ENABLE();
 8007cfa:	f043 0320 	orr.w	r3, r3, #32
 8007cfe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007d00:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007d02:	f003 0320 	and.w	r3, r3, #32
 8007d06:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d08:	2203      	movs	r2, #3
  __GPIOF_CLK_ENABLE();
 8007d0a:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d0c:	2312      	movs	r3, #18
 8007d0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007d12:	2101      	movs	r1, #1
 8007d14:	2302      	movs	r3, #2
 8007d16:	e9cd 1306 	strd	r1, r3, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007d1a:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007d1c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007d1e:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007d20:	f002 fb72 	bl	800a408 <HAL_GPIO_Init>
  __HAL_RCC_I2C2_CLK_ENABLE();  
 8007d24:	6da3      	ldr	r3, [r4, #88]	; 0x58
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8007d26:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_I2C2_CLK_ENABLE();  
 8007d28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d2c:	65a3      	str	r3, [r4, #88]	; 0x58
 8007d2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d34:	9303      	str	r3, [sp, #12]
 8007d36:	9b03      	ldr	r3, [sp, #12]
  __I2C2_FORCE_RESET();
 8007d38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007d3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d3e:	63a3      	str	r3, [r4, #56]	; 0x38
  __I2C2_RELEASE_RESET();
 8007d40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007d42:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007d46:	63a3      	str	r3, [r4, #56]	; 0x38
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8007d48:	4611      	mov	r1, r2
 8007d4a:	2021      	movs	r0, #33	; 0x21
 8007d4c:	f001 fb92 	bl	8009474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8007d50:	2021      	movs	r0, #33	; 0x21
 8007d52:	f001 fbc1 	bl	80094d8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8007d56:	9a01      	ldr	r2, [sp, #4]
 8007d58:	2022      	movs	r0, #34	; 0x22
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	f001 fb8a 	bl	8009474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8007d60:	2022      	movs	r0, #34	; 0x22
 8007d62:	f001 fbb9 	bl	80094d8 <HAL_NVIC_EnableIRQ>
    if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8007d66:	4628      	mov	r0, r5
 8007d68:	f7ff ff8a 	bl	8007c80 <MX_I2C2_Init>
 8007d6c:	4601      	mov	r1, r0
 8007d6e:	b118      	cbz	r0, 8007d78 <BSP_I2C2_Init+0xa8>
      ret = BSP_ERROR_BUS_FAILURE;
 8007d70:	f06f 0007 	mvn.w	r0, #7
}
 8007d74:	b031      	add	sp, #196	; 0xc4
 8007d76:	bd30      	pop	{r4, r5, pc}
    else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f002 fffa 	bl	800ad72 <HAL_I2CEx_ConfigAnalogFilter>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	d1f6      	bne.n	8007d70 <BSP_I2C2_Init+0xa0>
      ret = BSP_ERROR_NONE;
 8007d82:	2000      	movs	r0, #0
  return ret;
 8007d84:	e7f6      	b.n	8007d74 <BSP_I2C2_Init+0xa4>
 8007d86:	bf00      	nop
 8007d88:	20000dc4 	.word	0x20000dc4
 8007d8c:	40005800 	.word	0x40005800
 8007d90:	40021000 	.word	0x40021000
 8007d94:	48001400 	.word	0x48001400

08007d98 <BSP_HTS221_WriteReg>:
}

#if (USE_ENV_SENSOR_HTS221_0 == 1)

int32_t BSP_HTS221_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8007d98:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  uint16_t dataReg = (uint16_t)Reg;
  
  
  if (BSP_I2C2_WriteReg(Addr, dataReg, pdata, len) != BSP_ERROR_NONE)
 8007d9a:	f7ff fe15 	bl	80079c8 <BSP_I2C2_WriteReg>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007d9e:	2800      	cmp	r0, #0
  }
  
  
  return ret;
}
 8007da0:	bf18      	it	ne
 8007da2:	f06f 0007 	mvnne.w	r0, #7
 8007da6:	bd08      	pop	{r3, pc}

08007da8 <BSP_HTS221_ReadReg>:


int32_t BSP_HTS221_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8007da8:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  uint16_t dataReg = (uint16_t)Reg;
  
  dataReg |= 0x80U;
  
  if (BSP_I2C2_ReadReg(Addr, dataReg, pdata, len) !=BSP_ERROR_NONE)
 8007daa:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007dae:	f7ff fe21 	bl	80079f4 <BSP_I2C2_ReadReg>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007db2:	2800      	cmp	r0, #0
  }
  
  
  return ret;
}
 8007db4:	bf18      	it	ne
 8007db6:	f06f 0007 	mvnne.w	r0, #7
 8007dba:	bd08      	pop	{r3, pc}

08007dbc <BSP_ENV_SENSOR_Init>:
{
 8007dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc0:	460e      	mov	r6, r1
 8007dc2:	b08c      	sub	sp, #48	; 0x30
  switch (Instance)
 8007dc4:	4607      	mov	r7, r0
 8007dc6:	b130      	cbz	r0, 8007dd6 <BSP_ENV_SENSOR_Init+0x1a>
 8007dc8:	2801      	cmp	r0, #1
 8007dca:	d068      	beq.n	8007e9e <BSP_ENV_SENSOR_Init+0xe2>
 8007dcc:	f06f 0001 	mvn.w	r0, #1
}
 8007dd0:	b00c      	add	sp, #48	; 0x30
 8007dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8007dd6:	23bf      	movs	r3, #191	; 0xbf
 8007dd8:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = BSP_I2C2_Init;
 8007ddc:	4b7c      	ldr	r3, [pc, #496]	; (8007fd0 <BSP_ENV_SENSOR_Init+0x214>)
 8007dde:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8007de0:	4b7c      	ldr	r3, [pc, #496]	; (8007fd4 <BSP_ENV_SENSOR_Init+0x218>)
  io_ctx.ReadReg     = BSP_HTS221_ReadReg;
  io_ctx.WriteReg    = BSP_HTS221_WriteReg;
  io_ctx.GetTick     = BSP_GetTick;

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8007de2:	4c7d      	ldr	r4, [pc, #500]	; (8007fd8 <BSP_ENV_SENSOR_Init+0x21c>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8007de4:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = BSP_HTS221_ReadReg;
 8007de6:	4b7d      	ldr	r3, [pc, #500]	; (8007fdc <BSP_ENV_SENSOR_Init+0x220>)
 8007de8:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = BSP_HTS221_WriteReg;
 8007dea:	4b7d      	ldr	r3, [pc, #500]	; (8007fe0 <BSP_ENV_SENSOR_Init+0x224>)
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8007dec:	9007      	str	r0, [sp, #28]
  io_ctx.WriteReg    = BSP_HTS221_WriteReg;
 8007dee:	9309      	str	r3, [sp, #36]	; 0x24
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8007df0:	a905      	add	r1, sp, #20
  io_ctx.GetTick     = BSP_GetTick;
 8007df2:	4b7c      	ldr	r3, [pc, #496]	; (8007fe4 <BSP_ENV_SENSOR_Init+0x228>)
 8007df4:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8007df6:	4620      	mov	r0, r4
 8007df8:	f7fd f9ae 	bl	8005158 <HTS221_RegisterBusIO>
 8007dfc:	b110      	cbz	r0, 8007e04 <BSP_ENV_SENSOR_Init+0x48>
        return BSP_ERROR_NO_INIT;
 8007dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007e02:	e7e5      	b.n	8007dd0 <BSP_ENV_SENSOR_Init+0x14>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8007e04:	f10d 0103 	add.w	r1, sp, #3
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f7fd f873 	bl	8004ef4 <HTS221_ReadID>
 8007e0e:	4605      	mov	r5, r0
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d1f4      	bne.n	8007dfe <BSP_ENV_SENSOR_Init+0x42>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != HTS221_ID)
 8007e14:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007e18:	2bbc      	cmp	r3, #188	; 0xbc
 8007e1a:	d1f0      	bne.n	8007dfe <BSP_ENV_SENSOR_Init+0x42>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8007e1c:	a901      	add	r1, sp, #4
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f7fc fff0 	bl	8004e04 <HTS221_GetCapabilities>
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007e24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007e28:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8007e2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
                                   uint32_t)cap.Humidity << 2);

    EnvCompObj[HTS221_0] = &hts221_obj_0;
 8007e30:	6364      	str	r4, [r4, #52]	; 0x34
                                   uint32_t)cap.Humidity << 2);
 8007e32:	009b      	lsls	r3, r3, #2
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007e34:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	62e3      	str	r3, [r4, #44]	; 0x2c
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007e3c:	07f1      	lsls	r1, r6, #31
    EnvDrv[HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8007e3e:	4b6a      	ldr	r3, [pc, #424]	; (8007fe8 <BSP_ENV_SENSOR_Init+0x22c>)
 8007e40:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007e42:	d50a      	bpl.n	8007e5a <BSP_ENV_SENSOR_Init+0x9e>
 8007e44:	2a01      	cmp	r2, #1
 8007e46:	d108      	bne.n	8007e5a <BSP_ENV_SENSOR_Init+0x9e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8007e48:	4a68      	ldr	r2, [pc, #416]	; (8007fec <BSP_ENV_SENSOR_Init+0x230>)

      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8007e4a:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8007e4c:	6462      	str	r2, [r4, #68]	; 0x44
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8007e4e:	4620      	mov	r0, r4
 8007e50:	4798      	blx	r3
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e52:	2800      	cmp	r0, #0
 8007e54:	bf18      	it	ne
 8007e56:	f06f 0504 	mvnne.w	r5, #4
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8007e5a:	0772      	lsls	r2, r6, #29
 8007e5c:	d50d      	bpl.n	8007e7a <BSP_ENV_SENSOR_Init+0xbe>
 8007e5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d109      	bne.n	8007e7a <BSP_ENV_SENSOR_Init+0xbe>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8007e66:	4b62      	ldr	r3, [pc, #392]	; (8007ff0 <BSP_ENV_SENSOR_Init+0x234>)
 8007e68:	64e3      	str	r3, [r4, #76]	; 0x4c

      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8007e6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007e6c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4798      	blx	r3
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e72:	1e05      	subs	r5, r0, #0
 8007e74:	bf18      	it	ne
 8007e76:	f06f 0504 	mvnne.w	r5, #4
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 8007e7a:	07b3      	lsls	r3, r6, #30
 8007e7c:	d503      	bpl.n	8007e86 <BSP_ENV_SENSOR_Init+0xca>
 8007e7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0bb      	beq.n	8007dfe <BSP_ENV_SENSOR_Init+0x42>
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8007e86:	2d00      	cmp	r5, #0
 8007e88:	d1b9      	bne.n	8007dfe <BSP_ENV_SENSOR_Init+0x42>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007e8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007e8c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	a905      	add	r1, sp, #20
 8007e92:	4798      	blx	r3
 8007e94:	2800      	cmp	r0, #0
 8007e96:	d065      	beq.n	8007f64 <BSP_ENV_SENSOR_Init+0x1a8>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007e98:	f06f 0006 	mvn.w	r0, #6
 8007e9c:	e798      	b.n	8007dd0 <BSP_ENV_SENSOR_Init+0x14>
  int32_t                ret = BSP_ERROR_NONE;
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	9307      	str	r3, [sp, #28]
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8007ea2:	23bb      	movs	r3, #187	; 0xbb
 8007ea4:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = BSP_I2C2_Init;
 8007ea8:	4b49      	ldr	r3, [pc, #292]	; (8007fd0 <BSP_ENV_SENSOR_Init+0x214>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
  io_ctx.GetTick     = BSP_GetTick;

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8007eaa:	4d4b      	ldr	r5, [pc, #300]	; (8007fd8 <BSP_ENV_SENSOR_Init+0x21c>)
  io_ctx.Init        = BSP_I2C2_Init;
 8007eac:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8007eae:	4b49      	ldr	r3, [pc, #292]	; (8007fd4 <BSP_ENV_SENSOR_Init+0x218>)
 8007eb0:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
 8007eb2:	4b50      	ldr	r3, [pc, #320]	; (8007ff4 <BSP_ENV_SENSOR_Init+0x238>)
 8007eb4:	930a      	str	r3, [sp, #40]	; 0x28
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8007eb6:	f105 085c 	add.w	r8, r5, #92	; 0x5c
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 8007eba:	4b4f      	ldr	r3, [pc, #316]	; (8007ff8 <BSP_ENV_SENSOR_Init+0x23c>)
 8007ebc:	9309      	str	r3, [sp, #36]	; 0x24
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8007ebe:	a905      	add	r1, sp, #20
  io_ctx.GetTick     = BSP_GetTick;
 8007ec0:	4b48      	ldr	r3, [pc, #288]	; (8007fe4 <BSP_ENV_SENSOR_Init+0x228>)
 8007ec2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8007ec4:	4640      	mov	r0, r8
 8007ec6:	f7fe faa9 	bl	800641c <LPS22HH_RegisterBusIO>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	d197      	bne.n	8007dfe <BSP_ENV_SENSOR_Init+0x42>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8007ece:	f10d 0103 	add.w	r1, sp, #3
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	f7fe f945 	bl	8006162 <LPS22HH_ReadID>
 8007ed8:	4604      	mov	r4, r0
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d18f      	bne.n	8007dfe <BSP_ENV_SENSOR_Init+0x42>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LPS22HH_ID)
 8007ede:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007ee2:	2bb3      	cmp	r3, #179	; 0xb3
 8007ee4:	d18b      	bne.n	8007dfe <BSP_ENV_SENSOR_Init+0x42>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8007ee6:	a901      	add	r1, sp, #4
 8007ee8:	4640      	mov	r0, r8
 8007eea:	f7fe f8b1 	bl	8006050 <LPS22HH_GetCapabilities>
    EnvCtx[LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007eee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007ef2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8007ef6:	f89d 2004 	ldrb.w	r2, [sp, #4]
                                   uint32_t)cap.Humidity << 2);

    EnvCompObj[LPS22HH_0] = &lps22hh_obj_0;
 8007efa:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
                                   uint32_t)cap.Humidity << 2);
 8007efe:	009b      	lsls	r3, r3, #2
    EnvCtx[LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007f00:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8007f04:	4313      	orrs	r3, r2
 8007f06:	632b      	str	r3, [r5, #48]	; 0x30
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007f08:	07f0      	lsls	r0, r6, #31
    EnvDrv[LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8007f0a:	4b3c      	ldr	r3, [pc, #240]	; (8007ffc <BSP_ENV_SENSOR_Init+0x240>)
 8007f0c:	642b      	str	r3, [r5, #64]	; 0x40
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007f0e:	d50a      	bpl.n	8007f26 <BSP_ENV_SENSOR_Init+0x16a>
 8007f10:	2a01      	cmp	r2, #1
 8007f12:	d108      	bne.n	8007f26 <BSP_ENV_SENSOR_Init+0x16a>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8007f14:	4a3a      	ldr	r2, [pc, #232]	; (8008000 <BSP_ENV_SENSOR_Init+0x244>)

      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 8007f16:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8007f18:	652a      	str	r2, [r5, #80]	; 0x50
      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 8007f1a:	4640      	mov	r0, r8
 8007f1c:	4798      	blx	r3
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	bf18      	it	ne
 8007f22:	f06f 0404 	mvnne.w	r4, #4
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8007f26:	07b1      	lsls	r1, r6, #30
 8007f28:	d50d      	bpl.n	8007f46 <BSP_ENV_SENSOR_Init+0x18a>
 8007f2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d109      	bne.n	8007f46 <BSP_ENV_SENSOR_Init+0x18a>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8007f32:	4b34      	ldr	r3, [pc, #208]	; (8008004 <BSP_ENV_SENSOR_Init+0x248>)
 8007f34:	656b      	str	r3, [r5, #84]	; 0x54

      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 8007f36:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007f38:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4798      	blx	r3
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f3e:	1e04      	subs	r4, r0, #0
 8007f40:	bf18      	it	ne
 8007f42:	f06f 0404 	mvnne.w	r4, #4
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 8007f46:	0772      	lsls	r2, r6, #29
 8007f48:	d504      	bpl.n	8007f54 <BSP_ENV_SENSOR_Init+0x198>
 8007f4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f43f af55 	beq.w	8007dfe <BSP_ENV_SENSOR_Init+0x42>
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8007f54:	2c00      	cmp	r4, #0
 8007f56:	f47f af52 	bne.w	8007dfe <BSP_ENV_SENSOR_Init+0x42>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007f5a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007f5c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	a905      	add	r1, sp, #20
 8007f62:	e796      	b.n	8007e92 <BSP_ENV_SENSOR_Init+0xd6>
      if (cap.Temperature == 1U)
 8007f64:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8007f68:	1e63      	subs	r3, r4, #1
 8007f6a:	425c      	negs	r4, r3
 8007f6c:	415c      	adcs	r4, r3
      if (cap.Humidity == 1U)
 8007f6e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8007f72:	2b01      	cmp	r3, #1
      if (cap.Pressure == 1U)
 8007f74:	f89d 3015 	ldrb.w	r3, [sp, #21]
        component_functions |= ENV_HUMIDITY;
 8007f78:	bf08      	it	eq
 8007f7a:	f044 0404 	orreq.w	r4, r4, #4
      if (cap.Pressure == 1U)
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d101      	bne.n	8007f86 <BSP_ENV_SENSOR_Init+0x1ca>
        component_functions |= ENV_PRESSURE;
 8007f82:	f044 0402 	orr.w	r4, r4, #2
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007f86:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8007fd8 <BSP_ENV_SENSOR_Init+0x21c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f8a:	2503      	movs	r5, #3
 8007f8c:	f04f 0801 	mov.w	r8, #1
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007f90:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007f94:	ea38 0306 	bics.w	r3, r8, r6
 8007f98:	d005      	beq.n	8007fa6 <BSP_ENV_SENSOR_Init+0x1ea>
  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 8007f9a:	3d01      	subs	r5, #1
    function = function << 1;
 8007f9c:	ea4f 0848 	mov.w	r8, r8, lsl #1
  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 8007fa0:	d1f8      	bne.n	8007f94 <BSP_ENV_SENSOR_Init+0x1d8>
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	e714      	b.n	8007dd0 <BSP_ENV_SENSOR_Init+0x14>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007fa6:	ea38 0304 	bics.w	r3, r8, r4
 8007faa:	d1f6      	bne.n	8007f9a <BSP_ENV_SENSOR_Init+0x1de>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007fac:	4a16      	ldr	r2, [pc, #88]	; (8008008 <BSP_ENV_SENSOR_Init+0x24c>)
 8007fae:	f8da 0034 	ldr.w	r0, [sl, #52]	; 0x34
 8007fb2:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8007fb6:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8007fba:	4413      	add	r3, r2
 8007fbc:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8007fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4798      	blx	r3
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d0e7      	beq.n	8007f9a <BSP_ENV_SENSOR_Init+0x1de>
        return BSP_ERROR_COMPONENT_FAILURE;
 8007fca:	f06f 0004 	mvn.w	r0, #4
 8007fce:	e6ff      	b.n	8007dd0 <BSP_ENV_SENSOR_Init+0x14>
 8007fd0:	08007cd1 	.word	0x08007cd1
 8007fd4:	08007995 	.word	0x08007995
 8007fd8:	200010b0 	.word	0x200010b0
 8007fdc:	08007da9 	.word	0x08007da9
 8007fe0:	08007d99 	.word	0x08007d99
 8007fe4:	08007ac5 	.word	0x08007ac5
 8007fe8:	20000028 	.word	0x20000028
 8007fec:	20000000 	.word	0x20000000
 8007ff0:	20000014 	.word	0x20000014
 8007ff4:	080079f5 	.word	0x080079f5
 8007ff8:	080079c9 	.word	0x080079c9
 8007ffc:	20000094 	.word	0x20000094
 8008000:	2000006c 	.word	0x2000006c
 8008004:	20000080 	.word	0x20000080
 8008008:	08021884 	.word	0x08021884

0800800c <BSP_ENV_SENSOR_GetValue>:
  if (Instance >= ENV_INSTANCES_NBR)
 800800c:	2801      	cmp	r0, #1
{
 800800e:	b570      	push	{r4, r5, r6, lr}
 8008010:	460c      	mov	r4, r1
 8008012:	4611      	mov	r1, r2
  if (Instance >= ENV_INSTANCES_NBR)
 8008014:	d818      	bhi.n	8008048 <BSP_ENV_SENSOR_GetValue+0x3c>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8008016:	4b0e      	ldr	r3, [pc, #56]	; (8008050 <BSP_ENV_SENSOR_GetValue+0x44>)
 8008018:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800801c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800801e:	ea04 0605 	and.w	r6, r4, r5
 8008022:	43ac      	bics	r4, r5
 8008024:	d110      	bne.n	8008048 <BSP_ENV_SENSOR_GetValue+0x3c>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8008026:	4c0b      	ldr	r4, [pc, #44]	; (8008054 <BSP_ENV_SENSOR_GetValue+0x48>)
 8008028:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 800802c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8008030:	4420      	add	r0, r4
 8008032:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008036:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008038:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800803e:	2800      	cmp	r0, #0
 8008040:	bf18      	it	ne
 8008042:	f06f 0004 	mvnne.w	r0, #4
}
 8008046:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8008048:	f06f 0001 	mvn.w	r0, #1
 800804c:	e7fb      	b.n	8008046 <BSP_ENV_SENSOR_GetValue+0x3a>
 800804e:	bf00      	nop
 8008050:	200010b0 	.word	0x200010b0
 8008054:	08021884 	.word	0x08021884

08008058 <BSP_IIS2MDC_WriteReg>:
  return ret;
}


int32_t BSP_IIS2MDC_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8008058:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  uint16_t dataReg = (uint16_t)Reg;
    
  if (BSP_I2C2_WriteReg(Addr, dataReg, pdata, len) != BSP_ERROR_NONE)
 800805a:	f7ff fcb5 	bl	80079c8 <BSP_I2C2_WriteReg>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800805e:	2800      	cmp	r0, #0
  }
    
  return ret;
}
 8008060:	bf18      	it	ne
 8008062:	f06f 0007 	mvnne.w	r0, #7
 8008066:	bd08      	pop	{r3, pc}

08008068 <BSP_IIS2MDC_ReadReg>:


int32_t BSP_IIS2MDC_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8008068:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  uint16_t dataReg = (uint16_t)Reg;
  
  dataReg |= 0x80U;
  
  if (BSP_I2C2_ReadReg(Addr, dataReg, pdata, len) !=BSP_ERROR_NONE)
 800806a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800806e:	f7ff fcc1 	bl	80079f4 <BSP_I2C2_ReadReg>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8008072:	2800      	cmp	r0, #0
  }  
  
  return ret;
}
 8008074:	bf18      	it	ne
 8008076:	f06f 0007 	mvnne.w	r0, #7
 800807a:	bd08      	pop	{r3, pc}

0800807c <BSP_ISM330DHCX_WriteReg>:

  return ret;
}

static int32_t BSP_ISM330DHCX_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800807c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800807e:	4616      	mov	r6, r2
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
  uint8_t dataReg = (uint8_t)Reg;
 8008080:	f88d 1007 	strb.w	r1, [sp, #7]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 8008084:	2200      	movs	r2, #0
 8008086:	4810      	ldr	r0, [pc, #64]	; (80080c8 <BSP_ISM330DHCX_WriteReg+0x4c>)
 8008088:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{
 800808c:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 800808e:	f002 fb2d 	bl	800a6ec <HAL_GPIO_WritePin>

  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 8008092:	2101      	movs	r1, #1
 8008094:	f10d 0007 	add.w	r0, sp, #7
 8008098:	f7ff fcf0 	bl	8007a7c <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 800809c:	4621      	mov	r1, r4
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800809e:	2801      	cmp	r0, #1
  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 80080a0:	4630      	mov	r0, r6
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80080a2:	bf14      	ite	ne
 80080a4:	f06f 0505 	mvnne.w	r5, #5
 80080a8:	2500      	moveq	r5, #0
  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 80080aa:	f7ff fce7 	bl	8007a7c <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 80080ae:	2201      	movs	r2, #1
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80080b0:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 80080b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80080b6:	4804      	ldr	r0, [pc, #16]	; (80080c8 <BSP_ISM330DHCX_WriteReg+0x4c>)
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80080b8:	bf18      	it	ne
 80080ba:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 80080be:	f002 fb15 	bl	800a6ec <HAL_GPIO_WritePin>

  return ret;
}
 80080c2:	4628      	mov	r0, r5
 80080c4:	b002      	add	sp, #8
 80080c6:	bd70      	pop	{r4, r5, r6, pc}
 80080c8:	48001400 	.word	0x48001400

080080cc <BSP_ISM330DHCX_ReadReg>:

static int32_t BSP_ISM330DHCX_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 80080cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
  uint8_t dataReg = (uint8_t)Reg;

  dataReg |= 0x80U;
 80080ce:	f061 017f 	orn	r1, r1, #127	; 0x7f
{
 80080d2:	4616      	mov	r6, r2
  dataReg |= 0x80U;
 80080d4:	f88d 1007 	strb.w	r1, [sp, #7]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 80080d8:	2200      	movs	r2, #0
 80080da:	4810      	ldr	r0, [pc, #64]	; (800811c <BSP_ISM330DHCX_ReadReg+0x50>)
 80080dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{
 80080e0:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 80080e2:	f002 fb03 	bl	800a6ec <HAL_GPIO_WritePin>

  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 80080e6:	2101      	movs	r1, #1
 80080e8:	f10d 0007 	add.w	r0, sp, #7
 80080ec:	f7ff fcc6 	bl	8007a7c <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 80080f0:	4621      	mov	r1, r4
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80080f2:	2801      	cmp	r0, #1
  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 80080f4:	4630      	mov	r0, r6
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80080f6:	bf14      	ite	ne
 80080f8:	f06f 0505 	mvnne.w	r5, #5
 80080fc:	2500      	moveq	r5, #0
  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 80080fe:	f7ff fccf 	bl	8007aa0 <BSP_SPI3_Recv>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8008102:	2201      	movs	r2, #1
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008104:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8008106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800810a:	4804      	ldr	r0, [pc, #16]	; (800811c <BSP_ISM330DHCX_ReadReg+0x50>)
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800810c:	bf18      	it	ne
 800810e:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8008112:	f002 faeb 	bl	800a6ec <HAL_GPIO_WritePin>

  return ret;
}
 8008116:	4628      	mov	r0, r5
 8008118:	b002      	add	sp, #8
 800811a:	bd70      	pop	{r4, r5, r6, pc}
 800811c:	48001400 	.word	0x48001400

08008120 <BSP_ISM330DHCX_DeInit>:
{
 8008120:	b508      	push	{r3, lr}
  if(BSP_SPI3_DeInit() == BSP_ERROR_NONE)
 8008122:	f7ff fc91 	bl	8007a48 <BSP_SPI3_DeInit>
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008126:	2800      	cmp	r0, #0
}
 8008128:	bf18      	it	ne
 800812a:	f06f 0005 	mvnne.w	r0, #5
 800812e:	bd08      	pop	{r3, pc}

08008130 <BSP_ISM330DHCX_Init>:
{
 8008130:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8008132:	2201      	movs	r2, #1
{
 8008134:	b089      	sub	sp, #36	; 0x24
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8008136:	4823      	ldr	r0, [pc, #140]	; (80081c4 <BSP_ISM330DHCX_Init+0x94>)
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8008138:	4d23      	ldr	r5, [pc, #140]	; (80081c8 <BSP_ISM330DHCX_Init+0x98>)
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 800813a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800813e:	f002 fad5 	bl	800a6ec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008142:	2700      	movs	r7, #0
 8008144:	2303      	movs	r3, #3
 8008146:	e9cd 7305 	strd	r7, r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800814a:	2601      	movs	r6, #1
 800814c:	9604      	str	r6, [sp, #16]
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 800814e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8008150:	481c      	ldr	r0, [pc, #112]	; (80081c4 <BSP_ISM330DHCX_Init+0x94>)
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8008152:	f043 0320 	orr.w	r3, r3, #32
 8008156:	64eb      	str	r3, [r5, #76]	; 0x4c
 8008158:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800815a:	f003 0320 	and.w	r3, r3, #32
 800815e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 8008160:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8008164:	a903      	add	r1, sp, #12
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8008166:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 8008168:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 800816a:	f002 f94d 	bl	800a408 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 800816e:	4632      	mov	r2, r6
 8008170:	4621      	mov	r1, r4
 8008172:	4814      	ldr	r0, [pc, #80]	; (80081c4 <BSP_ISM330DHCX_Init+0x94>)
 8008174:	f002 faba 	bl	800a6ec <HAL_GPIO_WritePin>
  if(BSP_SPI3_Init() == BSP_ERROR_NONE)
 8008178:	f7ff fd42 	bl	8007c00 <BSP_SPI3_Init>
  BSP_ISM330DHCX_INT2_GPIO_CLK_ENABLE();
 800817c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800817e:	f043 0320 	orr.w	r3, r3, #32
 8008182:	64eb      	str	r3, [r5, #76]	; 0x4c
 8008184:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	9302      	str	r3, [sp, #8]
 800818c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800818e:	4b0f      	ldr	r3, [pc, #60]	; (80081cc <BSP_ISM330DHCX_Init+0x9c>)
 8008190:	2210      	movs	r2, #16
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008192:	1e04      	subs	r4, r0, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008194:	e9cd 2303 	strd	r2, r3, [sp, #12]
  HAL_GPIO_Init(BSP_ISM330DHCX_INT2_PORT, &GPIO_InitStruct);
 8008198:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800819a:	f04f 0302 	mov.w	r3, #2
  HAL_GPIO_Init(BSP_ISM330DHCX_INT2_PORT, &GPIO_InitStruct);
 800819e:	4809      	ldr	r0, [pc, #36]	; (80081c4 <BSP_ISM330DHCX_Init+0x94>)
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80081a0:	bf18      	it	ne
 80081a2:	f06f 0405 	mvnne.w	r4, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081a6:	e9cd 7305 	strd	r7, r3, [sp, #20]
  HAL_GPIO_Init(BSP_ISM330DHCX_INT2_PORT, &GPIO_InitStruct);
 80081aa:	f002 f92d 	bl	800a408 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(BSP_ISM330DHCX_INT2_EXTI_IRQn, BSP_ISM330DHCX_INT2_EXTI_IRQ_PP, BSP_ISM330DHCX_INT2_EXTI_IRQ_SP);
 80081ae:	463a      	mov	r2, r7
 80081b0:	4631      	mov	r1, r6
 80081b2:	200a      	movs	r0, #10
 80081b4:	f001 f95e 	bl	8009474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BSP_ISM330DHCX_INT2_EXTI_IRQn);
 80081b8:	200a      	movs	r0, #10
 80081ba:	f001 f98d 	bl	80094d8 <HAL_NVIC_EnableIRQ>
}
 80081be:	4620      	mov	r0, r4
 80081c0:	b009      	add	sp, #36	; 0x24
 80081c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081c4:	48001400 	.word	0x48001400
 80081c8:	40021000 	.word	0x40021000
 80081cc:	10110000 	.word	0x10110000

080081d0 <BSP_MOTION_SENSOR_Init>:
{
 80081d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d4:	460e      	mov	r6, r1
 80081d6:	b090      	sub	sp, #64	; 0x40
  switch (Instance)
 80081d8:	4605      	mov	r5, r0
 80081da:	b130      	cbz	r0, 80081ea <BSP_MOTION_SENSOR_Init+0x1a>
 80081dc:	2801      	cmp	r0, #1
 80081de:	d060      	beq.n	80082a2 <BSP_MOTION_SENSOR_Init+0xd2>
 80081e0:	f06f 0001 	mvn.w	r0, #1
}
 80081e4:	b010      	add	sp, #64	; 0x40
 80081e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  io_ctx.Address     = IIS2MDC_I2C_ADD;
 80081ea:	233d      	movs	r3, #61	; 0x3d
 80081ec:	f88d 3014 	strb.w	r3, [sp, #20]
  io_ctx.Init        = BSP_I2C2_Init;
 80081f0:	4b7d      	ldr	r3, [pc, #500]	; (80083e8 <BSP_MOTION_SENSOR_Init+0x218>)
 80081f2:	9302      	str	r3, [sp, #8]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 80081f4:	4b7d      	ldr	r3, [pc, #500]	; (80083ec <BSP_MOTION_SENSOR_Init+0x21c>)
  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 80081f6:	4c7e      	ldr	r4, [pc, #504]	; (80083f0 <BSP_MOTION_SENSOR_Init+0x220>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 80081f8:	9303      	str	r3, [sp, #12]
  io_ctx.ReadReg     = BSP_IIS2MDC_ReadReg;
 80081fa:	4b7e      	ldr	r3, [pc, #504]	; (80083f4 <BSP_MOTION_SENSOR_Init+0x224>)
 80081fc:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = BSP_IIS2MDC_WriteReg;
 80081fe:	4b7e      	ldr	r3, [pc, #504]	; (80083f8 <BSP_MOTION_SENSOR_Init+0x228>)
  io_ctx.BusType     = IIS2MDC_I2C_BUS; /* I2C */
 8008200:	9004      	str	r0, [sp, #16]
  io_ctx.WriteReg    = BSP_IIS2MDC_WriteReg;
 8008202:	9306      	str	r3, [sp, #24]
  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8008204:	a902      	add	r1, sp, #8
  io_ctx.GetTick     = BSP_GetTick;
 8008206:	4b7d      	ldr	r3, [pc, #500]	; (80083fc <BSP_MOTION_SENSOR_Init+0x22c>)
 8008208:	9308      	str	r3, [sp, #32]
  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 800820a:	4620      	mov	r0, r4
 800820c:	f7fd fa4c 	bl	80056a8 <IIS2MDC_RegisterBusIO>
 8008210:	b110      	cbz	r0, 8008218 <BSP_MOTION_SENSOR_Init+0x48>
        return BSP_ERROR_NO_INIT;
 8008212:	f04f 30ff 	mov.w	r0, #4294967295
 8008216:	e7e5      	b.n	80081e4 <BSP_MOTION_SENSOR_Init+0x14>
  else if (IIS2MDC_ReadID(&iis2mdc_obj_0, &id) != IIS2MDC_OK)
 8008218:	f10d 0107 	add.w	r1, sp, #7
 800821c:	4620      	mov	r0, r4
 800821e:	f7fd f96f 	bl	8005500 <IIS2MDC_ReadID>
 8008222:	4607      	mov	r7, r0
 8008224:	2800      	cmp	r0, #0
 8008226:	d1f4      	bne.n	8008212 <BSP_MOTION_SENSOR_Init+0x42>
  else if (id != IIS2MDC_ID)
 8008228:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800822c:	2b40      	cmp	r3, #64	; 0x40
 800822e:	d1f0      	bne.n	8008212 <BSP_MOTION_SENSOR_Init+0x42>
    (void)IIS2MDC_GetCapabilities(&iis2mdc_obj_0, &cap);
 8008230:	a909      	add	r1, sp, #36	; 0x24
 8008232:	4620      	mov	r0, r4
 8008234:	f7fd f900 	bl	8005438 <IIS2MDC_GetCapabilities>
    MotionCtx[IIS2MDC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008238:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800823c:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
    MotionCompObj[IIS2MDC_0] = &iis2mdc_obj_0;
 8008240:	6364      	str	r4, [r4, #52]	; 0x34
    MotionCtx[IIS2MDC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008242:	0093      	lsls	r3, r2, #2
 8008244:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8008248:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 800824c:	430b      	orrs	r3, r1
 800824e:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8008250:	0771      	lsls	r1, r6, #29
    MotionDrv[IIS2MDC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2MDC_COMMON_Driver;
 8008252:	4b6b      	ldr	r3, [pc, #428]	; (8008400 <BSP_MOTION_SENSOR_Init+0x230>)
 8008254:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8008256:	d50a      	bpl.n	800826e <BSP_MOTION_SENSOR_Init+0x9e>
 8008258:	2a01      	cmp	r2, #1
 800825a:	d108      	bne.n	800826e <BSP_MOTION_SENSOR_Init+0x9e>
      MotionFuncDrv[IIS2MDC_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS2MDC_MAG_Driver;
 800825c:	4a69      	ldr	r2, [pc, #420]	; (8008404 <BSP_MOTION_SENSOR_Init+0x234>)
      if (MotionDrv[IIS2MDC_0]->Init(MotionCompObj[IIS2MDC_0]) != IIS2MDC_OK)
 800825e:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[IIS2MDC_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS2MDC_MAG_Driver;
 8008260:	64e2      	str	r2, [r4, #76]	; 0x4c
      if (MotionDrv[IIS2MDC_0]->Init(MotionCompObj[IIS2MDC_0]) != IIS2MDC_OK)
 8008262:	4620      	mov	r0, r4
 8008264:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008266:	2800      	cmp	r0, #0
 8008268:	bf18      	it	ne
 800826a:	f06f 0704 	mvnne.w	r7, #4
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 800826e:	07f3      	lsls	r3, r6, #31
 8008270:	d505      	bpl.n	800827e <BSP_MOTION_SENSOR_Init+0xae>
 8008272:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008276:	2b00      	cmp	r3, #0
 8008278:	bf08      	it	eq
 800827a:	f06f 0704 	mvneq.w	r7, #4
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc== 0U))
 800827e:	07b0      	lsls	r0, r6, #30
 8008280:	d503      	bpl.n	800828a <BSP_MOTION_SENSOR_Init+0xba>
 8008282:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0c3      	beq.n	8008212 <BSP_MOTION_SENSOR_Init+0x42>
      if (IIS2MDC_0_Probe(Functions) != BSP_ERROR_NONE)
 800828a:	2f00      	cmp	r7, #0
 800828c:	d1c1      	bne.n	8008212 <BSP_MOTION_SENSOR_Init+0x42>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800828e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008290:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	a909      	add	r1, sp, #36	; 0x24
 8008296:	4798      	blx	r3
 8008298:	2800      	cmp	r0, #0
 800829a:	d06d      	beq.n	8008378 <BSP_MOTION_SENSOR_Init+0x1a8>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800829c:	f06f 0006 	mvn.w	r0, #6
 80082a0:	e7a0      	b.n	80081e4 <BSP_MOTION_SENSOR_Init+0x14>
  io_ctx.Address     = 0x0;
 80082a2:	2300      	movs	r3, #0
 80082a4:	f88d 3014 	strb.w	r3, [sp, #20]
  io_ctx.Init        = BSP_ISM330DHCX_Init;
 80082a8:	4b57      	ldr	r3, [pc, #348]	; (8008408 <BSP_MOTION_SENSOR_Init+0x238>)
  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 80082aa:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80083f0 <BSP_MOTION_SENSOR_Init+0x220>
  io_ctx.Init        = BSP_ISM330DHCX_Init;
 80082ae:	9302      	str	r3, [sp, #8]
  io_ctx.DeInit      = BSP_ISM330DHCX_DeInit;
 80082b0:	4b56      	ldr	r3, [pc, #344]	; (800840c <BSP_MOTION_SENSOR_Init+0x23c>)
 80082b2:	9303      	str	r3, [sp, #12]
  io_ctx.ReadReg     = BSP_ISM330DHCX_ReadReg;
 80082b4:	4b56      	ldr	r3, [pc, #344]	; (8008410 <BSP_MOTION_SENSOR_Init+0x240>)
 80082b6:	9307      	str	r3, [sp, #28]
  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 80082b8:	f108 075c 	add.w	r7, r8, #92	; 0x5c
  io_ctx.WriteReg    = BSP_ISM330DHCX_WriteReg;
 80082bc:	4b55      	ldr	r3, [pc, #340]	; (8008414 <BSP_MOTION_SENSOR_Init+0x244>)
  io_ctx.BusType     = ISM330DHCX_SPI_4WIRES_BUS; /* SPI 4-Wires */
 80082be:	9004      	str	r0, [sp, #16]
  io_ctx.WriteReg    = BSP_ISM330DHCX_WriteReg;
 80082c0:	9306      	str	r3, [sp, #24]
  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 80082c2:	a902      	add	r1, sp, #8
  io_ctx.GetTick     = BSP_GetTick;
 80082c4:	4b4d      	ldr	r3, [pc, #308]	; (80083fc <BSP_MOTION_SENSOR_Init+0x22c>)
 80082c6:	9308      	str	r3, [sp, #32]
  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 80082c8:	4638      	mov	r0, r7
 80082ca:	f012 fa05 	bl	801a6d8 <ISM330DHCX_RegisterBusIO>
 80082ce:	2800      	cmp	r0, #0
 80082d0:	d19f      	bne.n	8008212 <BSP_MOTION_SENSOR_Init+0x42>
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 80082d2:	f10d 0107 	add.w	r1, sp, #7
 80082d6:	4638      	mov	r0, r7
 80082d8:	f011 ffb4 	bl	801a244 <ISM330DHCX_ReadID>
 80082dc:	4604      	mov	r4, r0
 80082de:	2800      	cmp	r0, #0
 80082e0:	d197      	bne.n	8008212 <BSP_MOTION_SENSOR_Init+0x42>
  else if (id != ISM330DHCX_ID)
 80082e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80082e6:	2b6b      	cmp	r3, #107	; 0x6b
 80082e8:	d193      	bne.n	8008212 <BSP_MOTION_SENSOR_Init+0x42>
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 80082ea:	a909      	add	r1, sp, #36	; 0x24
 80082ec:	4638      	mov	r0, r7
 80082ee:	f011 fd9b 	bl	8019e28 <ISM330DHCX_GetCapabilities>
    MotionCtx[ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80082f2:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 80082f6:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    MotionCompObj[ISM330DHCX_0] = &ism330dhcx_obj_0;
 80082fa:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
    MotionCtx[ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80082fe:	0053      	lsls	r3, r2, #1
 8008300:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8008304:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 8008308:	430b      	orrs	r3, r1
 800830a:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800830e:	07b1      	lsls	r1, r6, #30
    MotionDrv[ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 8008310:	4b41      	ldr	r3, [pc, #260]	; (8008418 <BSP_MOTION_SENSOR_Init+0x248>)
 8008312:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008316:	d50b      	bpl.n	8008330 <BSP_MOTION_SENSOR_Init+0x160>
 8008318:	2a01      	cmp	r2, #1
 800831a:	d109      	bne.n	8008330 <BSP_MOTION_SENSOR_Init+0x160>
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_ACC_Driver;
 800831c:	4a3f      	ldr	r2, [pc, #252]	; (800841c <BSP_MOTION_SENSOR_Init+0x24c>)
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 800831e:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_ACC_Driver;
 8008320:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8008324:	4638      	mov	r0, r7
 8008326:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008328:	2800      	cmp	r0, #0
 800832a:	bf18      	it	ne
 800832c:	f06f 0404 	mvnne.w	r4, #4
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8008330:	07f2      	lsls	r2, r6, #31
 8008332:	d510      	bpl.n	8008356 <BSP_MOTION_SENSOR_Init+0x186>
 8008334:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8008338:	2b01      	cmp	r3, #1
 800833a:	d10c      	bne.n	8008356 <BSP_MOTION_SENSOR_Init+0x186>
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 800833c:	4b38      	ldr	r3, [pc, #224]	; (8008420 <BSP_MOTION_SENSOR_Init+0x250>)
 800833e:	f8c8 3050 	str.w	r3, [r8, #80]	; 0x50
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8008342:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8008346:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800834e:	1e04      	subs	r4, r0, #0
 8008350:	bf18      	it	ne
 8008352:	f06f 0404 	mvnne.w	r4, #4
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8008356:	0773      	lsls	r3, r6, #29
 8008358:	d504      	bpl.n	8008364 <BSP_MOTION_SENSOR_Init+0x194>
 800835a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800835e:	2b00      	cmp	r3, #0
 8008360:	f43f af57 	beq.w	8008212 <BSP_MOTION_SENSOR_Init+0x42>
      if (ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 8008364:	2c00      	cmp	r4, #0
 8008366:	f47f af54 	bne.w	8008212 <BSP_MOTION_SENSOR_Init+0x42>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800836a:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 800836e:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	a909      	add	r1, sp, #36	; 0x24
 8008376:	e78e      	b.n	8008296 <BSP_MOTION_SENSOR_Init+0xc6>
      if (cap.Acc == 1U)
 8008378:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        component_functions |= MOTION_ACCELERO;
 800837c:	2b01      	cmp	r3, #1
      if (cap.Gyro == 1U)
 800837e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
        component_functions |= MOTION_ACCELERO;
 8008382:	bf0c      	ite	eq
 8008384:	2702      	moveq	r7, #2
 8008386:	2700      	movne	r7, #0
      if (cap.Gyro == 1U)
 8008388:	2b01      	cmp	r3, #1
      if (cap.Magneto == 1U)
 800838a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
        component_functions |= MOTION_GYRO;
 800838e:	bf08      	it	eq
 8008390:	f047 0701 	orreq.w	r7, r7, #1
      if (cap.Magneto == 1U)
 8008394:	2b01      	cmp	r3, #1
 8008396:	d101      	bne.n	800839c <BSP_MOTION_SENSOR_Init+0x1cc>
        component_functions |= MOTION_MAGNETO;
 8008398:	f047 0704 	orr.w	r7, r7, #4
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800839c:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80083f0 <BSP_MOTION_SENSOR_Init+0x220>
        component_functions |= MOTION_ACCELERO;
 80083a0:	2403      	movs	r4, #3
 80083a2:	f04f 0801 	mov.w	r8, #1
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80083a6:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80083aa:	ea38 0306 	bics.w	r3, r8, r6
 80083ae:	d005      	beq.n	80083bc <BSP_MOTION_SENSOR_Init+0x1ec>
  for (i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 80083b0:	3c01      	subs	r4, #1
    function = function << 1;
 80083b2:	ea4f 0848 	mov.w	r8, r8, lsl #1
  for (i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 80083b6:	d1f8      	bne.n	80083aa <BSP_MOTION_SENSOR_Init+0x1da>
 80083b8:	4620      	mov	r0, r4
 80083ba:	e713      	b.n	80081e4 <BSP_MOTION_SENSOR_Init+0x14>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80083bc:	ea38 0307 	bics.w	r3, r8, r7
 80083c0:	d1f6      	bne.n	80083b0 <BSP_MOTION_SENSOR_Init+0x1e0>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80083c2:	4a18      	ldr	r2, [pc, #96]	; (8008424 <BSP_MOTION_SENSOR_Init+0x254>)
 80083c4:	f8da 0034 	ldr.w	r0, [sl, #52]	; 0x34
 80083c8:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 80083cc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80083d0:	4413      	add	r3, r2
 80083d2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80083d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4798      	blx	r3
 80083dc:	2800      	cmp	r0, #0
 80083de:	d0e7      	beq.n	80083b0 <BSP_MOTION_SENSOR_Init+0x1e0>
        return BSP_ERROR_COMPONENT_FAILURE;
 80083e0:	f06f 0004 	mvn.w	r0, #4
 80083e4:	e6fe      	b.n	80081e4 <BSP_MOTION_SENSOR_Init+0x14>
 80083e6:	bf00      	nop
 80083e8:	08007cd1 	.word	0x08007cd1
 80083ec:	08007995 	.word	0x08007995
 80083f0:	20001138 	.word	0x20001138
 80083f4:	08008069 	.word	0x08008069
 80083f8:	08008059 	.word	0x08008059
 80083fc:	08007ac5 	.word	0x08007ac5
 8008400:	2000005c 	.word	0x2000005c
 8008404:	20000038 	.word	0x20000038
 8008408:	08008131 	.word	0x08008131
 800840c:	08008121 	.word	0x08008121
 8008410:	080080cd 	.word	0x080080cd
 8008414:	0800807d 	.word	0x0800807d
 8008418:	200005ec 	.word	0x200005ec
 800841c:	200005c8 	.word	0x200005c8
 8008420:	200005a4 	.word	0x200005a4
 8008424:	08021898 	.word	0x08021898

08008428 <BSP_MOTION_SENSOR_GetAxes>:
  if (Instance >= MOTION_INSTANCES_NBR)
 8008428:	2801      	cmp	r0, #1
{
 800842a:	b570      	push	{r4, r5, r6, lr}
 800842c:	460c      	mov	r4, r1
 800842e:	4611      	mov	r1, r2
  if (Instance >= MOTION_INSTANCES_NBR)
 8008430:	d818      	bhi.n	8008464 <BSP_MOTION_SENSOR_GetAxes+0x3c>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008432:	4b0e      	ldr	r3, [pc, #56]	; (800846c <BSP_MOTION_SENSOR_GetAxes+0x44>)
 8008434:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8008438:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800843a:	ea04 0605 	and.w	r6, r4, r5
 800843e:	43ac      	bics	r4, r5
 8008440:	d110      	bne.n	8008464 <BSP_MOTION_SENSOR_GetAxes+0x3c>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8008442:	4c0b      	ldr	r4, [pc, #44]	; (8008470 <BSP_MOTION_SENSOR_GetAxes+0x48>)
 8008444:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 8008448:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800844c:	4420      	add	r0, r4
 800844e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008452:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008454:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800845a:	2800      	cmp	r0, #0
 800845c:	bf18      	it	ne
 800845e:	f06f 0004 	mvnne.w	r0, #4
}
 8008462:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8008464:	f06f 0001 	mvn.w	r0, #1
 8008468:	e7fb      	b.n	8008462 <BSP_MOTION_SENSOR_GetAxes+0x3a>
 800846a:	bf00      	nop
 800846c:	20001138 	.word	0x20001138
 8008470:	08021898 	.word	0x08021898

08008474 <BSP_MOTION_SENSOR_GetSensitivity>:
  if (Instance >= MOTION_INSTANCES_NBR)
 8008474:	2801      	cmp	r0, #1
{
 8008476:	b570      	push	{r4, r5, r6, lr}
 8008478:	460c      	mov	r4, r1
 800847a:	4611      	mov	r1, r2
  if (Instance >= MOTION_INSTANCES_NBR)
 800847c:	d818      	bhi.n	80084b0 <BSP_MOTION_SENSOR_GetSensitivity+0x3c>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800847e:	4b0e      	ldr	r3, [pc, #56]	; (80084b8 <BSP_MOTION_SENSOR_GetSensitivity+0x44>)
 8008480:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8008484:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8008486:	ea04 0605 	and.w	r6, r4, r5
 800848a:	43ac      	bics	r4, r5
 800848c:	d110      	bne.n	80084b0 <BSP_MOTION_SENSOR_GetSensitivity+0x3c>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetSensitivity(MotionCompObj[Instance],
 800848e:	4c0b      	ldr	r4, [pc, #44]	; (80084bc <BSP_MOTION_SENSOR_GetSensitivity+0x48>)
 8008490:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 8008494:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8008498:	4420      	add	r0, r4
 800849a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800849e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80084a0:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80084a6:	2800      	cmp	r0, #0
 80084a8:	bf18      	it	ne
 80084aa:	f06f 0004 	mvnne.w	r0, #4
}
 80084ae:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80084b0:	f06f 0001 	mvn.w	r0, #1
 80084b4:	e7fb      	b.n	80084ae <BSP_MOTION_SENSOR_GetSensitivity+0x3a>
 80084b6:	bf00      	nop
 80084b8:	20001138 	.word	0x20001138
 80084bc:	08021898 	.word	0x08021898

080084c0 <BSP_MOTION_SENSOR_SetOutputDataRate>:
  if (Instance >= MOTION_INSTANCES_NBR)
 80084c0:	2801      	cmp	r0, #1
{
 80084c2:	b538      	push	{r3, r4, r5, lr}
  if (Instance >= MOTION_INSTANCES_NBR)
 80084c4:	d818      	bhi.n	80084f8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x38>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80084c6:	4b0e      	ldr	r3, [pc, #56]	; (8008500 <BSP_MOTION_SENSOR_SetOutputDataRate+0x40>)
 80084c8:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80084cc:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80084ce:	ea01 0504 	and.w	r5, r1, r4
 80084d2:	43a1      	bics	r1, r4
 80084d4:	d110      	bne.n	80084f8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x38>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80084d6:	490b      	ldr	r1, [pc, #44]	; (8008504 <BSP_MOTION_SENSOR_SetOutputDataRate+0x44>)
 80084d8:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 80084dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80084e0:	4408      	add	r0, r1
 80084e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80084e6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80084e8:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80084ee:	2800      	cmp	r0, #0
 80084f0:	bf18      	it	ne
 80084f2:	f06f 0004 	mvnne.w	r0, #4
}
 80084f6:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80084f8:	f06f 0001 	mvn.w	r0, #1
 80084fc:	e7fb      	b.n	80084f6 <BSP_MOTION_SENSOR_SetOutputDataRate+0x36>
 80084fe:	bf00      	nop
 8008500:	20001138 	.word	0x20001138
 8008504:	08021898 	.word	0x08021898

08008508 <BSP_MOTION_SENSOR_SetFullScale>:
  if (Instance >= MOTION_INSTANCES_NBR)
 8008508:	2801      	cmp	r0, #1
{
 800850a:	b570      	push	{r4, r5, r6, lr}
 800850c:	460c      	mov	r4, r1
 800850e:	4611      	mov	r1, r2
  if (Instance >= MOTION_INSTANCES_NBR)
 8008510:	d818      	bhi.n	8008544 <BSP_MOTION_SENSOR_SetFullScale+0x3c>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008512:	4b0e      	ldr	r3, [pc, #56]	; (800854c <BSP_MOTION_SENSOR_SetFullScale+0x44>)
 8008514:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8008518:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800851a:	ea04 0605 	and.w	r6, r4, r5
 800851e:	43ac      	bics	r4, r5
 8008520:	d110      	bne.n	8008544 <BSP_MOTION_SENSOR_SetFullScale+0x3c>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 8008522:	4c0b      	ldr	r4, [pc, #44]	; (8008550 <BSP_MOTION_SENSOR_SetFullScale+0x48>)
 8008524:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 8008528:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800852c:	4420      	add	r0, r4
 800852e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008532:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008534:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800853a:	2800      	cmp	r0, #0
 800853c:	bf18      	it	ne
 800853e:	f06f 0004 	mvnne.w	r0, #4
}
 8008542:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8008544:	f06f 0001 	mvn.w	r0, #1
 8008548:	e7fb      	b.n	8008542 <BSP_MOTION_SENSOR_SetFullScale+0x3a>
 800854a:	bf00      	nop
 800854c:	20001138 	.word	0x20001138
 8008550:	08021898 	.word	0x08021898

08008554 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008554:	490f      	ldr	r1, [pc, #60]	; (8008594 <SystemInit+0x40>)
 8008556:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800855a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800855e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008562:	4b0d      	ldr	r3, [pc, #52]	; (8008598 <SystemInit+0x44>)
 8008564:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008566:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8008568:	f042 0201 	orr.w	r2, r2, #1
 800856c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800856e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8008576:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800857a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800857c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008580:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008588:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800858a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800858c:	4b03      	ldr	r3, [pc, #12]	; (800859c <SystemInit+0x48>)
 800858e:	608b      	str	r3, [r1, #8]
#endif
}
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	e000ed00 	.word	0xe000ed00
 8008598:	40021000 	.word	0x40021000
 800859c:	08004000 	.word	0x08004000

080085a0 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80085a0:	4770      	bx	lr
	...

080085a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80085a4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80085a6:	4e0f      	ldr	r6, [pc, #60]	; (80085e4 <HAL_InitTick+0x40>)
{
 80085a8:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80085aa:	7830      	ldrb	r0, [r6, #0]
 80085ac:	b908      	cbnz	r0, 80085b2 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80085ae:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80085b0:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80085b2:	4a0d      	ldr	r2, [pc, #52]	; (80085e8 <HAL_InitTick+0x44>)
 80085b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80085b8:	fbb3 f3f0 	udiv	r3, r3, r0
 80085bc:	6810      	ldr	r0, [r2, #0]
 80085be:	fbb0 f0f3 	udiv	r0, r0, r3
 80085c2:	f000 ffbd 	bl	8009540 <HAL_SYSTICK_Config>
 80085c6:	4604      	mov	r4, r0
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d1f0      	bne.n	80085ae <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80085cc:	2d0f      	cmp	r5, #15
 80085ce:	d8ee      	bhi.n	80085ae <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80085d0:	4602      	mov	r2, r0
 80085d2:	4629      	mov	r1, r5
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295
 80085d8:	f000 ff4c 	bl	8009474 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80085dc:	6075      	str	r5, [r6, #4]
 80085de:	4620      	mov	r0, r4
 80085e0:	e7e6      	b.n	80085b0 <HAL_InitTick+0xc>
 80085e2:	bf00      	nop
 80085e4:	200000a8 	.word	0x200000a8
 80085e8:	200000a4 	.word	0x200000a4

080085ec <HAL_Init>:
{
 80085ec:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80085ee:	2003      	movs	r0, #3
 80085f0:	f000 ff2e 	bl	8009450 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80085f4:	2000      	movs	r0, #0
 80085f6:	f7ff ffd5 	bl	80085a4 <HAL_InitTick>
 80085fa:	4604      	mov	r4, r0
 80085fc:	b918      	cbnz	r0, 8008606 <HAL_Init+0x1a>
    HAL_MspInit();
 80085fe:	f7ff ffcf 	bl	80085a0 <HAL_MspInit>
}
 8008602:	4620      	mov	r0, r4
 8008604:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8008606:	2401      	movs	r4, #1
 8008608:	e7fb      	b.n	8008602 <HAL_Init+0x16>
	...

0800860c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800860c:	4a03      	ldr	r2, [pc, #12]	; (800861c <HAL_IncTick+0x10>)
 800860e:	4b04      	ldr	r3, [pc, #16]	; (8008620 <HAL_IncTick+0x14>)
 8008610:	6811      	ldr	r1, [r2, #0]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	440b      	add	r3, r1
 8008616:	6013      	str	r3, [r2, #0]
}
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	200011c4 	.word	0x200011c4
 8008620:	200000a8 	.word	0x200000a8

08008624 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008624:	4b01      	ldr	r3, [pc, #4]	; (800862c <HAL_GetTick+0x8>)
 8008626:	6818      	ldr	r0, [r3, #0]
}
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	200011c4 	.word	0x200011c4

08008630 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return STM32L4XX_HAL_VERSION;
}
 8008630:	4800      	ldr	r0, [pc, #0]	; (8008634 <HAL_GetHalVersion+0x4>)
 8008632:	4770      	bx	lr
 8008634:	010d0000 	.word	0x010d0000

08008638 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008638:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800863a:	0dcc      	lsrs	r4, r1, #23
 800863c:	f004 0404 	and.w	r4, r4, #4
 8008640:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8008642:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8008646:	5823      	ldr	r3, [r4, r0]
 8008648:	2507      	movs	r5, #7
 800864a:	408d      	lsls	r5, r1
 800864c:	ea23 0305 	bic.w	r3, r3, r5
 8008650:	fa02 f101 	lsl.w	r1, r2, r1
 8008654:	430b      	orrs	r3, r1
 8008656:	5023      	str	r3, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008658:	bd30      	pop	{r4, r5, pc}

0800865a <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800865a:	6880      	ldr	r0, [r0, #8]
}
 800865c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8008660:	4770      	bx	lr
	...

08008664 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008664:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008666:	2300      	movs	r3, #0
 8008668:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800866a:	4604      	mov	r4, r0
 800866c:	2800      	cmp	r0, #0
 800866e:	f000 80c1 	beq.w	80087f4 <HAL_ADC_Init+0x190>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008672:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8008674:	b925      	cbnz	r5, 8008680 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008676:	f7fe f867 	bl	8006748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800867a:	65e5      	str	r5, [r4, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800867c:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008680:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008682:	6883      	ldr	r3, [r0, #8]
 8008684:	009b      	lsls	r3, r3, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008686:	bf41      	itttt	mi
 8008688:	6883      	ldrmi	r3, [r0, #8]
 800868a:	f023 4320 	bicmi.w	r3, r3, #2684354560	; 0xa0000000
 800868e:	f023 033f 	bicmi.w	r3, r3, #63	; 0x3f
 8008692:	6083      	strmi	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008694:	6883      	ldr	r3, [r0, #8]
 8008696:	00dd      	lsls	r5, r3, #3
 8008698:	f140 808c 	bpl.w	80087b4 <HAL_ADC_Init+0x150>
 800869c:	6883      	ldr	r3, [r0, #8]
 800869e:	00d9      	lsls	r1, r3, #3
 80086a0:	f100 809f 	bmi.w	80087e2 <HAL_ADC_Init+0x17e>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80086a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086a6:	f043 0310 	orr.w	r3, r3, #16
 80086aa:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80086ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80086ae:	f043 0301 	orr.w	r3, r3, #1
 80086b2:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80086b4:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80086b6:	f7ff ffd0 	bl	800865a <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80086ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086bc:	f003 0310 	and.w	r3, r3, #16
 80086c0:	4303      	orrs	r3, r0
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80086c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80086c4:	f040 8093 	bne.w	80087ee <HAL_ADC_Init+0x18a>
    ADC_STATE_CLR_SET(hadc->State,
 80086c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80086cc:	f043 0302 	orr.w	r3, r3, #2
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80086d0:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80086d2:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80086d4:	6883      	ldr	r3, [r0, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80086d6:	07da      	lsls	r2, r3, #31
 80086d8:	d40a      	bmi.n	80086f0 <HAL_ADC_Init+0x8c>
 80086da:	4b47      	ldr	r3, [pc, #284]	; (80087f8 <HAL_ADC_Init+0x194>)
 80086dc:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80086de:	07db      	lsls	r3, r3, #31
 80086e0:	d406      	bmi.n	80086f0 <HAL_ADC_Init+0x8c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80086e2:	4a46      	ldr	r2, [pc, #280]	; (80087fc <HAL_ADC_Init+0x198>)
 80086e4:	6865      	ldr	r5, [r4, #4]
 80086e6:	6893      	ldr	r3, [r2, #8]
 80086e8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80086ec:	432b      	orrs	r3, r5
 80086ee:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80086f0:	68e5      	ldr	r5, [r4, #12]
 80086f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80086f4:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 80086f8:	432b      	orrs	r3, r5
 80086fa:	68a5      	ldr	r5, [r4, #8]
 80086fc:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80086fe:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008700:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 8008702:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008706:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800870a:	bf02      	ittt	eq
 800870c:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 800870e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8008712:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008716:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008718:	b122      	cbz	r2, 8008724 <HAL_ADC_Init+0xc0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 800871a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800871c:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8008720:	432a      	orrs	r2, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008722:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008724:	68c5      	ldr	r5, [r0, #12]
 8008726:	4a36      	ldr	r2, [pc, #216]	; (8008800 <HAL_ADC_Init+0x19c>)
 8008728:	402a      	ands	r2, r5
 800872a:	4313      	orrs	r3, r2
 800872c:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800872e:	f7ff ff94 	bl	800865a <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008732:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	f002 0208 	and.w	r2, r2, #8
 800873a:	4302      	orrs	r2, r0
 800873c:	d122      	bne.n	8008784 <HAL_ADC_Init+0x120>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800873e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008742:	7e25      	ldrb	r5, [r4, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008744:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008746:	0052      	lsls	r2, r2, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008748:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 800874c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800874e:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008752:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008754:	f020 0006 	bic.w	r0, r0, #6
 8008758:	4302      	orrs	r2, r0
 800875a:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800875c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8008760:	2a01      	cmp	r2, #1
 8008762:	d140      	bne.n	80087e6 <HAL_ADC_Init+0x182>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008764:	e9d4 250f 	ldrd	r2, r5, [r4, #60]	; 0x3c
 8008768:	6918      	ldr	r0, [r3, #16]
 800876a:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 800876e:	f020 0004 	bic.w	r0, r0, #4
 8008772:	432a      	orrs	r2, r5
 8008774:	4302      	orrs	r2, r0
 8008776:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008778:	4302      	orrs	r2, r0
 800877a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800877c:	4302      	orrs	r2, r0
 800877e:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008782:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008784:	6922      	ldr	r2, [r4, #16]
 8008786:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008788:	bf05      	ittet	eq
 800878a:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 800878c:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800878e:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008790:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8008794:	bf06      	itte	eq
 8008796:	f020 000f 	biceq.w	r0, r0, #15
 800879a:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800879c:	f022 020f 	bicne.w	r2, r2, #15
 80087a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80087a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087a4:	f023 0303 	bic.w	r3, r3, #3
 80087a8:	f043 0301 	orr.w	r3, r3, #1
 80087ac:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80087ae:	4608      	mov	r0, r1
 80087b0:	b003      	add	sp, #12
 80087b2:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80087b4:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80087b6:	4a13      	ldr	r2, [pc, #76]	; (8008804 <HAL_ADC_Init+0x1a0>)
 80087b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80087bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80087c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087c4:	6083      	str	r3, [r0, #8]
 80087c6:	4b10      	ldr	r3, [pc, #64]	; (8008808 <HAL_ADC_Init+0x1a4>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80087ce:	3301      	adds	r3, #1
 80087d0:	005b      	lsls	r3, r3, #1
      wait_loop_index--;
 80087d2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80087d4:	9b01      	ldr	r3, [sp, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f43f af60 	beq.w	800869c <HAL_ADC_Init+0x38>
      wait_loop_index--;
 80087dc:	9b01      	ldr	r3, [sp, #4]
 80087de:	3b01      	subs	r3, #1
 80087e0:	e7f7      	b.n	80087d2 <HAL_ADC_Init+0x16e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80087e2:	2100      	movs	r1, #0
 80087e4:	e767      	b.n	80086b6 <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80087e6:	691a      	ldr	r2, [r3, #16]
 80087e8:	f022 0201 	bic.w	r2, r2, #1
 80087ec:	e7c9      	b.n	8008782 <HAL_ADC_Init+0x11e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80087ee:	f043 0310 	orr.w	r3, r3, #16
 80087f2:	65a3      	str	r3, [r4, #88]	; 0x58
    return HAL_ERROR;
 80087f4:	2101      	movs	r1, #1
 80087f6:	e7da      	b.n	80087ae <HAL_ADC_Init+0x14a>
 80087f8:	50040000 	.word	0x50040000
 80087fc:	50040300 	.word	0x50040300
 8008800:	fff0c007 	.word	0xfff0c007
 8008804:	00030d40 	.word	0x00030d40
 8008808:	200000a4 	.word	0x200000a4

0800880c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800880c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800880e:	2300      	movs	r3, #0
 8008810:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008812:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8008816:	2b01      	cmp	r3, #1
{
 8008818:	4605      	mov	r5, r0
 800881a:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 800881c:	f000 819c 	beq.w	8008b58 <HAL_ADC_ConfigChannel+0x34c>
 8008820:	2301      	movs	r3, #1
 8008822:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008826:	6800      	ldr	r0, [r0, #0]
 8008828:	f7ff ff17 	bl	800865a <LL_ADC_REG_IsConversionOngoing>
 800882c:	2800      	cmp	r0, #0
 800882e:	f040 818d 	bne.w	8008b4c <HAL_ADC_ConfigChannel+0x340>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8008832:	684b      	ldr	r3, [r1, #4]
 8008834:	2b05      	cmp	r3, #5
 8008836:	d809      	bhi.n	800884c <HAL_ADC_ConfigChannel+0x40>
    {
      switch (sConfig->Rank)
 8008838:	3b02      	subs	r3, #2
 800883a:	2b03      	cmp	r3, #3
 800883c:	f200 8094 	bhi.w	8008968 <HAL_ADC_ConfigChannel+0x15c>
 8008840:	e8df f003 	tbb	[pc, r3]
 8008844:	8f8d8b02 	.word	0x8f8d8b02
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8008848:	230c      	movs	r3, #12
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
          break;
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800884a:	6063      	str	r3, [r4, #4]
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800884c:	6862      	ldr	r2, [r4, #4]
 800884e:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 8008850:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008852:	0991      	lsrs	r1, r2, #6
 8008854:	f001 010c 	and.w	r1, r1, #12
 8008858:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 800885c:	f002 021f 	and.w	r2, r2, #31
 8008860:	59ce      	ldr	r6, [r1, r7]
 8008862:	f04f 0c1f 	mov.w	ip, #31
 8008866:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800886a:	4093      	lsls	r3, r2
 800886c:	fa0c f202 	lsl.w	r2, ip, r2
 8008870:	ea26 0202 	bic.w	r2, r6, r2
 8008874:	4313      	orrs	r3, r2
 8008876:	51cb      	str	r3, [r1, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008878:	f7ff feef 	bl	800865a <LL_ADC_REG_IsConversionOngoing>
 800887c:	4601      	mov	r1, r0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800887e:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008880:	6882      	ldr	r2, [r0, #8]
 8008882:	f002 0208 	and.w	r2, r2, #8
 8008886:	430a      	orrs	r2, r1
 8008888:	d124      	bne.n	80088d4 <HAL_ADC_ConfigChannel+0xc8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800888a:	68a3      	ldr	r3, [r4, #8]
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800888c:	6821      	ldr	r1, [r4, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800888e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008892:	d16b      	bne.n	800896c <HAL_ADC_ConfigChannel+0x160>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008894:	f7ff fed0 	bl	8008638 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008898:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800889a:	6953      	ldr	r3, [r2, #20]
 800889c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088a0:	6153      	str	r3, [r2, #20]

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80088a2:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80088a4:	6828      	ldr	r0, [r5, #0]
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80088a6:	6822      	ldr	r2, [r4, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80088a8:	68c1      	ldr	r1, [r0, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80088aa:	2e04      	cmp	r6, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80088ac:	f100 0360 	add.w	r3, r0, #96	; 0x60
 80088b0:	d064      	beq.n	800897c <HAL_ADC_ConfigChannel+0x170>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80088b2:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80088b6:	0048      	lsls	r0, r1, #1
 80088b8:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 80088ba:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 80088be:	4081      	lsls	r1, r0
 80088c0:	48a6      	ldr	r0, [pc, #664]	; (8008b5c <HAL_ADC_ConfigChannel+0x350>)
 80088c2:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80088c6:	4038      	ands	r0, r7
 80088c8:	4310      	orrs	r0, r2
 80088ca:	4301      	orrs	r1, r0
 80088cc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80088d0:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80088d4:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80088d6:	6883      	ldr	r3, [r0, #8]
 80088d8:	07d9      	lsls	r1, r3, #31
 80088da:	d433      	bmi.n	8008944 <HAL_ADC_ConfigChannel+0x138>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80088dc:	68e6      	ldr	r6, [r4, #12]
 80088de:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80088e0:	4a9f      	ldr	r2, [pc, #636]	; (8008b60 <HAL_ADC_ConfigChannel+0x354>)
 80088e2:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 80088e6:	f006 0c18 	and.w	ip, r6, #24
 80088ea:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80088ee:	fa22 f20c 	lsr.w	r2, r2, ip
 80088f2:	401a      	ands	r2, r3
 80088f4:	ea21 0107 	bic.w	r1, r1, r7
 80088f8:	430a      	orrs	r2, r1
 80088fa:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80088fe:	4a99      	ldr	r2, [pc, #612]	; (8008b64 <HAL_ADC_ConfigChannel+0x358>)
 8008900:	4296      	cmp	r6, r2
 8008902:	d11f      	bne.n	8008944 <HAL_ADC_ConfigChannel+0x138>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008904:	2f00      	cmp	r7, #0
 8008906:	f040 808e 	bne.w	8008a26 <HAL_ADC_ConfigChannel+0x21a>
 800890a:	0e99      	lsrs	r1, r3, #26
 800890c:	3101      	adds	r1, #1
 800890e:	f001 061f 	and.w	r6, r1, #31
 8008912:	0689      	lsls	r1, r1, #26
 8008914:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008918:	2e09      	cmp	r6, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800891a:	f04f 0101 	mov.w	r1, #1
 800891e:	fa01 f106 	lsl.w	r1, r1, r6
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008922:	f200 80b1 	bhi.w	8008a88 <HAL_ADC_ConfigChannel+0x27c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008926:	4311      	orrs	r1, r2
 8008928:	2f00      	cmp	r7, #0
 800892a:	f040 8097 	bne.w	8008a5c <HAL_ADC_ConfigChannel+0x250>
 800892e:	0e9e      	lsrs	r6, r3, #26
 8008930:	3601      	adds	r6, #1
 8008932:	f006 061f 	and.w	r6, r6, #31
 8008936:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800893a:	0536      	lsls	r6, r6, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800893c:	4331      	orrs	r1, r6
 800893e:	68a2      	ldr	r2, [r4, #8]
 8008940:	f7ff fe7a 	bl	8008638 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008944:	6821      	ldr	r1, [r4, #0]
 8008946:	4b88      	ldr	r3, [pc, #544]	; (8008b68 <HAL_ADC_ConfigChannel+0x35c>)
 8008948:	4219      	tst	r1, r3
 800894a:	f040 80b0 	bne.w	8008aae <HAL_ADC_ConfigChannel+0x2a2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800894e:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008950:	2300      	movs	r3, #0
 8008952:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8008956:	b003      	add	sp, #12
 8008958:	bdf0      	pop	{r4, r5, r6, r7, pc}
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800895a:	2312      	movs	r3, #18
 800895c:	e775      	b.n	800884a <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800895e:	2318      	movs	r3, #24
 8008960:	e773      	b.n	800884a <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8008962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008966:	e770      	b.n	800884a <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8008968:	2306      	movs	r3, #6
 800896a:	e76e      	b.n	800884a <HAL_ADC_ConfigChannel+0x3e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800896c:	461a      	mov	r2, r3
 800896e:	f7ff fe63 	bl	8008638 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008972:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008974:	6953      	ldr	r3, [r2, #20]
 8008976:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800897a:	e791      	b.n	80088a0 <HAL_ADC_ConfigChannel+0x94>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800897c:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800897e:	6e01      	ldr	r1, [r0, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008980:	f3c2 0612 	ubfx	r6, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008984:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008988:	2e00      	cmp	r6, #0
 800898a:	d138      	bne.n	80089fe <HAL_ADC_ConfigChannel+0x1f2>
 800898c:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008990:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8008992:	bf02      	ittt	eq
 8008994:	6e02      	ldreq	r2, [r0, #96]	; 0x60
 8008996:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800899a:	6602      	streq	r2, [r0, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800899c:	685a      	ldr	r2, [r3, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800899e:	6822      	ldr	r2, [r4, #0]
 80089a0:	6859      	ldr	r1, [r3, #4]
 80089a2:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80089a6:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80089aa:	bb68      	cbnz	r0, 8008a08 <HAL_ADC_ConfigChannel+0x1fc>
 80089ac:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80089b0:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 80089b2:	bf02      	ittt	eq
 80089b4:	685a      	ldreq	r2, [r3, #4]
 80089b6:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80089ba:	605a      	streq	r2, [r3, #4]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80089bc:	689a      	ldr	r2, [r3, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80089be:	6822      	ldr	r2, [r4, #0]
 80089c0:	6899      	ldr	r1, [r3, #8]
 80089c2:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80089c6:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80089ca:	bb10      	cbnz	r0, 8008a12 <HAL_ADC_ConfigChannel+0x206>
 80089cc:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80089d0:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 80089d2:	bf02      	ittt	eq
 80089d4:	689a      	ldreq	r2, [r3, #8]
 80089d6:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80089da:	609a      	streq	r2, [r3, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80089dc:	68da      	ldr	r2, [r3, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80089de:	6822      	ldr	r2, [r4, #0]
 80089e0:	68d9      	ldr	r1, [r3, #12]
 80089e2:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80089e6:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80089ea:	b9b8      	cbnz	r0, 8008a1c <HAL_ADC_ConfigChannel+0x210>
 80089ec:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80089f0:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 80089f2:	bf02      	ittt	eq
 80089f4:	68da      	ldreq	r2, [r3, #12]
 80089f6:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80089fa:	60da      	streq	r2, [r3, #12]
}
 80089fc:	e76a      	b.n	80088d4 <HAL_ADC_ConfigChannel+0xc8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089fe:	fa92 f2a2 	rbit	r2, r2
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a02:	fab2 f282 	clz	r2, r2
 8008a06:	e7c3      	b.n	8008990 <HAL_ADC_ConfigChannel+0x184>
 8008a08:	fa92 f2a2 	rbit	r2, r2
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a0c:	fab2 f282 	clz	r2, r2
 8008a10:	e7ce      	b.n	80089b0 <HAL_ADC_ConfigChannel+0x1a4>
 8008a12:	fa92 f2a2 	rbit	r2, r2
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a16:	fab2 f282 	clz	r2, r2
 8008a1a:	e7d9      	b.n	80089d0 <HAL_ADC_ConfigChannel+0x1c4>
 8008a1c:	fa92 f2a2 	rbit	r2, r2
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a20:	fab2 f282 	clz	r2, r2
 8008a24:	e7e4      	b.n	80089f0 <HAL_ADC_ConfigChannel+0x1e4>
 8008a26:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008a2a:	fab2 f282 	clz	r2, r2
 8008a2e:	3201      	adds	r2, #1
 8008a30:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008a34:	2a09      	cmp	r2, #9
 8008a36:	d816      	bhi.n	8008a66 <HAL_ADC_ConfigChannel+0x25a>
 8008a38:	fa93 f1a3 	rbit	r1, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008a3c:	fab1 f181 	clz	r1, r1
 8008a40:	3101      	adds	r1, #1
 8008a42:	0689      	lsls	r1, r1, #26
 8008a44:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
 8008a48:	fa93 f1a3 	rbit	r1, r3
 8008a4c:	fab1 f181 	clz	r1, r1
 8008a50:	3101      	adds	r1, #1
 8008a52:	f001 061f 	and.w	r6, r1, #31
 8008a56:	2101      	movs	r1, #1
 8008a58:	40b1      	lsls	r1, r6
 8008a5a:	e764      	b.n	8008926 <HAL_ADC_ConfigChannel+0x11a>
 8008a5c:	fa93 f6a3 	rbit	r6, r3
 8008a60:	fab6 f686 	clz	r6, r6
 8008a64:	e764      	b.n	8008930 <HAL_ADC_ConfigChannel+0x124>
 8008a66:	fa93 f1a3 	rbit	r1, r3
 8008a6a:	fab1 f181 	clz	r1, r1
 8008a6e:	3101      	adds	r1, #1
 8008a70:	0689      	lsls	r1, r1, #26
 8008a72:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
 8008a76:	fa93 f1a3 	rbit	r1, r3
 8008a7a:	fab1 f181 	clz	r1, r1
 8008a7e:	3101      	adds	r1, #1
 8008a80:	f001 061f 	and.w	r6, r1, #31
 8008a84:	2101      	movs	r1, #1
 8008a86:	40b1      	lsls	r1, r6
 8008a88:	4311      	orrs	r1, r2
 8008a8a:	b95f      	cbnz	r7, 8008aa4 <HAL_ADC_ConfigChannel+0x298>
 8008a8c:	0e9b      	lsrs	r3, r3, #26
 8008a8e:	3301      	adds	r3, #1
 8008a90:	f003 031f 	and.w	r3, r3, #31
 8008a94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008a98:	3b1e      	subs	r3, #30
 8008a9a:	051b      	lsls	r3, r3, #20
 8008a9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008aa0:	4319      	orrs	r1, r3
 8008aa2:	e74c      	b.n	800893e <HAL_ADC_ConfigChannel+0x132>
 8008aa4:	fa93 f3a3 	rbit	r3, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008aa8:	fab3 f383 	clz	r3, r3
 8008aac:	e7ef      	b.n	8008a8e <HAL_ADC_ConfigChannel+0x282>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008aae:	4b2f      	ldr	r3, [pc, #188]	; (8008b6c <HAL_ADC_ConfigChannel+0x360>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008ab0:	4a2f      	ldr	r2, [pc, #188]	; (8008b70 <HAL_ADC_ConfigChannel+0x364>)
 8008ab2:	6898      	ldr	r0, [r3, #8]
 8008ab4:	4291      	cmp	r1, r2
 8008ab6:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
 8008aba:	d11e      	bne.n	8008afa <HAL_ADC_ConfigChannel+0x2ee>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008abc:	0202      	lsls	r2, r0, #8
 8008abe:	f53f af46 	bmi.w	800894e <HAL_ADC_ConfigChannel+0x142>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008ac2:	6829      	ldr	r1, [r5, #0]
 8008ac4:	4a2b      	ldr	r2, [pc, #172]	; (8008b74 <HAL_ADC_ConfigChannel+0x368>)
 8008ac6:	4291      	cmp	r1, r2
 8008ac8:	f47f af41 	bne.w	800894e <HAL_ADC_ConfigChannel+0x142>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008acc:	689a      	ldr	r2, [r3, #8]
 8008ace:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8008ad2:	4322      	orrs	r2, r4
 8008ad4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008ad8:	609a      	str	r2, [r3, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008ada:	4b27      	ldr	r3, [pc, #156]	; (8008b78 <HAL_ADC_ConfigChannel+0x36c>)
 8008adc:	4a27      	ldr	r2, [pc, #156]	; (8008b7c <HAL_ADC_ConfigChannel+0x370>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ae4:	230c      	movs	r3, #12
 8008ae6:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 8008aea:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8008aec:	9b01      	ldr	r3, [sp, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f43f af2d 	beq.w	800894e <HAL_ADC_ConfigChannel+0x142>
            wait_loop_index--;
 8008af4:	9b01      	ldr	r3, [sp, #4]
 8008af6:	3b01      	subs	r3, #1
 8008af8:	e7f7      	b.n	8008aea <HAL_ADC_ConfigChannel+0x2de>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008afa:	4a21      	ldr	r2, [pc, #132]	; (8008b80 <HAL_ADC_ConfigChannel+0x374>)
 8008afc:	4291      	cmp	r1, r2
 8008afe:	d111      	bne.n	8008b24 <HAL_ADC_ConfigChannel+0x318>
 8008b00:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8008b04:	f47f af23 	bne.w	800894e <HAL_ADC_ConfigChannel+0x142>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008b08:	6829      	ldr	r1, [r5, #0]
 8008b0a:	f1a2 42f7 	sub.w	r2, r2, #2071986176	; 0x7b800000
 8008b0e:	4291      	cmp	r1, r2
 8008b10:	f47f af1d 	bne.w	800894e <HAL_ADC_ConfigChannel+0x142>
 8008b14:	689a      	ldr	r2, [r3, #8]
 8008b16:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8008b1a:	4322      	orrs	r2, r4
 8008b1c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008b20:	609a      	str	r2, [r3, #8]
}
 8008b22:	e715      	b.n	8008950 <HAL_ADC_ConfigChannel+0x144>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008b24:	4a17      	ldr	r2, [pc, #92]	; (8008b84 <HAL_ADC_ConfigChannel+0x378>)
 8008b26:	4291      	cmp	r1, r2
 8008b28:	f47f af11 	bne.w	800894e <HAL_ADC_ConfigChannel+0x142>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008b2c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8008b30:	f47f af0d 	bne.w	800894e <HAL_ADC_ConfigChannel+0x142>
        if (ADC_VREFINT_INSTANCE(hadc))
 8008b34:	6829      	ldr	r1, [r5, #0]
 8008b36:	4a0f      	ldr	r2, [pc, #60]	; (8008b74 <HAL_ADC_ConfigChannel+0x368>)
 8008b38:	4291      	cmp	r1, r2
 8008b3a:	f47f af08 	bne.w	800894e <HAL_ADC_ConfigChannel+0x142>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008b3e:	689a      	ldr	r2, [r3, #8]
 8008b40:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8008b44:	4322      	orrs	r2, r4
 8008b46:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008b4a:	e7e9      	b.n	8008b20 <HAL_ADC_ConfigChannel+0x314>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b4c:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8008b4e:	f042 0220 	orr.w	r2, r2, #32
 8008b52:	65aa      	str	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8008b54:	4618      	mov	r0, r3
 8008b56:	e6fb      	b.n	8008950 <HAL_ADC_ConfigChannel+0x144>
  __HAL_LOCK(hadc);
 8008b58:	2002      	movs	r0, #2
 8008b5a:	e6fc      	b.n	8008956 <HAL_ADC_ConfigChannel+0x14a>
 8008b5c:	03fff000 	.word	0x03fff000
 8008b60:	0007ffff 	.word	0x0007ffff
 8008b64:	407f0000 	.word	0x407f0000
 8008b68:	80080000 	.word	0x80080000
 8008b6c:	50040300 	.word	0x50040300
 8008b70:	c7520000 	.word	0xc7520000
 8008b74:	50040000 	.word	0x50040000
 8008b78:	200000a4 	.word	0x200000a4
 8008b7c:	00030d40 	.word	0x00030d40
 8008b80:	cb840000 	.word	0xcb840000
 8008b84:	80000001 	.word	0x80000001

08008b88 <HAL_ADC_GetState>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8008b88:	6d80      	ldr	r0, [r0, #88]	; 0x58
}
 8008b8a:	4770      	bx	lr

08008b8c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8008b8c:	b570      	push	{r4, r5, r6, lr}
 8008b8e:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008b90:	6800      	ldr	r0, [r0, #0]
 8008b92:	f7ff fd62 	bl	800865a <LL_ADC_REG_IsConversionOngoing>
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008b96:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008b98:	689a      	ldr	r2, [r3, #8]
 8008b9a:	f002 0208 	and.w	r2, r2, #8
 8008b9e:	4302      	orrs	r2, r0
 8008ba0:	d101      	bne.n	8008ba6 <ADC_ConversionStop+0x1a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008ba2:	2000      	movs	r0, #0
}
 8008ba4:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	0190      	lsls	r0, r2, #6
 8008baa:	d52b      	bpl.n	8008c04 <ADC_ConversionStop+0x78>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8008bac:	8b20      	ldrh	r0, [r4, #24]
 8008bae:	f240 1201 	movw	r2, #257	; 0x101
 8008bb2:	4290      	cmp	r0, r2
 8008bb4:	d126      	bne.n	8008c04 <ADC_ConversionStop+0x78>
 8008bb6:	4a28      	ldr	r2, [pc, #160]	; (8008c58 <ADC_ConversionStop+0xcc>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008bb8:	6819      	ldr	r1, [r3, #0]
 8008bba:	0649      	lsls	r1, r1, #25
 8008bbc:	d516      	bpl.n	8008bec <ADC_ConversionStop+0x60>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8008bbe:	2240      	movs	r2, #64	; 0x40
 8008bc0:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8008bc2:	2101      	movs	r1, #1
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7ff fd48 	bl	800865a <LL_ADC_REG_IsConversionOngoing>
 8008bca:	b158      	cbz	r0, 8008be4 <ADC_ConversionStop+0x58>
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008bcc:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008bce:	6893      	ldr	r3, [r2, #8]
 8008bd0:	079e      	lsls	r6, r3, #30
 8008bd2:	d407      	bmi.n	8008be4 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 8008bd4:	6893      	ldr	r3, [r2, #8]
 8008bd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bda:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008bde:	f043 0310 	orr.w	r3, r3, #16
 8008be2:	6093      	str	r3, [r2, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8008be4:	2901      	cmp	r1, #1
 8008be6:	d10f      	bne.n	8008c08 <ADC_ConversionStop+0x7c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008be8:	2504      	movs	r5, #4
 8008bea:	e022      	b.n	8008c32 <ADC_ConversionStop+0xa6>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008bec:	3a01      	subs	r2, #1
 8008bee:	d1e3      	bne.n	8008bb8 <ADC_ConversionStop+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008bf0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bf2:	f043 0310 	orr.w	r3, r3, #16
 8008bf6:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008bf8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008bfa:	f043 0301 	orr.w	r3, r3, #1
 8008bfe:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8008c00:	2001      	movs	r0, #1
 8008c02:	e7cf      	b.n	8008ba4 <ADC_ConversionStop+0x18>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8008c04:	2902      	cmp	r1, #2
 8008c06:	d1dd      	bne.n	8008bc4 <ADC_ConversionStop+0x38>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8008c08:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008c0a:	6893      	ldr	r3, [r2, #8]
 8008c0c:	0718      	lsls	r0, r3, #28
 8008c0e:	d50a      	bpl.n	8008c26 <ADC_ConversionStop+0x9a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008c10:	6893      	ldr	r3, [r2, #8]
 8008c12:	079b      	lsls	r3, r3, #30
 8008c14:	d407      	bmi.n	8008c26 <ADC_ConversionStop+0x9a>
  MODIFY_REG(ADCx->CR,
 8008c16:	6893      	ldr	r3, [r2, #8]
 8008c18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008c20:	f043 0320 	orr.w	r3, r3, #32
 8008c24:	6093      	str	r3, [r2, #8]
    switch (conversion_group_reassigned)
 8008c26:	2902      	cmp	r1, #2
 8008c28:	d014      	beq.n	8008c54 <ADC_ConversionStop+0xc8>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008c2a:	2903      	cmp	r1, #3
 8008c2c:	bf14      	ite	ne
 8008c2e:	2504      	movne	r5, #4
 8008c30:	250c      	moveq	r5, #12
    tickstart = HAL_GetTick();
 8008c32:	f7ff fcf7 	bl	8008624 <HAL_GetTick>
 8008c36:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	422b      	tst	r3, r5
 8008c3e:	d0b0      	beq.n	8008ba2 <ADC_ConversionStop+0x16>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008c40:	f7ff fcf0 	bl	8008624 <HAL_GetTick>
 8008c44:	1b80      	subs	r0, r0, r6
 8008c46:	2805      	cmp	r0, #5
 8008c48:	d9f6      	bls.n	8008c38 <ADC_ConversionStop+0xac>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	422b      	tst	r3, r5
 8008c50:	d0f2      	beq.n	8008c38 <ADC_ConversionStop+0xac>
 8008c52:	e7cd      	b.n	8008bf0 <ADC_ConversionStop+0x64>
    switch (conversion_group_reassigned)
 8008c54:	2508      	movs	r5, #8
 8008c56:	e7ec      	b.n	8008c32 <ADC_ConversionStop+0xa6>
 8008c58:	a3400001 	.word	0xa3400001

08008c5c <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c5c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008c5e:	6893      	ldr	r3, [r2, #8]
{
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c64:	07d8      	lsls	r0, r3, #31
 8008c66:	d501      	bpl.n	8008c6c <ADC_Enable+0x10>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008c68:	2000      	movs	r0, #0
}
 8008c6a:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008c6c:	6891      	ldr	r1, [r2, #8]
 8008c6e:	4b16      	ldr	r3, [pc, #88]	; (8008cc8 <ADC_Enable+0x6c>)
 8008c70:	4219      	tst	r1, r3
 8008c72:	d009      	beq.n	8008c88 <ADC_Enable+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c76:	f043 0310 	orr.w	r3, r3, #16
 8008c7a:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c7c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008c7e:	f043 0301 	orr.w	r3, r3, #1
 8008c82:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8008c84:	2001      	movs	r0, #1
 8008c86:	e7f0      	b.n	8008c6a <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 8008c88:	6893      	ldr	r3, [r2, #8]
 8008c8a:	4d10      	ldr	r5, [pc, #64]	; (8008ccc <ADC_Enable+0x70>)
 8008c8c:	402b      	ands	r3, r5
 8008c8e:	f043 0301 	orr.w	r3, r3, #1
 8008c92:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8008c94:	f7ff fcc6 	bl	8008624 <HAL_GetTick>
 8008c98:	4606      	mov	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008c9a:	6822      	ldr	r2, [r4, #0]
 8008c9c:	6813      	ldr	r3, [r2, #0]
 8008c9e:	07db      	lsls	r3, r3, #31
 8008ca0:	d4e2      	bmi.n	8008c68 <ADC_Enable+0xc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008ca2:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008ca4:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 8008ca6:	bf5f      	itttt	pl
 8008ca8:	6893      	ldrpl	r3, [r2, #8]
 8008caa:	402b      	andpl	r3, r5
 8008cac:	f043 0301 	orrpl.w	r3, r3, #1
 8008cb0:	6093      	strpl	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008cb2:	f7ff fcb7 	bl	8008624 <HAL_GetTick>
 8008cb6:	1b80      	subs	r0, r0, r6
 8008cb8:	2802      	cmp	r0, #2
 8008cba:	d9ee      	bls.n	8008c9a <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	07da      	lsls	r2, r3, #31
 8008cc2:	d4ea      	bmi.n	8008c9a <ADC_Enable+0x3e>
 8008cc4:	e7d6      	b.n	8008c74 <ADC_Enable+0x18>
 8008cc6:	bf00      	nop
 8008cc8:	8000003f 	.word	0x8000003f
 8008ccc:	7fffffc0 	.word	0x7fffffc0

08008cd0 <HAL_ADC_Start>:
{
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008cd4:	6800      	ldr	r0, [r0, #0]
 8008cd6:	f7ff fcc0 	bl	800865a <LL_ADC_REG_IsConversionOngoing>
 8008cda:	4605      	mov	r5, r0
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d136      	bne.n	8008d4e <HAL_ADC_Start+0x7e>
    __HAL_LOCK(hadc);
 8008ce0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d032      	beq.n	8008d4e <HAL_ADC_Start+0x7e>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f7ff ffb4 	bl	8008c5c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8008cf4:	bb40      	cbnz	r0, 8008d48 <HAL_ADC_Start+0x78>
      ADC_STATE_CLR_SET(hadc->State,
 8008cf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008cfc:	f023 0301 	bic.w	r3, r3, #1
 8008d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d04:	65a3      	str	r3, [r4, #88]	; 0x58
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008d06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d08:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008d0a:	bf48      	it	mi
 8008d0c:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008d0e:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc);
 8008d10:	bf52      	itee	pl
 8008d12:	65e0      	strpl	r0, [r4, #92]	; 0x5c
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008d14:	f023 0306 	bicmi.w	r3, r3, #6
 8008d18:	65e3      	strmi	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008d1a:	231c      	movs	r3, #28
 8008d1c:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8008d24:	68d3      	ldr	r3, [r2, #12]
 8008d26:	019b      	lsls	r3, r3, #6
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008d28:	bf41      	itttt	mi
 8008d2a:	6da3      	ldrmi	r3, [r4, #88]	; 0x58
 8008d2c:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8008d30:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8008d34:	65a3      	strmi	r3, [r4, #88]	; 0x58
  MODIFY_REG(ADCx->CR,
 8008d36:	6893      	ldr	r3, [r2, #8]
 8008d38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008d40:	f043 0304 	orr.w	r3, r3, #4
 8008d44:	6093      	str	r3, [r2, #8]
}
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 8008d48:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 8008d4c:	e7fb      	b.n	8008d46 <HAL_ADC_Start+0x76>
    tmp_hal_status = HAL_BUSY;
 8008d4e:	2002      	movs	r0, #2
 8008d50:	e7f9      	b.n	8008d46 <HAL_ADC_Start+0x76>

08008d52 <ADC_Disable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008d52:	6802      	ldr	r2, [r0, #0]
{
 8008d54:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008d56:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008d58:	6891      	ldr	r1, [r2, #8]
 8008d5a:	4604      	mov	r4, r0

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008d5c:	07c8      	lsls	r0, r1, #31
 8008d5e:	d401      	bmi.n	8008d64 <ADC_Disable+0x12>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008d60:	2000      	movs	r0, #0
}
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 8008d64:	0799      	lsls	r1, r3, #30
 8008d66:	d4fb      	bmi.n	8008d60 <ADC_Disable+0xe>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008d68:	6893      	ldr	r3, [r2, #8]
 8008d6a:	f003 030d 	and.w	r3, r3, #13
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d119      	bne.n	8008da6 <ADC_Disable+0x54>
  MODIFY_REG(ADCx->CR,
 8008d72:	6893      	ldr	r3, [r2, #8]
 8008d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008d7c:	f043 0302 	orr.w	r3, r3, #2
 8008d80:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008d82:	2303      	movs	r3, #3
 8008d84:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008d86:	f7ff fc4d 	bl	8008624 <HAL_GetTick>
 8008d8a:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	07db      	lsls	r3, r3, #31
 8008d92:	d5e5      	bpl.n	8008d60 <ADC_Disable+0xe>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008d94:	f7ff fc46 	bl	8008624 <HAL_GetTick>
 8008d98:	1b40      	subs	r0, r0, r5
 8008d9a:	2802      	cmp	r0, #2
 8008d9c:	d9f6      	bls.n	8008d8c <ADC_Disable+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	07da      	lsls	r2, r3, #31
 8008da4:	d5f2      	bpl.n	8008d8c <ADC_Disable+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008da6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008da8:	f043 0310 	orr.w	r3, r3, #16
 8008dac:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008dae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008db0:	f043 0301 	orr.w	r3, r3, #1
 8008db4:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8008db6:	2001      	movs	r0, #1
 8008db8:	e7d3      	b.n	8008d62 <ADC_Disable+0x10>

08008dba <HAL_ADC_Stop>:
{
 8008dba:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8008dbc:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8008dc0:	2b01      	cmp	r3, #1
{
 8008dc2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8008dc4:	d016      	beq.n	8008df4 <HAL_ADC_Stop+0x3a>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8008dcc:	2103      	movs	r1, #3
 8008dce:	f7ff fedd 	bl	8008b8c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8008dd2:	b958      	cbnz	r0, 8008dec <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f7ff ffbc 	bl	8008d52 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8008dda:	b938      	cbnz	r0, 8008dec <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8008ddc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008dde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008de2:	f023 0301 	bic.w	r3, r3, #1
 8008de6:	f043 0301 	orr.w	r3, r3, #1
 8008dea:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8008dec:	2300      	movs	r3, #0
 8008dee:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8008df2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8008df4:	2002      	movs	r0, #2
 8008df6:	e7fc      	b.n	8008df2 <HAL_ADC_Stop+0x38>

08008df8 <LL_ADC_SetChannelSamplingTime>:
{
 8008df8:	b530      	push	{r4, r5, lr}
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008dfa:	0dcc      	lsrs	r4, r1, #23
 8008dfc:	f004 0404 	and.w	r4, r4, #4
 8008e00:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 8008e02:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8008e06:	5823      	ldr	r3, [r4, r0]
 8008e08:	2507      	movs	r5, #7
 8008e0a:	408d      	lsls	r5, r1
 8008e0c:	ea23 0305 	bic.w	r3, r3, r5
 8008e10:	fa02 f101 	lsl.w	r1, r2, r1
 8008e14:	430b      	orrs	r3, r1
 8008e16:	5023      	str	r3, [r4, r0]
}
 8008e18:	bd30      	pop	{r4, r5, pc}

08008e1a <LL_ADC_INJ_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008e1a:	6880      	ldr	r0, [r0, #8]
}
 8008e1c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8008e20:	4770      	bx	lr

08008e22 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008e24:	2300      	movs	r3, #0
 8008e26:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008e28:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8008e2c:	2b01      	cmp	r3, #1
{
 8008e2e:	4604      	mov	r4, r0
 8008e30:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 8008e32:	d03e      	beq.n	8008eb2 <HAL_ADCEx_Calibration_Start+0x90>
 8008e34:	2301      	movs	r3, #1
 8008e36:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008e3a:	f7ff ff8a 	bl	8008d52 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d133      	bne.n	8008eaa <HAL_ADCEx_Calibration_Start+0x88>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e42:	6da2      	ldr	r2, [r4, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008e44:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8008e46:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8008e4a:	f022 0202 	bic.w	r2, r2, #2
 8008e4e:	f042 0202 	orr.w	r2, r2, #2
 8008e52:	65a2      	str	r2, [r4, #88]	; 0x58
  MODIFY_REG(ADCx->CR,
 8008e54:	68b3      	ldr	r3, [r6, #8]
 8008e56:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008e5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e5e:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8008e62:	432b      	orrs	r3, r5
 8008e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e68:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008e6a:	68b3      	ldr	r3, [r6, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	da12      	bge.n	8008e96 <HAL_ADCEx_Calibration_Start+0x74>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
 8008e70:	9b01      	ldr	r3, [sp, #4]
 8008e72:	3301      	adds	r3, #1
 8008e74:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008e76:	9b01      	ldr	r3, [sp, #4]
 8008e78:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8008e7c:	d3f5      	bcc.n	8008e6a <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008e7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e80:	f023 0312 	bic.w	r3, r3, #18
 8008e84:	f043 0310 	orr.w	r3, r3, #16
 8008e88:	65a3      	str	r3, [r4, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

        return HAL_ERROR;
 8008e90:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8008e92:	b002      	add	sp, #8
 8008e94:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8008e96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e98:	f023 0303 	bic.w	r3, r3, #3
 8008e9c:	f043 0301 	orr.w	r3, r3, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ea0:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
  return tmp_hal_status;
 8008ea8:	e7f3      	b.n	8008e92 <HAL_ADCEx_Calibration_Start+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008eaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008eac:	f043 0310 	orr.w	r3, r3, #16
 8008eb0:	e7f6      	b.n	8008ea0 <HAL_ADCEx_Calibration_Start+0x7e>
  __HAL_LOCK(hadc);
 8008eb2:	2002      	movs	r0, #2
 8008eb4:	e7ed      	b.n	8008e92 <HAL_ADCEx_Calibration_Start+0x70>

08008eb6 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8008eb6:	b510      	push	{r4, lr}
 8008eb8:	4604      	mov	r4, r0
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8008eba:	6800      	ldr	r0, [r0, #0]
 8008ebc:	f7ff ffad 	bl	8008e1a <LL_ADC_INJ_IsConversionOngoing>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d13e      	bne.n	8008f42 <HAL_ADCEx_InjectedStart+0x8c>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	68da      	ldr	r2, [r3, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8008ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eca:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8008ece:	d107      	bne.n	8008ee0 <HAL_ADCEx_InjectedStart+0x2a>
        && (tmp_config_injected_queue == 0UL)
 8008ed0:	2a00      	cmp	r2, #0
 8008ed2:	db05      	blt.n	8008ee0 <HAL_ADCEx_InjectedStart+0x2a>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ed4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ed6:	f043 0320 	orr.w	r3, r3, #32
 8008eda:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8008edc:	2001      	movs	r0, #1
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 8008ede:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hadc);
 8008ee0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d02c      	beq.n	8008f42 <HAL_ADCEx_InjectedStart+0x8c>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f7ff feb4 	bl	8008c5c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8008ef4:	bb08      	cbnz	r0, 8008f3a <HAL_ADCEx_InjectedStart+0x84>
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8008ef6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ef8:	05da      	lsls	r2, r3, #23
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8008efa:	bf49      	itett	mi
 8008efc:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
        ADC_CLEAR_ERRORCODE(hadc);
 8008efe:	65e0      	strpl	r0, [r4, #92]	; 0x5c
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8008f00:	f023 0308 	bicmi.w	r3, r3, #8
 8008f04:	65e3      	strmi	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8008f06:	6da3      	ldr	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8008f08:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8008f0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008f0e:	f023 0301 	bic.w	r3, r3, #1
 8008f12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f16:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8008f18:	2360      	movs	r3, #96	; 0x60
 8008f1a:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8008f22:	68d3      	ldr	r3, [r2, #12]
      if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8008f24:	019b      	lsls	r3, r3, #6
 8008f26:	d4da      	bmi.n	8008ede <HAL_ADCEx_InjectedStart+0x28>
  MODIFY_REG(ADCx->CR,
 8008f28:	6893      	ldr	r3, [r2, #8]
 8008f2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f32:	f043 0308 	orr.w	r3, r3, #8
 8008f36:	6093      	str	r3, [r2, #8]
}
 8008f38:	e7d1      	b.n	8008ede <HAL_ADCEx_InjectedStart+0x28>
      __HAL_UNLOCK(hadc);
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8008f40:	e7cd      	b.n	8008ede <HAL_ADCEx_InjectedStart+0x28>
    return HAL_BUSY;
 8008f42:	2002      	movs	r0, #2
 8008f44:	e7cb      	b.n	8008ede <HAL_ADCEx_InjectedStart+0x28>
	...

08008f48 <HAL_ADCEx_InjectedPollForConversion>:
  * @note   Depending on hadc->Init.EOCSelection, JEOS or JEOC is
  *         checked and cleared depending on AUTDLY bit status.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8008f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of sequence selected */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8008f4a:	6943      	ldr	r3, [r0, #20]
  {
    tmp_Flag_End = ADC_FLAG_JEOS;
  }
  else /* end of conversion selected */
  {
    tmp_Flag_End = ADC_FLAG_JEOC;
 8008f4c:	2b08      	cmp	r3, #8
{
 8008f4e:	4604      	mov	r4, r0
 8008f50:	460d      	mov	r5, r1
    tmp_Flag_End = ADC_FLAG_JEOC;
 8008f52:	bf0c      	ite	eq
 8008f54:	2640      	moveq	r6, #64	; 0x40
 8008f56:	2620      	movne	r6, #32
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8008f58:	f7ff fb64 	bl	8008624 <HAL_GetTick>
 8008f5c:	4607      	mov	r7, r0

  /* Wait until End of Conversion or Sequence flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	4232      	tst	r2, r6
 8008f64:	d027      	beq.n	8008fb6 <HAL_ADCEx_InjectedPollForConversion+0x6e>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8008f66:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008f68:	68d9      	ldr	r1, [r3, #12]
  {
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8008f6a:	68d8      	ldr	r0, [r3, #12]
#endif

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008f6c:	6da2      	ldr	r2, [r4, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group injected      */
  /* by external trigger or by automatic injected conversion                  */
  /* from group regular.                                                      */
  if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8008f6e:	f015 0fc0 	tst.w	r5, #192	; 0xc0
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008f72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f76:	65a2      	str	r2, [r4, #88]	; 0x58
  if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8008f78:	d005      	beq.n	8008f86 <HAL_ADCEx_InjectedPollForConversion+0x3e>
      ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
       ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8008f7a:	4a1b      	ldr	r2, [pc, #108]	; (8008fe8 <HAL_ADCEx_InjectedPollForConversion+0xa0>)
 8008f7c:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 8008f80:	4002      	ands	r2, r0
 8008f82:	430a      	orrs	r2, r1
 8008f84:	d10f      	bne.n	8008fa6 <HAL_ADCEx_InjectedPollForConversion+0x5e>
        (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	0655      	lsls	r5, r2, #25
 8008f8a:	d50c      	bpl.n	8008fa6 <HAL_ADCEx_InjectedPollForConversion+0x5e>
      /* when the last context has been fully processed, JSQR is reset      */
      /* by the hardware. Even if no injected conversion is planned to come */
      /* (queue empty, triggers are ignored), it can start again            */
      /* immediately after setting a new context (JADSTART is still set).   */
      /* Therefore, state of HAL ADC injected group is kept to busy.        */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8008f8c:	0281      	lsls	r1, r0, #10
 8008f8e:	d40a      	bmi.n	8008fa6 <HAL_ADCEx_InjectedPollForConversion+0x5e>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8008f90:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008f92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f96:	65a2      	str	r2, [r4, #88]	; 0x58

        if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8008f98:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008f9a:	05d2      	lsls	r2, r2, #23
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f9c:	bf5e      	ittt	pl
 8008f9e:	6da2      	ldrpl	r2, [r4, #88]	; 0x58
 8008fa0:	f042 0201 	orrpl.w	r2, r2, #1
 8008fa4:	65a2      	strpl	r2, [r4, #88]	; 0x58
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_JEOS)
 8008fa6:	2e40      	cmp	r6, #64	; 0x40
 8008fa8:	d11a      	bne.n	8008fe0 <HAL_ADCEx_InjectedPollForConversion+0x98>
  {
    /* Clear end of sequence JEOS flag of injected group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature.   */
    /* For injected groups, no new conversion will start before JEOS is       */
    /* cleared.                                                               */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8008faa:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8008fae:	d119      	bne.n	8008fe4 <HAL_ADCEx_InjectedPollForConversion+0x9c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8008fb0:	2260      	movs	r2, #96	; 0x60
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	e013      	b.n	8008fde <HAL_ADCEx_InjectedPollForConversion+0x96>
    if (Timeout != HAL_MAX_DELAY)
 8008fb6:	1c6a      	adds	r2, r5, #1
 8008fb8:	d0d2      	beq.n	8008f60 <HAL_ADCEx_InjectedPollForConversion+0x18>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8008fba:	f7ff fb33 	bl	8008624 <HAL_GetTick>
 8008fbe:	1bc0      	subs	r0, r0, r7
 8008fc0:	42a8      	cmp	r0, r5
 8008fc2:	d801      	bhi.n	8008fc8 <HAL_ADCEx_InjectedPollForConversion+0x80>
 8008fc4:	2d00      	cmp	r5, #0
 8008fc6:	d1ca      	bne.n	8008f5e <HAL_ADCEx_InjectedPollForConversion+0x16>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8008fc8:	6823      	ldr	r3, [r4, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4033      	ands	r3, r6
 8008fce:	d1c6      	bne.n	8008f5e <HAL_ADCEx_InjectedPollForConversion+0x16>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008fd0:	6da2      	ldr	r2, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8008fd2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008fd6:	f042 0204 	orr.w	r2, r2, #4
 8008fda:	65a2      	str	r2, [r4, #88]	; 0x58
          return HAL_TIMEOUT;
 8008fdc:	2003      	movs	r0, #3
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
  }

  /* Return API HAL status */
  return HAL_OK;
}
 8008fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8008fe0:	2220      	movs	r2, #32
 8008fe2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	e7fa      	b.n	8008fde <HAL_ADCEx_InjectedPollForConversion+0x96>
 8008fe8:	02002000 	.word	0x02002000

08008fec <HAL_ADCEx_InjectedGetValue>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8008fec:	f5b1 7f05 	cmp.w	r1, #532	; 0x214
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8008ff0:	6803      	ldr	r3, [r0, #0]
  switch (InjectedRank)
 8008ff2:	d00c      	beq.n	800900e <HAL_ADCEx_InjectedGetValue+0x22>
 8008ff4:	f240 321a 	movw	r2, #794	; 0x31a
 8008ff8:	4291      	cmp	r1, r2
 8008ffa:	d005      	beq.n	8009008 <HAL_ADCEx_InjectedGetValue+0x1c>
 8008ffc:	f5b1 7f87 	cmp.w	r1, #270	; 0x10e
 8009000:	d108      	bne.n	8009014 <HAL_ADCEx_InjectedGetValue+0x28>
      break;
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
      break;
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8009002:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
      break;
 8009006:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 8009008:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
      break;
 800900c:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 800900e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
      break;
 8009012:	4770      	bx	lr
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8009014:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
      break;
  }

  /* Return ADC converted value */
  return tmp_jdr;
}
 8009018:	4770      	bx	lr
	...

0800901c <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 800901c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800901e:	460c      	mov	r4, r1
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009020:	f890 1054 	ldrb.w	r1, [r0, #84]	; 0x54
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009024:	6902      	ldr	r2, [r0, #16]
  __IO uint32_t wait_loop_index = 0;
 8009026:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8009028:	2901      	cmp	r1, #1
{
 800902a:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0;
 800902c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800902e:	f000 8209 	beq.w	8009444 <HAL_ADCEx_InjectedConfigChannel+0x428>
 8009032:	2101      	movs	r1, #1
 8009034:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8009038:	6860      	ldr	r0, [r4, #4]
 800903a:	b11a      	cbz	r2, 8009044 <HAL_ADCEx_InjectedConfigChannel+0x28>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 800903c:	69a1      	ldr	r1, [r4, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800903e:	2901      	cmp	r1, #1
 8009040:	f040 80bf 	bne.w	80091c2 <HAL_ADCEx_InjectedConfigChannel+0x1a6>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8009044:	2808      	cmp	r0, #8
 8009046:	d117      	bne.n	8009078 <HAL_ADCEx_InjectedConfigChannel+0x5c>
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8009048:	6823      	ldr	r3, [r4, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800904a:	6a22      	ldr	r2, [r4, #32]
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800904c:	0c9b      	lsrs	r3, r3, #18
 800904e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8009052:	b122      	cbz	r2, 800905e <HAL_ADCEx_InjectedConfigChannel+0x42>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8009054:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8009056:	f002 023c 	and.w	r2, r2, #60	; 0x3c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800905a:	430a      	orrs	r2, r1
 800905c:	4313      	orrs	r3, r2
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 800905e:	6829      	ldr	r1, [r5, #0]
 8009060:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009062:	f022 42fb 	bic.w	r2, r2, #2105540608	; 0x7d800000
 8009066:	f422 02ef 	bic.w	r2, r2, #7831552	; 0x778000
 800906a:	f422 42bf 	bic.w	r2, r2, #24448	; 0x5f80
 800906e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8009072:	431a      	orrs	r2, r3
 8009074:	64ca      	str	r2, [r1, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8009076:	662b      	str	r3, [r5, #96]	; 0x60
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8009078:	6828      	ldr	r0, [r5, #0]
 800907a:	f7ff fece 	bl	8008e1a <LL_ADC_INJ_IsConversionOngoing>
 800907e:	682a      	ldr	r2, [r5, #0]
 8009080:	b968      	cbnz	r0, 800909e <HAL_ADCEx_InjectedConfigChannel+0x82>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8009082:	7fa3      	ldrb	r3, [r4, #30]
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8009084:	7f61      	ldrb	r1, [r4, #29]
      MODIFY_REG(hadc->Instance->CFGR,
 8009086:	055b      	lsls	r3, r3, #21
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8009088:	2900      	cmp	r1, #0
 800908a:	f040 80c6 	bne.w	800921a <HAL_ADCEx_InjectedConfigChannel+0x1fe>
      MODIFY_REG(hadc->Instance->CFGR,
 800908e:	7f20      	ldrb	r0, [r4, #28]
 8009090:	68d1      	ldr	r1, [r2, #12]
 8009092:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8009096:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800909a:	430b      	orrs	r3, r1
 800909c:	60d3      	str	r3, [r2, #12]
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800909e:	4610      	mov	r0, r2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80090a0:	6893      	ldr	r3, [r2, #8]
 80090a2:	f7ff feba 	bl	8008e1a <LL_ADC_INJ_IsConversionOngoing>
 80090a6:	f003 0304 	and.w	r3, r3, #4

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80090aa:	4303      	orrs	r3, r0
 80090ac:	f040 8121 	bne.w	80092f2 <HAL_ADCEx_InjectedConfigChannel+0x2d6>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80090b0:	6a22      	ldr	r2, [r4, #32]
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80090b2:	7f66      	ldrb	r6, [r4, #29]

        tmp_hal_status = HAL_ERROR;
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80090b4:	6828      	ldr	r0, [r5, #0]
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80090b6:	b11a      	cbz	r2, 80090c0 <HAL_ADCEx_InjectedConfigChannel+0xa4>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80090b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80090ba:	2a00      	cmp	r2, #0
 80090bc:	f040 80af 	bne.w	800921e <HAL_ADCEx_InjectedConfigChannel+0x202>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80090c0:	68c3      	ldr	r3, [r0, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80090c2:	2e01      	cmp	r6, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80090c4:	bf0c      	ite	eq
 80090c6:	f043 7300 	orreq.w	r3, r3, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80090ca:	f023 7300 	bicne.w	r3, r3, #33554432	; 0x2000000
 80090ce:	60c3      	str	r3, [r0, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80090d0:	2600      	movs	r6, #0
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80090d2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80090d6:	2b01      	cmp	r3, #1
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80090d8:	bf05      	ittet	eq
 80090da:	e9d4 310b 	ldrdeq	r3, r1, [r4, #44]	; 0x2c
 80090de:	6902      	ldreq	r2, [r0, #16]
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80090e0:	6903      	ldrne	r3, [r0, #16]
      MODIFY_REG(hadc->Instance->CFGR2,
 80090e2:	430b      	orreq	r3, r1
 80090e4:	bf03      	ittte	eq
 80090e6:	f422 72ff 	biceq.w	r2, r2, #510	; 0x1fe
 80090ea:	4313      	orreq	r3, r2
 80090ec:	f043 0302 	orreq.w	r3, r3, #2
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80090f0:	f023 0302 	bicne.w	r3, r3, #2
 80090f4:	6103      	str	r3, [r0, #16]
    }

#if defined(ADC_SMPR1_SMPPLUS)
    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80090f6:	68a2      	ldr	r2, [r4, #8]
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80090f8:	6821      	ldr	r1, [r4, #0]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80090fa:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80090fe:	f040 809b 	bne.w	8009238 <HAL_ADCEx_InjectedConfigChannel+0x21c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8009102:	2200      	movs	r2, #0
 8009104:	f7ff fe78 	bl	8008df8 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8009108:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800910a:	6953      	ldr	r3, [r2, #20]
 800910c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009110:	6153      	str	r3, [r2, #20]

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8009112:	6927      	ldr	r7, [r4, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8009114:	6828      	ldr	r0, [r5, #0]
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8009116:	6822      	ldr	r2, [r4, #0]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8009118:	68c1      	ldr	r1, [r0, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800911a:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800911c:	f100 0360 	add.w	r3, r0, #96	; 0x60
 8009120:	f000 8091 	beq.w	8009246 <HAL_ADCEx_InjectedConfigChannel+0x22a>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8009124:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8009128:	0048      	lsls	r0, r1, #1
 800912a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 800912c:	f853 c027 	ldr.w	ip, [r3, r7, lsl #2]
 8009130:	4081      	lsls	r1, r0
 8009132:	48b2      	ldr	r0, [pc, #712]	; (80093fc <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 8009134:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8009138:	ea0c 0000 	and.w	r0, ip, r0
 800913c:	4310      	orrs	r0, r2
 800913e:	4301      	orrs	r1, r0
 8009140:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8009144:	f843 1027 	str.w	r1, [r3, r7, lsl #2]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009148:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800914a:	6883      	ldr	r3, [r0, #8]
 800914c:	07df      	lsls	r7, r3, #31
 800914e:	f100 80fb 	bmi.w	8009348 <HAL_ADCEx_InjectedConfigChannel+0x32c>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8009152:	68e7      	ldr	r7, [r4, #12]
 8009154:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8009156:	4aaa      	ldr	r2, [pc, #680]	; (8009400 <HAL_ADCEx_InjectedConfigChannel+0x3e4>)
 8009158:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 800915c:	f007 0e18 	and.w	lr, r7, #24
 8009160:	f3c3 0c12 	ubfx	ip, r3, #0, #19
 8009164:	fa22 f20e 	lsr.w	r2, r2, lr
 8009168:	401a      	ands	r2, r3
 800916a:	ea21 010c 	bic.w	r1, r1, ip
 800916e:	430a      	orrs	r2, r1
 8009170:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009174:	4aa3      	ldr	r2, [pc, #652]	; (8009404 <HAL_ADCEx_InjectedConfigChannel+0x3e8>)
 8009176:	4297      	cmp	r7, r2
 8009178:	f040 80e6 	bne.w	8009348 <HAL_ADCEx_InjectedConfigChannel+0x32c>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800917c:	f1bc 0f00 	cmp.w	ip, #0
 8009180:	f040 80b9 	bne.w	80092f6 <HAL_ADCEx_InjectedConfigChannel+0x2da>
 8009184:	0e99      	lsrs	r1, r3, #26
 8009186:	3101      	adds	r1, #1
 8009188:	f001 071f 	and.w	r7, r1, #31
 800918c:	0689      	lsls	r1, r1, #26
 800918e:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009192:	2f09      	cmp	r7, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8009194:	f04f 0101 	mov.w	r1, #1
 8009198:	fa01 f107 	lsl.w	r1, r1, r7
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800919c:	f240 80c5 	bls.w	800932a <HAL_ADCEx_InjectedConfigChannel+0x30e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80091a0:	4311      	orrs	r1, r2
 80091a2:	f1bc 0f00 	cmp.w	ip, #0
 80091a6:	f040 810f 	bne.w	80093c8 <HAL_ADCEx_InjectedConfigChannel+0x3ac>
 80091aa:	0e9b      	lsrs	r3, r3, #26
 80091ac:	3301      	adds	r3, #1
 80091ae:	f003 031f 	and.w	r3, r3, #31
 80091b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80091b6:	3b1e      	subs	r3, #30
 80091b8:	051b      	lsls	r3, r3, #20
 80091ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80091be:	4319      	orrs	r1, r3
 80091c0:	e0bf      	b.n	8009342 <HAL_ADCEx_InjectedConfigChannel+0x326>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80091c2:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80091c4:	bb3a      	cbnz	r2, 8009216 <HAL_ADCEx_InjectedConfigChannel+0x1fa>
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80091c6:	e9c5 2118 	strd	r2, r1, [r5, #96]	; 0x60
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80091ca:	6a22      	ldr	r2, [r4, #32]
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80091cc:	3901      	subs	r1, #1
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80091ce:	b122      	cbz	r2, 80091da <HAL_ADCEx_InjectedConfigChannel+0x1be>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80091d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80091d2:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 80091d6:	4311      	orrs	r1, r2
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80091d8:	4319      	orrs	r1, r3
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80091da:	6822      	ldr	r2, [r4, #0]
 80091dc:	f000 031f 	and.w	r3, r0, #31
 80091e0:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80091e4:	fa02 f303 	lsl.w	r3, r2, r3
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80091e8:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    hadc->InjectionConfig.ChannelCount--;
 80091ea:	6e68      	ldr	r0, [r5, #100]	; 0x64
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80091ec:	4313      	orrs	r3, r2
    hadc->InjectionConfig.ChannelCount--;
 80091ee:	3801      	subs	r0, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80091f0:	430b      	orrs	r3, r1
    hadc->InjectionConfig.ChannelCount--;
 80091f2:	6668      	str	r0, [r5, #100]	; 0x64
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80091f4:	662b      	str	r3, [r5, #96]	; 0x60
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80091f6:	2800      	cmp	r0, #0
 80091f8:	f47f af3e 	bne.w	8009078 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80091fc:	6829      	ldr	r1, [r5, #0]
 80091fe:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009200:	f022 42fb 	bic.w	r2, r2, #2105540608	; 0x7d800000
 8009204:	f422 02ef 	bic.w	r2, r2, #7831552	; 0x778000
 8009208:	f422 42bf 	bic.w	r2, r2, #24448	; 0x5f80
 800920c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8009210:	4313      	orrs	r3, r2
 8009212:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009214:	e730      	b.n	8009078 <HAL_ADCEx_InjectedConfigChannel+0x5c>
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8009216:	4619      	mov	r1, r3
 8009218:	e7df      	b.n	80091da <HAL_ADCEx_InjectedConfigChannel+0x1be>
      MODIFY_REG(hadc->Instance->CFGR,
 800921a:	68d1      	ldr	r1, [r2, #12]
 800921c:	e73b      	b.n	8009096 <HAL_ADCEx_InjectedConfigChannel+0x7a>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800921e:	2e01      	cmp	r6, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009220:	bf0b      	itete	eq
 8009222:	6dab      	ldreq	r3, [r5, #88]	; 0x58
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8009224:	68c2      	ldrne	r2, [r0, #12]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009226:	f043 0320 	orreq.w	r3, r3, #32
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800922a:	f022 7200 	bicne.w	r2, r2, #33554432	; 0x2000000
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800922e:	bf0e      	itee	eq
 8009230:	65ab      	streq	r3, [r5, #88]	; 0x58
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8009232:	60c2      	strne	r2, [r0, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009234:	461e      	movne	r6, r3
 8009236:	e74c      	b.n	80090d2 <HAL_ADCEx_InjectedConfigChannel+0xb6>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8009238:	f7ff fdde 	bl	8008df8 <LL_ADC_SetChannelSamplingTime>
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800923c:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800923e:	6953      	ldr	r3, [r2, #20]
 8009240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009244:	e764      	b.n	8009110 <HAL_ADCEx_InjectedConfigChannel+0xf4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009246:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8009248:	6e01      	ldr	r1, [r0, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800924a:	f3c2 0712 	ubfx	r7, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800924e:	f3c1 6184 	ubfx	r1, r1, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8009252:	2f00      	cmp	r7, #0
 8009254:	d139      	bne.n	80092ca <HAL_ADCEx_InjectedConfigChannel+0x2ae>
 8009256:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800925a:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 800925c:	bf02      	ittt	eq
 800925e:	6e02      	ldreq	r2, [r0, #96]	; 0x60
 8009260:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8009264:	6602      	streq	r2, [r0, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009266:	685a      	ldr	r2, [r3, #4]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8009268:	6822      	ldr	r2, [r4, #0]
 800926a:	6859      	ldr	r1, [r3, #4]
 800926c:	f3c2 0012 	ubfx	r0, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009270:	f3c1 6184 	ubfx	r1, r1, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8009274:	bb70      	cbnz	r0, 80092d4 <HAL_ADCEx_InjectedConfigChannel+0x2b8>
 8009276:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800927a:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 800927c:	bf02      	ittt	eq
 800927e:	685a      	ldreq	r2, [r3, #4]
 8009280:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8009284:	605a      	streq	r2, [r3, #4]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009286:	689a      	ldr	r2, [r3, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8009288:	6822      	ldr	r2, [r4, #0]
 800928a:	6899      	ldr	r1, [r3, #8]
 800928c:	f3c2 0012 	ubfx	r0, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009290:	f3c1 6184 	ubfx	r1, r1, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8009294:	bb18      	cbnz	r0, 80092de <HAL_ADCEx_InjectedConfigChannel+0x2c2>
 8009296:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800929a:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 800929c:	bf02      	ittt	eq
 800929e:	689a      	ldreq	r2, [r3, #8]
 80092a0:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80092a4:	609a      	streq	r2, [r3, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80092a6:	68da      	ldr	r2, [r3, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80092a8:	6822      	ldr	r2, [r4, #0]
 80092aa:	68d9      	ldr	r1, [r3, #12]
 80092ac:	f3c2 0012 	ubfx	r0, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80092b0:	f3c1 6184 	ubfx	r1, r1, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80092b4:	b9c0      	cbnz	r0, 80092e8 <HAL_ADCEx_InjectedConfigChannel+0x2cc>
 80092b6:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80092ba:	4291      	cmp	r1, r2
 80092bc:	f47f af44 	bne.w	8009148 <HAL_ADCEx_InjectedConfigChannel+0x12c>
  MODIFY_REG(*preg,
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80092c6:	60da      	str	r2, [r3, #12]
}
 80092c8:	e73e      	b.n	8009148 <HAL_ADCEx_InjectedConfigChannel+0x12c>
 80092ca:	fa92 f2a2 	rbit	r2, r2
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80092ce:	fab2 f282 	clz	r2, r2
 80092d2:	e7c2      	b.n	800925a <HAL_ADCEx_InjectedConfigChannel+0x23e>
 80092d4:	fa92 f2a2 	rbit	r2, r2
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80092d8:	fab2 f282 	clz	r2, r2
 80092dc:	e7cd      	b.n	800927a <HAL_ADCEx_InjectedConfigChannel+0x25e>
 80092de:	fa92 f2a2 	rbit	r2, r2
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80092e2:	fab2 f282 	clz	r2, r2
 80092e6:	e7d8      	b.n	800929a <HAL_ADCEx_InjectedConfigChannel+0x27e>
 80092e8:	fa92 f2a2 	rbit	r2, r2
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80092ec:	fab2 f282 	clz	r2, r2
 80092f0:	e7e3      	b.n	80092ba <HAL_ADCEx_InjectedConfigChannel+0x29e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80092f2:	2600      	movs	r6, #0
 80092f4:	e728      	b.n	8009148 <HAL_ADCEx_InjectedConfigChannel+0x12c>
 80092f6:	fa93 f2a3 	rbit	r2, r3
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80092fa:	fab2 f282 	clz	r2, r2
 80092fe:	3201      	adds	r2, #1
 8009300:	f002 021f 	and.w	r2, r2, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009304:	2a09      	cmp	r2, #9
 8009306:	d84d      	bhi.n	80093a4 <HAL_ADCEx_InjectedConfigChannel+0x388>
 8009308:	fa93 f1a3 	rbit	r1, r3
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800930c:	fab1 f181 	clz	r1, r1
 8009310:	3101      	adds	r1, #1
 8009312:	0689      	lsls	r1, r1, #26
 8009314:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
 8009318:	fa93 f1a3 	rbit	r1, r3
 800931c:	fab1 f181 	clz	r1, r1
 8009320:	3101      	adds	r1, #1
 8009322:	f001 071f 	and.w	r7, r1, #31
 8009326:	2101      	movs	r1, #1
 8009328:	40b9      	lsls	r1, r7
 800932a:	4311      	orrs	r1, r2
 800932c:	f1bc 0f00 	cmp.w	ip, #0
 8009330:	d133      	bne.n	800939a <HAL_ADCEx_InjectedConfigChannel+0x37e>
 8009332:	0e9f      	lsrs	r7, r3, #26
 8009334:	3701      	adds	r7, #1
 8009336:	f007 071f 	and.w	r7, r7, #31
 800933a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800933e:	053f      	lsls	r7, r7, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009340:	4339      	orrs	r1, r7
 8009342:	68a2      	ldr	r2, [r4, #8]
 8009344:	f7ff fd58 	bl	8008df8 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8009348:	6820      	ldr	r0, [r4, #0]
 800934a:	4b2f      	ldr	r3, [pc, #188]	; (8009408 <HAL_ADCEx_InjectedConfigChannel+0x3ec>)
 800934c:	4218      	tst	r0, r3
 800934e:	d01e      	beq.n	800938e <HAL_ADCEx_InjectedConfigChannel+0x372>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009350:	4b2e      	ldr	r3, [pc, #184]	; (800940c <HAL_ADCEx_InjectedConfigChannel+0x3f0>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 8009352:	4a2f      	ldr	r2, [pc, #188]	; (8009410 <HAL_ADCEx_InjectedConfigChannel+0x3f4>)
 8009354:	6899      	ldr	r1, [r3, #8]
 8009356:	4290      	cmp	r0, r2
 8009358:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
 800935c:	d13c      	bne.n	80093d8 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800935e:	0208      	lsls	r0, r1, #8
 8009360:	d415      	bmi.n	800938e <HAL_ADCEx_InjectedConfigChannel+0x372>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009362:	6829      	ldr	r1, [r5, #0]
 8009364:	4a2b      	ldr	r2, [pc, #172]	; (8009414 <HAL_ADCEx_InjectedConfigChannel+0x3f8>)
 8009366:	4291      	cmp	r1, r2
 8009368:	d111      	bne.n	800938e <HAL_ADCEx_InjectedConfigChannel+0x372>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800936a:	689a      	ldr	r2, [r3, #8]
 800936c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8009370:	4322      	orrs	r2, r4
 8009372:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009376:	609a      	str	r2, [r3, #8]
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8009378:	4b27      	ldr	r3, [pc, #156]	; (8009418 <HAL_ADCEx_InjectedConfigChannel+0x3fc>)
 800937a:	4a28      	ldr	r2, [pc, #160]	; (800941c <HAL_ADCEx_InjectedConfigChannel+0x400>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009382:	220c      	movs	r2, #12
 8009384:	4353      	muls	r3, r2
 8009386:	3318      	adds	r3, #24
        while (wait_loop_index != 0UL)
        {
          wait_loop_index--;
 8009388:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 800938a:	9b01      	ldr	r3, [sp, #4]
 800938c:	bb0b      	cbnz	r3, 80093d2 <HAL_ADCEx_InjectedConfigChannel+0x3b6>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800938e:	2300      	movs	r3, #0
 8009390:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8009394:	4630      	mov	r0, r6
 8009396:	b003      	add	sp, #12
 8009398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800939a:	fa93 f7a3 	rbit	r7, r3
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800939e:	fab7 f787 	clz	r7, r7
 80093a2:	e7c7      	b.n	8009334 <HAL_ADCEx_InjectedConfigChannel+0x318>
 80093a4:	fa93 f1a3 	rbit	r1, r3
 80093a8:	fab1 f181 	clz	r1, r1
 80093ac:	3101      	adds	r1, #1
 80093ae:	0689      	lsls	r1, r1, #26
 80093b0:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
 80093b4:	fa93 f1a3 	rbit	r1, r3
 80093b8:	fab1 f181 	clz	r1, r1
 80093bc:	3101      	adds	r1, #1
 80093be:	f001 071f 	and.w	r7, r1, #31
 80093c2:	2101      	movs	r1, #1
 80093c4:	40b9      	lsls	r1, r7
 80093c6:	e6eb      	b.n	80091a0 <HAL_ADCEx_InjectedConfigChannel+0x184>
 80093c8:	fa93 f3a3 	rbit	r3, r3
 80093cc:	fab3 f383 	clz	r3, r3
 80093d0:	e6ec      	b.n	80091ac <HAL_ADCEx_InjectedConfigChannel+0x190>
          wait_loop_index--;
 80093d2:	9b01      	ldr	r3, [sp, #4]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	e7d7      	b.n	8009388 <HAL_ADCEx_InjectedConfigChannel+0x36c>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80093d8:	4a11      	ldr	r2, [pc, #68]	; (8009420 <HAL_ADCEx_InjectedConfigChannel+0x404>)
 80093da:	4290      	cmp	r0, r2
 80093dc:	d122      	bne.n	8009424 <HAL_ADCEx_InjectedConfigChannel+0x408>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80093de:	01c9      	lsls	r1, r1, #7
 80093e0:	d4d5      	bmi.n	800938e <HAL_ADCEx_InjectedConfigChannel+0x372>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80093e2:	6829      	ldr	r1, [r5, #0]
 80093e4:	f1a2 42f7 	sub.w	r2, r2, #2071986176	; 0x7b800000
 80093e8:	4291      	cmp	r1, r2
 80093ea:	d1d0      	bne.n	800938e <HAL_ADCEx_InjectedConfigChannel+0x372>
 80093ec:	689a      	ldr	r2, [r3, #8]
 80093ee:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80093f2:	4322      	orrs	r2, r4
 80093f4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80093f8:	609a      	str	r2, [r3, #8]
}
 80093fa:	e7c8      	b.n	800938e <HAL_ADCEx_InjectedConfigChannel+0x372>
 80093fc:	03fff000 	.word	0x03fff000
 8009400:	0007ffff 	.word	0x0007ffff
 8009404:	407f0000 	.word	0x407f0000
 8009408:	80080000 	.word	0x80080000
 800940c:	50040300 	.word	0x50040300
 8009410:	c7520000 	.word	0xc7520000
 8009414:	50040000 	.word	0x50040000
 8009418:	200000a4 	.word	0x200000a4
 800941c:	00030d40 	.word	0x00030d40
 8009420:	cb840000 	.word	0xcb840000
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8009424:	4a08      	ldr	r2, [pc, #32]	; (8009448 <HAL_ADCEx_InjectedConfigChannel+0x42c>)
 8009426:	4290      	cmp	r0, r2
 8009428:	d1b1      	bne.n	800938e <HAL_ADCEx_InjectedConfigChannel+0x372>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800942a:	024a      	lsls	r2, r1, #9
 800942c:	d4af      	bmi.n	800938e <HAL_ADCEx_InjectedConfigChannel+0x372>
      if (ADC_VREFINT_INSTANCE(hadc))
 800942e:	6829      	ldr	r1, [r5, #0]
 8009430:	4a06      	ldr	r2, [pc, #24]	; (800944c <HAL_ADCEx_InjectedConfigChannel+0x430>)
 8009432:	4291      	cmp	r1, r2
 8009434:	d1ab      	bne.n	800938e <HAL_ADCEx_InjectedConfigChannel+0x372>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009436:	689a      	ldr	r2, [r3, #8]
 8009438:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800943c:	4322      	orrs	r2, r4
 800943e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8009442:	e7d9      	b.n	80093f8 <HAL_ADCEx_InjectedConfigChannel+0x3dc>
  __HAL_LOCK(hadc);
 8009444:	2602      	movs	r6, #2
 8009446:	e7a5      	b.n	8009394 <HAL_ADCEx_InjectedConfigChannel+0x378>
 8009448:	80000001 	.word	0x80000001
 800944c:	50040000 	.word	0x50040000

08009450 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009450:	4907      	ldr	r1, [pc, #28]	; (8009470 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8009452:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009454:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009458:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800945a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800945c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009460:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800946c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800946e:	4770      	bx	lr
 8009470:	e000ed00 	.word	0xe000ed00

08009474 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009474:	4b16      	ldr	r3, [pc, #88]	; (80094d0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009476:	b530      	push	{r4, r5, lr}
 8009478:	68dc      	ldr	r4, [r3, #12]
 800947a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800947e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009482:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009484:	2d04      	cmp	r5, #4
 8009486:	bf28      	it	cs
 8009488:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800948a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800948c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009490:	bf8c      	ite	hi
 8009492:	3c03      	subhi	r4, #3
 8009494:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009496:	fa03 f505 	lsl.w	r5, r3, r5
 800949a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800949e:	40a3      	lsls	r3, r4
 80094a0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80094a4:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80094a6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80094a8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094ac:	bfac      	ite	ge
 80094ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094b2:	4a08      	ldrlt	r2, [pc, #32]	; (80094d4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094b4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094b8:	bfb8      	it	lt
 80094ba:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	bfaa      	itet	ge
 80094c2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094c6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094c8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80094cc:	bd30      	pop	{r4, r5, pc}
 80094ce:	bf00      	nop
 80094d0:	e000ed00 	.word	0xe000ed00
 80094d4:	e000ed14 	.word	0xe000ed14

080094d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80094d8:	2800      	cmp	r0, #0
 80094da:	db08      	blt.n	80094ee <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80094dc:	0942      	lsrs	r2, r0, #5
 80094de:	2301      	movs	r3, #1
 80094e0:	f000 001f 	and.w	r0, r0, #31
 80094e4:	fa03 f000 	lsl.w	r0, r3, r0
 80094e8:	4b01      	ldr	r3, [pc, #4]	; (80094f0 <HAL_NVIC_EnableIRQ+0x18>)
 80094ea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80094ee:	4770      	bx	lr
 80094f0:	e000e100 	.word	0xe000e100

080094f4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80094f4:	2800      	cmp	r0, #0
 80094f6:	db0d      	blt.n	8009514 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80094f8:	0943      	lsrs	r3, r0, #5
 80094fa:	2201      	movs	r2, #1
 80094fc:	f000 001f 	and.w	r0, r0, #31
 8009500:	fa02 f000 	lsl.w	r0, r2, r0
 8009504:	3320      	adds	r3, #32
 8009506:	4a04      	ldr	r2, [pc, #16]	; (8009518 <HAL_NVIC_DisableIRQ+0x24>)
 8009508:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800950c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009510:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	e000e100 	.word	0xe000e100

0800951c <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800951c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009520:	4905      	ldr	r1, [pc, #20]	; (8009538 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009522:	4b06      	ldr	r3, [pc, #24]	; (800953c <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009524:	68ca      	ldr	r2, [r1, #12]
 8009526:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800952a:	4313      	orrs	r3, r2
 800952c:	60cb      	str	r3, [r1, #12]
 800952e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009532:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8009534:	e7fd      	b.n	8009532 <HAL_NVIC_SystemReset+0x16>
 8009536:	bf00      	nop
 8009538:	e000ed00 	.word	0xe000ed00
 800953c:	05fa0004 	.word	0x05fa0004

08009540 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009540:	3801      	subs	r0, #1
 8009542:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8009546:	d20b      	bcs.n	8009560 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009548:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800954c:	4a05      	ldr	r2, [pc, #20]	; (8009564 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800954e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009550:	21f0      	movs	r1, #240	; 0xf0
 8009552:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009556:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009558:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800955a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800955c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800955e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8009560:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8009562:	4770      	bx	lr
 8009564:	e000ed00 	.word	0xe000ed00

08009568 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8009568:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800956c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800956e:	691a      	ldr	r2, [r3, #16]
 8009570:	bf0c      	ite	eq
 8009572:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8009576:	f022 0204 	bicne.w	r2, r2, #4
 800957a:	611a      	str	r2, [r3, #16]
  }
}
 800957c:	4770      	bx	lr

0800957e <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800957e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009580:	f022 0503 	bic.w	r5, r2, #3
  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009584:	6806      	ldr	r6, [r0, #0]
 8009586:	460c      	mov	r4, r1
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009588:	0897      	lsrs	r7, r2, #2
 800958a:	440d      	add	r5, r1
 800958c:	42a5      	cmp	r5, r4
 800958e:	d108      	bne.n	80095a2 <CRC_Handle_8+0x24>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
                         (uint32_t)pBuffer[(4U * i) + 3U];
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8009590:	f012 0203 	ands.w	r2, r2, #3
 8009594:	d01e      	beq.n	80095d4 <CRC_Handle_8+0x56>
  {
    if ((BufferLength % 4U) == 1U)
 8009596:	2a01      	cmp	r2, #1
 8009598:	d114      	bne.n	80095c4 <CRC_Handle_8+0x46>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800959a:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800959e:	7033      	strb	r3, [r6, #0]
 80095a0:	e018      	b.n	80095d4 <CRC_Handle_8+0x56>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80095a2:	7863      	ldrb	r3, [r4, #1]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80095a4:	f894 c000 	ldrb.w	ip, [r4]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80095a8:	041b      	lsls	r3, r3, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80095aa:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80095ae:	f894 c003 	ldrb.w	ip, [r4, #3]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80095b2:	ea43 030c 	orr.w	r3, r3, ip
 80095b6:	f894 c002 	ldrb.w	ip, [r4, #2]
 80095ba:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80095be:	6033      	str	r3, [r6, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80095c0:	3404      	adds	r4, #4
 80095c2:	e7e3      	b.n	800958c <CRC_Handle_8+0xe>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80095c4:	786b      	ldrb	r3, [r5, #1]
    if ((BufferLength % 4U) == 2U)
 80095c6:	2a02      	cmp	r2, #2
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80095c8:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
 80095cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      *pReg = data;
 80095d0:	8033      	strh	r3, [r6, #0]
    if ((BufferLength % 4U) == 2U)
 80095d2:	d102      	bne.n	80095da <CRC_Handle_8+0x5c>
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80095d4:	6803      	ldr	r3, [r0, #0]
 80095d6:	6818      	ldr	r0, [r3, #0]
}
 80095d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80095da:	78ab      	ldrb	r3, [r5, #2]
 80095dc:	e7df      	b.n	800959e <CRC_Handle_8+0x20>

080095de <CRC_Handle_16>:
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80095de:	6800      	ldr	r0, [r0, #0]
{
 80095e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (i = 0U; i < (BufferLength / 2U); i++)
 80095e2:	2300      	movs	r3, #0
 80095e4:	0855      	lsrs	r5, r2, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80095e6:	1c8e      	adds	r6, r1, #2
  for (i = 0U; i < (BufferLength / 2U); i++)
 80095e8:	429d      	cmp	r5, r3
 80095ea:	d106      	bne.n	80095fa <CRC_Handle_16+0x1c>
  }
  if ((BufferLength % 2U) != 0U)
 80095ec:	07d3      	lsls	r3, r2, #31
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 80095ee:	bf44      	itt	mi
 80095f0:	f831 3025 	ldrhmi.w	r3, [r1, r5, lsl #2]
 80095f4:	8003      	strhmi	r3, [r0, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80095f6:	6800      	ldr	r0, [r0, #0]
}
 80095f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80095fa:	f831 7023 	ldrh.w	r7, [r1, r3, lsl #2]
 80095fe:	f836 4023 	ldrh.w	r4, [r6, r3, lsl #2]
 8009602:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8009606:	6004      	str	r4, [r0, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009608:	3301      	adds	r3, #1
 800960a:	e7ed      	b.n	80095e8 <CRC_Handle_16+0xa>

0800960c <HAL_CRC_Init>:
{
 800960c:	b510      	push	{r4, lr}
  if (hcrc == NULL)
 800960e:	4604      	mov	r4, r0
 8009610:	b908      	cbnz	r0, 8009616 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8009612:	2001      	movs	r0, #1
}
 8009614:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009616:	7f43      	ldrb	r3, [r0, #29]
 8009618:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800961c:	b913      	cbnz	r3, 8009624 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800961e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8009620:	f010 f8f6 	bl	8019810 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009624:	2302      	movs	r3, #2
 8009626:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009628:	7923      	ldrb	r3, [r4, #4]
 800962a:	b9e3      	cbnz	r3, 8009666 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	4a13      	ldr	r2, [pc, #76]	; (800967c <HAL_CRC_Init+0x70>)
 8009630:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009632:	689a      	ldr	r2, [r3, #8]
 8009634:	f022 0218 	bic.w	r2, r2, #24
 8009638:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800963a:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800963c:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800963e:	b9d2      	cbnz	r2, 8009676 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009640:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009644:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009646:	689a      	ldr	r2, [r3, #8]
 8009648:	6961      	ldr	r1, [r4, #20]
 800964a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800964e:	430a      	orrs	r2, r1
 8009650:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009652:	689a      	ldr	r2, [r3, #8]
 8009654:	69a1      	ldr	r1, [r4, #24]
 8009656:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800965a:	430a      	orrs	r2, r1
 800965c:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800965e:	2301      	movs	r3, #1
 8009660:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8009662:	2000      	movs	r0, #0
 8009664:	e7d6      	b.n	8009614 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009666:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800966a:	4620      	mov	r0, r4
 800966c:	f000 f847 	bl	80096fe <HAL_CRCEx_Polynomial_Set>
 8009670:	2800      	cmp	r0, #0
 8009672:	d0e2      	beq.n	800963a <HAL_CRC_Init+0x2e>
 8009674:	e7cd      	b.n	8009612 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009676:	6922      	ldr	r2, [r4, #16]
 8009678:	e7e4      	b.n	8009644 <HAL_CRC_Init+0x38>
 800967a:	bf00      	nop
 800967c:	04c11db7 	.word	0x04c11db7

08009680 <HAL_CRC_DeInit>:
{
 8009680:	b538      	push	{r3, r4, r5, lr}
  if (hcrc == NULL)
 8009682:	4605      	mov	r5, r0
 8009684:	b198      	cbz	r0, 80096ae <HAL_CRC_DeInit+0x2e>
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8009686:	7f43      	ldrb	r3, [r0, #29]
 8009688:	2b02      	cmp	r3, #2
 800968a:	b2dc      	uxtb	r4, r3
 800968c:	d00d      	beq.n	80096aa <HAL_CRC_DeInit+0x2a>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800968e:	2302      	movs	r3, #2
 8009690:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8009692:	6803      	ldr	r3, [r0, #0]
 8009694:	689a      	ldr	r2, [r3, #8]
 8009696:	f042 0201 	orr.w	r2, r2, #1
 800969a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 800969c:	2400      	movs	r4, #0
 800969e:	685a      	ldr	r2, [r3, #4]
 80096a0:	605c      	str	r4, [r3, #4]
  HAL_CRC_MspDeInit(hcrc);
 80096a2:	f010 f8c5 	bl	8019830 <HAL_CRC_MspDeInit>
  hcrc->State = HAL_CRC_STATE_RESET;
 80096a6:	776c      	strb	r4, [r5, #29]
  __HAL_UNLOCK(hcrc);
 80096a8:	772c      	strb	r4, [r5, #28]
}
 80096aa:	4620      	mov	r0, r4
 80096ac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80096ae:	2401      	movs	r4, #1
 80096b0:	e7fb      	b.n	80096aa <HAL_CRC_DeInit+0x2a>

080096b2 <HAL_CRC_Calculate>:
{
 80096b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 80096b4:	2602      	movs	r6, #2
 80096b6:	7746      	strb	r6, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 80096b8:	6806      	ldr	r6, [r0, #0]
 80096ba:	68b7      	ldr	r7, [r6, #8]
 80096bc:	f047 0701 	orr.w	r7, r7, #1
 80096c0:	60b7      	str	r7, [r6, #8]
  switch (hcrc->InputDataFormat)
 80096c2:	6a07      	ldr	r7, [r0, #32]
 80096c4:	2f02      	cmp	r7, #2
{
 80096c6:	4604      	mov	r4, r0
  switch (hcrc->InputDataFormat)
 80096c8:	d014      	beq.n	80096f4 <HAL_CRC_Calculate+0x42>
 80096ca:	2f03      	cmp	r7, #3
 80096cc:	d005      	beq.n	80096da <HAL_CRC_Calculate+0x28>
 80096ce:	2f01      	cmp	r7, #1
 80096d0:	d00d      	beq.n	80096ee <HAL_CRC_Calculate+0x3c>
 80096d2:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 80096d4:	2301      	movs	r3, #1
 80096d6:	7763      	strb	r3, [r4, #29]
}
 80096d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096da:	eb01 0582 	add.w	r5, r1, r2, lsl #2
      for (index = 0U; index < BufferLength; index++)
 80096de:	42a9      	cmp	r1, r5
 80096e0:	d101      	bne.n	80096e6 <HAL_CRC_Calculate+0x34>
      temp = hcrc->Instance->DR;
 80096e2:	6830      	ldr	r0, [r6, #0]
      break;
 80096e4:	e7f6      	b.n	80096d4 <HAL_CRC_Calculate+0x22>
        hcrc->Instance->DR = pBuffer[index];
 80096e6:	f851 3b04 	ldr.w	r3, [r1], #4
 80096ea:	6033      	str	r3, [r6, #0]
      for (index = 0U; index < BufferLength; index++)
 80096ec:	e7f7      	b.n	80096de <HAL_CRC_Calculate+0x2c>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80096ee:	f7ff ff46 	bl	800957e <CRC_Handle_8>
      break;
 80096f2:	e7ef      	b.n	80096d4 <HAL_CRC_Calculate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80096f4:	f7ff ff73 	bl	80095de <CRC_Handle_16>
      break;
 80096f8:	e7ec      	b.n	80096d4 <HAL_CRC_Calculate+0x22>

080096fa <HAL_CRC_GetState>:
  return hcrc->State;
 80096fa:	7f40      	ldrb	r0, [r0, #29]
}
 80096fc:	4770      	bx	lr

080096fe <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80096fe:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009700:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009702:	3b01      	subs	r3, #1
 8009704:	d31c      	bcc.n	8009740 <HAL_CRCEx_Polynomial_Set+0x42>
 8009706:	fa21 f403 	lsr.w	r4, r1, r3
 800970a:	07e4      	lsls	r4, r4, #31
 800970c:	d5f9      	bpl.n	8009702 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800970e:	2a10      	cmp	r2, #16
 8009710:	d012      	beq.n	8009738 <HAL_CRCEx_Polynomial_Set+0x3a>
 8009712:	d804      	bhi.n	800971e <HAL_CRCEx_Polynomial_Set+0x20>
 8009714:	b13a      	cbz	r2, 8009726 <HAL_CRCEx_Polynomial_Set+0x28>
 8009716:	2a08      	cmp	r2, #8
 8009718:	d010      	beq.n	800973c <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 800971a:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800971c:	e00b      	b.n	8009736 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 800971e:	2a18      	cmp	r2, #24
 8009720:	d1fb      	bne.n	800971a <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8009722:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8009724:	d8f9      	bhi.n	800971a <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009726:	6800      	ldr	r0, [r0, #0]
 8009728:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800972a:	6883      	ldr	r3, [r0, #8]
 800972c:	f023 0318 	bic.w	r3, r3, #24
 8009730:	431a      	orrs	r2, r3
 8009732:	6082      	str	r2, [r0, #8]
 8009734:	2000      	movs	r0, #0
}
 8009736:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8009738:	2b07      	cmp	r3, #7
 800973a:	e7f3      	b.n	8009724 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 800973c:	2b0f      	cmp	r3, #15
 800973e:	e7f1      	b.n	8009724 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8009740:	2a00      	cmp	r2, #0
 8009742:	d1ea      	bne.n	800971a <HAL_CRCEx_Polynomial_Set+0x1c>
 8009744:	e7ef      	b.n	8009726 <HAL_CRCEx_Polynomial_Set+0x28>

08009746 <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8009746:	6b42      	ldr	r2, [r0, #52]	; 0x34
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8009748:	6803      	ldr	r3, [r0, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800974a:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 800974e:	b942      	cbnz	r2, 8009762 <DFSDM_RegConvStart+0x1c>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009756:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8009758:	2901      	cmp	r1, #1
 800975a:	bf0c      	ite	eq
 800975c:	2302      	moveq	r3, #2
 800975e:	2304      	movne	r3, #4
 8009760:	e01b      	b.n	800979a <DFSDM_RegConvStart+0x54>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	f022 0201 	bic.w	r2, r2, #1
 8009768:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009770:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8009772:	681a      	ldr	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8009774:	2903      	cmp	r1, #3
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8009776:	f042 0201 	orr.w	r2, r2, #1
 800977a:	601a      	str	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800977c:	d1ec      	bne.n	8009758 <DFSDM_RegConvStart+0x12>
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800977e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8009780:	b91a      	cbnz	r2, 800978a <DFSDM_RegConvStart+0x44>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	f042 0202 	orr.w	r2, r2, #2
 8009788:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800978a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800978e:	2b01      	cmp	r3, #1
 8009790:	bf0c      	ite	eq
 8009792:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 8009794:	2301      	movne	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8009796:	6483      	str	r3, [r0, #72]	; 0x48
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8009798:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800979a:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
}
 800979e:	4770      	bx	lr

080097a0 <DFSDM_RegConvStop>:
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80097a0:	6803      	ldr	r3, [r0, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	f022 0201 	bic.w	r2, r2, #1
 80097a8:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80097aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80097ac:	2a01      	cmp	r2, #1
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80097ae:	bf02      	ittt	eq
 80097b0:	681a      	ldreq	r2, [r3, #0]
 80097b2:	f422 2200 	biceq.w	r2, r2, #524288	; 0x80000
 80097b6:	601a      	streq	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	f042 0201 	orr.w	r2, r2, #1
 80097be:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80097c0:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 80097c4:	2a04      	cmp	r2, #4
 80097c6:	d110      	bne.n	80097ea <DFSDM_RegConvStop+0x4a>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80097c8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80097ca:	b91a      	cbnz	r2, 80097d4 <DFSDM_RegConvStop+0x34>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	f042 0202 	orr.w	r2, r2, #2
 80097d2:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80097d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80097d8:	2b01      	cmp	r3, #1
 80097da:	bf0c      	ite	eq
 80097dc:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 80097de:	2301      	movne	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80097e0:	6483      	str	r3, [r0, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80097e2:	2303      	movs	r3, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80097e4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
}
 80097e8:	4770      	bx	lr
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80097ea:	2a02      	cmp	r2, #2
 80097ec:	bf0c      	ite	eq
 80097ee:	2301      	moveq	r3, #1
 80097f0:	2303      	movne	r3, #3
 80097f2:	e7f7      	b.n	80097e4 <DFSDM_RegConvStop+0x44>

080097f4 <DFSDM_GetChannelFromInstance>:
  if (Instance == DFSDM1_Channel0)
 80097f4:	4b11      	ldr	r3, [pc, #68]	; (800983c <DFSDM_GetChannelFromInstance+0x48>)
 80097f6:	4298      	cmp	r0, r3
 80097f8:	d014      	beq.n	8009824 <DFSDM_GetChannelFromInstance+0x30>
  else if (Instance == DFSDM1_Channel1)
 80097fa:	3320      	adds	r3, #32
 80097fc:	4298      	cmp	r0, r3
 80097fe:	d013      	beq.n	8009828 <DFSDM_GetChannelFromInstance+0x34>
  else if (Instance == DFSDM1_Channel2)
 8009800:	3320      	adds	r3, #32
 8009802:	4298      	cmp	r0, r3
 8009804:	d012      	beq.n	800982c <DFSDM_GetChannelFromInstance+0x38>
  else if (Instance == DFSDM1_Channel4)
 8009806:	3340      	adds	r3, #64	; 0x40
 8009808:	4298      	cmp	r0, r3
 800980a:	d011      	beq.n	8009830 <DFSDM_GetChannelFromInstance+0x3c>
  else if (Instance == DFSDM1_Channel5)
 800980c:	3320      	adds	r3, #32
 800980e:	4298      	cmp	r0, r3
 8009810:	d010      	beq.n	8009834 <DFSDM_GetChannelFromInstance+0x40>
  else if (Instance == DFSDM1_Channel6)
 8009812:	3320      	adds	r3, #32
 8009814:	4298      	cmp	r0, r3
 8009816:	d00f      	beq.n	8009838 <DFSDM_GetChannelFromInstance+0x44>
    channel = 3;
 8009818:	3320      	adds	r3, #32
 800981a:	4298      	cmp	r0, r3
 800981c:	bf0c      	ite	eq
 800981e:	2007      	moveq	r0, #7
 8009820:	2003      	movne	r0, #3
 8009822:	4770      	bx	lr
    channel = 0;
 8009824:	2000      	movs	r0, #0
 8009826:	4770      	bx	lr
    channel = 1;
 8009828:	2001      	movs	r0, #1
 800982a:	4770      	bx	lr
    channel = 2;
 800982c:	2002      	movs	r0, #2
 800982e:	4770      	bx	lr
    channel = 4;
 8009830:	2004      	movs	r0, #4
 8009832:	4770      	bx	lr
    channel = 5;
 8009834:	2005      	movs	r0, #5
 8009836:	4770      	bx	lr
    channel = 6;
 8009838:	2006      	movs	r0, #6
}
 800983a:	4770      	bx	lr
 800983c:	40016000 	.word	0x40016000

08009840 <HAL_DFSDM_ChannelMspInit>:
}
 8009840:	4770      	bx	lr
	...

08009844 <HAL_DFSDM_ChannelInit>:
{
 8009844:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 8009846:	4604      	mov	r4, r0
 8009848:	2800      	cmp	r0, #0
 800984a:	d066      	beq.n	800991a <HAL_DFSDM_ChannelInit+0xd6>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800984c:	6800      	ldr	r0, [r0, #0]
 800984e:	4d34      	ldr	r5, [pc, #208]	; (8009920 <HAL_DFSDM_ChannelInit+0xdc>)
 8009850:	f7ff ffd0 	bl	80097f4 <DFSDM_GetChannelFromInstance>
 8009854:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d15e      	bne.n	800991a <HAL_DFSDM_ChannelInit+0xd6>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800985c:	4620      	mov	r0, r4
 800985e:	f7ff ffef 	bl	8009840 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8009862:	6a2b      	ldr	r3, [r5, #32]
 8009864:	3301      	adds	r3, #1
 8009866:	622b      	str	r3, [r5, #32]
  if (v_dfsdm1ChannelCounter == 1U)
 8009868:	6a2b      	ldr	r3, [r5, #32]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d119      	bne.n	80098a2 <HAL_DFSDM_ChannelInit+0x5e>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800986e:	4b2d      	ldr	r3, [pc, #180]	; (8009924 <HAL_DFSDM_ChannelInit+0xe0>)
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8009876:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	68a1      	ldr	r1, [r4, #8]
 800987c:	430a      	orrs	r2, r1
 800987e:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8009886:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8009888:	7922      	ldrb	r2, [r4, #4]
 800988a:	2a01      	cmp	r2, #1
 800988c:	d105      	bne.n	800989a <HAL_DFSDM_ChannelInit+0x56>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800988e:	68e1      	ldr	r1, [r4, #12]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	3901      	subs	r1, #1
 8009894:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009898:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80098a0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80098a2:	6820      	ldr	r0, [r4, #0]
 80098a4:	6803      	ldr	r3, [r0, #0]
 80098a6:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 80098aa:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80098ac:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 80098b0:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 80098b2:	69a1      	ldr	r1, [r4, #24]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80098b4:	6802      	ldr	r2, [r0, #0]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80098b6:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80098b8:	4313      	orrs	r3, r2
 80098ba:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80098bc:	6803      	ldr	r3, [r0, #0]
 80098be:	f023 030f 	bic.w	r3, r3, #15
 80098c2:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80098c4:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80098c8:	6802      	ldr	r2, [r0, #0]
 80098ca:	430b      	orrs	r3, r1
 80098cc:	4313      	orrs	r3, r2
 80098ce:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80098d0:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80098d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80098d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80098d6:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 80098da:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80098dc:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80098de:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80098e0:	430b      	orrs	r3, r1
 80098e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098e6:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80098e8:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80098ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80098ec:	f003 0307 	and.w	r3, r3, #7
 80098f0:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80098f2:	6843      	ldr	r3, [r0, #4]
 80098f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80098f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80098fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80098fe:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8009900:	6803      	ldr	r3, [r0, #0]
 8009902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009906:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8009908:	2301      	movs	r3, #1
 800990a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800990e:	f7ff ff71 	bl	80097f4 <DFSDM_GetChannelFromInstance>
 8009912:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8009916:	2000      	movs	r0, #0
}
 8009918:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800991a:	2001      	movs	r0, #1
 800991c:	e7fc      	b.n	8009918 <HAL_DFSDM_ChannelInit+0xd4>
 800991e:	bf00      	nop
 8009920:	200011c8 	.word	0x200011c8
 8009924:	40016000 	.word	0x40016000

08009928 <HAL_DFSDM_ChannelMspDeInit>:
 8009928:	4770      	bx	lr
	...

0800992c <HAL_DFSDM_ChannelDeInit>:
{
 800992c:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 800992e:	4604      	mov	r4, r0
 8009930:	b310      	cbz	r0, 8009978 <HAL_DFSDM_ChannelDeInit+0x4c>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] == NULL)
 8009932:	6802      	ldr	r2, [r0, #0]
 8009934:	4d11      	ldr	r5, [pc, #68]	; (800997c <HAL_DFSDM_ChannelDeInit+0x50>)
 8009936:	4610      	mov	r0, r2
 8009938:	f7ff ff5c 	bl	80097f4 <DFSDM_GetChannelFromInstance>
 800993c:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8009940:	b1d3      	cbz	r3, 8009978 <HAL_DFSDM_ChannelDeInit+0x4c>
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CHEN);
 8009942:	6813      	ldr	r3, [r2, #0]
 8009944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009948:	6013      	str	r3, [r2, #0]
  v_dfsdm1ChannelCounter--;
 800994a:	6a2b      	ldr	r3, [r5, #32]
 800994c:	3b01      	subs	r3, #1
 800994e:	622b      	str	r3, [r5, #32]
  if (v_dfsdm1ChannelCounter == 0U)
 8009950:	6a2b      	ldr	r3, [r5, #32]
 8009952:	b923      	cbnz	r3, 800995e <HAL_DFSDM_ChannelDeInit+0x32>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_DFSDMEN);
 8009954:	4a0a      	ldr	r2, [pc, #40]	; (8009980 <HAL_DFSDM_ChannelDeInit+0x54>)
 8009956:	6813      	ldr	r3, [r2, #0]
 8009958:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800995c:	6013      	str	r3, [r2, #0]
  HAL_DFSDM_ChannelMspDeInit(hdfsdm_channel);
 800995e:	4620      	mov	r0, r4
 8009960:	f7ff ffe2 	bl	8009928 <HAL_DFSDM_ChannelMspDeInit>
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_RESET;
 8009964:	2200      	movs	r2, #0
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = (DFSDM_Channel_HandleTypeDef *) NULL;
 8009966:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_RESET;
 8009968:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = (DFSDM_Channel_HandleTypeDef *) NULL;
 800996c:	f7ff ff42 	bl	80097f4 <DFSDM_GetChannelFromInstance>
 8009970:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
  return HAL_OK;
 8009974:	4610      	mov	r0, r2
}
 8009976:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009978:	2001      	movs	r0, #1
 800997a:	e7fc      	b.n	8009976 <HAL_DFSDM_ChannelDeInit+0x4a>
 800997c:	200011c8 	.word	0x200011c8
 8009980:	40016000 	.word	0x40016000

08009984 <HAL_DFSDM_ChannelCkabCallback>:
 8009984:	4770      	bx	lr

08009986 <HAL_DFSDM_ChannelScdCallback>:
 8009986:	4770      	bx	lr

08009988 <HAL_DFSDM_FilterMspInit>:
 8009988:	4770      	bx	lr
	...

0800998c <HAL_DFSDM_FilterInit>:
{
 800998c:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_filter == NULL)
 800998e:	4604      	mov	r4, r0
 8009990:	2800      	cmp	r0, #0
 8009992:	d069      	beq.n	8009a68 <HAL_DFSDM_FilterInit+0xdc>
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8009994:	6802      	ldr	r2, [r0, #0]
 8009996:	4b35      	ldr	r3, [pc, #212]	; (8009a6c <HAL_DFSDM_FilterInit+0xe0>)
 8009998:	429a      	cmp	r2, r3
 800999a:	d105      	bne.n	80099a8 <HAL_DFSDM_FilterInit+0x1c>
 800999c:	6840      	ldr	r0, [r0, #4]
 800999e:	2801      	cmp	r0, #1
 80099a0:	d061      	beq.n	8009a66 <HAL_DFSDM_FilterInit+0xda>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80099a2:	68e0      	ldr	r0, [r4, #12]
 80099a4:	2801      	cmp	r0, #1
 80099a6:	d05e      	beq.n	8009a66 <HAL_DFSDM_FilterInit+0xda>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80099a8:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80099aa:	2201      	movs	r2, #1
  hdfsdm_filter->InjConvRemaining    = 1;
 80099ac:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80099b0:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80099b2:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80099b4:	4620      	mov	r0, r4
 80099b6:	f7ff ffe7 	bl	8009988 <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80099ba:	6823      	ldr	r3, [r4, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80099c2:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80099c4:	7a22      	ldrb	r2, [r4, #8]
 80099c6:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	bf0c      	ite	eq
 80099cc:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80099d0:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 80099d4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80099d6:	7a62      	ldrb	r2, [r4, #9]
 80099d8:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	bf0c      	ite	eq
 80099de:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80099e2:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 80099e6:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80099e8:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80099ea:	68e5      	ldr	r5, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80099ec:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80099f0:	f022 0208 	bic.w	r2, r2, #8
 80099f4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80099f6:	2d02      	cmp	r5, #2
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80099f8:	bf01      	itttt	eq
 80099fa:	681a      	ldreq	r2, [r3, #0]
 80099fc:	6961      	ldreq	r1, [r4, #20]
 80099fe:	430a      	orreq	r2, r1
 8009a00:	601a      	streq	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8009a02:	7c20      	ldrb	r0, [r4, #16]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8009a04:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8009a06:	2801      	cmp	r0, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8009a08:	bf0c      	ite	eq
 8009a0a:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8009a0e:	f022 0210 	bicne.w	r2, r2, #16
 8009a12:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8009a14:	7c62      	ldrb	r2, [r4, #17]
 8009a16:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	bf0c      	ite	eq
 8009a1c:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8009a20:	f022 0220 	bicne.w	r2, r2, #32
 8009a24:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8009a26:	695a      	ldr	r2, [r3, #20]
 8009a28:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 8009a2c:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8009a30:	615a      	str	r2, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8009a32:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8009a34:	6959      	ldr	r1, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8009a36:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8009a38:	430a      	orrs	r2, r1
 8009a3a:	69e1      	ldr	r1, [r4, #28]
 8009a3c:	430a      	orrs	r2, r1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8009a3e:	6a21      	ldr	r1, [r4, #32]
 8009a40:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8009a42:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009a46:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8009a48:	6862      	ldr	r2, [r4, #4]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8009a4a:	e9c4 250d 	strd	r2, r5, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8009a4e:	69a2      	ldr	r2, [r4, #24]
 8009a50:	63e2      	str	r2, [r4, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8009a52:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	f042 0201 	orr.w	r2, r2, #1
 8009a5c:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 8009a64:	2000      	movs	r0, #0
}
 8009a66:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009a68:	2001      	movs	r0, #1
 8009a6a:	e7fc      	b.n	8009a66 <HAL_DFSDM_FilterInit+0xda>
 8009a6c:	40016100 	.word	0x40016100

08009a70 <HAL_DFSDM_FilterMspDeInit>:
 8009a70:	4770      	bx	lr

08009a72 <HAL_DFSDM_FilterDeInit>:
{
 8009a72:	b510      	push	{r4, lr}
  if (hdfsdm_filter == NULL)
 8009a74:	4604      	mov	r4, r0
 8009a76:	b150      	cbz	r0, 8009a8e <HAL_DFSDM_FilterDeInit+0x1c>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8009a78:	6802      	ldr	r2, [r0, #0]
 8009a7a:	6813      	ldr	r3, [r2, #0]
 8009a7c:	f023 0301 	bic.w	r3, r3, #1
 8009a80:	6013      	str	r3, [r2, #0]
  HAL_DFSDM_FilterMspDeInit(hdfsdm_filter);
 8009a82:	f7ff fff5 	bl	8009a70 <HAL_DFSDM_FilterMspDeInit>
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_RESET;
 8009a86:	2000      	movs	r0, #0
 8009a88:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
}
 8009a8c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009a8e:	2001      	movs	r0, #1
 8009a90:	e7fc      	b.n	8009a8c <HAL_DFSDM_FilterDeInit+0x1a>

08009a92 <HAL_DFSDM_FilterConfigRegChannel>:
{
 8009a92:	b510      	push	{r4, lr}
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8009a94:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	2bfd      	cmp	r3, #253	; 0xfd
 8009a9e:	d813      	bhi.n	8009ac8 <HAL_DFSDM_FilterConfigRegChannel+0x36>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8009aa0:	6803      	ldr	r3, [r0, #0]
 8009aa2:	681c      	ldr	r4, [r3, #0]
 8009aa4:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
 8009aa8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8009aac:	601c      	str	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8009aae:	681c      	ldr	r4, [r3, #0]
 8009ab0:	0209      	lsls	r1, r1, #8
 8009ab2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8009ab6:	4321      	orrs	r1, r4
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8009ab8:	2a01      	cmp	r2, #1
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8009aba:	bf08      	it	eq
 8009abc:	f441 2180 	orreq.w	r1, r1, #262144	; 0x40000
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8009ac0:	6019      	str	r1, [r3, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8009ac2:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8009ac4:	2000      	movs	r0, #0
}
 8009ac6:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8009ac8:	2001      	movs	r0, #1
 8009aca:	e7fc      	b.n	8009ac6 <HAL_DFSDM_FilterConfigRegChannel+0x34>

08009acc <HAL_DFSDM_FilterRegularStart_DMA>:
{
 8009acc:	b570      	push	{r4, r5, r6, lr}
 8009ace:	4613      	mov	r3, r2
 8009ad0:	4605      	mov	r5, r0
  if ((pData == NULL) || (Length == 0U))
 8009ad2:	460a      	mov	r2, r1
 8009ad4:	b349      	cbz	r1, 8009b2a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
 8009ad6:	b343      	cbz	r3, 8009b2a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8009ad8:	6801      	ldr	r1, [r0, #0]
 8009ada:	6808      	ldr	r0, [r1, #0]
 8009adc:	0280      	lsls	r0, r0, #10
 8009ade:	d524      	bpl.n	8009b2a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8009ae0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8009ae2:	b948      	cbnz	r0, 8009af8 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
 8009ae4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8009ae6:	b938      	cbnz	r0, 8009af8 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8009ae8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8009aea:	69c4      	ldr	r4, [r0, #28]
 8009aec:	b90c      	cbnz	r4, 8009af2 <HAL_DFSDM_FilterRegularStart_DMA+0x26>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d11b      	bne.n	8009b2a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8009af2:	69c0      	ldr	r0, [r0, #28]
 8009af4:	2820      	cmp	r0, #32
 8009af6:	d018      	beq.n	8009b2a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8009af8:	f895 604c 	ldrb.w	r6, [r5, #76]	; 0x4c
 8009afc:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
 8009b00:	2e01      	cmp	r6, #1
 8009b02:	d112      	bne.n	8009b2a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8009b04:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8009b06:	4c0c      	ldr	r4, [pc, #48]	; (8009b38 <HAL_DFSDM_FilterRegularStart_DMA+0x6c>)
 8009b08:	62c4      	str	r4, [r0, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8009b0a:	4c0c      	ldr	r4, [pc, #48]	; (8009b3c <HAL_DFSDM_FilterRegularStart_DMA+0x70>)
 8009b0c:	6344      	str	r4, [r0, #52]	; 0x34
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8009b0e:	69c4      	ldr	r4, [r0, #28]
 8009b10:	2c20      	cmp	r4, #32
 8009b12:	4c0b      	ldr	r4, [pc, #44]	; (8009b40 <HAL_DFSDM_FilterRegularStart_DMA+0x74>)
 8009b14:	bf18      	it	ne
 8009b16:	2400      	movne	r4, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8009b18:	6304      	str	r4, [r0, #48]	; 0x30
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8009b1a:	311c      	adds	r1, #28
 8009b1c:	f000 f9fe 	bl	8009f1c <HAL_DMA_Start_IT>
 8009b20:	4604      	mov	r4, r0
 8009b22:	b120      	cbz	r0, 8009b2e <HAL_DFSDM_FilterRegularStart_DMA+0x62>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8009b24:	23ff      	movs	r3, #255	; 0xff
 8009b26:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
    status = HAL_ERROR;
 8009b2a:	2401      	movs	r4, #1
 8009b2c:	e002      	b.n	8009b34 <HAL_DFSDM_FilterRegularStart_DMA+0x68>
      DFSDM_RegConvStart(hdfsdm_filter);
 8009b2e:	4628      	mov	r0, r5
 8009b30:	f7ff fe09 	bl	8009746 <DFSDM_RegConvStart>
}
 8009b34:	4620      	mov	r0, r4
 8009b36:	bd70      	pop	{r4, r5, r6, pc}
 8009b38:	08009b69 	.word	0x08009b69
 8009b3c:	08009b83 	.word	0x08009b83
 8009b40:	08009b73 	.word	0x08009b73

08009b44 <HAL_DFSDM_FilterRegularStop_DMA>:
{
 8009b44:	b510      	push	{r4, lr}
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8009b46:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8009b4a:	2b02      	cmp	r3, #2
{
 8009b4c:	4604      	mov	r4, r0
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8009b4e:	d001      	beq.n	8009b54 <HAL_DFSDM_FilterRegularStop_DMA+0x10>
 8009b50:	2b04      	cmp	r3, #4
 8009b52:	d107      	bne.n	8009b64 <HAL_DFSDM_FilterRegularStop_DMA+0x20>
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8009b54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009b56:	f000 fa23 	bl	8009fa0 <HAL_DMA_Abort>
    DFSDM_RegConvStop(hdfsdm_filter);
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f7ff fe20 	bl	80097a0 <DFSDM_RegConvStop>
  HAL_StatusTypeDef status = HAL_OK;
 8009b60:	2000      	movs	r0, #0
}
 8009b62:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8009b64:	2001      	movs	r0, #1
 8009b66:	e7fc      	b.n	8009b62 <HAL_DFSDM_FilterRegularStop_DMA+0x1e>

08009b68 <DFSDM_DMARegularConvCplt>:
{
 8009b68:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8009b6a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009b6c:	f7fc ff6a 	bl	8006a44 <HAL_DFSDM_FilterRegConvCpltCallback>
}
 8009b70:	bd08      	pop	{r3, pc}

08009b72 <DFSDM_DMARegularHalfConvCplt>:
{
 8009b72:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8009b74:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009b76:	f7fd f853 	bl	8006c20 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
}
 8009b7a:	bd08      	pop	{r3, pc}

08009b7c <HAL_DFSDM_FilterInjConvCpltCallback>:
 8009b7c:	4770      	bx	lr

08009b7e <HAL_DFSDM_FilterAwdCallback>:
}
 8009b7e:	4770      	bx	lr

08009b80 <HAL_DFSDM_FilterErrorCallback>:
 8009b80:	4770      	bx	lr

08009b82 <DFSDM_DMAError>:
{
 8009b82:	b508      	push	{r3, lr}
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b84:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8009b86:	2303      	movs	r3, #3
 8009b88:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8009b8a:	f7ff fff9 	bl	8009b80 <HAL_DFSDM_FilterErrorCallback>
}
 8009b8e:	bd08      	pop	{r3, pc}

08009b90 <HAL_DFSDM_IRQHandler>:
{
 8009b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 8009b94:	6805      	ldr	r5, [r0, #0]
 8009b96:	68aa      	ldr	r2, [r5, #8]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8009b98:	686b      	ldr	r3, [r5, #4]
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8009b9a:	0717      	lsls	r7, r2, #28
{
 8009b9c:	4604      	mov	r4, r0
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8009b9e:	d509      	bpl.n	8009bb4 <HAL_DFSDM_IRQHandler+0x24>
 8009ba0:	071e      	lsls	r6, r3, #28
 8009ba2:	d507      	bpl.n	8009bb4 <HAL_DFSDM_IRQHandler+0x24>
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8009ba4:	2308      	movs	r3, #8
 8009ba6:	60eb      	str	r3, [r5, #12]
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8009bac:	f7ff ffe8 	bl	8009b80 <HAL_DFSDM_FilterErrorCallback>
}
 8009bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8009bb4:	0750      	lsls	r0, r2, #29
 8009bb6:	d507      	bpl.n	8009bc8 <HAL_DFSDM_IRQHandler+0x38>
 8009bb8:	0759      	lsls	r1, r3, #29
 8009bba:	d505      	bpl.n	8009bc8 <HAL_DFSDM_IRQHandler+0x38>
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 8009bbc:	2304      	movs	r3, #4
 8009bbe:	60eb      	str	r3, [r5, #12]
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	e7f1      	b.n	8009bac <HAL_DFSDM_IRQHandler+0x1c>
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8009bc8:	0797      	lsls	r7, r2, #30
 8009bca:	d518      	bpl.n	8009bfe <HAL_DFSDM_IRQHandler+0x6e>
 8009bcc:	079e      	lsls	r6, r3, #30
 8009bce:	d516      	bpl.n	8009bfe <HAL_DFSDM_IRQHandler+0x6e>
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f7fc ff37 	bl	8006a44 <HAL_DFSDM_FilterRegConvCpltCallback>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8009bd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1e9      	bne.n	8009bb0 <HAL_DFSDM_IRQHandler+0x20>
 8009bdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1e6      	bne.n	8009bb0 <HAL_DFSDM_IRQHandler+0x20>
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8009be2:	6822      	ldr	r2, [r4, #0]
 8009be4:	6853      	ldr	r3, [r2, #4]
 8009be6:	f023 0302 	bic.w	r3, r3, #2
 8009bea:	6053      	str	r3, [r2, #4]
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8009bec:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	bf0c      	ite	eq
 8009bf4:	2301      	moveq	r3, #1
 8009bf6:	2303      	movne	r3, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8009bf8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8009bfc:	e7d8      	b.n	8009bb0 <HAL_DFSDM_IRQHandler+0x20>
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8009bfe:	07d0      	lsls	r0, r2, #31
 8009c00:	d520      	bpl.n	8009c44 <HAL_DFSDM_IRQHandler+0xb4>
 8009c02:	f013 0601 	ands.w	r6, r3, #1
 8009c06:	d01d      	beq.n	8009c44 <HAL_DFSDM_IRQHandler+0xb4>
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f7ff ffb7 	bl	8009b7c <HAL_DFSDM_FilterInjConvCpltCallback>
    hdfsdm_filter->InjConvRemaining--;
 8009c0e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009c10:	3b01      	subs	r3, #1
 8009c12:	64a3      	str	r3, [r4, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1cb      	bne.n	8009bb0 <HAL_DFSDM_IRQHandler+0x20>
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8009c18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009c1a:	b963      	cbnz	r3, 8009c36 <HAL_DFSDM_IRQHandler+0xa6>
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 8009c1c:	6822      	ldr	r2, [r4, #0]
 8009c1e:	6853      	ldr	r3, [r2, #4]
 8009c20:	f023 0301 	bic.w	r3, r3, #1
 8009c24:	6053      	str	r3, [r2, #4]
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8009c26:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	bf0c      	ite	eq
 8009c2e:	2301      	moveq	r3, #1
 8009c30:	2302      	movne	r3, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8009c32:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8009c36:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	bf08      	it	eq
 8009c3e:	6c66      	ldreq	r6, [r4, #68]	; 0x44
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8009c40:	64a6      	str	r6, [r4, #72]	; 0x48
 8009c42:	e7b5      	b.n	8009bb0 <HAL_DFSDM_IRQHandler+0x20>
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8009c44:	06d1      	lsls	r1, r2, #27
 8009c46:	d51c      	bpl.n	8009c82 <HAL_DFSDM_IRQHandler+0xf2>
 8009c48:	06df      	lsls	r7, r3, #27
 8009c4a:	d51a      	bpl.n	8009c82 <HAL_DFSDM_IRQHandler+0xf2>
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8009c4c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 8009c4e:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
 8009c52:	d112      	bne.n	8009c7a <HAL_DFSDM_IRQHandler+0xea>
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8009c54:	0a1b      	lsrs	r3, r3, #8
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 8009c56:	2100      	movs	r1, #0
 8009c58:	e001      	b.n	8009c5e <HAL_DFSDM_IRQHandler+0xce>
      channel++;
 8009c5a:	3101      	adds	r1, #1
      reg = reg >> 1;
 8009c5c:	085b      	lsrs	r3, r3, #1
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8009c5e:	07de      	lsls	r6, r3, #31
 8009c60:	d401      	bmi.n	8009c66 <HAL_DFSDM_IRQHandler+0xd6>
 8009c62:	2907      	cmp	r1, #7
 8009c64:	d1f9      	bne.n	8009c5a <HAL_DFSDM_IRQHandler+0xca>
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 8009c66:	2301      	movs	r3, #1
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8009c68:	b94a      	cbnz	r2, 8009c7e <HAL_DFSDM_IRQHandler+0xee>
 8009c6a:	f101 0008 	add.w	r0, r1, #8
 8009c6e:	4083      	lsls	r3, r0
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 8009c70:	62eb      	str	r3, [r5, #44]	; 0x2c
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8009c72:	4620      	mov	r0, r4
 8009c74:	f7ff ff83 	bl	8009b7e <HAL_DFSDM_FilterAwdCallback>
  {
 8009c78:	e79a      	b.n	8009bb0 <HAL_DFSDM_IRQHandler+0x20>
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	e7eb      	b.n	8009c56 <HAL_DFSDM_IRQHandler+0xc6>
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8009c7e:	408b      	lsls	r3, r1
 8009c80:	e7f6      	b.n	8009c70 <HAL_DFSDM_IRQHandler+0xe0>
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8009c82:	4920      	ldr	r1, [pc, #128]	; (8009d04 <HAL_DFSDM_IRQHandler+0x174>)
 8009c84:	428d      	cmp	r5, r1
 8009c86:	d193      	bne.n	8009bb0 <HAL_DFSDM_IRQHandler+0x20>
 8009c88:	f412 0f7f 	tst.w	r2, #16711680	; 0xff0000
 8009c8c:	d01e      	beq.n	8009ccc <HAL_DFSDM_IRQHandler+0x13c>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8009c8e:	0658      	lsls	r0, r3, #25
 8009c90:	d51c      	bpl.n	8009ccc <HAL_DFSDM_IRQHandler+0x13c>
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8009c92:	68ad      	ldr	r5, [r5, #8]
 8009c94:	4f1c      	ldr	r7, [pc, #112]	; (8009d08 <HAL_DFSDM_IRQHandler+0x178>)
 8009c96:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8009c9a:	2610      	movs	r6, #16
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8009c9c:	f04f 0801 	mov.w	r8, #1
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8009ca0:	07ea      	lsls	r2, r5, #31
 8009ca2:	d50b      	bpl.n	8009cbc <HAL_DFSDM_IRQHandler+0x12c>
 8009ca4:	6838      	ldr	r0, [r7, #0]
 8009ca6:	b148      	cbz	r0, 8009cbc <HAL_DFSDM_IRQHandler+0x12c>
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8009ca8:	6803      	ldr	r3, [r0, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	065b      	lsls	r3, r3, #25
 8009cae:	d505      	bpl.n	8009cbc <HAL_DFSDM_IRQHandler+0x12c>
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8009cb0:	6823      	ldr	r3, [r4, #0]
 8009cb2:	fa08 f206 	lsl.w	r2, r8, r6
 8009cb6:	60da      	str	r2, [r3, #12]
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8009cb8:	f7ff fe64 	bl	8009984 <HAL_DFSDM_ChannelCkabCallback>
    while (channel < DFSDM1_CHANNEL_NUMBER)
 8009cbc:	3601      	adds	r6, #1
 8009cbe:	2e18      	cmp	r6, #24
      reg = reg >> 1;
 8009cc0:	ea4f 0555 	mov.w	r5, r5, lsr #1
    while (channel < DFSDM1_CHANNEL_NUMBER)
 8009cc4:	f107 0704 	add.w	r7, r7, #4
 8009cc8:	d1ea      	bne.n	8009ca0 <HAL_DFSDM_IRQHandler+0x110>
 8009cca:	e771      	b.n	8009bb0 <HAL_DFSDM_IRQHandler+0x20>
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8009ccc:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8009cd0:	f43f af6e 	beq.w	8009bb0 <HAL_DFSDM_IRQHandler+0x20>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8009cd4:	069c      	lsls	r4, r3, #26
 8009cd6:	f57f af6b 	bpl.w	8009bb0 <HAL_DFSDM_IRQHandler+0x20>
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8009cda:	688a      	ldr	r2, [r1, #8]
    uint32_t channel = 0;
 8009cdc:	2300      	movs	r3, #0
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8009cde:	0e12      	lsrs	r2, r2, #24
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8009ce0:	07d0      	lsls	r0, r2, #31
 8009ce2:	d401      	bmi.n	8009ce8 <HAL_DFSDM_IRQHandler+0x158>
 8009ce4:	2b07      	cmp	r3, #7
 8009ce6:	d10a      	bne.n	8009cfe <HAL_DFSDM_IRQHandler+0x16e>
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8009ce8:	f103 0018 	add.w	r0, r3, #24
 8009cec:	2201      	movs	r2, #1
 8009cee:	4082      	lsls	r2, r0
 8009cf0:	60ca      	str	r2, [r1, #12]
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8009cf2:	4a05      	ldr	r2, [pc, #20]	; (8009d08 <HAL_DFSDM_IRQHandler+0x178>)
 8009cf4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009cf8:	f7ff fe45 	bl	8009986 <HAL_DFSDM_ChannelScdCallback>
}
 8009cfc:	e758      	b.n	8009bb0 <HAL_DFSDM_IRQHandler+0x20>
      channel++;
 8009cfe:	3301      	adds	r3, #1
      reg = reg >> 1;
 8009d00:	0852      	lsrs	r2, r2, #1
 8009d02:	e7ed      	b.n	8009ce0 <HAL_DFSDM_IRQHandler+0x150>
 8009d04:	40016100 	.word	0x40016100
 8009d08:	200011c8 	.word	0x200011c8

08009d0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009d0c:	b570      	push	{r4, r5, r6, lr}
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009d0e:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	; 0x4c
 8009d12:	6065      	str	r5, [r4, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8009d14:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8009d16:	b114      	cbz	r4, 8009d1e <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009d18:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	; 0x58
 8009d1c:	6065      	str	r5, [r4, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009d1e:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
 8009d22:	f004 061c 	and.w	r6, r4, #28
 8009d26:	2401      	movs	r4, #1
 8009d28:	40b4      	lsls	r4, r6
 8009d2a:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009d2c:	6804      	ldr	r4, [r0, #0]
 8009d2e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009d30:	6883      	ldr	r3, [r0, #8]
 8009d32:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009d34:	bf0b      	itete	eq
 8009d36:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8009d38:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8009d3a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8009d3c:	60e2      	strne	r2, [r4, #12]
  }
}
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}

08009d40 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009d40:	4a0e      	ldr	r2, [pc, #56]	; (8009d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 8009d42:	6803      	ldr	r3, [r0, #0]
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8009d44:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009d46:	4293      	cmp	r3, r2
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8009d48:	bf88      	it	hi
 8009d4a:	4a0d      	ldrhi	r2, [pc, #52]	; (8009d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8009d4c:	f021 0103 	bic.w	r1, r1, #3
 8009d50:	bf9a      	itte	ls
 8009d52:	f101 4280 	addls.w	r2, r1, #1073741824	; 0x40000000
 8009d56:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8009d5a:	1852      	addhi	r2, r2, r1
 8009d5c:	6482      	str	r2, [r0, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009d5e:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009d60:	4a08      	ldr	r2, [pc, #32]	; (8009d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8009d62:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009d64:	3b08      	subs	r3, #8
 8009d66:	2214      	movs	r2, #20
 8009d68:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f003 031f 	and.w	r3, r3, #31
 8009d72:	fa02 f303 	lsl.w	r3, r2, r3
 8009d76:	6503      	str	r3, [r0, #80]	; 0x50
}
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	40020407 	.word	0x40020407
 8009d80:	4002081c 	.word	0x4002081c
 8009d84:	40020880 	.word	0x40020880

08009d88 <HAL_DMA_Init>:
{
 8009d88:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	d05e      	beq.n	8009e4c <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009d8e:	6801      	ldr	r1, [r0, #0]
 8009d90:	4b2f      	ldr	r3, [pc, #188]	; (8009e50 <HAL_DMA_Init+0xc8>)
 8009d92:	4299      	cmp	r1, r3
 8009d94:	f04f 0414 	mov.w	r4, #20
 8009d98:	d84b      	bhi.n	8009e32 <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009d9a:	4a2e      	ldr	r2, [pc, #184]	; (8009e54 <HAL_DMA_Init+0xcc>)
 8009d9c:	440a      	add	r2, r1
 8009d9e:	fbb2 f2f4 	udiv	r2, r2, r4
 8009da2:	0092      	lsls	r2, r2, #2
 8009da4:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009da6:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8009daa:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8009dac:	2302      	movs	r3, #2
 8009dae:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8009db2:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
 8009db6:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009db8:	6904      	ldr	r4, [r0, #16]
  tmp = hdma->Instance->CCR;
 8009dba:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009dbc:	4323      	orrs	r3, r4
 8009dbe:	6944      	ldr	r4, [r0, #20]
 8009dc0:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009dc2:	6984      	ldr	r4, [r0, #24]
 8009dc4:	4323      	orrs	r3, r4
 8009dc6:	69c4      	ldr	r4, [r0, #28]
 8009dc8:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8009dca:	6a04      	ldr	r4, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009dcc:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8009dd0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8009dd4:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8009dd6:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8009dd8:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009dda:	f7ff ffb1 	bl	8009d40 <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009dde:	6883      	ldr	r3, [r0, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009de0:	6c81      	ldr	r1, [r0, #72]	; 0x48
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009de2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009de6:	bf04      	itt	eq
 8009de8:	2300      	moveq	r3, #0
 8009dea:	6043      	streq	r3, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009dec:	6842      	ldr	r2, [r0, #4]
 8009dee:	b2d3      	uxtb	r3, r2
 8009df0:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009df2:	e9d0 1413 	ldrd	r1, r4, [r0, #76]	; 0x4c
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009df6:	3a01      	subs	r2, #1
 8009df8:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009dfa:	604c      	str	r4, [r1, #4]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009dfc:	d821      	bhi.n	8009e42 <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009dfe:	4a16      	ldr	r2, [pc, #88]	; (8009e58 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009e00:	4916      	ldr	r1, [pc, #88]	; (8009e5c <HAL_DMA_Init+0xd4>)
 8009e02:	6581      	str	r1, [r0, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009e04:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009e06:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009e08:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009e0a:	2101      	movs	r1, #1
 8009e0c:	f003 0303 	and.w	r3, r3, #3
 8009e10:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009e14:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009e16:	6542      	str	r2, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009e18:	65c3      	str	r3, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009e1a:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e1c:	4a10      	ldr	r2, [pc, #64]	; (8009e60 <HAL_DMA_Init+0xd8>)
 8009e1e:	6453      	str	r3, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009e20:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8009e22:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009e24:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8009e26:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8009e2a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 8009e2e:	4618      	mov	r0, r3
}
 8009e30:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009e32:	4b0c      	ldr	r3, [pc, #48]	; (8009e64 <HAL_DMA_Init+0xdc>)
 8009e34:	440b      	add	r3, r1
 8009e36:	fbb3 f3f4 	udiv	r3, r3, r4
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009e3e:	4b0a      	ldr	r3, [pc, #40]	; (8009e68 <HAL_DMA_Init+0xe0>)
 8009e40:	e7b3      	b.n	8009daa <HAL_DMA_Init+0x22>
    hdma->DMAmuxRequestGen = 0U;
 8009e42:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8009e44:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009e48:	65c3      	str	r3, [r0, #92]	; 0x5c
 8009e4a:	e7e9      	b.n	8009e20 <HAL_DMA_Init+0x98>
    return HAL_ERROR;
 8009e4c:	2001      	movs	r0, #1
 8009e4e:	e7ef      	b.n	8009e30 <HAL_DMA_Init+0xa8>
 8009e50:	40020407 	.word	0x40020407
 8009e54:	bffdfff8 	.word	0xbffdfff8
 8009e58:	1000823f 	.word	0x1000823f
 8009e5c:	40020940 	.word	0x40020940
 8009e60:	40020900 	.word	0x40020900
 8009e64:	bffdfbf8 	.word	0xbffdfbf8
 8009e68:	40020400 	.word	0x40020400

08009e6c <HAL_DMA_DeInit>:
{
 8009e6c:	b538      	push	{r3, r4, r5, lr}
  if (NULL == hdma )
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d045      	beq.n	8009efe <HAL_DMA_DeInit+0x92>
  __HAL_DMA_DISABLE(hdma);
 8009e72:	6801      	ldr	r1, [r0, #0]
 8009e74:	680b      	ldr	r3, [r1, #0]
 8009e76:	f023 0301 	bic.w	r3, r3, #1
 8009e7a:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009e7c:	4b21      	ldr	r3, [pc, #132]	; (8009f04 <HAL_DMA_DeInit+0x98>)
 8009e7e:	4299      	cmp	r1, r3
 8009e80:	f04f 0414 	mov.w	r4, #20
 8009e84:	d833      	bhi.n	8009eee <HAL_DMA_DeInit+0x82>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009e86:	4a20      	ldr	r2, [pc, #128]	; (8009f08 <HAL_DMA_DeInit+0x9c>)
 8009e88:	440a      	add	r2, r1
 8009e8a:	fbb2 f2f4 	udiv	r2, r2, r4
 8009e8e:	0092      	lsls	r2, r2, #2
 8009e90:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009e92:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8009e96:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009e98:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 8009e9c:	2401      	movs	r4, #1
 8009e9e:	f003 031c 	and.w	r3, r3, #28
 8009ea2:	fa04 f303 	lsl.w	r3, r4, r3
  hdma->Instance->CCR = 0U;
 8009ea6:	2500      	movs	r5, #0
 8009ea8:	600d      	str	r5, [r1, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009eaa:	6053      	str	r3, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009eac:	f7ff ff48 	bl	8009d40 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8009eb0:	6c83      	ldr	r3, [r0, #72]	; 0x48
  if(((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009eb2:	6841      	ldr	r1, [r0, #4]
  hdma->DMAmuxChannel->CCR = 0U;
 8009eb4:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009eb6:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	; 0x4c
 8009eba:	605a      	str	r2, [r3, #4]
  if(((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009ebc:	1e4a      	subs	r2, r1, #1
 8009ebe:	2a03      	cmp	r2, #3
 8009ec0:	d806      	bhi.n	8009ed0 <HAL_DMA_DeInit+0x64>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009ec2:	4b12      	ldr	r3, [pc, #72]	; (8009f0c <HAL_DMA_DeInit+0xa0>)
 8009ec4:	440b      	add	r3, r1
 8009ec6:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009ec8:	4094      	lsls	r4, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009eca:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ecc:	4b10      	ldr	r3, [pc, #64]	; (8009f10 <HAL_DMA_DeInit+0xa4>)
 8009ece:	645c      	str	r4, [r3, #68]	; 0x44
  hdma->DMAmuxRequestGen = 0U;
 8009ed0:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ed2:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->DMAmuxRequestGenStatus = 0U;
 8009ed4:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  hdma->XferHalfCpltCallback = NULL;
 8009ed8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hdma->XferAbortCallback = NULL;
 8009edc:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8009ee0:	65c3      	str	r3, [r0, #92]	; 0x5c
  hdma->State = HAL_DMA_STATE_RESET;
 8009ee2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8009ee6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  return HAL_OK;
 8009eea:	4618      	mov	r0, r3
}
 8009eec:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009eee:	4b09      	ldr	r3, [pc, #36]	; (8009f14 <HAL_DMA_DeInit+0xa8>)
 8009ef0:	440b      	add	r3, r1
 8009ef2:	fbb3 f3f4 	udiv	r3, r3, r4
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009efa:	4b07      	ldr	r3, [pc, #28]	; (8009f18 <HAL_DMA_DeInit+0xac>)
 8009efc:	e7cb      	b.n	8009e96 <HAL_DMA_DeInit+0x2a>
    return HAL_ERROR;
 8009efe:	2001      	movs	r0, #1
 8009f00:	e7f4      	b.n	8009eec <HAL_DMA_DeInit+0x80>
 8009f02:	bf00      	nop
 8009f04:	40020407 	.word	0x40020407
 8009f08:	bffdfff8 	.word	0xbffdfff8
 8009f0c:	1000823f 	.word	0x1000823f
 8009f10:	40020900 	.word	0x40020900
 8009f14:	bffdfbf8 	.word	0xbffdfbf8
 8009f18:	40020400 	.word	0x40020400

08009f1c <HAL_DMA_Start_IT>:
{
 8009f1c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8009f1e:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8009f22:	2d01      	cmp	r5, #1
{
 8009f24:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8009f26:	d039      	beq.n	8009f9c <HAL_DMA_Start_IT+0x80>
 8009f28:	2501      	movs	r5, #1
 8009f2a:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8009f2e:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 8009f32:	2d01      	cmp	r5, #1
 8009f34:	f04f 0600 	mov.w	r6, #0
 8009f38:	f04f 0502 	mov.w	r5, #2
 8009f3c:	d12c      	bne.n	8009f98 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8009f3e:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f42:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8009f44:	6806      	ldr	r6, [r0, #0]
 8009f46:	6835      	ldr	r5, [r6, #0]
 8009f48:	f025 0501 	bic.w	r5, r5, #1
 8009f4c:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009f4e:	f7ff fedd 	bl	8009d0c <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8009f52:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8009f54:	6803      	ldr	r3, [r0, #0]
 8009f56:	b1ba      	cbz	r2, 8009f88 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009f5e:	601a      	str	r2, [r3, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009f60:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8009f62:	6811      	ldr	r1, [r2, #0]
 8009f64:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009f66:	bf42      	ittt	mi
 8009f68:	6811      	ldrmi	r1, [r2, #0]
 8009f6a:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8009f6e:	6011      	strmi	r1, [r2, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8009f70:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009f72:	b11a      	cbz	r2, 8009f7c <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009f74:	6811      	ldr	r1, [r2, #0]
 8009f76:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009f7a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	f042 0201 	orr.w	r2, r2, #1
 8009f82:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f84:	2000      	movs	r0, #0
}
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	f022 0204 	bic.w	r2, r2, #4
 8009f8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	f042 020a 	orr.w	r2, r2, #10
 8009f96:	e7e2      	b.n	8009f5e <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 8009f98:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8009f9c:	2002      	movs	r0, #2
 8009f9e:	e7f2      	b.n	8009f86 <HAL_DMA_Start_IT+0x6a>

08009fa0 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009fa0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d006      	beq.n	8009fb6 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009fa8:	2304      	movs	r3, #4
 8009faa:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8009fac:	2300      	movs	r3, #0
 8009fae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8009fb2:	2001      	movs	r0, #1
 8009fb4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009fb6:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009fb8:	6c81      	ldr	r1, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	f022 020e 	bic.w	r2, r2, #14
 8009fc0:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009fc2:	680a      	ldr	r2, [r1, #0]
 8009fc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009fc8:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	f022 0201 	bic.w	r2, r2, #1
 8009fd0:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009fd2:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 8009fd6:	f003 021c 	and.w	r2, r3, #28
 8009fda:	2301      	movs	r3, #1
 8009fdc:	4093      	lsls	r3, r2
 8009fde:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009fe0:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	; 0x4c
 8009fe4:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8009fe6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009fe8:	b133      	cbz	r3, 8009ff8 <HAL_DMA_Abort+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ff0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ff2:	e9d0 3216 	ldrd	r3, r2, [r0, #88]	; 0x58
 8009ff6:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8009ffe:	2300      	movs	r3, #0
 800a000:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 800a004:	4618      	mov	r0, r3
}
 800a006:	4770      	bx	lr

0800a008 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a008:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800a00a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 800a00c:	6803      	ldr	r3, [r0, #0]
{
 800a00e:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800a010:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a014:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800a016:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800a018:	2404      	movs	r4, #4
 800a01a:	4094      	lsls	r4, r2
 800a01c:	4234      	tst	r4, r6
 800a01e:	d00e      	beq.n	800a03e <HAL_DMA_IRQHandler+0x36>
 800a020:	f015 0f04 	tst.w	r5, #4
 800a024:	d00b      	beq.n	800a03e <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a02a:	bf5e      	ittt	pl
 800a02c:	681a      	ldrpl	r2, [r3, #0]
 800a02e:	f022 0204 	bicpl.w	r2, r2, #4
 800a032:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800a034:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800a036:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 800a038:	b373      	cbz	r3, 800a098 <HAL_DMA_IRQHandler+0x90>
}
 800a03a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800a03c:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800a03e:	2402      	movs	r4, #2
 800a040:	4094      	lsls	r4, r2
 800a042:	4234      	tst	r4, r6
 800a044:	d012      	beq.n	800a06c <HAL_DMA_IRQHandler+0x64>
 800a046:	f015 0f02 	tst.w	r5, #2
 800a04a:	d00f      	beq.n	800a06c <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	0695      	lsls	r5, r2, #26
 800a050:	d406      	bmi.n	800a060 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	f022 020a 	bic.w	r2, r2, #10
 800a058:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800a05a:	2301      	movs	r3, #1
 800a05c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800a060:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800a062:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 800a064:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 800a068:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a06a:	e7e5      	b.n	800a038 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800a06c:	2408      	movs	r4, #8
 800a06e:	4094      	lsls	r4, r2
 800a070:	4234      	tst	r4, r6
 800a072:	d011      	beq.n	800a098 <HAL_DMA_IRQHandler+0x90>
 800a074:	072c      	lsls	r4, r5, #28
 800a076:	d50f      	bpl.n	800a098 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a078:	681c      	ldr	r4, [r3, #0]
 800a07a:	f024 040e 	bic.w	r4, r4, #14
 800a07e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a080:	2301      	movs	r3, #1
 800a082:	fa03 f202 	lsl.w	r2, r3, r2
 800a086:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a088:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800a08a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800a08e:	2300      	movs	r3, #0
 800a090:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800a094:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a096:	e7cf      	b.n	800a038 <HAL_DMA_IRQHandler+0x30>
}
 800a098:	bc70      	pop	{r4, r5, r6}
 800a09a:	4770      	bx	lr

0800a09c <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 800a09c:	b911      	cbnz	r1, 800a0a4 <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800a09e:	6042      	str	r2, [r0, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 800a0a0:	4608      	mov	r0, r1
 800a0a2:	4770      	bx	lr
      status = HAL_ERROR;
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	e7fb      	b.n	800a0a0 <HAL_EXTI_RegisterCallback+0x4>

0800a0a8 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a0a8:	b110      	cbz	r0, 800a0b0 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a0aa:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	4770      	bx	lr
    return HAL_ERROR;
 800a0b0:	2001      	movs	r0, #1
  }
}
 800a0b2:	4770      	bx	lr

0800a0b4 <HAL_EXTI_IRQHandler>:
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800a0b4:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f003 011f 	and.w	r1, r3, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800a0bc:	f3c3 4300 	ubfx	r3, r3, #16, #1
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a0c0:	408a      	lsls	r2, r1

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800a0c2:	015b      	lsls	r3, r3, #5
 800a0c4:	4906      	ldr	r1, [pc, #24]	; (800a0e0 <HAL_EXTI_IRQHandler+0x2c>)
{
 800a0c6:	b410      	push	{r4}
  regval = (*regaddr & maskline);
 800a0c8:	585c      	ldr	r4, [r3, r1]

  if (regval != 0x00u)
 800a0ca:	4214      	tst	r4, r2
 800a0cc:	d005      	beq.n	800a0da <HAL_EXTI_IRQHandler+0x26>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800a0ce:	505a      	str	r2, [r3, r1]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800a0d0:	6843      	ldr	r3, [r0, #4]
 800a0d2:	b113      	cbz	r3, 800a0da <HAL_EXTI_IRQHandler+0x26>
    {
      hexti->PendingCallback();
    }
  }
}
 800a0d4:	f85d 4b04 	ldr.w	r4, [sp], #4
      hexti->PendingCallback();
 800a0d8:	4718      	bx	r3
}
 800a0da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0de:	4770      	bx	lr
 800a0e0:	40010414 	.word	0x40010414

0800a0e4 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800a0e4:	4a09      	ldr	r2, [pc, #36]	; (800a10c <FLASH_Program_Fast+0x28>)
 800a0e6:	6953      	ldr	r3, [r2, #20]
 800a0e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
 800a0ec:	b510      	push	{r4, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800a0ee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0f0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a0f4:	b672      	cpsid	i
}
 800a0f6:	2300      	movs	r3, #0
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800a0f8:	58cc      	ldr	r4, [r1, r3]
 800a0fa:	50c4      	str	r4, [r0, r3]
    dest_addr++;
    src_addr++;
    row_index--;
  } while (row_index != 0U);
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a102:	d1f9      	bne.n	800a0f8 <FLASH_Program_Fast+0x14>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a104:	f382 8810 	msr	PRIMASK, r2

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800a108:	bd10      	pop	{r4, pc}
 800a10a:	bf00      	nop
 800a10c:	40022000 	.word	0x40022000

0800a110 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800a110:	4b06      	ldr	r3, [pc, #24]	; (800a12c <HAL_FLASH_Unlock+0x1c>)
 800a112:	695a      	ldr	r2, [r3, #20]
 800a114:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a116:	bfbf      	itttt	lt
 800a118:	4a05      	ldrlt	r2, [pc, #20]	; (800a130 <HAL_FLASH_Unlock+0x20>)
 800a11a:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a11c:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 800a120:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800a122:	bfba      	itte	lt
 800a124:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 800a126:	0fc0      	lsrlt	r0, r0, #31
 800a128:	2000      	movge	r0, #0
}
 800a12a:	4770      	bx	lr
 800a12c:	40022000 	.word	0x40022000
 800a130:	45670123 	.word	0x45670123

0800a134 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800a134:	4a03      	ldr	r2, [pc, #12]	; (800a144 <HAL_FLASH_Lock+0x10>)
 800a136:	6953      	ldr	r3, [r2, #20]
 800a138:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a13c:	6153      	str	r3, [r2, #20]
}
 800a13e:	2000      	movs	r0, #0
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	40022000 	.word	0x40022000

0800a148 <FLASH_WaitForLastOperation>:
{
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800a14c:	f7fe fa6a 	bl	8008624 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800a150:	4c10      	ldr	r4, [pc, #64]	; (800a194 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 800a152:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800a154:	6923      	ldr	r3, [r4, #16]
 800a156:	03db      	lsls	r3, r3, #15
 800a158:	d40a      	bmi.n	800a170 <FLASH_WaitForLastOperation+0x28>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800a15a:	6920      	ldr	r0, [r4, #16]
 800a15c:	4a0e      	ldr	r2, [pc, #56]	; (800a198 <FLASH_WaitForLastOperation+0x50>)
  if(error != 0u)
 800a15e:	4002      	ands	r2, r0
 800a160:	d00f      	beq.n	800a182 <FLASH_WaitForLastOperation+0x3a>
    pFlash.ErrorCode |= error;
 800a162:	490e      	ldr	r1, [pc, #56]	; (800a19c <FLASH_WaitForLastOperation+0x54>)
 800a164:	684b      	ldr	r3, [r1, #4]
 800a166:	4313      	orrs	r3, r2
 800a168:	604b      	str	r3, [r1, #4]
    return HAL_ERROR;
 800a16a:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 800a16c:	6122      	str	r2, [r4, #16]
}
 800a16e:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 800a170:	1c6a      	adds	r2, r5, #1
 800a172:	d0ef      	beq.n	800a154 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 800a174:	f7fe fa56 	bl	8008624 <HAL_GetTick>
 800a178:	1b80      	subs	r0, r0, r6
 800a17a:	42a8      	cmp	r0, r5
 800a17c:	d3ea      	bcc.n	800a154 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 800a17e:	2003      	movs	r0, #3
 800a180:	e7f5      	b.n	800a16e <FLASH_WaitForLastOperation+0x26>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800a182:	6920      	ldr	r0, [r4, #16]
 800a184:	f010 0001 	ands.w	r0, r0, #1
 800a188:	d0f1      	beq.n	800a16e <FLASH_WaitForLastOperation+0x26>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a18a:	2301      	movs	r3, #1
 800a18c:	6123      	str	r3, [r4, #16]
 800a18e:	4610      	mov	r0, r2
 800a190:	e7ed      	b.n	800a16e <FLASH_WaitForLastOperation+0x26>
 800a192:	bf00      	nop
 800a194:	40022000 	.word	0x40022000
 800a198:	0002c3fa 	.word	0x0002c3fa
 800a19c:	200000b0 	.word	0x200000b0

0800a1a0 <HAL_FLASH_Program>:
{
 800a1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800a1a4:	4c25      	ldr	r4, [pc, #148]	; (800a23c <HAL_FLASH_Program+0x9c>)
{
 800a1a6:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 800a1a8:	7823      	ldrb	r3, [r4, #0]
 800a1aa:	2b01      	cmp	r3, #1
{
 800a1ac:	4606      	mov	r6, r0
 800a1ae:	460f      	mov	r7, r1
 800a1b0:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 800a1b2:	d041      	beq.n	800a238 <HAL_FLASH_Program+0x98>
 800a1b4:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a1b6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800a1ba:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a1bc:	f7ff ffc4 	bl	800a148 <FLASH_WaitForLastOperation>
 800a1c0:	4605      	mov	r5, r0
  if(status == HAL_OK)
 800a1c2:	bb30      	cbnz	r0, 800a212 <HAL_FLASH_Program+0x72>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a1c4:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800a1c6:	481e      	ldr	r0, [pc, #120]	; (800a240 <HAL_FLASH_Program+0xa0>)
 800a1c8:	6802      	ldr	r2, [r0, #0]
 800a1ca:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800a1ce:	bf17      	itett	ne
 800a1d0:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800a1d2:	7722      	strbeq	r2, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800a1d4:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 800a1d8:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800a1da:	bf1c      	itt	ne
 800a1dc:	2302      	movne	r3, #2
 800a1de:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800a1e0:	b9e6      	cbnz	r6, 800a21c <HAL_FLASH_Program+0x7c>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800a1e2:	6943      	ldr	r3, [r0, #20]
 800a1e4:	f043 0301 	orr.w	r3, r3, #1
 800a1e8:	6143      	str	r3, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800a1ea:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("isb 0xF":::"memory");
 800a1ee:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 800a1f2:	2601      	movs	r6, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800a1f4:	f8c7 9004 	str.w	r9, [r7, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a1f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a1fc:	f7ff ffa4 	bl	800a148 <FLASH_WaitForLastOperation>
 800a200:	4605      	mov	r5, r0
    if (prog_bit != 0U)
 800a202:	b126      	cbz	r6, 800a20e <HAL_FLASH_Program+0x6e>
      CLEAR_BIT(FLASH->CR, prog_bit);
 800a204:	4a0e      	ldr	r2, [pc, #56]	; (800a240 <HAL_FLASH_Program+0xa0>)
 800a206:	6953      	ldr	r3, [r2, #20]
 800a208:	ea23 0606 	bic.w	r6, r3, r6
 800a20c:	6156      	str	r6, [r2, #20]
    FLASH_FlushCaches();
 800a20e:	f000 f85b 	bl	800a2c8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800a212:	2300      	movs	r3, #0
 800a214:	7023      	strb	r3, [r4, #0]
}
 800a216:	4628      	mov	r0, r5
 800a218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800a21c:	1e73      	subs	r3, r6, #1
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d901      	bls.n	800a226 <HAL_FLASH_Program+0x86>
  uint32_t prog_bit = 0;
 800a222:	2600      	movs	r6, #0
 800a224:	e7e8      	b.n	800a1f8 <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800a226:	4641      	mov	r1, r8
 800a228:	4638      	mov	r0, r7
 800a22a:	f7ff ff5b 	bl	800a0e4 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800a22e:	2e02      	cmp	r6, #2
 800a230:	d1f7      	bne.n	800a222 <HAL_FLASH_Program+0x82>
        prog_bit = FLASH_CR_FSTPG;
 800a232:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 800a236:	e7df      	b.n	800a1f8 <HAL_FLASH_Program+0x58>
  __HAL_LOCK(&pFlash);
 800a238:	2502      	movs	r5, #2
 800a23a:	e7ec      	b.n	800a216 <HAL_FLASH_Program+0x76>
 800a23c:	200000b0 	.word	0x200000b0
 800a240:	40022000 	.word	0x40022000

0800a244 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 800a244:	4b0e      	ldr	r3, [pc, #56]	; (800a280 <FLASH_MassErase+0x3c>)
 800a246:	6a1a      	ldr	r2, [r3, #32]
 800a248:	0251      	lsls	r1, r2, #9
 800a24a:	d512      	bpl.n	800a272 <FLASH_MassErase+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800a24c:	07c2      	lsls	r2, r0, #31
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800a24e:	bf42      	ittt	mi
 800a250:	695a      	ldrmi	r2, [r3, #20]
 800a252:	f042 0204 	orrmi.w	r2, r2, #4
 800a256:	615a      	strmi	r2, [r3, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800a258:	0783      	lsls	r3, r0, #30
 800a25a:	d504      	bpl.n	800a266 <FLASH_MassErase+0x22>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800a25c:	4a08      	ldr	r2, [pc, #32]	; (800a280 <FLASH_MassErase+0x3c>)
 800a25e:	6953      	ldr	r3, [r2, #20]
 800a260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a264:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a266:	4a06      	ldr	r2, [pc, #24]	; (800a280 <FLASH_MassErase+0x3c>)
 800a268:	6953      	ldr	r3, [r2, #20]
 800a26a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a26e:	6153      	str	r3, [r2, #20]
}
 800a270:	4770      	bx	lr
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800a272:	695a      	ldr	r2, [r3, #20]
 800a274:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a278:	f042 0204 	orr.w	r2, r2, #4
 800a27c:	615a      	str	r2, [r3, #20]
 800a27e:	e7f2      	b.n	800a266 <FLASH_MassErase+0x22>
 800a280:	40022000 	.word	0x40022000

0800a284 <FLASH_PageErase>:
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800a284:	4b0f      	ldr	r3, [pc, #60]	; (800a2c4 <FLASH_PageErase+0x40>)
 800a286:	6a1a      	ldr	r2, [r3, #32]
 800a288:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800a28c:	695a      	ldr	r2, [r3, #20]
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800a28e:	d113      	bne.n	800a2b8 <FLASH_PageErase+0x34>
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800a290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800a294:	615a      	str	r2, [r3, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800a296:	695a      	ldr	r2, [r3, #20]
 800a298:	00c0      	lsls	r0, r0, #3
 800a29a:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 800a29e:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 800a2a2:	4310      	orrs	r0, r2
 800a2a4:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800a2a6:	695a      	ldr	r2, [r3, #20]
 800a2a8:	f042 0202 	orr.w	r2, r2, #2
 800a2ac:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a2ae:	695a      	ldr	r2, [r3, #20]
 800a2b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a2b4:	615a      	str	r2, [r3, #20]
}
 800a2b6:	4770      	bx	lr
    if((Banks & FLASH_BANK_1) != 0U)
 800a2b8:	07c9      	lsls	r1, r1, #31
 800a2ba:	d4e9      	bmi.n	800a290 <FLASH_PageErase+0xc>
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800a2bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2c0:	e7e8      	b.n	800a294 <FLASH_PageErase+0x10>
 800a2c2:	bf00      	nop
 800a2c4:	40022000 	.word	0x40022000

0800a2c8 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800a2c8:	4813      	ldr	r0, [pc, #76]	; (800a318 <FLASH_FlushCaches+0x50>)
 800a2ca:	7f03      	ldrb	r3, [r0, #28]
 800a2cc:	b2da      	uxtb	r2, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800a2ce:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d10c      	bne.n	800a2f0 <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800a2d6:	4b11      	ldr	r3, [pc, #68]	; (800a31c <FLASH_FlushCaches+0x54>)
 800a2d8:	6819      	ldr	r1, [r3, #0]
 800a2da:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800a2de:	6019      	str	r1, [r3, #0]
 800a2e0:	6819      	ldr	r1, [r3, #0]
 800a2e2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800a2e6:	6019      	str	r1, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a2e8:	6819      	ldr	r1, [r3, #0]
 800a2ea:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800a2ee:	6019      	str	r1, [r3, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800a2f0:	1e93      	subs	r3, r2, #2
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d80c      	bhi.n	800a310 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800a2f6:	4b09      	ldr	r3, [pc, #36]	; (800a31c <FLASH_FlushCaches+0x54>)
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a2fe:	601a      	str	r2, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a306:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a30e:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800a310:	2300      	movs	r3, #0
 800a312:	7703      	strb	r3, [r0, #28]
}
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	200000b0 	.word	0x200000b0
 800a31c:	40022000 	.word	0x40022000

0800a320 <HAL_FLASHEx_Erase>:
{
 800a320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 800a324:	4d35      	ldr	r5, [pc, #212]	; (800a3fc <HAL_FLASHEx_Erase+0xdc>)
 800a326:	782b      	ldrb	r3, [r5, #0]
 800a328:	2b01      	cmp	r3, #1
{
 800a32a:	4606      	mov	r6, r0
 800a32c:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800a32e:	d062      	beq.n	800a3f6 <HAL_FLASHEx_Erase+0xd6>
 800a330:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a332:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800a336:	702f      	strb	r7, [r5, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a338:	f7ff ff06 	bl	800a148 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800a33c:	4604      	mov	r4, r0
 800a33e:	bb40      	cbnz	r0, 800a392 <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800a340:	4b2f      	ldr	r3, [pc, #188]	; (800a400 <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a342:	6068      	str	r0, [r5, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800a34a:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800a34c:	d026      	beq.n	800a39c <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800a34e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a352:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	0551      	lsls	r1, r2, #21
 800a358:	d506      	bpl.n	800a368 <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a360:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800a362:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800a364:	772b      	strb	r3, [r5, #28]
 800a366:	e000      	b.n	800a36a <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800a368:	772f      	strb	r7, [r5, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a36a:	6833      	ldr	r3, [r6, #0]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d11f      	bne.n	800a3b0 <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 800a370:	6870      	ldr	r0, [r6, #4]
 800a372:	f7ff ff67 	bl	800a244 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a376:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a37a:	f7ff fee5 	bl	800a148 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800a37e:	4a20      	ldr	r2, [pc, #128]	; (800a400 <HAL_FLASHEx_Erase+0xe0>)
 800a380:	6953      	ldr	r3, [r2, #20]
 800a382:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a386:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a38a:	4604      	mov	r4, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800a38c:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 800a38e:	f7ff ff9b 	bl	800a2c8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800a392:	2300      	movs	r3, #0
 800a394:	702b      	strb	r3, [r5, #0]
}
 800a396:	4620      	mov	r0, r4
 800a398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800a39c:	0552      	lsls	r2, r2, #21
 800a39e:	d505      	bpl.n	800a3ac <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3a6:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	e7db      	b.n	800a364 <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800a3ac:	7728      	strb	r0, [r5, #28]
 800a3ae:	e7dc      	b.n	800a36a <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFFU;
 800a3b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b4:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800a3b8:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800a3ba:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800a400 <HAL_FLASHEx_Erase+0xe0>
 800a3be:	f8df a044 	ldr.w	sl, [pc, #68]	; 800a404 <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800a3c2:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	42bb      	cmp	r3, r7
 800a3ca:	d9e0      	bls.n	800a38e <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800a3cc:	6871      	ldr	r1, [r6, #4]
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	f7ff ff58 	bl	800a284 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a3d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a3d8:	f7ff feb6 	bl	800a148 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800a3dc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a3e0:	ea03 030a 	and.w	r3, r3, sl
 800a3e4:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 800a3e8:	b118      	cbz	r0, 800a3f2 <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 800a3ea:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a3ee:	4604      	mov	r4, r0
          break;
 800a3f0:	e7cd      	b.n	800a38e <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800a3f2:	3701      	adds	r7, #1
 800a3f4:	e7e5      	b.n	800a3c2 <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 800a3f6:	2402      	movs	r4, #2
 800a3f8:	e7cd      	b.n	800a396 <HAL_FLASHEx_Erase+0x76>
 800a3fa:	bf00      	nop
 800a3fc:	200000b0 	.word	0x200000b0
 800a400:	40022000 	.word	0x40022000
 800a404:	fffff805 	.word	0xfffff805

0800a408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a40c:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a5b4 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a410:	4c66      	ldr	r4, [pc, #408]	; (800a5ac <HAL_GPIO_Init+0x1a4>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a412:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 800a5b8 <HAL_GPIO_Init+0x1b0>
  uint32_t position = 0x00u;
 800a416:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a418:	680a      	ldr	r2, [r1, #0]
 800a41a:	fa32 f503 	lsrs.w	r5, r2, r3
 800a41e:	d102      	bne.n	800a426 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 800a420:	b003      	add	sp, #12
 800a422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a426:	f04f 0c01 	mov.w	ip, #1
 800a42a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800a42e:	ea1c 0202 	ands.w	r2, ip, r2
 800a432:	f000 80aa 	beq.w	800a58a <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a436:	684d      	ldr	r5, [r1, #4]
 800a438:	f025 0a10 	bic.w	sl, r5, #16
 800a43c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a440:	2603      	movs	r6, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a442:	f10a 37ff 	add.w	r7, sl, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a446:	fa06 f60e 	lsl.w	r6, r6, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a44a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a44c:	ea6f 0606 	mvn.w	r6, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a450:	d811      	bhi.n	800a476 <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 800a452:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a454:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a458:	68cf      	ldr	r7, [r1, #12]
 800a45a:	fa07 f70e 	lsl.w	r7, r7, lr
 800a45e:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 800a462:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800a464:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a466:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800a46a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800a46e:	409f      	lsls	r7, r3
 800a470:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 800a474:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800a476:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a478:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a47c:	688f      	ldr	r7, [r1, #8]
 800a47e:	fa07 f70e 	lsl.w	r7, r7, lr
 800a482:	ea47 070c 	orr.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a486:	f1ba 0f02 	cmp.w	sl, #2
      GPIOx->PUPDR = temp;
 800a48a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a48c:	d116      	bne.n	800a4bc <HAL_GPIO_Init+0xb4>
        temp = GPIOx->AFR[position >> 3u];
 800a48e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800a492:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a496:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800a49a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a49e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800a4a2:	f04f 0c0f 	mov.w	ip, #15
 800a4a6:	fa0c fc0b 	lsl.w	ip, ip, fp
 800a4aa:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a4ae:	690f      	ldr	r7, [r1, #16]
 800a4b0:	fa07 f70b 	lsl.w	r7, r7, fp
 800a4b4:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3u] = temp;
 800a4b8:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800a4bc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a4be:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a4c0:	f005 0703 	and.w	r7, r5, #3
 800a4c4:	fa07 f70e 	lsl.w	r7, r7, lr
 800a4c8:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800a4ca:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a4cc:	00ee      	lsls	r6, r5, #3
 800a4ce:	d55c      	bpl.n	800a58a <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4d0:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 800a4d4:	f046 0601 	orr.w	r6, r6, #1
 800a4d8:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 800a4dc:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 800a4e0:	f023 0703 	bic.w	r7, r3, #3
 800a4e4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800a4e8:	f006 0601 	and.w	r6, r6, #1
 800a4ec:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800a4f0:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a4f2:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4f6:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800a4f8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a4fc:	f04f 0e0f 	mov.w	lr, #15
 800a500:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800a504:	fa0e f60c 	lsl.w	r6, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a508:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a50c:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a510:	d03d      	beq.n	800a58e <HAL_GPIO_Init+0x186>
 800a512:	4e27      	ldr	r6, [pc, #156]	; (800a5b0 <HAL_GPIO_Init+0x1a8>)
 800a514:	42b0      	cmp	r0, r6
 800a516:	d03c      	beq.n	800a592 <HAL_GPIO_Init+0x18a>
 800a518:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800a51c:	42b0      	cmp	r0, r6
 800a51e:	d03a      	beq.n	800a596 <HAL_GPIO_Init+0x18e>
 800a520:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800a524:	42b0      	cmp	r0, r6
 800a526:	d038      	beq.n	800a59a <HAL_GPIO_Init+0x192>
 800a528:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800a52c:	42b0      	cmp	r0, r6
 800a52e:	d036      	beq.n	800a59e <HAL_GPIO_Init+0x196>
 800a530:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800a534:	42b0      	cmp	r0, r6
 800a536:	d034      	beq.n	800a5a2 <HAL_GPIO_Init+0x19a>
 800a538:	4548      	cmp	r0, r9
 800a53a:	d034      	beq.n	800a5a6 <HAL_GPIO_Init+0x19e>
 800a53c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800a540:	42b0      	cmp	r0, r6
 800a542:	bf0c      	ite	eq
 800a544:	2607      	moveq	r6, #7
 800a546:	2608      	movne	r6, #8
 800a548:	fa06 f60c 	lsl.w	r6, r6, ip
 800a54c:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a550:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 800a552:	6826      	ldr	r6, [r4, #0]
        temp &= ~(iocurrent);
 800a554:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a556:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 800a55a:	bf0c      	ite	eq
 800a55c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800a55e:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 800a560:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR1;
 800a562:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a564:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 800a568:	bf0c      	ite	eq
 800a56a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800a56c:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 800a56e:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR1;
 800a570:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a572:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800a576:	bf0c      	ite	eq
 800a578:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800a57a:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 800a57c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 800a57e:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a580:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 800a582:	bf54      	ite	pl
 800a584:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800a586:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 800a588:	60e6      	str	r6, [r4, #12]
    position++;
 800a58a:	3301      	adds	r3, #1
 800a58c:	e744      	b.n	800a418 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a58e:	2600      	movs	r6, #0
 800a590:	e7da      	b.n	800a548 <HAL_GPIO_Init+0x140>
 800a592:	2601      	movs	r6, #1
 800a594:	e7d8      	b.n	800a548 <HAL_GPIO_Init+0x140>
 800a596:	2602      	movs	r6, #2
 800a598:	e7d6      	b.n	800a548 <HAL_GPIO_Init+0x140>
 800a59a:	2603      	movs	r6, #3
 800a59c:	e7d4      	b.n	800a548 <HAL_GPIO_Init+0x140>
 800a59e:	2604      	movs	r6, #4
 800a5a0:	e7d2      	b.n	800a548 <HAL_GPIO_Init+0x140>
 800a5a2:	2605      	movs	r6, #5
 800a5a4:	e7d0      	b.n	800a548 <HAL_GPIO_Init+0x140>
 800a5a6:	2606      	movs	r6, #6
 800a5a8:	e7ce      	b.n	800a548 <HAL_GPIO_Init+0x140>
 800a5aa:	bf00      	nop
 800a5ac:	40010400 	.word	0x40010400
 800a5b0:	48000400 	.word	0x48000400
 800a5b4:	40021000 	.word	0x40021000
 800a5b8:	48001800 	.word	0x48001800

0800a5bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a5c0:	4c43      	ldr	r4, [pc, #268]	; (800a6d0 <HAL_GPIO_DeInit+0x114>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a5c2:	f8df a114 	ldr.w	sl, [pc, #276]	; 800a6d8 <HAL_GPIO_DeInit+0x11c>
 800a5c6:	f8df b114 	ldr.w	fp, [pc, #276]	; 800a6dc <HAL_GPIO_DeInit+0x120>
  uint32_t position = 0x00u;
 800a5ca:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a5cc:	f04f 0901 	mov.w	r9, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800a5d0:	fa31 f302 	lsrs.w	r3, r1, r2
 800a5d4:	d101      	bne.n	800a5da <HAL_GPIO_DeInit+0x1e>
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
  }
}
 800a5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a5da:	fa09 fe02 	lsl.w	lr, r9, r2
    if (iocurrent != 0x00u)
 800a5de:	ea1e 0701 	ands.w	r7, lr, r1
 800a5e2:	d065      	beq.n	800a6b0 <HAL_GPIO_DeInit+0xf4>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800a5e4:	f022 0503 	bic.w	r5, r2, #3
 800a5e8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800a5ec:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800a5f0:	f002 0c03 	and.w	ip, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 800a5f4:	68ab      	ldr	r3, [r5, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800a5f6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800a5fa:	260f      	movs	r6, #15
 800a5fc:	fa06 f60c 	lsl.w	r6, r6, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a600:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800a604:	ea06 0803 	and.w	r8, r6, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a608:	d054      	beq.n	800a6b4 <HAL_GPIO_DeInit+0xf8>
 800a60a:	4b32      	ldr	r3, [pc, #200]	; (800a6d4 <HAL_GPIO_DeInit+0x118>)
 800a60c:	4298      	cmp	r0, r3
 800a60e:	d053      	beq.n	800a6b8 <HAL_GPIO_DeInit+0xfc>
 800a610:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a614:	4298      	cmp	r0, r3
 800a616:	d051      	beq.n	800a6bc <HAL_GPIO_DeInit+0x100>
 800a618:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a61c:	4298      	cmp	r0, r3
 800a61e:	d04f      	beq.n	800a6c0 <HAL_GPIO_DeInit+0x104>
 800a620:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a624:	4298      	cmp	r0, r3
 800a626:	d04d      	beq.n	800a6c4 <HAL_GPIO_DeInit+0x108>
 800a628:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a62c:	4298      	cmp	r0, r3
 800a62e:	d04b      	beq.n	800a6c8 <HAL_GPIO_DeInit+0x10c>
 800a630:	4550      	cmp	r0, sl
 800a632:	d04b      	beq.n	800a6cc <HAL_GPIO_DeInit+0x110>
 800a634:	4558      	cmp	r0, fp
 800a636:	bf0c      	ite	eq
 800a638:	2307      	moveq	r3, #7
 800a63a:	2308      	movne	r3, #8
 800a63c:	fa03 f30c 	lsl.w	r3, r3, ip
 800a640:	4543      	cmp	r3, r8
 800a642:	d113      	bne.n	800a66c <HAL_GPIO_DeInit+0xb0>
        EXTI->IMR1 &= ~(iocurrent);
 800a644:	6823      	ldr	r3, [r4, #0]
 800a646:	ea23 0307 	bic.w	r3, r3, r7
 800a64a:	6023      	str	r3, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800a64c:	6863      	ldr	r3, [r4, #4]
 800a64e:	ea23 0307 	bic.w	r3, r3, r7
 800a652:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800a654:	68a3      	ldr	r3, [r4, #8]
 800a656:	ea23 0307 	bic.w	r3, r3, r7
 800a65a:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800a65c:	68e3      	ldr	r3, [r4, #12]
 800a65e:	ea23 0307 	bic.w	r3, r3, r7
 800a662:	60e3      	str	r3, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800a664:	68ab      	ldr	r3, [r5, #8]
 800a666:	ea23 0306 	bic.w	r3, r3, r6
 800a66a:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a66c:	6805      	ldr	r5, [r0, #0]
 800a66e:	2603      	movs	r6, #3
 800a670:	0053      	lsls	r3, r2, #1
 800a672:	fa06 f303 	lsl.w	r3, r6, r3
 800a676:	431d      	orrs	r5, r3
 800a678:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a67a:	fa22 f506 	lsr.w	r5, r2, r6
 800a67e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800a682:	f002 0c07 	and.w	ip, r2, #7
 800a686:	6a2e      	ldr	r6, [r5, #32]
 800a688:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800a68c:	270f      	movs	r7, #15
 800a68e:	fa07 f70c 	lsl.w	r7, r7, ip
 800a692:	ea26 0707 	bic.w	r7, r6, r7
 800a696:	622f      	str	r7, [r5, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a698:	6885      	ldr	r5, [r0, #8]
 800a69a:	ea25 0503 	bic.w	r5, r5, r3
 800a69e:	6085      	str	r5, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a6a0:	6845      	ldr	r5, [r0, #4]
 800a6a2:	ea25 050e 	bic.w	r5, r5, lr
 800a6a6:	6045      	str	r5, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a6a8:	68c5      	ldr	r5, [r0, #12]
 800a6aa:	ea25 0303 	bic.w	r3, r5, r3
 800a6ae:	60c3      	str	r3, [r0, #12]
    position++;
 800a6b0:	3201      	adds	r2, #1
 800a6b2:	e78d      	b.n	800a5d0 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	e7c1      	b.n	800a63c <HAL_GPIO_DeInit+0x80>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e7bf      	b.n	800a63c <HAL_GPIO_DeInit+0x80>
 800a6bc:	2302      	movs	r3, #2
 800a6be:	e7bd      	b.n	800a63c <HAL_GPIO_DeInit+0x80>
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	e7bb      	b.n	800a63c <HAL_GPIO_DeInit+0x80>
 800a6c4:	2304      	movs	r3, #4
 800a6c6:	e7b9      	b.n	800a63c <HAL_GPIO_DeInit+0x80>
 800a6c8:	2305      	movs	r3, #5
 800a6ca:	e7b7      	b.n	800a63c <HAL_GPIO_DeInit+0x80>
 800a6cc:	2306      	movs	r3, #6
 800a6ce:	e7b5      	b.n	800a63c <HAL_GPIO_DeInit+0x80>
 800a6d0:	40010400 	.word	0x40010400
 800a6d4:	48000400 	.word	0x48000400
 800a6d8:	48001800 	.word	0x48001800
 800a6dc:	48001c00 	.word	0x48001c00

0800a6e0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a6e0:	6903      	ldr	r3, [r0, #16]
 800a6e2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800a6e4:	bf14      	ite	ne
 800a6e6:	2001      	movne	r0, #1
 800a6e8:	2000      	moveq	r0, #0
 800a6ea:	4770      	bx	lr

0800a6ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a6ec:	b10a      	cbz	r2, 800a6f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a6ee:	6181      	str	r1, [r0, #24]
 800a6f0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a6f2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800a6f4:	4770      	bx	lr

0800a6f6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800a6f6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a6f8:	ea01 0203 	and.w	r2, r1, r3
 800a6fc:	ea21 0103 	bic.w	r1, r1, r3
 800a700:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a704:	6181      	str	r1, [r0, #24]
}
 800a706:	4770      	bx	lr

0800a708 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a708:	4a04      	ldr	r2, [pc, #16]	; (800a71c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800a70a:	6951      	ldr	r1, [r2, #20]
 800a70c:	4201      	tst	r1, r0
{
 800a70e:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a710:	d002      	beq.n	800a718 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a712:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a714:	f00e fa42 	bl	8018b9c <HAL_GPIO_EXTI_Callback>
  }
}
 800a718:	bd08      	pop	{r3, pc}
 800a71a:	bf00      	nop
 800a71c:	40010400 	.word	0x40010400

0800a720 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a720:	6803      	ldr	r3, [r0, #0]
 800a722:	699a      	ldr	r2, [r3, #24]
 800a724:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800a726:	bf44      	itt	mi
 800a728:	2200      	movmi	r2, #0
 800a72a:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a72c:	699a      	ldr	r2, [r3, #24]
 800a72e:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a730:	bf5e      	ittt	pl
 800a732:	699a      	ldrpl	r2, [r3, #24]
 800a734:	f042 0201 	orrpl.w	r2, r2, #1
 800a738:	619a      	strpl	r2, [r3, #24]
  }
}
 800a73a:	4770      	bx	lr

0800a73c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a73c:	b530      	push	{r4, r5, lr}
 800a73e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800a740:	6804      	ldr	r4, [r0, #0]
 800a742:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 800a746:	431a      	orrs	r2, r3
 800a748:	4b05      	ldr	r3, [pc, #20]	; (800a760 <I2C_TransferConfig+0x24>)
 800a74a:	6860      	ldr	r0, [r4, #4]
 800a74c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a750:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 800a754:	430a      	orrs	r2, r1
 800a756:	ea20 0003 	bic.w	r0, r0, r3
 800a75a:	4302      	orrs	r2, r0
 800a75c:	6062      	str	r2, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a75e:	bd30      	pop	{r4, r5, pc}
 800a760:	03ff63ff 	.word	0x03ff63ff

0800a764 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a764:	6803      	ldr	r3, [r0, #0]
{
 800a766:	b570      	push	{r4, r5, r6, lr}
 800a768:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a76a:	6998      	ldr	r0, [r3, #24]
 800a76c:	f010 0010 	ands.w	r0, r0, #16
{
 800a770:	460d      	mov	r5, r1
 800a772:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a774:	d116      	bne.n	800a7a4 <I2C_IsAcknowledgeFailed+0x40>
}
 800a776:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 800a778:	1c69      	adds	r1, r5, #1
 800a77a:	d014      	beq.n	800a7a6 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a77c:	f7fd ff52 	bl	8008624 <HAL_GetTick>
 800a780:	1b80      	subs	r0, r0, r6
 800a782:	4285      	cmp	r5, r0
 800a784:	d300      	bcc.n	800a788 <I2C_IsAcknowledgeFailed+0x24>
 800a786:	b96d      	cbnz	r5, 800a7a4 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a788:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a78a:	f043 0320 	orr.w	r3, r3, #32
 800a78e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a790:	2320      	movs	r3, #32
 800a792:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a796:	2300      	movs	r3, #0
 800a798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800a79c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800a7a0:	2001      	movs	r0, #1
 800a7a2:	e7e8      	b.n	800a776 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a7a4:	6823      	ldr	r3, [r4, #0]
 800a7a6:	699a      	ldr	r2, [r3, #24]
 800a7a8:	0692      	lsls	r2, r2, #26
 800a7aa:	d5e5      	bpl.n	800a778 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7ac:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7ae:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7b0:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800a7b2:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7b4:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800a7b6:	f7ff ffb3 	bl	800a720 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800a7ba:	6822      	ldr	r2, [r4, #0]
 800a7bc:	6853      	ldr	r3, [r2, #4]
 800a7be:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800a7c2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800a7c6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800a7ca:	f023 0301 	bic.w	r3, r3, #1
 800a7ce:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a7d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a7d2:	f043 0304 	orr.w	r3, r3, #4
 800a7d6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7d8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800a7da:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a7de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800a7e6:	e7db      	b.n	800a7a0 <I2C_IsAcknowledgeFailed+0x3c>

0800a7e8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800a7e8:	b570      	push	{r4, r5, r6, lr}
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	460d      	mov	r5, r1
 800a7ee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a7f0:	6823      	ldr	r3, [r4, #0]
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	079b      	lsls	r3, r3, #30
 800a7f6:	d501      	bpl.n	800a7fc <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800a7f8:	2000      	movs	r0, #0
}
 800a7fa:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7fc:	4632      	mov	r2, r6
 800a7fe:	4629      	mov	r1, r5
 800a800:	4620      	mov	r0, r4
 800a802:	f7ff ffaf 	bl	800a764 <I2C_IsAcknowledgeFailed>
 800a806:	b9a0      	cbnz	r0, 800a832 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800a808:	1c6a      	adds	r2, r5, #1
 800a80a:	d0f1      	beq.n	800a7f0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a80c:	f7fd ff0a 	bl	8008624 <HAL_GetTick>
 800a810:	1b80      	subs	r0, r0, r6
 800a812:	42a8      	cmp	r0, r5
 800a814:	d801      	bhi.n	800a81a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800a816:	2d00      	cmp	r5, #0
 800a818:	d1ea      	bne.n	800a7f0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a81a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a81c:	f043 0320 	orr.w	r3, r3, #32
 800a820:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a822:	2320      	movs	r3, #32
 800a824:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a828:	2300      	movs	r3, #0
 800a82a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800a82e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800a832:	2001      	movs	r0, #1
 800a834:	e7e1      	b.n	800a7fa <I2C_WaitOnTXISFlagUntilTimeout+0x12>

0800a836 <I2C_WaitOnFlagUntilTimeout>:
{
 800a836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a83a:	9f06      	ldr	r7, [sp, #24]
 800a83c:	4604      	mov	r4, r0
 800a83e:	4688      	mov	r8, r1
 800a840:	4616      	mov	r6, r2
 800a842:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a844:	6822      	ldr	r2, [r4, #0]
 800a846:	6993      	ldr	r3, [r2, #24]
 800a848:	ea38 0303 	bics.w	r3, r8, r3
 800a84c:	bf0c      	ite	eq
 800a84e:	2301      	moveq	r3, #1
 800a850:	2300      	movne	r3, #0
 800a852:	42b3      	cmp	r3, r6
 800a854:	d001      	beq.n	800a85a <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800a856:	2000      	movs	r0, #0
 800a858:	e015      	b.n	800a886 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800a85a:	1c6b      	adds	r3, r5, #1
 800a85c:	d0f3      	beq.n	800a846 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a85e:	f7fd fee1 	bl	8008624 <HAL_GetTick>
 800a862:	1bc0      	subs	r0, r0, r7
 800a864:	42a8      	cmp	r0, r5
 800a866:	d801      	bhi.n	800a86c <I2C_WaitOnFlagUntilTimeout+0x36>
 800a868:	2d00      	cmp	r5, #0
 800a86a:	d1eb      	bne.n	800a844 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a86c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a86e:	f043 0320 	orr.w	r3, r3, #32
 800a872:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a874:	2320      	movs	r3, #32
 800a876:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a87a:	2300      	movs	r3, #0
 800a87c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800a880:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a884:	2001      	movs	r0, #1
}
 800a886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a88c <I2C_RequestMemoryWrite>:
{
 800a88c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a890:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 800a894:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a896:	4b17      	ldr	r3, [pc, #92]	; (800a8f4 <I2C_RequestMemoryWrite+0x68>)
 800a898:	9300      	str	r3, [sp, #0]
{
 800a89a:	4605      	mov	r5, r0
 800a89c:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a89e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a8a2:	b2f2      	uxtb	r2, r6
 800a8a4:	f7ff ff4a 	bl	800a73c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8a8:	4642      	mov	r2, r8
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	f7ff ff9b 	bl	800a7e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a8b2:	b118      	cbz	r0, 800a8bc <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 800a8b4:	2001      	movs	r0, #1
}
 800a8b6:	b002      	add	sp, #8
 800a8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a8bc:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a8be:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a8c0:	d10d      	bne.n	800a8de <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a8c2:	b2e4      	uxtb	r4, r4
 800a8c4:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f8cd 8000 	str.w	r8, [sp]
 800a8cc:	463b      	mov	r3, r7
 800a8ce:	2180      	movs	r1, #128	; 0x80
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	f7ff ffb0 	bl	800a836 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800a8d6:	3800      	subs	r0, #0
 800a8d8:	bf18      	it	ne
 800a8da:	2001      	movne	r0, #1
 800a8dc:	e7eb      	b.n	800a8b6 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a8de:	0a22      	lsrs	r2, r4, #8
 800a8e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8e2:	4639      	mov	r1, r7
 800a8e4:	4642      	mov	r2, r8
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	f7ff ff7e 	bl	800a7e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d1e1      	bne.n	800a8b4 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a8f0:	682b      	ldr	r3, [r5, #0]
 800a8f2:	e7e6      	b.n	800a8c2 <I2C_RequestMemoryWrite+0x36>
 800a8f4:	80002000 	.word	0x80002000

0800a8f8 <I2C_RequestMemoryRead>:
{
 800a8f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a8fc:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 800a900:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a902:	4b17      	ldr	r3, [pc, #92]	; (800a960 <I2C_RequestMemoryRead+0x68>)
 800a904:	9300      	str	r3, [sp, #0]
{
 800a906:	4605      	mov	r5, r0
 800a908:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a90a:	2300      	movs	r3, #0
 800a90c:	b2f2      	uxtb	r2, r6
 800a90e:	f7ff ff15 	bl	800a73c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a912:	4642      	mov	r2, r8
 800a914:	4639      	mov	r1, r7
 800a916:	4628      	mov	r0, r5
 800a918:	f7ff ff66 	bl	800a7e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a91c:	b118      	cbz	r0, 800a926 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 800a91e:	2001      	movs	r0, #1
}
 800a920:	b002      	add	sp, #8
 800a922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a926:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a928:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a92a:	d10d      	bne.n	800a948 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a92c:	b2e4      	uxtb	r4, r4
 800a92e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a930:	2200      	movs	r2, #0
 800a932:	f8cd 8000 	str.w	r8, [sp]
 800a936:	463b      	mov	r3, r7
 800a938:	2140      	movs	r1, #64	; 0x40
 800a93a:	4628      	mov	r0, r5
 800a93c:	f7ff ff7b 	bl	800a836 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800a940:	3800      	subs	r0, #0
 800a942:	bf18      	it	ne
 800a944:	2001      	movne	r0, #1
 800a946:	e7eb      	b.n	800a920 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a948:	0a22      	lsrs	r2, r4, #8
 800a94a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a94c:	4639      	mov	r1, r7
 800a94e:	4642      	mov	r2, r8
 800a950:	4628      	mov	r0, r5
 800a952:	f7ff ff49 	bl	800a7e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a956:	2800      	cmp	r0, #0
 800a958:	d1e1      	bne.n	800a91e <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a95a:	682b      	ldr	r3, [r5, #0]
 800a95c:	e7e6      	b.n	800a92c <I2C_RequestMemoryRead+0x34>
 800a95e:	bf00      	nop
 800a960:	80002000 	.word	0x80002000

0800a964 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800a964:	b570      	push	{r4, r5, r6, lr}
 800a966:	4604      	mov	r4, r0
 800a968:	460d      	mov	r5, r1
 800a96a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a96c:	6823      	ldr	r3, [r4, #0]
 800a96e:	699b      	ldr	r3, [r3, #24]
 800a970:	069b      	lsls	r3, r3, #26
 800a972:	d501      	bpl.n	800a978 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800a974:	2000      	movs	r0, #0
}
 800a976:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a978:	4632      	mov	r2, r6
 800a97a:	4629      	mov	r1, r5
 800a97c:	4620      	mov	r0, r4
 800a97e:	f7ff fef1 	bl	800a764 <I2C_IsAcknowledgeFailed>
 800a982:	b990      	cbnz	r0, 800a9aa <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a984:	f7fd fe4e 	bl	8008624 <HAL_GetTick>
 800a988:	1b80      	subs	r0, r0, r6
 800a98a:	42a8      	cmp	r0, r5
 800a98c:	d801      	bhi.n	800a992 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800a98e:	2d00      	cmp	r5, #0
 800a990:	d1ec      	bne.n	800a96c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a992:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a994:	f043 0320 	orr.w	r3, r3, #32
 800a998:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a99a:	2320      	movs	r3, #32
 800a99c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800a9a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800a9aa:	2001      	movs	r0, #1
 800a9ac:	e7e3      	b.n	800a976 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800a9ae <HAL_I2C_MspInit>:
}
 800a9ae:	4770      	bx	lr

0800a9b0 <HAL_I2C_Init>:
{
 800a9b0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	d04a      	beq.n	800aa4e <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a9b8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a9bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a9c0:	b91b      	cbnz	r3, 800a9ca <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800a9c2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800a9c6:	f7ff fff2 	bl	800a9ae <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a9ca:	2324      	movs	r3, #36	; 0x24
 800a9cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800a9d0:	6823      	ldr	r3, [r4, #0]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	f022 0201 	bic.w	r2, r2, #1
 800a9d8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a9da:	6862      	ldr	r2, [r4, #4]
 800a9dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a9e0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a9e2:	689a      	ldr	r2, [r3, #8]
 800a9e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a9e8:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a9ea:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a9ee:	2901      	cmp	r1, #1
 800a9f0:	d124      	bne.n	800aa3c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a9f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a9f6:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a9f8:	685a      	ldr	r2, [r3, #4]
 800a9fa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800a9fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa02:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800aa04:	68da      	ldr	r2, [r3, #12]
 800aa06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aa0a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800aa0c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800aa10:	430a      	orrs	r2, r1
 800aa12:	69a1      	ldr	r1, [r4, #24]
 800aa14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800aa18:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800aa1a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800aa1e:	430a      	orrs	r2, r1
 800aa20:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	f042 0201 	orr.w	r2, r2, #1
 800aa28:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa2a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800aa2c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa2e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800aa30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800aa34:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa36:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800aa3a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800aa3c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aa40:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800aa42:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800aa44:	bf04      	itt	eq
 800aa46:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800aa4a:	605a      	streq	r2, [r3, #4]
 800aa4c:	e7d4      	b.n	800a9f8 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800aa4e:	2001      	movs	r0, #1
 800aa50:	e7f3      	b.n	800aa3a <HAL_I2C_Init+0x8a>

0800aa52 <HAL_I2C_MspDeInit>:
 800aa52:	4770      	bx	lr

0800aa54 <HAL_I2C_DeInit>:
{
 800aa54:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800aa56:	4604      	mov	r4, r0
 800aa58:	b198      	cbz	r0, 800aa82 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800aa5a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800aa5c:	2324      	movs	r3, #36	; 0x24
 800aa5e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800aa62:	6813      	ldr	r3, [r2, #0]
 800aa64:	f023 0301 	bic.w	r3, r3, #1
 800aa68:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800aa6a:	f7ff fff2 	bl	800aa52 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa6e:	2000      	movs	r0, #0
 800aa70:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800aa72:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800aa76:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800aa7a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa7c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800aa80:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800aa82:	2001      	movs	r0, #1
 800aa84:	e7fc      	b.n	800aa80 <HAL_I2C_DeInit+0x2c>

0800aa86 <HAL_I2C_Mem_Write>:
{
 800aa86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	469b      	mov	fp, r3
 800aa8e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800aa92:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa94:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800aa98:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa9c:	2b20      	cmp	r3, #32
{
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	460f      	mov	r7, r1
 800aaa2:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800aaa4:	f040 80a3 	bne.w	800abee <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 800aaa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaaa:	b10b      	cbz	r3, 800aab0 <HAL_I2C_Mem_Write+0x2a>
 800aaac:	9b03      	ldr	r3, [sp, #12]
 800aaae:	b933      	cbnz	r3, 800aabe <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aab4:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800aab6:	2001      	movs	r0, #1
}
 800aab8:	b005      	add	sp, #20
 800aaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800aabe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	f000 8093 	beq.w	800abee <HAL_I2C_Mem_Write+0x168>
 800aac8:	2501      	movs	r5, #1
 800aaca:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800aace:	f7fd fda9 	bl	8008624 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aad2:	2319      	movs	r3, #25
 800aad4:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800aad6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aad8:	462a      	mov	r2, r5
 800aada:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aade:	4620      	mov	r0, r4
 800aae0:	f7ff fea9 	bl	800a836 <I2C_WaitOnFlagUntilTimeout>
 800aae4:	4680      	mov	r8, r0
 800aae6:	2800      	cmp	r0, #0
 800aae8:	d1e5      	bne.n	800aab6 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aaea:	2321      	movs	r3, #33	; 0x21
 800aaec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aaf0:	2340      	movs	r3, #64	; 0x40
 800aaf2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800aaf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaf8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800aafa:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aafc:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 800aafe:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800ab00:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ab02:	e9cd 9600 	strd	r9, r6, [sp]
 800ab06:	465b      	mov	r3, fp
 800ab08:	4652      	mov	r2, sl
 800ab0a:	4639      	mov	r1, r7
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f7ff febd 	bl	800a88c <I2C_RequestMemoryWrite>
 800ab12:	b110      	cbz	r0, 800ab1a <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 800ab14:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800ab18:	e7cd      	b.n	800aab6 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	2bff      	cmp	r3, #255	; 0xff
 800ab20:	d955      	bls.n	800abce <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab22:	22ff      	movs	r2, #255	; 0xff
 800ab24:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ab26:	9000      	str	r0, [sp, #0]
 800ab28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ab2c:	4639      	mov	r1, r7
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f7ff fe04 	bl	800a73c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab34:	4632      	mov	r2, r6
 800ab36:	4649      	mov	r1, r9
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f7ff fe55 	bl	800a7e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d1b9      	bne.n	800aab6 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ab42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab44:	6822      	ldr	r2, [r4, #0]
 800ab46:	f813 1b01 	ldrb.w	r1, [r3], #1
 800ab4a:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800ab4c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800ab4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800ab50:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800ab52:	3b01      	subs	r3, #1
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ab58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800ab5a:	3a01      	subs	r2, #1
 800ab5c:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ab5e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800ab60:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ab62:	b1ab      	cbz	r3, 800ab90 <HAL_I2C_Mem_Write+0x10a>
 800ab64:	b9a2      	cbnz	r2, 800ab90 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ab66:	9600      	str	r6, [sp, #0]
 800ab68:	464b      	mov	r3, r9
 800ab6a:	2180      	movs	r1, #128	; 0x80
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f7ff fe62 	bl	800a836 <I2C_WaitOnFlagUntilTimeout>
 800ab72:	2800      	cmp	r0, #0
 800ab74:	d19f      	bne.n	800aab6 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	2bff      	cmp	r3, #255	; 0xff
 800ab7c:	d92f      	bls.n	800abde <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab7e:	22ff      	movs	r2, #255	; 0xff
 800ab80:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ab82:	9000      	str	r0, [sp, #0]
 800ab84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ab88:	4639      	mov	r1, r7
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f7ff fdd6 	bl	800a73c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800ab90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1cd      	bne.n	800ab34 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab98:	4632      	mov	r2, r6
 800ab9a:	4649      	mov	r1, r9
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f7ff fee1 	bl	800a964 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d187      	bne.n	800aab6 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	2120      	movs	r1, #32
 800abaa:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800abac:	685a      	ldr	r2, [r3, #4]
 800abae:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800abb2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800abb6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800abba:	f022 0201 	bic.w	r2, r2, #1
 800abbe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800abc0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800abc4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800abc8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800abcc:	e774      	b.n	800aab8 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800abce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800abd0:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800abd2:	b292      	uxth	r2, r2
 800abd4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800abd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800abda:	b2d2      	uxtb	r2, r2
 800abdc:	e7a6      	b.n	800ab2c <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 800abde:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800abe0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800abe2:	b292      	uxth	r2, r2
 800abe4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800abe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800abea:	b2d2      	uxtb	r2, r2
 800abec:	e7cc      	b.n	800ab88 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 800abee:	2002      	movs	r0, #2
 800abf0:	e762      	b.n	800aab8 <HAL_I2C_Mem_Write+0x32>
	...

0800abf4 <HAL_I2C_Mem_Read>:
{
 800abf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf8:	b085      	sub	sp, #20
 800abfa:	469b      	mov	fp, r3
 800abfc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800ac00:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac02:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800ac06:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac0a:	2b20      	cmp	r3, #32
{
 800ac0c:	4604      	mov	r4, r0
 800ac0e:	460f      	mov	r7, r1
 800ac10:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac12:	f040 80a7 	bne.w	800ad64 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 800ac16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac18:	b10b      	cbz	r3, 800ac1e <HAL_I2C_Mem_Read+0x2a>
 800ac1a:	9b03      	ldr	r3, [sp, #12]
 800ac1c:	b933      	cbnz	r3, 800ac2c <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ac1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac22:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800ac24:	2001      	movs	r0, #1
}
 800ac26:	b005      	add	sp, #20
 800ac28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800ac2c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	f000 8097 	beq.w	800ad64 <HAL_I2C_Mem_Read+0x170>
 800ac36:	2501      	movs	r5, #1
 800ac38:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800ac3c:	f7fd fcf2 	bl	8008624 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ac40:	2319      	movs	r3, #25
 800ac42:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800ac44:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ac46:	462a      	mov	r2, r5
 800ac48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f7ff fdf2 	bl	800a836 <I2C_WaitOnFlagUntilTimeout>
 800ac52:	4680      	mov	r8, r0
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d1e5      	bne.n	800ac24 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ac58:	2322      	movs	r3, #34	; 0x22
 800ac5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ac5e:	2340      	movs	r3, #64	; 0x40
 800ac60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800ac64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac66:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800ac68:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac6a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 800ac6c:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800ac6e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ac70:	e9cd 9600 	strd	r9, r6, [sp]
 800ac74:	465b      	mov	r3, fp
 800ac76:	4652      	mov	r2, sl
 800ac78:	4639      	mov	r1, r7
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f7ff fe3c 	bl	800a8f8 <I2C_RequestMemoryRead>
 800ac80:	b110      	cbz	r0, 800ac88 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 800ac82:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800ac86:	e7cd      	b.n	800ac24 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	2bff      	cmp	r3, #255	; 0xff
 800ac8e:	4b36      	ldr	r3, [pc, #216]	; (800ad68 <HAL_I2C_Mem_Read+0x174>)
 800ac90:	d958      	bls.n	800ad44 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac92:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800ac94:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac96:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800ac98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800ac9c:	4639      	mov	r1, r7
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f7ff fd4c 	bl	800a73c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800aca4:	9600      	str	r6, [sp, #0]
 800aca6:	464b      	mov	r3, r9
 800aca8:	2200      	movs	r2, #0
 800acaa:	2104      	movs	r1, #4
 800acac:	4620      	mov	r0, r4
 800acae:	f7ff fdc2 	bl	800a836 <I2C_WaitOnFlagUntilTimeout>
 800acb2:	2800      	cmp	r0, #0
 800acb4:	d1b6      	bne.n	800ac24 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800acb6:	6823      	ldr	r3, [r4, #0]
 800acb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acbc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800acbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800acc0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800acc2:	3301      	adds	r3, #1
 800acc4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800acc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800acc8:	3b01      	subs	r3, #1
 800acca:	b29b      	uxth	r3, r3
 800accc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800acce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800acd0:	3a01      	subs	r2, #1
 800acd2:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800acd4:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800acd6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800acd8:	b1ab      	cbz	r3, 800ad06 <HAL_I2C_Mem_Read+0x112>
 800acda:	b9a2      	cbnz	r2, 800ad06 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800acdc:	9600      	str	r6, [sp, #0]
 800acde:	464b      	mov	r3, r9
 800ace0:	2180      	movs	r1, #128	; 0x80
 800ace2:	4620      	mov	r0, r4
 800ace4:	f7ff fda7 	bl	800a836 <I2C_WaitOnFlagUntilTimeout>
 800ace8:	2800      	cmp	r0, #0
 800acea:	d19b      	bne.n	800ac24 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800acec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800acee:	b29b      	uxth	r3, r3
 800acf0:	2bff      	cmp	r3, #255	; 0xff
 800acf2:	d92f      	bls.n	800ad54 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800acf4:	22ff      	movs	r2, #255	; 0xff
 800acf6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800acf8:	9000      	str	r0, [sp, #0]
 800acfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800acfe:	4639      	mov	r1, r7
 800ad00:	4620      	mov	r0, r4
 800ad02:	f7ff fd1b 	bl	800a73c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800ad06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1ca      	bne.n	800aca4 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad0e:	4632      	mov	r2, r6
 800ad10:	4649      	mov	r1, r9
 800ad12:	4620      	mov	r0, r4
 800ad14:	f7ff fe26 	bl	800a964 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d183      	bne.n	800ac24 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad1c:	6823      	ldr	r3, [r4, #0]
 800ad1e:	2120      	movs	r1, #32
 800ad20:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800ad22:	685a      	ldr	r2, [r3, #4]
 800ad24:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800ad28:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800ad2c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800ad30:	f022 0201 	bic.w	r2, r2, #1
 800ad34:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800ad36:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ad3a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ad3e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800ad42:	e770      	b.n	800ac26 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800ad44:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800ad46:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800ad48:	b292      	uxth	r2, r2
 800ad4a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800ad4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad50:	b2d2      	uxtb	r2, r2
 800ad52:	e7a3      	b.n	800ac9c <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 800ad54:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ad56:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800ad58:	b292      	uxth	r2, r2
 800ad5a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ad5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad60:	b2d2      	uxtb	r2, r2
 800ad62:	e7cc      	b.n	800acfe <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 800ad64:	2002      	movs	r0, #2
 800ad66:	e75e      	b.n	800ac26 <HAL_I2C_Mem_Read+0x32>
 800ad68:	80002400 	.word	0x80002400

0800ad6c <HAL_I2C_GetState>:
  return hi2c->State;
 800ad6c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800ad70:	4770      	bx	lr

0800ad72 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ad72:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad74:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800ad78:	2b20      	cmp	r3, #32
 800ad7a:	b2dc      	uxtb	r4, r3
 800ad7c:	d11d      	bne.n	800adba <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad7e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d019      	beq.n	800adba <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ad86:	2324      	movs	r3, #36	; 0x24
 800ad88:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ad8c:	6803      	ldr	r3, [r0, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	f022 0201 	bic.w	r2, r2, #1
 800ad94:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ad9c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	4311      	orrs	r1, r2
 800ada2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	f042 0201 	orr.w	r2, r2, #1
 800adaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800adac:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800adae:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800adb2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800adb6:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800adb8:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800adba:	2002      	movs	r0, #2
 800adbc:	e7fc      	b.n	800adb8 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800adbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800adbe:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800adc0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800adc4:	2b20      	cmp	r3, #32
 800adc6:	b2dc      	uxtb	r4, r3
 800adc8:	d11c      	bne.n	800ae04 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800adca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800adce:	2b01      	cmp	r3, #1
 800add0:	d018      	beq.n	800ae04 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800add2:	2324      	movs	r3, #36	; 0x24
 800add4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800add8:	6803      	ldr	r3, [r0, #0]
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	f022 0201 	bic.w	r2, r2, #1
 800ade0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ade2:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ade4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ade8:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800adec:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	f042 0201 	orr.w	r2, r2, #1
 800adf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800adf6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800adf8:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800adfc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800ae00:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800ae02:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800ae04:	2002      	movs	r0, #2
 800ae06:	e7fc      	b.n	800ae02 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800ae08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ae08:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ae0a:	4604      	mov	r4, r0
{
 800ae0c:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 800ae0e:	b360      	cbz	r0, 800ae6a <HAL_PCD_Init+0x62>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ae10:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 800ae14:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ae16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ae1a:	b91b      	cbnz	r3, 800ae24 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ae1c:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ae20:	f00e fc74 	bl	801970c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ae24:	2303      	movs	r3, #3
 800ae26:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ae2a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ae2c:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ae2e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 800ae32:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 800ae36:	bf08      	it	eq
 800ae38:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 800ae3a:	f002 ffdb 	bl	800ddf4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ae3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae40:	466e      	mov	r6, sp
 800ae42:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ae44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae46:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ae48:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ae4c:	e886 0003 	stmia.w	r6, {r0, r1}
 800ae50:	4625      	mov	r5, r4
 800ae52:	1d27      	adds	r7, r4, #4
 800ae54:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800ae58:	f855 0b10 	ldr.w	r0, [r5], #16
 800ae5c:	f002 ff26 	bl	800dcac <USB_CoreInit>
 800ae60:	4606      	mov	r6, r0
 800ae62:	b120      	cbz	r0, 800ae6e <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ae64:	2302      	movs	r3, #2
 800ae66:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 800ae6a:	2501      	movs	r5, #1
 800ae6c:	e054      	b.n	800af18 <HAL_PCD_Init+0x110>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ae6e:	4601      	mov	r1, r0
 800ae70:	6820      	ldr	r0, [r4, #0]
 800ae72:	f002 ffc5 	bl	800de00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae76:	4630      	mov	r0, r6
 800ae78:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ae7c:	261c      	movs	r6, #28
 800ae7e:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ae82:	4601      	mov	r1, r0
 800ae84:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae86:	4594      	cmp	ip, r2
 800ae88:	f100 0001 	add.w	r0, r0, #1
 800ae8c:	d81c      	bhi.n	800aec8 <HAL_PCD_Init+0xc0>
 800ae8e:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ae90:	261c      	movs	r6, #28
 800ae92:	4619      	mov	r1, r3
 800ae94:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae96:	4584      	cmp	ip, r0
 800ae98:	f103 0301 	add.w	r3, r3, #1
 800ae9c:	d822      	bhi.n	800aee4 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ae9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aea0:	466e      	mov	r6, sp
 800aea2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800aea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aea6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800aea8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aeac:	e886 0003 	stmia.w	r6, {r0, r1}
 800aeb0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800aeb4:	6820      	ldr	r0, [r4, #0]
 800aeb6:	f002 ffe5 	bl	800de84 <USB_DevInit>
 800aeba:	2301      	movs	r3, #1
 800aebc:	4605      	mov	r5, r0
 800aebe:	b1f0      	cbz	r0, 800aefe <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aec0:	2202      	movs	r2, #2
 800aec2:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 800aec6:	e7d0      	b.n	800ae6a <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 800aec8:	fb06 4302 	mla	r3, r6, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 800aecc:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].is_in = 1U;
 800aed0:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 800aed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800aed8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800aedc:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800aee0:	6519      	str	r1, [r3, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aee2:	e7cf      	b.n	800ae84 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 800aee4:	fb06 4200 	mla	r2, r6, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800aee8:	e9c2 1181 	strd	r1, r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].is_in = 0U;
 800aeec:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 800aef0:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800aef4:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800aef8:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aefc:	e7ca      	b.n	800ae94 <HAL_PCD_Init+0x8c>
  }

  hpcd->USB_Address = 0U;
 800aefe:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800af02:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800af06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d102      	bne.n	800af12 <HAL_PCD_Init+0x10a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800af0c:	4620      	mov	r0, r4
 800af0e:	f000 fbe4 	bl	800b6da <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800af12:	6820      	ldr	r0, [r4, #0]
 800af14:	f003 faa2 	bl	800e45c <USB_DevDisconnect>

  return HAL_OK;
}
 800af18:	4628      	mov	r0, r5
 800af1a:	b00b      	add	sp, #44	; 0x2c
 800af1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af1e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800af1e:	b510      	push	{r4, lr}
 800af20:	4604      	mov	r4, r0
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af22:	6800      	ldr	r0, [r0, #0]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800af24:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d012      	beq.n	800af52 <HAL_PCD_Start+0x34>
 800af2c:	2301      	movs	r3, #1
 800af2e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800af32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800af34:	2b01      	cmp	r3, #1
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800af36:	bf02      	ittt	eq
 800af38:	6b83      	ldreq	r3, [r0, #56]	; 0x38
 800af3a:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
 800af3e:	6383      	streq	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800af40:	f002 ff52 	bl	800dde8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800af44:	6820      	ldr	r0, [r4, #0]
 800af46:	f003 fa7b 	bl	800e440 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800af4a:	2000      	movs	r0, #0
 800af4c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 800af50:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800af52:	2002      	movs	r0, #2
 800af54:	e7fc      	b.n	800af50 <HAL_PCD_Start+0x32>
	...

0800af58 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800af58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af5c:	6805      	ldr	r5, [r0, #0]
{
 800af5e:	b085      	sub	sp, #20
 800af60:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800af62:	4628      	mov	r0, r5
 800af64:	f003 fab7 	bl	800e4d6 <USB_GetMode>
 800af68:	9000      	str	r0, [sp, #0]
 800af6a:	2800      	cmp	r0, #0
 800af6c:	f040 813d 	bne.w	800b1ea <HAL_PCD_IRQHandler+0x292>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800af70:	6820      	ldr	r0, [r4, #0]
 800af72:	f003 fa81 	bl	800e478 <USB_ReadInterrupts>
 800af76:	2800      	cmp	r0, #0
 800af78:	f000 8137 	beq.w	800b1ea <HAL_PCD_IRQHandler+0x292>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800af7c:	6820      	ldr	r0, [r4, #0]
 800af7e:	f003 fa7b 	bl	800e478 <USB_ReadInterrupts>
 800af82:	0786      	lsls	r6, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800af84:	bf48      	it	mi
 800af86:	6822      	ldrmi	r2, [r4, #0]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800af88:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800af8a:	bf42      	ittt	mi
 800af8c:	6953      	ldrmi	r3, [r2, #20]
 800af8e:	f003 0302 	andmi.w	r3, r3, #2
 800af92:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800af94:	f003 fa70 	bl	800e478 <USB_ReadInterrupts>
 800af98:	06c0      	lsls	r0, r0, #27
 800af9a:	d52a      	bpl.n	800aff2 <HAL_PCD_IRQHandler+0x9a>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af9c:	6822      	ldr	r2, [r4, #0]
 800af9e:	6993      	ldr	r3, [r2, #24]
 800afa0:	f023 0310 	bic.w	r3, r3, #16
 800afa4:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 800afa6:	6a2f      	ldr	r7, [r5, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800afa8:	f3c7 4343 	ubfx	r3, r7, #17, #4
 800afac:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800afae:	f007 060f 	and.w	r6, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800afb2:	f040 811d 	bne.w	800b1f0 <HAL_PCD_IRQHandler+0x298>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800afb6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800afba:	421f      	tst	r7, r3
 800afbc:	d014      	beq.n	800afe8 <HAL_PCD_IRQHandler+0x90>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800afbe:	231c      	movs	r3, #28
 800afc0:	fb03 4606 	mla	r6, r3, r6, r4
 800afc4:	f3c7 180a 	ubfx	r8, r7, #4, #11
 800afc8:	4642      	mov	r2, r8
 800afca:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800afce:	4628      	mov	r0, r5
 800afd0:	f003 f9c4 	bl	800e35c <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afd4:	f8d6 2208 	ldr.w	r2, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afd8:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afdc:	4442      	add	r2, r8
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afde:	4443      	add	r3, r8
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afe0:	f8c6 2208 	str.w	r2, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afe4:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800afe8:	6822      	ldr	r2, [r4, #0]
 800afea:	6993      	ldr	r3, [r2, #24]
 800afec:	f043 0310 	orr.w	r3, r3, #16
 800aff0:	6193      	str	r3, [r2, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800aff2:	6820      	ldr	r0, [r4, #0]
 800aff4:	f003 fa40 	bl	800e478 <USB_ReadInterrupts>
 800aff8:	0301      	lsls	r1, r0, #12
 800affa:	f100 810d 	bmi.w	800b218 <HAL_PCD_IRQHandler+0x2c0>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800affe:	6820      	ldr	r0, [r4, #0]
 800b000:	f003 fa3a 	bl	800e478 <USB_ReadInterrupts>
 800b004:	0342      	lsls	r2, r0, #13
 800b006:	d50c      	bpl.n	800b022 <HAL_PCD_IRQHandler+0xca>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b008:	6820      	ldr	r0, [r4, #0]
 800b00a:	f003 fa41 	bl	800e490 <USB_ReadDevAllInEpInterrupt>
 800b00e:	4626      	mov	r6, r4
 800b010:	4681      	mov	r9, r0

      epnum = 0U;

      while (ep_intr != 0U)
 800b012:	f505 6810 	add.w	r8, r5, #2304	; 0x900
      epnum = 0U;
 800b016:	f04f 0a00 	mov.w	sl, #0
      while (ep_intr != 0U)
 800b01a:	f1b9 0f00 	cmp.w	r9, #0
 800b01e:	f040 815d 	bne.w	800b2dc <HAL_PCD_IRQHandler+0x384>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b022:	6820      	ldr	r0, [r4, #0]
 800b024:	f003 fa28 	bl	800e478 <USB_ReadInterrupts>
 800b028:	2800      	cmp	r0, #0
 800b02a:	da15      	bge.n	800b058 <HAL_PCD_IRQHandler+0x100>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b02c:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800b030:	f023 0301 	bic.w	r3, r3, #1
 800b034:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 800b038:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	f040 81cb 	bne.w	800b3d8 <HAL_PCD_IRQHandler+0x480>
      {
        hpcd->LPM_State = LPM_L0;
 800b042:	2100      	movs	r1, #0
 800b044:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b048:	4620      	mov	r0, r4
 800b04a:	f000 fb59 	bl	800b700 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b04e:	6822      	ldr	r2, [r4, #0]
 800b050:	6953      	ldr	r3, [r2, #20]
 800b052:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b056:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b058:	6820      	ldr	r0, [r4, #0]
 800b05a:	f003 fa0d 	bl	800e478 <USB_ReadInterrupts>
 800b05e:	0500      	lsls	r0, r0, #20
 800b060:	d50b      	bpl.n	800b07a <HAL_PCD_IRQHandler+0x122>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b062:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 800b066:	07d9      	lsls	r1, r3, #31
 800b068:	d502      	bpl.n	800b070 <HAL_PCD_IRQHandler+0x118>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b06a:	4620      	mov	r0, r4
 800b06c:	f00e fd06 	bl	8019a7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b070:	6822      	ldr	r2, [r4, #0]
 800b072:	6953      	ldr	r3, [r2, #20]
 800b074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b078:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b07a:	6820      	ldr	r0, [r4, #0]
 800b07c:	f003 f9fc 	bl	800e478 <USB_ReadInterrupts>
 800b080:	0102      	lsls	r2, r0, #4
 800b082:	d514      	bpl.n	800b0ae <HAL_PCD_IRQHandler+0x156>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b084:	6823      	ldr	r3, [r4, #0]
 800b086:	695a      	ldr	r2, [r3, #20]
 800b088:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800b08c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b08e:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 800b092:	2a00      	cmp	r2, #0
 800b094:	f040 81a4 	bne.w	800b3e0 <HAL_PCD_IRQHandler+0x488>
      {
        hpcd->LPM_State = LPM_L1;
 800b098:	2101      	movs	r1, #1
 800b09a:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b09e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0a0:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800b0a4:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f000 fb29 	bl	800b700 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b0ae:	6820      	ldr	r0, [r4, #0]
 800b0b0:	f003 f9e2 	bl	800e478 <USB_ReadInterrupts>
 800b0b4:	04c3      	lsls	r3, r0, #19
 800b0b6:	d536      	bpl.n	800b126 <HAL_PCD_IRQHandler+0x1ce>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b0b8:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b0bc:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b0be:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b0c2:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b0c4:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b0c8:	f002 feb2 	bl	800de30 <USB_FlushTxFifo>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b0cc:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 800b0d0:	f505 6310 	add.w	r3, r5, #2304	; 0x900

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b0d4:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b0d8:	6862      	ldr	r2, [r4, #4]
 800b0da:	9800      	ldr	r0, [sp, #0]
 800b0dc:	4282      	cmp	r2, r0
 800b0de:	f200 8183 	bhi.w	800b3e8 <HAL_PCD_IRQHandler+0x490>
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b0e2:	69f3      	ldr	r3, [r6, #28]
 800b0e4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b0e8:	61f3      	str	r3, [r6, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b0ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f000 8197 	beq.w	800b420 <HAL_PCD_IRQHandler+0x4c8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b0f2:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 800b0f6:	f043 030b 	orr.w	r3, r3, #11
 800b0fa:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b0fe:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800b100:	f043 030b 	orr.w	r3, r3, #11
 800b104:	6473      	str	r3, [r6, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b106:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b10a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b10c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b110:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b114:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800b118:	f003 f9f2 	bl	800e500 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b11c:	6822      	ldr	r2, [r4, #0]
 800b11e:	6953      	ldr	r3, [r2, #20]
 800b120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b124:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b126:	6820      	ldr	r0, [r4, #0]
 800b128:	f003 f9a6 	bl	800e478 <USB_ReadInterrupts>
 800b12c:	0487      	lsls	r7, r0, #18
 800b12e:	d516      	bpl.n	800b15e <HAL_PCD_IRQHandler+0x206>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b130:	6820      	ldr	r0, [r4, #0]
 800b132:	f003 f9d4 	bl	800e4de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b136:	6820      	ldr	r0, [r4, #0]
 800b138:	f002 ff4c 	bl	800dfd4 <USB_GetDevSpeed>
 800b13c:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b13e:	6825      	ldr	r5, [r4, #0]
 800b140:	f000 ff86 	bl	800c050 <HAL_RCC_GetHCLKFreq>
 800b144:	7b22      	ldrb	r2, [r4, #12]
 800b146:	4601      	mov	r1, r0
 800b148:	4628      	mov	r0, r5
 800b14a:	f002 fddd 	bl	800dd08 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b14e:	4620      	mov	r0, r4
 800b150:	f00e fc87 	bl	8019a62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b154:	6822      	ldr	r2, [r4, #0]
 800b156:	6953      	ldr	r3, [r2, #20]
 800b158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b15c:	6153      	str	r3, [r2, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b15e:	6820      	ldr	r0, [r4, #0]
 800b160:	f003 f98a 	bl	800e478 <USB_ReadInterrupts>
 800b164:	0706      	lsls	r6, r0, #28
 800b166:	d507      	bpl.n	800b178 <HAL_PCD_IRQHandler+0x220>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b168:	4620      	mov	r0, r4
 800b16a:	f00e fc76 	bl	8019a5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b16e:	6822      	ldr	r2, [r4, #0]
 800b170:	6953      	ldr	r3, [r2, #20]
 800b172:	f003 0308 	and.w	r3, r3, #8
 800b176:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b178:	6820      	ldr	r0, [r4, #0]
 800b17a:	f003 f97d 	bl	800e478 <USB_ReadInterrupts>
 800b17e:	02c5      	lsls	r5, r0, #11
 800b180:	d508      	bpl.n	800b194 <HAL_PCD_IRQHandler+0x23c>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b182:	2100      	movs	r1, #0
 800b184:	4620      	mov	r0, r4
 800b186:	f00e fc85 	bl	8019a94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b18a:	6822      	ldr	r2, [r4, #0]
 800b18c:	6953      	ldr	r3, [r2, #20]
 800b18e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b192:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b194:	6820      	ldr	r0, [r4, #0]
 800b196:	f003 f96f 	bl	800e478 <USB_ReadInterrupts>
 800b19a:	0280      	lsls	r0, r0, #10
 800b19c:	d508      	bpl.n	800b1b0 <HAL_PCD_IRQHandler+0x258>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b19e:	2100      	movs	r1, #0
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f00e fc73 	bl	8019a8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b1a6:	6822      	ldr	r2, [r4, #0]
 800b1a8:	6953      	ldr	r3, [r2, #20]
 800b1aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1ae:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b1b0:	6820      	ldr	r0, [r4, #0]
 800b1b2:	f003 f961 	bl	800e478 <USB_ReadInterrupts>
 800b1b6:	0041      	lsls	r1, r0, #1
 800b1b8:	d507      	bpl.n	800b1ca <HAL_PCD_IRQHandler+0x272>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f00e fc6e 	bl	8019a9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b1c0:	6822      	ldr	r2, [r4, #0]
 800b1c2:	6953      	ldr	r3, [r2, #20]
 800b1c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b1c8:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b1ca:	6820      	ldr	r0, [r4, #0]
 800b1cc:	f003 f954 	bl	800e478 <USB_ReadInterrupts>
 800b1d0:	0742      	lsls	r2, r0, #29
 800b1d2:	d50a      	bpl.n	800b1ea <HAL_PCD_IRQHandler+0x292>
    {
      temp = hpcd->Instance->GOTGINT;
 800b1d4:	6823      	ldr	r3, [r4, #0]
 800b1d6:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b1d8:	076b      	lsls	r3, r5, #29
 800b1da:	d502      	bpl.n	800b1e2 <HAL_PCD_IRQHandler+0x28a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f00e fc61 	bl	8019aa4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800b1e2:	6822      	ldr	r2, [r4, #0]
 800b1e4:	6853      	ldr	r3, [r2, #4]
 800b1e6:	432b      	orrs	r3, r5
 800b1e8:	6053      	str	r3, [r2, #4]
    }
  }
}
 800b1ea:	b005      	add	sp, #20
 800b1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800b1f0:	2b06      	cmp	r3, #6
 800b1f2:	f47f aef9 	bne.w	800afe8 <HAL_PCD_IRQHandler+0x90>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b1f6:	2208      	movs	r2, #8
 800b1f8:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	f003 f8ad 	bl	800e35c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b202:	231c      	movs	r3, #28
 800b204:	fb03 4606 	mla	r6, r3, r6, r4
 800b208:	f3c7 170a 	ubfx	r7, r7, #4, #11
 800b20c:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800b210:	441f      	add	r7, r3
 800b212:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
 800b216:	e6e7      	b.n	800afe8 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b218:	6820      	ldr	r0, [r4, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b21a:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b438 <HAL_PCD_IRQHandler+0x4e0>
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b21e:	f8df a21c 	ldr.w	sl, [pc, #540]	; 800b43c <HAL_PCD_IRQHandler+0x4e4>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b222:	f003 f92d 	bl	800e480 <USB_ReadDevAllOutEpInterrupt>
 800b226:	f505 6b30 	add.w	fp, r5, #2816	; 0xb00
 800b22a:	4606      	mov	r6, r0
      epnum = 0U;
 800b22c:	2700      	movs	r7, #0
      while (ep_intr != 0U)
 800b22e:	2e00      	cmp	r6, #0
 800b230:	f43f aee5 	beq.w	800affe <HAL_PCD_IRQHandler+0xa6>
        if ((ep_intr & 0x1U) != 0U)
 800b234:	07f3      	lsls	r3, r6, #31
 800b236:	d544      	bpl.n	800b2c2 <HAL_PCD_IRQHandler+0x36a>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b238:	b2f9      	uxtb	r1, r7
 800b23a:	6820      	ldr	r0, [r4, #0]
 800b23c:	9101      	str	r1, [sp, #4]
 800b23e:	f003 f92f 	bl	800e4a0 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b242:	f010 0f01 	tst.w	r0, #1
 800b246:	9901      	ldr	r1, [sp, #4]
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b248:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b24a:	d010      	beq.n	800b26e <HAL_PCD_IRQHandler+0x316>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b24c:	2201      	movs	r2, #1
 800b24e:	f8cb 2008 	str.w	r2, [fp, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b252:	6822      	ldr	r2, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b254:	6c10      	ldr	r0, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b25a:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b25e:	4550      	cmp	r0, sl
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b260:	6893      	ldr	r3, [r2, #8]
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b262:	d137      	bne.n	800b2d4 <HAL_PCD_IRQHandler+0x37c>
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b264:	0418      	lsls	r0, r3, #16
 800b266:	d531      	bpl.n	800b2cc <HAL_PCD_IRQHandler+0x374>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b268:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b26c:	6091      	str	r1, [r2, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b26e:	f018 0f08 	tst.w	r8, #8
 800b272:	d013      	beq.n	800b29c <HAL_PCD_IRQHandler+0x344>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b274:	6822      	ldr	r2, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b276:	2108      	movs	r1, #8
 800b278:	f8cb 1008 	str.w	r1, [fp, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b27c:	6c11      	ldr	r1, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b27e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b282:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b286:	4549      	cmp	r1, r9
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b288:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b28a:	d904      	bls.n	800b296 <HAL_PCD_IRQHandler+0x33e>
 800b28c:	0401      	lsls	r1, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b28e:	bf44      	itt	mi
 800b290:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 800b294:	6091      	strmi	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b296:	4620      	mov	r0, r4
 800b298:	f00e fbc8 	bl	8019a2c <HAL_PCD_SetupStageCallback>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b29c:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b2a0:	bf1c      	itt	ne
 800b2a2:	2210      	movne	r2, #16
 800b2a4:	f8cb 2008 	strne.w	r2, [fp, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b2a8:	f018 0f20 	tst.w	r8, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b2ac:	bf1c      	itt	ne
 800b2ae:	2220      	movne	r2, #32
 800b2b0:	f8cb 2008 	strne.w	r2, [fp, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b2b4:	f418 5f00 	tst.w	r8, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b2b8:	bf1c      	itt	ne
 800b2ba:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 800b2be:	f8cb 3008 	strne.w	r3, [fp, #8]
        epnum++;
 800b2c2:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 800b2c4:	0876      	lsrs	r6, r6, #1
 800b2c6:	f10b 0b20 	add.w	fp, fp, #32
 800b2ca:	e7b0      	b.n	800b22e <HAL_PCD_IRQHandler+0x2d6>
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b2cc:	0698      	lsls	r0, r3, #26
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b2ce:	bf44      	itt	mi
 800b2d0:	2020      	movmi	r0, #32
 800b2d2:	6090      	strmi	r0, [r2, #8]
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	f00e fbaf 	bl	8019a38 <HAL_PCD_DataOutStageCallback>
 800b2da:	e7c8      	b.n	800b26e <HAL_PCD_IRQHandler+0x316>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b2dc:	f019 0f01 	tst.w	r9, #1
 800b2e0:	d072      	beq.n	800b3c8 <HAL_PCD_IRQHandler+0x470>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b2e2:	fa5f fb8a 	uxtb.w	fp, sl
 800b2e6:	6820      	ldr	r0, [r4, #0]
 800b2e8:	4659      	mov	r1, fp
 800b2ea:	f003 f8e2 	bl	800e4b2 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b2ee:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b2f0:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b2f2:	d510      	bpl.n	800b316 <HAL_PCD_IRQHandler+0x3be>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b2f4:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	f00a 010f 	and.w	r1, sl, #15
 800b2fe:	fa02 f101 	lsl.w	r1, r2, r1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b302:	ea23 0301 	bic.w	r3, r3, r1
 800b306:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b30a:	4659      	mov	r1, fp
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b30c:	f8c8 2008 	str.w	r2, [r8, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b310:	4620      	mov	r0, r4
 800b312:	f00e fb9a 	bl	8019a4a <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b316:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b318:	bf44      	itt	mi
 800b31a:	2308      	movmi	r3, #8
 800b31c:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b320:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b322:	bf44      	itt	mi
 800b324:	2310      	movmi	r3, #16
 800b326:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b32a:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b32c:	bf44      	itt	mi
 800b32e:	2340      	movmi	r3, #64	; 0x40
 800b330:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b334:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b336:	bf44      	itt	mi
 800b338:	2302      	movmi	r3, #2
 800b33a:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b33e:	063f      	lsls	r7, r7, #24
 800b340:	d542      	bpl.n	800b3c8 <HAL_PCD_IRQHandler+0x470>
  if (ep->xfer_count > ep->xfer_len)
 800b342:	e9d6 3114 	ldrd	r3, r1, [r6, #80]	; 0x50
 800b346:	4299      	cmp	r1, r3
 800b348:	d83e      	bhi.n	800b3c8 <HAL_PCD_IRQHandler+0x470>
  len = ep->xfer_len - ep->xfer_count;
 800b34a:	1a5b      	subs	r3, r3, r1
  len32b = (len + 3U) / 4U;
 800b34c:	6c71      	ldr	r1, [r6, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b34e:	6822      	ldr	r2, [r4, #0]
 800b350:	9201      	str	r2, [sp, #4]
  len32b = (len + 3U) / 4U;
 800b352:	428b      	cmp	r3, r1
 800b354:	bf28      	it	cs
 800b356:	460b      	movcs	r3, r1
 800b358:	3303      	adds	r3, #3
 800b35a:	089b      	lsrs	r3, r3, #2
 800b35c:	9302      	str	r3, [sp, #8]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b35e:	f502 6310 	add.w	r3, r2, #2304	; 0x900
 800b362:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800b366:	9303      	str	r3, [sp, #12]
 800b368:	9b03      	ldr	r3, [sp, #12]
 800b36a:	9a02      	ldr	r2, [sp, #8]
 800b36c:	6999      	ldr	r1, [r3, #24]
 800b36e:	b289      	uxth	r1, r1
 800b370:	4291      	cmp	r1, r2
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b372:	e9d6 7314 	ldrd	r7, r3, [r6, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b376:	d325      	bcc.n	800b3c4 <HAL_PCD_IRQHandler+0x46c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b378:	429f      	cmp	r7, r3
 800b37a:	d80e      	bhi.n	800b39a <HAL_PCD_IRQHandler+0x442>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b37c:	9b01      	ldr	r3, [sp, #4]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b37e:	f00a 020f 	and.w	r2, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b382:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b386:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b388:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b38c:	fa01 f202 	lsl.w	r2, r1, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b390:	ea23 0302 	bic.w	r3, r3, r2
 800b394:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 800b398:	e016      	b.n	800b3c8 <HAL_PCD_IRQHandler+0x470>
    len = ep->xfer_len - ep->xfer_count;
 800b39a:	1aff      	subs	r7, r7, r3
    if (len > ep->maxpacket)
 800b39c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800b39e:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800b3a0:	9801      	ldr	r0, [sp, #4]
 800b3a2:	429f      	cmp	r7, r3
 800b3a4:	bf28      	it	cs
 800b3a6:	461f      	movcs	r7, r3
    len32b = (len + 3U) / 4U;
 800b3a8:	1cfb      	adds	r3, r7, #3
 800b3aa:	089b      	lsrs	r3, r3, #2
 800b3ac:	9302      	str	r3, [sp, #8]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800b3ae:	465a      	mov	r2, fp
 800b3b0:	b2bb      	uxth	r3, r7
 800b3b2:	f002 ff11 	bl	800e1d8 <USB_WritePacket>
    ep->xfer_buff  += len;
 800b3b6:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800b3b8:	443b      	add	r3, r7
 800b3ba:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800b3bc:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800b3be:	443b      	add	r3, r7
 800b3c0:	6573      	str	r3, [r6, #84]	; 0x54
 800b3c2:	e7d1      	b.n	800b368 <HAL_PCD_IRQHandler+0x410>
  if (ep->xfer_len <= ep->xfer_count)
 800b3c4:	429f      	cmp	r7, r3
 800b3c6:	d9d9      	bls.n	800b37c <HAL_PCD_IRQHandler+0x424>
        epnum++;
 800b3c8:	f10a 0a01 	add.w	sl, sl, #1
        ep_intr >>= 1U;
 800b3cc:	ea4f 0959 	mov.w	r9, r9, lsr #1
 800b3d0:	361c      	adds	r6, #28
 800b3d2:	f108 0820 	add.w	r8, r8, #32
 800b3d6:	e620      	b.n	800b01a <HAL_PCD_IRQHandler+0xc2>
        HAL_PCD_ResumeCallback(hpcd);
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f00e fb53 	bl	8019a84 <HAL_PCD_ResumeCallback>
 800b3de:	e636      	b.n	800b04e <HAL_PCD_IRQHandler+0xf6>
        HAL_PCD_SuspendCallback(hpcd);
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f00e fb4b 	bl	8019a7c <HAL_PCD_SuspendCallback>
 800b3e6:	e662      	b.n	800b0ae <HAL_PCD_IRQHandler+0x156>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b3e8:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800b3f0:	601a      	str	r2, [r3, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800b3f8:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b3fa:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b3fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b402:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800b406:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b40a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b40e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800b412:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b416:	9a00      	ldr	r2, [sp, #0]
 800b418:	3201      	adds	r2, #1
 800b41a:	9200      	str	r2, [sp, #0]
 800b41c:	3320      	adds	r3, #32
 800b41e:	e65b      	b.n	800b0d8 <HAL_PCD_IRQHandler+0x180>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b420:	6973      	ldr	r3, [r6, #20]
 800b422:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b426:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b42a:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b42c:	6933      	ldr	r3, [r6, #16]
 800b42e:	f043 030b 	orr.w	r3, r3, #11
 800b432:	6133      	str	r3, [r6, #16]
 800b434:	e667      	b.n	800b106 <HAL_PCD_IRQHandler+0x1ae>
 800b436:	bf00      	nop
 800b438:	4f54300a 	.word	0x4f54300a
 800b43c:	4f54310a 	.word	0x4f54310a

0800b440 <HAL_PCD_SetAddress>:
{
 800b440:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800b442:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800b446:	2a01      	cmp	r2, #1
{
 800b448:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800b44a:	d00b      	beq.n	800b464 <HAL_PCD_SetAddress+0x24>
 800b44c:	2201      	movs	r2, #1
 800b44e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800b452:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b456:	6800      	ldr	r0, [r0, #0]
 800b458:	f002 ffe2 	bl	800e420 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b45c:	2000      	movs	r0, #0
 800b45e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800b462:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800b464:	2002      	movs	r0, #2
 800b466:	e7fc      	b.n	800b462 <HAL_PCD_SetAddress+0x22>

0800b468 <HAL_PCD_EP_Open>:
{
 800b468:	b570      	push	{r4, r5, r6, lr}
 800b46a:	f001 060f 	and.w	r6, r1, #15
 800b46e:	ebc6 04c6 	rsb	r4, r6, r6, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 800b472:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800b476:	4605      	mov	r5, r0
 800b478:	ea4f 0484 	mov.w	r4, r4, lsl #2
 800b47c:	f04f 001c 	mov.w	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 800b480:	d01f      	beq.n	800b4c2 <HAL_PCD_EP_Open+0x5a>
    ep->is_in = 1U;
 800b482:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b486:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 800b48a:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b48c:	4429      	add	r1, r5
    ep->is_in = 1U;
 800b48e:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  ep->maxpacket = ep_mps;
 800b492:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800b494:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b496:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
 800b498:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800b49a:	b102      	cbz	r2, 800b49e <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800b49c:	80ce      	strh	r6, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800b49e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800b4a0:	bf04      	itt	eq
 800b4a2:	2300      	moveq	r3, #0
 800b4a4:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800b4a6:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d012      	beq.n	800b4d4 <HAL_PCD_EP_Open+0x6c>
 800b4ae:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b4b0:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 800b4b2:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b4b6:	f002 fd97 	bl	800dfe8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 800b4c0:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 800b4c2:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b4c6:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
    ep->is_in = 0U;
 800b4ca:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b4cc:	4429      	add	r1, r5
    ep->is_in = 0U;
 800b4ce:	f880 41fd 	strb.w	r4, [r0, #509]	; 0x1fd
 800b4d2:	e7de      	b.n	800b492 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 800b4d4:	2002      	movs	r0, #2
 800b4d6:	e7f3      	b.n	800b4c0 <HAL_PCD_EP_Open+0x58>

0800b4d8 <HAL_PCD_EP_Close>:
{
 800b4d8:	b510      	push	{r4, lr}
 800b4da:	4604      	mov	r4, r0
 800b4dc:	f001 000f 	and.w	r0, r1, #15
 800b4e0:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 800b4e4:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b4e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800b4ec:	f04f 021c 	mov.w	r2, #28
 800b4f0:	d016      	beq.n	800b520 <HAL_PCD_EP_Close+0x48>
    ep->is_in = 1U;
 800b4f2:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b4f6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 800b4fa:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b4fc:	4421      	add	r1, r4
    ep->is_in = 1U;
 800b4fe:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b502:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 800b504:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d012      	beq.n	800b532 <HAL_PCD_EP_Close+0x5a>
 800b50c:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b50e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800b510:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b514:	f002 fda6 	bl	800e064 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b518:	2000      	movs	r0, #0
 800b51a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800b51e:	bd10      	pop	{r4, pc}
    ep->is_in = 0U;
 800b520:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b524:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 800b528:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b52a:	4421      	add	r1, r4
    ep->is_in = 0U;
 800b52c:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 800b530:	e7e7      	b.n	800b502 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 800b532:	2002      	movs	r0, #2
 800b534:	e7f3      	b.n	800b51e <HAL_PCD_EP_Close+0x46>

0800b536 <HAL_PCD_EP_Receive>:
{
 800b536:	b538      	push	{r3, r4, r5, lr}
 800b538:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b53c:	241c      	movs	r4, #28
 800b53e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800b542:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b546:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800b54a:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 800b54e:	2300      	movs	r3, #0
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b550:	6800      	ldr	r0, [r0, #0]
  ep->xfer_buff = pBuf;
 800b552:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 800b556:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 800b55a:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800b55e:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b562:	b91d      	cbnz	r5, 800b56c <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b564:	f002 fdd4 	bl	800e110 <USB_EP0StartXfer>
}
 800b568:	2000      	movs	r0, #0
 800b56a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b56c:	f002 fe44 	bl	800e1f8 <USB_EPStartXfer>
 800b570:	e7fa      	b.n	800b568 <HAL_PCD_EP_Receive+0x32>

0800b572 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b572:	f001 010f 	and.w	r1, r1, #15
 800b576:	231c      	movs	r3, #28
 800b578:	fb03 0001 	mla	r0, r3, r1, r0
}
 800b57c:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 800b580:	4770      	bx	lr

0800b582 <HAL_PCD_EP_Transmit>:
{
 800b582:	b538      	push	{r3, r4, r5, lr}
 800b584:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b588:	241c      	movs	r4, #28
 800b58a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800b58e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b592:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800b594:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 800b596:	2300      	movs	r3, #0
 800b598:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 800b59a:	2301      	movs	r3, #1
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b59c:	6800      	ldr	r0, [r0, #0]
  ep->xfer_buff = pBuf;
 800b59e:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 800b5a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800b5a4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b5a8:	b91d      	cbnz	r5, 800b5b2 <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b5aa:	f002 fdb1 	bl	800e110 <USB_EP0StartXfer>
}
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b5b2:	f002 fe21 	bl	800e1f8 <USB_EPStartXfer>
 800b5b6:	e7fa      	b.n	800b5ae <HAL_PCD_EP_Transmit+0x2c>

0800b5b8 <HAL_PCD_EP_SetStall>:
{
 800b5b8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b5ba:	6843      	ldr	r3, [r0, #4]
 800b5bc:	f001 050f 	and.w	r5, r1, #15
 800b5c0:	429d      	cmp	r5, r3
{
 800b5c2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b5c4:	d82b      	bhi.n	800b61e <HAL_PCD_EP_SetStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 800b5c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b5ca:	f04f 001c 	mov.w	r0, #28
 800b5ce:	d01d      	beq.n	800b60c <HAL_PCD_EP_SetStall+0x54>
    ep->is_in = 1U;
 800b5d0:	fb00 4205 	mla	r2, r0, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b5d4:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
 800b5d8:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b5da:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800b5dc:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->is_stall = 1U;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b5e4:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800b5e6:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d019      	beq.n	800b622 <HAL_PCD_EP_SetStall+0x6a>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b5ee:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800b5f0:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b5f4:	f002 fec0 	bl	800e378 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b5f8:	b925      	cbnz	r5, 800b604 <HAL_PCD_EP_SetStall+0x4c>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b5fa:	6820      	ldr	r0, [r4, #0]
 800b5fc:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800b600:	f002 ff7e 	bl	800e500 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800b604:	2000      	movs	r0, #0
 800b606:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800b60a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800b60c:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
 800b610:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 800b612:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 800b616:	2300      	movs	r3, #0
 800b618:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 800b61c:	e7e0      	b.n	800b5e0 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 800b61e:	2001      	movs	r0, #1
 800b620:	e7f3      	b.n	800b60a <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 800b622:	2002      	movs	r0, #2
 800b624:	e7f1      	b.n	800b60a <HAL_PCD_EP_SetStall+0x52>

0800b626 <HAL_PCD_EP_ClrStall>:
{
 800b626:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b628:	6843      	ldr	r3, [r0, #4]
 800b62a:	f001 020f 	and.w	r2, r1, #15
 800b62e:	429a      	cmp	r2, r3
{
 800b630:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b632:	d82a      	bhi.n	800b68a <HAL_PCD_EP_ClrStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 800b634:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800b638:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b63c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800b640:	f04f 001c 	mov.w	r0, #28
 800b644:	d018      	beq.n	800b678 <HAL_PCD_EP_ClrStall+0x52>
    ep->is_in = 1U;
 800b646:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b64a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 800b64e:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b650:	4421      	add	r1, r4
    ep->is_in = 1U;
 800b652:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  ep->is_stall = 0U;
 800b656:	2500      	movs	r5, #0
 800b658:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b65a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800b65c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800b660:	2b01      	cmp	r3, #1
 800b662:	d014      	beq.n	800b68e <HAL_PCD_EP_ClrStall+0x68>
 800b664:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b666:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800b668:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b66c:	f002 feaf 	bl	800e3ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b670:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 800b674:	4628      	mov	r0, r5
}
 800b676:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 800b678:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b67c:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 800b680:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b682:	4421      	add	r1, r4
    ep->is_in = 0U;
 800b684:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
 800b688:	e7e5      	b.n	800b656 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 800b68a:	2001      	movs	r0, #1
 800b68c:	e7f3      	b.n	800b676 <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 800b68e:	2002      	movs	r0, #2
 800b690:	e7f1      	b.n	800b676 <HAL_PCD_EP_ClrStall+0x50>

0800b692 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b692:	6800      	ldr	r0, [r0, #0]
{
 800b694:	b570      	push	{r4, r5, r6, lr}

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b696:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b698:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (fifo == 0U)
 800b69a:	b919      	cbnz	r1, 800b6a4 <HAL_PCDEx_SetTxFiFo+0x12>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b69c:	4322      	orrs	r2, r4
 800b69e:	6282      	str	r2, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800b6a0:	2000      	movs	r0, #0
 800b6a2:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b6a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800b6a6:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b6a8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	1c5e      	adds	r6, r3, #1
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	429d      	cmp	r5, r3
 800b6b4:	d805      	bhi.n	800b6c2 <HAL_PCDEx_SetTxFiFo+0x30>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b6b6:	313f      	adds	r1, #63	; 0x3f
 800b6b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b6bc:	4322      	orrs	r2, r4
 800b6be:	6042      	str	r2, [r0, #4]
 800b6c0:	e7ee      	b.n	800b6a0 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b6c2:	3340      	adds	r3, #64	; 0x40
 800b6c4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b6ce:	4633      	mov	r3, r6
 800b6d0:	e7ed      	b.n	800b6ae <HAL_PCDEx_SetTxFiFo+0x1c>

0800b6d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800b6d2:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 800b6d4:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800b6d6:	6259      	str	r1, [r3, #36]	; 0x24
}
 800b6d8:	4770      	bx	lr

0800b6da <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b6da:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800b6dc:	2100      	movs	r1, #0
 800b6de:	f880 13f4 	strb.w	r1, [r0, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	f8c0 33fc 	str.w	r3, [r0, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b6e8:	6993      	ldr	r3, [r2, #24]
 800b6ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b6ee:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b6f0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800b6f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6f6:	f043 0303 	orr.w	r3, r3, #3
 800b6fa:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800b6fc:	4608      	mov	r0, r1
 800b6fe:	4770      	bx	lr

0800b700 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b700:	4770      	bx	lr
	...

0800b704 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b704:	4b07      	ldr	r3, [pc, #28]	; (800b724 <HAL_PWREx_GetVoltageRange+0x20>)
 800b706:	6818      	ldr	r0, [r3, #0]
 800b708:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800b70c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b710:	d006      	beq.n	800b720 <HAL_PWREx_GetVoltageRange+0x1c>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800b712:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800b716:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800b71a:	bf18      	it	ne
 800b71c:	f44f 7000 	movne.w	r0, #512	; 0x200
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	40007000 	.word	0x40007000

0800b728 <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b728:	4b29      	ldr	r3, [pc, #164]	; (800b7d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b72a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b72c:	bb30      	cbnz	r0, 800b77c <HAL_PWREx_ControlVoltageScaling+0x54>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b72e:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 800b732:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b736:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b73a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b73e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b742:	d11a      	bne.n	800b77a <HAL_PWREx_ControlVoltageScaling+0x52>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800b74a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b74e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800b750:	4a20      	ldr	r2, [pc, #128]	; (800b7d4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800b752:	6812      	ldr	r2, [r2, #0]
 800b754:	2132      	movs	r1, #50	; 0x32
 800b756:	434a      	muls	r2, r1
 800b758:	491f      	ldr	r1, [pc, #124]	; (800b7d8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800b75a:	fbb2 f2f1 	udiv	r2, r2, r1
 800b75e:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b760:	6959      	ldr	r1, [r3, #20]
 800b762:	0549      	lsls	r1, r1, #21
 800b764:	d500      	bpl.n	800b768 <HAL_PWREx_ControlVoltageScaling+0x40>
 800b766:	b922      	cbnz	r2, 800b772 <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b768:	695b      	ldr	r3, [r3, #20]
 800b76a:	0558      	lsls	r0, r3, #21
 800b76c:	d403      	bmi.n	800b776 <HAL_PWREx_ControlVoltageScaling+0x4e>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b76e:	2000      	movs	r0, #0
}
 800b770:	4770      	bx	lr
        wait_loop_index--;
 800b772:	3a01      	subs	r2, #1
 800b774:	e7f4      	b.n	800b760 <HAL_PWREx_ControlVoltageScaling+0x38>
        return HAL_TIMEOUT;
 800b776:	2003      	movs	r0, #3
 800b778:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b77a:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b77c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800b780:	d11f      	bne.n	800b7c2 <HAL_PWREx_ControlVoltageScaling+0x9a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b782:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 800b786:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b78a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b78e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b796:	d1ea      	bne.n	800b76e <HAL_PWREx_ControlVoltageScaling+0x46>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800b79e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7a2:	601a      	str	r2, [r3, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800b7a4:	4a0b      	ldr	r2, [pc, #44]	; (800b7d4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800b7a6:	6812      	ldr	r2, [r2, #0]
 800b7a8:	2132      	movs	r1, #50	; 0x32
 800b7aa:	434a      	muls	r2, r1
 800b7ac:	490a      	ldr	r1, [pc, #40]	; (800b7d8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800b7ae:	fbb2 f2f1 	udiv	r2, r2, r1
 800b7b2:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b7b4:	6959      	ldr	r1, [r3, #20]
 800b7b6:	0549      	lsls	r1, r1, #21
 800b7b8:	d5d6      	bpl.n	800b768 <HAL_PWREx_ControlVoltageScaling+0x40>
 800b7ba:	2a00      	cmp	r2, #0
 800b7bc:	d0d4      	beq.n	800b768 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 800b7be:	3a01      	subs	r2, #1
 800b7c0:	e7f8      	b.n	800b7b4 <HAL_PWREx_ControlVoltageScaling+0x8c>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b7c2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800b7c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b7ca:	601a      	str	r2, [r3, #0]
 800b7cc:	e7cf      	b.n	800b76e <HAL_PWREx_ControlVoltageScaling+0x46>
 800b7ce:	bf00      	nop
 800b7d0:	40007000 	.word	0x40007000
 800b7d4:	200000a4 	.word	0x200000a4
 800b7d8:	000f4240 	.word	0x000f4240

0800b7dc <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800b7dc:	4a02      	ldr	r2, [pc, #8]	; (800b7e8 <HAL_PWREx_EnableVddUSB+0xc>)
 800b7de:	6853      	ldr	r3, [r2, #4]
 800b7e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b7e4:	6053      	str	r3, [r2, #4]
}
 800b7e6:	4770      	bx	lr
 800b7e8:	40007000 	.word	0x40007000

0800b7ec <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800b7ec:	4a02      	ldr	r2, [pc, #8]	; (800b7f8 <HAL_PWREx_EnableVddIO2+0xc>)
 800b7ee:	6853      	ldr	r3, [r2, #4]
 800b7f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b7f4:	6053      	str	r3, [r2, #4]
}
 800b7f6:	4770      	bx	lr
 800b7f8:	40007000 	.word	0x40007000

0800b7fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b7fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b7fe:	4d1c      	ldr	r5, [pc, #112]	; (800b870 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 800b800:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800b802:	00da      	lsls	r2, r3, #3
{
 800b804:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b806:	d518      	bpl.n	800b83a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b808:	f7ff ff7c 	bl	800b704 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b80c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800b810:	d123      	bne.n	800b85a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b812:	2c80      	cmp	r4, #128	; 0x80
 800b814:	d928      	bls.n	800b868 <RCC_SetFlashLatencyFromMSIRange+0x6c>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b816:	2ca0      	cmp	r4, #160	; 0xa0
 800b818:	bf8c      	ite	hi
 800b81a:	2002      	movhi	r0, #2
 800b81c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b81e:	4a15      	ldr	r2, [pc, #84]	; (800b874 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 800b820:	6813      	ldr	r3, [r2, #0]
 800b822:	f023 030f 	bic.w	r3, r3, #15
 800b826:	4303      	orrs	r3, r0
 800b828:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b82a:	6813      	ldr	r3, [r2, #0]
 800b82c:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800b830:	1a18      	subs	r0, r3, r0
 800b832:	bf18      	it	ne
 800b834:	2001      	movne	r0, #1
 800b836:	b003      	add	sp, #12
 800b838:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800b83a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800b83c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b840:	65ab      	str	r3, [r5, #88]	; 0x58
 800b842:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800b844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b848:	9301      	str	r3, [sp, #4]
 800b84a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800b84c:	f7ff ff5a 	bl	800b704 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800b850:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800b852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b856:	65ab      	str	r3, [r5, #88]	; 0x58
 800b858:	e7d8      	b.n	800b80c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 800b85a:	2c7f      	cmp	r4, #127	; 0x7f
 800b85c:	d806      	bhi.n	800b86c <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 800b85e:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 800b862:	4258      	negs	r0, r3
 800b864:	4158      	adcs	r0, r3
 800b866:	e7da      	b.n	800b81e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b868:	2000      	movs	r0, #0
 800b86a:	e7d8      	b.n	800b81e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800b86c:	2002      	movs	r0, #2
 800b86e:	e7d6      	b.n	800b81e <RCC_SetFlashLatencyFromMSIRange+0x22>
 800b870:	40021000 	.word	0x40021000
 800b874:	40022000 	.word	0x40022000

0800b878 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b878:	4b20      	ldr	r3, [pc, #128]	; (800b8fc <HAL_RCC_GetSysClockFreq+0x84>)
 800b87a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b87c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b87e:	f012 020c 	ands.w	r2, r2, #12
 800b882:	d005      	beq.n	800b890 <HAL_RCC_GetSysClockFreq+0x18>
 800b884:	2a0c      	cmp	r2, #12
 800b886:	d115      	bne.n	800b8b4 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b888:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b88c:	2901      	cmp	r1, #1
 800b88e:	d118      	bne.n	800b8c2 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b890:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800b892:	481b      	ldr	r0, [pc, #108]	; (800b900 <HAL_RCC_GetSysClockFreq+0x88>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b894:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b896:	bf55      	itete	pl
 800b898:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b89c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b89e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b8a2:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800b8a6:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b8aa:	b112      	cbz	r2, 800b8b2 <HAL_RCC_GetSysClockFreq+0x3a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b8ac:	2a0c      	cmp	r2, #12
 800b8ae:	d009      	beq.n	800b8c4 <HAL_RCC_GetSysClockFreq+0x4c>
 800b8b0:	2000      	movs	r0, #0
}
 800b8b2:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b8b4:	2a04      	cmp	r2, #4
 800b8b6:	d01f      	beq.n	800b8f8 <HAL_RCC_GetSysClockFreq+0x80>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b8b8:	2a08      	cmp	r2, #8
 800b8ba:	4812      	ldr	r0, [pc, #72]	; (800b904 <HAL_RCC_GetSysClockFreq+0x8c>)
 800b8bc:	bf18      	it	ne
 800b8be:	2000      	movne	r0, #0
 800b8c0:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b8c2:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b8c4:	68da      	ldr	r2, [r3, #12]
      pllvco = HSI_VALUE;
 800b8c6:	490f      	ldr	r1, [pc, #60]	; (800b904 <HAL_RCC_GetSysClockFreq+0x8c>)
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b8c8:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 800b8cc:	3a02      	subs	r2, #2
      pllvco = HSI_VALUE;
 800b8ce:	2a01      	cmp	r2, #1
 800b8d0:	bf98      	it	ls
 800b8d2:	4608      	movls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b8d4:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b8d6:	68da      	ldr	r2, [r3, #12]
 800b8d8:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800b8dc:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b8de:	68d8      	ldr	r0, [r3, #12]
 800b8e0:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b8e4:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b8e8:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b8ea:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b8ec:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b8ee:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 800b8f2:	fbb2 f0f0 	udiv	r0, r2, r0
 800b8f6:	4770      	bx	lr
 800b8f8:	4802      	ldr	r0, [pc, #8]	; (800b904 <HAL_RCC_GetSysClockFreq+0x8c>)
 800b8fa:	4770      	bx	lr
 800b8fc:	40021000 	.word	0x40021000
 800b900:	080218ac 	.word	0x080218ac
 800b904:	00f42400 	.word	0x00f42400

0800b908 <HAL_RCC_OscConfig>:
{
 800b908:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800b90c:	4605      	mov	r5, r0
 800b90e:	b908      	cbnz	r0, 800b914 <HAL_RCC_OscConfig+0xc>
          return HAL_ERROR;
 800b910:	2001      	movs	r0, #1
 800b912:	e047      	b.n	800b9a4 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b914:	4c94      	ldr	r4, [pc, #592]	; (800bb68 <HAL_RCC_OscConfig+0x260>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b916:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b918:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b91a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b91c:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b91e:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b922:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b926:	d575      	bpl.n	800ba14 <HAL_RCC_OscConfig+0x10c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b928:	b11e      	cbz	r6, 800b932 <HAL_RCC_OscConfig+0x2a>
 800b92a:	2e0c      	cmp	r6, #12
 800b92c:	d154      	bne.n	800b9d8 <HAL_RCC_OscConfig+0xd0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b92e:	2f01      	cmp	r7, #1
 800b930:	d152      	bne.n	800b9d8 <HAL_RCC_OscConfig+0xd0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	0798      	lsls	r0, r3, #30
 800b936:	d502      	bpl.n	800b93e <HAL_RCC_OscConfig+0x36>
 800b938:	69ab      	ldr	r3, [r5, #24]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d0e8      	beq.n	800b910 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b93e:	6823      	ldr	r3, [r4, #0]
 800b940:	6a28      	ldr	r0, [r5, #32]
 800b942:	0719      	lsls	r1, r3, #28
 800b944:	bf56      	itet	pl
 800b946:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800b94a:	6823      	ldrmi	r3, [r4, #0]
 800b94c:	091b      	lsrpl	r3, r3, #4
 800b94e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b952:	4298      	cmp	r0, r3
 800b954:	d929      	bls.n	800b9aa <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b956:	f7ff ff51 	bl	800b7fc <RCC_SetFlashLatencyFromMSIRange>
 800b95a:	2800      	cmp	r0, #0
 800b95c:	d1d8      	bne.n	800b910 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b95e:	6823      	ldr	r3, [r4, #0]
 800b960:	f043 0308 	orr.w	r3, r3, #8
 800b964:	6023      	str	r3, [r4, #0]
 800b966:	6823      	ldr	r3, [r4, #0]
 800b968:	6a2a      	ldr	r2, [r5, #32]
 800b96a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b96e:	4313      	orrs	r3, r2
 800b970:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b972:	6863      	ldr	r3, [r4, #4]
 800b974:	69ea      	ldr	r2, [r5, #28]
 800b976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b97a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b97e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b980:	f7ff ff7a 	bl	800b878 <HAL_RCC_GetSysClockFreq>
 800b984:	68a3      	ldr	r3, [r4, #8]
 800b986:	4a79      	ldr	r2, [pc, #484]	; (800bb6c <HAL_RCC_OscConfig+0x264>)
 800b988:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800b98c:	5cd3      	ldrb	r3, [r2, r3]
 800b98e:	f003 031f 	and.w	r3, r3, #31
 800b992:	40d8      	lsrs	r0, r3
 800b994:	4b76      	ldr	r3, [pc, #472]	; (800bb70 <HAL_RCC_OscConfig+0x268>)
 800b996:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800b998:	4b76      	ldr	r3, [pc, #472]	; (800bb74 <HAL_RCC_OscConfig+0x26c>)
 800b99a:	6818      	ldr	r0, [r3, #0]
 800b99c:	f7fc fe02 	bl	80085a4 <HAL_InitTick>
        if(status != HAL_OK)
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	d037      	beq.n	800ba14 <HAL_RCC_OscConfig+0x10c>
}
 800b9a4:	b003      	add	sp, #12
 800b9a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b9aa:	6823      	ldr	r3, [r4, #0]
 800b9ac:	f043 0308 	orr.w	r3, r3, #8
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	6823      	ldr	r3, [r4, #0]
 800b9b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9b8:	4303      	orrs	r3, r0
 800b9ba:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b9bc:	6863      	ldr	r3, [r4, #4]
 800b9be:	69ea      	ldr	r2, [r5, #28]
 800b9c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b9c8:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b9ca:	2e00      	cmp	r6, #0
 800b9cc:	d1d8      	bne.n	800b980 <HAL_RCC_OscConfig+0x78>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b9ce:	f7ff ff15 	bl	800b7fc <RCC_SetFlashLatencyFromMSIRange>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	d0d4      	beq.n	800b980 <HAL_RCC_OscConfig+0x78>
 800b9d6:	e79b      	b.n	800b910 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b9d8:	69ab      	ldr	r3, [r5, #24]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d03a      	beq.n	800ba54 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 800b9de:	6823      	ldr	r3, [r4, #0]
 800b9e0:	f043 0301 	orr.w	r3, r3, #1
 800b9e4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800b9e6:	f7fc fe1d 	bl	8008624 <HAL_GetTick>
 800b9ea:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b9ec:	6823      	ldr	r3, [r4, #0]
 800b9ee:	079a      	lsls	r2, r3, #30
 800b9f0:	d528      	bpl.n	800ba44 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b9f2:	6823      	ldr	r3, [r4, #0]
 800b9f4:	f043 0308 	orr.w	r3, r3, #8
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	6823      	ldr	r3, [r4, #0]
 800b9fc:	6a2a      	ldr	r2, [r5, #32]
 800b9fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba02:	4313      	orrs	r3, r2
 800ba04:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ba06:	6863      	ldr	r3, [r4, #4]
 800ba08:	69ea      	ldr	r2, [r5, #28]
 800ba0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ba12:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ba14:	682b      	ldr	r3, [r5, #0]
 800ba16:	07d8      	lsls	r0, r3, #31
 800ba18:	d42d      	bmi.n	800ba76 <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ba1a:	682b      	ldr	r3, [r5, #0]
 800ba1c:	0799      	lsls	r1, r3, #30
 800ba1e:	d46b      	bmi.n	800baf8 <HAL_RCC_OscConfig+0x1f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba20:	682b      	ldr	r3, [r5, #0]
 800ba22:	0718      	lsls	r0, r3, #28
 800ba24:	f100 80a8 	bmi.w	800bb78 <HAL_RCC_OscConfig+0x270>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba28:	682b      	ldr	r3, [r5, #0]
 800ba2a:	0759      	lsls	r1, r3, #29
 800ba2c:	f100 80ce 	bmi.w	800bbcc <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ba30:	682b      	ldr	r3, [r5, #0]
 800ba32:	069f      	lsls	r7, r3, #26
 800ba34:	f100 8137 	bmi.w	800bca6 <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ba38:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f040 815d 	bne.w	800bcfa <HAL_RCC_OscConfig+0x3f2>
  return HAL_OK;
 800ba40:	2000      	movs	r0, #0
 800ba42:	e7af      	b.n	800b9a4 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ba44:	f7fc fdee 	bl	8008624 <HAL_GetTick>
 800ba48:	eba0 0008 	sub.w	r0, r0, r8
 800ba4c:	2802      	cmp	r0, #2
 800ba4e:	d9cd      	bls.n	800b9ec <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 800ba50:	2003      	movs	r0, #3
 800ba52:	e7a7      	b.n	800b9a4 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	f023 0301 	bic.w	r3, r3, #1
 800ba5a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800ba5c:	f7fc fde2 	bl	8008624 <HAL_GetTick>
 800ba60:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ba62:	6823      	ldr	r3, [r4, #0]
 800ba64:	079b      	lsls	r3, r3, #30
 800ba66:	d5d5      	bpl.n	800ba14 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ba68:	f7fc fddc 	bl	8008624 <HAL_GetTick>
 800ba6c:	eba0 0008 	sub.w	r0, r0, r8
 800ba70:	2802      	cmp	r0, #2
 800ba72:	d9f6      	bls.n	800ba62 <HAL_RCC_OscConfig+0x15a>
 800ba74:	e7ec      	b.n	800ba50 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800ba76:	2e08      	cmp	r6, #8
 800ba78:	d003      	beq.n	800ba82 <HAL_RCC_OscConfig+0x17a>
 800ba7a:	2e0c      	cmp	r6, #12
 800ba7c:	d108      	bne.n	800ba90 <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800ba7e:	2f03      	cmp	r7, #3
 800ba80:	d106      	bne.n	800ba90 <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba82:	6823      	ldr	r3, [r4, #0]
 800ba84:	039a      	lsls	r2, r3, #14
 800ba86:	d5c8      	bpl.n	800ba1a <HAL_RCC_OscConfig+0x112>
 800ba88:	686b      	ldr	r3, [r5, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d1c5      	bne.n	800ba1a <HAL_RCC_OscConfig+0x112>
 800ba8e:	e73f      	b.n	800b910 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ba90:	686b      	ldr	r3, [r5, #4]
 800ba92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba96:	d110      	bne.n	800baba <HAL_RCC_OscConfig+0x1b2>
 800ba98:	6823      	ldr	r3, [r4, #0]
 800ba9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800baa0:	f7fc fdc0 	bl	8008624 <HAL_GetTick>
 800baa4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	039b      	lsls	r3, r3, #14
 800baaa:	d4b6      	bmi.n	800ba1a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800baac:	f7fc fdba 	bl	8008624 <HAL_GetTick>
 800bab0:	eba0 0008 	sub.w	r0, r0, r8
 800bab4:	2864      	cmp	r0, #100	; 0x64
 800bab6:	d9f6      	bls.n	800baa6 <HAL_RCC_OscConfig+0x19e>
 800bab8:	e7ca      	b.n	800ba50 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800baba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800babe:	d104      	bne.n	800baca <HAL_RCC_OscConfig+0x1c2>
 800bac0:	6823      	ldr	r3, [r4, #0]
 800bac2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bac6:	6023      	str	r3, [r4, #0]
 800bac8:	e7e6      	b.n	800ba98 <HAL_RCC_OscConfig+0x190>
 800baca:	6822      	ldr	r2, [r4, #0]
 800bacc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bad0:	6022      	str	r2, [r4, #0]
 800bad2:	6822      	ldr	r2, [r4, #0]
 800bad4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bad8:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bada:	2b00      	cmp	r3, #0
 800badc:	d1e0      	bne.n	800baa0 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 800bade:	f7fc fda1 	bl	8008624 <HAL_GetTick>
 800bae2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bae4:	6823      	ldr	r3, [r4, #0]
 800bae6:	0398      	lsls	r0, r3, #14
 800bae8:	d597      	bpl.n	800ba1a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800baea:	f7fc fd9b 	bl	8008624 <HAL_GetTick>
 800baee:	eba0 0008 	sub.w	r0, r0, r8
 800baf2:	2864      	cmp	r0, #100	; 0x64
 800baf4:	d9f6      	bls.n	800bae4 <HAL_RCC_OscConfig+0x1dc>
 800baf6:	e7ab      	b.n	800ba50 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800baf8:	2e04      	cmp	r6, #4
 800bafa:	d003      	beq.n	800bb04 <HAL_RCC_OscConfig+0x1fc>
 800bafc:	2e0c      	cmp	r6, #12
 800bafe:	d110      	bne.n	800bb22 <HAL_RCC_OscConfig+0x21a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800bb00:	2f02      	cmp	r7, #2
 800bb02:	d10e      	bne.n	800bb22 <HAL_RCC_OscConfig+0x21a>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb04:	6823      	ldr	r3, [r4, #0]
 800bb06:	0559      	lsls	r1, r3, #21
 800bb08:	d503      	bpl.n	800bb12 <HAL_RCC_OscConfig+0x20a>
 800bb0a:	68eb      	ldr	r3, [r5, #12]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f43f aeff 	beq.w	800b910 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb12:	6863      	ldr	r3, [r4, #4]
 800bb14:	692a      	ldr	r2, [r5, #16]
 800bb16:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bb1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bb1e:	6063      	str	r3, [r4, #4]
 800bb20:	e77e      	b.n	800ba20 <HAL_RCC_OscConfig+0x118>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bb22:	68eb      	ldr	r3, [r5, #12]
 800bb24:	b17b      	cbz	r3, 800bb46 <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_HSI_ENABLE();
 800bb26:	6823      	ldr	r3, [r4, #0]
 800bb28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb2c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800bb2e:	f7fc fd79 	bl	8008624 <HAL_GetTick>
 800bb32:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bb34:	6823      	ldr	r3, [r4, #0]
 800bb36:	055a      	lsls	r2, r3, #21
 800bb38:	d4eb      	bmi.n	800bb12 <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb3a:	f7fc fd73 	bl	8008624 <HAL_GetTick>
 800bb3e:	1bc0      	subs	r0, r0, r7
 800bb40:	2802      	cmp	r0, #2
 800bb42:	d9f7      	bls.n	800bb34 <HAL_RCC_OscConfig+0x22c>
 800bb44:	e784      	b.n	800ba50 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 800bb46:	6823      	ldr	r3, [r4, #0]
 800bb48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb4c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800bb4e:	f7fc fd69 	bl	8008624 <HAL_GetTick>
 800bb52:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bb54:	6823      	ldr	r3, [r4, #0]
 800bb56:	055b      	lsls	r3, r3, #21
 800bb58:	f57f af62 	bpl.w	800ba20 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb5c:	f7fc fd62 	bl	8008624 <HAL_GetTick>
 800bb60:	1bc0      	subs	r0, r0, r7
 800bb62:	2802      	cmp	r0, #2
 800bb64:	d9f6      	bls.n	800bb54 <HAL_RCC_OscConfig+0x24c>
 800bb66:	e773      	b.n	800ba50 <HAL_RCC_OscConfig+0x148>
 800bb68:	40021000 	.word	0x40021000
 800bb6c:	080218dc 	.word	0x080218dc
 800bb70:	200000a4 	.word	0x200000a4
 800bb74:	200000ac 	.word	0x200000ac
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bb78:	696b      	ldr	r3, [r5, #20]
 800bb7a:	b19b      	cbz	r3, 800bba4 <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 800bb7c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800bb80:	f043 0301 	orr.w	r3, r3, #1
 800bb84:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800bb88:	f7fc fd4c 	bl	8008624 <HAL_GetTick>
 800bb8c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bb8e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800bb92:	079a      	lsls	r2, r3, #30
 800bb94:	f53f af48 	bmi.w	800ba28 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bb98:	f7fc fd44 	bl	8008624 <HAL_GetTick>
 800bb9c:	1bc0      	subs	r0, r0, r7
 800bb9e:	2802      	cmp	r0, #2
 800bba0:	d9f5      	bls.n	800bb8e <HAL_RCC_OscConfig+0x286>
 800bba2:	e755      	b.n	800ba50 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_LSI_DISABLE();
 800bba4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800bba8:	f023 0301 	bic.w	r3, r3, #1
 800bbac:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800bbb0:	f7fc fd38 	bl	8008624 <HAL_GetTick>
 800bbb4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bbb6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800bbba:	079b      	lsls	r3, r3, #30
 800bbbc:	f57f af34 	bpl.w	800ba28 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bbc0:	f7fc fd30 	bl	8008624 <HAL_GetTick>
 800bbc4:	1bc0      	subs	r0, r0, r7
 800bbc6:	2802      	cmp	r0, #2
 800bbc8:	d9f5      	bls.n	800bbb6 <HAL_RCC_OscConfig+0x2ae>
 800bbca:	e741      	b.n	800ba50 <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800bbcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbce:	00df      	lsls	r7, r3, #3
 800bbd0:	d429      	bmi.n	800bc26 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800bbd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbd8:	65a3      	str	r3, [r4, #88]	; 0x58
 800bbda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbe0:	9301      	str	r3, [sp, #4]
 800bbe2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800bbe4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bbe8:	4f9c      	ldr	r7, [pc, #624]	; (800be5c <HAL_RCC_OscConfig+0x554>)
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	05d8      	lsls	r0, r3, #23
 800bbee:	d51d      	bpl.n	800bc2c <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bbf0:	68ab      	ldr	r3, [r5, #8]
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d12b      	bne.n	800bc4e <HAL_RCC_OscConfig+0x346>
 800bbf6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bbfa:	f043 0301 	orr.w	r3, r3, #1
 800bbfe:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800bc02:	f7fc fd0f 	bl	8008624 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc06:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800bc0a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bc0c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bc10:	079a      	lsls	r2, r3, #30
 800bc12:	d542      	bpl.n	800bc9a <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 800bc14:	f1b8 0f00 	cmp.w	r8, #0
 800bc18:	f43f af0a 	beq.w	800ba30 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc22:	65a3      	str	r3, [r4, #88]	; 0x58
 800bc24:	e704      	b.n	800ba30 <HAL_RCC_OscConfig+0x128>
    FlagStatus       pwrclkchanged = RESET;
 800bc26:	f04f 0800 	mov.w	r8, #0
 800bc2a:	e7dd      	b.n	800bbe8 <HAL_RCC_OscConfig+0x2e0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc32:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800bc34:	f7fc fcf6 	bl	8008624 <HAL_GetTick>
 800bc38:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	05d9      	lsls	r1, r3, #23
 800bc3e:	d4d7      	bmi.n	800bbf0 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc40:	f7fc fcf0 	bl	8008624 <HAL_GetTick>
 800bc44:	eba0 0009 	sub.w	r0, r0, r9
 800bc48:	2802      	cmp	r0, #2
 800bc4a:	d9f6      	bls.n	800bc3a <HAL_RCC_OscConfig+0x332>
 800bc4c:	e700      	b.n	800ba50 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc4e:	2b05      	cmp	r3, #5
 800bc50:	d106      	bne.n	800bc60 <HAL_RCC_OscConfig+0x358>
 800bc52:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bc56:	f043 0304 	orr.w	r3, r3, #4
 800bc5a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800bc5e:	e7ca      	b.n	800bbf6 <HAL_RCC_OscConfig+0x2ee>
 800bc60:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800bc64:	f022 0201 	bic.w	r2, r2, #1
 800bc68:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800bc6c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800bc70:	f022 0204 	bic.w	r2, r2, #4
 800bc74:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d1c2      	bne.n	800bc02 <HAL_RCC_OscConfig+0x2fa>
      tickstart = HAL_GetTick();
 800bc7c:	f7fc fcd2 	bl	8008624 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc80:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800bc84:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bc86:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bc8a:	079b      	lsls	r3, r3, #30
 800bc8c:	d5c2      	bpl.n	800bc14 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc8e:	f7fc fcc9 	bl	8008624 <HAL_GetTick>
 800bc92:	1bc0      	subs	r0, r0, r7
 800bc94:	4548      	cmp	r0, r9
 800bc96:	d9f6      	bls.n	800bc86 <HAL_RCC_OscConfig+0x37e>
 800bc98:	e6da      	b.n	800ba50 <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc9a:	f7fc fcc3 	bl	8008624 <HAL_GetTick>
 800bc9e:	1bc0      	subs	r0, r0, r7
 800bca0:	4548      	cmp	r0, r9
 800bca2:	d9b3      	bls.n	800bc0c <HAL_RCC_OscConfig+0x304>
 800bca4:	e6d4      	b.n	800ba50 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bca6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bca8:	b19b      	cbz	r3, 800bcd2 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSI48_ENABLE();
 800bcaa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bcae:	f043 0301 	orr.w	r3, r3, #1
 800bcb2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 800bcb6:	f7fc fcb5 	bl	8008624 <HAL_GetTick>
 800bcba:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bcbc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bcc0:	0798      	lsls	r0, r3, #30
 800bcc2:	f53f aeb9 	bmi.w	800ba38 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bcc6:	f7fc fcad 	bl	8008624 <HAL_GetTick>
 800bcca:	1bc0      	subs	r0, r0, r7
 800bccc:	2802      	cmp	r0, #2
 800bcce:	d9f5      	bls.n	800bcbc <HAL_RCC_OscConfig+0x3b4>
 800bcd0:	e6be      	b.n	800ba50 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 800bcd2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bcd6:	f023 0301 	bic.w	r3, r3, #1
 800bcda:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 800bcde:	f7fc fca1 	bl	8008624 <HAL_GetTick>
 800bce2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bce4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bce8:	0799      	lsls	r1, r3, #30
 800bcea:	f57f aea5 	bpl.w	800ba38 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bcee:	f7fc fc99 	bl	8008624 <HAL_GetTick>
 800bcf2:	1bc0      	subs	r0, r0, r7
 800bcf4:	2802      	cmp	r0, #2
 800bcf6:	d9f5      	bls.n	800bce4 <HAL_RCC_OscConfig+0x3dc>
 800bcf8:	e6aa      	b.n	800ba50 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bcfa:	2b02      	cmp	r3, #2
 800bcfc:	f040 808c 	bne.w	800be18 <HAL_RCC_OscConfig+0x510>
      pll_config = RCC->PLLCFGR;
 800bd00:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd02:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800bd04:	f003 0103 	and.w	r1, r3, #3
 800bd08:	4291      	cmp	r1, r2
 800bd0a:	d122      	bne.n	800bd52 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bd0c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800bd0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bd12:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd14:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800bd18:	d11b      	bne.n	800bd52 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd1a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800bd1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bd20:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800bd24:	d115      	bne.n	800bd52 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bd26:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800bd28:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd2c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800bd30:	d10f      	bne.n	800bd52 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bd32:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800bd34:	0852      	lsrs	r2, r2, #1
 800bd36:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800bd3a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bd3c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800bd40:	d107      	bne.n	800bd52 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bd42:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800bd44:	0852      	lsrs	r2, r2, #1
 800bd46:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800bd4a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bd4c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800bd50:	d049      	beq.n	800bde6 <HAL_RCC_OscConfig+0x4de>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bd52:	2e0c      	cmp	r6, #12
 800bd54:	f43f addc 	beq.w	800b910 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800bd58:	6823      	ldr	r3, [r4, #0]
 800bd5a:	015a      	lsls	r2, r3, #5
 800bd5c:	f53f add8 	bmi.w	800b910 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	00db      	lsls	r3, r3, #3
 800bd64:	f53f add4 	bmi.w	800b910 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 800bd68:	6823      	ldr	r3, [r4, #0]
 800bd6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bd6e:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800bd70:	f7fc fc58 	bl	8008624 <HAL_GetTick>
 800bd74:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd76:	6823      	ldr	r3, [r4, #0]
 800bd78:	019f      	lsls	r7, r3, #6
 800bd7a:	d42e      	bmi.n	800bdda <HAL_RCC_OscConfig+0x4d2>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bd7c:	68e2      	ldr	r2, [r4, #12]
 800bd7e:	4b38      	ldr	r3, [pc, #224]	; (800be60 <HAL_RCC_OscConfig+0x558>)
 800bd80:	4013      	ands	r3, r2
 800bd82:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800bd84:	4313      	orrs	r3, r2
 800bd86:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800bd88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bd8c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800bd8e:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800bd92:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800bd94:	3a01      	subs	r2, #1
 800bd96:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800bd9a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800bd9c:	0852      	lsrs	r2, r2, #1
 800bd9e:	3a01      	subs	r2, #1
 800bda0:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800bda4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800bda6:	0852      	lsrs	r2, r2, #1
 800bda8:	3a01      	subs	r2, #1
 800bdaa:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800bdae:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 800bdb0:	6823      	ldr	r3, [r4, #0]
 800bdb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bdb6:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bdb8:	68e3      	ldr	r3, [r4, #12]
 800bdba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bdbe:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 800bdc0:	f7fc fc30 	bl	8008624 <HAL_GetTick>
 800bdc4:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bdc6:	6823      	ldr	r3, [r4, #0]
 800bdc8:	0198      	lsls	r0, r3, #6
 800bdca:	f53f ae39 	bmi.w	800ba40 <HAL_RCC_OscConfig+0x138>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bdce:	f7fc fc29 	bl	8008624 <HAL_GetTick>
 800bdd2:	1b40      	subs	r0, r0, r5
 800bdd4:	2802      	cmp	r0, #2
 800bdd6:	d9f6      	bls.n	800bdc6 <HAL_RCC_OscConfig+0x4be>
 800bdd8:	e63a      	b.n	800ba50 <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bdda:	f7fc fc23 	bl	8008624 <HAL_GetTick>
 800bdde:	1b80      	subs	r0, r0, r6
 800bde0:	2802      	cmp	r0, #2
 800bde2:	d9c8      	bls.n	800bd76 <HAL_RCC_OscConfig+0x46e>
 800bde4:	e634      	b.n	800ba50 <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bde6:	6823      	ldr	r3, [r4, #0]
 800bde8:	0199      	lsls	r1, r3, #6
 800bdea:	f53f ae29 	bmi.w	800ba40 <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLL_ENABLE();
 800bdee:	6823      	ldr	r3, [r4, #0]
 800bdf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bdf4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bdf6:	68e3      	ldr	r3, [r4, #12]
 800bdf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bdfc:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 800bdfe:	f7fc fc11 	bl	8008624 <HAL_GetTick>
 800be02:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be04:	6823      	ldr	r3, [r4, #0]
 800be06:	019a      	lsls	r2, r3, #6
 800be08:	f53f ae1a 	bmi.w	800ba40 <HAL_RCC_OscConfig+0x138>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be0c:	f7fc fc0a 	bl	8008624 <HAL_GetTick>
 800be10:	1b40      	subs	r0, r0, r5
 800be12:	2802      	cmp	r0, #2
 800be14:	d9f6      	bls.n	800be04 <HAL_RCC_OscConfig+0x4fc>
 800be16:	e61b      	b.n	800ba50 <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800be18:	2e0c      	cmp	r6, #12
 800be1a:	f43f ad79 	beq.w	800b910 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 800be1e:	6823      	ldr	r3, [r4, #0]
 800be20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800be24:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800be26:	6823      	ldr	r3, [r4, #0]
 800be28:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800be2c:	bf02      	ittt	eq
 800be2e:	68e3      	ldreq	r3, [r4, #12]
 800be30:	f023 0303 	biceq.w	r3, r3, #3
 800be34:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800be36:	68e3      	ldr	r3, [r4, #12]
 800be38:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800be3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be40:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800be42:	f7fc fbef 	bl	8008624 <HAL_GetTick>
 800be46:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800be48:	6823      	ldr	r3, [r4, #0]
 800be4a:	019b      	lsls	r3, r3, #6
 800be4c:	f57f adf8 	bpl.w	800ba40 <HAL_RCC_OscConfig+0x138>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be50:	f7fc fbe8 	bl	8008624 <HAL_GetTick>
 800be54:	1b40      	subs	r0, r0, r5
 800be56:	2802      	cmp	r0, #2
 800be58:	d9f6      	bls.n	800be48 <HAL_RCC_OscConfig+0x540>
 800be5a:	e5f9      	b.n	800ba50 <HAL_RCC_OscConfig+0x148>
 800be5c:	40007000 	.word	0x40007000
 800be60:	019d800c 	.word	0x019d800c

0800be64 <HAL_RCC_ClockConfig>:
{
 800be64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be68:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800be6a:	4605      	mov	r5, r0
 800be6c:	b910      	cbnz	r0, 800be74 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800be6e:	2001      	movs	r0, #1
}
 800be70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800be74:	4a6e      	ldr	r2, [pc, #440]	; (800c030 <HAL_RCC_ClockConfig+0x1cc>)
 800be76:	6813      	ldr	r3, [r2, #0]
 800be78:	f003 030f 	and.w	r3, r3, #15
 800be7c:	428b      	cmp	r3, r1
 800be7e:	d335      	bcc.n	800beec <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800be80:	6829      	ldr	r1, [r5, #0]
 800be82:	f011 0701 	ands.w	r7, r1, #1
 800be86:	d13c      	bne.n	800bf02 <HAL_RCC_ClockConfig+0x9e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800be88:	682a      	ldr	r2, [r5, #0]
 800be8a:	0791      	lsls	r1, r2, #30
 800be8c:	f140 80b4 	bpl.w	800bff8 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800be90:	4968      	ldr	r1, [pc, #416]	; (800c034 <HAL_RCC_ClockConfig+0x1d0>)
 800be92:	68a8      	ldr	r0, [r5, #8]
 800be94:	688b      	ldr	r3, [r1, #8]
 800be96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be9a:	4303      	orrs	r3, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800be9c:	608b      	str	r3, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800be9e:	4964      	ldr	r1, [pc, #400]	; (800c030 <HAL_RCC_ClockConfig+0x1cc>)
 800bea0:	680b      	ldr	r3, [r1, #0]
 800bea2:	f003 030f 	and.w	r3, r3, #15
 800bea6:	42b3      	cmp	r3, r6
 800bea8:	f200 80ae 	bhi.w	800c008 <HAL_RCC_ClockConfig+0x1a4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800beac:	f012 0f04 	tst.w	r2, #4
 800beb0:	4c60      	ldr	r4, [pc, #384]	; (800c034 <HAL_RCC_ClockConfig+0x1d0>)
 800beb2:	f040 80b5 	bne.w	800c020 <HAL_RCC_ClockConfig+0x1bc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800beb6:	0713      	lsls	r3, r2, #28
 800beb8:	d506      	bpl.n	800bec8 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800beba:	68a3      	ldr	r3, [r4, #8]
 800bebc:	692a      	ldr	r2, [r5, #16]
 800bebe:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800bec2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800bec6:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bec8:	f7ff fcd6 	bl	800b878 <HAL_RCC_GetSysClockFreq>
 800becc:	68a3      	ldr	r3, [r4, #8]
 800bece:	4a5a      	ldr	r2, [pc, #360]	; (800c038 <HAL_RCC_ClockConfig+0x1d4>)
 800bed0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bed4:	5cd3      	ldrb	r3, [r2, r3]
 800bed6:	f003 031f 	and.w	r3, r3, #31
 800beda:	40d8      	lsrs	r0, r3
 800bedc:	4b57      	ldr	r3, [pc, #348]	; (800c03c <HAL_RCC_ClockConfig+0x1d8>)
 800bede:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800bee0:	4b57      	ldr	r3, [pc, #348]	; (800c040 <HAL_RCC_ClockConfig+0x1dc>)
 800bee2:	6818      	ldr	r0, [r3, #0]
}
 800bee4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 800bee8:	f7fc bb5c 	b.w	80085a4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800beec:	6813      	ldr	r3, [r2, #0]
 800beee:	f023 030f 	bic.w	r3, r3, #15
 800bef2:	430b      	orrs	r3, r1
 800bef4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bef6:	6813      	ldr	r3, [r2, #0]
 800bef8:	f003 030f 	and.w	r3, r3, #15
 800befc:	428b      	cmp	r3, r1
 800befe:	d1b6      	bne.n	800be6e <HAL_RCC_ClockConfig+0xa>
 800bf00:	e7be      	b.n	800be80 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bf02:	686b      	ldr	r3, [r5, #4]
 800bf04:	4c4b      	ldr	r4, [pc, #300]	; (800c034 <HAL_RCC_ClockConfig+0x1d0>)
 800bf06:	2b03      	cmp	r3, #3
 800bf08:	d160      	bne.n	800bfcc <HAL_RCC_ClockConfig+0x168>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bf0a:	6823      	ldr	r3, [r4, #0]
 800bf0c:	019b      	lsls	r3, r3, #6
 800bf0e:	d5ae      	bpl.n	800be6e <HAL_RCC_ClockConfig+0xa>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800bf10:	68e3      	ldr	r3, [r4, #12]
 800bf12:	f003 0303 	and.w	r3, r3, #3
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d144      	bne.n	800bfa4 <HAL_RCC_ClockConfig+0x140>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800bf1a:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800bf1c:	4a49      	ldr	r2, [pc, #292]	; (800c044 <HAL_RCC_ClockConfig+0x1e0>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800bf1e:	071f      	lsls	r7, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bf20:	bf55      	itete	pl
 800bf22:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bf26:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bf28:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bf2c:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 800bf30:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bf34:	68e2      	ldr	r2, [r4, #12]

  switch (pllsource)
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800bf36:	4b44      	ldr	r3, [pc, #272]	; (800c048 <HAL_RCC_ClockConfig+0x1e4>)
  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bf38:	68e0      	ldr	r0, [r4, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bf3a:	f002 0203 	and.w	r2, r2, #3
  switch (pllsource)
 800bf3e:	3a02      	subs	r2, #2
    pllvco = HSI_VALUE;
 800bf40:	2a01      	cmp	r2, #1
 800bf42:	bf98      	it	ls
 800bf44:	461f      	movls	r7, r3
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bf46:	68e3      	ldr	r3, [r4, #12]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bf48:	68e2      	ldr	r2, [r4, #12]
 800bf4a:	f3c2 6241 	ubfx	r2, r2, #25, #2
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bf4e:	f3c3 2306 	ubfx	r3, r3, #8, #7
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bf52:	f3c0 1003 	ubfx	r0, r0, #4, #4
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bf56:	3201      	adds	r2, #1
 800bf58:	0052      	lsls	r2, r2, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bf5a:	437b      	muls	r3, r7
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bf5c:	3001      	adds	r0, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bf5e:	fbb3 f3f0 	udiv	r3, r3, r0
  sysclockfreq = pllvco / pllr;
 800bf62:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800bf66:	4a39      	ldr	r2, [pc, #228]	; (800c04c <HAL_RCC_ClockConfig+0x1e8>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d81d      	bhi.n	800bfa8 <HAL_RCC_ClockConfig+0x144>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800bf6c:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bf6e:	68a3      	ldr	r3, [r4, #8]
 800bf70:	686a      	ldr	r2, [r5, #4]
 800bf72:	f023 0303 	bic.w	r3, r3, #3
 800bf76:	4313      	orrs	r3, r2
 800bf78:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800bf7a:	f7fc fb53 	bl	8008624 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf7e:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800bf82:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf84:	68a3      	ldr	r3, [r4, #8]
 800bf86:	686a      	ldr	r2, [r5, #4]
 800bf88:	f003 030c 	and.w	r3, r3, #12
 800bf8c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800bf90:	f43f af7a 	beq.w	800be88 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf94:	f7fc fb46 	bl	8008624 <HAL_GetTick>
 800bf98:	eba0 0008 	sub.w	r0, r0, r8
 800bf9c:	4548      	cmp	r0, r9
 800bf9e:	d9f1      	bls.n	800bf84 <HAL_RCC_ClockConfig+0x120>
        return HAL_TIMEOUT;
 800bfa0:	2003      	movs	r0, #3
 800bfa2:	e765      	b.n	800be70 <HAL_RCC_ClockConfig+0xc>
  uint32_t msirange = 0U;
 800bfa4:	2700      	movs	r7, #0
 800bfa6:	e7c5      	b.n	800bf34 <HAL_RCC_ClockConfig+0xd0>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800bfa8:	68a3      	ldr	r3, [r4, #8]
 800bfaa:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800bfae:	d107      	bne.n	800bfc0 <HAL_RCC_ClockConfig+0x15c>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bfb0:	68a3      	ldr	r3, [r4, #8]
 800bfb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bfb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfba:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 800bfbc:	2780      	movs	r7, #128	; 0x80
 800bfbe:	e7d6      	b.n	800bf6e <HAL_RCC_ClockConfig+0x10a>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800bfc0:	0788      	lsls	r0, r1, #30
 800bfc2:	d5d3      	bpl.n	800bf6c <HAL_RCC_ClockConfig+0x108>
 800bfc4:	68ab      	ldr	r3, [r5, #8]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d1d0      	bne.n	800bf6c <HAL_RCC_ClockConfig+0x108>
 800bfca:	e7f1      	b.n	800bfb0 <HAL_RCC_ClockConfig+0x14c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bfcc:	2b02      	cmp	r3, #2
 800bfce:	d10a      	bne.n	800bfe6 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bfd0:	6823      	ldr	r3, [r4, #0]
 800bfd2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bfd6:	f43f af4a 	beq.w	800be6e <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800bfda:	f7ff fc4d 	bl	800b878 <HAL_RCC_GetSysClockFreq>
 800bfde:	4b1b      	ldr	r3, [pc, #108]	; (800c04c <HAL_RCC_ClockConfig+0x1e8>)
 800bfe0:	4298      	cmp	r0, r3
 800bfe2:	d9c3      	bls.n	800bf6c <HAL_RCC_ClockConfig+0x108>
 800bfe4:	e7e4      	b.n	800bfb0 <HAL_RCC_ClockConfig+0x14c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800bfe6:	b91b      	cbnz	r3, 800bff0 <HAL_RCC_ClockConfig+0x18c>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bfe8:	6823      	ldr	r3, [r4, #0]
 800bfea:	f013 0f02 	tst.w	r3, #2
 800bfee:	e7f2      	b.n	800bfd6 <HAL_RCC_ClockConfig+0x172>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bff0:	6823      	ldr	r3, [r4, #0]
 800bff2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800bff6:	e7ee      	b.n	800bfd6 <HAL_RCC_ClockConfig+0x172>
    if(hpre == RCC_SYSCLK_DIV2)
 800bff8:	2f80      	cmp	r7, #128	; 0x80
 800bffa:	f47f af50 	bne.w	800be9e <HAL_RCC_ClockConfig+0x3a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800bffe:	490d      	ldr	r1, [pc, #52]	; (800c034 <HAL_RCC_ClockConfig+0x1d0>)
 800c000:	688b      	ldr	r3, [r1, #8]
 800c002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c006:	e749      	b.n	800be9c <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c008:	680b      	ldr	r3, [r1, #0]
 800c00a:	f023 030f 	bic.w	r3, r3, #15
 800c00e:	4333      	orrs	r3, r6
 800c010:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c012:	680b      	ldr	r3, [r1, #0]
 800c014:	f003 030f 	and.w	r3, r3, #15
 800c018:	42b3      	cmp	r3, r6
 800c01a:	f47f af28 	bne.w	800be6e <HAL_RCC_ClockConfig+0xa>
 800c01e:	e745      	b.n	800beac <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c020:	68a3      	ldr	r3, [r4, #8]
 800c022:	68e9      	ldr	r1, [r5, #12]
 800c024:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c028:	430b      	orrs	r3, r1
 800c02a:	60a3      	str	r3, [r4, #8]
 800c02c:	e743      	b.n	800beb6 <HAL_RCC_ClockConfig+0x52>
 800c02e:	bf00      	nop
 800c030:	40022000 	.word	0x40022000
 800c034:	40021000 	.word	0x40021000
 800c038:	080218dc 	.word	0x080218dc
 800c03c:	200000a4 	.word	0x200000a4
 800c040:	200000ac 	.word	0x200000ac
 800c044:	080218ac 	.word	0x080218ac
 800c048:	00f42400 	.word	0x00f42400
 800c04c:	04c4b400 	.word	0x04c4b400

0800c050 <HAL_RCC_GetHCLKFreq>:
}
 800c050:	4b01      	ldr	r3, [pc, #4]	; (800c058 <HAL_RCC_GetHCLKFreq+0x8>)
 800c052:	6818      	ldr	r0, [r3, #0]
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop
 800c058:	200000a4 	.word	0x200000a4

0800c05c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c05c:	4b05      	ldr	r3, [pc, #20]	; (800c074 <HAL_RCC_GetPCLK1Freq+0x18>)
 800c05e:	4a06      	ldr	r2, [pc, #24]	; (800c078 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800c066:	5cd3      	ldrb	r3, [r2, r3]
 800c068:	4a04      	ldr	r2, [pc, #16]	; (800c07c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c06a:	6810      	ldr	r0, [r2, #0]
 800c06c:	f003 031f 	and.w	r3, r3, #31
}
 800c070:	40d8      	lsrs	r0, r3
 800c072:	4770      	bx	lr
 800c074:	40021000 	.word	0x40021000
 800c078:	080218ec 	.word	0x080218ec
 800c07c:	200000a4 	.word	0x200000a4

0800c080 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c082:	4c3c      	ldr	r4, [pc, #240]	; (800c174 <RCCEx_PLLSAI1_Config+0xf4>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c084:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c086:	68e2      	ldr	r2, [r4, #12]
{
 800c088:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c08a:	0790      	lsls	r0, r2, #30
{
 800c08c:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c08e:	d023      	beq.n	800c0d8 <RCCEx_PLLSAI1_Config+0x58>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c090:	68e2      	ldr	r2, [r4, #12]
 800c092:	f002 0203 	and.w	r2, r2, #3
 800c096:	429a      	cmp	r2, r3
 800c098:	d16a      	bne.n	800c170 <RCCEx_PLLSAI1_Config+0xf0>
       ||
 800c09a:	2a00      	cmp	r2, #0
 800c09c:	d068      	beq.n	800c170 <RCCEx_PLLSAI1_Config+0xf0>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c09e:	6823      	ldr	r3, [r4, #0]
 800c0a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c0a4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0a6:	f7fc fabd 	bl	8008624 <HAL_GetTick>
 800c0aa:	4606      	mov	r6, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c0ac:	6823      	ldr	r3, [r4, #0]
 800c0ae:	011a      	lsls	r2, r3, #4
 800c0b0:	d42d      	bmi.n	800c10e <RCCEx_PLLSAI1_Config+0x8e>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c0b2:	68ab      	ldr	r3, [r5, #8]
 800c0b4:	021e      	lsls	r6, r3, #8
 800c0b6:	686b      	ldr	r3, [r5, #4]
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	0118      	lsls	r0, r3, #4
      if(Divider == DIVIDER_P_UPDATE)
 800c0bc:	b377      	cbz	r7, 800c11c <RCCEx_PLLSAI1_Config+0x9c>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c0be:	2f01      	cmp	r7, #1
 800c0c0:	d145      	bne.n	800c14e <RCCEx_PLLSAI1_Config+0xce>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c0c2:	692b      	ldr	r3, [r5, #16]
 800c0c4:	6927      	ldr	r7, [r4, #16]
 800c0c6:	085b      	lsrs	r3, r3, #1
 800c0c8:	1e59      	subs	r1, r3, #1
 800c0ca:	4b2b      	ldr	r3, [pc, #172]	; (800c178 <RCCEx_PLLSAI1_Config+0xf8>)
 800c0cc:	403b      	ands	r3, r7
 800c0ce:	4333      	orrs	r3, r6
 800c0d0:	4303      	orrs	r3, r0
 800c0d2:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800c0d6:	e029      	b.n	800c12c <RCCEx_PLLSAI1_Config+0xac>
    switch(PllSai1->PLLSAI1Source)
 800c0d8:	2b02      	cmp	r3, #2
 800c0da:	d00d      	beq.n	800c0f8 <RCCEx_PLLSAI1_Config+0x78>
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d00f      	beq.n	800c100 <RCCEx_PLLSAI1_Config+0x80>
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d145      	bne.n	800c170 <RCCEx_PLLSAI1_Config+0xf0>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c0e4:	6822      	ldr	r2, [r4, #0]
 800c0e6:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c0ea:	d041      	beq.n	800c170 <RCCEx_PLLSAI1_Config+0xf0>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800c0ec:	68e0      	ldr	r0, [r4, #12]
 800c0ee:	f020 0003 	bic.w	r0, r0, #3
 800c0f2:	4318      	orrs	r0, r3
 800c0f4:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 800c0f6:	e7d2      	b.n	800c09e <RCCEx_PLLSAI1_Config+0x1e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c0f8:	6822      	ldr	r2, [r4, #0]
 800c0fa:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800c0fe:	e7f4      	b.n	800c0ea <RCCEx_PLLSAI1_Config+0x6a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c100:	6822      	ldr	r2, [r4, #0]
 800c102:	0391      	lsls	r1, r2, #14
 800c104:	d4f2      	bmi.n	800c0ec <RCCEx_PLLSAI1_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c106:	6822      	ldr	r2, [r4, #0]
 800c108:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800c10c:	e7ed      	b.n	800c0ea <RCCEx_PLLSAI1_Config+0x6a>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c10e:	f7fc fa89 	bl	8008624 <HAL_GetTick>
 800c112:	1b80      	subs	r0, r0, r6
 800c114:	2802      	cmp	r0, #2
 800c116:	d9c9      	bls.n	800c0ac <RCCEx_PLLSAI1_Config+0x2c>
        status = HAL_TIMEOUT;
 800c118:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800c11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c11c:	68e9      	ldr	r1, [r5, #12]
 800c11e:	6922      	ldr	r2, [r4, #16]
 800c120:	ea46 63c1 	orr.w	r3, r6, r1, lsl #27
 800c124:	4915      	ldr	r1, [pc, #84]	; (800c17c <RCCEx_PLLSAI1_Config+0xfc>)
 800c126:	4011      	ands	r1, r2
 800c128:	430b      	orrs	r3, r1
 800c12a:	4303      	orrs	r3, r0
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c12c:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c134:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800c136:	f7fc fa75 	bl	8008624 <HAL_GetTick>
 800c13a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c13c:	6823      	ldr	r3, [r4, #0]
 800c13e:	011b      	lsls	r3, r3, #4
 800c140:	d510      	bpl.n	800c164 <RCCEx_PLLSAI1_Config+0xe4>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c142:	6923      	ldr	r3, [r4, #16]
 800c144:	69aa      	ldr	r2, [r5, #24]
 800c146:	4313      	orrs	r3, r2
 800c148:	6123      	str	r3, [r4, #16]
 800c14a:	2000      	movs	r0, #0
  return status;
 800c14c:	e7e5      	b.n	800c11a <RCCEx_PLLSAI1_Config+0x9a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c14e:	696b      	ldr	r3, [r5, #20]
 800c150:	6921      	ldr	r1, [r4, #16]
 800c152:	085b      	lsrs	r3, r3, #1
 800c154:	1e5a      	subs	r2, r3, #1
 800c156:	4b0a      	ldr	r3, [pc, #40]	; (800c180 <RCCEx_PLLSAI1_Config+0x100>)
 800c158:	400b      	ands	r3, r1
 800c15a:	4333      	orrs	r3, r6
 800c15c:	4303      	orrs	r3, r0
 800c15e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800c162:	e7e3      	b.n	800c12c <RCCEx_PLLSAI1_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c164:	f7fc fa5e 	bl	8008624 <HAL_GetTick>
 800c168:	1b80      	subs	r0, r0, r6
 800c16a:	2802      	cmp	r0, #2
 800c16c:	d9e6      	bls.n	800c13c <RCCEx_PLLSAI1_Config+0xbc>
 800c16e:	e7d3      	b.n	800c118 <RCCEx_PLLSAI1_Config+0x98>
      status = HAL_ERROR;
 800c170:	2001      	movs	r0, #1
 800c172:	e7d2      	b.n	800c11a <RCCEx_PLLSAI1_Config+0x9a>
 800c174:	40021000 	.word	0x40021000
 800c178:	ff9f800f 	.word	0xff9f800f
 800c17c:	07ff800f 	.word	0x07ff800f
 800c180:	f9ff800f 	.word	0xf9ff800f

0800c184 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800c184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c186:	4c3c      	ldr	r4, [pc, #240]	; (800c278 <RCCEx_PLLSAI2_Config+0xf4>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800c188:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c18a:	68e2      	ldr	r2, [r4, #12]
{
 800c18c:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c18e:	0790      	lsls	r0, r2, #30
{
 800c190:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c192:	d023      	beq.n	800c1dc <RCCEx_PLLSAI2_Config+0x58>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800c194:	68e2      	ldr	r2, [r4, #12]
 800c196:	f002 0203 	and.w	r2, r2, #3
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d16a      	bne.n	800c274 <RCCEx_PLLSAI2_Config+0xf0>
       ||
 800c19e:	2a00      	cmp	r2, #0
 800c1a0:	d068      	beq.n	800c274 <RCCEx_PLLSAI2_Config+0xf0>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800c1a2:	6823      	ldr	r3, [r4, #0]
 800c1a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c1a8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1aa:	f7fc fa3b 	bl	8008624 <HAL_GetTick>
 800c1ae:	4606      	mov	r6, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c1b0:	6823      	ldr	r3, [r4, #0]
 800c1b2:	009a      	lsls	r2, r3, #2
 800c1b4:	d42d      	bmi.n	800c212 <RCCEx_PLLSAI2_Config+0x8e>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c1b6:	68ab      	ldr	r3, [r5, #8]
 800c1b8:	021e      	lsls	r6, r3, #8
 800c1ba:	686b      	ldr	r3, [r5, #4]
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	0118      	lsls	r0, r3, #4
      if(Divider == DIVIDER_P_UPDATE)
 800c1c0:	b377      	cbz	r7, 800c220 <RCCEx_PLLSAI2_Config+0x9c>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800c1c2:	2f01      	cmp	r7, #1
 800c1c4:	d145      	bne.n	800c252 <RCCEx_PLLSAI2_Config+0xce>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c1c6:	692b      	ldr	r3, [r5, #16]
 800c1c8:	6967      	ldr	r7, [r4, #20]
 800c1ca:	085b      	lsrs	r3, r3, #1
 800c1cc:	1e59      	subs	r1, r3, #1
 800c1ce:	4b2b      	ldr	r3, [pc, #172]	; (800c27c <RCCEx_PLLSAI2_Config+0xf8>)
 800c1d0:	403b      	ands	r3, r7
 800c1d2:	4333      	orrs	r3, r6
 800c1d4:	4303      	orrs	r3, r0
 800c1d6:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800c1da:	e029      	b.n	800c230 <RCCEx_PLLSAI2_Config+0xac>
    switch(PllSai2->PLLSAI2Source)
 800c1dc:	2b02      	cmp	r3, #2
 800c1de:	d00d      	beq.n	800c1fc <RCCEx_PLLSAI2_Config+0x78>
 800c1e0:	2b03      	cmp	r3, #3
 800c1e2:	d00f      	beq.n	800c204 <RCCEx_PLLSAI2_Config+0x80>
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d145      	bne.n	800c274 <RCCEx_PLLSAI2_Config+0xf0>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c1e8:	6822      	ldr	r2, [r4, #0]
 800c1ea:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c1ee:	d041      	beq.n	800c274 <RCCEx_PLLSAI2_Config+0xf0>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800c1f0:	68e0      	ldr	r0, [r4, #12]
 800c1f2:	f020 0003 	bic.w	r0, r0, #3
 800c1f6:	4318      	orrs	r0, r3
 800c1f8:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 800c1fa:	e7d2      	b.n	800c1a2 <RCCEx_PLLSAI2_Config+0x1e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c1fc:	6822      	ldr	r2, [r4, #0]
 800c1fe:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800c202:	e7f4      	b.n	800c1ee <RCCEx_PLLSAI2_Config+0x6a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c204:	6822      	ldr	r2, [r4, #0]
 800c206:	0391      	lsls	r1, r2, #14
 800c208:	d4f2      	bmi.n	800c1f0 <RCCEx_PLLSAI2_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c20a:	6822      	ldr	r2, [r4, #0]
 800c20c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800c210:	e7ed      	b.n	800c1ee <RCCEx_PLLSAI2_Config+0x6a>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c212:	f7fc fa07 	bl	8008624 <HAL_GetTick>
 800c216:	1b80      	subs	r0, r0, r6
 800c218:	2802      	cmp	r0, #2
 800c21a:	d9c9      	bls.n	800c1b0 <RCCEx_PLLSAI2_Config+0x2c>
        status = HAL_TIMEOUT;
 800c21c:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800c21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c220:	68e9      	ldr	r1, [r5, #12]
 800c222:	6962      	ldr	r2, [r4, #20]
 800c224:	ea46 63c1 	orr.w	r3, r6, r1, lsl #27
 800c228:	4915      	ldr	r1, [pc, #84]	; (800c280 <RCCEx_PLLSAI2_Config+0xfc>)
 800c22a:	4011      	ands	r1, r2
 800c22c:	430b      	orrs	r3, r1
 800c22e:	4303      	orrs	r3, r0
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c230:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800c232:	6823      	ldr	r3, [r4, #0]
 800c234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c238:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800c23a:	f7fc f9f3 	bl	8008624 <HAL_GetTick>
 800c23e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c240:	6823      	ldr	r3, [r4, #0]
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	d510      	bpl.n	800c268 <RCCEx_PLLSAI2_Config+0xe4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800c246:	6963      	ldr	r3, [r4, #20]
 800c248:	69aa      	ldr	r2, [r5, #24]
 800c24a:	4313      	orrs	r3, r2
 800c24c:	6163      	str	r3, [r4, #20]
 800c24e:	2000      	movs	r0, #0
  return status;
 800c250:	e7e5      	b.n	800c21e <RCCEx_PLLSAI2_Config+0x9a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c252:	696b      	ldr	r3, [r5, #20]
 800c254:	6961      	ldr	r1, [r4, #20]
 800c256:	085b      	lsrs	r3, r3, #1
 800c258:	1e5a      	subs	r2, r3, #1
 800c25a:	4b0a      	ldr	r3, [pc, #40]	; (800c284 <RCCEx_PLLSAI2_Config+0x100>)
 800c25c:	400b      	ands	r3, r1
 800c25e:	4333      	orrs	r3, r6
 800c260:	4303      	orrs	r3, r0
 800c262:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800c266:	e7e3      	b.n	800c230 <RCCEx_PLLSAI2_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c268:	f7fc f9dc 	bl	8008624 <HAL_GetTick>
 800c26c:	1b80      	subs	r0, r0, r6
 800c26e:	2802      	cmp	r0, #2
 800c270:	d9e6      	bls.n	800c240 <RCCEx_PLLSAI2_Config+0xbc>
 800c272:	e7d3      	b.n	800c21c <RCCEx_PLLSAI2_Config+0x98>
      status = HAL_ERROR;
 800c274:	2001      	movs	r0, #1
 800c276:	e7d2      	b.n	800c21e <RCCEx_PLLSAI2_Config+0x9a>
 800c278:	40021000 	.word	0x40021000
 800c27c:	ff9f800f 	.word	0xff9f800f
 800c280:	07ff800f 	.word	0x07ff800f
 800c284:	f9ff800f 	.word	0xf9ff800f

0800c288 <HAL_RCCEx_PeriphCLKConfig>:
{
 800c288:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c28c:	6805      	ldr	r5, [r0, #0]
 800c28e:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 800c292:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c294:	d007      	beq.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800c296:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800c298:	2940      	cmp	r1, #64	; 0x40
 800c29a:	d022      	beq.n	800c2e2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800c29c:	d812      	bhi.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800c29e:	b331      	cbz	r1, 800c2ee <HAL_RCCEx_PeriphCLKConfig+0x66>
 800c2a0:	2920      	cmp	r1, #32
 800c2a2:	d02b      	beq.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 800c2a4:	2501      	movs	r5, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800c2a6:	6823      	ldr	r3, [r4, #0]
 800c2a8:	04db      	lsls	r3, r3, #19
 800c2aa:	d509      	bpl.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->Sai2ClockSelection)
 800c2ac:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800c2ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c2b2:	d030      	beq.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 800c2b4:	d827      	bhi.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800c2b6:	b3a1      	cbz	r1, 800c322 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800c2b8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c2bc:	d074      	beq.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800c2be:	2501      	movs	r5, #1
 800c2c0:	462e      	mov	r6, r5
 800c2c2:	e03d      	b.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800c2c4:	2960      	cmp	r1, #96	; 0x60
 800c2c6:	d001      	beq.n	800c2cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c2c8:	2980      	cmp	r1, #128	; 0x80
 800c2ca:	d1eb      	bne.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c2cc:	4a3c      	ldr	r2, [pc, #240]	; (800c3c0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800c2ce:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800c2d0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800c2d4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800c2d8:	430b      	orrs	r3, r1
 800c2da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800c2de:	2500      	movs	r5, #0
 800c2e0:	e7e1      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800c2e2:	4a37      	ldr	r2, [pc, #220]	; (800c3c0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800c2e4:	68d3      	ldr	r3, [r2, #12]
 800c2e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2ea:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 800c2ec:	e7ee      	b.n	800c2cc <HAL_RCCEx_PeriphCLKConfig+0x44>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c2ee:	3004      	adds	r0, #4
 800c2f0:	f7ff fec6 	bl	800c080 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c2f4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	d1d5      	bne.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800c2fa:	e7e7      	b.n	800c2cc <HAL_RCCEx_PeriphCLKConfig+0x44>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c2fc:	2100      	movs	r1, #0
 800c2fe:	3020      	adds	r0, #32
 800c300:	f7ff ff40 	bl	800c184 <RCCEx_PLLSAI2_Config>
 800c304:	e7f6      	b.n	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800c306:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800c30a:	d002      	beq.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800c30c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c310:	d1d5      	bne.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x36>
 800c312:	462e      	mov	r6, r5
 800c314:	e009      	b.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800c316:	4a2a      	ldr	r2, [pc, #168]	; (800c3c0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800c318:	68d3      	ldr	r3, [r2, #12]
 800c31a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c31e:	60d3      	str	r3, [r2, #12]
      break;
 800c320:	e7f7      	b.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c322:	1d20      	adds	r0, r4, #4
 800c324:	f7ff feac 	bl	800c080 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c328:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800c32a:	2e00      	cmp	r6, #0
 800c32c:	d142      	bne.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c32e:	4a24      	ldr	r2, [pc, #144]	; (800c3c0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800c330:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800c332:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800c336:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c33a:	430b      	orrs	r3, r1
 800c33c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c340:	6823      	ldr	r3, [r4, #0]
 800c342:	039f      	lsls	r7, r3, #14
 800c344:	d54f      	bpl.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c346:	4f1e      	ldr	r7, [pc, #120]	; (800c3c0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800c348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c34a:	00d8      	lsls	r0, r3, #3
 800c34c:	d434      	bmi.n	800c3b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PWR_CLK_ENABLE();
 800c34e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c354:	65bb      	str	r3, [r7, #88]	; 0x58
 800c356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c35c:	9301      	str	r3, [sp, #4]
 800c35e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800c360:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c364:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c368:	f8d9 3000 	ldr.w	r3, [r9]
 800c36c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c370:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800c374:	f7fc f956 	bl	8008624 <HAL_GetTick>
 800c378:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c37a:	f8d9 3000 	ldr.w	r3, [r9]
 800c37e:	05d9      	lsls	r1, r3, #23
 800c380:	d522      	bpl.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(ret == HAL_OK)
 800c382:	2e00      	cmp	r6, #0
 800c384:	f040 819b 	bne.w	800c6be <HAL_RCCEx_PeriphCLKConfig+0x436>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c388:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c38c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800c390:	f040 816a 	bne.w	800c668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c394:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c398:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800c39c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c3a6:	e017      	b.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c3a8:	2100      	movs	r1, #0
 800c3aa:	f104 0020 	add.w	r0, r4, #32
 800c3ae:	f7ff fee9 	bl	800c184 <RCCEx_PLLSAI2_Config>
 800c3b2:	e7b9      	b.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800c3b4:	4635      	mov	r5, r6
 800c3b6:	e7c3      	b.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    FlagStatus       pwrclkchanged = RESET;
 800c3b8:	f04f 0800 	mov.w	r8, #0
 800c3bc:	e7d2      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800c3be:	bf00      	nop
 800c3c0:	40021000 	.word	0x40021000
 800c3c4:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c3c8:	f7fc f92c 	bl	8008624 <HAL_GetTick>
 800c3cc:	eba0 000a 	sub.w	r0, r0, sl
 800c3d0:	2802      	cmp	r0, #2
 800c3d2:	d9d2      	bls.n	800c37a <HAL_RCCEx_PeriphCLKConfig+0xf2>
        ret = HAL_TIMEOUT;
 800c3d4:	2503      	movs	r5, #3
 800c3d6:	462e      	mov	r6, r5
    if(pwrclkchanged == SET)
 800c3d8:	f1b8 0f00 	cmp.w	r8, #0
 800c3dc:	d003      	beq.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c3de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c3e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3e4:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c3e6:	6823      	ldr	r3, [r4, #0]
 800c3e8:	07df      	lsls	r7, r3, #31
 800c3ea:	d508      	bpl.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c3ec:	49b5      	ldr	r1, [pc, #724]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c3ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800c3f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c3f4:	f022 0203 	bic.w	r2, r2, #3
 800c3f8:	4302      	orrs	r2, r0
 800c3fa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c3fe:	0798      	lsls	r0, r3, #30
 800c400:	d508      	bpl.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c402:	49b0      	ldr	r1, [pc, #704]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c404:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800c406:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c40a:	f022 020c 	bic.w	r2, r2, #12
 800c40e:	4302      	orrs	r2, r0
 800c410:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c414:	0759      	lsls	r1, r3, #29
 800c416:	d508      	bpl.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c418:	49aa      	ldr	r1, [pc, #680]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c41a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800c41c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c420:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800c424:	4302      	orrs	r2, r0
 800c426:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c42a:	071a      	lsls	r2, r3, #28
 800c42c:	d508      	bpl.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c42e:	49a5      	ldr	r1, [pc, #660]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c430:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c432:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c436:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c43a:	4302      	orrs	r2, r0
 800c43c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c440:	06df      	lsls	r7, r3, #27
 800c442:	d508      	bpl.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c444:	499f      	ldr	r1, [pc, #636]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c446:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c448:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c44c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c450:	4302      	orrs	r2, r0
 800c452:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c456:	0698      	lsls	r0, r3, #26
 800c458:	d508      	bpl.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c45a:	499a      	ldr	r1, [pc, #616]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c45c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c45e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c462:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c466:	4302      	orrs	r2, r0
 800c468:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c46c:	0599      	lsls	r1, r3, #22
 800c46e:	d508      	bpl.n	800c482 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c470:	4994      	ldr	r1, [pc, #592]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c472:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800c474:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c478:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800c47c:	4302      	orrs	r2, r0
 800c47e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c482:	055a      	lsls	r2, r3, #21
 800c484:	d508      	bpl.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0x210>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c486:	498f      	ldr	r1, [pc, #572]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c488:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800c48a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c48e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800c492:	4302      	orrs	r2, r0
 800c494:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c498:	065f      	lsls	r7, r3, #25
 800c49a:	d508      	bpl.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c49c:	4989      	ldr	r1, [pc, #548]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c49e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c4a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c4a4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800c4a8:	4302      	orrs	r2, r0
 800c4aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c4ae:	0618      	lsls	r0, r3, #24
 800c4b0:	d508      	bpl.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c4b2:	4984      	ldr	r1, [pc, #528]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c4b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c4ba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c4be:	4302      	orrs	r2, r0
 800c4c0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c4c4:	05d9      	lsls	r1, r3, #23
 800c4c6:	d508      	bpl.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c4c8:	497e      	ldr	r1, [pc, #504]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c4ca:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800c4cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c4d0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800c4d4:	4302      	orrs	r2, r0
 800c4d6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c4da:	02da      	lsls	r2, r3, #11
 800c4dc:	d508      	bpl.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c4de:	4979      	ldr	r1, [pc, #484]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c4e0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800c4e2:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 800c4e6:	f022 0203 	bic.w	r2, r2, #3
 800c4ea:	4302      	orrs	r2, r0
 800c4ec:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c4f0:	049f      	lsls	r7, r3, #18
 800c4f2:	d510      	bpl.n	800c516 <HAL_RCCEx_PeriphCLKConfig+0x28e>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c4f4:	4a73      	ldr	r2, [pc, #460]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c4f6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800c4f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800c4fc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800c500:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c502:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c506:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c50a:	f040 80dd 	bne.w	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c50e:	68d3      	ldr	r3, [r2, #12]
 800c510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c514:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800c516:	6823      	ldr	r3, [r4, #0]
 800c518:	0318      	lsls	r0, r3, #12
 800c51a:	d50f      	bpl.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c51c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800c51e:	4b69      	ldr	r3, [pc, #420]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c520:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800c524:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800c528:	f040 80da 	bne.w	800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800c52c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c530:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800c534:	68da      	ldr	r2, [r3, #12]
 800c536:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c53a:	60da      	str	r2, [r3, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c53c:	6823      	ldr	r3, [r4, #0]
 800c53e:	0359      	lsls	r1, r3, #13
 800c540:	d510      	bpl.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c542:	4a60      	ldr	r2, [pc, #384]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c544:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800c546:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800c54a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800c54e:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c550:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c558:	f040 80e0 	bne.w	800c71c <HAL_RCCEx_PeriphCLKConfig+0x494>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c55c:	68d3      	ldr	r3, [r2, #12]
 800c55e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c562:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c564:	6823      	ldr	r3, [r4, #0]
 800c566:	045a      	lsls	r2, r3, #17
 800c568:	d513      	bpl.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0x30a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c56a:	4956      	ldr	r1, [pc, #344]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c56c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800c570:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800c574:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800c578:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c57a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c57e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c582:	d106      	bne.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c584:	2102      	movs	r1, #2
 800c586:	1d20      	adds	r0, r4, #4
 800c588:	f7ff fd7a 	bl	800c080 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800c58c:	1e06      	subs	r6, r0, #0
 800c58e:	bf18      	it	ne
 800c590:	4635      	movne	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c592:	6822      	ldr	r2, [r4, #0]
 800c594:	03d3      	lsls	r3, r2, #15
 800c596:	d509      	bpl.n	800c5ac <HAL_RCCEx_PeriphCLKConfig+0x324>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c598:	494a      	ldr	r1, [pc, #296]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c59a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800c59e:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 800c5a2:	f023 0304 	bic.w	r3, r3, #4
 800c5a6:	4303      	orrs	r3, r0
 800c5a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800c5ac:	0297      	lsls	r7, r2, #10
 800c5ae:	d509      	bpl.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800c5b0:	4944      	ldr	r1, [pc, #272]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c5b2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800c5b6:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 800c5ba:	f023 0318 	bic.w	r3, r3, #24
 800c5be:	4303      	orrs	r3, r0
 800c5c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c5c4:	0250      	lsls	r0, r2, #9
 800c5c6:	d51f      	bpl.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_PLLSAI2_DISABLE();
 800c5c8:	4f3e      	ldr	r7, [pc, #248]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5d0:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800c5d2:	f7fc f827 	bl	8008624 <HAL_GetTick>
 800c5d6:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	0099      	lsls	r1, r3, #2
 800c5dc:	f100 80aa 	bmi.w	800c734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    if(ret == HAL_OK)
 800c5e0:	2e00      	cmp	r6, #0
 800c5e2:	f040 80b0 	bne.w	800c746 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800c5e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5ea:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800c5ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800c5f8:	2102      	movs	r1, #2
 800c5fa:	f104 0020 	add.w	r0, r4, #32
 800c5fe:	f7ff fdc1 	bl	800c184 <RCCEx_PLLSAI2_Config>
    if(ret != HAL_OK)
 800c602:	2800      	cmp	r0, #0
 800c604:	bf18      	it	ne
 800c606:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800c608:	6823      	ldr	r3, [r4, #0]
 800c60a:	021a      	lsls	r2, r3, #8
 800c60c:	d514      	bpl.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800c60e:	492d      	ldr	r1, [pc, #180]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c610:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800c614:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 800c618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c61c:	4313      	orrs	r3, r2
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800c61e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800c622:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800c626:	d107      	bne.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800c628:	2101      	movs	r1, #1
 800c62a:	f104 0020 	add.w	r0, r4, #32
 800c62e:	f7ff fda9 	bl	800c184 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 800c632:	2800      	cmp	r0, #0
 800c634:	bf18      	it	ne
 800c636:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c638:	6823      	ldr	r3, [r4, #0]
 800c63a:	01db      	lsls	r3, r3, #7
 800c63c:	d510      	bpl.n	800c660 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c63e:	4a21      	ldr	r2, [pc, #132]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800c640:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800c644:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800c648:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c64c:	430b      	orrs	r3, r1
 800c64e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800c652:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c656:	bf02      	ittt	eq
 800c658:	68d3      	ldreq	r3, [r2, #12]
 800c65a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800c65e:	60d3      	streq	r3, [r2, #12]
}
 800c660:	4628      	mov	r0, r5
 800c662:	b002      	add	sp, #8
 800c664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c668:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800c66c:	429a      	cmp	r2, r3
 800c66e:	f43f ae91 	beq.w	800c394 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c672:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800c676:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c67a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c67e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c682:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c686:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c68a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c68e:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c690:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800c694:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c698:	f57f ae7c 	bpl.w	800c394 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        tickstart = HAL_GetTick();
 800c69c:	f7fb ffc2 	bl	8008624 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6a0:	f241 3a88 	movw	sl, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800c6a4:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c6a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c6aa:	079b      	lsls	r3, r3, #30
 800c6ac:	f53f ae72 	bmi.w	800c394 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6b0:	f7fb ffb8 	bl	8008624 <HAL_GetTick>
 800c6b4:	eba0 0009 	sub.w	r0, r0, r9
 800c6b8:	4550      	cmp	r0, sl
 800c6ba:	d9f4      	bls.n	800c6a6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 800c6bc:	e68a      	b.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800c6be:	4635      	mov	r5, r6
 800c6c0:	e68a      	b.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800c6c2:	bf00      	nop
 800c6c4:	40021000 	.word	0x40021000
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c6c8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800c6cc:	f47f af23 	bne.w	800c516 <HAL_RCCEx_PeriphCLKConfig+0x28e>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c6d0:	2101      	movs	r1, #1
 800c6d2:	1d20      	adds	r0, r4, #4
 800c6d4:	f7ff fcd4 	bl	800c080 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800c6d8:	1e06      	subs	r6, r0, #0
 800c6da:	bf18      	it	ne
 800c6dc:	4635      	movne	r5, r6
 800c6de:	e71a      	b.n	800c516 <HAL_RCCEx_PeriphCLKConfig+0x28e>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c6e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c6e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800c6e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c6ec:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c6f0:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800c6f2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c6f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800c6fa:	d103      	bne.n	800c704 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c6fc:	68da      	ldr	r2, [r3, #12]
 800c6fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c702:	e71a      	b.n	800c53a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800c704:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800c708:	f47f af18 	bne.w	800c53c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c70c:	2101      	movs	r1, #1
 800c70e:	1d20      	adds	r0, r4, #4
 800c710:	f7ff fcb6 	bl	800c080 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800c714:	1e06      	subs	r6, r0, #0
 800c716:	bf18      	it	ne
 800c718:	4635      	movne	r5, r6
 800c71a:	e70f      	b.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c71c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800c720:	f47f af20 	bne.w	800c564 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c724:	2101      	movs	r1, #1
 800c726:	1d20      	adds	r0, r4, #4
 800c728:	f7ff fcaa 	bl	800c080 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800c72c:	1e06      	subs	r6, r0, #0
 800c72e:	bf18      	it	ne
 800c730:	4635      	movne	r5, r6
 800c732:	e717      	b.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c734:	f7fb ff76 	bl	8008624 <HAL_GetTick>
 800c738:	eba0 0008 	sub.w	r0, r0, r8
 800c73c:	2802      	cmp	r0, #2
 800c73e:	f67f af4b 	bls.w	800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
        ret = HAL_TIMEOUT;
 800c742:	2503      	movs	r5, #3
 800c744:	e760      	b.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800c746:	4635      	mov	r5, r6
 800c748:	e75e      	b.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800c74a:	bf00      	nop

0800c74c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800c74c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c750:	4617      	mov	r7, r2
 800c752:	4698      	mov	r8, r3
 800c754:	460e      	mov	r6, r1
 800c756:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c758:	f7fb ff64 	bl	8008624 <HAL_GetTick>
 800c75c:	44b8      	add	r8, r7
 800c75e:	eba8 0400 	sub.w	r4, r8, r0
  tmp_tickstart = HAL_GetTick();
 800c762:	f7fb ff5f 	bl	8008624 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c766:	4b27      	ldr	r3, [pc, #156]	; (800c804 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb8>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2223      	movs	r2, #35	; 0x23
 800c76c:	4353      	muls	r3, r2
 800c76e:	0d1b      	lsrs	r3, r3, #20
  tmp_tickstart = HAL_GetTick();
 800c770:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c772:	4363      	muls	r3, r4

  while ((hspi->Instance->SR & Fifo) != State)
 800c774:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }      
      count--;
 800c776:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800c778:	6893      	ldr	r3, [r2, #8]
 800c77a:	4033      	ands	r3, r6
 800c77c:	d101      	bne.n	800c782 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x36>
    }
  }

  return HAL_OK;
 800c77e:	4618      	mov	r0, r3
 800c780:	e035      	b.n	800c7ee <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c782:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800c786:	bf01      	itttt	eq
 800c788:	7b13      	ldrbeq	r3, [r2, #12]
 800c78a:	b2db      	uxtbeq	r3, r3
 800c78c:	9300      	streq	r3, [sp, #0]
      UNUSED(tmpreg);
 800c78e:	9b00      	ldreq	r3, [sp, #0]
    if (Timeout != HAL_MAX_DELAY)
 800c790:	1c7b      	adds	r3, r7, #1
 800c792:	d0f1      	beq.n	800c778 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x2c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c794:	f7fb ff46 	bl	8008624 <HAL_GetTick>
 800c798:	eba0 0008 	sub.w	r0, r0, r8
 800c79c:	42a0      	cmp	r0, r4
 800c79e:	d329      	bcc.n	800c7f4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c7a0:	682b      	ldr	r3, [r5, #0]
 800c7a2:	685a      	ldr	r2, [r3, #4]
 800c7a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c7a8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c7aa:	686a      	ldr	r2, [r5, #4]
 800c7ac:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800c7b0:	d10a      	bne.n	800c7c8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7c>
 800c7b2:	68aa      	ldr	r2, [r5, #8]
 800c7b4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c7b8:	d002      	beq.n	800c7c0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x74>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c7ba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c7be:	d103      	bne.n	800c7c8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7c>
          __HAL_SPI_DISABLE(hspi);
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7c6:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c7c8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c7ca:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800c7ce:	d107      	bne.n	800c7e0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x94>
          SPI_RESET_CRC(hspi);
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c7d6:	601a      	str	r2, [r3, #0]
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c7de:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800c7ec:	2003      	movs	r0, #3
}
 800c7ee:	b002      	add	sp, #8
 800c7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 800c7f4:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800c7f6:	2b00      	cmp	r3, #0
      count--;
 800c7f8:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800c7fa:	bf08      	it	eq
 800c7fc:	2400      	moveq	r4, #0
      count--;
 800c7fe:	3b01      	subs	r3, #1
 800c800:	e7b8      	b.n	800c774 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x28>
 800c802:	bf00      	nop
 800c804:	200000a4 	.word	0x200000a4

0800c808 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800c808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c80a:	460e      	mov	r6, r1
 800c80c:	4617      	mov	r7, r2
 800c80e:	4605      	mov	r5, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c810:	f7fb ff08 	bl	8008624 <HAL_GetTick>
 800c814:	4437      	add	r7, r6
 800c816:	1a3c      	subs	r4, r7, r0
  tmp_tickstart = HAL_GetTick();
 800c818:	f7fb ff04 	bl	8008624 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c81c:	4b22      	ldr	r3, [pc, #136]	; (800c8a8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 800c824:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c826:	4363      	muls	r3, r4
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c828:	682a      	ldr	r2, [r5, #0]
      count--;
 800c82a:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c82c:	6893      	ldr	r3, [r2, #8]
 800c82e:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800c832:	d101      	bne.n	800c838 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
  return HAL_OK;
 800c834:	4618      	mov	r0, r3
 800c836:	e02d      	b.n	800c894 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 800c838:	1c73      	adds	r3, r6, #1
 800c83a:	d0f7      	beq.n	800c82c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c83c:	f7fb fef2 	bl	8008624 <HAL_GetTick>
 800c840:	1bc0      	subs	r0, r0, r7
 800c842:	42a0      	cmp	r0, r4
 800c844:	d328      	bcc.n	800c898 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c846:	682b      	ldr	r3, [r5, #0]
 800c848:	685a      	ldr	r2, [r3, #4]
 800c84a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c84e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c850:	686a      	ldr	r2, [r5, #4]
 800c852:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800c856:	d10a      	bne.n	800c86e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
 800c858:	68aa      	ldr	r2, [r5, #8]
 800c85a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c85e:	d002      	beq.n	800c866 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c860:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c864:	d103      	bne.n	800c86e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
          __HAL_SPI_DISABLE(hspi);
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c86c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c86e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c870:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800c874:	d107      	bne.n	800c886 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7e>
          SPI_RESET_CRC(hspi);
 800c876:	681a      	ldr	r2, [r3, #0]
 800c878:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c87c:	601a      	str	r2, [r3, #0]
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c884:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800c886:	2301      	movs	r3, #1
 800c888:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800c88c:	2300      	movs	r3, #0
 800c88e:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800c892:	2003      	movs	r0, #3
}
 800c894:	b003      	add	sp, #12
 800c896:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 800c898:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800c89a:	2b00      	cmp	r3, #0
      count--;
 800c89c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800c89e:	bf08      	it	eq
 800c8a0:	2400      	moveq	r4, #0
      count--;
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	e7c0      	b.n	800c828 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x20>
 800c8a6:	bf00      	nop
 800c8a8:	200000a4 	.word	0x200000a4

0800c8ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c8ac:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c8ae:	6842      	ldr	r2, [r0, #4]
 800c8b0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 800c8b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	460e      	mov	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c8ba:	d10b      	bne.n	800c8d4 <SPI_EndRxTransaction+0x28>
 800c8bc:	6882      	ldr	r2, [r0, #8]
 800c8be:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c8c2:	d002      	beq.n	800c8ca <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c8c4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c8c8:	d104      	bne.n	800c8d4 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c8ca:	6820      	ldr	r0, [r4, #0]
 800c8cc:	6802      	ldr	r2, [r0, #0]
 800c8ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8d2:	6002      	str	r2, [r0, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	4631      	mov	r1, r6
 800c8d8:	4620      	mov	r0, r4
 800c8da:	9301      	str	r3, [sp, #4]
 800c8dc:	f7ff ff94 	bl	800c808 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800c8e0:	9b01      	ldr	r3, [sp, #4]
 800c8e2:	4605      	mov	r5, r0
 800c8e4:	b128      	cbz	r0, 800c8f2 <SPI_EndRxTransaction+0x46>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c8e8:	f043 0320 	orr.w	r3, r3, #32
 800c8ec:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800c8ee:	2503      	movs	r5, #3
 800c8f0:	e012      	b.n	800c918 <SPI_EndRxTransaction+0x6c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c8f2:	6862      	ldr	r2, [r4, #4]
 800c8f4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800c8f8:	d10e      	bne.n	800c918 <SPI_EndRxTransaction+0x6c>
 800c8fa:	68a2      	ldr	r2, [r4, #8]
 800c8fc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c900:	d002      	beq.n	800c908 <SPI_EndRxTransaction+0x5c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c902:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c906:	d107      	bne.n	800c918 <SPI_EndRxTransaction+0x6c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c908:	4632      	mov	r2, r6
 800c90a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c90e:	4620      	mov	r0, r4
 800c910:	f7ff ff1c 	bl	800c74c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800c914:	2800      	cmp	r0, #0
 800c916:	d1e6      	bne.n	800c8e6 <SPI_EndRxTransaction+0x3a>
    }
  }
  return HAL_OK;
}
 800c918:	4628      	mov	r0, r5
 800c91a:	b002      	add	sp, #8
 800c91c:	bd70      	pop	{r4, r5, r6, pc}

0800c91e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c91e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c920:	4613      	mov	r3, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c922:	9201      	str	r2, [sp, #4]
{
 800c924:	460d      	mov	r5, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c926:	460a      	mov	r2, r1
 800c928:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800c92c:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c92e:	f7ff ff0d 	bl	800c74c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800c932:	9b01      	ldr	r3, [sp, #4]
 800c934:	b128      	cbz	r0, 800c942 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c936:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c938:	f043 0320 	orr.w	r3, r3, #32
 800c93c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800c93e:	2003      	movs	r0, #3
 800c940:	e010      	b.n	800c964 <SPI_EndRxTxTransaction+0x46>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c942:	461a      	mov	r2, r3
 800c944:	4629      	mov	r1, r5
 800c946:	4620      	mov	r0, r4
 800c948:	9301      	str	r3, [sp, #4]
 800c94a:	f7ff ff5d 	bl	800c808 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800c94e:	9b01      	ldr	r3, [sp, #4]
 800c950:	2800      	cmp	r0, #0
 800c952:	d1f0      	bne.n	800c936 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c954:	462a      	mov	r2, r5
 800c956:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c95a:	4620      	mov	r0, r4
 800c95c:	f7ff fef6 	bl	800c74c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800c960:	2800      	cmp	r0, #0
 800c962:	d1e8      	bne.n	800c936 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 800c964:	b003      	add	sp, #12
 800c966:	bd30      	pop	{r4, r5, pc}

0800c968 <HAL_SPI_MspInit>:
}
 800c968:	4770      	bx	lr

0800c96a <HAL_SPI_Init>:
{
 800c96a:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800c96c:	4604      	mov	r4, r0
 800c96e:	2800      	cmp	r0, #0
 800c970:	d05f      	beq.n	800ca32 <HAL_SPI_Init+0xc8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c972:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c974:	2b00      	cmp	r3, #0
 800c976:	d158      	bne.n	800ca2a <HAL_SPI_Init+0xc0>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c978:	6842      	ldr	r2, [r0, #4]
 800c97a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800c97e:	d000      	beq.n	800c982 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c980:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c982:	2300      	movs	r3, #0
 800c984:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800c986:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800c98a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c98e:	b923      	cbnz	r3, 800c99a <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800c990:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800c994:	4620      	mov	r0, r4
 800c996:	f7ff ffe7 	bl	800c968 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800c99a:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c99c:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800c99e:	2302      	movs	r3, #2
 800c9a0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800c9a4:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c9a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800c9aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9ae:	602b      	str	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c9b0:	f04f 0300 	mov.w	r3, #0
 800c9b4:	d83f      	bhi.n	800ca36 <HAL_SPI_Init+0xcc>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c9b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c9ba:	d000      	beq.n	800c9be <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c9bc:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c9be:	6863      	ldr	r3, [r4, #4]
 800c9c0:	68a6      	ldr	r6, [r4, #8]
 800c9c2:	69a2      	ldr	r2, [r4, #24]
 800c9c4:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 800c9c8:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800c9cc:	4333      	orrs	r3, r6
 800c9ce:	6926      	ldr	r6, [r4, #16]
 800c9d0:	f006 0602 	and.w	r6, r6, #2
 800c9d4:	4333      	orrs	r3, r6
 800c9d6:	6966      	ldr	r6, [r4, #20]
 800c9d8:	f006 0601 	and.w	r6, r6, #1
 800c9dc:	4333      	orrs	r3, r6
 800c9de:	f402 7600 	and.w	r6, r2, #512	; 0x200
 800c9e2:	4333      	orrs	r3, r6
 800c9e4:	69e6      	ldr	r6, [r4, #28]
 800c9e6:	f006 0638 	and.w	r6, r6, #56	; 0x38
 800c9ea:	4333      	orrs	r3, r6
 800c9ec:	6a26      	ldr	r6, [r4, #32]
 800c9ee:	f006 0680 	and.w	r6, r6, #128	; 0x80
 800c9f2:	4333      	orrs	r3, r6
 800c9f4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c9f6:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 800c9fa:	4333      	orrs	r3, r6
 800c9fc:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c9fe:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800ca00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca02:	f006 0608 	and.w	r6, r6, #8
 800ca06:	f003 0310 	and.w	r3, r3, #16
 800ca0a:	4333      	orrs	r3, r6
 800ca0c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800ca10:	0c12      	lsrs	r2, r2, #16
 800ca12:	4319      	orrs	r1, r3
 800ca14:	f002 0204 	and.w	r2, r2, #4
 800ca18:	430a      	orrs	r2, r1
 800ca1a:	4310      	orrs	r0, r2
 800ca1c:	6068      	str	r0, [r5, #4]
  hspi->State     = HAL_SPI_STATE_READY;
 800ca1e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ca20:	2000      	movs	r0, #0
 800ca22:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ca24:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800ca28:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ca2a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ca2c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca30:	e7a7      	b.n	800c982 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800ca32:	2001      	movs	r0, #1
 800ca34:	e7f8      	b.n	800ca28 <HAL_SPI_Init+0xbe>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ca36:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ca38:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 800ca3c:	e7bd      	b.n	800c9ba <HAL_SPI_Init+0x50>

0800ca3e <HAL_SPI_MspDeInit>:
 800ca3e:	4770      	bx	lr

0800ca40 <HAL_SPI_DeInit>:
{
 800ca40:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800ca42:	4604      	mov	r4, r0
 800ca44:	b180      	cbz	r0, 800ca68 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 800ca46:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800ca48:	2302      	movs	r3, #2
 800ca4a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800ca4e:	6813      	ldr	r3, [r2, #0]
 800ca50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca54:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800ca56:	f7ff fff2 	bl	800ca3e <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ca5a:	2000      	movs	r0, #0
 800ca5c:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 800ca5e:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 800ca62:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 800ca66:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ca68:	2001      	movs	r0, #1
 800ca6a:	e7fc      	b.n	800ca66 <HAL_SPI_DeInit+0x26>

0800ca6c <HAL_SPI_Transmit>:
{
 800ca6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca70:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800ca72:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800ca76:	2b01      	cmp	r3, #1
{
 800ca78:	4604      	mov	r4, r0
 800ca7a:	460d      	mov	r5, r1
 800ca7c:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800ca7e:	f000 80bc 	beq.w	800cbfa <HAL_SPI_Transmit+0x18e>
 800ca82:	2301      	movs	r3, #1
 800ca84:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800ca88:	f7fb fdcc 	bl	8008624 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800ca8c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800ca90:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800ca92:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800ca94:	b2d8      	uxtb	r0, r3
 800ca96:	f040 80ae 	bne.w	800cbf6 <HAL_SPI_Transmit+0x18a>
  if ((pData == NULL) || (Size == 0U))
 800ca9a:	2d00      	cmp	r5, #0
 800ca9c:	d063      	beq.n	800cb66 <HAL_SPI_Transmit+0xfa>
 800ca9e:	f1b8 0f00 	cmp.w	r8, #0
 800caa2:	d060      	beq.n	800cb66 <HAL_SPI_Transmit+0xfa>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800caa4:	2303      	movs	r3, #3
 800caa6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800caaa:	2300      	movs	r3, #0
 800caac:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 800caae:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->TxXferCount = Size;
 800cab2:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cab6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800cab8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800cabc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cac0:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800cac2:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cac4:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 800caca:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cace:	d107      	bne.n	800cae0 <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 800cad0:	6833      	ldr	r3, [r6, #0]
 800cad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cad6:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 800cad8:	6833      	ldr	r3, [r6, #0]
 800cada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cade:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cae0:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cae2:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cae4:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800cae6:	bf5e      	ittt	pl
 800cae8:	6833      	ldrpl	r3, [r6, #0]
 800caea:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800caee:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800caf0:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800caf4:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800caf6:	d942      	bls.n	800cb7e <HAL_SPI_Transmit+0x112>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800caf8:	b113      	cbz	r3, 800cb00 <HAL_SPI_Transmit+0x94>
 800cafa:	f1b8 0f01 	cmp.w	r8, #1
 800cafe:	d107      	bne.n	800cb10 <HAL_SPI_Transmit+0xa4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cb00:	f835 3b02 	ldrh.w	r3, [r5], #2
 800cb04:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb06:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800cb08:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cb0a:	3b01      	subs	r3, #1
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800cb10:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	b9a3      	cbnz	r3, 800cb40 <HAL_SPI_Transmit+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cb16:	464a      	mov	r2, r9
 800cb18:	4639      	mov	r1, r7
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	f7ff feff 	bl	800c91e <SPI_EndRxTxTransaction>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	d165      	bne.n	800cbf0 <HAL_SPI_Transmit+0x184>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cb24:	68a3      	ldr	r3, [r4, #8]
 800cb26:	b933      	cbnz	r3, 800cb36 <HAL_SPI_Transmit+0xca>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cb28:	9301      	str	r3, [sp, #4]
 800cb2a:	6823      	ldr	r3, [r4, #0]
 800cb2c:	68da      	ldr	r2, [r3, #12]
 800cb2e:	9201      	str	r2, [sp, #4]
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	9301      	str	r3, [sp, #4]
 800cb34:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb36:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800cb38:	3800      	subs	r0, #0
 800cb3a:	bf18      	it	ne
 800cb3c:	2001      	movne	r0, #1
error:
 800cb3e:	e012      	b.n	800cb66 <HAL_SPI_Transmit+0xfa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cb40:	6822      	ldr	r2, [r4, #0]
 800cb42:	6893      	ldr	r3, [r2, #8]
 800cb44:	079d      	lsls	r5, r3, #30
 800cb46:	d505      	bpl.n	800cb54 <HAL_SPI_Transmit+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cb48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cb4a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800cb4e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb50:	63a3      	str	r3, [r4, #56]	; 0x38
 800cb52:	e7d9      	b.n	800cb08 <HAL_SPI_Transmit+0x9c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb54:	f7fb fd66 	bl	8008624 <HAL_GetTick>
 800cb58:	eba0 0009 	sub.w	r0, r0, r9
 800cb5c:	42b8      	cmp	r0, r7
 800cb5e:	d30b      	bcc.n	800cb78 <HAL_SPI_Transmit+0x10c>
 800cb60:	1c78      	adds	r0, r7, #1
 800cb62:	d0d5      	beq.n	800cb10 <HAL_SPI_Transmit+0xa4>
          errorcode = HAL_TIMEOUT;
 800cb64:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800cb66:	2301      	movs	r3, #1
 800cb68:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800cb72:	b003      	add	sp, #12
 800cb74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb78:	2f00      	cmp	r7, #0
 800cb7a:	d1c9      	bne.n	800cb10 <HAL_SPI_Transmit+0xa4>
 800cb7c:	e7f2      	b.n	800cb64 <HAL_SPI_Transmit+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cb7e:	b113      	cbz	r3, 800cb86 <HAL_SPI_Transmit+0x11a>
 800cb80:	f1b8 0f01 	cmp.w	r8, #1
 800cb84:	d113      	bne.n	800cbae <HAL_SPI_Transmit+0x142>
      if (hspi->TxXferCount > 1U)
 800cb86:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d906      	bls.n	800cb9c <HAL_SPI_Transmit+0x130>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cb8e:	f835 3b02 	ldrh.w	r3, [r5], #2
 800cb92:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb94:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800cb96:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cb98:	3b02      	subs	r3, #2
 800cb9a:	e006      	b.n	800cbaa <HAL_SPI_Transmit+0x13e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cb9c:	782b      	ldrb	r3, [r5, #0]
 800cb9e:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 800cba0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cba2:	3301      	adds	r3, #1
 800cba4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800cba6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cba8:	3b01      	subs	r3, #1
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800cbae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d0af      	beq.n	800cb16 <HAL_SPI_Transmit+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cbb6:	6822      	ldr	r2, [r4, #0]
 800cbb8:	6893      	ldr	r3, [r2, #8]
 800cbba:	0799      	lsls	r1, r3, #30
 800cbbc:	d50c      	bpl.n	800cbd8 <HAL_SPI_Transmit+0x16c>
        if (hspi->TxXferCount > 1U)
 800cbbe:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cbc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 800cbc2:	b289      	uxth	r1, r1
 800cbc4:	2901      	cmp	r1, #1
 800cbc6:	d904      	bls.n	800cbd2 <HAL_SPI_Transmit+0x166>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cbc8:	f833 1b02 	ldrh.w	r1, [r3], #2
 800cbcc:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cbce:	63a3      	str	r3, [r4, #56]	; 0x38
 800cbd0:	e7e1      	b.n	800cb96 <HAL_SPI_Transmit+0x12a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800cbd6:	e7e3      	b.n	800cba0 <HAL_SPI_Transmit+0x134>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cbd8:	f7fb fd24 	bl	8008624 <HAL_GetTick>
 800cbdc:	eba0 0009 	sub.w	r0, r0, r9
 800cbe0:	42b8      	cmp	r0, r7
 800cbe2:	d302      	bcc.n	800cbea <HAL_SPI_Transmit+0x17e>
 800cbe4:	1c7b      	adds	r3, r7, #1
 800cbe6:	d0e2      	beq.n	800cbae <HAL_SPI_Transmit+0x142>
 800cbe8:	e7bc      	b.n	800cb64 <HAL_SPI_Transmit+0xf8>
 800cbea:	2f00      	cmp	r7, #0
 800cbec:	d1df      	bne.n	800cbae <HAL_SPI_Transmit+0x142>
 800cbee:	e7b9      	b.n	800cb64 <HAL_SPI_Transmit+0xf8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cbf0:	2320      	movs	r3, #32
 800cbf2:	6623      	str	r3, [r4, #96]	; 0x60
 800cbf4:	e796      	b.n	800cb24 <HAL_SPI_Transmit+0xb8>
    errorcode = HAL_BUSY;
 800cbf6:	2002      	movs	r0, #2
 800cbf8:	e7b5      	b.n	800cb66 <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 800cbfa:	2002      	movs	r0, #2
 800cbfc:	e7b9      	b.n	800cb72 <HAL_SPI_Transmit+0x106>

0800cbfe <HAL_SPI_TransmitReceive>:
{
 800cbfe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc02:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800cc04:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800cc08:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 800cc0c:	2b01      	cmp	r3, #1
{
 800cc0e:	4604      	mov	r4, r0
 800cc10:	460d      	mov	r5, r1
 800cc12:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 800cc14:	f000 811d 	beq.w	800ce52 <HAL_SPI_TransmitReceive+0x254>
 800cc18:	2301      	movs	r3, #1
 800cc1a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800cc1e:	f7fb fd01 	bl	8008624 <HAL_GetTick>
  tmp_state           = hspi->State;
 800cc22:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 800cc26:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cc28:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 800cc2a:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 800cc2c:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cc2e:	d00a      	beq.n	800cc46 <HAL_SPI_TransmitReceive+0x48>
 800cc30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc34:	f040 810b 	bne.w	800ce4e <HAL_SPI_TransmitReceive+0x250>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cc38:	68a2      	ldr	r2, [r4, #8]
 800cc3a:	2a00      	cmp	r2, #0
 800cc3c:	f040 8107 	bne.w	800ce4e <HAL_SPI_TransmitReceive+0x250>
 800cc40:	2904      	cmp	r1, #4
 800cc42:	f040 8104 	bne.w	800ce4e <HAL_SPI_TransmitReceive+0x250>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cc46:	2d00      	cmp	r5, #0
 800cc48:	d047      	beq.n	800ccda <HAL_SPI_TransmitReceive+0xdc>
 800cc4a:	2e00      	cmp	r6, #0
 800cc4c:	d045      	beq.n	800ccda <HAL_SPI_TransmitReceive+0xdc>
 800cc4e:	2f00      	cmp	r7, #0
 800cc50:	d043      	beq.n	800ccda <HAL_SPI_TransmitReceive+0xdc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cc52:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800cc56:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cc58:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cc5a:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cc5c:	bf1c      	itt	ne
 800cc5e:	2205      	movne	r2, #5
 800cc60:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cc64:	6826      	ldr	r6, [r4, #0]
  hspi->RxXferSize  = Size;
 800cc66:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	6622      	str	r2, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800cc6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->RxXferCount = Size;
 800cc72:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 800cc76:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800cc78:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cc7c:	63a5      	str	r5, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cc7e:	6872      	ldr	r2, [r6, #4]
  hspi->TxXferSize  = Size;
 800cc80:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800cc82:	d801      	bhi.n	800cc88 <HAL_SPI_TransmitReceive+0x8a>
 800cc84:	2f01      	cmp	r7, #1
 800cc86:	d02a      	beq.n	800ccde <HAL_SPI_TransmitReceive+0xe0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cc88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cc8c:	6072      	str	r2, [r6, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc8e:	6832      	ldr	r2, [r6, #0]
 800cc90:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800cc92:	bf5e      	ittt	pl
 800cc94:	6832      	ldrpl	r2, [r6, #0]
 800cc96:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800cc9a:	6032      	strpl	r2, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc9c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cca0:	d958      	bls.n	800cd54 <HAL_SPI_TransmitReceive+0x156>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cca2:	b10b      	cbz	r3, 800cca8 <HAL_SPI_TransmitReceive+0xaa>
 800cca4:	2f01      	cmp	r7, #1
 800cca6:	d107      	bne.n	800ccb8 <HAL_SPI_TransmitReceive+0xba>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cca8:	f835 3b02 	ldrh.w	r3, [r5], #2
 800ccac:	60f3      	str	r3, [r6, #12]
      hspi->TxXferCount--;
 800ccae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ccb0:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800ccb2:	3b01      	subs	r3, #1
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800ccb8:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ccba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	b98b      	cbnz	r3, 800cce4 <HAL_SPI_TransmitReceive+0xe6>
 800ccc0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	b96b      	cbnz	r3, 800cce4 <HAL_SPI_TransmitReceive+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ccc8:	464a      	mov	r2, r9
 800ccca:	4641      	mov	r1, r8
 800cccc:	4620      	mov	r0, r4
 800ccce:	f7ff fe26 	bl	800c91e <SPI_EndRxTxTransaction>
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	d036      	beq.n	800cd44 <HAL_SPI_TransmitReceive+0x146>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ccd6:	2320      	movs	r3, #32
 800ccd8:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800ccda:	2001      	movs	r0, #1
 800ccdc:	e032      	b.n	800cd44 <HAL_SPI_TransmitReceive+0x146>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ccde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cce2:	e7d3      	b.n	800cc8c <HAL_SPI_TransmitReceive+0x8e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cce4:	6821      	ldr	r1, [r4, #0]
 800cce6:	688b      	ldr	r3, [r1, #8]
 800cce8:	079a      	lsls	r2, r3, #30
 800ccea:	d50d      	bpl.n	800cd08 <HAL_SPI_TransmitReceive+0x10a>
 800ccec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	b153      	cbz	r3, 800cd08 <HAL_SPI_TransmitReceive+0x10a>
 800ccf2:	b14d      	cbz	r5, 800cd08 <HAL_SPI_TransmitReceive+0x10a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ccf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ccf6:	f833 2b02 	ldrh.w	r2, [r3], #2
 800ccfa:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ccfc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800ccfe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cd00:	3b01      	subs	r3, #1
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800cd06:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cd08:	688a      	ldr	r2, [r1, #8]
 800cd0a:	f012 0201 	ands.w	r2, r2, #1
 800cd0e:	d00f      	beq.n	800cd30 <HAL_SPI_TransmitReceive+0x132>
 800cd10:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	b15b      	cbz	r3, 800cd30 <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cd18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd1a:	68c9      	ldr	r1, [r1, #12]
 800cd1c:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd20:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800cd22:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800cd26:	3b01      	subs	r3, #1
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800cd2e:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800cd30:	f7fb fc78 	bl	8008624 <HAL_GetTick>
 800cd34:	eba0 0009 	sub.w	r0, r0, r9
 800cd38:	4540      	cmp	r0, r8
 800cd3a:	d3be      	bcc.n	800ccba <HAL_SPI_TransmitReceive+0xbc>
 800cd3c:	f1b8 3fff 	cmp.w	r8, #4294967295
 800cd40:	d0bb      	beq.n	800ccba <HAL_SPI_TransmitReceive+0xbc>
        errorcode = HAL_TIMEOUT;
 800cd42:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800cd44:	2301      	movs	r3, #1
 800cd46:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800cd50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cd54:	b10b      	cbz	r3, 800cd5a <HAL_SPI_TransmitReceive+0x15c>
 800cd56:	2f01      	cmp	r7, #1
 800cd58:	d10b      	bne.n	800cd72 <HAL_SPI_TransmitReceive+0x174>
      if (hspi->TxXferCount > 1U)
 800cd5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d909      	bls.n	800cd76 <HAL_SPI_TransmitReceive+0x178>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cd62:	f835 3b02 	ldrh.w	r3, [r5], #2
 800cd66:	60f3      	str	r3, [r6, #12]
        hspi->TxXferCount -= 2U;
 800cd68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd6a:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800cd6c:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800cd72:	2501      	movs	r5, #1
 800cd74:	e049      	b.n	800ce0a <HAL_SPI_TransmitReceive+0x20c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800cd76:	782b      	ldrb	r3, [r5, #0]
 800cd78:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr++;
 800cd7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800cd80:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cd82:	3b01      	subs	r3, #1
 800cd84:	e7f3      	b.n	800cd6e <HAL_SPI_TransmitReceive+0x170>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cd86:	6822      	ldr	r2, [r4, #0]
 800cd88:	6893      	ldr	r3, [r2, #8]
 800cd8a:	079b      	lsls	r3, r3, #30
 800cd8c:	d511      	bpl.n	800cdb2 <HAL_SPI_TransmitReceive+0x1b4>
 800cd8e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	b173      	cbz	r3, 800cdb2 <HAL_SPI_TransmitReceive+0x1b4>
 800cd94:	b16d      	cbz	r5, 800cdb2 <HAL_SPI_TransmitReceive+0x1b4>
        if (hspi->TxXferCount > 1U)
 800cd96:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cd98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 800cd9a:	b289      	uxth	r1, r1
 800cd9c:	2901      	cmp	r1, #1
 800cd9e:	d93e      	bls.n	800ce1e <HAL_SPI_TransmitReceive+0x220>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cda0:	f833 1b02 	ldrh.w	r1, [r3], #2
 800cda4:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cda6:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800cda8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cdaa:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800cdb0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cdb2:	6822      	ldr	r2, [r4, #0]
 800cdb4:	6893      	ldr	r3, [r2, #8]
 800cdb6:	f013 0301 	ands.w	r3, r3, #1
 800cdba:	d01d      	beq.n	800cdf8 <HAL_SPI_TransmitReceive+0x1fa>
 800cdbc:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800cdc0:	b289      	uxth	r1, r1
 800cdc2:	b1c9      	cbz	r1, 800cdf8 <HAL_SPI_TransmitReceive+0x1fa>
        if (hspi->RxXferCount > 1U)
 800cdc4:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cdc8:	6c21      	ldr	r1, [r4, #64]	; 0x40
        if (hspi->RxXferCount > 1U)
 800cdca:	b280      	uxth	r0, r0
 800cdcc:	2801      	cmp	r0, #1
 800cdce:	d92e      	bls.n	800ce2e <HAL_SPI_TransmitReceive+0x230>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cdd0:	68d0      	ldr	r0, [r2, #12]
 800cdd2:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cdd6:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800cdd8:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800cddc:	3902      	subs	r1, #2
 800cdde:	b289      	uxth	r1, r1
 800cde0:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800cde4:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800cde8:	b289      	uxth	r1, r1
 800cdea:	2901      	cmp	r1, #1
 800cdec:	d803      	bhi.n	800cdf6 <HAL_SPI_TransmitReceive+0x1f8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cdee:	6851      	ldr	r1, [r2, #4]
 800cdf0:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800cdf4:	6051      	str	r1, [r2, #4]
        txallowed = 1U;
 800cdf6:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800cdf8:	f7fb fc14 	bl	8008624 <HAL_GetTick>
 800cdfc:	eba0 0009 	sub.w	r0, r0, r9
 800ce00:	4540      	cmp	r0, r8
 800ce02:	d320      	bcc.n	800ce46 <HAL_SPI_TransmitReceive+0x248>
 800ce04:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ce08:	d19b      	bne.n	800cd42 <HAL_SPI_TransmitReceive+0x144>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ce0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d1b9      	bne.n	800cd86 <HAL_SPI_TransmitReceive+0x188>
 800ce12:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1b4      	bne.n	800cd86 <HAL_SPI_TransmitReceive+0x188>
 800ce1c:	e754      	b.n	800ccc8 <HAL_SPI_TransmitReceive+0xca>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800ce22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ce24:	3301      	adds	r3, #1
 800ce26:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800ce28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	e7be      	b.n	800cdac <HAL_SPI_TransmitReceive+0x1ae>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ce2e:	7b12      	ldrb	r2, [r2, #12]
 800ce30:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 800ce32:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ce34:	3201      	adds	r2, #1
 800ce36:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800ce38:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800ce3c:	3a01      	subs	r2, #1
 800ce3e:	b292      	uxth	r2, r2
 800ce40:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 800ce44:	e7d7      	b.n	800cdf6 <HAL_SPI_TransmitReceive+0x1f8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ce46:	f1b8 0f00 	cmp.w	r8, #0
 800ce4a:	d1de      	bne.n	800ce0a <HAL_SPI_TransmitReceive+0x20c>
 800ce4c:	e779      	b.n	800cd42 <HAL_SPI_TransmitReceive+0x144>
    errorcode = HAL_BUSY;
 800ce4e:	2002      	movs	r0, #2
 800ce50:	e778      	b.n	800cd44 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 800ce52:	2002      	movs	r0, #2
 800ce54:	e77c      	b.n	800cd50 <HAL_SPI_TransmitReceive+0x152>

0800ce56 <HAL_SPI_Receive>:
{
 800ce56:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce5a:	461e      	mov	r6, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ce5c:	6843      	ldr	r3, [r0, #4]
 800ce5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800ce62:	4604      	mov	r4, r0
 800ce64:	4689      	mov	r9, r1
 800ce66:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ce68:	d10c      	bne.n	800ce84 <HAL_SPI_Receive+0x2e>
 800ce6a:	6883      	ldr	r3, [r0, #8]
 800ce6c:	b953      	cbnz	r3, 800ce84 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ce6e:	2304      	movs	r3, #4
 800ce70:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ce74:	4613      	mov	r3, r2
 800ce76:	9600      	str	r6, [sp, #0]
 800ce78:	460a      	mov	r2, r1
 800ce7a:	f7ff fec0 	bl	800cbfe <HAL_SPI_TransmitReceive>
}
 800ce7e:	b003      	add	sp, #12
 800ce80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 800ce84:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	f000 809a 	beq.w	800cfc2 <HAL_SPI_Receive+0x16c>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800ce94:	f7fb fbc6 	bl	8008624 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800ce98:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800ce9c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800ce9e:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800cea0:	b2d8      	uxtb	r0, r3
 800cea2:	f040 808c 	bne.w	800cfbe <HAL_SPI_Receive+0x168>
  if ((pData == NULL) || (Size == 0U))
 800cea6:	f1b9 0f00 	cmp.w	r9, #0
 800ceaa:	d06f      	beq.n	800cf8c <HAL_SPI_Receive+0x136>
 800ceac:	2f00      	cmp	r7, #0
 800ceae:	d06d      	beq.n	800cf8c <HAL_SPI_Receive+0x136>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ceb0:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ceb2:	2304      	movs	r3, #4
 800ceb4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->TxISR       = NULL;
 800ceb8:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cebc:	6625      	str	r5, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800cebe:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800cec0:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 800cec4:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800cec6:	87e5      	strh	r5, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cec8:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ceca:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cecc:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cece:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ced2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ced6:	bf8c      	ite	hi
 800ced8:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cedc:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
  hspi->RxXferSize  = Size;
 800cee0:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cee4:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cee6:	68a3      	ldr	r3, [r4, #8]
 800cee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ceec:	d107      	bne.n	800cefe <HAL_SPI_Receive+0xa8>
    __HAL_SPI_DISABLE(hspi);
 800ceee:	682b      	ldr	r3, [r5, #0]
 800cef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cef4:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 800cef6:	682b      	ldr	r3, [r5, #0]
 800cef8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cefc:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cefe:	682b      	ldr	r3, [r5, #0]
 800cf00:	065f      	lsls	r7, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800cf02:	bf5e      	ittt	pl
 800cf04:	682b      	ldrpl	r3, [r5, #0]
 800cf06:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800cf0a:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800cf0c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800cf10:	d923      	bls.n	800cf5a <HAL_SPI_Receive+0x104>
    while (hspi->RxXferCount > 0U)
 800cf12:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	b323      	cbz	r3, 800cf64 <HAL_SPI_Receive+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cf1a:	6823      	ldr	r3, [r4, #0]
 800cf1c:	689a      	ldr	r2, [r3, #8]
 800cf1e:	07d2      	lsls	r2, r2, #31
 800cf20:	d53e      	bpl.n	800cfa0 <HAL_SPI_Receive+0x14a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cf22:	68da      	ldr	r2, [r3, #12]
 800cf24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf26:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cf2a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800cf2c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800cf30:	3b01      	subs	r3, #1
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800cf38:	e7eb      	b.n	800cf12 <HAL_SPI_Receive+0xbc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cf3a:	6823      	ldr	r3, [r4, #0]
 800cf3c:	689a      	ldr	r2, [r3, #8]
 800cf3e:	07d0      	lsls	r0, r2, #31
 800cf40:	d51b      	bpl.n	800cf7a <HAL_SPI_Receive+0x124>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cf42:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cf44:	7b1b      	ldrb	r3, [r3, #12]
 800cf46:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cf48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800cf4e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800cf52:	3b01      	subs	r3, #1
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 800cf5a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d1ea      	bne.n	800cf3a <HAL_SPI_Receive+0xe4>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cf64:	4642      	mov	r2, r8
 800cf66:	4631      	mov	r1, r6
 800cf68:	4620      	mov	r0, r4
 800cf6a:	f7ff fc9f 	bl	800c8ac <SPI_EndRxTransaction>
 800cf6e:	bb18      	cbnz	r0, 800cfb8 <HAL_SPI_Receive+0x162>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cf70:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800cf72:	3800      	subs	r0, #0
 800cf74:	bf18      	it	ne
 800cf76:	2001      	movne	r0, #1
error :
 800cf78:	e008      	b.n	800cf8c <HAL_SPI_Receive+0x136>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf7a:	f7fb fb53 	bl	8008624 <HAL_GetTick>
 800cf7e:	eba0 0008 	sub.w	r0, r0, r8
 800cf82:	42b0      	cmp	r0, r6
 800cf84:	d309      	bcc.n	800cf9a <HAL_SPI_Receive+0x144>
 800cf86:	1c71      	adds	r1, r6, #1
 800cf88:	d0e7      	beq.n	800cf5a <HAL_SPI_Receive+0x104>
          errorcode = HAL_TIMEOUT;
 800cf8a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800cf92:	2300      	movs	r3, #0
 800cf94:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800cf98:	e771      	b.n	800ce7e <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf9a:	2e00      	cmp	r6, #0
 800cf9c:	d1dd      	bne.n	800cf5a <HAL_SPI_Receive+0x104>
 800cf9e:	e7f4      	b.n	800cf8a <HAL_SPI_Receive+0x134>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cfa0:	f7fb fb40 	bl	8008624 <HAL_GetTick>
 800cfa4:	eba0 0008 	sub.w	r0, r0, r8
 800cfa8:	42b0      	cmp	r0, r6
 800cfaa:	d302      	bcc.n	800cfb2 <HAL_SPI_Receive+0x15c>
 800cfac:	1c73      	adds	r3, r6, #1
 800cfae:	d0b0      	beq.n	800cf12 <HAL_SPI_Receive+0xbc>
 800cfb0:	e7eb      	b.n	800cf8a <HAL_SPI_Receive+0x134>
 800cfb2:	2e00      	cmp	r6, #0
 800cfb4:	d1ad      	bne.n	800cf12 <HAL_SPI_Receive+0xbc>
 800cfb6:	e7e8      	b.n	800cf8a <HAL_SPI_Receive+0x134>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cfb8:	2320      	movs	r3, #32
 800cfba:	6623      	str	r3, [r4, #96]	; 0x60
 800cfbc:	e7d8      	b.n	800cf70 <HAL_SPI_Receive+0x11a>
    errorcode = HAL_BUSY;
 800cfbe:	2002      	movs	r0, #2
 800cfc0:	e7e4      	b.n	800cf8c <HAL_SPI_Receive+0x136>
  __HAL_LOCK(hspi);
 800cfc2:	2002      	movs	r0, #2
 800cfc4:	e75b      	b.n	800ce7e <HAL_SPI_Receive+0x28>

0800cfc6 <HAL_SPI_GetState>:
  return hspi->State;
 800cfc6:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 800cfca:	4770      	bx	lr

0800cfcc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cfcc:	6a03      	ldr	r3, [r0, #32]
 800cfce:	f023 0301 	bic.w	r3, r3, #1
 800cfd2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfd4:	6a03      	ldr	r3, [r0, #32]
{
 800cfd6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfd8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cfda:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cfdc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cfde:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cfe2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800cfe6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cfe8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800cfea:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800cfee:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cff0:	4d1b      	ldr	r5, [pc, #108]	; (800d060 <TIM_OC1_SetConfig+0x94>)
 800cff2:	42a8      	cmp	r0, r5
 800cff4:	d00f      	beq.n	800d016 <TIM_OC1_SetConfig+0x4a>
 800cff6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800cffa:	42a8      	cmp	r0, r5
 800cffc:	d00b      	beq.n	800d016 <TIM_OC1_SetConfig+0x4a>
 800cffe:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800d002:	42a8      	cmp	r0, r5
 800d004:	d007      	beq.n	800d016 <TIM_OC1_SetConfig+0x4a>
 800d006:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d00a:	42a8      	cmp	r0, r5
 800d00c:	d003      	beq.n	800d016 <TIM_OC1_SetConfig+0x4a>
 800d00e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d012:	42a8      	cmp	r0, r5
 800d014:	d11e      	bne.n	800d054 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d016:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800d018:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800d01c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d01e:	4d10      	ldr	r5, [pc, #64]	; (800d060 <TIM_OC1_SetConfig+0x94>)
 800d020:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800d022:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d026:	d00f      	beq.n	800d048 <TIM_OC1_SetConfig+0x7c>
 800d028:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800d02c:	42a8      	cmp	r0, r5
 800d02e:	d00b      	beq.n	800d048 <TIM_OC1_SetConfig+0x7c>
 800d030:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800d034:	42a8      	cmp	r0, r5
 800d036:	d007      	beq.n	800d048 <TIM_OC1_SetConfig+0x7c>
 800d038:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d03c:	42a8      	cmp	r0, r5
 800d03e:	d003      	beq.n	800d048 <TIM_OC1_SetConfig+0x7c>
 800d040:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d044:	42a8      	cmp	r0, r5
 800d046:	d105      	bne.n	800d054 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d048:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d04c:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 800d050:	4334      	orrs	r4, r6
 800d052:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d054:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d056:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d058:	684a      	ldr	r2, [r1, #4]
 800d05a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d05c:	6203      	str	r3, [r0, #32]
}
 800d05e:	bd70      	pop	{r4, r5, r6, pc}
 800d060:	40012c00 	.word	0x40012c00

0800d064 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d064:	6a03      	ldr	r3, [r0, #32]
 800d066:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d06a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d06c:	6a03      	ldr	r3, [r0, #32]
{
 800d06e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d070:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d072:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d074:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d076:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d07a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800d07e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d080:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800d082:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d086:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d08a:	4d16      	ldr	r5, [pc, #88]	; (800d0e4 <TIM_OC3_SetConfig+0x80>)
 800d08c:	42a8      	cmp	r0, r5
 800d08e:	d003      	beq.n	800d098 <TIM_OC3_SetConfig+0x34>
 800d090:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800d094:	42a8      	cmp	r0, r5
 800d096:	d10d      	bne.n	800d0b4 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d098:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800d09a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d09e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0a2:	4d10      	ldr	r5, [pc, #64]	; (800d0e4 <TIM_OC3_SetConfig+0x80>)
 800d0a4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800d0a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0aa:	d00e      	beq.n	800d0ca <TIM_OC3_SetConfig+0x66>
 800d0ac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800d0b0:	42a8      	cmp	r0, r5
 800d0b2:	d00a      	beq.n	800d0ca <TIM_OC3_SetConfig+0x66>
 800d0b4:	4d0c      	ldr	r5, [pc, #48]	; (800d0e8 <TIM_OC3_SetConfig+0x84>)
 800d0b6:	42a8      	cmp	r0, r5
 800d0b8:	d007      	beq.n	800d0ca <TIM_OC3_SetConfig+0x66>
 800d0ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d0be:	42a8      	cmp	r0, r5
 800d0c0:	d003      	beq.n	800d0ca <TIM_OC3_SetConfig+0x66>
 800d0c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d0c6:	42a8      	cmp	r0, r5
 800d0c8:	d106      	bne.n	800d0d8 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d0ca:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d0ce:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 800d0d2:	4334      	orrs	r4, r6
 800d0d4:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0d8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d0da:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d0dc:	684a      	ldr	r2, [r1, #4]
 800d0de:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0e0:	6203      	str	r3, [r0, #32]
}
 800d0e2:	bd70      	pop	{r4, r5, r6, pc}
 800d0e4:	40012c00 	.word	0x40012c00
 800d0e8:	40014000 	.word	0x40014000

0800d0ec <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d0ec:	6a03      	ldr	r3, [r0, #32]
 800d0ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0f2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0f4:	6a03      	ldr	r3, [r0, #32]
{
 800d0f6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d0fa:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d0fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d0fe:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800d102:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d106:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d10a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800d10c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d110:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d114:	4d0e      	ldr	r5, [pc, #56]	; (800d150 <TIM_OC4_SetConfig+0x64>)
 800d116:	42a8      	cmp	r0, r5
 800d118:	d00f      	beq.n	800d13a <TIM_OC4_SetConfig+0x4e>
 800d11a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800d11e:	42a8      	cmp	r0, r5
 800d120:	d00b      	beq.n	800d13a <TIM_OC4_SetConfig+0x4e>
 800d122:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800d126:	42a8      	cmp	r0, r5
 800d128:	d007      	beq.n	800d13a <TIM_OC4_SetConfig+0x4e>
 800d12a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d12e:	42a8      	cmp	r0, r5
 800d130:	d003      	beq.n	800d13a <TIM_OC4_SetConfig+0x4e>
 800d132:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d136:	42a8      	cmp	r0, r5
 800d138:	d104      	bne.n	800d144 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d13a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d13c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d140:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d144:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d146:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d148:	684a      	ldr	r2, [r1, #4]
 800d14a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d14c:	6203      	str	r3, [r0, #32]
}
 800d14e:	bd30      	pop	{r4, r5, pc}
 800d150:	40012c00 	.word	0x40012c00

0800d154 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d154:	6a03      	ldr	r3, [r0, #32]
 800d156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d15a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d15c:	6a03      	ldr	r3, [r0, #32]
{
 800d15e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d160:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d162:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d164:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d166:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d16a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800d16e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d170:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800d172:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d176:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d17a:	4d0f      	ldr	r5, [pc, #60]	; (800d1b8 <TIM_OC5_SetConfig+0x64>)
 800d17c:	42a8      	cmp	r0, r5
 800d17e:	d00f      	beq.n	800d1a0 <TIM_OC5_SetConfig+0x4c>
 800d180:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800d184:	42a8      	cmp	r0, r5
 800d186:	d00b      	beq.n	800d1a0 <TIM_OC5_SetConfig+0x4c>
 800d188:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800d18c:	42a8      	cmp	r0, r5
 800d18e:	d007      	beq.n	800d1a0 <TIM_OC5_SetConfig+0x4c>
 800d190:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d194:	42a8      	cmp	r0, r5
 800d196:	d003      	beq.n	800d1a0 <TIM_OC5_SetConfig+0x4c>
 800d198:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d19c:	42a8      	cmp	r0, r5
 800d19e:	d104      	bne.n	800d1aa <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d1a0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d1a2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d1a6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1aa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d1ac:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d1ae:	684a      	ldr	r2, [r1, #4]
 800d1b0:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1b2:	6203      	str	r3, [r0, #32]
}
 800d1b4:	bd30      	pop	{r4, r5, pc}
 800d1b6:	bf00      	nop
 800d1b8:	40012c00 	.word	0x40012c00

0800d1bc <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d1bc:	6a03      	ldr	r3, [r0, #32]
 800d1be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d1c2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1c4:	6a03      	ldr	r3, [r0, #32]
{
 800d1c6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1c8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d1ca:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1cc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d1ce:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800d1d2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d1da:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d1dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d1e0:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1e4:	4d0e      	ldr	r5, [pc, #56]	; (800d220 <TIM_OC6_SetConfig+0x64>)
 800d1e6:	42a8      	cmp	r0, r5
 800d1e8:	d00f      	beq.n	800d20a <TIM_OC6_SetConfig+0x4e>
 800d1ea:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800d1ee:	42a8      	cmp	r0, r5
 800d1f0:	d00b      	beq.n	800d20a <TIM_OC6_SetConfig+0x4e>
 800d1f2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800d1f6:	42a8      	cmp	r0, r5
 800d1f8:	d007      	beq.n	800d20a <TIM_OC6_SetConfig+0x4e>
 800d1fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d1fe:	42a8      	cmp	r0, r5
 800d200:	d003      	beq.n	800d20a <TIM_OC6_SetConfig+0x4e>
 800d202:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d206:	42a8      	cmp	r0, r5
 800d208:	d104      	bne.n	800d214 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d20a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d20c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d210:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d214:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d216:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d218:	684a      	ldr	r2, [r1, #4]
 800d21a:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d21c:	6203      	str	r3, [r0, #32]
}
 800d21e:	bd30      	pop	{r4, r5, pc}
 800d220:	40012c00 	.word	0x40012c00

0800d224 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800d224:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d12f      	bne.n	800d28c <HAL_TIM_Base_Start_IT+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 800d22c:	2302      	movs	r3, #2
 800d22e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d232:	6803      	ldr	r3, [r0, #0]
 800d234:	68da      	ldr	r2, [r3, #12]
 800d236:	f042 0201 	orr.w	r2, r2, #1
 800d23a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d23c:	4a14      	ldr	r2, [pc, #80]	; (800d290 <HAL_TIM_Base_Start_IT+0x6c>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d016      	beq.n	800d270 <HAL_TIM_Base_Start_IT+0x4c>
 800d242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d246:	d013      	beq.n	800d270 <HAL_TIM_Base_Start_IT+0x4c>
 800d248:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d00f      	beq.n	800d270 <HAL_TIM_Base_Start_IT+0x4c>
 800d250:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d254:	4293      	cmp	r3, r2
 800d256:	d00b      	beq.n	800d270 <HAL_TIM_Base_Start_IT+0x4c>
 800d258:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d007      	beq.n	800d270 <HAL_TIM_Base_Start_IT+0x4c>
 800d260:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800d264:	4293      	cmp	r3, r2
 800d266:	d003      	beq.n	800d270 <HAL_TIM_Base_Start_IT+0x4c>
 800d268:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d107      	bne.n	800d280 <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d270:	6899      	ldr	r1, [r3, #8]
 800d272:	4a08      	ldr	r2, [pc, #32]	; (800d294 <HAL_TIM_Base_Start_IT+0x70>)
 800d274:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d276:	2a06      	cmp	r2, #6
 800d278:	d006      	beq.n	800d288 <HAL_TIM_Base_Start_IT+0x64>
 800d27a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800d27e:	d003      	beq.n	800d288 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	f042 0201 	orr.w	r2, r2, #1
 800d286:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800d288:	2000      	movs	r0, #0
}
 800d28a:	4770      	bx	lr
    return HAL_ERROR;
 800d28c:	2001      	movs	r0, #1
 800d28e:	4770      	bx	lr
 800d290:	40012c00 	.word	0x40012c00
 800d294:	00010007 	.word	0x00010007

0800d298 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d298:	6803      	ldr	r3, [r0, #0]
 800d29a:	68da      	ldr	r2, [r3, #12]
 800d29c:	f022 0201 	bic.w	r2, r2, #1
 800d2a0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 800d2a2:	6a19      	ldr	r1, [r3, #32]
 800d2a4:	f241 1211 	movw	r2, #4369	; 0x1111
 800d2a8:	4211      	tst	r1, r2
 800d2aa:	d108      	bne.n	800d2be <HAL_TIM_Base_Stop_IT+0x26>
 800d2ac:	6a19      	ldr	r1, [r3, #32]
 800d2ae:	f240 4244 	movw	r2, #1092	; 0x444
 800d2b2:	4211      	tst	r1, r2
 800d2b4:	bf02      	ittt	eq
 800d2b6:	681a      	ldreq	r2, [r3, #0]
 800d2b8:	f022 0201 	biceq.w	r2, r2, #1
 800d2bc:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800d2c4:	2000      	movs	r0, #0
 800d2c6:	4770      	bx	lr

0800d2c8 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 800d2c8:	2908      	cmp	r1, #8
 800d2ca:	d010      	beq.n	800d2ee <HAL_TIM_ReadCapturedValue+0x26>
 800d2cc:	d804      	bhi.n	800d2d8 <HAL_TIM_ReadCapturedValue+0x10>
 800d2ce:	b141      	cbz	r1, 800d2e2 <HAL_TIM_ReadCapturedValue+0x1a>
 800d2d0:	2904      	cmp	r1, #4
 800d2d2:	d009      	beq.n	800d2e8 <HAL_TIM_ReadCapturedValue+0x20>
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	4770      	bx	lr
 800d2d8:	290c      	cmp	r1, #12
 800d2da:	d1fb      	bne.n	800d2d4 <HAL_TIM_ReadCapturedValue+0xc>
      tmpreg =   htim->Instance->CCR4;
 800d2dc:	6803      	ldr	r3, [r0, #0]
 800d2de:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800d2e0:	4770      	bx	lr
      tmpreg =  htim->Instance->CCR1;
 800d2e2:	6803      	ldr	r3, [r0, #0]
 800d2e4:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 800d2e6:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 800d2e8:	6803      	ldr	r3, [r0, #0]
 800d2ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 800d2ec:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 800d2ee:	6803      	ldr	r3, [r0, #0]
 800d2f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 800d2f2:	4770      	bx	lr

0800d2f4 <HAL_TIM_PWM_PulseFinishedCallback>:
 800d2f4:	4770      	bx	lr

0800d2f6 <HAL_TIM_TriggerCallback>:
 800d2f6:	4770      	bx	lr

0800d2f8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d2f8:	6803      	ldr	r3, [r0, #0]
 800d2fa:	691a      	ldr	r2, [r3, #16]
 800d2fc:	0791      	lsls	r1, r2, #30
{
 800d2fe:	b510      	push	{r4, lr}
 800d300:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d302:	d50f      	bpl.n	800d324 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d304:	68da      	ldr	r2, [r3, #12]
 800d306:	0792      	lsls	r2, r2, #30
 800d308:	d50c      	bpl.n	800d324 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d30a:	f06f 0202 	mvn.w	r2, #2
 800d30e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d310:	2201      	movs	r2, #1
 800d312:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d314:	699b      	ldr	r3, [r3, #24]
 800d316:	0799      	lsls	r1, r3, #30
 800d318:	f000 8085 	beq.w	800d426 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800d31c:	f00b fc28 	bl	8018b70 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d320:	2300      	movs	r3, #0
 800d322:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d324:	6823      	ldr	r3, [r4, #0]
 800d326:	691a      	ldr	r2, [r3, #16]
 800d328:	0752      	lsls	r2, r2, #29
 800d32a:	d510      	bpl.n	800d34e <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d32c:	68da      	ldr	r2, [r3, #12]
 800d32e:	0750      	lsls	r0, r2, #29
 800d330:	d50d      	bpl.n	800d34e <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d332:	f06f 0204 	mvn.w	r2, #4
 800d336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d338:	2202      	movs	r2, #2
 800d33a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d33c:	699b      	ldr	r3, [r3, #24]
 800d33e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800d342:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d344:	d075      	beq.n	800d432 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800d346:	f00b fc13 	bl	8018b70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d34a:	2300      	movs	r3, #0
 800d34c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d34e:	6823      	ldr	r3, [r4, #0]
 800d350:	691a      	ldr	r2, [r3, #16]
 800d352:	0711      	lsls	r1, r2, #28
 800d354:	d50f      	bpl.n	800d376 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d356:	68da      	ldr	r2, [r3, #12]
 800d358:	0712      	lsls	r2, r2, #28
 800d35a:	d50c      	bpl.n	800d376 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d35c:	f06f 0208 	mvn.w	r2, #8
 800d360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d362:	2204      	movs	r2, #4
 800d364:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d366:	69db      	ldr	r3, [r3, #28]
 800d368:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800d36a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d36c:	d067      	beq.n	800d43e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800d36e:	f00b fbff 	bl	8018b70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d372:	2300      	movs	r3, #0
 800d374:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d376:	6823      	ldr	r3, [r4, #0]
 800d378:	691a      	ldr	r2, [r3, #16]
 800d37a:	06d0      	lsls	r0, r2, #27
 800d37c:	d510      	bpl.n	800d3a0 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d37e:	68da      	ldr	r2, [r3, #12]
 800d380:	06d1      	lsls	r1, r2, #27
 800d382:	d50d      	bpl.n	800d3a0 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d384:	f06f 0210 	mvn.w	r2, #16
 800d388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d38a:	2208      	movs	r2, #8
 800d38c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d38e:	69db      	ldr	r3, [r3, #28]
 800d390:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800d394:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d396:	d058      	beq.n	800d44a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800d398:	f00b fbea 	bl	8018b70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d39c:	2300      	movs	r3, #0
 800d39e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d3a0:	6823      	ldr	r3, [r4, #0]
 800d3a2:	691a      	ldr	r2, [r3, #16]
 800d3a4:	07d2      	lsls	r2, r2, #31
 800d3a6:	d508      	bpl.n	800d3ba <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d3a8:	68da      	ldr	r2, [r3, #12]
 800d3aa:	07d0      	lsls	r0, r2, #31
 800d3ac:	d505      	bpl.n	800d3ba <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d3ae:	f06f 0201 	mvn.w	r2, #1
 800d3b2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	f00b fbcb 	bl	8018b50 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d3ba:	6823      	ldr	r3, [r4, #0]
 800d3bc:	691a      	ldr	r2, [r3, #16]
 800d3be:	0611      	lsls	r1, r2, #24
 800d3c0:	d508      	bpl.n	800d3d4 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d3c2:	68da      	ldr	r2, [r3, #12]
 800d3c4:	0612      	lsls	r2, r2, #24
 800d3c6:	d505      	bpl.n	800d3d4 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d3c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d3cc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f000 fc69 	bl	800dca6 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d3d4:	6823      	ldr	r3, [r4, #0]
 800d3d6:	691a      	ldr	r2, [r3, #16]
 800d3d8:	05d0      	lsls	r0, r2, #23
 800d3da:	d508      	bpl.n	800d3ee <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d3dc:	68da      	ldr	r2, [r3, #12]
 800d3de:	0611      	lsls	r1, r2, #24
 800d3e0:	d505      	bpl.n	800d3ee <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d3e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d3e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f000 fc5d 	bl	800dca8 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d3ee:	6823      	ldr	r3, [r4, #0]
 800d3f0:	691a      	ldr	r2, [r3, #16]
 800d3f2:	0652      	lsls	r2, r2, #25
 800d3f4:	d508      	bpl.n	800d408 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d3f6:	68da      	ldr	r2, [r3, #12]
 800d3f8:	0650      	lsls	r0, r2, #25
 800d3fa:	d505      	bpl.n	800d408 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d3fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d400:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800d402:	4620      	mov	r0, r4
 800d404:	f7ff ff77 	bl	800d2f6 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d408:	6823      	ldr	r3, [r4, #0]
 800d40a:	691a      	ldr	r2, [r3, #16]
 800d40c:	0691      	lsls	r1, r2, #26
 800d40e:	d522      	bpl.n	800d456 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d410:	68da      	ldr	r2, [r3, #12]
 800d412:	0692      	lsls	r2, r2, #26
 800d414:	d51f      	bpl.n	800d456 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d416:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800d41a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d41c:	611a      	str	r2, [r3, #16]
}
 800d41e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800d422:	f000 bc3f 	b.w	800dca4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d426:	f00b fb51 	bl	8018acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d42a:	4620      	mov	r0, r4
 800d42c:	f7ff ff62 	bl	800d2f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800d430:	e776      	b.n	800d320 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d432:	f00b fb4b 	bl	8018acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d436:	4620      	mov	r0, r4
 800d438:	f7ff ff5c 	bl	800d2f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800d43c:	e785      	b.n	800d34a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d43e:	f00b fb45 	bl	8018acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d442:	4620      	mov	r0, r4
 800d444:	f7ff ff56 	bl	800d2f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800d448:	e793      	b.n	800d372 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d44a:	f00b fb3f 	bl	8018acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d44e:	4620      	mov	r0, r4
 800d450:	f7ff ff50 	bl	800d2f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800d454:	e7a2      	b.n	800d39c <HAL_TIM_IRQHandler+0xa4>
}
 800d456:	bd10      	pop	{r4, pc}

0800d458 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d458:	4a30      	ldr	r2, [pc, #192]	; (800d51c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800d45a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d45c:	4290      	cmp	r0, r2
 800d45e:	d012      	beq.n	800d486 <TIM_Base_SetConfig+0x2e>
 800d460:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800d464:	d00f      	beq.n	800d486 <TIM_Base_SetConfig+0x2e>
 800d466:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800d46a:	4290      	cmp	r0, r2
 800d46c:	d00b      	beq.n	800d486 <TIM_Base_SetConfig+0x2e>
 800d46e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d472:	4290      	cmp	r0, r2
 800d474:	d007      	beq.n	800d486 <TIM_Base_SetConfig+0x2e>
 800d476:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d47a:	4290      	cmp	r0, r2
 800d47c:	d003      	beq.n	800d486 <TIM_Base_SetConfig+0x2e>
 800d47e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800d482:	4290      	cmp	r0, r2
 800d484:	d119      	bne.n	800d4ba <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800d486:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d48c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d48e:	4a23      	ldr	r2, [pc, #140]	; (800d51c <TIM_Base_SetConfig+0xc4>)
 800d490:	4290      	cmp	r0, r2
 800d492:	d01d      	beq.n	800d4d0 <TIM_Base_SetConfig+0x78>
 800d494:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800d498:	d01a      	beq.n	800d4d0 <TIM_Base_SetConfig+0x78>
 800d49a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800d49e:	4290      	cmp	r0, r2
 800d4a0:	d016      	beq.n	800d4d0 <TIM_Base_SetConfig+0x78>
 800d4a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d4a6:	4290      	cmp	r0, r2
 800d4a8:	d012      	beq.n	800d4d0 <TIM_Base_SetConfig+0x78>
 800d4aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d4ae:	4290      	cmp	r0, r2
 800d4b0:	d00e      	beq.n	800d4d0 <TIM_Base_SetConfig+0x78>
 800d4b2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800d4b6:	4290      	cmp	r0, r2
 800d4b8:	d00a      	beq.n	800d4d0 <TIM_Base_SetConfig+0x78>
 800d4ba:	4a19      	ldr	r2, [pc, #100]	; (800d520 <TIM_Base_SetConfig+0xc8>)
 800d4bc:	4290      	cmp	r0, r2
 800d4be:	d007      	beq.n	800d4d0 <TIM_Base_SetConfig+0x78>
 800d4c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d4c4:	4290      	cmp	r0, r2
 800d4c6:	d003      	beq.n	800d4d0 <TIM_Base_SetConfig+0x78>
 800d4c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d4cc:	4290      	cmp	r0, r2
 800d4ce:	d103      	bne.n	800d4d8 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d4d0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d4d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d4d6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d4d8:	694a      	ldr	r2, [r1, #20]
 800d4da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d4de:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800d4e0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d4e2:	688b      	ldr	r3, [r1, #8]
 800d4e4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d4e6:	680b      	ldr	r3, [r1, #0]
 800d4e8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d4ea:	4b0c      	ldr	r3, [pc, #48]	; (800d51c <TIM_Base_SetConfig+0xc4>)
 800d4ec:	4298      	cmp	r0, r3
 800d4ee:	d00f      	beq.n	800d510 <TIM_Base_SetConfig+0xb8>
 800d4f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4f4:	4298      	cmp	r0, r3
 800d4f6:	d00b      	beq.n	800d510 <TIM_Base_SetConfig+0xb8>
 800d4f8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800d4fc:	4298      	cmp	r0, r3
 800d4fe:	d007      	beq.n	800d510 <TIM_Base_SetConfig+0xb8>
 800d500:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d504:	4298      	cmp	r0, r3
 800d506:	d003      	beq.n	800d510 <TIM_Base_SetConfig+0xb8>
 800d508:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d50c:	4298      	cmp	r0, r3
 800d50e:	d101      	bne.n	800d514 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800d510:	690b      	ldr	r3, [r1, #16]
 800d512:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800d514:	2301      	movs	r3, #1
 800d516:	6143      	str	r3, [r0, #20]
}
 800d518:	4770      	bx	lr
 800d51a:	bf00      	nop
 800d51c:	40012c00 	.word	0x40012c00
 800d520:	40014000 	.word	0x40014000

0800d524 <HAL_TIM_Base_Init>:
{
 800d524:	b510      	push	{r4, lr}
  if (htim == NULL)
 800d526:	4604      	mov	r4, r0
 800d528:	b350      	cbz	r0, 800d580 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800d52a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d52e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d532:	b91b      	cbnz	r3, 800d53c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800d534:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800d538:	f00c f91a 	bl	8019770 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800d53c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d53e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d540:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d544:	1d21      	adds	r1, r4, #4
 800d546:	f7ff ff87 	bl	800d458 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d54a:	2301      	movs	r3, #1
 800d54c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800d550:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d552:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800d556:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800d55a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800d55e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800d562:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d56a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800d56e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d572:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800d576:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800d57a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d57e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800d580:	2001      	movs	r0, #1
 800d582:	e7fc      	b.n	800d57e <HAL_TIM_Base_Init+0x5a>

0800d584 <HAL_TIM_OC_Init>:
{
 800d584:	b510      	push	{r4, lr}
  if (htim == NULL)
 800d586:	4604      	mov	r4, r0
 800d588:	b350      	cbz	r0, 800d5e0 <HAL_TIM_OC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800d58a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d58e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d592:	b91b      	cbnz	r3, 800d59c <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800d594:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800d598:	f00c f922 	bl	80197e0 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800d59c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800d59e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d5a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800d5a4:	1d21      	adds	r1, r4, #4
 800d5a6:	f7ff ff57 	bl	800d458 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800d5b0:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800d5b6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800d5ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800d5be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800d5c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800d5ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d5d2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800d5d6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800d5da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d5de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800d5e0:	2001      	movs	r0, #1
 800d5e2:	e7fc      	b.n	800d5de <HAL_TIM_OC_Init+0x5a>

0800d5e4 <HAL_TIM_IC_Init>:
{
 800d5e4:	b510      	push	{r4, lr}
  if (htim == NULL)
 800d5e6:	4604      	mov	r4, r0
 800d5e8:	b350      	cbz	r0, 800d640 <HAL_TIM_IC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800d5ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d5ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d5f2:	b91b      	cbnz	r3, 800d5fc <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800d5f4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800d5f8:	f7fa f928 	bl	800784c <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800d5fc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5fe:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d600:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d604:	1d21      	adds	r1, r4, #4
 800d606:	f7ff ff27 	bl	800d458 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d60a:	2301      	movs	r3, #1
 800d60c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800d610:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d612:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800d616:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800d61a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800d61e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800d622:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d626:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d62a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800d62e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d632:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800d636:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800d63a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d63e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800d640:	2001      	movs	r0, #1
 800d642:	e7fc      	b.n	800d63e <HAL_TIM_IC_Init+0x5a>

0800d644 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d644:	6a03      	ldr	r3, [r0, #32]
 800d646:	f023 0310 	bic.w	r3, r3, #16
 800d64a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800d64c:	6a03      	ldr	r3, [r0, #32]
{
 800d64e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 800d650:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800d652:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d654:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d656:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800d65a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d65e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d662:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800d664:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d668:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d66c:	4d16      	ldr	r5, [pc, #88]	; (800d6c8 <TIM_OC2_SetConfig+0x84>)
 800d66e:	42a8      	cmp	r0, r5
 800d670:	d003      	beq.n	800d67a <TIM_OC2_SetConfig+0x36>
 800d672:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800d676:	42a8      	cmp	r0, r5
 800d678:	d10d      	bne.n	800d696 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d67a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800d67c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d680:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d684:	4d10      	ldr	r5, [pc, #64]	; (800d6c8 <TIM_OC2_SetConfig+0x84>)
 800d686:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800d688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d68c:	d00e      	beq.n	800d6ac <TIM_OC2_SetConfig+0x68>
 800d68e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800d692:	42a8      	cmp	r0, r5
 800d694:	d00a      	beq.n	800d6ac <TIM_OC2_SetConfig+0x68>
 800d696:	4d0d      	ldr	r5, [pc, #52]	; (800d6cc <TIM_OC2_SetConfig+0x88>)
 800d698:	42a8      	cmp	r0, r5
 800d69a:	d007      	beq.n	800d6ac <TIM_OC2_SetConfig+0x68>
 800d69c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d6a0:	42a8      	cmp	r0, r5
 800d6a2:	d003      	beq.n	800d6ac <TIM_OC2_SetConfig+0x68>
 800d6a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d6a8:	42a8      	cmp	r0, r5
 800d6aa:	d106      	bne.n	800d6ba <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d6ac:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d6b0:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 800d6b4:	4334      	orrs	r4, r6
 800d6b6:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800d6ba:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800d6bc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800d6be:	684a      	ldr	r2, [r1, #4]
 800d6c0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800d6c2:	6203      	str	r3, [r0, #32]
}
 800d6c4:	bd70      	pop	{r4, r5, r6, pc}
 800d6c6:	bf00      	nop
 800d6c8:	40012c00 	.word	0x40012c00
 800d6cc:	40014000 	.word	0x40014000

0800d6d0 <HAL_TIM_OC_ConfigChannel>:
{
 800d6d0:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800d6d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d6d6:	2b01      	cmp	r3, #1
{
 800d6d8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800d6da:	d02a      	beq.n	800d732 <HAL_TIM_OC_ConfigChannel+0x62>
 800d6dc:	2301      	movs	r3, #1
  switch (Channel)
 800d6de:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 800d6e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800d6e4:	d01d      	beq.n	800d722 <HAL_TIM_OC_ConfigChannel+0x52>
 800d6e6:	d808      	bhi.n	800d6fa <HAL_TIM_OC_ConfigChannel+0x2a>
 800d6e8:	2a04      	cmp	r2, #4
 800d6ea:	d012      	beq.n	800d712 <HAL_TIM_OC_ConfigChannel+0x42>
 800d6ec:	2a08      	cmp	r2, #8
 800d6ee:	d014      	beq.n	800d71a <HAL_TIM_OC_ConfigChannel+0x4a>
 800d6f0:	b15a      	cbz	r2, 800d70a <HAL_TIM_OC_ConfigChannel+0x3a>
  __HAL_UNLOCK(htim);
 800d6f2:	2000      	movs	r0, #0
 800d6f4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800d6f8:	bd10      	pop	{r4, pc}
  switch (Channel)
 800d6fa:	2a10      	cmp	r2, #16
 800d6fc:	d015      	beq.n	800d72a <HAL_TIM_OC_ConfigChannel+0x5a>
 800d6fe:	2a14      	cmp	r2, #20
 800d700:	d1f7      	bne.n	800d6f2 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d702:	6800      	ldr	r0, [r0, #0]
 800d704:	f7ff fd5a 	bl	800d1bc <TIM_OC6_SetConfig>
      break;
 800d708:	e7f3      	b.n	800d6f2 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d70a:	6800      	ldr	r0, [r0, #0]
 800d70c:	f7ff fc5e 	bl	800cfcc <TIM_OC1_SetConfig>
      break;
 800d710:	e7ef      	b.n	800d6f2 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d712:	6800      	ldr	r0, [r0, #0]
 800d714:	f7ff ff96 	bl	800d644 <TIM_OC2_SetConfig>
      break;
 800d718:	e7eb      	b.n	800d6f2 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d71a:	6800      	ldr	r0, [r0, #0]
 800d71c:	f7ff fca2 	bl	800d064 <TIM_OC3_SetConfig>
      break;
 800d720:	e7e7      	b.n	800d6f2 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d722:	6800      	ldr	r0, [r0, #0]
 800d724:	f7ff fce2 	bl	800d0ec <TIM_OC4_SetConfig>
      break;
 800d728:	e7e3      	b.n	800d6f2 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d72a:	6800      	ldr	r0, [r0, #0]
 800d72c:	f7ff fd12 	bl	800d154 <TIM_OC5_SetConfig>
      break;
 800d730:	e7df      	b.n	800d6f2 <HAL_TIM_OC_ConfigChannel+0x22>
  __HAL_LOCK(htim);
 800d732:	2002      	movs	r0, #2
 800d734:	e7e0      	b.n	800d6f8 <HAL_TIM_OC_ConfigChannel+0x28>
	...

0800d738 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d738:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d73a:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d73c:	4e18      	ldr	r6, [pc, #96]	; (800d7a0 <TIM_TI1_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d73e:	f024 0401 	bic.w	r4, r4, #1
 800d742:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d744:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 800d746:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800d748:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d74a:	d025      	beq.n	800d798 <TIM_TI1_SetConfig+0x60>
 800d74c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800d750:	d022      	beq.n	800d798 <TIM_TI1_SetConfig+0x60>
 800d752:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800d756:	42b0      	cmp	r0, r6
 800d758:	d01e      	beq.n	800d798 <TIM_TI1_SetConfig+0x60>
 800d75a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d75e:	42b0      	cmp	r0, r6
 800d760:	d01a      	beq.n	800d798 <TIM_TI1_SetConfig+0x60>
 800d762:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d766:	42b0      	cmp	r0, r6
 800d768:	d016      	beq.n	800d798 <TIM_TI1_SetConfig+0x60>
 800d76a:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 800d76e:	42b0      	cmp	r0, r6
 800d770:	d012      	beq.n	800d798 <TIM_TI1_SetConfig+0x60>
 800d772:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800d776:	42b0      	cmp	r0, r6
 800d778:	d00e      	beq.n	800d798 <TIM_TI1_SetConfig+0x60>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d77a:	f044 0201 	orr.w	r2, r4, #1
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d77e:	011b      	lsls	r3, r3, #4
 800d780:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d782:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d786:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d788:	f001 010a 	and.w	r1, r1, #10
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d78c:	f025 030a 	bic.w	r3, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d790:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d792:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800d794:	6201      	str	r1, [r0, #32]
}
 800d796:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d798:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800d79c:	4322      	orrs	r2, r4
 800d79e:	e7ee      	b.n	800d77e <TIM_TI1_SetConfig+0x46>
 800d7a0:	40012c00 	.word	0x40012c00

0800d7a4 <HAL_TIM_IC_ConfigChannel>:
{
 800d7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800d7a6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d7aa:	2b01      	cmp	r3, #1
{
 800d7ac:	4604      	mov	r4, r0
 800d7ae:	460e      	mov	r6, r1
 800d7b0:	4615      	mov	r5, r2
  __HAL_LOCK(htim);
 800d7b2:	d07a      	beq.n	800d8aa <HAL_TIM_IC_ConfigChannel+0x106>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    TIM_TI1_SetConfig(htim->Instance,
 800d7ba:	e9d1 1200 	ldrd	r1, r2, [r1]
 800d7be:	6800      	ldr	r0, [r0, #0]
 800d7c0:	68f3      	ldr	r3, [r6, #12]
  if (Channel == TIM_CHANNEL_1)
 800d7c2:	b975      	cbnz	r5, 800d7e2 <HAL_TIM_IC_ConfigChannel+0x3e>
    TIM_TI1_SetConfig(htim->Instance,
 800d7c4:	f7ff ffb8 	bl	800d738 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d7c8:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d7ca:	68b1      	ldr	r1, [r6, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d7cc:	699a      	ldr	r2, [r3, #24]
 800d7ce:	f022 020c 	bic.w	r2, r2, #12
 800d7d2:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d7d4:	699a      	ldr	r2, [r3, #24]
 800d7d6:	430a      	orrs	r2, r1
 800d7d8:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800d7da:	2000      	movs	r0, #0
 800d7dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800d7e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 800d7e2:	2d04      	cmp	r5, #4
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d7e4:	68b6      	ldr	r6, [r6, #8]
  else if (Channel == TIM_CHANNEL_2)
 800d7e6:	d122      	bne.n	800d82e <HAL_TIM_IC_ConfigChannel+0x8a>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d7e8:	6a05      	ldr	r5, [r0, #32]
 800d7ea:	f025 0510 	bic.w	r5, r5, #16
 800d7ee:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7f0:	6987      	ldr	r7, [r0, #24]
  tmpccer = TIMx->CCER;
 800d7f2:	f8d0 e020 	ldr.w	lr, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d7f6:	f427 7c40 	bic.w	ip, r7, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d7fa:	031d      	lsls	r5, r3, #12
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d7fc:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d800:	0109      	lsls	r1, r1, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d802:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d806:	b2ad      	uxth	r5, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d808:	f02e 0ea0 	bic.w	lr, lr, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d80c:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d810:	ea45 050c 	orr.w	r5, r5, ip
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d814:	ea41 010e 	orr.w	r1, r1, lr

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d818:	6185      	str	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 800d81a:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d81c:	6983      	ldr	r3, [r0, #24]
 800d81e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d822:	6183      	str	r3, [r0, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d824:	6983      	ldr	r3, [r0, #24]
 800d826:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
 800d82a:	6186      	str	r6, [r0, #24]
 800d82c:	e7d5      	b.n	800d7da <HAL_TIM_IC_ConfigChannel+0x36>
  else if (Channel == TIM_CHANNEL_3)
 800d82e:	2d08      	cmp	r5, #8
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d830:	6a05      	ldr	r5, [r0, #32]
  else if (Channel == TIM_CHANNEL_3)
 800d832:	d11c      	bne.n	800d86e <HAL_TIM_IC_ConfigChannel+0xca>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d834:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800d838:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d83a:	69c7      	ldr	r7, [r0, #28]
  tmpccer = TIMx->CCER;
 800d83c:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d83e:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 800d842:	4317      	orrs	r7, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d844:	011b      	lsls	r3, r3, #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d846:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d848:	b2db      	uxtb	r3, r3
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d84a:	f027 07f0 	bic.w	r7, r7, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d84e:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d852:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d856:	431f      	orrs	r7, r3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d858:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d85a:	61c7      	str	r7, [r0, #28]
  TIMx->CCER = tmpccer;
 800d85c:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d85e:	69c3      	ldr	r3, [r0, #28]
 800d860:	f023 030c 	bic.w	r3, r3, #12
 800d864:	61c3      	str	r3, [r0, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d866:	69c3      	ldr	r3, [r0, #28]
 800d868:	431e      	orrs	r6, r3
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d86a:	61c6      	str	r6, [r0, #28]
 800d86c:	e7b5      	b.n	800d7da <HAL_TIM_IC_ConfigChannel+0x36>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d86e:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800d872:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d874:	69c5      	ldr	r5, [r0, #28]
  tmpccer = TIMx->CCER;
 800d876:	6a07      	ldr	r7, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d878:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d87c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d880:	031b      	lsls	r3, r3, #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d882:	0309      	lsls	r1, r1, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d884:	f425 4570 	bic.w	r5, r5, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d888:	b29b      	uxth	r3, r3
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d88a:	f427 4720 	bic.w	r7, r7, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d88e:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d892:	432b      	orrs	r3, r5
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d894:	4339      	orrs	r1, r7

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d896:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 800d898:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d89a:	69c3      	ldr	r3, [r0, #28]
 800d89c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d8a0:	61c3      	str	r3, [r0, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d8a2:	69c3      	ldr	r3, [r0, #28]
 800d8a4:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
 800d8a8:	e7df      	b.n	800d86a <HAL_TIM_IC_ConfigChannel+0xc6>
  __HAL_LOCK(htim);
 800d8aa:	2002      	movs	r0, #2
 800d8ac:	e798      	b.n	800d7e0 <HAL_TIM_IC_ConfigChannel+0x3c>

0800d8ae <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d8ae:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d8b0:	f001 011f 	and.w	r1, r1, #31
{
 800d8b4:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d8b6:	2401      	movs	r4, #1
 800d8b8:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800d8ba:	ea23 0304 	bic.w	r3, r3, r4
 800d8be:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d8c0:	6a03      	ldr	r3, [r0, #32]
 800d8c2:	408a      	lsls	r2, r1
 800d8c4:	431a      	orrs	r2, r3
 800d8c6:	6202      	str	r2, [r0, #32]
}
 800d8c8:	bd10      	pop	{r4, pc}
	...

0800d8cc <HAL_TIM_OC_Start_IT>:
{
 800d8cc:	b510      	push	{r4, lr}
 800d8ce:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d8d0:	b929      	cbnz	r1, 800d8de <HAL_TIM_OC_Start_IT+0x12>
 800d8d2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800d8d6:	2b01      	cmp	r3, #1
 800d8d8:	d02f      	beq.n	800d93a <HAL_TIM_OC_Start_IT+0x6e>
    return HAL_ERROR;
 800d8da:	2001      	movs	r0, #1
 800d8dc:	e056      	b.n	800d98c <HAL_TIM_OC_Start_IT+0xc0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d8de:	2904      	cmp	r1, #4
 800d8e0:	d10b      	bne.n	800d8fa <HAL_TIM_OC_Start_IT+0x2e>
 800d8e2:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d1f7      	bne.n	800d8da <HAL_TIM_OC_Start_IT+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d8ea:	2302      	movs	r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d8ec:	6802      	ldr	r2, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d8ee:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d8f2:	68d3      	ldr	r3, [r2, #12]
 800d8f4:	f043 0304 	orr.w	r3, r3, #4
 800d8f8:	e026      	b.n	800d948 <HAL_TIM_OC_Start_IT+0x7c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d8fa:	2908      	cmp	r1, #8
 800d8fc:	d111      	bne.n	800d922 <HAL_TIM_OC_Start_IT+0x56>
 800d8fe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d902:	3b01      	subs	r3, #1
 800d904:	bf18      	it	ne
 800d906:	2301      	movne	r3, #1
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d1e6      	bne.n	800d8da <HAL_TIM_OC_Start_IT+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d90c:	2908      	cmp	r1, #8
 800d90e:	f04f 0302 	mov.w	r3, #2
 800d912:	d13c      	bne.n	800d98e <HAL_TIM_OC_Start_IT+0xc2>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d914:	6822      	ldr	r2, [r4, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d916:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d91a:	68d3      	ldr	r3, [r2, #12]
 800d91c:	f043 0308 	orr.w	r3, r3, #8
 800d920:	e012      	b.n	800d948 <HAL_TIM_OC_Start_IT+0x7c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d922:	290c      	cmp	r1, #12
 800d924:	d102      	bne.n	800d92c <HAL_TIM_OC_Start_IT+0x60>
 800d926:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800d92a:	e7ea      	b.n	800d902 <HAL_TIM_OC_Start_IT+0x36>
 800d92c:	2910      	cmp	r1, #16
 800d92e:	bf0c      	ite	eq
 800d930:	f890 3042 	ldrbeq.w	r3, [r0, #66]	; 0x42
 800d934:	f890 3043 	ldrbne.w	r3, [r0, #67]	; 0x43
 800d938:	e7e3      	b.n	800d902 <HAL_TIM_OC_Start_IT+0x36>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d93a:	2302      	movs	r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d93c:	6802      	ldr	r2, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d93e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d942:	68d3      	ldr	r3, [r2, #12]
 800d944:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d948:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d94a:	2201      	movs	r2, #1
 800d94c:	6820      	ldr	r0, [r4, #0]
 800d94e:	f7ff ffae 	bl	800d8ae <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d952:	6823      	ldr	r3, [r4, #0]
 800d954:	4a28      	ldr	r2, [pc, #160]	; (800d9f8 <HAL_TIM_OC_Start_IT+0x12c>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d029      	beq.n	800d9ae <HAL_TIM_OC_Start_IT+0xe2>
 800d95a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d95e:	4293      	cmp	r3, r2
 800d960:	d025      	beq.n	800d9ae <HAL_TIM_OC_Start_IT+0xe2>
 800d962:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d966:	4293      	cmp	r3, r2
 800d968:	d021      	beq.n	800d9ae <HAL_TIM_OC_Start_IT+0xe2>
 800d96a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d96e:	4293      	cmp	r3, r2
 800d970:	d01d      	beq.n	800d9ae <HAL_TIM_OC_Start_IT+0xe2>
 800d972:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d976:	4293      	cmp	r3, r2
 800d978:	d019      	beq.n	800d9ae <HAL_TIM_OC_Start_IT+0xe2>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d97a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d97e:	d11e      	bne.n	800d9be <HAL_TIM_OC_Start_IT+0xf2>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d980:	6899      	ldr	r1, [r3, #8]
 800d982:	4a1e      	ldr	r2, [pc, #120]	; (800d9fc <HAL_TIM_OC_Start_IT+0x130>)
 800d984:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d986:	2a06      	cmp	r2, #6
 800d988:	d131      	bne.n	800d9ee <HAL_TIM_OC_Start_IT+0x122>
  return HAL_OK;
 800d98a:	2000      	movs	r0, #0
}
 800d98c:	bd10      	pop	{r4, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d98e:	290c      	cmp	r1, #12
 800d990:	d106      	bne.n	800d9a0 <HAL_TIM_OC_Start_IT+0xd4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d992:	6822      	ldr	r2, [r4, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d994:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d998:	68d3      	ldr	r3, [r2, #12]
 800d99a:	f043 0310 	orr.w	r3, r3, #16
 800d99e:	e7d3      	b.n	800d948 <HAL_TIM_OC_Start_IT+0x7c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9a0:	2910      	cmp	r1, #16
 800d9a2:	bf0c      	ite	eq
 800d9a4:	f884 3042 	strbeq.w	r3, [r4, #66]	; 0x42
 800d9a8:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
  switch (Channel)
 800d9ac:	e7cd      	b.n	800d94a <HAL_TIM_OC_Start_IT+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 800d9ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d9b4:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9b6:	4a10      	ldr	r2, [pc, #64]	; (800d9f8 <HAL_TIM_OC_Start_IT+0x12c>)
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d1de      	bne.n	800d97a <HAL_TIM_OC_Start_IT+0xae>
 800d9bc:	e7e0      	b.n	800d980 <HAL_TIM_OC_Start_IT+0xb4>
 800d9be:	4a10      	ldr	r2, [pc, #64]	; (800da00 <HAL_TIM_OC_Start_IT+0x134>)
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	d0dd      	beq.n	800d980 <HAL_TIM_OC_Start_IT+0xb4>
 800d9c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d0d9      	beq.n	800d980 <HAL_TIM_OC_Start_IT+0xb4>
 800d9cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d0d5      	beq.n	800d980 <HAL_TIM_OC_Start_IT+0xb4>
 800d9d4:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d0d1      	beq.n	800d980 <HAL_TIM_OC_Start_IT+0xb4>
 800d9dc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d0cd      	beq.n	800d980 <HAL_TIM_OC_Start_IT+0xb4>
    __HAL_TIM_ENABLE(htim);
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	f042 0201 	orr.w	r2, r2, #1
 800d9ea:	601a      	str	r2, [r3, #0]
 800d9ec:	e7cd      	b.n	800d98a <HAL_TIM_OC_Start_IT+0xbe>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9ee:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800d9f2:	d1f7      	bne.n	800d9e4 <HAL_TIM_OC_Start_IT+0x118>
 800d9f4:	e7c9      	b.n	800d98a <HAL_TIM_OC_Start_IT+0xbe>
 800d9f6:	bf00      	nop
 800d9f8:	40012c00 	.word	0x40012c00
 800d9fc:	00010007 	.word	0x00010007
 800da00:	40000400 	.word	0x40000400

0800da04 <HAL_TIM_OC_Stop_IT>:
  switch (Channel)
 800da04:	2908      	cmp	r1, #8
{
 800da06:	b538      	push	{r3, r4, r5, lr}
 800da08:	4605      	mov	r5, r0
 800da0a:	460c      	mov	r4, r1
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800da0c:	6800      	ldr	r0, [r0, #0]
  switch (Channel)
 800da0e:	d04d      	beq.n	800daac <HAL_TIM_OC_Stop_IT+0xa8>
 800da10:	d83d      	bhi.n	800da8e <HAL_TIM_OC_Stop_IT+0x8a>
 800da12:	2900      	cmp	r1, #0
 800da14:	d041      	beq.n	800da9a <HAL_TIM_OC_Stop_IT+0x96>
 800da16:	2904      	cmp	r1, #4
 800da18:	d044      	beq.n	800daa4 <HAL_TIM_OC_Stop_IT+0xa0>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800da1a:	2200      	movs	r2, #0
 800da1c:	4621      	mov	r1, r4
 800da1e:	f7ff ff46 	bl	800d8ae <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800da22:	682b      	ldr	r3, [r5, #0]
 800da24:	4a2e      	ldr	r2, [pc, #184]	; (800dae0 <HAL_TIM_OC_Stop_IT+0xdc>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d00f      	beq.n	800da4a <HAL_TIM_OC_Stop_IT+0x46>
 800da2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da2e:	4293      	cmp	r3, r2
 800da30:	d00b      	beq.n	800da4a <HAL_TIM_OC_Stop_IT+0x46>
 800da32:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800da36:	4293      	cmp	r3, r2
 800da38:	d007      	beq.n	800da4a <HAL_TIM_OC_Stop_IT+0x46>
 800da3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800da3e:	4293      	cmp	r3, r2
 800da40:	d003      	beq.n	800da4a <HAL_TIM_OC_Stop_IT+0x46>
 800da42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800da46:	4293      	cmp	r3, r2
 800da48:	d10d      	bne.n	800da66 <HAL_TIM_OC_Stop_IT+0x62>
    __HAL_TIM_MOE_DISABLE(htim);
 800da4a:	6a19      	ldr	r1, [r3, #32]
 800da4c:	f241 1211 	movw	r2, #4369	; 0x1111
 800da50:	4211      	tst	r1, r2
 800da52:	d108      	bne.n	800da66 <HAL_TIM_OC_Stop_IT+0x62>
 800da54:	6a19      	ldr	r1, [r3, #32]
 800da56:	f240 4244 	movw	r2, #1092	; 0x444
 800da5a:	4211      	tst	r1, r2
 800da5c:	bf02      	ittt	eq
 800da5e:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800da60:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800da64:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800da66:	6a19      	ldr	r1, [r3, #32]
 800da68:	f241 1211 	movw	r2, #4369	; 0x1111
 800da6c:	4211      	tst	r1, r2
 800da6e:	d108      	bne.n	800da82 <HAL_TIM_OC_Stop_IT+0x7e>
 800da70:	6a19      	ldr	r1, [r3, #32]
 800da72:	f240 4244 	movw	r2, #1092	; 0x444
 800da76:	4211      	tst	r1, r2
 800da78:	bf02      	ittt	eq
 800da7a:	681a      	ldreq	r2, [r3, #0]
 800da7c:	f022 0201 	biceq.w	r2, r2, #1
 800da80:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800da82:	2301      	movs	r3, #1
 800da84:	b9b4      	cbnz	r4, 800dab4 <HAL_TIM_OC_Stop_IT+0xb0>
 800da86:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
}
 800da8a:	2000      	movs	r0, #0
 800da8c:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800da8e:	290c      	cmp	r1, #12
 800da90:	d1c3      	bne.n	800da1a <HAL_TIM_OC_Stop_IT+0x16>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800da92:	68c3      	ldr	r3, [r0, #12]
 800da94:	f023 0310 	bic.w	r3, r3, #16
 800da98:	e002      	b.n	800daa0 <HAL_TIM_OC_Stop_IT+0x9c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800da9a:	68c3      	ldr	r3, [r0, #12]
 800da9c:	f023 0302 	bic.w	r3, r3, #2
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800daa0:	60c3      	str	r3, [r0, #12]
      break;
 800daa2:	e7ba      	b.n	800da1a <HAL_TIM_OC_Stop_IT+0x16>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800daa4:	68c3      	ldr	r3, [r0, #12]
 800daa6:	f023 0304 	bic.w	r3, r3, #4
 800daaa:	e7f9      	b.n	800daa0 <HAL_TIM_OC_Stop_IT+0x9c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800daac:	68c3      	ldr	r3, [r0, #12]
 800daae:	f023 0308 	bic.w	r3, r3, #8
 800dab2:	e7f5      	b.n	800daa0 <HAL_TIM_OC_Stop_IT+0x9c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800dab4:	2c04      	cmp	r4, #4
 800dab6:	d102      	bne.n	800dabe <HAL_TIM_OC_Stop_IT+0xba>
 800dab8:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 800dabc:	e7e5      	b.n	800da8a <HAL_TIM_OC_Stop_IT+0x86>
 800dabe:	2c08      	cmp	r4, #8
 800dac0:	d102      	bne.n	800dac8 <HAL_TIM_OC_Stop_IT+0xc4>
 800dac2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800dac6:	e7e0      	b.n	800da8a <HAL_TIM_OC_Stop_IT+0x86>
 800dac8:	2c0c      	cmp	r4, #12
 800daca:	d102      	bne.n	800dad2 <HAL_TIM_OC_Stop_IT+0xce>
 800dacc:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800dad0:	e7db      	b.n	800da8a <HAL_TIM_OC_Stop_IT+0x86>
 800dad2:	2c10      	cmp	r4, #16
 800dad4:	bf0c      	ite	eq
 800dad6:	f885 3042 	strbeq.w	r3, [r5, #66]	; 0x42
 800dada:	f885 3043 	strbne.w	r3, [r5, #67]	; 0x43
 800dade:	e7d4      	b.n	800da8a <HAL_TIM_OC_Stop_IT+0x86>
 800dae0:	40012c00 	.word	0x40012c00

0800dae4 <HAL_TIM_IC_Start_IT>:
{
 800dae4:	b510      	push	{r4, lr}
 800dae6:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800dae8:	2900      	cmp	r1, #0
 800daea:	d144      	bne.n	800db76 <HAL_TIM_IC_Start_IT+0x92>
 800daec:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800daf0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800daf4:	b2c0      	uxtb	r0, r0
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800daf6:	2801      	cmp	r0, #1
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800daf8:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800dafa:	f040 8086 	bne.w	800dc0a <HAL_TIM_IC_Start_IT+0x126>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800dafe:	2b01      	cmp	r3, #1
 800db00:	f040 8084 	bne.w	800dc0c <HAL_TIM_IC_Start_IT+0x128>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800db04:	2302      	movs	r3, #2
 800db06:	2900      	cmp	r1, #0
 800db08:	d154      	bne.n	800dbb4 <HAL_TIM_IC_Start_IT+0xd0>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800db0a:	6822      	ldr	r2, [r4, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800db0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800db10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800db14:	68d3      	ldr	r3, [r2, #12]
 800db16:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800db1a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800db1c:	2201      	movs	r2, #1
 800db1e:	6820      	ldr	r0, [r4, #0]
 800db20:	f7ff fec5 	bl	800d8ae <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db24:	6823      	ldr	r3, [r4, #0]
 800db26:	4a3a      	ldr	r2, [pc, #232]	; (800dc10 <HAL_TIM_IC_Start_IT+0x12c>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d016      	beq.n	800db5a <HAL_TIM_IC_Start_IT+0x76>
 800db2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db30:	d013      	beq.n	800db5a <HAL_TIM_IC_Start_IT+0x76>
 800db32:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800db36:	4293      	cmp	r3, r2
 800db38:	d00f      	beq.n	800db5a <HAL_TIM_IC_Start_IT+0x76>
 800db3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db3e:	4293      	cmp	r3, r2
 800db40:	d00b      	beq.n	800db5a <HAL_TIM_IC_Start_IT+0x76>
 800db42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db46:	4293      	cmp	r3, r2
 800db48:	d007      	beq.n	800db5a <HAL_TIM_IC_Start_IT+0x76>
 800db4a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800db4e:	4293      	cmp	r3, r2
 800db50:	d003      	beq.n	800db5a <HAL_TIM_IC_Start_IT+0x76>
 800db52:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800db56:	4293      	cmp	r3, r2
 800db58:	d107      	bne.n	800db6a <HAL_TIM_IC_Start_IT+0x86>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db5a:	6899      	ldr	r1, [r3, #8]
 800db5c:	4a2d      	ldr	r2, [pc, #180]	; (800dc14 <HAL_TIM_IC_Start_IT+0x130>)
 800db5e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db60:	2a06      	cmp	r2, #6
 800db62:	d006      	beq.n	800db72 <HAL_TIM_IC_Start_IT+0x8e>
 800db64:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800db68:	d003      	beq.n	800db72 <HAL_TIM_IC_Start_IT+0x8e>
    __HAL_TIM_ENABLE(htim);
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	f042 0201 	orr.w	r2, r2, #1
 800db70:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800db72:	2000      	movs	r0, #0
 800db74:	e04a      	b.n	800dc0c <HAL_TIM_IC_Start_IT+0x128>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800db76:	2904      	cmp	r1, #4
 800db78:	d105      	bne.n	800db86 <HAL_TIM_IC_Start_IT+0xa2>
 800db7a:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800db7e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800db82:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800db84:	e7b7      	b.n	800daf6 <HAL_TIM_IC_Start_IT+0x12>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800db86:	2908      	cmp	r1, #8
 800db88:	d105      	bne.n	800db96 <HAL_TIM_IC_Start_IT+0xb2>
 800db8a:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800db8e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800db92:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800db94:	e7af      	b.n	800daf6 <HAL_TIM_IC_Start_IT+0x12>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800db96:	290c      	cmp	r1, #12
 800db98:	d105      	bne.n	800dba6 <HAL_TIM_IC_Start_IT+0xc2>
 800db9a:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800db9e:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800dba2:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800dba4:	e7a7      	b.n	800daf6 <HAL_TIM_IC_Start_IT+0x12>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800dba6:	2910      	cmp	r1, #16
 800dba8:	bf0c      	ite	eq
 800dbaa:	f890 0042 	ldrbeq.w	r0, [r0, #66]	; 0x42
 800dbae:	f894 0043 	ldrbne.w	r0, [r4, #67]	; 0x43
 800dbb2:	e7f4      	b.n	800db9e <HAL_TIM_IC_Start_IT+0xba>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbb4:	2904      	cmp	r1, #4
 800dbb6:	d108      	bne.n	800dbca <HAL_TIM_IC_Start_IT+0xe6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800dbb8:	6822      	ldr	r2, [r4, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbba:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800dbc2:	68d3      	ldr	r3, [r2, #12]
 800dbc4:	f043 0304 	orr.w	r3, r3, #4
 800dbc8:	e7a7      	b.n	800db1a <HAL_TIM_IC_Start_IT+0x36>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbca:	2908      	cmp	r1, #8
 800dbcc:	d108      	bne.n	800dbe0 <HAL_TIM_IC_Start_IT+0xfc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800dbce:	6822      	ldr	r2, [r4, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbd0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbd4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800dbd8:	68d3      	ldr	r3, [r2, #12]
 800dbda:	f043 0308 	orr.w	r3, r3, #8
 800dbde:	e79c      	b.n	800db1a <HAL_TIM_IC_Start_IT+0x36>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbe0:	290c      	cmp	r1, #12
 800dbe2:	d10b      	bne.n	800dbfc <HAL_TIM_IC_Start_IT+0x118>
 800dbe4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbe8:	2302      	movs	r3, #2
  switch (Channel)
 800dbea:	290c      	cmp	r1, #12
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbec:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  switch (Channel)
 800dbf0:	d194      	bne.n	800db1c <HAL_TIM_IC_Start_IT+0x38>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800dbf2:	6822      	ldr	r2, [r4, #0]
 800dbf4:	68d3      	ldr	r3, [r2, #12]
 800dbf6:	f043 0310 	orr.w	r3, r3, #16
 800dbfa:	e78e      	b.n	800db1a <HAL_TIM_IC_Start_IT+0x36>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbfc:	2910      	cmp	r1, #16
 800dbfe:	bf0c      	ite	eq
 800dc00:	f884 3042 	strbeq.w	r3, [r4, #66]	; 0x42
 800dc04:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
 800dc08:	e7ee      	b.n	800dbe8 <HAL_TIM_IC_Start_IT+0x104>
    return HAL_ERROR;
 800dc0a:	2001      	movs	r0, #1
}
 800dc0c:	bd10      	pop	{r4, pc}
 800dc0e:	bf00      	nop
 800dc10:	40012c00 	.word	0x40012c00
 800dc14:	00010007 	.word	0x00010007

0800dc18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc18:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc1a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800dc1e:	2b01      	cmp	r3, #1
 800dc20:	f04f 0302 	mov.w	r3, #2
 800dc24:	d039      	beq.n	800dc9a <HAL_TIMEx_MasterConfigSynchronization+0x82>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dc2a:	4d1d      	ldr	r5, [pc, #116]	; (800dca0 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  tmpcr2 = htim->Instance->CR2;
 800dc2c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dc2e:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800dc30:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800dc32:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dc34:	d003      	beq.n	800dc3e <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800dc36:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800dc3a:	42ab      	cmp	r3, r5
 800dc3c:	d103      	bne.n	800dc46 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dc3e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dc40:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dc44:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc46:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc4c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dc4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc50:	4a13      	ldr	r2, [pc, #76]	; (800dca0 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d016      	beq.n	800dc84 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 800dc56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc5a:	d013      	beq.n	800dc84 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 800dc5c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d00f      	beq.n	800dc84 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 800dc64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d00b      	beq.n	800dc84 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 800dc6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d007      	beq.n	800dc84 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 800dc74:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d003      	beq.n	800dc84 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 800dc7c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d104      	bne.n	800dc8e <HAL_TIMEx_MasterConfigSynchronization+0x76>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dc84:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dc86:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dc8a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dc8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc94:	2300      	movs	r3, #0
 800dc96:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800dc9a:	4618      	mov	r0, r3

  return HAL_OK;
}
 800dc9c:	bd30      	pop	{r4, r5, pc}
 800dc9e:	bf00      	nop
 800dca0:	40012c00 	.word	0x40012c00

0800dca4 <HAL_TIMEx_CommutCallback>:
 800dca4:	4770      	bx	lr

0800dca6 <HAL_TIMEx_BreakCallback>:
 800dca6:	4770      	bx	lr

0800dca8 <HAL_TIMEx_Break2Callback>:
 800dca8:	4770      	bx	lr
	...

0800dcac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dcac:	b084      	sub	sp, #16
 800dcae:	b510      	push	{r4, lr}
 800dcb0:	4604      	mov	r4, r0
 800dcb2:	a803      	add	r0, sp, #12
 800dcb4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dcb8:	68e3      	ldr	r3, [r4, #12]
 800dcba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcbe:	60e3      	str	r3, [r4, #12]
 800dcc0:	4b10      	ldr	r3, [pc, #64]	; (800dd04 <USB_CoreInit+0x58>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	d017      	beq.n	800dcf6 <USB_CoreInit+0x4a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dcc6:	6922      	ldr	r2, [r4, #16]
 800dcc8:	2a00      	cmp	r2, #0
 800dcca:	dafa      	bge.n	800dcc2 <USB_CoreInit+0x16>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dccc:	6923      	ldr	r3, [r4, #16]
 800dcce:	f043 0301 	orr.w	r3, r3, #1
 800dcd2:	6123      	str	r3, [r4, #16]
 800dcd4:	4b0b      	ldr	r3, [pc, #44]	; (800dd04 <USB_CoreInit+0x58>)

  do
  {
    if (++count > 200000U)
 800dcd6:	3b01      	subs	r3, #1
 800dcd8:	d00d      	beq.n	800dcf6 <USB_CoreInit+0x4a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dcda:	6920      	ldr	r0, [r4, #16]
 800dcdc:	f010 0001 	ands.w	r0, r0, #1
 800dce0:	d1f9      	bne.n	800dcd6 <USB_CoreInit+0x2a>
  if (cfg.battery_charging_enable == 0U)
 800dce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dce4:	b94b      	cbnz	r3, 800dcfa <USB_CoreInit+0x4e>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dce6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dcec:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800dcee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcf2:	b004      	add	sp, #16
 800dcf4:	4770      	bx	lr
      return HAL_TIMEOUT;
 800dcf6:	2003      	movs	r0, #3
 800dcf8:	e7f3      	b.n	800dce2 <USB_CoreInit+0x36>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dcfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dcfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dd00:	e7f4      	b.n	800dcec <USB_CoreInit+0x40>
 800dd02:	bf00      	nop
 800dd04:	00030d41 	.word	0x00030d41

0800dd08 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800dd08:	2a02      	cmp	r2, #2
 800dd0a:	d14a      	bne.n	800dda2 <USB_SetTurnaroundTime+0x9a>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800dd0c:	4b27      	ldr	r3, [pc, #156]	; (800ddac <USB_SetTurnaroundTime+0xa4>)
 800dd0e:	4a28      	ldr	r2, [pc, #160]	; (800ddb0 <USB_SetTurnaroundTime+0xa8>)
 800dd10:	440b      	add	r3, r1
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d939      	bls.n	800dd8a <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800dd16:	4b27      	ldr	r3, [pc, #156]	; (800ddb4 <USB_SetTurnaroundTime+0xac>)
 800dd18:	4a27      	ldr	r2, [pc, #156]	; (800ddb8 <USB_SetTurnaroundTime+0xb0>)
 800dd1a:	440b      	add	r3, r1
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d936      	bls.n	800dd8e <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800dd20:	4a26      	ldr	r2, [pc, #152]	; (800ddbc <USB_SetTurnaroundTime+0xb4>)
 800dd22:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800dd26:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d931      	bls.n	800dd92 <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800dd2e:	4a24      	ldr	r2, [pc, #144]	; (800ddc0 <USB_SetTurnaroundTime+0xb8>)
 800dd30:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800dd34:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d32c      	bcc.n	800dd96 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800dd3c:	4b21      	ldr	r3, [pc, #132]	; (800ddc4 <USB_SetTurnaroundTime+0xbc>)
 800dd3e:	4a22      	ldr	r2, [pc, #136]	; (800ddc8 <USB_SetTurnaroundTime+0xc0>)
 800dd40:	440b      	add	r3, r1
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d929      	bls.n	800dd9a <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800dd46:	4b21      	ldr	r3, [pc, #132]	; (800ddcc <USB_SetTurnaroundTime+0xc4>)
 800dd48:	4a21      	ldr	r2, [pc, #132]	; (800ddd0 <USB_SetTurnaroundTime+0xc8>)
 800dd4a:	440b      	add	r3, r1
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d326      	bcc.n	800dd9e <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800dd50:	4b20      	ldr	r3, [pc, #128]	; (800ddd4 <USB_SetTurnaroundTime+0xcc>)
 800dd52:	4a21      	ldr	r2, [pc, #132]	; (800ddd8 <USB_SetTurnaroundTime+0xd0>)
 800dd54:	440b      	add	r3, r1
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d323      	bcc.n	800dda2 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800dd5a:	4a20      	ldr	r2, [pc, #128]	; (800dddc <USB_SetTurnaroundTime+0xd4>)
 800dd5c:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 800dd60:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d31e      	bcc.n	800dda6 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dd68:	4b1d      	ldr	r3, [pc, #116]	; (800dde0 <USB_SetTurnaroundTime+0xd8>)
      UsbTrd = 0x6U;
 800dd6a:	4a1e      	ldr	r2, [pc, #120]	; (800dde4 <USB_SetTurnaroundTime+0xdc>)
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dd6c:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	bf34      	ite	cc
 800dd72:	2307      	movcc	r3, #7
 800dd74:	2306      	movcs	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800dd76:	68c2      	ldr	r2, [r0, #12]
 800dd78:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800dd7c:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800dd7e:	68c2      	ldr	r2, [r0, #12]
 800dd80:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 800dd84:	60c3      	str	r3, [r0, #12]
}
 800dd86:	2000      	movs	r0, #0
 800dd88:	4770      	bx	lr
      UsbTrd = 0xFU;
 800dd8a:	230f      	movs	r3, #15
 800dd8c:	e7f3      	b.n	800dd76 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
 800dd8e:	230e      	movs	r3, #14
 800dd90:	e7f1      	b.n	800dd76 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
 800dd92:	230d      	movs	r3, #13
 800dd94:	e7ef      	b.n	800dd76 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
 800dd96:	230c      	movs	r3, #12
 800dd98:	e7ed      	b.n	800dd76 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
 800dd9a:	230b      	movs	r3, #11
 800dd9c:	e7eb      	b.n	800dd76 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
 800dd9e:	230a      	movs	r3, #10
 800dda0:	e7e9      	b.n	800dd76 <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800dda2:	2309      	movs	r3, #9
 800dda4:	e7e7      	b.n	800dd76 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
 800dda6:	2308      	movs	r3, #8
 800dda8:	e7e5      	b.n	800dd76 <USB_SetTurnaroundTime+0x6e>
 800ddaa:	bf00      	nop
 800ddac:	ff275340 	.word	0xff275340
 800ddb0:	000c34ff 	.word	0x000c34ff
 800ddb4:	ff1b1e40 	.word	0xff1b1e40
 800ddb8:	000f423f 	.word	0x000f423f
 800ddbc:	00124f7f 	.word	0x00124f7f
 800ddc0:	0013d620 	.word	0x0013d620
 800ddc4:	fee5b660 	.word	0xfee5b660
 800ddc8:	0016e35f 	.word	0x0016e35f
 800ddcc:	feced300 	.word	0xfeced300
 800ddd0:	001b7740 	.word	0x001b7740
 800ddd4:	feb35bc0 	.word	0xfeb35bc0
 800ddd8:	002191c0 	.word	0x002191c0
 800dddc:	00387520 	.word	0x00387520
 800dde0:	fe5954e0 	.word	0xfe5954e0
 800dde4:	00419ce0 	.word	0x00419ce0

0800dde8 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dde8:	6883      	ldr	r3, [r0, #8]
 800ddea:	f043 0301 	orr.w	r3, r3, #1
 800ddee:	6083      	str	r3, [r0, #8]
}
 800ddf0:	2000      	movs	r0, #0
 800ddf2:	4770      	bx	lr

0800ddf4 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ddf4:	6883      	ldr	r3, [r0, #8]
 800ddf6:	f023 0301 	bic.w	r3, r3, #1
 800ddfa:	6083      	str	r3, [r0, #8]
}
 800ddfc:	2000      	movs	r0, #0
 800ddfe:	4770      	bx	lr

0800de00 <USB_SetCurrentMode>:
{
 800de00:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800de02:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800de04:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800de06:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800de0a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800de0c:	d108      	bne.n	800de20 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800de0e:	68c3      	ldr	r3, [r0, #12]
 800de10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800de14:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800de16:	2032      	movs	r0, #50	; 0x32
 800de18:	f00a fee6 	bl	8018be8 <HAL_Delay>
  return HAL_OK;
 800de1c:	2000      	movs	r0, #0
}
 800de1e:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800de20:	b919      	cbnz	r1, 800de2a <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800de22:	68c3      	ldr	r3, [r0, #12]
 800de24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de28:	e7f4      	b.n	800de14 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800de2a:	2001      	movs	r0, #1
 800de2c:	e7f7      	b.n	800de1e <USB_SetCurrentMode+0x1e>
	...

0800de30 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800de30:	0189      	lsls	r1, r1, #6
 800de32:	f041 0120 	orr.w	r1, r1, #32
 800de36:	4a06      	ldr	r2, [pc, #24]	; (800de50 <USB_FlushTxFifo+0x20>)
 800de38:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800de3a:	3a01      	subs	r2, #1
 800de3c:	d005      	beq.n	800de4a <USB_FlushTxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800de3e:	6903      	ldr	r3, [r0, #16]
 800de40:	f013 0320 	ands.w	r3, r3, #32
 800de44:	d1f9      	bne.n	800de3a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800de46:	4618      	mov	r0, r3
 800de48:	4770      	bx	lr
      return HAL_TIMEOUT;
 800de4a:	2003      	movs	r0, #3
}
 800de4c:	4770      	bx	lr
 800de4e:	bf00      	nop
 800de50:	00030d41 	.word	0x00030d41

0800de54 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800de54:	2310      	movs	r3, #16
 800de56:	4a06      	ldr	r2, [pc, #24]	; (800de70 <USB_FlushRxFifo+0x1c>)
 800de58:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800de5a:	3a01      	subs	r2, #1
 800de5c:	d005      	beq.n	800de6a <USB_FlushRxFifo+0x16>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800de5e:	6903      	ldr	r3, [r0, #16]
 800de60:	f013 0310 	ands.w	r3, r3, #16
 800de64:	d1f9      	bne.n	800de5a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800de66:	4618      	mov	r0, r3
 800de68:	4770      	bx	lr
      return HAL_TIMEOUT;
 800de6a:	2003      	movs	r0, #3
}
 800de6c:	4770      	bx	lr
 800de6e:	bf00      	nop
 800de70:	00030d41 	.word	0x00030d41

0800de74 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800de74:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800de78:	4319      	orrs	r1, r3
 800de7a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800de7e:	2000      	movs	r0, #0
 800de80:	4770      	bx	lr
	...

0800de84 <USB_DevInit>:
{
 800de84:	b084      	sub	sp, #16
 800de86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de8a:	4604      	mov	r4, r0
 800de8c:	a809      	add	r0, sp, #36	; 0x24
 800de8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800de92:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 800de94:	2300      	movs	r3, #0
 800de96:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 800de98:	4619      	mov	r1, r3
 800de9a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800de9e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800dea2:	3301      	adds	r3, #1
 800dea4:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800dea6:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800dea8:	d1f7      	bne.n	800de9a <USB_DevInit+0x16>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800deaa:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 800deae:	2f00      	cmp	r7, #0
 800deb0:	d164      	bne.n	800df7c <USB_DevInit+0xf8>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800deb2:	6873      	ldr	r3, [r6, #4]
 800deb4:	f043 0302 	orr.w	r3, r3, #2
 800deb8:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800deba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800debc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dec0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dec2:	6823      	ldr	r3, [r4, #0]
 800dec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dec8:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800deca:	6823      	ldr	r3, [r4, #0]
 800decc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ded0:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800ded2:	2500      	movs	r5, #0
 800ded4:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ded8:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800dedc:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dee0:	2103      	movs	r1, #3
 800dee2:	4620      	mov	r0, r4
 800dee4:	f7ff ffc6 	bl	800de74 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dee8:	2110      	movs	r1, #16
 800deea:	4620      	mov	r0, r4
 800deec:	f7ff ffa0 	bl	800de30 <USB_FlushTxFifo>
 800def0:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800def2:	4620      	mov	r0, r4
 800def4:	f7ff ffae 	bl	800de54 <USB_FlushRxFifo>
 800def8:	4308      	orrs	r0, r1
 800defa:	b2c0      	uxtb	r0, r0
    ret = HAL_ERROR;
 800defc:	1b40      	subs	r0, r0, r5
  USBx_DEVICE->DIEPMSK = 0U;
 800defe:	6135      	str	r5, [r6, #16]
    ret = HAL_ERROR;
 800df00:	bf18      	it	ne
 800df02:	2001      	movne	r0, #1
  USBx_DEVICE->DOEPMSK = 0U;
 800df04:	6175      	str	r5, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800df06:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 800df0a:	61f5      	str	r5, [r6, #28]
      USBx_INEP(i)->DIEPCTL = 0U;
 800df0c:	462a      	mov	r2, r5
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800df0e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800df12:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800df16:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df1a:	4545      	cmp	r5, r8
 800df1c:	d133      	bne.n	800df86 <USB_DevInit+0x102>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df1e:	2200      	movs	r2, #0
 800df20:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800df24:	4611      	mov	r1, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800df26:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800df2a:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800df2e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df32:	4542      	cmp	r2, r8
 800df34:	d139      	bne.n	800dfaa <USB_DevInit+0x126>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800df36:	6933      	ldr	r3, [r6, #16]
 800df38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df3c:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800df3e:	2300      	movs	r3, #0
 800df40:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800df42:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800df46:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800df48:	69a3      	ldr	r3, [r4, #24]
 800df4a:	f043 0310 	orr.w	r3, r3, #16
 800df4e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800df50:	69a2      	ldr	r2, [r4, #24]
 800df52:	4b1f      	ldr	r3, [pc, #124]	; (800dfd0 <USB_DevInit+0x14c>)
 800df54:	4313      	orrs	r3, r2
 800df56:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800df58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df5a:	b11b      	cbz	r3, 800df64 <USB_DevInit+0xe0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800df5c:	69a3      	ldr	r3, [r4, #24]
 800df5e:	f043 0308 	orr.w	r3, r3, #8
 800df62:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800df64:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800df66:	bf01      	itttt	eq
 800df68:	69a3      	ldreq	r3, [r4, #24]
 800df6a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800df6e:	f043 0304 	orreq.w	r3, r3, #4
 800df72:	61a3      	streq	r3, [r4, #24]
}
 800df74:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df78:	b004      	add	sp, #16
 800df7a:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800df7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800df82:	63a3      	str	r3, [r4, #56]	; 0x38
 800df84:	e7a5      	b.n	800ded2 <USB_DevInit+0x4e>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800df86:	f8d3 9000 	ldr.w	r9, [r3]
 800df8a:	f1b9 0f00 	cmp.w	r9, #0
 800df8e:	da0a      	bge.n	800dfa6 <USB_DevInit+0x122>
      if (i == 0U)
 800df90:	b93d      	cbnz	r5, 800dfa2 <USB_DevInit+0x11e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800df92:	f8c3 c000 	str.w	ip, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800df96:	611a      	str	r2, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df98:	3501      	adds	r5, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800df9a:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df9e:	3320      	adds	r3, #32
 800dfa0:	e7bb      	b.n	800df1a <USB_DevInit+0x96>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dfa2:	6019      	str	r1, [r3, #0]
 800dfa4:	e7f7      	b.n	800df96 <USB_DevInit+0x112>
      USBx_INEP(i)->DIEPCTL = 0U;
 800dfa6:	601a      	str	r2, [r3, #0]
 800dfa8:	e7f5      	b.n	800df96 <USB_DevInit+0x112>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dfaa:	f8d3 9000 	ldr.w	r9, [r3]
 800dfae:	f1b9 0f00 	cmp.w	r9, #0
 800dfb2:	da0a      	bge.n	800dfca <USB_DevInit+0x146>
      if (i == 0U)
 800dfb4:	b93a      	cbnz	r2, 800dfc6 <USB_DevInit+0x142>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dfb6:	f8c3 c000 	str.w	ip, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dfba:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dfbc:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dfbe:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dfc2:	3320      	adds	r3, #32
 800dfc4:	e7b5      	b.n	800df32 <USB_DevInit+0xae>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dfc6:	601d      	str	r5, [r3, #0]
 800dfc8:	e7f7      	b.n	800dfba <USB_DevInit+0x136>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dfca:	6019      	str	r1, [r3, #0]
 800dfcc:	e7f5      	b.n	800dfba <USB_DevInit+0x136>
 800dfce:	bf00      	nop
 800dfd0:	803c3800 	.word	0x803c3800

0800dfd4 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dfd4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
    speed = 0xFU;
 800dfd8:	f013 0f02 	tst.w	r3, #2
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dfdc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
}
 800dfe0:	bf14      	ite	ne
 800dfe2:	2002      	movne	r0, #2
 800dfe4:	200f      	moveq	r0, #15
 800dfe6:	4770      	bx	lr

0800dfe8 <USB_ActivateEndpoint>:
{
 800dfe8:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800dfea:	780d      	ldrb	r5, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dfec:	2401      	movs	r4, #1
 800dfee:	f005 030f 	and.w	r3, r5, #15
 800dff2:	409c      	lsls	r4, r3
  if (ep->is_in == 1U)
 800dff4:	784b      	ldrb	r3, [r1, #1]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dff6:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 800dffa:	2b01      	cmp	r3, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dffc:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e000:	69d3      	ldr	r3, [r2, #28]
  if (ep->is_in == 1U)
 800e002:	d118      	bne.n	800e036 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e004:	431c      	orrs	r4, r3
 800e006:	61d4      	str	r4, [r2, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e008:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e00c:	041a      	lsls	r2, r3, #16
 800e00e:	d410      	bmi.n	800e032 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e010:	688a      	ldr	r2, [r1, #8]
 800e012:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 800e016:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e01a:	78ca      	ldrb	r2, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e01c:	4323      	orrs	r3, r4
 800e01e:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800e022:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
 800e026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e02a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e02e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800e032:	2000      	movs	r0, #0
 800e034:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e036:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800e03a:	61d4      	str	r4, [r2, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e03c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e040:	041b      	lsls	r3, r3, #16
 800e042:	d4f6      	bmi.n	800e032 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e044:	688b      	ldr	r3, [r1, #8]
 800e046:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800e04a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e04e:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 800e050:	78ca      	ldrb	r2, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e052:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800e056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e05a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e05e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800e062:	e7e6      	b.n	800e032 <USB_ActivateEndpoint+0x4a>

0800e064 <USB_DeactivateEndpoint>:
{
 800e064:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800e066:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800e068:	7849      	ldrb	r1, [r1, #1]
 800e06a:	2901      	cmp	r1, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e06c:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 800e070:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800e074:	f002 020f 	and.w	r2, r2, #15
  if (ep->is_in == 1U)
 800e078:	d122      	bne.n	800e0c0 <USB_DeactivateEndpoint+0x5c>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e07a:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800e07e:	2900      	cmp	r1, #0
 800e080:	da0b      	bge.n	800e09a <USB_DeactivateEndpoint+0x36>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e082:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800e086:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800e08a:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e08e:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800e092:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800e096:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e09a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800e09c:	2101      	movs	r1, #1
 800e09e:	fa01 f202 	lsl.w	r2, r1, r2
 800e0a2:	ea24 0402 	bic.w	r4, r4, r2
 800e0a6:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e0a8:	69c1      	ldr	r1, [r0, #28]
 800e0aa:	ea21 0202 	bic.w	r2, r1, r2
 800e0ae:	61c2      	str	r2, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e0b0:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800e0b4:	4a14      	ldr	r2, [pc, #80]	; (800e108 <USB_DeactivateEndpoint+0xa4>)
 800e0b6:	400a      	ands	r2, r1
 800e0b8:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 800e0bc:	2000      	movs	r0, #0
 800e0be:	bd10      	pop	{r4, pc}
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e0c0:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800e0c4:	2900      	cmp	r1, #0
 800e0c6:	da0b      	bge.n	800e0e0 <USB_DeactivateEndpoint+0x7c>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e0c8:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800e0cc:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800e0d0:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e0d4:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800e0d8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800e0dc:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e0e0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800e0e2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800e0e6:	fa01 f202 	lsl.w	r2, r1, r2
 800e0ea:	ea24 0402 	bic.w	r4, r4, r2
 800e0ee:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e0f0:	69c1      	ldr	r1, [r0, #28]
 800e0f2:	ea21 0202 	bic.w	r2, r1, r2
 800e0f6:	61c2      	str	r2, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e0f8:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800e0fc:	4a03      	ldr	r2, [pc, #12]	; (800e10c <USB_DeactivateEndpoint+0xa8>)
 800e0fe:	400a      	ands	r2, r1
 800e100:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800e104:	e7da      	b.n	800e0bc <USB_DeactivateEndpoint+0x58>
 800e106:	bf00      	nop
 800e108:	ec337800 	.word	0xec337800
 800e10c:	eff37800 	.word	0xeff37800

0800e110 <USB_EP0StartXfer>:
{
 800e110:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800e112:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800e114:	780d      	ldrb	r5, [r1, #0]
    if (ep->xfer_len == 0U)
 800e116:	694e      	ldr	r6, [r1, #20]
 800e118:	4f2d      	ldr	r7, [pc, #180]	; (800e1d0 <USB_EP0StartXfer+0xc0>)
 800e11a:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 800e1d4 <USB_EP0StartXfer+0xc4>
  if (ep->is_in == 1U)
 800e11e:	2b01      	cmp	r3, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e120:	eb00 1445 	add.w	r4, r0, r5, lsl #5
  if (ep->is_in == 1U)
 800e124:	d134      	bne.n	800e190 <USB_EP0StartXfer+0x80>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e126:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 800e12a:	691a      	ldr	r2, [r3, #16]
    if (ep->xfer_len == 0U)
 800e12c:	b9e6      	cbnz	r6, 800e168 <USB_EP0StartXfer+0x58>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e12e:	403a      	ands	r2, r7
 800e130:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e132:	691a      	ldr	r2, [r3, #16]
 800e134:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800e138:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e13a:	691a      	ldr	r2, [r3, #16]
 800e13c:	ea02 020c 	and.w	r2, r2, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e140:	611a      	str	r2, [r3, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e142:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800e146:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e14a:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 800e14e:	694b      	ldr	r3, [r1, #20]
 800e150:	b143      	cbz	r3, 800e164 <USB_EP0StartXfer+0x54>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e152:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800e156:	f005 050f 	and.w	r5, r5, #15
 800e15a:	2301      	movs	r3, #1
 800e15c:	40ab      	lsls	r3, r5
 800e15e:	4313      	orrs	r3, r2
 800e160:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800e164:	2000      	movs	r0, #0
 800e166:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e168:	ea02 020c 	and.w	r2, r2, ip
 800e16c:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e16e:	691a      	ldr	r2, [r3, #16]
 800e170:	403a      	ands	r2, r7
 800e172:	611a      	str	r2, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800e174:	688a      	ldr	r2, [r1, #8]
 800e176:	42b2      	cmp	r2, r6
        ep->xfer_len = ep->maxpacket;
 800e178:	bf38      	it	cc
 800e17a:	614a      	strcc	r2, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e17c:	691a      	ldr	r2, [r3, #16]
 800e17e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800e182:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e184:	694a      	ldr	r2, [r1, #20]
 800e186:	691e      	ldr	r6, [r3, #16]
 800e188:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800e18c:	4332      	orrs	r2, r6
 800e18e:	e7d7      	b.n	800e140 <USB_EP0StartXfer+0x30>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e190:	f8d4 2b10 	ldr.w	r2, [r4, #2832]	; 0xb10
 800e194:	ea02 020c 	and.w	r2, r2, ip
 800e198:	f8c4 2b10 	str.w	r2, [r4, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e19c:	f8d4 2b10 	ldr.w	r2, [r4, #2832]	; 0xb10
 800e1a0:	403a      	ands	r2, r7
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e1a2:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e1a6:	611a      	str	r2, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800e1a8:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 800e1aa:	b106      	cbz	r6, 800e1ae <USB_EP0StartXfer+0x9e>
      ep->xfer_len = ep->maxpacket;
 800e1ac:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e1ae:	6919      	ldr	r1, [r3, #16]
 800e1b0:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 800e1b4:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e1b6:	6919      	ldr	r1, [r3, #16]
 800e1b8:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800e1bc:	430a      	orrs	r2, r1
 800e1be:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e1c0:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800e1c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e1c8:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800e1cc:	e7ca      	b.n	800e164 <USB_EP0StartXfer+0x54>
 800e1ce:	bf00      	nop
 800e1d0:	e007ffff 	.word	0xe007ffff
 800e1d4:	fff80000 	.word	0xfff80000

0800e1d8 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 800e1d8:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e1da:	3201      	adds	r2, #1
  count32b = ((uint32_t)len + 3U) / 4U;
 800e1dc:	089b      	lsrs	r3, r3, #2
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e1de:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800e1e2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  for (i = 0U; i < count32b; i++)
 800e1e6:	4299      	cmp	r1, r3
 800e1e8:	d101      	bne.n	800e1ee <USB_WritePacket+0x16>
}
 800e1ea:	2000      	movs	r0, #0
 800e1ec:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e1ee:	f851 2b04 	ldr.w	r2, [r1], #4
 800e1f2:	6002      	str	r2, [r0, #0]
  for (i = 0U; i < count32b; i++)
 800e1f4:	e7f7      	b.n	800e1e6 <USB_WritePacket+0xe>
	...

0800e1f8 <USB_EPStartXfer>:
{
 800e1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800e1fa:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800e1fc:	780a      	ldrb	r2, [r1, #0]
    if (ep->xfer_len == 0U)
 800e1fe:	694b      	ldr	r3, [r1, #20]
      if (ep->type == EP_TYPE_ISOC)
 800e200:	78ce      	ldrb	r6, [r1, #3]
 800e202:	4f53      	ldr	r7, [pc, #332]	; (800e350 <USB_EPStartXfer+0x158>)
 800e204:	f8df c150 	ldr.w	ip, [pc, #336]	; 800e358 <USB_EPStartXfer+0x160>
  if (ep->is_in == 1U)
 800e208:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e20a:	eb00 1542 	add.w	r5, r0, r2, lsl #5
  if (ep->is_in == 1U)
 800e20e:	d15e      	bne.n	800e2ce <USB_EPStartXfer+0xd6>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e210:	f505 6410 	add.w	r4, r5, #2304	; 0x900
 800e214:	f8d4 e010 	ldr.w	lr, [r4, #16]
    if (ep->xfer_len == 0U)
 800e218:	b9f3      	cbnz	r3, 800e258 <USB_EPStartXfer+0x60>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e21a:	ea0e 0707 	and.w	r7, lr, r7
 800e21e:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e220:	6927      	ldr	r7, [r4, #16]
 800e222:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800e226:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e228:	6927      	ldr	r7, [r4, #16]
 800e22a:	ea07 070c 	and.w	r7, r7, ip
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e22e:	6127      	str	r7, [r4, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e230:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 800e234:	2e01      	cmp	r6, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e236:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800e23a:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 800e23e:	d034      	beq.n	800e2aa <USB_EPStartXfer+0xb2>
      if (ep->xfer_len > 0U)
 800e240:	b143      	cbz	r3, 800e254 <USB_EPStartXfer+0x5c>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e242:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800e246:	f002 010f 	and.w	r1, r2, #15
 800e24a:	2201      	movs	r2, #1
 800e24c:	408a      	lsls	r2, r1
 800e24e:	431a      	orrs	r2, r3
 800e250:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
}
 800e254:	2000      	movs	r0, #0
 800e256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e258:	ea0e 0c0c 	and.w	ip, lr, ip
 800e25c:	f8c4 c010 	str.w	ip, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e260:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800e264:	ea0c 0707 	and.w	r7, ip, r7
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e268:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e26c:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e26e:	eb0c 0703 	add.w	r7, ip, r3
 800e272:	3f01      	subs	r7, #1
 800e274:	fbb7 fcfc 	udiv	ip, r7, ip
 800e278:	4f36      	ldr	r7, [pc, #216]	; (800e354 <USB_EPStartXfer+0x15c>)
 800e27a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800e27e:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 800e282:	ea47 070e 	orr.w	r7, r7, lr
 800e286:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e288:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800e28c:	f3c3 0712 	ubfx	r7, r3, #0, #19
 800e290:	ea47 070c 	orr.w	r7, r7, ip
      if (ep->type == EP_TYPE_ISOC)
 800e294:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e296:	6127      	str	r7, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 800e298:	d1ca      	bne.n	800e230 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e29a:	6927      	ldr	r7, [r4, #16]
 800e29c:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 800e2a0:	6127      	str	r7, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e2a2:	6927      	ldr	r7, [r4, #16]
 800e2a4:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800e2a8:	e7c1      	b.n	800e22e <USB_EPStartXfer+0x36>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e2aa:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800e2ae:	68c9      	ldr	r1, [r1, #12]
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e2b0:	f414 7f80 	tst.w	r4, #256	; 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e2b4:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 800e2b8:	bf0c      	ite	eq
 800e2ba:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e2be:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 800e2c2:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	f7ff ff86 	bl	800e1d8 <USB_WritePacket>
 800e2cc:	e7c2      	b.n	800e254 <USB_EPStartXfer+0x5c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e2ce:	f8d5 4b10 	ldr.w	r4, [r5, #2832]	; 0xb10
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e2d2:	6889      	ldr	r1, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e2d4:	ea04 040c 	and.w	r4, r4, ip
 800e2d8:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e2dc:	f8d5 4b10 	ldr.w	r4, [r5, #2832]	; 0xb10
 800e2e0:	403c      	ands	r4, r7
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e2e2:	f505 6230 	add.w	r2, r5, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e2e6:	6114      	str	r4, [r2, #16]
    if (ep->xfer_len == 0U)
 800e2e8:	b9f3      	cbnz	r3, 800e328 <USB_EPStartXfer+0x130>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e2ea:	6913      	ldr	r3, [r2, #16]
 800e2ec:	f3c1 0112 	ubfx	r1, r1, #0, #19
 800e2f0:	4319      	orrs	r1, r3
 800e2f2:	6111      	str	r1, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e2f4:	6913      	ldr	r3, [r2, #16]
 800e2f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e2fa:	6113      	str	r3, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 800e2fc:	2e01      	cmp	r6, #1
 800e2fe:	d10c      	bne.n	800e31a <USB_EPStartXfer+0x122>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e300:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800e304:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e308:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800e30c:	bf0c      	ite	eq
 800e30e:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e312:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800e316:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e31a:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800e31e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e322:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
 800e326:	e795      	b.n	800e254 <USB_EPStartXfer+0x5c>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e328:	4f0a      	ldr	r7, [pc, #40]	; (800e354 <USB_EPStartXfer+0x15c>)
 800e32a:	f8d2 c010 	ldr.w	ip, [r2, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e32e:	440b      	add	r3, r1
 800e330:	3b01      	subs	r3, #1
 800e332:	fbb3 f3f1 	udiv	r3, r3, r1
 800e336:	b29c      	uxth	r4, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e338:	ea07 43c3 	and.w	r3, r7, r3, lsl #19
 800e33c:	ea43 030c 	orr.w	r3, r3, ip
 800e340:	6113      	str	r3, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e342:	6913      	ldr	r3, [r2, #16]
 800e344:	4361      	muls	r1, r4
 800e346:	f3c1 0112 	ubfx	r1, r1, #0, #19
 800e34a:	4319      	orrs	r1, r3
 800e34c:	6111      	str	r1, [r2, #16]
 800e34e:	e7d5      	b.n	800e2fc <USB_EPStartXfer+0x104>
 800e350:	e007ffff 	.word	0xe007ffff
 800e354:	1ff80000 	.word	0x1ff80000
 800e358:	fff80000 	.word	0xfff80000

0800e35c <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800e35c:	3203      	adds	r2, #3
 800e35e:	0892      	lsrs	r2, r2, #2
 800e360:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e364:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 800e368:	4291      	cmp	r1, r2
 800e36a:	d101      	bne.n	800e370 <USB_ReadPacket+0x14>
}
 800e36c:	4608      	mov	r0, r1
 800e36e:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e370:	6803      	ldr	r3, [r0, #0]
 800e372:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 800e376:	e7f7      	b.n	800e368 <USB_ReadPacket+0xc>

0800e378 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800e378:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800e37a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800e37c:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e37e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800e382:	d112      	bne.n	800e3aa <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e384:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800e388:	2a00      	cmp	r2, #0
 800e38a:	db06      	blt.n	800e39a <USB_EPSetStall+0x22>
 800e38c:	b12b      	cbz	r3, 800e39a <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e38e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e392:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e396:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e39a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e39e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e3a2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800e3a6:	2000      	movs	r0, #0
 800e3a8:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e3aa:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800e3ae:	2a00      	cmp	r2, #0
 800e3b0:	db06      	blt.n	800e3c0 <USB_EPSetStall+0x48>
 800e3b2:	b12b      	cbz	r3, 800e3c0 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e3b4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e3b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e3bc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e3c0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e3c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e3c8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800e3cc:	e7eb      	b.n	800e3a6 <USB_EPSetStall+0x2e>

0800e3ce <USB_EPClearStall>:
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e3ce:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800e3d0:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e3d2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e3d6:	78cb      	ldrb	r3, [r1, #3]
  if (ep->is_in == 1U)
 800e3d8:	2a01      	cmp	r2, #1
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e3da:	f1a3 0302 	sub.w	r3, r3, #2
 800e3de:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 800e3e0:	d10f      	bne.n	800e402 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e3e2:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e3e6:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e3e8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800e3ec:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e3f0:	d805      	bhi.n	800e3fe <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e3f2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e3f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e3fa:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800e3fe:	2000      	movs	r0, #0
 800e400:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e402:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800e406:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e40a:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e40c:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e410:	bf9e      	ittt	ls
 800e412:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 800e416:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 800e41a:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 800e41e:	e7ee      	b.n	800e3fe <USB_EPClearStall+0x30>

0800e420 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e420:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800e424:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e428:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e42c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800e430:	0109      	lsls	r1, r1, #4
 800e432:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800e436:	4319      	orrs	r1, r3
 800e438:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800e43c:	2000      	movs	r0, #0
 800e43e:	4770      	bx	lr

0800e440 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e440:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800e444:	f023 0303 	bic.w	r3, r3, #3
 800e448:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e44c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800e450:	f023 0302 	bic.w	r3, r3, #2
 800e454:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800e458:	2000      	movs	r0, #0
 800e45a:	4770      	bx	lr

0800e45c <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e45c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800e460:	f023 0303 	bic.w	r3, r3, #3
 800e464:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e468:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800e46c:	f043 0302 	orr.w	r3, r3, #2
 800e470:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800e474:	2000      	movs	r0, #0
 800e476:	4770      	bx	lr

0800e478 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800e478:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800e47a:	6980      	ldr	r0, [r0, #24]
}
 800e47c:	4010      	ands	r0, r2
 800e47e:	4770      	bx	lr

0800e480 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800e480:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800e484:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e488:	69c0      	ldr	r0, [r0, #28]
 800e48a:	4018      	ands	r0, r3
}
 800e48c:	0c00      	lsrs	r0, r0, #16
 800e48e:	4770      	bx	lr

0800e490 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800e490:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800e494:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e498:	69c0      	ldr	r0, [r0, #28]
 800e49a:	4018      	ands	r0, r3
}
 800e49c:	b280      	uxth	r0, r0
 800e49e:	4770      	bx	lr

0800e4a0 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e4a0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e4a4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e4a8:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e4ac:	6940      	ldr	r0, [r0, #20]
}
 800e4ae:	4010      	ands	r0, r2
 800e4b0:	4770      	bx	lr

0800e4b2 <USB_ReadDevInEPInterrupt>:
{
 800e4b2:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 800e4b4:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e4b8:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e4bc:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e4c0:	f001 010f 	and.w	r1, r1, #15
 800e4c4:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e4c6:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e4ca:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e4cc:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	4323      	orrs	r3, r4
}
 800e4d2:	4018      	ands	r0, r3
 800e4d4:	bd10      	pop	{r4, pc}

0800e4d6 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800e4d6:	6940      	ldr	r0, [r0, #20]
}
 800e4d8:	f000 0001 	and.w	r0, r0, #1
 800e4dc:	4770      	bx	lr

0800e4de <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e4de:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e4e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e4e6:	f023 0307 	bic.w	r3, r3, #7
 800e4ea:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e4ee:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800e4f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4f6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	4770      	bx	lr
	...

0800e500 <USB_EP0_OutStart>:
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e500:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e502:	4a0c      	ldr	r2, [pc, #48]	; (800e534 <USB_EP0_OutStart+0x34>)
 800e504:	4291      	cmp	r1, r2
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e506:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e50a:	d903      	bls.n	800e514 <USB_EP0_OutStart+0x14>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e50c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800e510:	2a00      	cmp	r2, #0
 800e512:	db0d      	blt.n	800e530 <USB_EP0_OutStart+0x30>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e514:	2200      	movs	r2, #0
 800e516:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e518:	691a      	ldr	r2, [r3, #16]
 800e51a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800e51e:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e520:	691a      	ldr	r2, [r3, #16]
 800e522:	f042 0218 	orr.w	r2, r2, #24
 800e526:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e528:	691a      	ldr	r2, [r3, #16]
 800e52a:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 800e52e:	611a      	str	r2, [r3, #16]
}
 800e530:	2000      	movs	r0, #0
 800e532:	4770      	bx	lr
 800e534:	4f54300a 	.word	0x4f54300a

0800e538 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800e538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e53c:	b0cb      	sub	sp, #300	; 0x12c
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800e53e:	ac09      	add	r4, sp, #36	; 0x24
{
 800e540:	f89d 5154 	ldrb.w	r5, [sp, #340]	; 0x154
 800e544:	f89d 615c 	ldrb.w	r6, [sp, #348]	; 0x15c
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800e548:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800e54c:	f105 0a08 	add.w	sl, r5, #8
  tBleStatus status = 0;
 800e550:	f04f 0900 	mov.w	r9, #0
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800e554:	eb04 070a 	add.w	r7, r4, sl
  index_input += 1;
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800e558:	f8ad 1025 	strh.w	r1, [sp, #37]	; 0x25
  index_input += 2;
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800e55c:	f8ad 2027 	strh.w	r2, [sp, #39]	; 0x27
  index_input += 1;
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800e560:	9956      	ldr	r1, [sp, #344]	; 0x158
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800e562:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800e566:	462a      	mov	r2, r5
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800e568:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800e56c:	9701      	str	r7, [sp, #4]
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800e56e:	a80b      	add	r0, sp, #44	; 0x2c
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800e570:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800e574:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
  tBleStatus status = 0;
 800e578:	f88d 900b 	strb.w	r9, [sp, #11]
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800e57c:	f00d fe4a 	bl	801c214 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
    }
    index_input += 1;
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 800e580:	9b01      	ldr	r3, [sp, #4]
 800e582:	9958      	ldr	r1, [sp, #352]	; 0x160
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800e584:	f804 600a 	strb.w	r6, [r4, sl]
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800e588:	f106 0709 	add.w	r7, r6, #9
 800e58c:	442f      	add	r7, r5
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 800e58e:	4632      	mov	r2, r6
 800e590:	1c58      	adds	r0, r3, #1
 800e592:	f00d fe3f 	bl	801c214 <memcpy>
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800e596:	eb04 0b07 	add.w	fp, r4, r7
    index_input += Service_Uuid_length*sizeof(uint8_t);
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800e59a:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 800e59e:	53e3      	strh	r3, [r4, r7]
    }
    index_input += 2;
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
    }
    index_input += 2;
 800e5a0:	360d      	adds	r6, #13
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800e5a2:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
 800e5a6:	f8ab 3002 	strh.w	r3, [fp, #2]
    index_input += 2;
 800e5aa:	4435      	add	r5, r6
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800e5ac:	4b0b      	ldr	r3, [pc, #44]	; (800e5dc <aci_gap_set_discoverable+0xa4>)
 800e5ae:	9303      	str	r3, [sp, #12]
  tBleStatus status = 0;
 800e5b0:	f10d 080b 	add.w	r8, sp, #11
  rq.ocf = 0x083;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800e5b4:	2301      	movs	r3, #1
  rq.clen = index_input;
 800e5b6:	b2ed      	uxtb	r5, r5
  if (hci_send_req(&rq, FALSE) < 0)
 800e5b8:	4649      	mov	r1, r9
 800e5ba:	a803      	add	r0, sp, #12
  rq.rparam = &status;
 800e5bc:	e9cd 5806 	strd	r5, r8, [sp, #24]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e5c0:	f8cd 9010 	str.w	r9, [sp, #16]
  rq.cparam = cmd_buffer;
 800e5c4:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 800e5c6:	9308      	str	r3, [sp, #32]
  if (hci_send_req(&rq, FALSE) < 0)
 800e5c8:	f001 f804 	bl	800f5d4 <hci_send_req>
 800e5cc:	4548      	cmp	r0, r9
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800e5ce:	bfac      	ite	ge
 800e5d0:	f89d 000b 	ldrbge.w	r0, [sp, #11]
    return BLE_STATUS_TIMEOUT;
 800e5d4:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800e5d6:	b04b      	add	sp, #300	; 0x12c
 800e5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5dc:	0083003f 	.word	0x0083003f

0800e5e0 <aci_gap_set_io_capability>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800e5e0:	b510      	push	{r4, lr}
 800e5e2:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->IO_Capability = htob(IO_Capability, 1);
 800e5e4:	ab07      	add	r3, sp, #28
  tBleStatus status = 0;
 800e5e6:	2100      	movs	r1, #0
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800e5e8:	4a0b      	ldr	r2, [pc, #44]	; (800e618 <aci_gap_set_io_capability+0x38>)
  cp0->IO_Capability = htob(IO_Capability, 1);
 800e5ea:	f88d 001c 	strb.w	r0, [sp, #28]
  rq.ocf = 0x085;
  rq.cparam = cmd_buffer;
 800e5ee:	9303      	str	r3, [sp, #12]
  tBleStatus status = 0;
 800e5f0:	f10d 0403 	add.w	r4, sp, #3
  rq.clen = index_input;
 800e5f4:	2301      	movs	r3, #1
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800e5f6:	a801      	add	r0, sp, #4
  rq.rparam = &status;
 800e5f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
  tBleStatus status = 0;
 800e5fc:	f88d 1003 	strb.w	r1, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e600:	9102      	str	r1, [sp, #8]
  rq.ogf = 0x3f;
 800e602:	9201      	str	r2, [sp, #4]
  rq.rlen = 1;
 800e604:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800e606:	f000 ffe5 	bl	800f5d4 <hci_send_req>
 800e60a:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800e60c:	bfac      	ite	ge
 800e60e:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800e612:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800e614:	b048      	add	sp, #288	; 0x120
 800e616:	bd10      	pop	{r4, pc}
 800e618:	0085003f 	.word	0x0085003f

0800e61c <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800e61c:	b570      	push	{r4, r5, r6, lr}
 800e61e:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800e620:	f10d 0503 	add.w	r5, sp, #3
  index_input += 1;
  cp0->MITM_Mode = htob(MITM_Mode, 1);
  index_input += 1;
  cp0->SC_Support = htob(SC_Support, 1);
  index_input += 1;
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800e624:	f88d 301f 	strb.w	r3, [sp, #31]
  index_input += 1;
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800e628:	f89d 3130 	ldrb.w	r3, [sp, #304]	; 0x130
 800e62c:	f88d 3020 	strb.w	r3, [sp, #32]
  index_input += 1;
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800e630:	f89d 3134 	ldrb.w	r3, [sp, #308]	; 0x134
 800e634:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  index_input += 1;
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800e638:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800e63c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
  index_input += 1;
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800e640:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800e642:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
  index_input += 4;
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800e646:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
 800e64a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800e64e:	4b0f      	ldr	r3, [pc, #60]	; (800e68c <aci_gap_set_authentication_requirement+0x70>)
 800e650:	9301      	str	r3, [sp, #4]
  rq.ocf = 0x086;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800e652:	230c      	movs	r3, #12
  rq.rparam = &status;
 800e654:	e9cd 3504 	strd	r3, r5, [sp, #16]
{
 800e658:	460e      	mov	r6, r1
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800e65a:	f88d 001c 	strb.w	r0, [sp, #28]
  tBleStatus status = 0;
 800e65e:	2100      	movs	r1, #0
  rq.rlen = 1;
 800e660:	2301      	movs	r3, #1
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800e662:	ac07      	add	r4, sp, #28
  if (hci_send_req(&rq, FALSE) < 0)
 800e664:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800e666:	f88d 1003 	strb.w	r1, [sp, #3]
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800e66a:	f88d 601d 	strb.w	r6, [sp, #29]
  cp0->SC_Support = htob(SC_Support, 1);
 800e66e:	f88d 201e 	strb.w	r2, [sp, #30]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e672:	9102      	str	r1, [sp, #8]
  rq.cparam = cmd_buffer;
 800e674:	9403      	str	r4, [sp, #12]
  rq.rlen = 1;
 800e676:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800e678:	f000 ffac 	bl	800f5d4 <hci_send_req>
 800e67c:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800e67e:	bfac      	ite	ge
 800e680:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800e684:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800e686:	b048      	add	sp, #288	; 0x120
 800e688:	bd70      	pop	{r4, r5, r6, pc}
 800e68a:	bf00      	nop
 800e68c:	0086003f 	.word	0x0086003f

0800e690 <aci_gap_pass_key_resp>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_pass_key_resp(uint16_t Connection_Handle,
                                 uint32_t Pass_Key)
{
 800e690:	b510      	push	{r4, lr}
 800e692:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800e694:	aa07      	add	r2, sp, #28
  tBleStatus status = 0;
 800e696:	2300      	movs	r3, #0
  index_input += 2;
  cp0->Pass_Key = htob(Pass_Key, 4);
 800e698:	f8cd 101e 	str.w	r1, [sp, #30]
  index_input += 4;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x088;
  rq.cparam = cmd_buffer;
 800e69c:	9203      	str	r2, [sp, #12]
  rq.ogf = 0x3f;
 800e69e:	490c      	ldr	r1, [pc, #48]	; (800e6d0 <aci_gap_pass_key_resp+0x40>)
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800e6a0:	f8ad 001c 	strh.w	r0, [sp, #28]
  tBleStatus status = 0;
 800e6a4:	f10d 0403 	add.w	r4, sp, #3
  rq.clen = index_input;
 800e6a8:	2206      	movs	r2, #6
  rq.rparam = &status;
 800e6aa:	e9cd 2404 	strd	r2, r4, [sp, #16]
  rq.ogf = 0x3f;
 800e6ae:	9101      	str	r1, [sp, #4]
  rq.rlen = 1;
 800e6b0:	2201      	movs	r2, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800e6b2:	4619      	mov	r1, r3
 800e6b4:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800e6b6:	f88d 3003 	strb.w	r3, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e6ba:	9302      	str	r3, [sp, #8]
  rq.rlen = 1;
 800e6bc:	9206      	str	r2, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800e6be:	f000 ff89 	bl	800f5d4 <hci_send_req>
 800e6c2:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800e6c4:	bfac      	ite	ge
 800e6c6:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800e6ca:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800e6cc:	b048      	add	sp, #288	; 0x120
 800e6ce:	bd10      	pop	{r4, pc}
 800e6d0:	0088003f 	.word	0x0088003f

0800e6d4 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800e6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6d6:	b0cb      	sub	sp, #300	; 0x12c
 800e6d8:	461e      	mov	r6, r3
  cp0->privacy_enabled = htob(privacy_enabled, 1);
  index_input += 1;
  cp0->device_name_char_len = htob(device_name_char_len, 1);
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800e6da:	4b19      	ldr	r3, [pc, #100]	; (800e740 <aci_gap_init+0x6c>)
 800e6dc:	9303      	str	r3, [sp, #12]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e6de:	ac01      	add	r4, sp, #4
  rq.ocf = 0x08a;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800e6e0:	2303      	movs	r3, #3
  rq.rparam = &resp;
 800e6e2:	e9cd 3406 	strd	r3, r4, [sp, #24]
{
 800e6e6:	460f      	mov	r7, r1
  cp0->Role = htob(Role, 1);
 800e6e8:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e6ec:	2100      	movs	r1, #0
  rq.rlen = sizeof(resp);
 800e6ee:	2307      	movs	r3, #7
  cp0->Role = htob(Role, 1);
 800e6f0:	ad09      	add	r5, sp, #36	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800e6f2:	a803      	add	r0, sp, #12
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e6f4:	9101      	str	r1, [sp, #4]
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800e6f6:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e6fa:	f8cd 1007 	str.w	r1, [sp, #7]
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800e6fe:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e702:	9104      	str	r1, [sp, #16]
  rq.cparam = cmd_buffer;
 800e704:	9505      	str	r5, [sp, #20]
  rq.rlen = sizeof(resp);
 800e706:	9308      	str	r3, [sp, #32]
  if (hci_send_req(&rq, FALSE) < 0)
 800e708:	f000 ff64 	bl	800f5d4 <hci_send_req>
 800e70c:	2800      	cmp	r0, #0
 800e70e:	db15      	blt.n	800e73c <aci_gap_init+0x68>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800e710:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800e714:	b980      	cbnz	r0, 800e738 <aci_gap_init+0x64>
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800e716:	9b01      	ldr	r3, [sp, #4]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800e718:	f89d 2008 	ldrb.w	r2, [sp, #8]
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800e71c:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800e720:	8033      	strh	r3, [r6, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800e722:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e726:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e72a:	9a50      	ldr	r2, [sp, #320]	; 0x140
 800e72c:	8013      	strh	r3, [r2, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800e72e:	9b02      	ldr	r3, [sp, #8]
 800e730:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800e732:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800e736:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 800e738:	b04b      	add	sp, #300	; 0x12c
 800e73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800e73c:	20ff      	movs	r0, #255	; 0xff
 800e73e:	e7fb      	b.n	800e738 <aci_gap_init+0x64>
 800e740:	008a003f 	.word	0x008a003f

0800e744 <aci_gap_set_undirected_connectable>:
}
tBleStatus aci_gap_set_undirected_connectable(uint16_t Advertising_Interval_Min,
                                              uint16_t Advertising_Interval_Max,
                                              uint8_t Own_Address_Type,
                                              uint8_t Adv_Filter_Policy)
{
 800e744:	b570      	push	{r4, r5, r6, lr}
 800e746:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_undirected_connectable_cp0 *cp0 = (aci_gap_set_undirected_connectable_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800e748:	2600      	movs	r6, #0
  index_input += 2;
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
  index_input += 2;
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
  index_input += 1;
  cp0->Adv_Filter_Policy = htob(Adv_Filter_Policy, 1);
 800e74a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800e74e:	4b0f      	ldr	r3, [pc, #60]	; (800e78c <aci_gap_set_undirected_connectable+0x48>)
 800e750:	9301      	str	r3, [sp, #4]
  tBleStatus status = 0;
 800e752:	f10d 0503 	add.w	r5, sp, #3
  rq.ocf = 0x08c;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800e756:	2306      	movs	r3, #6
  rq.rparam = &status;
 800e758:	e9cd 3504 	strd	r3, r5, [sp, #16]
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800e75c:	f8ad 001c 	strh.w	r0, [sp, #28]
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800e760:	f8ad 101e 	strh.w	r1, [sp, #30]
  rq.rlen = 1;
 800e764:	2301      	movs	r3, #1
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800e766:	ac07      	add	r4, sp, #28
  if (hci_send_req(&rq, FALSE) < 0)
 800e768:	4631      	mov	r1, r6
 800e76a:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800e76c:	f88d 6003 	strb.w	r6, [sp, #3]
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800e770:	f88d 2020 	strb.w	r2, [sp, #32]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e774:	9602      	str	r6, [sp, #8]
  rq.cparam = cmd_buffer;
 800e776:	9403      	str	r4, [sp, #12]
  rq.rlen = 1;
 800e778:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800e77a:	f000 ff2b 	bl	800f5d4 <hci_send_req>
 800e77e:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800e780:	bfac      	ite	ge
 800e782:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800e786:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800e788:	b048      	add	sp, #288	; 0x120
 800e78a:	bd70      	pop	{r4, r5, r6, pc}
 800e78c:	008c003f 	.word	0x008c003f

0800e790 <aci_gap_slave_security_req>:
tBleStatus aci_gap_slave_security_req(uint16_t Connection_Handle)
{
 800e790:	b510      	push	{r4, lr}
 800e792:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_slave_security_req_cp0 *cp0 = (aci_gap_slave_security_req_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800e794:	ab07      	add	r3, sp, #28
 800e796:	f8ad 001c 	strh.w	r0, [sp, #28]
  index_input += 2;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x08d;
  rq.event = 0x0F;
 800e79a:	480c      	ldr	r0, [pc, #48]	; (800e7cc <aci_gap_slave_security_req+0x3c>)
  rq.cparam = cmd_buffer;
 800e79c:	9303      	str	r3, [sp, #12]
  rq.event = 0x0F;
 800e79e:	220f      	movs	r2, #15
  tBleStatus status = 0;
 800e7a0:	f10d 0403 	add.w	r4, sp, #3
  rq.clen = index_input;
 800e7a4:	2302      	movs	r3, #2
  rq.event = 0x0F;
 800e7a6:	e9cd 0201 	strd	r0, r2, [sp, #4]
  rq.rparam = &status;
 800e7aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
  tBleStatus status = 0;
 800e7ae:	2100      	movs	r1, #0
  rq.rlen = 1;
 800e7b0:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800e7b2:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800e7b4:	f88d 1003 	strb.w	r1, [sp, #3]
  rq.rlen = 1;
 800e7b8:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800e7ba:	f000 ff0b 	bl	800f5d4 <hci_send_req>
 800e7be:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800e7c0:	bfac      	ite	ge
 800e7c2:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800e7c6:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800e7c8:	b048      	add	sp, #288	; 0x120
 800e7ca:	bd10      	pop	{r4, pc}
 800e7cc:	008d003f 	.word	0x008d003f

0800e7d0 <aci_gap_update_adv_data>:
tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800e7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7d2:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800e7d4:	2600      	movs	r6, #0
  uint8_t index_input = 0;
  cp0->AdvDataLen = htob(AdvDataLen, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 800e7d6:	4602      	mov	r2, r0
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800e7d8:	f88d 001c 	strb.w	r0, [sp, #28]
{
 800e7dc:	4604      	mov	r4, r0
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 800e7de:	f10d 001d 	add.w	r0, sp, #29
  tBleStatus status = 0;
 800e7e2:	f88d 6003 	strb.w	r6, [sp, #3]
    index_input += AdvDataLen*sizeof(uint8_t);
 800e7e6:	3401      	adds	r4, #1
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 800e7e8:	f00d fd14 	bl	801c214 <memcpy>
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800e7ec:	4b0b      	ldr	r3, [pc, #44]	; (800e81c <aci_gap_update_adv_data+0x4c>)
 800e7ee:	9301      	str	r3, [sp, #4]
  tBleStatus status = 0;
 800e7f0:	f10d 0503 	add.w	r5, sp, #3
  rq.ocf = 0x08e;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800e7f4:	2301      	movs	r3, #1
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800e7f6:	af07      	add	r7, sp, #28
  rq.clen = index_input;
 800e7f8:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 800e7fa:	4631      	mov	r1, r6
 800e7fc:	a801      	add	r0, sp, #4
  rq.rparam = &status;
 800e7fe:	e9cd 4504 	strd	r4, r5, [sp, #16]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e802:	9602      	str	r6, [sp, #8]
  rq.cparam = cmd_buffer;
 800e804:	9703      	str	r7, [sp, #12]
  rq.rlen = 1;
 800e806:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800e808:	f000 fee4 	bl	800f5d4 <hci_send_req>
 800e80c:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800e80e:	bfac      	ite	ge
 800e810:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800e814:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800e816:	b049      	add	sp, #292	; 0x124
 800e818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e81a:	bf00      	nop
 800e81c:	008e003f 	.word	0x008e003f

0800e820 <aci_gap_configure_whitelist>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_configure_whitelist(void)
{
 800e820:	b500      	push	{lr}
 800e822:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  tBleStatus status = 0;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800e824:	4b0b      	ldr	r3, [pc, #44]	; (800e854 <aci_gap_configure_whitelist+0x34>)
 800e826:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x092;
  rq.rparam = &status;
 800e828:	f10d 0307 	add.w	r3, sp, #7
  tBleStatus status = 0;
 800e82c:	2100      	movs	r1, #0
  rq.rparam = &status;
 800e82e:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800e830:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800e832:	2301      	movs	r3, #1
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e834:	e9cd 1103 	strd	r1, r1, [sp, #12]
  tBleStatus status = 0;
 800e838:	f88d 1007 	strb.w	r1, [sp, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e83c:	9105      	str	r1, [sp, #20]
  rq.rlen = 1;
 800e83e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800e840:	f000 fec8 	bl	800f5d4 <hci_send_req>
 800e844:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800e846:	bfac      	ite	ge
 800e848:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800e84c:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800e84e:	b009      	add	sp, #36	; 0x24
 800e850:	f85d fb04 	ldr.w	pc, [sp], #4
 800e854:	0092003f 	.word	0x0092003f

0800e858 <aci_gap_allow_rebond>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_allow_rebond(uint16_t Connection_Handle)
{
 800e858:	b510      	push	{r4, lr}
 800e85a:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800e85c:	ab07      	add	r3, sp, #28
  index_input += 2;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x095;
  rq.cparam = cmd_buffer;
 800e85e:	9303      	str	r3, [sp, #12]
  tBleStatus status = 0;
 800e860:	f10d 0403 	add.w	r4, sp, #3
  rq.clen = index_input;
 800e864:	2302      	movs	r3, #2
  tBleStatus status = 0;
 800e866:	2100      	movs	r1, #0
  rq.rparam = &status;
 800e868:	e9cd 3404 	strd	r3, r4, [sp, #16]
  rq.ogf = 0x3f;
 800e86c:	4a09      	ldr	r2, [pc, #36]	; (800e894 <aci_gap_allow_rebond+0x3c>)
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800e86e:	f8ad 001c 	strh.w	r0, [sp, #28]
  rq.rlen = 1;
 800e872:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800e874:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800e876:	f88d 1003 	strb.w	r1, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e87a:	9102      	str	r1, [sp, #8]
  rq.ogf = 0x3f;
 800e87c:	9201      	str	r2, [sp, #4]
  rq.rlen = 1;
 800e87e:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800e880:	f000 fea8 	bl	800f5d4 <hci_send_req>
 800e884:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800e886:	bfac      	ite	ge
 800e888:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800e88c:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800e88e:	b048      	add	sp, #288	; 0x120
 800e890:	bd10      	pop	{r4, pc}
 800e892:	bf00      	nop
 800e894:	0095003f 	.word	0x0095003f

0800e898 <aci_gap_get_bonded_devices>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_get_bonded_devices(uint8_t *Num_of_Addresses,
                                      Bonded_Device_Entry_t Bonded_Device_Entry[])
{
 800e898:	b570      	push	{r4, r5, r6, lr}
 800e89a:	b0a6      	sub	sp, #152	; 0x98
  struct hci_request rq;
  aci_gap_get_bonded_devices_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e89c:	ab06      	add	r3, sp, #24
 800e89e:	2480      	movs	r4, #128	; 0x80
 800e8a0:	4622      	mov	r2, r4
{
 800e8a2:	4606      	mov	r6, r0
 800e8a4:	460d      	mov	r5, r1
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	2100      	movs	r1, #0
 800e8aa:	f00d fcdb 	bl	801c264 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e8ae:	2100      	movs	r1, #0
  rq.ogf = 0x3f;
  rq.ocf = 0x0a3;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 800e8b0:	e9cd 0404 	strd	r0, r4, [sp, #16]
  rq.ogf = 0x3f;
 800e8b4:	4a0d      	ldr	r2, [pc, #52]	; (800e8ec <aci_gap_get_bonded_devices+0x54>)
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e8b6:	9103      	str	r1, [sp, #12]
  if (hci_send_req(&rq, FALSE) < 0)
 800e8b8:	4668      	mov	r0, sp
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e8ba:	e9cd 1101 	strd	r1, r1, [sp, #4]
  rq.ogf = 0x3f;
 800e8be:	9200      	str	r2, [sp, #0]
  if (hci_send_req(&rq, FALSE) < 0)
 800e8c0:	f000 fe88 	bl	800f5d4 <hci_send_req>
 800e8c4:	2800      	cmp	r0, #0
 800e8c6:	db0f      	blt.n	800e8e8 <aci_gap_get_bonded_devices+0x50>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800e8c8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800e8cc:	b94c      	cbnz	r4, 800e8e2 <aci_gap_get_bonded_devices+0x4a>
    return resp.Status;
  }
  *Num_of_Addresses = btoh(resp.Num_of_Addresses, 1);
 800e8ce:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800e8d2:	7032      	strb	r2, [r6, #0]
  BLUENRG_memcpy((void *) Bonded_Device_Entry, (const void *) resp.Bonded_Device_Entry, *Num_of_Addresses*sizeof(Bonded_Device_Entry_t));
 800e8d4:	f10d 011a 	add.w	r1, sp, #26
 800e8d8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e8dc:	4628      	mov	r0, r5
 800e8de:	f00d fc99 	bl	801c214 <memcpy>
  return BLE_STATUS_SUCCESS;
}
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	b026      	add	sp, #152	; 0x98
 800e8e6:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 800e8e8:	24ff      	movs	r4, #255	; 0xff
 800e8ea:	e7fa      	b.n	800e8e2 <aci_gap_get_bonded_devices+0x4a>
 800e8ec:	00a3003f 	.word	0x00a3003f

0800e8f0 <aci_gap_is_device_bonded>:
tBleStatus aci_gap_is_device_bonded(uint8_t Peer_Address_Type,
                                    uint8_t Peer_Address[6])
{
 800e8f0:	b510      	push	{r4, lr}
 800e8f2:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_is_device_bonded_cp0 *cp0 = (aci_gap_is_device_bonded_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 800e8f4:	aa07      	add	r2, sp, #28
 800e8f6:	f88d 001c 	strb.w	r0, [sp, #28]
  index_input += 1;
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 800e8fa:	6808      	ldr	r0, [r1, #0]
 800e8fc:	8889      	ldrh	r1, [r1, #4]
 800e8fe:	f8ad 1021 	strh.w	r1, [sp, #33]	; 0x21
  tBleStatus status = 0;
 800e902:	2300      	movs	r3, #0
  index_input += 6;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x0a4;
  rq.cparam = cmd_buffer;
 800e904:	9203      	str	r2, [sp, #12]
  rq.ogf = 0x3f;
 800e906:	490c      	ldr	r1, [pc, #48]	; (800e938 <aci_gap_is_device_bonded+0x48>)
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 800e908:	f8cd 001d 	str.w	r0, [sp, #29]
  tBleStatus status = 0;
 800e90c:	f10d 0403 	add.w	r4, sp, #3
  rq.clen = index_input;
 800e910:	2207      	movs	r2, #7
  rq.rparam = &status;
 800e912:	e9cd 2404 	strd	r2, r4, [sp, #16]
  rq.ogf = 0x3f;
 800e916:	9101      	str	r1, [sp, #4]
  rq.rlen = 1;
 800e918:	2201      	movs	r2, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800e91a:	4619      	mov	r1, r3
 800e91c:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800e91e:	f88d 3003 	strb.w	r3, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e922:	9302      	str	r3, [sp, #8]
  rq.rlen = 1;
 800e924:	9206      	str	r2, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800e926:	f000 fe55 	bl	800f5d4 <hci_send_req>
 800e92a:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800e92c:	bfac      	ite	ge
 800e92e:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800e932:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800e934:	b048      	add	sp, #288	; 0x120
 800e936:	bd10      	pop	{r4, pc}
 800e938:	00a4003f 	.word	0x00a4003f

0800e93c <aci_gap_numeric_comparison_value_confirm_yesno>:
tBleStatus aci_gap_numeric_comparison_value_confirm_yesno(uint16_t Connection_Handle,
                                                          uint8_t Confirm_Yes_No)
{
 800e93c:	b510      	push	{r4, lr}
 800e93e:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800e940:	aa07      	add	r2, sp, #28
  tBleStatus status = 0;
 800e942:	2300      	movs	r3, #0
  index_input += 2;
  cp0->Confirm_Yes_No = htob(Confirm_Yes_No, 1);
 800e944:	f88d 101e 	strb.w	r1, [sp, #30]
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x0a5;
  rq.cparam = cmd_buffer;
 800e948:	9203      	str	r2, [sp, #12]
  rq.ogf = 0x3f;
 800e94a:	490c      	ldr	r1, [pc, #48]	; (800e97c <aci_gap_numeric_comparison_value_confirm_yesno+0x40>)
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800e94c:	f8ad 001c 	strh.w	r0, [sp, #28]
  tBleStatus status = 0;
 800e950:	f10d 0403 	add.w	r4, sp, #3
  rq.clen = index_input;
 800e954:	2203      	movs	r2, #3
  rq.rparam = &status;
 800e956:	e9cd 2404 	strd	r2, r4, [sp, #16]
  rq.ogf = 0x3f;
 800e95a:	9101      	str	r1, [sp, #4]
  rq.rlen = 1;
 800e95c:	2201      	movs	r2, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800e95e:	4619      	mov	r1, r3
 800e960:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800e962:	f88d 3003 	strb.w	r3, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e966:	9302      	str	r3, [sp, #8]
  rq.rlen = 1;
 800e968:	9206      	str	r2, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800e96a:	f000 fe33 	bl	800f5d4 <hci_send_req>
 800e96e:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800e970:	bfac      	ite	ge
 800e972:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800e976:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800e978:	b048      	add	sp, #288	; 0x120
 800e97a:	bd10      	pop	{r4, pc}
 800e97c:	00a5003f 	.word	0x00a5003f

0800e980 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 800e980:	b500      	push	{lr}
 800e982:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  tBleStatus status = 0;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800e984:	4b0b      	ldr	r3, [pc, #44]	; (800e9b4 <aci_gatt_init+0x34>)
 800e986:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x101;
  rq.rparam = &status;
 800e988:	f10d 0307 	add.w	r3, sp, #7
  tBleStatus status = 0;
 800e98c:	2100      	movs	r1, #0
  rq.rparam = &status;
 800e98e:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800e990:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800e992:	2301      	movs	r3, #1
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e994:	e9cd 1103 	strd	r1, r1, [sp, #12]
  tBleStatus status = 0;
 800e998:	f88d 1007 	strb.w	r1, [sp, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e99c:	9105      	str	r1, [sp, #20]
  rq.rlen = 1;
 800e99e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800e9a0:	f000 fe18 	bl	800f5d4 <hci_send_req>
 800e9a4:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800e9a6:	bfac      	ite	ge
 800e9a8:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800e9ac:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800e9ae:	b009      	add	sp, #36	; 0x24
 800e9b0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e9b4:	0101003f 	.word	0x0101003f

0800e9b8 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800e9b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800e9bc:	2801      	cmp	r0, #1
{
 800e9be:	b0c9      	sub	sp, #292	; 0x124
 800e9c0:	4690      	mov	r8, r2
 800e9c2:	461e      	mov	r6, r3
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800e9c4:	d035      	beq.n	800ea32 <aci_gatt_add_service+0x7a>
 800e9c6:	2802      	cmp	r0, #2
 800e9c8:	bf0c      	ite	eq
 800e9ca:	2711      	moveq	r7, #17
 800e9cc:	2701      	movne	r7, #1
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e9ce:	2300      	movs	r3, #0
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
  index_input += 1;
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800e9d0:	2801      	cmp	r0, #1
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800e9d2:	ad07      	add	r5, sp, #28
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e9d4:	f8ad 3000 	strh.w	r3, [sp]
 800e9d8:	f88d 3002 	strb.w	r3, [sp, #2]
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800e9dc:	7028      	strb	r0, [r5, #0]
    switch (Service_UUID_Type) {
 800e9de:	d02a      	beq.n	800ea36 <aci_gatt_add_service+0x7e>
 800e9e0:	2802      	cmp	r0, #2
 800e9e2:	d12a      	bne.n	800ea3a <aci_gatt_add_service+0x82>
 800e9e4:	2410      	movs	r4, #16
      case 1: size = 2; break;
      case 2: size = 16; break;
      default: return BLE_STATUS_ERROR;
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800e9e6:	4622      	mov	r2, r4
 800e9e8:	f10d 001d 	add.w	r0, sp, #29
 800e9ec:	f00d fc12 	bl	801c214 <memcpy>
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800e9f0:	eb05 0907 	add.w	r9, r5, r7
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
    }
    index_input += 1;
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800e9f4:	4b13      	ldr	r3, [pc, #76]	; (800ea44 <aci_gatt_add_service+0x8c>)
      cp1->Service_Type = htob(Service_Type, 1);
 800e9f6:	f805 8007 	strb.w	r8, [r5, r7]
  rq.ogf = 0x3f;
 800e9fa:	2100      	movs	r1, #0
 800e9fc:	e9cd 3101 	strd	r3, r1, [sp, #4]
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800ea00:	f889 6001 	strb.w	r6, [r9, #1]
  rq.ocf = 0x102;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 800ea04:	2303      	movs	r3, #3
  rq.clen = index_input;
 800ea06:	3403      	adds	r4, #3
  if (hci_send_req(&rq, FALSE) < 0)
 800ea08:	a801      	add	r0, sp, #4
  rq.cparam = cmd_buffer;
 800ea0a:	9503      	str	r5, [sp, #12]
  rq.clen = index_input;
 800ea0c:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 800ea0e:	f8cd d014 	str.w	sp, [sp, #20]
  rq.rlen = sizeof(resp);
 800ea12:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800ea14:	f000 fdde 	bl	800f5d4 <hci_send_req>
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	db10      	blt.n	800ea3e <aci_gatt_add_service+0x86>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800ea1c:	f89d 0000 	ldrb.w	r0, [sp]
 800ea20:	b920      	cbnz	r0, 800ea2c <aci_gatt_add_service+0x74>
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800ea22:	9b00      	ldr	r3, [sp, #0]
 800ea24:	9a50      	ldr	r2, [sp, #320]	; 0x140
 800ea26:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800ea2a:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 800ea2c:	b049      	add	sp, #292	; 0x124
 800ea2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800ea32:	2703      	movs	r7, #3
 800ea34:	e7cb      	b.n	800e9ce <aci_gatt_add_service+0x16>
      case 1: size = 2; break;
 800ea36:	2402      	movs	r4, #2
 800ea38:	e7d5      	b.n	800e9e6 <aci_gatt_add_service+0x2e>
    switch (Service_UUID_Type) {
 800ea3a:	2047      	movs	r0, #71	; 0x47
 800ea3c:	e7f6      	b.n	800ea2c <aci_gatt_add_service+0x74>
    return BLE_STATUS_TIMEOUT;
 800ea3e:	20ff      	movs	r0, #255	; 0xff
 800ea40:	e7f4      	b.n	800ea2c <aci_gatt_add_service+0x74>
 800ea42:	bf00      	nop
 800ea44:	0102003f 	.word	0x0102003f

0800ea48 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800ea48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea4c:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800ea4e:	2c01      	cmp	r4, #1
{
 800ea50:	b0c8      	sub	sp, #288	; 0x120
 800ea52:	4611      	mov	r1, r2
 800ea54:	4698      	mov	r8, r3
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800ea56:	d042      	beq.n	800eade <aci_gatt_add_char+0x96>
 800ea58:	2c02      	cmp	r4, #2
 800ea5a:	bf0c      	ite	eq
 800ea5c:	2713      	moveq	r7, #19
 800ea5e:	2703      	movne	r7, #3
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ea60:	2300      	movs	r3, #0
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
  index_input += 1;
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800ea62:	2c01      	cmp	r4, #1
  cp0->Service_Handle = htob(Service_Handle, 2);
 800ea64:	ad07      	add	r5, sp, #28
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ea66:	f8ad 3000 	strh.w	r3, [sp]
 800ea6a:	f88d 3002 	strb.w	r3, [sp, #2]
  cp0->Service_Handle = htob(Service_Handle, 2);
 800ea6e:	8028      	strh	r0, [r5, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800ea70:	70ac      	strb	r4, [r5, #2]
    switch (Char_UUID_Type) {
 800ea72:	d036      	beq.n	800eae2 <aci_gatt_add_char+0x9a>
 800ea74:	2c02      	cmp	r4, #2
 800ea76:	d136      	bne.n	800eae6 <aci_gatt_add_char+0x9e>
 800ea78:	2410      	movs	r4, #16
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800ea7a:	19ee      	adds	r6, r5, r7
      case 1: size = 2; break;
      case 2: size = 16; break;
      default: return BLE_STATUS_ERROR;
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800ea7c:	4622      	mov	r2, r4
 800ea7e:	f10d 001f 	add.w	r0, sp, #31
 800ea82:	f00d fbc7 	bl	801c214 <memcpy>
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
    }
    index_input += 2;
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800ea86:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800ea8a:	f825 8007 	strh.w	r8, [r5, r7]
      cp1->Char_Properties = htob(Char_Properties, 1);
 800ea8e:	70b3      	strb	r3, [r6, #2]
    }
    index_input += 1;
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800ea90:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
 800ea94:	70f3      	strb	r3, [r6, #3]
    }
    index_input += 1;
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800ea96:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
 800ea9a:	7133      	strb	r3, [r6, #4]
    }
    index_input += 1;
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800ea9c:	f89d 3144 	ldrb.w	r3, [sp, #324]	; 0x144
 800eaa0:	7173      	strb	r3, [r6, #5]
    }
    index_input += 1;
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800eaa2:	f89d 3148 	ldrb.w	r3, [sp, #328]	; 0x148
 800eaa6:	71b3      	strb	r3, [r6, #6]
    }
    index_input += 1;
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800eaa8:	4b11      	ldr	r3, [pc, #68]	; (800eaf0 <aci_gatt_add_char+0xa8>)
  rq.ocf = 0x104;
  rq.cparam = cmd_buffer;
 800eaaa:	9503      	str	r5, [sp, #12]
  rq.ogf = 0x3f;
 800eaac:	2100      	movs	r1, #0
 800eaae:	e9cd 3101 	strd	r3, r1, [sp, #4]
  rq.clen = index_input;
 800eab2:	340a      	adds	r4, #10
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 800eab4:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 800eab6:	a801      	add	r0, sp, #4
  rq.clen = index_input;
 800eab8:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 800eaba:	f8cd d014 	str.w	sp, [sp, #20]
  rq.rlen = sizeof(resp);
 800eabe:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800eac0:	f000 fd88 	bl	800f5d4 <hci_send_req>
 800eac4:	2800      	cmp	r0, #0
 800eac6:	db10      	blt.n	800eaea <aci_gatt_add_char+0xa2>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800eac8:	f89d 0000 	ldrb.w	r0, [sp]
 800eacc:	b920      	cbnz	r0, 800ead8 <aci_gatt_add_char+0x90>
    return resp.Status;
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800eace:	9b00      	ldr	r3, [sp, #0]
 800ead0:	9a53      	ldr	r2, [sp, #332]	; 0x14c
 800ead2:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800ead6:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 800ead8:	b048      	add	sp, #288	; 0x120
 800eada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800eade:	2705      	movs	r7, #5
 800eae0:	e7be      	b.n	800ea60 <aci_gatt_add_char+0x18>
      case 1: size = 2; break;
 800eae2:	2402      	movs	r4, #2
 800eae4:	e7c9      	b.n	800ea7a <aci_gatt_add_char+0x32>
    switch (Char_UUID_Type) {
 800eae6:	2047      	movs	r0, #71	; 0x47
 800eae8:	e7f6      	b.n	800ead8 <aci_gatt_add_char+0x90>
    return BLE_STATUS_TIMEOUT;
 800eaea:	20ff      	movs	r0, #255	; 0xff
 800eaec:	e7f4      	b.n	800ead8 <aci_gatt_add_char+0x90>
 800eaee:	bf00      	nop
 800eaf0:	0104003f 	.word	0x0104003f

0800eaf4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800eaf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaf6:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800eaf8:	2700      	movs	r7, #0
{
 800eafa:	461c      	mov	r4, r3
  uint8_t index_input = 0;
  cp0->Service_Handle = htob(Service_Handle, 2);
 800eafc:	f8ad 001c 	strh.w	r0, [sp, #28]
  index_input += 2;
  cp0->Char_Handle = htob(Char_Handle, 2);
 800eb00:	f8ad 101e 	strh.w	r1, [sp, #30]
  index_input += 2;
  cp0->Val_Offset = htob(Val_Offset, 1);
 800eb04:	f88d 2020 	strb.w	r2, [sp, #32]
  index_input += 1;
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800eb08:	994e      	ldr	r1, [sp, #312]	; 0x138
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800eb0a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800eb0e:	461a      	mov	r2, r3
 800eb10:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  tBleStatus status = 0;
 800eb14:	f88d 7003 	strb.w	r7, [sp, #3]
    index_input += Char_Value_Length*sizeof(uint8_t);
 800eb18:	3406      	adds	r4, #6
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800eb1a:	f00d fb7b 	bl	801c214 <memcpy>
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800eb1e:	4b0b      	ldr	r3, [pc, #44]	; (800eb4c <aci_gatt_update_char_value+0x58>)
 800eb20:	9301      	str	r3, [sp, #4]
  tBleStatus status = 0;
 800eb22:	f10d 0603 	add.w	r6, sp, #3
  rq.ocf = 0x106;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800eb26:	2301      	movs	r3, #1
  cp0->Service_Handle = htob(Service_Handle, 2);
 800eb28:	ad07      	add	r5, sp, #28
  rq.clen = index_input;
 800eb2a:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 800eb2c:	4639      	mov	r1, r7
 800eb2e:	a801      	add	r0, sp, #4
  rq.rparam = &status;
 800eb30:	e9cd 4604 	strd	r4, r6, [sp, #16]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800eb34:	9702      	str	r7, [sp, #8]
  rq.cparam = cmd_buffer;
 800eb36:	9503      	str	r5, [sp, #12]
  rq.rlen = 1;
 800eb38:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800eb3a:	f000 fd4b 	bl	800f5d4 <hci_send_req>
 800eb3e:	42b8      	cmp	r0, r7
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800eb40:	bfac      	ite	ge
 800eb42:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800eb46:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800eb48:	b049      	add	sp, #292	; 0x124
 800eb4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb4c:	0106003f 	.word	0x0106003f

0800eb50 <aci_gatt_exchange_config>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_exchange_config(uint16_t Connection_Handle)
{
 800eb50:	b510      	push	{r4, lr}
 800eb52:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800eb54:	ab07      	add	r3, sp, #28
 800eb56:	f8ad 001c 	strh.w	r0, [sp, #28]
  index_input += 2;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x10b;
  rq.event = 0x0F;
 800eb5a:	480c      	ldr	r0, [pc, #48]	; (800eb8c <aci_gatt_exchange_config+0x3c>)
  rq.cparam = cmd_buffer;
 800eb5c:	9303      	str	r3, [sp, #12]
  rq.event = 0x0F;
 800eb5e:	220f      	movs	r2, #15
  tBleStatus status = 0;
 800eb60:	f10d 0403 	add.w	r4, sp, #3
  rq.clen = index_input;
 800eb64:	2302      	movs	r3, #2
  rq.event = 0x0F;
 800eb66:	e9cd 0201 	strd	r0, r2, [sp, #4]
  rq.rparam = &status;
 800eb6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
  tBleStatus status = 0;
 800eb6e:	2100      	movs	r1, #0
  rq.rlen = 1;
 800eb70:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800eb72:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800eb74:	f88d 1003 	strb.w	r1, [sp, #3]
  rq.rlen = 1;
 800eb78:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800eb7a:	f000 fd2b 	bl	800f5d4 <hci_send_req>
 800eb7e:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800eb80:	bfac      	ite	ge
 800eb82:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800eb86:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800eb88:	b048      	add	sp, #288	; 0x120
 800eb8a:	bd10      	pop	{r4, pc}
 800eb8c:	010b003f 	.word	0x010b003f

0800eb90 <aci_gatt_confirm_indication>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_confirm_indication(uint16_t Connection_Handle)
{
 800eb90:	b510      	push	{r4, lr}
 800eb92:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800eb94:	ab07      	add	r3, sp, #28
  index_input += 2;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x125;
  rq.cparam = cmd_buffer;
 800eb96:	9303      	str	r3, [sp, #12]
  tBleStatus status = 0;
 800eb98:	f10d 0403 	add.w	r4, sp, #3
  rq.clen = index_input;
 800eb9c:	2302      	movs	r3, #2
  tBleStatus status = 0;
 800eb9e:	2100      	movs	r1, #0
  rq.rparam = &status;
 800eba0:	e9cd 3404 	strd	r3, r4, [sp, #16]
  rq.ogf = 0x3f;
 800eba4:	4a09      	ldr	r2, [pc, #36]	; (800ebcc <aci_gatt_confirm_indication+0x3c>)
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800eba6:	f8ad 001c 	strh.w	r0, [sp, #28]
  rq.rlen = 1;
 800ebaa:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800ebac:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800ebae:	f88d 1003 	strb.w	r1, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ebb2:	9102      	str	r1, [sp, #8]
  rq.ogf = 0x3f;
 800ebb4:	9201      	str	r2, [sp, #4]
  rq.rlen = 1;
 800ebb6:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800ebb8:	f000 fd0c 	bl	800f5d4 <hci_send_req>
 800ebbc:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800ebbe:	bfac      	ite	ge
 800ebc0:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800ebc4:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800ebc6:	b048      	add	sp, #288	; 0x120
 800ebc8:	bd10      	pop	{r4, pc}
 800ebca:	bf00      	nop
 800ebcc:	0125003f 	.word	0x0125003f

0800ebd0 <aci_gatt_allow_read>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
{
 800ebd0:	b510      	push	{r4, lr}
 800ebd2:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800ebd4:	ab07      	add	r3, sp, #28
  index_input += 2;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x127;
  rq.cparam = cmd_buffer;
 800ebd6:	9303      	str	r3, [sp, #12]
  tBleStatus status = 0;
 800ebd8:	f10d 0403 	add.w	r4, sp, #3
  rq.clen = index_input;
 800ebdc:	2302      	movs	r3, #2
  tBleStatus status = 0;
 800ebde:	2100      	movs	r1, #0
  rq.rparam = &status;
 800ebe0:	e9cd 3404 	strd	r3, r4, [sp, #16]
  rq.ogf = 0x3f;
 800ebe4:	4a09      	ldr	r2, [pc, #36]	; (800ec0c <aci_gatt_allow_read+0x3c>)
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800ebe6:	f8ad 001c 	strh.w	r0, [sp, #28]
  rq.rlen = 1;
 800ebea:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800ebec:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800ebee:	f88d 1003 	strb.w	r1, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ebf2:	9102      	str	r1, [sp, #8]
  rq.ogf = 0x3f;
 800ebf4:	9201      	str	r2, [sp, #4]
  rq.rlen = 1;
 800ebf6:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800ebf8:	f000 fcec 	bl	800f5d4 <hci_send_req>
 800ebfc:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800ebfe:	bfac      	ite	ge
 800ec00:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800ec04:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800ec06:	b048      	add	sp, #288	; 0x120
 800ec08:	bd10      	pop	{r4, pc}
 800ec0a:	bf00      	nop
 800ec0c:	0127003f 	.word	0x0127003f

0800ec10 <aci_hal_get_firmware_details>:
                                        uint8_t *BTLE_Stack_version_minor,
                                        uint8_t *BTLE_Stack_version_patch,
                                        uint8_t *BTLE_Stack_development,
                                        uint16_t *BTLE_Stack_variant,
                                        uint16_t *BTLE_Stack_Build_Number)
{
 800ec10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct hci_request rq;
  aci_hal_get_firmware_details_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ec14:	f04f 080f 	mov.w	r8, #15
{
 800ec18:	b08a      	sub	sp, #40	; 0x28
 800ec1a:	4607      	mov	r7, r0
 800ec1c:	460e      	mov	r6, r1
 800ec1e:	4615      	mov	r5, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ec20:	2100      	movs	r1, #0
 800ec22:	4642      	mov	r2, r8
 800ec24:	4668      	mov	r0, sp
{
 800ec26:	461c      	mov	r4, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ec28:	f00d fb1c 	bl	801c264 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ec2c:	2100      	movs	r1, #0
  rq.ogf = 0x3f;
 800ec2e:	4b22      	ldr	r3, [pc, #136]	; (800ecb8 <aci_hal_get_firmware_details+0xa8>)
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ec30:	9107      	str	r1, [sp, #28]
  rq.ocf = 0x001;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
  if (hci_send_req(&rq, FALSE) < 0)
 800ec32:	a804      	add	r0, sp, #16
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ec34:	e9cd 1105 	strd	r1, r1, [sp, #20]
  rq.ogf = 0x3f;
 800ec38:	9304      	str	r3, [sp, #16]
  rq.rparam = &resp;
 800ec3a:	f8cd d020 	str.w	sp, [sp, #32]
  rq.rlen = sizeof(resp);
 800ec3e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800ec42:	f000 fcc7 	bl	800f5d4 <hci_send_req>
 800ec46:	2800      	cmp	r0, #0
 800ec48:	db33      	blt.n	800ecb2 <aci_hal_get_firmware_details+0xa2>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800ec4a:	f89d 0000 	ldrb.w	r0, [sp]
 800ec4e:	bb68      	cbnz	r0, 800ecac <aci_hal_get_firmware_details+0x9c>
    return resp.Status;
  }
  *DTM_version_major = btoh(resp.DTM_version_major, 1);
 800ec50:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ec54:	703b      	strb	r3, [r7, #0]
  *DTM_version_minor = btoh(resp.DTM_version_minor, 1);
 800ec56:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800ec5a:	7033      	strb	r3, [r6, #0]
  *DTM_version_patch = btoh(resp.DTM_version_patch, 1);
 800ec5c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ec60:	702b      	strb	r3, [r5, #0]
  *DTM_variant = btoh(resp.DTM_variant, 1);
 800ec62:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ec66:	7023      	strb	r3, [r4, #0]
  *DTM_Build_Number = btoh(resp.DTM_Build_Number, 2);
 800ec68:	9b01      	ldr	r3, [sp, #4]
 800ec6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ec6c:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800ec70:	8013      	strh	r3, [r2, #0]
  *BTLE_Stack_version_major = btoh(resp.BTLE_Stack_version_major, 1);
 800ec72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec74:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ec78:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_minor = btoh(resp.BTLE_Stack_version_minor, 1);
 800ec7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ec7c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800ec80:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_patch = btoh(resp.BTLE_Stack_version_patch, 1);
 800ec82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ec84:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800ec88:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_development = btoh(resp.BTLE_Stack_development, 1);
 800ec8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec8c:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800ec90:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_variant = btoh(resp.BTLE_Stack_variant, 2);
 800ec92:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ec96:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800ec9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ec9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800eca0:	8013      	strh	r3, [r2, #0]
  *BTLE_Stack_Build_Number = btoh(resp.BTLE_Stack_Build_Number, 2);
 800eca2:	9b03      	ldr	r3, [sp, #12]
 800eca4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800eca6:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800ecaa:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 800ecac:	b00a      	add	sp, #40	; 0x28
 800ecae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 800ecb2:	20ff      	movs	r0, #255	; 0xff
 800ecb4:	e7fa      	b.n	800ecac <aci_hal_get_firmware_details+0x9c>
 800ecb6:	bf00      	nop
 800ecb8:	0001003f 	.word	0x0001003f

0800ecbc <aci_hal_write_config_data>:
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800ecbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecbe:	b0c9      	sub	sp, #292	; 0x124
 800ecc0:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800ecc2:	2600      	movs	r6, #0
{
 800ecc4:	4611      	mov	r1, r2
  uint8_t index_input = 0;
  cp0->Offset = htob(Offset, 1);
 800ecc6:	f88d 001c 	strb.w	r0, [sp, #28]
  index_input += 1;
  cp0->Length = htob(Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 800ecca:	4622      	mov	r2, r4
 800eccc:	f10d 001e 	add.w	r0, sp, #30
  cp0->Length = htob(Length, 1);
 800ecd0:	f88d 401d 	strb.w	r4, [sp, #29]
  tBleStatus status = 0;
 800ecd4:	f88d 6003 	strb.w	r6, [sp, #3]
    index_input += Length*sizeof(uint8_t);
 800ecd8:	3402      	adds	r4, #2
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 800ecda:	f00d fa9b 	bl	801c214 <memcpy>
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800ecde:	4b0b      	ldr	r3, [pc, #44]	; (800ed0c <aci_hal_write_config_data+0x50>)
 800ece0:	9301      	str	r3, [sp, #4]
  tBleStatus status = 0;
 800ece2:	f10d 0503 	add.w	r5, sp, #3
  rq.ocf = 0x00c;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800ece6:	2301      	movs	r3, #1
  cp0->Offset = htob(Offset, 1);
 800ece8:	af07      	add	r7, sp, #28
  rq.clen = index_input;
 800ecea:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 800ecec:	4631      	mov	r1, r6
 800ecee:	a801      	add	r0, sp, #4
  rq.rparam = &status;
 800ecf0:	e9cd 4504 	strd	r4, r5, [sp, #16]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ecf4:	9602      	str	r6, [sp, #8]
  rq.cparam = cmd_buffer;
 800ecf6:	9703      	str	r7, [sp, #12]
  rq.rlen = 1;
 800ecf8:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800ecfa:	f000 fc6b 	bl	800f5d4 <hci_send_req>
 800ecfe:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800ed00:	bfac      	ite	ge
 800ed02:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800ed06:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800ed08:	b049      	add	sp, #292	; 0x124
 800ed0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed0c:	000c003f 	.word	0x000c003f

0800ed10 <aci_hal_read_config_data>:
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 800ed10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed14:	b0e8      	sub	sp, #416	; 0x1a0
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ed16:	ac07      	add	r4, sp, #28
 800ed18:	f04f 0880 	mov.w	r8, #128	; 0x80
{
 800ed1c:	4605      	mov	r5, r0
 800ed1e:	460f      	mov	r7, r1
 800ed20:	4616      	mov	r6, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ed22:	2100      	movs	r1, #0
 800ed24:	4642      	mov	r2, r8
 800ed26:	4620      	mov	r0, r4
 800ed28:	f00d fa9c 	bl	801c264 <memset>
  uint8_t index_input = 0;
  cp0->Offset = htob(Offset, 1);
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800ed2c:	4a11      	ldr	r2, [pc, #68]	; (800ed74 <aci_hal_read_config_data+0x64>)
  cp0->Offset = htob(Offset, 1);
 800ed2e:	f88d 509c 	strb.w	r5, [sp, #156]	; 0x9c
 800ed32:	ab27      	add	r3, sp, #156	; 0x9c
  rq.ogf = 0x3f;
 800ed34:	2100      	movs	r1, #0
  rq.ocf = 0x00d;
  rq.cparam = cmd_buffer;
 800ed36:	9303      	str	r3, [sp, #12]
  rq.clen = index_input;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
  if (hci_send_req(&rq, FALSE) < 0)
 800ed38:	a801      	add	r0, sp, #4
  rq.clen = index_input;
 800ed3a:	2301      	movs	r3, #1
  rq.ogf = 0x3f;
 800ed3c:	e9cd 2101 	strd	r2, r1, [sp, #4]
  rq.rparam = &resp;
 800ed40:	e9cd 3404 	strd	r3, r4, [sp, #16]
  rq.rlen = sizeof(resp);
 800ed44:	f8cd 8018 	str.w	r8, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800ed48:	f000 fc44 	bl	800f5d4 <hci_send_req>
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	db0e      	blt.n	800ed6e <aci_hal_read_config_data+0x5e>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800ed50:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800ed54:	b93d      	cbnz	r5, 800ed66 <aci_hal_read_config_data+0x56>
    return resp.Status;
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 800ed56:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800ed5a:	703a      	strb	r2, [r7, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 800ed5c:	f10d 011e 	add.w	r1, sp, #30
 800ed60:	4630      	mov	r0, r6
 800ed62:	f00d fa57 	bl	801c214 <memcpy>
  return BLE_STATUS_SUCCESS;
}
 800ed66:	4628      	mov	r0, r5
 800ed68:	b068      	add	sp, #416	; 0x1a0
 800ed6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 800ed6e:	25ff      	movs	r5, #255	; 0xff
 800ed70:	e7f9      	b.n	800ed66 <aci_hal_read_config_data+0x56>
 800ed72:	bf00      	nop
 800ed74:	000d003f 	.word	0x000d003f

0800ed78 <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800ed78:	b510      	push	{r4, lr}
 800ed7a:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->En_High_Power = htob(En_High_Power, 1);
 800ed7c:	aa07      	add	r2, sp, #28
  tBleStatus status = 0;
 800ed7e:	2300      	movs	r3, #0
  index_input += 1;
  cp0->PA_Level = htob(PA_Level, 1);
 800ed80:	f88d 101d 	strb.w	r1, [sp, #29]
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x00f;
  rq.cparam = cmd_buffer;
 800ed84:	9203      	str	r2, [sp, #12]
  rq.ogf = 0x3f;
 800ed86:	490c      	ldr	r1, [pc, #48]	; (800edb8 <aci_hal_set_tx_power_level+0x40>)
  cp0->En_High_Power = htob(En_High_Power, 1);
 800ed88:	f88d 001c 	strb.w	r0, [sp, #28]
  tBleStatus status = 0;
 800ed8c:	f10d 0403 	add.w	r4, sp, #3
  rq.clen = index_input;
 800ed90:	2202      	movs	r2, #2
  rq.rparam = &status;
 800ed92:	e9cd 2404 	strd	r2, r4, [sp, #16]
  rq.ogf = 0x3f;
 800ed96:	9101      	str	r1, [sp, #4]
  rq.rlen = 1;
 800ed98:	2201      	movs	r2, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800ed9e:	f88d 3003 	strb.w	r3, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800eda2:	9302      	str	r3, [sp, #8]
  rq.rlen = 1;
 800eda4:	9206      	str	r2, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800eda6:	f000 fc15 	bl	800f5d4 <hci_send_req>
 800edaa:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800edac:	bfac      	ite	ge
 800edae:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800edb2:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800edb4:	b048      	add	sp, #288	; 0x120
 800edb6:	bd10      	pop	{r4, pc}
 800edb8:	000f003f 	.word	0x000f003f

0800edbc <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req(uint16_t Connection_Handle,
                                                     uint16_t Conn_Interval_Min,
                                                     uint16_t Conn_Interval_Max,
                                                     uint16_t Slave_latency,
                                                     uint16_t Timeout_Multiplier)
{
 800edbc:	b570      	push	{r4, r5, r6, lr}
 800edbe:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800edc0:	2600      	movs	r6, #0
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
  index_input += 2;
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
  index_input += 2;
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 800edc2:	f8ad 2020 	strh.w	r2, [sp, #32]
  index_input += 2;
  cp0->Slave_latency = htob(Slave_latency, 2);
 800edc6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  cp0->Timeout_Multiplier = htob(Timeout_Multiplier, 2);
  index_input += 2;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x181;
  rq.event = 0x0F;
 800edca:	4a11      	ldr	r2, [pc, #68]	; (800ee10 <aci_l2cap_connection_parameter_update_req+0x54>)
  cp0->Timeout_Multiplier = htob(Timeout_Multiplier, 2);
 800edcc:	f8bd 3130 	ldrh.w	r3, [sp, #304]	; 0x130
 800edd0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  rq.event = 0x0F;
 800edd4:	230f      	movs	r3, #15
 800edd6:	e9cd 2301 	strd	r2, r3, [sp, #4]
  tBleStatus status = 0;
 800edda:	f10d 0503 	add.w	r5, sp, #3
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800edde:	230a      	movs	r3, #10
  rq.rparam = &status;
 800ede0:	e9cd 3504 	strd	r3, r5, [sp, #16]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800ede4:	f8ad 001c 	strh.w	r0, [sp, #28]
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 800ede8:	f8ad 101e 	strh.w	r1, [sp, #30]
  rq.rlen = 1;
 800edec:	2301      	movs	r3, #1
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800edee:	ac07      	add	r4, sp, #28
  if (hci_send_req(&rq, FALSE) < 0)
 800edf0:	4631      	mov	r1, r6
 800edf2:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800edf4:	f88d 6003 	strb.w	r6, [sp, #3]
  rq.cparam = cmd_buffer;
 800edf8:	9403      	str	r4, [sp, #12]
  rq.rlen = 1;
 800edfa:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800edfc:	f000 fbea 	bl	800f5d4 <hci_send_req>
 800ee00:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800ee02:	bfac      	ite	ge
 800ee04:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800ee08:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800ee0a:	b048      	add	sp, #288	; 0x120
 800ee0c:	bd70      	pop	{r4, r5, r6, pc}
 800ee0e:	bf00      	nop
 800ee10:	0181003f 	.word	0x0181003f

0800ee14 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 800ee14:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
  hci_disconnection_complete_event(rp0->Status,
 800ee16:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800ee1a:	78c2      	ldrb	r2, [r0, #3]
 800ee1c:	7800      	ldrb	r0, [r0, #0]
 800ee1e:	f003 fce3 	bl	80127e8 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
}
 800ee22:	2000      	movs	r0, #0
 800ee24:	bd08      	pop	{r3, pc}

0800ee26 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 800ee26:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
  hci_encryption_change_event(rp0->Status,
 800ee28:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800ee2c:	78c2      	ldrb	r2, [r0, #3]
 800ee2e:	7800      	ldrb	r0, [r0, #0]
 800ee30:	f003 fe67 	bl	8012b02 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
}
 800ee34:	2000      	movs	r0, #0
 800ee36:	bd08      	pop	{r3, pc}

0800ee38 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 800ee38:	b507      	push	{r0, r1, r2, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
  hci_read_remote_version_information_complete_event(rp0->Status,
 800ee3a:	88c3      	ldrh	r3, [r0, #6]
 800ee3c:	9300      	str	r3, [sp, #0]
 800ee3e:	8883      	ldrh	r3, [r0, #4]
 800ee40:	78c2      	ldrb	r2, [r0, #3]
 800ee42:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800ee46:	7800      	ldrb	r0, [r0, #0]
 800ee48:	f000 fac0 	bl	800f3cc <hci_read_remote_version_information_complete_event>
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
}
 800ee4c:	2000      	movs	r0, #0
 800ee4e:	b003      	add	sp, #12
 800ee50:	f85d fb04 	ldr.w	pc, [sp], #4

0800ee54 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 800ee54:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
  hci_hardware_error_event(rp0->Hardware_Code);
 800ee56:	7800      	ldrb	r0, [r0, #0]
 800ee58:	f003 fde0 	bl	8012a1c <hci_hardware_error_event>

  return status;
}
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	bd08      	pop	{r3, pc}

0800ee60 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 800ee60:	b570      	push	{r4, r5, r6, lr}
 800ee62:	b0a0      	sub	sp, #128	; 0x80
 800ee64:	466b      	mov	r3, sp
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800ee66:	7804      	ldrb	r4, [r0, #0]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	4619      	mov	r1, r3
 800ee6c:	4294      	cmp	r4, r2
 800ee6e:	f103 0304 	add.w	r3, r3, #4
 800ee72:	dc05      	bgt.n	800ee80 <hci_number_of_completed_packets_event_process+0x20>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
    size += 2;
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
    size += 2;
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 800ee74:	4620      	mov	r0, r4
 800ee76:	f000 faaa 	bl	800f3ce <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
}
 800ee7a:	2000      	movs	r0, #0
 800ee7c:	b020      	add	sp, #128	; 0x80
 800ee7e:	bd70      	pop	{r4, r5, r6, pc}
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 800ee80:	eb00 0582 	add.w	r5, r0, r2, lsl #2
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800ee84:	3201      	adds	r2, #1
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 800ee86:	f8b5 6001 	ldrh.w	r6, [r5, #1]
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 800ee8a:	f8b5 5003 	ldrh.w	r5, [r5, #3]
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 800ee8e:	f823 6c04 	strh.w	r6, [r3, #-4]
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 800ee92:	f823 5c02 	strh.w	r5, [r3, #-2]
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800ee96:	e7e9      	b.n	800ee6c <hci_number_of_completed_packets_event_process+0xc>

0800ee98 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 800ee98:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
  hci_data_buffer_overflow_event(rp0->Link_Type);
 800ee9a:	7800      	ldrb	r0, [r0, #0]
 800ee9c:	f000 fa98 	bl	800f3d0 <hci_data_buffer_overflow_event>

  return status;
}
 800eea0:	2000      	movs	r0, #0
 800eea2:	bd08      	pop	{r3, pc}

0800eea4 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 800eea4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
  hci_encryption_key_refresh_complete_event(rp0->Status,
 800eea6:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800eeaa:	7800      	ldrb	r0, [r0, #0]
 800eeac:	f000 fa91 	bl	800f3d2 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
}
 800eeb0:	2000      	movs	r0, #0
 800eeb2:	bd08      	pop	{r3, pc}

0800eeb4 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 800eeb4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
  aci_blue_initialized_event(rp0->Reason_Code);
 800eeb6:	7800      	ldrb	r0, [r0, #0]
 800eeb8:	f000 faad 	bl	800f416 <aci_blue_initialized_event>

  return status;
}
 800eebc:	2000      	movs	r0, #0
 800eebe:	bd08      	pop	{r3, pc}

0800eec0 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 800eec0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
  aci_blue_events_lost_event(rp0->Lost_Events);
 800eec2:	f000 faa9 	bl	800f418 <aci_blue_events_lost_event>

  return status;
}
 800eec6:	2000      	movs	r0, #0
 800eec8:	bd08      	pop	{r3, pc}

0800eeca <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 800eeca:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
  aci_blue_crash_info_event(rp0->Crash_Type,
 800eecc:	4603      	mov	r3, r0
{
 800eece:	b089      	sub	sp, #36	; 0x24
 800eed0:	4601      	mov	r1, r0
  aci_blue_crash_info_event(rp0->Crash_Type,
 800eed2:	f813 0b26 	ldrb.w	r0, [r3], #38
 800eed6:	9307      	str	r3, [sp, #28]
 800eed8:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 800eedc:	9306      	str	r3, [sp, #24]
 800eede:	f8d1 3021 	ldr.w	r3, [r1, #33]	; 0x21
 800eee2:	9305      	str	r3, [sp, #20]
 800eee4:	f8d1 301d 	ldr.w	r3, [r1, #29]
 800eee8:	9304      	str	r3, [sp, #16]
 800eeea:	f8d1 3019 	ldr.w	r3, [r1, #25]
 800eeee:	9303      	str	r3, [sp, #12]
 800eef0:	f8d1 3015 	ldr.w	r3, [r1, #21]
 800eef4:	9302      	str	r3, [sp, #8]
 800eef6:	f8d1 3011 	ldr.w	r3, [r1, #17]
 800eefa:	9301      	str	r3, [sp, #4]
 800eefc:	f8d1 300d 	ldr.w	r3, [r1, #13]
 800ef00:	9300      	str	r3, [sp, #0]
 800ef02:	f8d1 3009 	ldr.w	r3, [r1, #9]
 800ef06:	f8d1 2005 	ldr.w	r2, [r1, #5]
 800ef0a:	f8d1 1001 	ldr.w	r1, [r1, #1]
 800ef0e:	f000 fa84 	bl	800f41a <aci_blue_crash_info_event>
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);

  return status;
}
 800ef12:	2000      	movs	r0, #0
 800ef14:	b009      	add	sp, #36	; 0x24
 800ef16:	f85d fb04 	ldr.w	pc, [sp], #4

0800ef1a <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 800ef1a:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 800ef1c:	f8d0 2002 	ldr.w	r2, [r0, #2]
 800ef20:	7841      	ldrb	r1, [r0, #1]
 800ef22:	7800      	ldrb	r0, [r0, #0]
 800ef24:	f000 fa7a 	bl	800f41c <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
}
 800ef28:	2000      	movs	r0, #0
 800ef2a:	bd08      	pop	{r3, pc}

0800ef2c <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 800ef2c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
  aci_hal_scan_req_report_event(rp0->RSSI,
 800ef2e:	1c82      	adds	r2, r0, #2
 800ef30:	7841      	ldrb	r1, [r0, #1]
 800ef32:	f990 0000 	ldrsb.w	r0, [r0]
 800ef36:	f000 fa72 	bl	800f41e <aci_hal_scan_req_report_event>
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);

  return status;
}
 800ef3a:	2000      	movs	r0, #0
 800ef3c:	bd08      	pop	{r3, pc}

0800ef3e <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 800ef3e:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800ef40:	1c82      	adds	r2, r0, #2
 800ef42:	7841      	ldrb	r1, [r0, #1]
 800ef44:	7800      	ldrb	r0, [r0, #0]
 800ef46:	f000 fa6b 	bl	800f420 <aci_hal_fw_error_event>
                         rp0->Data_Length,
                         rp0->Data);

  return status;
}
 800ef4a:	2000      	movs	r0, #0
 800ef4c:	bd08      	pop	{r3, pc}

0800ef4e <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 800ef4e:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_limited_discoverable_event();
 800ef50:	f000 fa47 	bl	800f3e2 <aci_gap_limited_discoverable_event>

  return status;
}
 800ef54:	2000      	movs	r0, #0
 800ef56:	bd08      	pop	{r3, pc}

0800ef58 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 800ef58:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 800ef5a:	78c2      	ldrb	r2, [r0, #3]
 800ef5c:	7881      	ldrb	r1, [r0, #2]
 800ef5e:	8800      	ldrh	r0, [r0, #0]
 800ef60:	f003 fd76 	bl	8012a50 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
}
 800ef64:	2000      	movs	r0, #0
 800ef66:	bd08      	pop	{r3, pc}

0800ef68 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 800ef68:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 800ef6a:	8800      	ldrh	r0, [r0, #0]
 800ef6c:	f003 fdac 	bl	8012ac8 <aci_gap_pass_key_req_event>

  return status;
}
 800ef70:	2000      	movs	r0, #0
 800ef72:	bd08      	pop	{r3, pc}

0800ef74 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 800ef74:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 800ef76:	8800      	ldrh	r0, [r0, #0]
 800ef78:	f000 fa34 	bl	800f3e4 <aci_gap_authorization_req_event>

  return status;
}
 800ef7c:	2000      	movs	r0, #0
 800ef7e:	bd08      	pop	{r3, pc}

0800ef80 <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 800ef80:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_slave_security_initiated_event();
 800ef82:	f000 fa30 	bl	800f3e6 <aci_gap_slave_security_initiated_event>

  return status;
}
 800ef86:	2000      	movs	r0, #0
 800ef88:	bd08      	pop	{r3, pc}

0800ef8a <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 800ef8a:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_bond_lost_event();
 800ef8c:	f003 fd58 	bl	8012a40 <aci_gap_bond_lost_event>

  return status;
}
 800ef90:	2000      	movs	r0, #0
 800ef92:	bd08      	pop	{r3, pc}

0800ef94 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 800ef94:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800ef96:	1cc3      	adds	r3, r0, #3
 800ef98:	7882      	ldrb	r2, [r0, #2]
 800ef9a:	7841      	ldrb	r1, [r0, #1]
 800ef9c:	7800      	ldrb	r0, [r0, #0]
 800ef9e:	f000 fa23 	bl	800f3e8 <aci_gap_proc_complete_event>
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);

  return status;
}
 800efa2:	2000      	movs	r0, #0
 800efa4:	bd08      	pop	{r3, pc}

0800efa6 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 800efa6:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 800efa8:	8800      	ldrh	r0, [r0, #0]
 800efaa:	f000 fa1e 	bl	800f3ea <aci_gap_addr_not_resolved_event>

  return status;
}
 800efae:	2000      	movs	r0, #0
 800efb0:	bd08      	pop	{r3, pc}

0800efb2 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 800efb2:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 800efb4:	f8d0 1002 	ldr.w	r1, [r0, #2]
 800efb8:	8800      	ldrh	r0, [r0, #0]
 800efba:	f003 fd9f 	bl	8012afc <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
}
 800efbe:	2000      	movs	r0, #0
 800efc0:	bd08      	pop	{r3, pc}

0800efc2 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 800efc2:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 800efc4:	7881      	ldrb	r1, [r0, #2]
 800efc6:	8800      	ldrh	r0, [r0, #0]
 800efc8:	f000 fa10 	bl	800f3ec <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
}
 800efcc:	2000      	movs	r0, #0
 800efce:	bd08      	pop	{r3, pc}

0800efd0 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 800efd0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 800efd2:	8841      	ldrh	r1, [r0, #2]
 800efd4:	8800      	ldrh	r0, [r0, #0]
 800efd6:	f003 fcdb 	bl	8012990 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
}
 800efda:	2000      	movs	r0, #0
 800efdc:	bd08      	pop	{r3, pc}

0800efde <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 800efde:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800efe0:	1cc2      	adds	r2, r0, #3
 800efe2:	7881      	ldrb	r1, [r0, #2]
 800efe4:	8800      	ldrh	r0, [r0, #0]
 800efe6:	f000 fa13 	bl	800f410 <aci_l2cap_proc_timeout_event>
                               rp0->Data_Length,
                               rp0->Data);

  return status;
}
 800efea:	2000      	movs	r0, #0
 800efec:	bd08      	pop	{r3, pc}

0800efee <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 800efee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 800eff0:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 800eff4:	9302      	str	r3, [sp, #8]
 800eff6:	f8b0 3009 	ldrh.w	r3, [r0, #9]
 800effa:	9301      	str	r3, [sp, #4]
 800effc:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 800f000:	9300      	str	r3, [sp, #0]
 800f002:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 800f006:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800f00a:	7881      	ldrb	r1, [r0, #2]
 800f00c:	8800      	ldrh	r0, [r0, #0]
 800f00e:	f000 fa00 	bl	800f412 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
}
 800f012:	2000      	movs	r0, #0
 800f014:	b005      	add	sp, #20
 800f016:	f85d fb04 	ldr.w	pc, [sp], #4

0800f01a <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 800f01a:	b507      	push	{r0, r1, r2, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800f01c:	4603      	mov	r3, r0
{
 800f01e:	4601      	mov	r1, r0
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800f020:	f833 0b06 	ldrh.w	r0, [r3], #6
 800f024:	9300      	str	r3, [sp, #0]
 800f026:	794b      	ldrb	r3, [r1, #5]
 800f028:	f8b1 2003 	ldrh.w	r2, [r1, #3]
 800f02c:	7889      	ldrb	r1, [r1, #2]
 800f02e:	f000 f9f1 	bl	800f414 <aci_l2cap_command_reject_event>
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);

  return status;
}
 800f032:	2000      	movs	r0, #0
 800f034:	b003      	add	sp, #12
 800f036:	f85d fb04 	ldr.w	pc, [sp], #4

0800f03a <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 800f03a:	b507      	push	{r0, r1, r2, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800f03c:	4603      	mov	r3, r0
{
 800f03e:	4601      	mov	r1, r0
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800f040:	f833 0b08 	ldrh.w	r0, [r3], #8
 800f044:	9300      	str	r3, [sp, #0]
 800f046:	88cb      	ldrh	r3, [r1, #6]
 800f048:	888a      	ldrh	r2, [r1, #4]
 800f04a:	8849      	ldrh	r1, [r1, #2]
 800f04c:	f003 fc0c 	bl	8012868 <aci_gatt_attribute_modified_event>
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);

  return status;
}
 800f050:	2000      	movs	r0, #0
 800f052:	b003      	add	sp, #12
 800f054:	f85d fb04 	ldr.w	pc, [sp], #4

0800f058 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 800f058:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 800f05a:	8800      	ldrh	r0, [r0, #0]
 800f05c:	f000 f9c7 	bl	800f3ee <aci_gatt_proc_timeout_event>

  return status;
}
 800f060:	2000      	movs	r0, #0
 800f062:	bd08      	pop	{r3, pc}

0800f064 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 800f064:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 800f066:	8841      	ldrh	r1, [r0, #2]
 800f068:	8800      	ldrh	r0, [r0, #0]
 800f06a:	f003 fc93 	bl	8012994 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
}
 800f06e:	2000      	movs	r0, #0
 800f070:	bd08      	pop	{r3, pc}

0800f072 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 800f072:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800f074:	1d03      	adds	r3, r0, #4
 800f076:	78c2      	ldrb	r2, [r0, #3]
 800f078:	7881      	ldrb	r1, [r0, #2]
 800f07a:	8800      	ldrh	r0, [r0, #0]
 800f07c:	f000 f9b8 	bl	800f3f0 <aci_att_find_info_resp_event>
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);

  return status;
}
 800f080:	2000      	movs	r0, #0
 800f082:	bd08      	pop	{r3, pc}

0800f084 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 800f084:	b570      	push	{r4, r5, r6, lr}
 800f086:	b0a0      	sub	sp, #128	; 0x80
 800f088:	466b      	mov	r3, sp
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
  uint8_t size = 3;
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800f08a:	7881      	ldrb	r1, [r0, #2]
 800f08c:	2400      	movs	r4, #0
 800f08e:	461a      	mov	r2, r3
 800f090:	42a1      	cmp	r1, r4
 800f092:	f103 0304 	add.w	r3, r3, #4
 800f096:	dc05      	bgt.n	800f0a4 <aci_att_find_by_type_value_resp_event_process+0x20>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
    size += 2;
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
    size += 2;
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 800f098:	8800      	ldrh	r0, [r0, #0]
 800f09a:	f000 f9aa 	bl	800f3f2 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
}
 800f09e:	2000      	movs	r0, #0
 800f0a0:	b020      	add	sp, #128	; 0x80
 800f0a2:	bd70      	pop	{r4, r5, r6, pc}
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 800f0a4:	eb00 0584 	add.w	r5, r0, r4, lsl #2
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800f0a8:	3401      	adds	r4, #1
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 800f0aa:	f8b5 6003 	ldrh.w	r6, [r5, #3]
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 800f0ae:	f8b5 5005 	ldrh.w	r5, [r5, #5]
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 800f0b2:	f823 6c04 	strh.w	r6, [r3, #-4]
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 800f0b6:	f823 5c02 	strh.w	r5, [r3, #-2]
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800f0ba:	e7e9      	b.n	800f090 <aci_att_find_by_type_value_resp_event_process+0xc>

0800f0bc <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 800f0bc:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800f0be:	1d03      	adds	r3, r0, #4
 800f0c0:	78c2      	ldrb	r2, [r0, #3]
 800f0c2:	7881      	ldrb	r1, [r0, #2]
 800f0c4:	8800      	ldrh	r0, [r0, #0]
 800f0c6:	f000 f995 	bl	800f3f4 <aci_att_read_by_type_resp_event>
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);

  return status;
}
 800f0ca:	2000      	movs	r0, #0
 800f0cc:	bd08      	pop	{r3, pc}

0800f0ce <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 800f0ce:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
  aci_att_read_resp_event(rp0->Connection_Handle,
 800f0d0:	1cc2      	adds	r2, r0, #3
 800f0d2:	7881      	ldrb	r1, [r0, #2]
 800f0d4:	8800      	ldrh	r0, [r0, #0]
 800f0d6:	f000 f98e 	bl	800f3f6 <aci_att_read_resp_event>
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);

  return status;
}
 800f0da:	2000      	movs	r0, #0
 800f0dc:	bd08      	pop	{r3, pc}

0800f0de <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 800f0de:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800f0e0:	1cc2      	adds	r2, r0, #3
 800f0e2:	7881      	ldrb	r1, [r0, #2]
 800f0e4:	8800      	ldrh	r0, [r0, #0]
 800f0e6:	f000 f987 	bl	800f3f8 <aci_att_read_blob_resp_event>
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);

  return status;
}
 800f0ea:	2000      	movs	r0, #0
 800f0ec:	bd08      	pop	{r3, pc}

0800f0ee <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 800f0ee:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800f0f0:	1cc2      	adds	r2, r0, #3
 800f0f2:	7881      	ldrb	r1, [r0, #2]
 800f0f4:	8800      	ldrh	r0, [r0, #0]
 800f0f6:	f000 f980 	bl	800f3fa <aci_att_read_multiple_resp_event>
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);

  return status;
}
 800f0fa:	2000      	movs	r0, #0
 800f0fc:	bd08      	pop	{r3, pc}

0800f0fe <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 800f0fe:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800f100:	1d03      	adds	r3, r0, #4
 800f102:	78c2      	ldrb	r2, [r0, #3]
 800f104:	7881      	ldrb	r1, [r0, #2]
 800f106:	8800      	ldrh	r0, [r0, #0]
 800f108:	f000 f978 	bl	800f3fc <aci_att_read_by_group_type_resp_event>
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);

  return status;
}
 800f10c:	2000      	movs	r0, #0
 800f10e:	bd08      	pop	{r3, pc}

0800f110 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 800f110:	b507      	push	{r0, r1, r2, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800f112:	4603      	mov	r3, r0
{
 800f114:	4601      	mov	r1, r0
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800f116:	f833 0b07 	ldrh.w	r0, [r3], #7
 800f11a:	9300      	str	r3, [sp, #0]
 800f11c:	798b      	ldrb	r3, [r1, #6]
 800f11e:	888a      	ldrh	r2, [r1, #4]
 800f120:	8849      	ldrh	r1, [r1, #2]
 800f122:	f000 f96c 	bl	800f3fe <aci_att_prepare_write_resp_event>
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);

  return status;
}
 800f126:	2000      	movs	r0, #0
 800f128:	b003      	add	sp, #12
 800f12a:	f85d fb04 	ldr.w	pc, [sp], #4

0800f12e <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 800f12e:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 800f130:	8800      	ldrh	r0, [r0, #0]
 800f132:	f000 f965 	bl	800f400 <aci_att_exec_write_resp_event>

  return status;
}
 800f136:	2000      	movs	r0, #0
 800f138:	bd08      	pop	{r3, pc}

0800f13a <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 800f13a:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
  aci_gatt_indication_event(rp0->Connection_Handle,
 800f13c:	1d43      	adds	r3, r0, #5
 800f13e:	7902      	ldrb	r2, [r0, #4]
 800f140:	8841      	ldrh	r1, [r0, #2]
 800f142:	8800      	ldrh	r0, [r0, #0]
 800f144:	f003 fc56 	bl	80129f4 <aci_gatt_indication_event>
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);

  return status;
}
 800f148:	2000      	movs	r0, #0
 800f14a:	bd08      	pop	{r3, pc}

0800f14c <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 800f14c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
  aci_gatt_notification_event(rp0->Connection_Handle,
 800f14e:	1d43      	adds	r3, r0, #5
 800f150:	7902      	ldrb	r2, [r0, #4]
 800f152:	8841      	ldrh	r1, [r0, #2]
 800f154:	8800      	ldrh	r0, [r0, #0]
 800f156:	f000 f954 	bl	800f402 <aci_gatt_notification_event>
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);

  return status;
}
 800f15a:	2000      	movs	r0, #0
 800f15c:	bd08      	pop	{r3, pc}

0800f15e <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 800f15e:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 800f160:	7881      	ldrb	r1, [r0, #2]
 800f162:	8800      	ldrh	r0, [r0, #0]
 800f164:	f003 fc22 	bl	80129ac <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
}
 800f168:	2000      	movs	r0, #0
 800f16a:	bd08      	pop	{r3, pc}

0800f16c <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 800f16c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 800f16e:	7943      	ldrb	r3, [r0, #5]
 800f170:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800f174:	7881      	ldrb	r1, [r0, #2]
 800f176:	8800      	ldrh	r0, [r0, #0]
 800f178:	f000 f944 	bl	800f404 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
}
 800f17c:	2000      	movs	r0, #0
 800f17e:	bd08      	pop	{r3, pc}

0800f180 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 800f180:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800f182:	1d43      	adds	r3, r0, #5
 800f184:	7902      	ldrb	r2, [r0, #4]
 800f186:	8841      	ldrh	r1, [r0, #2]
 800f188:	8800      	ldrh	r0, [r0, #0]
 800f18a:	f000 f93c 	bl	800f406 <aci_gatt_disc_read_char_by_uuid_resp_event>
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);

  return status;
}
 800f18e:	2000      	movs	r0, #0
 800f190:	bd08      	pop	{r3, pc}

0800f192 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 800f192:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800f194:	1d43      	adds	r3, r0, #5
 800f196:	7902      	ldrb	r2, [r0, #4]
 800f198:	8841      	ldrh	r1, [r0, #2]
 800f19a:	8800      	ldrh	r0, [r0, #0]
 800f19c:	f000 f934 	bl	800f408 <aci_gatt_write_permit_req_event>
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);

  return status;
}
 800f1a0:	2000      	movs	r0, #0
 800f1a2:	bd08      	pop	{r3, pc}

0800f1a4 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 800f1a4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 800f1a6:	8882      	ldrh	r2, [r0, #4]
 800f1a8:	8841      	ldrh	r1, [r0, #2]
 800f1aa:	8800      	ldrh	r0, [r0, #0]
 800f1ac:	f003 fb3a 	bl	8012824 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
}
 800f1b0:	2000      	movs	r0, #0
 800f1b2:	bd08      	pop	{r3, pc}

0800f1b4 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 800f1b4:	b530      	push	{r4, r5, lr}
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
  uint8_t size = 3;
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800f1b6:	7885      	ldrb	r5, [r0, #2]
{
 800f1b8:	b0a1      	sub	sp, #132	; 0x84
 800f1ba:	4604      	mov	r4, r0
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 800f1bc:	006a      	lsls	r2, r5, #1
 800f1be:	1cc1      	adds	r1, r0, #3
 800f1c0:	4668      	mov	r0, sp
 800f1c2:	f00d f827 	bl	801c214 <memcpy>
    size += 2;
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 800f1c6:	8820      	ldrh	r0, [r4, #0]
 800f1c8:	466a      	mov	r2, sp
 800f1ca:	4629      	mov	r1, r5
 800f1cc:	f000 f91d 	bl	800f40a <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
}
 800f1d0:	2000      	movs	r0, #0
 800f1d2:	b021      	add	sp, #132	; 0x84
 800f1d4:	bd30      	pop	{r4, r5, pc}

0800f1d6 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 800f1d6:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 800f1d8:	8841      	ldrh	r1, [r0, #2]
 800f1da:	8800      	ldrh	r0, [r0, #0]
 800f1dc:	f002 f854 	bl	8011288 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
}
 800f1e0:	2000      	movs	r0, #0
 800f1e2:	bd08      	pop	{r3, pc}

0800f1e4 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 800f1e4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 800f1e6:	8800      	ldrh	r0, [r0, #0]
 800f1e8:	f000 f910 	bl	800f40c <aci_gatt_server_confirmation_event>

  return status;
}
 800f1ec:	2000      	movs	r0, #0
 800f1ee:	bd08      	pop	{r3, pc}

0800f1f0 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 800f1f0:	b507      	push	{r0, r1, r2, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800f1f2:	4603      	mov	r3, r0
{
 800f1f4:	4601      	mov	r1, r0
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800f1f6:	f833 0b07 	ldrh.w	r0, [r3], #7
 800f1fa:	9300      	str	r3, [sp, #0]
 800f1fc:	798b      	ldrb	r3, [r1, #6]
 800f1fe:	888a      	ldrh	r2, [r1, #4]
 800f200:	8849      	ldrh	r1, [r1, #2]
 800f202:	f000 f904 	bl	800f40e <aci_gatt_prepare_write_permit_req_event>
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);

  return status;
}
 800f206:	2000      	movs	r0, #0
 800f208:	b003      	add	sp, #12
 800f20a:	f85d fb04 	ldr.w	pc, [sp], #4

0800f20e <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 800f20e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
  hci_le_connection_complete_event(rp0->Status,
 800f210:	7c43      	ldrb	r3, [r0, #17]
 800f212:	9304      	str	r3, [sp, #16]
 800f214:	f8b0 300f 	ldrh.w	r3, [r0, #15]
 800f218:	9303      	str	r3, [sp, #12]
 800f21a:	f8b0 300d 	ldrh.w	r3, [r0, #13]
 800f21e:	9302      	str	r3, [sp, #8]
 800f220:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 800f224:	9301      	str	r3, [sp, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 800f226:	1d43      	adds	r3, r0, #5
  hci_le_connection_complete_event(rp0->Status,
 800f228:	9300      	str	r3, [sp, #0]
 800f22a:	7903      	ldrb	r3, [r0, #4]
 800f22c:	78c2      	ldrb	r2, [r0, #3]
 800f22e:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800f232:	7800      	ldrb	r0, [r0, #0]
 800f234:	f003 fa94 	bl	8012760 <hci_le_connection_complete_event>
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
}
 800f238:	2000      	movs	r0, #0
 800f23a:	b007      	add	sp, #28
 800f23c:	f85d fb04 	ldr.w	pc, [sp], #4

0800f240 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 800f240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f242:	b09f      	sub	sp, #124	; 0x7c
 800f244:	466e      	mov	r6, sp
 800f246:	1cc4      	adds	r4, r0, #3
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800f248:	2700      	movs	r7, #0
  uint8_t size = 1;
 800f24a:	f04f 0e01 	mov.w	lr, #1
 800f24e:	4631      	mov	r1, r6
  for (i = 0; i < rp0->Num_Reports; i++) {
 800f250:	f890 c000 	ldrb.w	ip, [r0]
 800f254:	45bc      	cmp	ip, r7
 800f256:	f106 0514 	add.w	r5, r6, #20
 800f25a:	dc05      	bgt.n	800f268 <hci_le_advertising_report_event_process+0x28>
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
    size += rp0->Advertising_Report[i].Length_Data;
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
    size += 1;
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 800f25c:	4660      	mov	r0, ip
 800f25e:	f000 f8b9 	bl	800f3d4 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
}
 800f262:	2000      	movs	r0, #0
 800f264:	b01f      	add	sp, #124	; 0x7c
 800f266:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 800f268:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 800f26c:	f805 3c14 	strb.w	r3, [r5, #-20]
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 800f270:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800f274:	f805 3c13 	strb.w	r3, [r5, #-19]
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800f278:	6823      	ldr	r3, [r4, #0]
 800f27a:	f8c6 3002 	str.w	r3, [r6, #2]
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800f27e:	79a2      	ldrb	r2, [r4, #6]
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800f280:	88a3      	ldrh	r3, [r4, #4]
 800f282:	80f3      	strh	r3, [r6, #6]
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 800f284:	1de3      	adds	r3, r4, #7
 800f286:	f845 3c08 	str.w	r3, [r5, #-8]
    size += rp0->Advertising_Report[i].Length_Data;
 800f28a:	f102 0309 	add.w	r3, r2, #9
 800f28e:	4473      	add	r3, lr
 800f290:	b2db      	uxtb	r3, r3
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800f292:	f805 2c0c 	strb.w	r2, [r5, #-12]
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 800f296:	5cc2      	ldrb	r2, [r0, r3]
 800f298:	f805 2c04 	strb.w	r2, [r5, #-4]
    size += 1;
 800f29c:	3301      	adds	r3, #1
 800f29e:	fa5f fe83 	uxtb.w	lr, r3
  for (i = 0; i < rp0->Num_Reports; i++) {
 800f2a2:	3701      	adds	r7, #1
 800f2a4:	340b      	adds	r4, #11
 800f2a6:	462e      	mov	r6, r5
 800f2a8:	e7d2      	b.n	800f250 <hci_le_advertising_report_event_process+0x10>

0800f2aa <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800f2aa:	b507      	push	{r0, r1, r2, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
  hci_le_connection_update_complete_event(rp0->Status,
 800f2ac:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 800f2b0:	9300      	str	r3, [sp, #0]
 800f2b2:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 800f2b6:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800f2ba:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800f2be:	7800      	ldrb	r0, [r0, #0]
 800f2c0:	f003 fb67 	bl	8012992 <hci_le_connection_update_complete_event>
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
}
 800f2c4:	2000      	movs	r0, #0
 800f2c6:	b003      	add	sp, #12
 800f2c8:	f85d fb04 	ldr.w	pc, [sp], #4

0800f2cc <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800f2cc:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800f2ce:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800f2d2:	1cc2      	adds	r2, r0, #3
 800f2d4:	7800      	ldrb	r0, [r0, #0]
 800f2d6:	f000 f87e 	bl	800f3d6 <hci_le_read_remote_used_features_complete_event>
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);

  return status;
}
 800f2da:	2000      	movs	r0, #0
 800f2dc:	bd08      	pop	{r3, pc}

0800f2de <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800f2de:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
                                     rp0->Random_Number,
 800f2e0:	4601      	mov	r1, r0
{
 800f2e2:	4603      	mov	r3, r0
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800f2e4:	f831 0b02 	ldrh.w	r0, [r1], #2
 800f2e8:	895a      	ldrh	r2, [r3, #10]
 800f2ea:	f000 f875 	bl	800f3d8 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
}
 800f2ee:	2000      	movs	r0, #0
 800f2f0:	bd08      	pop	{r3, pc}

0800f2f2 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800f2f2:	b507      	push	{r0, r1, r2, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800f2f4:	8903      	ldrh	r3, [r0, #8]
 800f2f6:	9300      	str	r3, [sp, #0]
 800f2f8:	88c3      	ldrh	r3, [r0, #6]
 800f2fa:	8882      	ldrh	r2, [r0, #4]
 800f2fc:	8841      	ldrh	r1, [r0, #2]
 800f2fe:	8800      	ldrh	r0, [r0, #0]
 800f300:	f003 fb66 	bl	80129d0 <hci_le_data_length_change_event>
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
}
 800f304:	2000      	movs	r0, #0
 800f306:	b003      	add	sp, #12
 800f308:	f85d fb04 	ldr.w	pc, [sp], #4

0800f30c <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 800f30c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
                                                   rp0->Local_P256_Public_Key);
 800f30e:	4601      	mov	r1, r0
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800f310:	f811 0b01 	ldrb.w	r0, [r1], #1
 800f314:	f000 f861 	bl	800f3da <hci_le_read_local_p256_public_key_complete_event>

  return status;
}
 800f318:	2000      	movs	r0, #0
 800f31a:	bd08      	pop	{r3, pc}

0800f31c <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800f31c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
  hci_le_generate_dhkey_complete_event(rp0->Status,
                                       rp0->DHKey);
 800f31e:	4601      	mov	r1, r0
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800f320:	f811 0b01 	ldrb.w	r0, [r1], #1
 800f324:	f000 f85a 	bl	800f3dc <hci_le_generate_dhkey_complete_event>

  return status;
}
 800f328:	2000      	movs	r0, #0
 800f32a:	bd08      	pop	{r3, pc}

0800f32c <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800f32c:	b500      	push	{lr}
 800f32e:	b089      	sub	sp, #36	; 0x24
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800f330:	7f43      	ldrb	r3, [r0, #29]
 800f332:	9306      	str	r3, [sp, #24]
 800f334:	f8b0 301b 	ldrh.w	r3, [r0, #27]
 800f338:	9305      	str	r3, [sp, #20]
 800f33a:	f8b0 3019 	ldrh.w	r3, [r0, #25]
 800f33e:	9304      	str	r3, [sp, #16]
 800f340:	f8b0 3017 	ldrh.w	r3, [r0, #23]
 800f344:	9303      	str	r3, [sp, #12]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
                                            rp0->Local_Resolvable_Private_Address,
                                            rp0->Peer_Resolvable_Private_Address,
 800f346:	f100 0311 	add.w	r3, r0, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800f34a:	9302      	str	r3, [sp, #8]
                                            rp0->Local_Resolvable_Private_Address,
 800f34c:	f100 030b 	add.w	r3, r0, #11
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800f350:	9301      	str	r3, [sp, #4]
                                            rp0->Peer_Address,
 800f352:	1d43      	adds	r3, r0, #5
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800f354:	9300      	str	r3, [sp, #0]
 800f356:	7903      	ldrb	r3, [r0, #4]
 800f358:	78c2      	ldrb	r2, [r0, #3]
 800f35a:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800f35e:	7800      	ldrb	r0, [r0, #0]
 800f360:	f000 f83d 	bl	800f3de <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
}
 800f364:	2000      	movs	r0, #0
 800f366:	b009      	add	sp, #36	; 0x24
 800f368:	f85d fb04 	ldr.w	pc, [sp], #4

0800f36c <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 800f36c:	b570      	push	{r4, r5, r6, lr}
 800f36e:	b0a0      	sub	sp, #128	; 0x80
 800f370:	466a      	mov	r2, sp
 800f372:	1cc3      	adds	r3, r0, #3
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800f374:	2500      	movs	r5, #0
 800f376:	4611      	mov	r1, r2
 800f378:	7806      	ldrb	r6, [r0, #0]
 800f37a:	42ae      	cmp	r6, r5
 800f37c:	f102 0410 	add.w	r4, r2, #16
 800f380:	dc05      	bgt.n	800f38e <hci_le_direct_advertising_report_event_process+0x22>
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
    size += 6;
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
    size += 1;
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800f382:	4630      	mov	r0, r6
 800f384:	f000 f82c 	bl	800f3e0 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
}
 800f388:	2000      	movs	r0, #0
 800f38a:	b020      	add	sp, #128	; 0x80
 800f38c:	bd70      	pop	{r4, r5, r6, pc}
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800f38e:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 800f392:	f804 6c10 	strb.w	r6, [r4, #-16]
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800f396:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 800f39a:	f804 6c0f 	strb.w	r6, [r4, #-15]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800f39e:	681e      	ldr	r6, [r3, #0]
 800f3a0:	f8c2 6002 	str.w	r6, [r2, #2]
 800f3a4:	889e      	ldrh	r6, [r3, #4]
 800f3a6:	80d6      	strh	r6, [r2, #6]
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800f3a8:	799e      	ldrb	r6, [r3, #6]
 800f3aa:	f804 6c08 	strb.w	r6, [r4, #-8]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800f3ae:	f8d3 6007 	ldr.w	r6, [r3, #7]
 800f3b2:	f8c2 6009 	str.w	r6, [r2, #9]
 800f3b6:	f8b3 600b 	ldrh.w	r6, [r3, #11]
 800f3ba:	f8a2 600d 	strh.w	r6, [r2, #13]
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800f3be:	7b5a      	ldrb	r2, [r3, #13]
 800f3c0:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (i = 0; i < rp0->Num_Reports; i++) {
 800f3c4:	3501      	adds	r5, #1
 800f3c6:	3310      	adds	r3, #16
 800f3c8:	4622      	mov	r2, r4
 800f3ca:	e7d5      	b.n	800f378 <hci_le_direct_advertising_report_event_process+0xc>

0800f3cc <hci_read_remote_version_information_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 800f3cc:	4770      	bx	lr

0800f3ce <hci_number_of_completed_packets_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 800f3ce:	4770      	bx	lr

0800f3d0 <hci_data_buffer_overflow_event>:
 800f3d0:	4770      	bx	lr

0800f3d2 <hci_encryption_key_refresh_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 800f3d2:	4770      	bx	lr

0800f3d4 <hci_le_advertising_report_event>:
 800f3d4:	4770      	bx	lr

0800f3d6 <hci_le_read_remote_used_features_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800f3d6:	4770      	bx	lr

0800f3d8 <hci_le_long_term_key_request_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 800f3d8:	4770      	bx	lr

0800f3da <hci_le_read_local_p256_public_key_complete_event>:
 800f3da:	4770      	bx	lr

0800f3dc <hci_le_generate_dhkey_complete_event>:
 800f3dc:	4770      	bx	lr

0800f3de <hci_le_enhanced_connection_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 800f3de:	4770      	bx	lr

0800f3e0 <hci_le_direct_advertising_report_event>:
 800f3e0:	4770      	bx	lr

0800f3e2 <aci_gap_limited_discoverable_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 800f3e2:	4770      	bx	lr

0800f3e4 <aci_gap_authorization_req_event>:
 800f3e4:	4770      	bx	lr

0800f3e6 <aci_gap_slave_security_initiated_event>:
 800f3e6:	4770      	bx	lr

0800f3e8 <aci_gap_proc_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 800f3e8:	4770      	bx	lr

0800f3ea <aci_gap_addr_not_resolved_event>:
 800f3ea:	4770      	bx	lr

0800f3ec <aci_gap_keypress_notification_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 800f3ec:	4770      	bx	lr

0800f3ee <aci_gatt_proc_timeout_event>:
 800f3ee:	4770      	bx	lr

0800f3f0 <aci_att_find_info_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 800f3f0:	4770      	bx	lr

0800f3f2 <aci_att_find_by_type_value_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 800f3f2:	4770      	bx	lr

0800f3f4 <aci_att_read_by_type_resp_event>:
 800f3f4:	4770      	bx	lr

0800f3f6 <aci_att_read_resp_event>:
 800f3f6:	4770      	bx	lr

0800f3f8 <aci_att_read_blob_resp_event>:
 800f3f8:	4770      	bx	lr

0800f3fa <aci_att_read_multiple_resp_event>:
 800f3fa:	4770      	bx	lr

0800f3fc <aci_att_read_by_group_type_resp_event>:
 800f3fc:	4770      	bx	lr

0800f3fe <aci_att_prepare_write_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 800f3fe:	4770      	bx	lr

0800f400 <aci_att_exec_write_resp_event>:
 800f400:	4770      	bx	lr

0800f402 <aci_gatt_notification_event>:
 800f402:	4770      	bx	lr

0800f404 <aci_gatt_error_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 800f404:	4770      	bx	lr

0800f406 <aci_gatt_disc_read_char_by_uuid_resp_event>:
 800f406:	4770      	bx	lr

0800f408 <aci_gatt_write_permit_req_event>:
 800f408:	4770      	bx	lr

0800f40a <aci_gatt_read_multi_permit_req_event>:
 800f40a:	4770      	bx	lr

0800f40c <aci_gatt_server_confirmation_event>:
 800f40c:	4770      	bx	lr

0800f40e <aci_gatt_prepare_write_permit_req_event>:
 800f40e:	4770      	bx	lr

0800f410 <aci_l2cap_proc_timeout_event>:
 800f410:	4770      	bx	lr

0800f412 <aci_l2cap_connection_update_req_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 800f412:	4770      	bx	lr

0800f414 <aci_l2cap_command_reject_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 800f414:	4770      	bx	lr

0800f416 <aci_blue_initialized_event>:
 800f416:	4770      	bx	lr

0800f418 <aci_blue_events_lost_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 800f418:	4770      	bx	lr

0800f41a <aci_blue_crash_info_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 800f41a:	4770      	bx	lr

0800f41c <aci_hal_end_of_radio_activity_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 800f41c:	4770      	bx	lr

0800f41e <aci_hal_scan_req_report_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 800f41e:	4770      	bx	lr

0800f420 <aci_hal_fw_error_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 800f420:	4770      	bx	lr
	...

0800f424 <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information(uint8_t *HCI_Version,
                                              uint16_t *HCI_Revision,
                                              uint8_t *LMP_PAL_Version,
                                              uint16_t *Manufacturer_Name,
                                              uint16_t *LMP_PAL_Subversion)
{
 800f424:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f426:	b08b      	sub	sp, #44	; 0x2c
 800f428:	461c      	mov	r4, r3
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f42a:	ab01      	add	r3, sp, #4
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x04;
  rq.ocf = 0x001;
  rq.rparam = &resp;
 800f42c:	9308      	str	r3, [sp, #32]
{
 800f42e:	4607      	mov	r7, r0
  rq.rlen = sizeof(resp);
 800f430:	2309      	movs	r3, #9
{
 800f432:	460e      	mov	r6, r1
 800f434:	4615      	mov	r5, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f436:	2100      	movs	r1, #0
  rq.ogf = 0x04;
 800f438:	4a15      	ldr	r2, [pc, #84]	; (800f490 <hci_read_local_version_information+0x6c>)
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f43a:	f88d 100c 	strb.w	r1, [sp, #12]
  if (hci_send_req(&rq, FALSE) < 0)
 800f43e:	a804      	add	r0, sp, #16
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f440:	e9cd 1101 	strd	r1, r1, [sp, #4]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f444:	e9cd 1105 	strd	r1, r1, [sp, #20]
 800f448:	9107      	str	r1, [sp, #28]
  rq.ogf = 0x04;
 800f44a:	9204      	str	r2, [sp, #16]
  rq.rlen = sizeof(resp);
 800f44c:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800f44e:	f000 f8c1 	bl	800f5d4 <hci_send_req>
 800f452:	2800      	cmp	r0, #0
 800f454:	db19      	blt.n	800f48a <hci_read_local_version_information+0x66>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800f456:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800f45a:	b9a0      	cbnz	r0, 800f486 <hci_read_local_version_information+0x62>
    return resp.Status;
  }
  *HCI_Version = btoh(resp.HCI_Version, 1);
 800f45c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f460:	703b      	strb	r3, [r7, #0]
  *HCI_Revision = btoh(resp.HCI_Revision, 2);
 800f462:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f466:	8033      	strh	r3, [r6, #0]
  *LMP_PAL_Version = btoh(resp.LMP_PAL_Version, 1);
 800f468:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f46c:	702b      	strb	r3, [r5, #0]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 800f46e:	9b02      	ldr	r3, [sp, #8]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 800f470:	f89d 200c 	ldrb.w	r2, [sp, #12]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 800f474:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800f478:	8023      	strh	r3, [r4, #0]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 800f47a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f47e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f482:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f484:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 800f486:	b00b      	add	sp, #44	; 0x2c
 800f488:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800f48a:	20ff      	movs	r0, #255	; 0xff
 800f48c:	e7fb      	b.n	800f486 <hci_read_local_version_information+0x62>
 800f48e:	bf00      	nop
 800f490:	00010004 	.word	0x00010004

0800f494 <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 800f494:	b530      	push	{r4, r5, lr}
 800f496:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800f498:	f10d 0403 	add.w	r4, sp, #3
 800f49c:	2300      	movs	r3, #0
  uint8_t index_input = 0;
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800f49e:	aa07      	add	r2, sp, #28
  tBleStatus status = 0;
 800f4a0:	7023      	strb	r3, [r4, #0]
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800f4a2:	7010      	strb	r0, [r2, #0]
  index_input += 1;
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 800f4a4:	b169      	cbz	r1, 800f4c2 <hci_le_set_scan_response_data+0x2e>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 800f4a6:	f10d 031d 	add.w	r3, sp, #29
 800f4aa:	f101 001c 	add.w	r0, r1, #28
 800f4ae:	f851 5b04 	ldr.w	r5, [r1], #4
 800f4b2:	f843 5b04 	str.w	r5, [r3], #4
 800f4b6:	4281      	cmp	r1, r0
 800f4b8:	d1f9      	bne.n	800f4ae <hci_le_set_scan_response_data+0x1a>
 800f4ba:	8808      	ldrh	r0, [r1, #0]
 800f4bc:	8018      	strh	r0, [r3, #0]
 800f4be:	7889      	ldrb	r1, [r1, #2]
 800f4c0:	7099      	strb	r1, [r3, #2]
  }
  index_input += 31;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x08;
 800f4c2:	4b09      	ldr	r3, [pc, #36]	; (800f4e8 <hci_le_set_scan_response_data+0x54>)
  rq.ocf = 0x009;
  rq.cparam = cmd_buffer;
 800f4c4:	9203      	str	r2, [sp, #12]
  rq.ogf = 0x08;
 800f4c6:	2100      	movs	r1, #0
 800f4c8:	e9cd 3101 	strd	r3, r1, [sp, #4]
  rq.clen = index_input;
 800f4cc:	2320      	movs	r3, #32
  rq.rparam = &status;
 800f4ce:	e9cd 3404 	strd	r3, r4, [sp, #16]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800f4d2:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800f4d8:	f000 f87c 	bl	800f5d4 <hci_send_req>
 800f4dc:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f4de:	bfac      	ite	ge
 800f4e0:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 800f4e2:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f4e4:	b049      	add	sp, #292	; 0x124
 800f4e6:	bd30      	pop	{r4, r5, pc}
 800f4e8:	00090008 	.word	0x00090008

0800f4ec <hci_le_rand>:
  }
  BLUENRG_memcpy((void *) Encrypted_Data, (const void *) resp.Encrypted_Data, 16);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_rand(uint8_t Random_Number[8])
{
 800f4ec:	b510      	push	{r4, lr}
 800f4ee:	b08a      	sub	sp, #40	; 0x28
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f4f0:	ab01      	add	r3, sp, #4
 800f4f2:	2100      	movs	r1, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x08;
 800f4f4:	4a0f      	ldr	r2, [pc, #60]	; (800f534 <hci_le_rand+0x48>)
  rq.ocf = 0x018;
  rq.rparam = &resp;
 800f4f6:	9308      	str	r3, [sp, #32]
{
 800f4f8:	4604      	mov	r4, r0
  rq.rlen = sizeof(resp);
 800f4fa:	2309      	movs	r3, #9
  if (hci_send_req(&rq, FALSE) < 0)
 800f4fc:	a804      	add	r0, sp, #16
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f4fe:	e9cd 1101 	strd	r1, r1, [sp, #4]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f502:	e9cd 1105 	strd	r1, r1, [sp, #20]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f506:	f88d 100c 	strb.w	r1, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f50a:	9107      	str	r1, [sp, #28]
  rq.ogf = 0x08;
 800f50c:	9204      	str	r2, [sp, #16]
  rq.rlen = sizeof(resp);
 800f50e:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800f510:	f000 f860 	bl	800f5d4 <hci_send_req>
 800f514:	2800      	cmp	r0, #0
 800f516:	db0a      	blt.n	800f52e <hci_le_rand+0x42>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800f518:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800f51c:	b928      	cbnz	r0, 800f52a <hci_le_rand+0x3e>
    return resp.Status;
  }
  BLUENRG_memcpy((void *) Random_Number, (const void *) resp.Random_Number, 8);
 800f51e:	f8dd 3005 	ldr.w	r3, [sp, #5]
 800f522:	6023      	str	r3, [r4, #0]
 800f524:	f8dd 3009 	ldr.w	r3, [sp, #9]
 800f528:	6063      	str	r3, [r4, #4]
  return BLE_STATUS_SUCCESS;
}
 800f52a:	b00a      	add	sp, #40	; 0x28
 800f52c:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 800f52e:	20ff      	movs	r0, #255	; 0xff
 800f530:	e7fb      	b.n	800f52a <hci_le_rand+0x3e>
 800f532:	bf00      	nop
 800f534:	00180008 	.word	0x00180008

0800f538 <move_list.constprop.0>:
  *
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
 800f538:	b537      	push	{r0, r1, r2, r4, r5, lr}
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
  {
    list_remove_tail(src_list, &tmp_node);
    list_insert_head(dest_list, tmp_node);
 800f53a:	4d08      	ldr	r5, [pc, #32]	; (800f55c <move_list.constprop.0+0x24>)
static void move_list(tListNode * dest_list, tListNode * src_list)
 800f53c:	4604      	mov	r4, r0
  while (!list_is_empty(src_list))
 800f53e:	4620      	mov	r0, r4
 800f540:	f000 f95b 	bl	800f7fa <list_is_empty>
 800f544:	b108      	cbz	r0, 800f54a <move_list.constprop.0+0x12>
  }
}
 800f546:	b003      	add	sp, #12
 800f548:	bd30      	pop	{r4, r5, pc}
    list_remove_tail(src_list, &tmp_node);
 800f54a:	a901      	add	r1, sp, #4
 800f54c:	4620      	mov	r0, r4
 800f54e:	f000 f991 	bl	800f874 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800f552:	9901      	ldr	r1, [sp, #4]
 800f554:	4628      	mov	r0, r5
 800f556:	f000 f95a 	bl	800f80e <list_insert_head>
 800f55a:	e7f0      	b.n	800f53e <move_list.constprop.0+0x6>
 800f55c:	200011ec 	.word	0x200011ec

0800f560 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f564:	4d11      	ldr	r5, [pc, #68]	; (800f5ac <hci_init+0x4c>)
  uint8_t index;

  if(UserEvtRx != NULL)
 800f566:	b100      	cbz	r0, 800f56a <hci_init+0xa>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800f568:	6268      	str	r0, [r5, #36]	; 0x24
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800f56a:	4811      	ldr	r0, [pc, #68]	; (800f5b0 <hci_init+0x50>)
 800f56c:	4c11      	ldr	r4, [pc, #68]	; (800f5b4 <hci_init+0x54>)
 800f56e:	f000 f941 	bl	800f7f4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800f572:	480e      	ldr	r0, [pc, #56]	; (800f5ac <hci_init+0x4c>)
 800f574:	f000 f93e 	bl	800f7f4 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800f578:	f009 f956 	bl	8018828 <hci_tl_lowlevel_init>
 800f57c:	2600      	movs	r6, #0

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800f57e:	f1a4 0708 	sub.w	r7, r4, #8
 800f582:	4621      	mov	r1, r4
 800f584:	4638      	mov	r0, r7
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800f586:	3601      	adds	r6, #1
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800f588:	f000 f94d 	bl	800f826 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800f58c:	2e0a      	cmp	r6, #10
 800f58e:	f104 048c 	add.w	r4, r4, #140	; 0x8c
 800f592:	d1f6      	bne.n	800f582 <hci_init+0x22>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800f594:	68ab      	ldr	r3, [r5, #8]
 800f596:	b10b      	cbz	r3, 800f59c <hci_init+0x3c>
 800f598:	2000      	movs	r0, #0
 800f59a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800f59c:	692b      	ldr	r3, [r5, #16]
 800f59e:	b113      	cbz	r3, 800f5a6 <hci_init+0x46>
}
 800f5a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 800f5a4:	4718      	bx	r3
}
 800f5a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5aa:	bf00      	nop
 800f5ac:	200011ec 	.word	0x200011ec
 800f5b0:	20001214 	.word	0x20001214
 800f5b4:	2000121c 	.word	0x2000121c

0800f5b8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800f5b8:	4b05      	ldr	r3, [pc, #20]	; (800f5d0 <hci_register_io_bus+0x18>)
 800f5ba:	6802      	ldr	r2, [r0, #0]
 800f5bc:	609a      	str	r2, [r3, #8]
  hciContext.io.Receive = fops->Receive;  
 800f5be:	68c2      	ldr	r2, [r0, #12]
 800f5c0:	615a      	str	r2, [r3, #20]
  hciContext.io.Send    = fops->Send;
 800f5c2:	6902      	ldr	r2, [r0, #16]
 800f5c4:	619a      	str	r2, [r3, #24]
  hciContext.io.GetTick = fops->GetTick;
 800f5c6:	6982      	ldr	r2, [r0, #24]
 800f5c8:	621a      	str	r2, [r3, #32]
  hciContext.io.Reset   = fops->Reset;
 800f5ca:	6882      	ldr	r2, [r0, #8]
 800f5cc:	611a      	str	r2, [r3, #16]
}
 800f5ce:	4770      	bx	lr
 800f5d0:	200011ec 	.word	0x200011ec

0800f5d4 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800f5d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5d8:	b0a5      	sub	sp, #148	; 0x94
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800f5da:	8846      	ldrh	r6, [r0, #2]
 800f5dc:	f8b0 8000 	ldrh.w	r8, [r0]
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800f5e0:	4d59      	ldr	r5, [pc, #356]	; (800f748 <hci_send_req+0x174>)
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800f5e2:	2300      	movs	r3, #0
{
 800f5e4:	4604      	mov	r4, r0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800f5e6:	a802      	add	r0, sp, #8
{
 800f5e8:	460f      	mov	r7, r1
  tHciDataPacket * hciReadPacket = NULL;
 800f5ea:	9301      	str	r3, [sp, #4]
  list_init_head(&hciTempQueue);
 800f5ec:	f000 f902 	bl	800f7f4 <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800f5f0:	f105 0928 	add.w	r9, r5, #40	; 0x28
 800f5f4:	4648      	mov	r0, r9
 800f5f6:	f000 f94e 	bl	800f896 <list_get_size>
 800f5fa:	2804      	cmp	r0, #4
 800f5fc:	dd54      	ble.n	800f6a8 <hci_send_req+0xd4>
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800f5fe:	8863      	ldrh	r3, [r4, #2]
 800f600:	8822      	ldrh	r2, [r4, #0]

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800f602:	f894 900c 	ldrb.w	r9, [r4, #12]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800f606:	68a1      	ldr	r1, [r4, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800f608:	f88d 9013 	strb.w	r9, [sp, #19]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800f60c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f610:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 800f614:	2201      	movs	r2, #1
 800f616:	f88d 2010 	strb.w	r2, [sp, #16]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800f61a:	a805      	add	r0, sp, #20
 800f61c:	464a      	mov	r2, r9
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800f61e:	f8ad 3011 	strh.w	r3, [sp, #17]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800f622:	f00c fdf7 	bl	801c214 <memcpy>
  if (hciContext.io.Send)
 800f626:	69ab      	ldr	r3, [r5, #24]
 800f628:	b11b      	cbz	r3, 800f632 <hci_send_req+0x5e>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800f62a:	f109 0104 	add.w	r1, r9, #4
 800f62e:	a804      	add	r0, sp, #16
 800f630:	4798      	blx	r3
  
  if (async)
 800f632:	2f00      	cmp	r7, #0
 800f634:	d177      	bne.n	800f726 <hci_send_req+0x152>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800f636:	f3c6 0509 	ubfx	r5, r6, #0, #10
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800f63a:	4e43      	ldr	r6, [pc, #268]	; (800f748 <hci_send_req+0x174>)
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800f63c:	ea45 2588 	orr.w	r5, r5, r8, lsl #10
 800f640:	b2ad      	uxth	r5, r5
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800f642:	f106 0828 	add.w	r8, r6, #40	; 0x28
    uint32_t tickstart = HAL_GetTick();
 800f646:	f7f8 ffed 	bl	8008624 <HAL_GetTick>
 800f64a:	4607      	mov	r7, r0
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800f64c:	f7f8 ffea 	bl	8008624 <HAL_GetTick>
 800f650:	1bc0      	subs	r0, r0, r7
 800f652:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f656:	d848      	bhi.n	800f6ea <hci_send_req+0x116>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800f658:	4630      	mov	r0, r6
 800f65a:	f000 f8ce 	bl	800f7fa <list_is_empty>
 800f65e:	2800      	cmp	r0, #0
 800f660:	d1f4      	bne.n	800f64c <hci_send_req+0x78>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800f662:	a901      	add	r1, sp, #4
 800f664:	4630      	mov	r0, r6
 800f666:	f000 f8f4 	bl	800f852 <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800f66a:	9901      	ldr	r1, [sp, #4]
    if (hci_hdr->type == HCI_EVENT_PKT)
 800f66c:	7a0b      	ldrb	r3, [r1, #8]
 800f66e:	2b04      	cmp	r3, #4
 800f670:	d109      	bne.n	800f686 <hci_send_req+0xb2>
      switch (event_pckt->evt) 
 800f672:	7a4b      	ldrb	r3, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800f674:	f891 2088 	ldrb.w	r2, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 800f678:	2b10      	cmp	r3, #16
 800f67a:	d036      	beq.n	800f6ea <hci_send_req+0x116>
 800f67c:	d81d      	bhi.n	800f6ba <hci_send_req+0xe6>
 800f67e:	2b0e      	cmp	r3, #14
 800f680:	d053      	beq.n	800f72a <hci_send_req+0x156>
 800f682:	2b0f      	cmp	r3, #15
 800f684:	d027      	beq.n	800f6d6 <hci_send_req+0x102>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800f686:	4640      	mov	r0, r8
 800f688:	f000 f8b7 	bl	800f7fa <list_is_empty>
 800f68c:	2800      	cmp	r0, #0
 800f68e:	d057      	beq.n	800f740 <hci_send_req+0x16c>
 800f690:	4630      	mov	r0, r6
 800f692:	f000 f8b2 	bl	800f7fa <list_is_empty>
 800f696:	2800      	cmp	r0, #0
 800f698:	d052      	beq.n	800f740 <hci_send_req+0x16c>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f69a:	9901      	ldr	r1, [sp, #4]
 800f69c:	4640      	mov	r0, r8
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800f69e:	f000 f8c2 	bl	800f826 <list_insert_tail>
      hciReadPacket=NULL;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	9301      	str	r3, [sp, #4]
 800f6a6:	e7ce      	b.n	800f646 <hci_send_req+0x72>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800f6a8:	a904      	add	r1, sp, #16
 800f6aa:	4628      	mov	r0, r5
 800f6ac:	f000 f8d1 	bl	800f852 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800f6b0:	9904      	ldr	r1, [sp, #16]
 800f6b2:	4648      	mov	r0, r9
 800f6b4:	f000 f8b7 	bl	800f826 <list_insert_tail>
 800f6b8:	e79c      	b.n	800f5f4 <hci_send_req+0x20>
      switch (event_pckt->evt) 
 800f6ba:	2b3e      	cmp	r3, #62	; 0x3e
 800f6bc:	d1e3      	bne.n	800f686 <hci_send_req+0xb2>
        if (me->subevent != r->event)
 800f6be:	7ac8      	ldrb	r0, [r1, #11]
 800f6c0:	6863      	ldr	r3, [r4, #4]
 800f6c2:	4298      	cmp	r0, r3
 800f6c4:	d1df      	bne.n	800f686 <hci_send_req+0xb2>
        r->rlen = MIN(len, r->rlen);
 800f6c6:	6963      	ldr	r3, [r4, #20]
        len -= 1;
 800f6c8:	3a04      	subs	r2, #4
        r->rlen = MIN(len, r->rlen);
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	bf28      	it	cs
 800f6ce:	461a      	movcs	r2, r3
 800f6d0:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800f6d2:	310c      	adds	r1, #12
 800f6d4:	e01d      	b.n	800f712 <hci_send_req+0x13e>
        if (cs->opcode != opcode)
 800f6d6:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 800f6da:	42ab      	cmp	r3, r5
 800f6dc:	d105      	bne.n	800f6ea <hci_send_req+0x116>
        if (r->event != EVT_CMD_STATUS) {
 800f6de:	6863      	ldr	r3, [r4, #4]
 800f6e0:	2b0f      	cmp	r3, #15
 800f6e2:	d00f      	beq.n	800f704 <hci_send_req+0x130>
          if (cs->status) {
 800f6e4:	7acb      	ldrb	r3, [r1, #11]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d0cd      	beq.n	800f686 <hci_send_req+0xb2>
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800f6ea:	9901      	ldr	r1, [sp, #4]
 800f6ec:	b111      	cbz	r1, 800f6f4 <hci_send_req+0x120>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f6ee:	4817      	ldr	r0, [pc, #92]	; (800f74c <hci_send_req+0x178>)
 800f6f0:	f000 f88d 	bl	800f80e <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800f6f4:	a802      	add	r0, sp, #8
 800f6f6:	f7ff ff1f 	bl	800f538 <move_list.constprop.0>

  return -1;
 800f6fa:	f04f 30ff 	mov.w	r0, #4294967295
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return 0;
}
 800f6fe:	b025      	add	sp, #148	; 0x94
 800f700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        r->rlen = MIN(len, r->rlen);
 800f704:	6963      	ldr	r3, [r4, #20]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800f706:	3a03      	subs	r2, #3
        r->rlen = MIN(len, r->rlen);
 800f708:	429a      	cmp	r2, r3
 800f70a:	bf28      	it	cs
 800f70c:	461a      	movcs	r2, r3
 800f70e:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800f710:	310b      	adds	r1, #11
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800f712:	6920      	ldr	r0, [r4, #16]
 800f714:	f00c fd7e 	bl	801c214 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800f718:	480c      	ldr	r0, [pc, #48]	; (800f74c <hci_send_req+0x178>)
 800f71a:	9901      	ldr	r1, [sp, #4]
 800f71c:	f000 f877 	bl	800f80e <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800f720:	a802      	add	r0, sp, #8
 800f722:	f7ff ff09 	bl	800f538 <move_list.constprop.0>
    return 0;
 800f726:	2000      	movs	r0, #0
 800f728:	e7e9      	b.n	800f6fe <hci_send_req+0x12a>
        if (cc->opcode != opcode)
 800f72a:	898b      	ldrh	r3, [r1, #12]
 800f72c:	42ab      	cmp	r3, r5
 800f72e:	d1dc      	bne.n	800f6ea <hci_send_req+0x116>
        r->rlen = MIN(len, r->rlen);
 800f730:	6963      	ldr	r3, [r4, #20]
        len -= EVT_CMD_COMPLETE_SIZE;
 800f732:	3a06      	subs	r2, #6
        r->rlen = MIN(len, r->rlen);
 800f734:	429a      	cmp	r2, r3
 800f736:	bf28      	it	cs
 800f738:	461a      	movcs	r2, r3
 800f73a:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800f73c:	310e      	adds	r1, #14
 800f73e:	e7e8      	b.n	800f712 <hci_send_req+0x13e>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800f740:	9901      	ldr	r1, [sp, #4]
 800f742:	a802      	add	r0, sp, #8
 800f744:	e7ab      	b.n	800f69e <hci_send_req+0xca>
 800f746:	bf00      	nop
 800f748:	200011ec 	.word	0x200011ec
 800f74c:	20001214 	.word	0x20001214

0800f750 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800f750:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tHciDataPacket * hciReadPacket = NULL;
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800f752:	4c0c      	ldr	r4, [pc, #48]	; (800f784 <hci_user_evt_proc+0x34>)
  tHciDataPacket * hciReadPacket = NULL;
 800f754:	2300      	movs	r3, #0
 800f756:	9301      	str	r3, [sp, #4]
    if (hciContext.UserEvtRx != NULL)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f758:	f104 0528 	add.w	r5, r4, #40	; 0x28
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800f75c:	4809      	ldr	r0, [pc, #36]	; (800f784 <hci_user_evt_proc+0x34>)
 800f75e:	f000 f84c 	bl	800f7fa <list_is_empty>
 800f762:	b108      	cbz	r0, 800f768 <hci_user_evt_proc+0x18>
  }
}
 800f764:	b003      	add	sp, #12
 800f766:	bd30      	pop	{r4, r5, pc}
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800f768:	a901      	add	r1, sp, #4
 800f76a:	4620      	mov	r0, r4
 800f76c:	f000 f871 	bl	800f852 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 800f770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f772:	b113      	cbz	r3, 800f77a <hci_user_evt_proc+0x2a>
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800f774:	9801      	ldr	r0, [sp, #4]
 800f776:	3008      	adds	r0, #8
 800f778:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f77a:	9901      	ldr	r1, [sp, #4]
 800f77c:	4628      	mov	r0, r5
 800f77e:	f000 f852 	bl	800f826 <list_insert_tail>
 800f782:	e7eb      	b.n	800f75c <hci_user_evt_proc+0xc>
 800f784:	200011ec 	.word	0x200011ec

0800f788 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800f788:	b573      	push	{r0, r1, r4, r5, r6, lr}
  tHciDataPacket * hciReadPacket = NULL;
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800f78a:	4d18      	ldr	r5, [pc, #96]	; (800f7ec <hci_notify_asynch_evt+0x64>)
  tHciDataPacket * hciReadPacket = NULL;
 800f78c:	2300      	movs	r3, #0
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800f78e:	f105 0028 	add.w	r0, r5, #40	; 0x28
  tHciDataPacket * hciReadPacket = NULL;
 800f792:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800f794:	f000 f831 	bl	800f7fa <list_is_empty>
 800f798:	bb20      	cbnz	r0, 800f7e4 <hci_notify_asynch_evt+0x5c>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800f79a:	a901      	add	r1, sp, #4
 800f79c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f7a0:	f000 f857 	bl	800f852 <list_remove_head>
    
    if (hciContext.io.Receive)
 800f7a4:	696b      	ldr	r3, [r5, #20]
 800f7a6:	b1fb      	cbz	r3, 800f7e8 <hci_notify_asynch_evt+0x60>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800f7a8:	9801      	ldr	r0, [sp, #4]
 800f7aa:	2180      	movs	r1, #128	; 0x80
 800f7ac:	3008      	adds	r0, #8
 800f7ae:	4798      	blx	r3
      if (data_len > 0)
 800f7b0:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
      {                    
        hciReadPacket->data_len = data_len;
 800f7b4:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 800f7b6:	d012      	beq.n	800f7de <hci_notify_asynch_evt+0x56>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800f7b8:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 800f7ba:	f881 4088 	strb.w	r4, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800f7be:	2b04      	cmp	r3, #4
 800f7c0:	d109      	bne.n	800f7d6 <hci_notify_asynch_evt+0x4e>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800f7c2:	7a8b      	ldrb	r3, [r1, #10]
 800f7c4:	3c03      	subs	r4, #3
 800f7c6:	42a3      	cmp	r3, r4
 800f7c8:	d105      	bne.n	800f7d6 <hci_notify_asynch_evt+0x4e>
        if (verify_packet(hciReadPacket) == 0)
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800f7ca:	4628      	mov	r0, r5
 800f7cc:	f000 f82b 	bl	800f826 <list_insert_tail>
  int32_t ret = 0;
 800f7d0:	2000      	movs	r0, #0
  {
    ret = 1;
  }
  return ret;
  
}
 800f7d2:	b002      	add	sp, #8
 800f7d4:	bd70      	pop	{r4, r5, r6, pc}
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800f7d6:	4806      	ldr	r0, [pc, #24]	; (800f7f0 <hci_notify_asynch_evt+0x68>)
 800f7d8:	f000 f819 	bl	800f80e <list_insert_head>
 800f7dc:	e7f8      	b.n	800f7d0 <hci_notify_asynch_evt+0x48>
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f7de:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f7e2:	e7f9      	b.n	800f7d8 <hci_notify_asynch_evt+0x50>
    ret = 1;
 800f7e4:	2001      	movs	r0, #1
 800f7e6:	e7f4      	b.n	800f7d2 <hci_notify_asynch_evt+0x4a>
  int32_t ret = 0;
 800f7e8:	4618      	mov	r0, r3
  return ret;
 800f7ea:	e7f2      	b.n	800f7d2 <hci_notify_asynch_evt+0x4a>
 800f7ec:	200011ec 	.word	0x200011ec
 800f7f0:	20001214 	.word	0x20001214

0800f7f4 <list_init_head>:
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
  listHead->prev = listHead;	
 800f7f4:	e9c0 0000 	strd	r0, r0, [r0]
}
 800f7f8:	4770      	bx	lr

0800f7fa <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7fa:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f7fe:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800f800:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 800f802:	1a1b      	subs	r3, r3, r0
 800f804:	4258      	negs	r0, r3
 800f806:	4158      	adcs	r0, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f808:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 800f80c:	4770      	bx	lr

0800f80e <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f80e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f812:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800f814:	6802      	ldr	r2, [r0, #0]
  node->prev = listHead;
 800f816:	e9c1 2000 	strd	r2, r0, [r1]
  listHead->next = node;
 800f81a:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 800f81c:	680a      	ldr	r2, [r1, #0]
 800f81e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f820:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f824:	4770      	bx	lr

0800f826 <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f826:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f82a:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
  node->prev = listHead->prev;
 800f82c:	6842      	ldr	r2, [r0, #4]
 800f82e:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 800f830:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 800f832:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800f834:	684a      	ldr	r2, [r1, #4]
 800f836:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f838:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f83c:	4770      	bx	lr

0800f83e <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f83e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f842:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800f844:	e9d0 3200 	ldrd	r3, r2, [r0]
 800f848:	6013      	str	r3, [r2, #0]
  (node->next)->prev = node->prev;
 800f84a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f84c:	f381 8810 	msr	PRIMASK, r1
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f850:	4770      	bx	lr

0800f852 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800f852:	b538      	push	{r3, r4, r5, lr}
 800f854:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f856:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f85a:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800f85c:	6800      	ldr	r0, [r0, #0]
 800f85e:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->next);
 800f860:	f7ff ffed 	bl	800f83e <list_remove_node>
  (*node)->next = NULL;
 800f864:	6822      	ldr	r2, [r4, #0]
 800f866:	2300      	movs	r3, #0
 800f868:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800f86a:	6822      	ldr	r2, [r4, #0]
 800f86c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f86e:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f872:	bd38      	pop	{r3, r4, r5, pc}

0800f874 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800f874:	b538      	push	{r3, r4, r5, lr}
 800f876:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f878:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f87c:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800f87e:	6840      	ldr	r0, [r0, #4]
 800f880:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->prev);
 800f882:	f7ff ffdc 	bl	800f83e <list_remove_node>
  (*node)->next = NULL;
 800f886:	6822      	ldr	r2, [r4, #0]
 800f888:	2300      	movs	r3, #0
 800f88a:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800f88c:	6822      	ldr	r2, [r4, #0]
 800f88e:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f890:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f894:	bd38      	pop	{r3, r4, r5, pc}

0800f896 <list_get_size>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f896:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f89a:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800f89c:	6802      	ldr	r2, [r0, #0]
  int size = 0;
 800f89e:	2300      	movs	r3, #0
  while (temp != listHead)
 800f8a0:	4282      	cmp	r2, r0
 800f8a2:	d103      	bne.n	800f8ac <list_get_size+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f8a4:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	4770      	bx	lr
    temp = temp->next;		
 800f8ac:	6812      	ldr	r2, [r2, #0]
    size++;
 800f8ae:	3301      	adds	r3, #1
    temp = temp->next;		
 800f8b0:	e7f6      	b.n	800f8a0 <list_get_size+0xa>
	...

0800f8b4 <ReseMetaDataManager>:
 */
void ReseMetaDataManager(void) {
  MDM_OsxLicenseType_t osxLic;
  MDM_GenericMetaDataType_t GMD;

  NecessityToSaveMetaDataManager=1;
 800f8b4:	4b0f      	ldr	r3, [pc, #60]	; (800f8f4 <ReseMetaDataManager+0x40>)
  puint8_RW_MetaData = ((uint8_t *) uint64_MetaDataVector)+8;
 800f8b6:	4910      	ldr	r1, [pc, #64]	; (800f8f8 <ReseMetaDataManager+0x44>)
  pMetaDataManagerHeader->IsIntialized = MDM_VALID_META_DATA_MANAGER;
 800f8b8:	4810      	ldr	r0, [pc, #64]	; (800f8fc <ReseMetaDataManager+0x48>)
 800f8ba:	f841 0c08 	str.w	r0, [r1, #-8]
  NecessityToSaveMetaDataManager=1;
 800f8be:	2201      	movs	r2, #1
 800f8c0:	601a      	str	r2, [r3, #0]
  puint8_RW_MetaData = ((uint8_t *) uint64_MetaDataVector)+8;
 800f8c2:	4a0f      	ldr	r2, [pc, #60]	; (800f900 <ReseMetaDataManager+0x4c>)
  pMetaDataManagerHeader->Version = MDM_VERSION;
  /* add the MetaData Teminitation */
  *((uint32_t *) puint8_RW_MetaData)     = MDM_DATA_TYPE_END;
 800f8c4:	480f      	ldr	r0, [pc, #60]	; (800f904 <ReseMetaDataManager+0x50>)
  puint8_RW_MetaData = ((uint8_t *) uint64_MetaDataVector)+8;
 800f8c6:	f842 1b04 	str.w	r1, [r2], #4
  pMetaDataManagerHeader->IsIntialized = MDM_VALID_META_DATA_MANAGER;
 800f8ca:	f1a1 0308 	sub.w	r3, r1, #8
  *((uint32_t *) puint8_RW_MetaData)     = MDM_DATA_TYPE_END;
 800f8ce:	21ff      	movs	r1, #255	; 0xff
 800f8d0:	e9c3 0101 	strd	r0, r1, [r3, #4]
  *((uint32_t *) (puint8_RW_MetaData+4)) = 0; /* No Payload */
 800f8d4:	2100      	movs	r1, #0
 800f8d6:	60d9      	str	r1, [r3, #12]
 800f8d8:	2309      	movs	r3, #9

  /* Reset all the Payload pointers */
  for(osxLic=OSX_MOTION_FX;osxLic<OSX_LICENSE_NUM;osxLic++) {
 800f8da:	3b01      	subs	r3, #1
    MDM_LicTable[osxLic].Address =0;
 800f8dc:	63d1      	str	r1, [r2, #60]	; 0x3c
  for(osxLic=OSX_MOTION_FX;osxLic<OSX_LICENSE_NUM;osxLic++) {
 800f8de:	f102 0220 	add.w	r2, r2, #32
 800f8e2:	d1fa      	bne.n	800f8da <ReseMetaDataManager+0x26>
 800f8e4:	4908      	ldr	r1, [pc, #32]	; (800f908 <ReseMetaDataManager+0x54>)
 800f8e6:	220e      	movs	r2, #14
  }
  for(GMD=GMD_WIFI;GMD<GMD_NUM;GMD++){
 800f8e8:	3a01      	subs	r2, #1
    MDM_GMDTable[GMD].Address =0;
 800f8ea:	634b      	str	r3, [r1, #52]	; 0x34
  for(GMD=GMD_WIFI;GMD<GMD_NUM;GMD++){
 800f8ec:	f101 011c 	add.w	r1, r1, #28
 800f8f0:	d1fa      	bne.n	800f8e8 <ReseMetaDataManager+0x34>
  }
}
 800f8f2:	4770      	bx	lr
 800f8f4:	20001798 	.word	0x20001798
 800f8f8:	200017e8 	.word	0x200017e8
 800f8fc:	12345678 	.word	0x12345678
 800f900:	200000d0 	.word	0x200000d0
 800f904:	00010300 	.word	0x00010300
 800f908:	20000214 	.word	0x20000214

0800f90c <EraseMetaDataManager>:
/**
 * @brief Erase the Meta Data Manager in FLASH
 * @param uint32_t Success/NotSuccess [1/0]
 * @retval None
 */
uint32_t EraseMetaDataManager(void) {
 800f90c:	b510      	push	{r4, lr}
 800f90e:	b0c0      	sub	sp, #256	; 0x100
  uint32_t Success = UserFunctionForErasingFlash();
 800f910:	f008 fd8a 	bl	8018428 <UserFunctionForErasingFlash>
  if(Success) {
 800f914:	4604      	mov	r4, r0
 800f916:	b138      	cbz	r0, 800f928 <EraseMetaDataManager+0x1c>
    MDM_PRINTF("Meta Data Manager erased in FLASH\r\n");
 800f918:	4905      	ldr	r1, [pc, #20]	; (800f930 <EraseMetaDataManager+0x24>)
 800f91a:	4668      	mov	r0, sp
 800f91c:	f00d fa7c 	bl	801ce18 <strcpy>
 800f920:	2123      	movs	r1, #35	; 0x23
 800f922:	4668      	mov	r0, sp
 800f924:	f00a f842 	bl	80199ac <CDC_Fill_Buffer>
  }
  return Success;
}
 800f928:	4620      	mov	r0, r4
 800f92a:	b040      	add	sp, #256	; 0x100
 800f92c:	bd10      	pop	{r4, pc}
 800f92e:	bf00      	nop
 800f930:	08022853 	.word	0x08022853

0800f934 <SaveMetaDataManager>:
 * @brief Save the Meta Data Manager in Flash
 * @param None
 * @retval None
 */
void SaveMetaDataManager(void)
{
 800f934:	b500      	push	{lr}
  uint32_t Success = UserFunctionForSavingFlash((void *)uint64_MetaDataVector,(void *)(puint8_RW_MetaData +8));
 800f936:	4b0b      	ldr	r3, [pc, #44]	; (800f964 <SaveMetaDataManager+0x30>)
 800f938:	480b      	ldr	r0, [pc, #44]	; (800f968 <SaveMetaDataManager+0x34>)
 800f93a:	6819      	ldr	r1, [r3, #0]
{
 800f93c:	b0c1      	sub	sp, #260	; 0x104
  uint32_t Success = UserFunctionForSavingFlash((void *)uint64_MetaDataVector,(void *)(puint8_RW_MetaData +8));
 800f93e:	3108      	adds	r1, #8
 800f940:	f008 fde4 	bl	801850c <UserFunctionForSavingFlash>

  if(Success) {
 800f944:	b138      	cbz	r0, 800f956 <SaveMetaDataManager+0x22>
    MDM_PRINTF("Meta Data Manager Saved in FLASH\r\n");
 800f946:	4909      	ldr	r1, [pc, #36]	; (800f96c <SaveMetaDataManager+0x38>)
 800f948:	4668      	mov	r0, sp
 800f94a:	f00d fa65 	bl	801ce18 <strcpy>
 800f94e:	2122      	movs	r1, #34	; 0x22
 800f950:	4668      	mov	r0, sp
 800f952:	f00a f82b 	bl	80199ac <CDC_Fill_Buffer>
  }
  NecessityToSaveMetaDataManager=0;
 800f956:	4b06      	ldr	r3, [pc, #24]	; (800f970 <SaveMetaDataManager+0x3c>)
 800f958:	2200      	movs	r2, #0
 800f95a:	601a      	str	r2, [r3, #0]
}
 800f95c:	b041      	add	sp, #260	; 0x104
 800f95e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f962:	bf00      	nop
 800f964:	200000d0 	.word	0x200000d0
 800f968:	200017e0 	.word	0x200017e0
 800f96c:	08022877 	.word	0x08022877
 800f970:	20001798 	.word	0x20001798

0800f974 <InitMetaDataManager>:
void InitMetaDataManager(void *Ptr,...) {
 800f974:	b40f      	push	{r0, r1, r2, r3}
 800f976:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint32_t data32 = *(__IO uint32_t*) Address;
 800f97a:	4a8f      	ldr	r2, [pc, #572]	; (800fbb8 <InitMetaDataManager+0x244>)
  puint8_RW_MetaData = ((uint8_t *) uint64_MetaDataVector)+8;
 800f97c:	4d8f      	ldr	r5, [pc, #572]	; (800fbbc <InitMetaDataManager+0x248>)
  __IO uint32_t data32 = *(__IO uint32_t*) Address;
 800f97e:	6811      	ldr	r1, [r2, #0]
  puint8_RW_MetaData = ((uint8_t *) uint64_MetaDataVector)+8;
 800f980:	4b8f      	ldr	r3, [pc, #572]	; (800fbc0 <InitMetaDataManager+0x24c>)
 800f982:	602b      	str	r3, [r5, #0]
void InitMetaDataManager(void *Ptr,...) {
 800f984:	b0c9      	sub	sp, #292	; 0x124
  __IO uint32_t data32 = *(__IO uint32_t*) Address;
 800f986:	9107      	str	r1, [sp, #28]
  if(data32== MDM_VALID_META_DATA_MANAGER){
 800f988:	9807      	ldr	r0, [sp, #28]
 800f98a:	498e      	ldr	r1, [pc, #568]	; (800fbc4 <InitMetaDataManager+0x250>)
void InitMetaDataManager(void *Ptr,...) {
 800f98c:	9c52      	ldr	r4, [sp, #328]	; 0x148
  if(data32== MDM_VALID_META_DATA_MANAGER){
 800f98e:	4288      	cmp	r0, r1
 800f990:	f040 809b 	bne.w	800faca <InitMetaDataManager+0x156>
    pMetaDataManagerHeader->IsIntialized = data32;
 800f994:	9907      	ldr	r1, [sp, #28]
 800f996:	f843 1c08 	str.w	r1, [r3, #-8]
    data32 = *(__IO uint32_t*) Address;
 800f99a:	6851      	ldr	r1, [r2, #4]
 800f99c:	9107      	str	r1, [sp, #28]
    pMetaDataManagerHeader->Version = data32;
 800f99e:	9907      	ldr	r1, [sp, #28]
    if(pMetaDataManagerHeader->Version !=  MDM_VERSION) {
 800f9a0:	4889      	ldr	r0, [pc, #548]	; (800fbc8 <InitMetaDataManager+0x254>)
    pMetaDataManagerHeader->Version = data32;
 800f9a2:	f843 1c04 	str.w	r1, [r3, #-4]
    if(pMetaDataManagerHeader->Version !=  MDM_VERSION) {
 800f9a6:	4281      	cmp	r1, r0
 800f9a8:	d008      	beq.n	800f9bc <InitMetaDataManager+0x48>
      MDM_PRINTF("Warning: The Meta Data Manager in FLASH is not Compatible\r\n\tIt will be ERASED\r\n");
 800f9aa:	4988      	ldr	r1, [pc, #544]	; (800fbcc <InitMetaDataManager+0x258>)
 800f9ac:	a808      	add	r0, sp, #32
 800f9ae:	f00d fa33 	bl	801ce18 <strcpy>
 800f9b2:	214f      	movs	r1, #79	; 0x4f
    MDM_PRINTF("Meta Data Manager not present in FLASH\r\n");
 800f9b4:	a808      	add	r0, sp, #32
 800f9b6:	f009 fff9 	bl	80199ac <CDC_Fill_Buffer>
 800f9ba:	e017      	b.n	800f9ec <InitMetaDataManager+0x78>
    data32 = *(__IO uint32_t*) Address;
 800f9bc:	6892      	ldr	r2, [r2, #8]
 800f9be:	9207      	str	r2, [sp, #28]
    Address+=4;
 800f9c0:	4883      	ldr	r0, [pc, #524]	; (800fbd0 <InitMetaDataManager+0x25c>)
    while(data32!=MDM_DATA_TYPE_END) {
 800f9c2:	2200      	movs	r2, #0
  uint32_t RetValue=0;
 800f9c4:	4616      	mov	r6, r2
    while(data32!=MDM_DATA_TYPE_END) {
 800f9c6:	9907      	ldr	r1, [sp, #28]
 800f9c8:	29ff      	cmp	r1, #255	; 0xff
 800f9ca:	d15b      	bne.n	800fa84 <InitMetaDataManager+0x110>
 800f9cc:	b102      	cbz	r2, 800f9d0 <InitMetaDataManager+0x5c>
 800f9ce:	602b      	str	r3, [r5, #0]
    *((uint32_t *) puint8_RW_MetaData)     = MDM_DATA_TYPE_END;
 800f9d0:	682b      	ldr	r3, [r5, #0]
    MDM_PRINTF("Meta Data Manager read from Flash\r\n");
 800f9d2:	4980      	ldr	r1, [pc, #512]	; (800fbd4 <InitMetaDataManager+0x260>)
    *((uint32_t *) puint8_RW_MetaData)     = MDM_DATA_TYPE_END;
 800f9d4:	22ff      	movs	r2, #255	; 0xff
 800f9d6:	601a      	str	r2, [r3, #0]
    *(((uint32_t *) puint8_RW_MetaData)+4) = 0; /* No Payload */
 800f9d8:	2200      	movs	r2, #0
 800f9da:	611a      	str	r2, [r3, #16]
    MDM_PRINTF("Meta Data Manager read from Flash\r\n");
 800f9dc:	a808      	add	r0, sp, #32
 800f9de:	f00d fa1b 	bl	801ce18 <strcpy>
 800f9e2:	2123      	movs	r1, #35	; 0x23
 800f9e4:	a808      	add	r0, sp, #32
 800f9e6:	f009 ffe1 	bl	80199ac <CDC_Fill_Buffer>
  if(ReCallMetaDataManager()==0) {
 800f9ea:	b90e      	cbnz	r6, 800f9f0 <InitMetaDataManager+0x7c>
    ReseMetaDataManager();
 800f9ec:	f7ff ff62 	bl	800f8b4 <ReseMetaDataManager>
  va_start (ap, Ptr);
 800f9f0:	ab53      	add	r3, sp, #332	; 0x14c
  while(KnownMetaDataTable!=NULL) {
 800f9f2:	f04f 0b00 	mov.w	fp, #0
            MDM_GMDTable[PayLoad->GMDTypeEnum].Address = (uint32_t)PayLoad;
 800f9f6:	4e71      	ldr	r6, [pc, #452]	; (800fbbc <InitMetaDataManager+0x248>)
  va_start (ap, Ptr);
 800f9f8:	9306      	str	r3, [sp, #24]
  while(KnownMetaDataTable!=NULL) {
 800f9fa:	46d9      	mov	r9, fp
 800f9fc:	2c00      	cmp	r4, #0
 800f9fe:	d16a      	bne.n	800fad6 <InitMetaDataManager+0x162>
  if(NecessityToSaveMetaDataManager) {
 800fa00:	4c75      	ldr	r4, [pc, #468]	; (800fbd8 <InitMetaDataManager+0x264>)
 800fa02:	6823      	ldr	r3, [r4, #0]
 800fa04:	b123      	cbz	r3, 800fa10 <InitMetaDataManager+0x9c>
    uint32_t Success = EraseMetaDataManager();
 800fa06:	f7ff ff81 	bl	800f90c <EraseMetaDataManager>
    if(Success) {
 800fa0a:	b108      	cbz	r0, 800fa10 <InitMetaDataManager+0x9c>
      SaveMetaDataManager();
 800fa0c:	f7ff ff92 	bl	800f934 <SaveMetaDataManager>
  MDM_PRINTF("Meta Data Manager version=%ld.%ld.%ld\r\n",
 800fa10:	4b72      	ldr	r3, [pc, #456]	; (800fbdc <InitMetaDataManager+0x268>)
 800fa12:	4973      	ldr	r1, [pc, #460]	; (800fbe0 <InitMetaDataManager+0x26c>)
 800fa14:	685a      	ldr	r2, [r3, #4]
 800fa16:	b2d3      	uxtb	r3, r2
 800fa18:	9300      	str	r3, [sp, #0]
 800fa1a:	a808      	add	r0, sp, #32
 800fa1c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800fa20:	0c12      	lsrs	r2, r2, #16
 800fa22:	f00d f989 	bl	801cd38 <siprintf>
 800fa26:	4601      	mov	r1, r0
 800fa28:	a808      	add	r0, sp, #32
 800fa2a:	f009 ffbf 	bl	80199ac <CDC_Fill_Buffer>
  if((NumberOfKnownGMD!=0) | (NumberofFoundedGMD!=0)) {
 800fa2e:	6863      	ldr	r3, [r4, #4]
 800fa30:	ea5b 0303 	orrs.w	r3, fp, r3
 800fa34:	f000 80a9 	beq.w	800fb8a <InitMetaDataManager+0x216>
 * @retval None
 */
static void PrintOut_MDM_GMDStatus(void)
{
  MDM_GenericMetaDataType_t GMD;
  MDM_PRINTF("\tGeneric Meta Data found:\r\n");
 800fa38:	496a      	ldr	r1, [pc, #424]	; (800fbe4 <InitMetaDataManager+0x270>)
 800fa3a:	4c6b      	ldr	r4, [pc, #428]	; (800fbe8 <InitMetaDataManager+0x274>)
  for(GMD=GMD_WIFI;GMD<GMD_NUM;GMD++) {
    MDM_PayLoadGMD_t *PayLoad = (MDM_PayLoadGMD_t *) MDM_GMDTable[GMD].Address;
    if(PayLoad) {
      MDM_PRINTF("\t\t %s Size=%ld [bytes]\r\n",MDM_GMDTable[PayLoad->GMDTypeEnum].GMDName,
 800fa3c:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800fbf4 <InitMetaDataManager+0x280>
  MDM_PRINTF("\tGeneric Meta Data found:\r\n");
 800fa40:	a808      	add	r0, sp, #32
 800fa42:	f00d f9e9 	bl	801ce18 <strcpy>
 800fa46:	211b      	movs	r1, #27
 800fa48:	a808      	add	r0, sp, #32
 800fa4a:	f009 ffaf 	bl	80199ac <CDC_Fill_Buffer>
  for(GMD=GMD_WIFI;GMD<GMD_NUM;GMD++) {
 800fa4e:	260e      	movs	r6, #14
 800fa50:	4627      	mov	r7, r4
      MDM_PRINTF("\t\t %s Size=%ld [bytes]\r\n",MDM_GMDTable[PayLoad->GMDTypeEnum].GMDName,
 800fa52:	f04f 081c 	mov.w	r8, #28
    MDM_PayLoadGMD_t *PayLoad = (MDM_PayLoadGMD_t *) MDM_GMDTable[GMD].Address;
 800fa56:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if(PayLoad) {
 800fa58:	b17b      	cbz	r3, 800fa7a <InitMetaDataManager+0x106>
      MDM_PRINTF("\t\t %s Size=%ld [bytes]\r\n",MDM_GMDTable[PayLoad->GMDTypeEnum].GMDName,
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	fb08 f202 	mul.w	r2, r8, r2
 800fa60:	18ab      	adds	r3, r5, r2
 800fa62:	3204      	adds	r2, #4
 800fa64:	4649      	mov	r1, r9
 800fa66:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800fa6a:	443a      	add	r2, r7
 800fa6c:	a808      	add	r0, sp, #32
 800fa6e:	f00d f963 	bl	801cd38 <siprintf>
 800fa72:	4601      	mov	r1, r0
 800fa74:	a808      	add	r0, sp, #32
 800fa76:	f009 ff99 	bl	80199ac <CDC_Fill_Buffer>
  for(GMD=GMD_WIFI;GMD<GMD_NUM;GMD++) {
 800fa7a:	3e01      	subs	r6, #1
 800fa7c:	f104 041c 	add.w	r4, r4, #28
 800fa80:	d1e9      	bne.n	800fa56 <InitMetaDataManager+0xe2>
 800fa82:	e082      	b.n	800fb8a <InitMetaDataManager+0x216>
      Type = (MDM_MetaDataType_t) data32;
 800fa84:	9a07      	ldr	r2, [sp, #28]
      data32 = *(__IO uint32_t*) Address;
 800fa86:	6841      	ldr	r1, [r0, #4]
 800fa88:	9107      	str	r1, [sp, #28]
      Lenght = data32;
 800fa8a:	9907      	ldr	r1, [sp, #28]
      pMetaDataHeader->Type = Type;
 800fa8c:	b2d2      	uxtb	r2, r2
      pMetaDataHeader->Lenght =  Lenght;      
 800fa8e:	e9c3 2100 	strd	r2, r1, [r3]
      puint32_MetaData = (uint32_t *) pMetaDataHeader->puint8_PayLoad;
 800fa92:	f103 0708 	add.w	r7, r3, #8
      for(Index=0;Index<(Lenght-8);Index+=4) {
 800fa96:	2200      	movs	r2, #0
 800fa98:	f1a1 0608 	sub.w	r6, r1, #8
 800fa9c:	f100 0c08 	add.w	ip, r0, #8
 800faa0:	42b2      	cmp	r2, r6
 800faa2:	d306      	bcc.n	800fab2 <InitMetaDataManager+0x13e>
      Address +=Lenght-8;
 800faa4:	4408      	add	r0, r1
      puint8_RW_MetaData +=Lenght-8;
 800faa6:	440b      	add	r3, r1
      data32 = *(__IO uint32_t*) Address;
 800faa8:	6802      	ldr	r2, [r0, #0]
 800faaa:	9207      	str	r2, [sp, #28]
 800faac:	2201      	movs	r2, #1
      RetValue =1;
 800faae:	4616      	mov	r6, r2
 800fab0:	e789      	b.n	800f9c6 <InitMetaDataManager+0x52>
        data32 = *(__IO uint32_t*) (Address+Index);
 800fab2:	f85c e002 	ldr.w	lr, [ip, r2]
 800fab6:	f8cd e01c 	str.w	lr, [sp, #28]
        puint32_MetaData[Index>>2] = data32;
 800faba:	ea4f 0e92 	mov.w	lr, r2, lsr #2
 800fabe:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800fac2:	f847 802e 	str.w	r8, [r7, lr, lsl #2]
      for(Index=0;Index<(Lenght-8);Index+=4) {
 800fac6:	3204      	adds	r2, #4
 800fac8:	e7ea      	b.n	800faa0 <InitMetaDataManager+0x12c>
    MDM_PRINTF("Meta Data Manager not present in FLASH\r\n");
 800faca:	4948      	ldr	r1, [pc, #288]	; (800fbec <InitMetaDataManager+0x278>)
 800facc:	a808      	add	r0, sp, #32
 800face:	f00d f9a3 	bl	801ce18 <strcpy>
 800fad2:	2128      	movs	r1, #40	; 0x28
 800fad4:	e76e      	b.n	800f9b4 <InitMetaDataManager+0x40>
    MDM_MetaDataType_t  MetaDataType = (MDM_MetaDataType_t) va_arg(ap,int);
 800fad6:	9b06      	ldr	r3, [sp, #24]
 800fad8:	9303      	str	r3, [sp, #12]
 800fada:	3304      	adds	r3, #4
 800fadc:	9306      	str	r3, [sp, #24]
 800fade:	9b03      	ldr	r3, [sp, #12]
 800fae0:	681f      	ldr	r7, [r3, #0]
    switch(MetaDataType) {
 800fae2:	f017 03ff 	ands.w	r3, r7, #255	; 0xff
 800fae6:	d02f      	beq.n	800fb48 <InitMetaDataManager+0x1d4>
 800fae8:	2b01      	cmp	r3, #1
 800faea:	d146      	bne.n	800fb7a <InitMetaDataManager+0x206>
 800faec:	483a      	ldr	r0, [pc, #232]	; (800fbd8 <InitMetaDataManager+0x264>)
 800faee:	6841      	ldr	r1, [r0, #4]
 800faf0:	f06f 0307 	mvn.w	r3, #7
 800faf4:	fb01 3303 	mla	r3, r1, r3, r3
 800faf8:	4423      	add	r3, r4
 800fafa:	2200      	movs	r2, #0
        for(Index =0; known_GMD[Index].GMDType!=GMD_END ;Index++) {
 800fafc:	468c      	mov	ip, r1
 800fafe:	3101      	adds	r1, #1
 800fb00:	f813 e031 	ldrb.w	lr, [r3, r1, lsl #3]
 800fb04:	f1be 0f00 	cmp.w	lr, #0
 800fb08:	d135      	bne.n	800fb76 <InitMetaDataManager+0x202>
 800fb0a:	b10a      	cbz	r2, 800fb10 <InitMetaDataManager+0x19c>
 800fb0c:	f8c0 c004 	str.w	ip, [r0, #4]
    MDM_knownGMD_t *known_GMD=NULL;
 800fb10:	46a2      	mov	sl, r4
    MDM_knownOsxLicense_t *known_OsxLic=NULL;
 800fb12:	2400      	movs	r4, #0
        for(Index =0; ((Index<NumberOfKnownGMD) & (found==0));Index++) {
 800fb14:	4b30      	ldr	r3, [pc, #192]	; (800fbd8 <InitMetaDataManager+0x264>)
    pMetaDataHeader = (MDM_MetaDataHeader_t *) pMetaDataManagerHeader->puint8_MetaData;
 800fb16:	492a      	ldr	r1, [pc, #168]	; (800fbc0 <InitMetaDataManager+0x24c>)
        for(Index =0; ((Index<NumberOfKnownGMD) & (found==0));Index++) {
 800fb18:	685a      	ldr	r2, [r3, #4]
        for(Index =0; ((Index<NumberOfKnownLic) & (found==0));Index++) {
 800fb1a:	689b      	ldr	r3, [r3, #8]
        for(Index =0; ((Index<NumberOfKnownGMD) & (found==0));Index++) {
 800fb1c:	9205      	str	r2, [sp, #20]
        for(Index =0; ((Index<NumberOfKnownLic) & (found==0));Index++) {
 800fb1e:	9304      	str	r3, [sp, #16]
            if(known_GMD[Index].GMDSize!=PayLoad->GMDSize) {
 800fb20:	f10a 0804 	add.w	r8, sl, #4
    while(pMetaDataHeader->Type!=MDM_DATA_TYPE_END) {
 800fb24:	680b      	ldr	r3, [r1, #0]
 800fb26:	2bff      	cmp	r3, #255	; 0xff
 800fb28:	f000 8096 	beq.w	800fc58 <InitMetaDataManager+0x2e4>
      if(pMetaDataHeader->Type == MDM_DATA_TYPE_LIC) {
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d163      	bne.n	800fbf8 <InitMetaDataManager+0x284>
        MDM_PayLoadLic_t *PayLoad = (MDM_PayLoadLic_t *) pMetaDataHeader->puint8_PayLoad;
 800fb30:	f101 0c08 	add.w	ip, r1, #8
        int32_t found=0;
 800fb34:	461a      	mov	r2, r3
          if(known_OsxLic[Index].LicEnum==PayLoad->LicEnum) {
 800fb36:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
        for(Index =0; ((Index<NumberOfKnownLic) & (found==0));Index++) {
 800fb3a:	9804      	ldr	r0, [sp, #16]
 800fb3c:	4298      	cmp	r0, r3
 800fb3e:	d900      	bls.n	800fb42 <InitMetaDataManager+0x1ce>
 800fb40:	b342      	cbz	r2, 800fb94 <InitMetaDataManager+0x220>
      pMetaDataHeader = (MDM_MetaDataHeader_t *) (((uint32_t) pMetaDataHeader)+pMetaDataHeader->Lenght);
 800fb42:	684b      	ldr	r3, [r1, #4]
 800fb44:	4419      	add	r1, r3
 800fb46:	e7ed      	b.n	800fb24 <InitMetaDataManager+0x1b0>
 800fb48:	4923      	ldr	r1, [pc, #140]	; (800fbd8 <InitMetaDataManager+0x264>)
 800fb4a:	f8d1 e008 	ldr.w	lr, [r1, #8]
        for(Index =0; known_OsxLic[Index].LicEnum!=OSX_END ;Index++) {
 800fb4e:	461a      	mov	r2, r3
 800fb50:	f04f 082d 	mov.w	r8, #45	; 0x2d
 800fb54:	fb08 fc02 	mul.w	ip, r8, r2
 800fb58:	eb02 000e 	add.w	r0, r2, lr
 800fb5c:	f814 c00c 	ldrb.w	ip, [r4, ip]
 800fb60:	f1bc 0f00 	cmp.w	ip, #0
 800fb64:	d104      	bne.n	800fb70 <InitMetaDataManager+0x1fc>
 800fb66:	b103      	cbz	r3, 800fb6a <InitMetaDataManager+0x1f6>
 800fb68:	6088      	str	r0, [r1, #8]
    MDM_knownGMD_t *known_GMD=NULL;
 800fb6a:	f04f 0a00 	mov.w	sl, #0
 800fb6e:	e7d1      	b.n	800fb14 <InitMetaDataManager+0x1a0>
        for(Index =0; known_OsxLic[Index].LicEnum!=OSX_END ;Index++) {
 800fb70:	3201      	adds	r2, #1
 800fb72:	2301      	movs	r3, #1
 800fb74:	e7ee      	b.n	800fb54 <InitMetaDataManager+0x1e0>
 800fb76:	2201      	movs	r2, #1
 800fb78:	e7c0      	b.n	800fafc <InitMetaDataManager+0x188>
        MDM_PRINTF("Error Unknow Meta Data Type\r\n");
 800fb7a:	491d      	ldr	r1, [pc, #116]	; (800fbf0 <InitMetaDataManager+0x27c>)
 800fb7c:	a808      	add	r0, sp, #32
 800fb7e:	f00d f94b 	bl	801ce18 <strcpy>
 800fb82:	211d      	movs	r1, #29
 800fb84:	a808      	add	r0, sp, #32
 800fb86:	f009 ff11 	bl	80199ac <CDC_Fill_Buffer>
}
 800fb8a:	b049      	add	sp, #292	; 0x124
 800fb8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb90:	b004      	add	sp, #16
 800fb92:	4770      	bx	lr
          if(known_OsxLic[Index].LicEnum==PayLoad->LicEnum) {
 800fb94:	fb0e f203 	mul.w	r2, lr, r3
 800fb98:	6888      	ldr	r0, [r1, #8]
 800fb9a:	5ca2      	ldrb	r2, [r4, r2]
 800fb9c:	4282      	cmp	r2, r0
            MDM_LicTable[PayLoad->LicEnum].Address = (uint32_t)PayLoad;
 800fb9e:	bf03      	ittte	eq
 800fba0:	eb05 1242 	addeq.w	r2, r5, r2, lsl #5
            NumberofFoundedLic++;
 800fba4:	f109 0901 	addeq.w	r9, r9, #1
            MDM_LicTable[PayLoad->LicEnum].Address = (uint32_t)PayLoad;
 800fba8:	f8c2 c020 	streq.w	ip, [r2, #32]
            NumberofFoundedLic++;
 800fbac:	2200      	movne	r2, #0
            found =1;
 800fbae:	bf08      	it	eq
 800fbb0:	2201      	moveq	r2, #1
        for(Index =0; ((Index<NumberOfKnownLic) & (found==0));Index++) {
 800fbb2:	3301      	adds	r3, #1
 800fbb4:	e7c1      	b.n	800fb3a <InitMetaDataManager+0x1c6>
 800fbb6:	bf00      	nop
 800fbb8:	081ff000 	.word	0x081ff000
 800fbbc:	200000d0 	.word	0x200000d0
 800fbc0:	200017e8 	.word	0x200017e8
 800fbc4:	12345678 	.word	0x12345678
 800fbc8:	00010300 	.word	0x00010300
 800fbcc:	0802289a 	.word	0x0802289a
 800fbd0:	081ff008 	.word	0x081ff008
 800fbd4:	080228ea 	.word	0x080228ea
 800fbd8:	20001798 	.word	0x20001798
 800fbdc:	200017e0 	.word	0x200017e0
 800fbe0:	08022a52 	.word	0x08022a52
 800fbe4:	08022a7a 	.word	0x08022a7a
 800fbe8:	20000214 	.word	0x20000214
 800fbec:	0802290e 	.word	0x0802290e
 800fbf0:	08022937 	.word	0x08022937
 800fbf4:	08022a96 	.word	0x08022a96
      } else if(pMetaDataHeader->Type == MDM_DATA_TYPE_GMD) {
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	d1a2      	bne.n	800fb42 <InitMetaDataManager+0x1ce>
        int32_t found=0;
 800fbfc:	2300      	movs	r3, #0
        MDM_PayLoadGMD_t *PayLoad = (MDM_PayLoadGMD_t *) pMetaDataHeader->puint8_PayLoad;
 800fbfe:	f101 0e08 	add.w	lr, r1, #8
        for(Index =0; ((Index<NumberOfKnownGMD) & (found==0));Index++) {
 800fc02:	4618      	mov	r0, r3
 800fc04:	9a05      	ldr	r2, [sp, #20]
 800fc06:	4282      	cmp	r2, r0
 800fc08:	d99b      	bls.n	800fb42 <InitMetaDataManager+0x1ce>
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d199      	bne.n	800fb42 <InitMetaDataManager+0x1ce>
          if(known_GMD[Index].GMDType==PayLoad->GMDTypeEnum) {
 800fc0e:	688b      	ldr	r3, [r1, #8]
 800fc10:	f81a 2030 	ldrb.w	r2, [sl, r0, lsl #3]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d15e      	bne.n	800fcd6 <InitMetaDataManager+0x362>
            MDM_GMDTable[PayLoad->GMDTypeEnum].Address = (uint32_t)PayLoad;
 800fc18:	231c      	movs	r3, #28
 800fc1a:	435a      	muls	r2, r3
 800fc1c:	eb06 0c02 	add.w	ip, r6, r2
            MDM_GMDTable[PayLoad->GMDTypeEnum].GMDSize = PayLoad->GMDSize;
 800fc20:	68cb      	ldr	r3, [r1, #12]
            MDM_GMDTable[PayLoad->GMDTypeEnum].Address = (uint32_t)PayLoad;
 800fc22:	f8cc e15c 	str.w	lr, [ip, #348]	; 0x15c
            MDM_GMDTable[PayLoad->GMDTypeEnum].GMDSize = PayLoad->GMDSize;
 800fc26:	f8cc 3158 	str.w	r3, [ip, #344]	; 0x158
            if(known_GMD[Index].GMDSize!=PayLoad->GMDSize) {
 800fc2a:	f858 c030 	ldr.w	ip, [r8, r0, lsl #3]
 800fc2e:	4563      	cmp	r3, ip
            NumberofFoundedGMD++;
 800fc30:	f10b 0b01 	add.w	fp, fp, #1
            if(known_GMD[Index].GMDSize!=PayLoad->GMDSize) {
 800fc34:	d052      	beq.n	800fcdc <InitMetaDataManager+0x368>
              MDM_PRINTF("Warning: The Meta Data Manager Contains for %s Generic Meta Data a size=%ld different from what we need =%ld\r\n\tIt will be ERASED\r\n",
 800fc36:	497f      	ldr	r1, [pc, #508]	; (800fe34 <InitMetaDataManager+0x4c0>)
 800fc38:	f8cd c000 	str.w	ip, [sp]
 800fc3c:	440a      	add	r2, r1
 800fc3e:	a808      	add	r0, sp, #32
 800fc40:	497d      	ldr	r1, [pc, #500]	; (800fe38 <InitMetaDataManager+0x4c4>)
 800fc42:	f00d f879 	bl	801cd38 <siprintf>
 800fc46:	4601      	mov	r1, r0
 800fc48:	a808      	add	r0, sp, #32
 800fc4a:	f009 feaf 	bl	80199ac <CDC_Fill_Buffer>
              ReseMetaDataManager();
 800fc4e:	f7ff fe31 	bl	800f8b4 <ReseMetaDataManager>
              NumberofFoundedGMD=0;
 800fc52:	f04f 0b00 	mov.w	fp, #0
              NumberofFoundedLic=0;
 800fc56:	46d9      	mov	r9, fp
    if(MetaDataType==MDM_DATA_TYPE_LIC) {
 800fc58:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 800fc5c:	d175      	bne.n	800fd4a <InitMetaDataManager+0x3d6>
      if(NumberofFoundedLic<NumberOfKnownLic) {
 800fc5e:	4b77      	ldr	r3, [pc, #476]	; (800fe3c <InitMetaDataManager+0x4c8>)
 800fc60:	689a      	ldr	r2, [r3, #8]
 800fc62:	454a      	cmp	r2, r9
 800fc64:	d931      	bls.n	800fcca <InitMetaDataManager+0x356>
        NecessityToSaveMetaDataManager = 1;
 800fc66:	2101      	movs	r1, #1
 800fc68:	6019      	str	r1, [r3, #0]
             ((uint32_t)uint64_MetaDataVector) +
 800fc6a:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 800fe4c <InitMetaDataManager+0x4d8>
 800fc6e:	682b      	ldr	r3, [r5, #0]
 800fc70:	eba3 0308 	sub.w	r3, r3, r8
 800fc74:	3308      	adds	r3, #8
             (NumberOfKnownLic-NumberofFoundedLic)*(sizeof(MDM_PayLoadLic_t) + 8 /* MetaDataHeader */))>(MDM_MAX_DATASIZE_64<<3)) {
 800fc76:	eba2 0209 	sub.w	r2, r2, r9
             ((uint32_t)uint64_MetaDataVector) +
 800fc7a:	21a4      	movs	r1, #164	; 0xa4
 800fc7c:	fb01 3302 	mla	r3, r1, r2, r3
        if(((((uint32_t) puint8_RW_MetaData)+8/* for the MDM_DATA_TYPE_END */) -
 800fc80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc84:	d913      	bls.n	800fcae <InitMetaDataManager+0x33a>
          MDM_PRINTF("Meta Data Manager has not enough free space.. It will be reseted\r\n");
 800fc86:	496e      	ldr	r1, [pc, #440]	; (800fe40 <InitMetaDataManager+0x4cc>)
 800fc88:	a808      	add	r0, sp, #32
 800fc8a:	f00d f8c5 	bl	801ce18 <strcpy>
 800fc8e:	2142      	movs	r1, #66	; 0x42
 800fc90:	a808      	add	r0, sp, #32
 800fc92:	f009 fe8b 	bl	80199ac <CDC_Fill_Buffer>
          puint8_RW_MetaData = ((uint8_t *) uint64_MetaDataVector)+8;
 800fc96:	f108 0308 	add.w	r3, r8, #8
 800fc9a:	602b      	str	r3, [r5, #0]
          for(Index=1;Index<OSX_LICENSE_NUM;Index++) {
 800fc9c:	4b69      	ldr	r3, [pc, #420]	; (800fe44 <InitMetaDataManager+0x4d0>)
          puint8_RW_MetaData = ((uint8_t *) uint64_MetaDataVector)+8;
 800fc9e:	f04f 0909 	mov.w	r9, #9
          for(Index=1;Index<OSX_LICENSE_NUM;Index++) {
 800fca2:	f1b9 0901 	subs.w	r9, r9, #1
            MDM_LicTable[Index].Address =0;
 800fca6:	63df      	str	r7, [r3, #60]	; 0x3c
          for(Index=1;Index<OSX_LICENSE_NUM;Index++) {
 800fca8:	f103 0320 	add.w	r3, r3, #32
 800fcac:	d1f9      	bne.n	800fca2 <InitMetaDataManager+0x32e>
        for(Index=0;Index<NumberOfKnownLic; Index++) {
 800fcae:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800fe3c <InitMetaDataManager+0x4c8>
 800fcb2:	3409      	adds	r4, #9
 800fcb4:	f04f 0800 	mov.w	r8, #0
 800fcb8:	f8da 3008 	ldr.w	r3, [sl, #8]
            pMetaDataHeader = (MDM_MetaDataHeader_t *) (puint8_RW_MetaData);
 800fcbc:	6837      	ldr	r7, [r6, #0]
        for(Index=0;Index<NumberOfKnownLic; Index++) {
 800fcbe:	4543      	cmp	r3, r8
 800fcc0:	d80e      	bhi.n	800fce0 <InitMetaDataManager+0x36c>
        *((uint32_t *) (puint8_RW_MetaData+4)) = 0; /* No Payload */
 800fcc2:	21ff      	movs	r1, #255	; 0xff
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	e9c7 1300 	strd	r1, r3, [r7]
    KnownMetaDataTable= va_arg(ap,void *);
 800fcca:	9b03      	ldr	r3, [sp, #12]
 800fccc:	3308      	adds	r3, #8
 800fcce:	9306      	str	r3, [sp, #24]
 800fcd0:	9b03      	ldr	r3, [sp, #12]
 800fcd2:	685c      	ldr	r4, [r3, #4]
 800fcd4:	e692      	b.n	800f9fc <InitMetaDataManager+0x88>
 800fcd6:	2300      	movs	r3, #0
        for(Index =0; ((Index<NumberOfKnownGMD) & (found==0));Index++) {
 800fcd8:	3001      	adds	r0, #1
 800fcda:	e793      	b.n	800fc04 <InitMetaDataManager+0x290>
            found =1;
 800fcdc:	2301      	movs	r3, #1
 800fcde:	e7fb      	b.n	800fcd8 <InitMetaDataManager+0x364>
          if(MDM_LicTable[known_OsxLic[Index].LicEnum].Address==0) {
 800fce0:	f814 2c09 	ldrb.w	r2, [r4, #-9]
 800fce4:	eb06 1342 	add.w	r3, r6, r2, lsl #5
 800fce8:	6a1b      	ldr	r3, [r3, #32]
 800fcea:	bb53      	cbnz	r3, 800fd42 <InitMetaDataManager+0x3ce>
            pMetaDataHeader->Type = MDM_DATA_TYPE_LIC;
 800fcec:	603b      	str	r3, [r7, #0]
            PayLoad->osxLicenseInitialized = 0;
 800fcee:	60fb      	str	r3, [r7, #12]
            sprintf((char *)PayLoad->osxLibVersion,known_OsxLic[Index].osxLibVersion);
 800fcf0:	f107 0308 	add.w	r3, r7, #8
            pMetaDataHeader->Lenght = sizeof(MDM_PayLoadLic_t) + 8 /* For Meta Data Header */;
 800fcf4:	21a4      	movs	r1, #164	; 0xa4
            sprintf((char *)PayLoad->osxLibVersion,known_OsxLic[Index].osxLibVersion);
 800fcf6:	9304      	str	r3, [sp, #16]
 800fcf8:	f107 0310 	add.w	r3, r7, #16
            PayLoad->LicEnum = known_OsxLic[Index].LicEnum;
 800fcfc:	e9c7 1201 	strd	r1, r2, [r7, #4]
            sprintf((char *)PayLoad->osxLibVersion,known_OsxLic[Index].osxLibVersion);
 800fd00:	4618      	mov	r0, r3
 800fd02:	4621      	mov	r1, r4
 800fd04:	9305      	str	r3, [sp, #20]
 800fd06:	f00d f817 	bl	801cd38 <siprintf>
            MDM_PRINTF("Adding=%s%s Version=%s\r\n",MDM_LicTable[known_OsxLic[Index].LicEnum].LicType,MDM_LicTable[known_OsxLic[Index].LicEnum].LicName,PayLoad->osxLibVersion);
 800fd0a:	f814 2c09 	ldrb.w	r2, [r4, #-9]
 800fd0e:	9b05      	ldr	r3, [sp, #20]
 800fd10:	9300      	str	r3, [sp, #0]
 800fd12:	4b4c      	ldr	r3, [pc, #304]	; (800fe44 <InitMetaDataManager+0x4d0>)
 800fd14:	0152      	lsls	r2, r2, #5
 800fd16:	1d11      	adds	r1, r2, #4
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3210      	adds	r2, #16
 800fd1c:	440b      	add	r3, r1
 800fd1e:	4402      	add	r2, r0
 800fd20:	4949      	ldr	r1, [pc, #292]	; (800fe48 <InitMetaDataManager+0x4d4>)
 800fd22:	a808      	add	r0, sp, #32
 800fd24:	f00d f808 	bl	801cd38 <siprintf>
 800fd28:	4601      	mov	r1, r0
 800fd2a:	a808      	add	r0, sp, #32
 800fd2c:	f009 fe3e 	bl	80199ac <CDC_Fill_Buffer>
            MDM_LicTable[PayLoad->LicEnum].Address = (uint32_t)PayLoad;
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	9a04      	ldr	r2, [sp, #16]
 800fd34:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 800fd38:	621a      	str	r2, [r3, #32]
            puint8_RW_MetaData +=pMetaDataHeader->Lenght;
 800fd3a:	6833      	ldr	r3, [r6, #0]
 800fd3c:	687a      	ldr	r2, [r7, #4]
 800fd3e:	4413      	add	r3, r2
 800fd40:	6033      	str	r3, [r6, #0]
        for(Index=0;Index<NumberOfKnownLic; Index++) {
 800fd42:	f108 0801 	add.w	r8, r8, #1
 800fd46:	342d      	adds	r4, #45	; 0x2d
 800fd48:	e7b6      	b.n	800fcb8 <InitMetaDataManager+0x344>
    } else if(MetaDataType==MDM_DATA_TYPE_GMD){
 800fd4a:	2f01      	cmp	r7, #1
 800fd4c:	d1bd      	bne.n	800fcca <InitMetaDataManager+0x356>
      if(NumberofFoundedGMD<NumberOfKnownGMD) {
 800fd4e:	4b3b      	ldr	r3, [pc, #236]	; (800fe3c <InitMetaDataManager+0x4c8>)
 800fd50:	685c      	ldr	r4, [r3, #4]
 800fd52:	455c      	cmp	r4, fp
 800fd54:	d9b9      	bls.n	800fcca <InitMetaDataManager+0x356>
        for(Index =0; Index<NumberOfKnownGMD ;Index++) {
 800fd56:	2100      	movs	r1, #0
        NecessityToSaveMetaDataManager = 1;
 800fd58:	601f      	str	r7, [r3, #0]
        uint32_t HowManyExtraSpaceINeed =0;
 800fd5a:	460a      	mov	r2, r1
          if(MDM_GMDTable[known_GMD[Index].GMDType].Address==0) {
 800fd5c:	271c      	movs	r7, #28
            HowManyExtraSpaceINeed += (((known_GMD[Index].GMDSize+7)>>3)<<3) /* Round to Multiple of 8 bytes */ + 
 800fd5e:	f10a 0c04 	add.w	ip, sl, #4
        for(Index =0; Index<NumberOfKnownGMD ;Index++) {
 800fd62:	428c      	cmp	r4, r1
 800fd64:	d128      	bne.n	800fdb8 <InitMetaDataManager+0x444>
             ((uint32_t)uint64_MetaDataVector) +
 800fd66:	682b      	ldr	r3, [r5, #0]
 800fd68:	4c38      	ldr	r4, [pc, #224]	; (800fe4c <InitMetaDataManager+0x4d8>)
 800fd6a:	1b1b      	subs	r3, r3, r4
 800fd6c:	3308      	adds	r3, #8
 800fd6e:	4413      	add	r3, r2
        if(((((uint32_t) puint8_RW_MetaData)+8/* for the MDM_DATA_TYPE_END */) -
 800fd70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd74:	d913      	bls.n	800fd9e <InitMetaDataManager+0x42a>
          MDM_PRINTF("Meta Data Manager has not enough free space.. It will be reseted\r\n");
 800fd76:	4932      	ldr	r1, [pc, #200]	; (800fe40 <InitMetaDataManager+0x4cc>)
 800fd78:	a808      	add	r0, sp, #32
 800fd7a:	f00d f84d 	bl	801ce18 <strcpy>
 800fd7e:	2142      	movs	r1, #66	; 0x42
 800fd80:	a808      	add	r0, sp, #32
 800fd82:	f009 fe13 	bl	80199ac <CDC_Fill_Buffer>
          puint8_RW_MetaData = ((uint8_t *) uint64_MetaDataVector)+8;
 800fd86:	3408      	adds	r4, #8
 800fd88:	4b31      	ldr	r3, [pc, #196]	; (800fe50 <InitMetaDataManager+0x4dc>)
 800fd8a:	602c      	str	r4, [r5, #0]
 800fd8c:	f04f 0b0e 	mov.w	fp, #14
            MDM_GMDTable[Index].Address =0;
 800fd90:	2200      	movs	r2, #0
          for(Index=1;Index<GMD_NUM;Index++) {
 800fd92:	f1bb 0b01 	subs.w	fp, fp, #1
            MDM_GMDTable[Index].Address =0;
 800fd96:	635a      	str	r2, [r3, #52]	; 0x34
          for(Index=1;Index<GMD_NUM;Index++) {
 800fd98:	f103 031c 	add.w	r3, r3, #28
 800fd9c:	d1f9      	bne.n	800fd92 <InitMetaDataManager+0x41e>
        for(Index=0;Index<NumberOfKnownGMD; Index++) {
 800fd9e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800fe3c <InitMetaDataManager+0x4c8>
 800fda2:	2700      	movs	r7, #0
 800fda4:	f8d8 3004 	ldr.w	r3, [r8, #4]
            pMetaDataHeader = (MDM_MetaDataHeader_t *) (puint8_RW_MetaData);
 800fda8:	6834      	ldr	r4, [r6, #0]
        for(Index=0;Index<NumberOfKnownGMD; Index++) {
 800fdaa:	42bb      	cmp	r3, r7
 800fdac:	d815      	bhi.n	800fdda <InitMetaDataManager+0x466>
        *((uint32_t *) (puint8_RW_MetaData+4)) = 0; /* No Payload */
 800fdae:	22ff      	movs	r2, #255	; 0xff
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	e9c4 2300 	strd	r2, r3, [r4]
 800fdb6:	e788      	b.n	800fcca <InitMetaDataManager+0x356>
          if(MDM_GMDTable[known_GMD[Index].GMDType].Address==0) {
 800fdb8:	f81a 3031 	ldrb.w	r3, [sl, r1, lsl #3]
 800fdbc:	fb07 5303 	mla	r3, r7, r3, r5
 800fdc0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800fdc4:	b93b      	cbnz	r3, 800fdd6 <InitMetaDataManager+0x462>
            HowManyExtraSpaceINeed += (((known_GMD[Index].GMDSize+7)>>3)<<3) /* Round to Multiple of 8 bytes */ + 
 800fdc6:	f85c 0031 	ldr.w	r0, [ip, r1, lsl #3]
 800fdca:	f102 0310 	add.w	r3, r2, #16
 800fdce:	1dc2      	adds	r2, r0, #7
 800fdd0:	f022 0207 	bic.w	r2, r2, #7
 800fdd4:	441a      	add	r2, r3
        for(Index =0; Index<NumberOfKnownGMD ;Index++) {
 800fdd6:	3101      	adds	r1, #1
 800fdd8:	e7c3      	b.n	800fd62 <InitMetaDataManager+0x3ee>
          if(MDM_GMDTable[known_GMD[Index].GMDType].Address==0) {
 800fdda:	f81a 3037 	ldrb.w	r3, [sl, r7, lsl #3]
 800fdde:	221c      	movs	r2, #28
 800fde0:	435a      	muls	r2, r3
 800fde2:	eb06 0c02 	add.w	ip, r6, r2
 800fde6:	f8dc 115c 	ldr.w	r1, [ip, #348]	; 0x15c
 800fdea:	bb01      	cbnz	r1, 800fe2e <InitMetaDataManager+0x4ba>
            pMetaDataHeader->Type = MDM_DATA_TYPE_GMD;
 800fdec:	2101      	movs	r1, #1
 800fdee:	6021      	str	r1, [r4, #0]
            pMetaDataHeader->Lenght = (((known_GMD[Index].GMDSize+7)>>3)<<3) /* Round to Multiple of 8 bytes */ + 
 800fdf0:	f10a 0104 	add.w	r1, sl, #4
            MDM_PRINTF("Adding=%s (Pos=%d) Size=%ld\r\n",MDM_GMDTable[known_GMD[Index].GMDType].GMDName,
 800fdf4:	3204      	adds	r2, #4
            pMetaDataHeader->Lenght = (((known_GMD[Index].GMDSize+7)>>3)<<3) /* Round to Multiple of 8 bytes */ + 
 800fdf6:	f851 0037 	ldr.w	r0, [r1, r7, lsl #3]
            PayLoad->GMDSize     = known_GMD[Index].GMDSize;
 800fdfa:	60e0      	str	r0, [r4, #12]
            pMetaDataHeader->Lenght = (((known_GMD[Index].GMDSize+7)>>3)<<3) /* Round to Multiple of 8 bytes */ + 
 800fdfc:	1dc1      	adds	r1, r0, #7
 800fdfe:	f021 0107 	bic.w	r1, r1, #7
              8 + 8 /* For Meta Data Header */;
 800fe02:	3110      	adds	r1, #16
            PayLoad->GMDTypeEnum = known_GMD[Index].GMDType;
 800fe04:	e9c4 1301 	strd	r1, r3, [r4, #4]
            PayLoad = (MDM_PayLoadGMD_t *) pMetaDataHeader->puint8_PayLoad;
 800fe08:	f104 0108 	add.w	r1, r4, #8
            MDM_GMDTable[known_GMD[Index].GMDType].GMDSize = PayLoad->GMDSize;
 800fe0c:	e9cc 0156 	strd	r0, r1, [ip, #344]	; 0x158
            MDM_PRINTF("Adding=%s (Pos=%d) Size=%ld\r\n",MDM_GMDTable[known_GMD[Index].GMDType].GMDName,
 800fe10:	490f      	ldr	r1, [pc, #60]	; (800fe50 <InitMetaDataManager+0x4dc>)
 800fe12:	9000      	str	r0, [sp, #0]
 800fe14:	440a      	add	r2, r1
 800fe16:	a808      	add	r0, sp, #32
 800fe18:	490e      	ldr	r1, [pc, #56]	; (800fe54 <InitMetaDataManager+0x4e0>)
 800fe1a:	f00c ff8d 	bl	801cd38 <siprintf>
 800fe1e:	4601      	mov	r1, r0
 800fe20:	a808      	add	r0, sp, #32
 800fe22:	f009 fdc3 	bl	80199ac <CDC_Fill_Buffer>
            puint8_RW_MetaData +=pMetaDataHeader->Lenght;
 800fe26:	6833      	ldr	r3, [r6, #0]
 800fe28:	6862      	ldr	r2, [r4, #4]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	6033      	str	r3, [r6, #0]
        for(Index=0;Index<NumberOfKnownGMD; Index++) {
 800fe2e:	3701      	adds	r7, #1
 800fe30:	e7b8      	b.n	800fda4 <InitMetaDataManager+0x430>
 800fe32:	bf00      	nop
 800fe34:	20000218 	.word	0x20000218
 800fe38:	08022955 	.word	0x08022955
 800fe3c:	20001798 	.word	0x20001798
 800fe40:	080229d8 	.word	0x080229d8
 800fe44:	200000d4 	.word	0x200000d4
 800fe48:	08022a1b 	.word	0x08022a1b
 800fe4c:	200017e0 	.word	0x200017e0
 800fe50:	20000214 	.word	0x20000214
 800fe54:	08022a34 	.word	0x08022a34

0800fe58 <MDM_SaveGMD>:
 * @param MDM_GenericMetaDataType_t GMDType Generic Meta Data type that we want to save
 * @param void *GMD Pointer where find the Generic Meta Data
 * @retval uin32_t Success/NotSuccess (1/0)
 */
uint32_t MDM_SaveGMD(MDM_GenericMetaDataType_t GMDType,void *GMD)
{
 800fe58:	b570      	push	{r4, r5, r6, lr}
  uint32_t RetValue=1;
  if(MDM_GMDTable[GMDType].Address!=0) {
 800fe5a:	221c      	movs	r2, #28
 800fe5c:	4d10      	ldr	r5, [pc, #64]	; (800fea0 <MDM_SaveGMD+0x48>)
 800fe5e:	fb02 f600 	mul.w	r6, r2, r0
 800fe62:	19ab      	adds	r3, r5, r6
{
 800fe64:	b0c0      	sub	sp, #256	; 0x100
  if(MDM_GMDTable[GMDType].Address!=0) {
 800fe66:	f8d3 415c 	ldr.w	r4, [r3, #348]	; 0x15c
 800fe6a:	b1ac      	cbz	r4, 800fe98 <MDM_SaveGMD+0x40>
    MDM_PayLoadGMD_t *MDMPayLoad = (MDM_PayLoadGMD_t *)MDM_GMDTable[GMDType].Address;
    memcpy((void *)MDMPayLoad->puint8_GMD,GMD,MDMPayLoad->GMDSize);
 800fe6c:	6862      	ldr	r2, [r4, #4]
 800fe6e:	f104 0008 	add.w	r0, r4, #8
 800fe72:	f00c f9cf 	bl	801c214 <memcpy>
    NecessityToSaveMetaDataManager=1;
 800fe76:	4b0b      	ldr	r3, [pc, #44]	; (800fea4 <MDM_SaveGMD+0x4c>)
    MDM_PRINTF("Updating the Generic Meta Data type=%s\r\n",MDM_GMDTable[GMDType].GMDName);
 800fe78:	490b      	ldr	r1, [pc, #44]	; (800fea8 <MDM_SaveGMD+0x50>)
    NecessityToSaveMetaDataManager=1;
 800fe7a:	2401      	movs	r4, #1
    MDM_PRINTF("Updating the Generic Meta Data type=%s\r\n",MDM_GMDTable[GMDType].GMDName);
 800fe7c:	19aa      	adds	r2, r5, r6
    NecessityToSaveMetaDataManager=1;
 800fe7e:	601c      	str	r4, [r3, #0]
    MDM_PRINTF("Updating the Generic Meta Data type=%s\r\n",MDM_GMDTable[GMDType].GMDName);
 800fe80:	f502 72a4 	add.w	r2, r2, #328	; 0x148
  } else {
    MDM_PRINTF("ERROR before saving one Generic Meta Datait's necessary Initializes the MDM with the same type=%d\r\n",GMDType);
 800fe84:	4668      	mov	r0, sp
 800fe86:	f00c ff57 	bl	801cd38 <siprintf>
 800fe8a:	4601      	mov	r1, r0
 800fe8c:	4668      	mov	r0, sp
 800fe8e:	f009 fd8d 	bl	80199ac <CDC_Fill_Buffer>
    RetValue=0;
  }
  return RetValue;
}
 800fe92:	4620      	mov	r0, r4
 800fe94:	b040      	add	sp, #256	; 0x100
 800fe96:	bd70      	pop	{r4, r5, r6, pc}
    MDM_PRINTF("ERROR before saving one Generic Meta Datait's necessary Initializes the MDM with the same type=%d\r\n",GMDType);
 800fe98:	4904      	ldr	r1, [pc, #16]	; (800feac <MDM_SaveGMD+0x54>)
 800fe9a:	4602      	mov	r2, r0
 800fe9c:	e7f2      	b.n	800fe84 <MDM_SaveGMD+0x2c>
 800fe9e:	bf00      	nop
 800fea0:	200000d0 	.word	0x200000d0
 800fea4:	20001798 	.word	0x20001798
 800fea8:	08022acd 	.word	0x08022acd
 800feac:	08022af6 	.word	0x08022af6

0800feb0 <MDM_ReCallGMD>:
 * @retval uin32_t Success/NotSuccess (1/0)
 */
uint32_t MDM_ReCallGMD(MDM_GenericMetaDataType_t GMDType,void *GMD)
{
  uint32_t RetValue=1;
  if(MDM_GMDTable[GMDType].Address!=0) {
 800feb0:	4b0e      	ldr	r3, [pc, #56]	; (800feec <MDM_ReCallGMD+0x3c>)
{
 800feb2:	b510      	push	{r4, lr}
 800feb4:	4602      	mov	r2, r0
 800feb6:	4608      	mov	r0, r1
  if(MDM_GMDTable[GMDType].Address!=0) {
 800feb8:	211c      	movs	r1, #28
 800feba:	fb01 3302 	mla	r3, r1, r2, r3
{
 800febe:	b0c0      	sub	sp, #256	; 0x100
  if(MDM_GMDTable[GMDType].Address!=0) {
 800fec0:	f8d3 415c 	ldr.w	r4, [r3, #348]	; 0x15c
 800fec4:	b144      	cbz	r4, 800fed8 <MDM_ReCallGMD+0x28>
    MDM_PayLoadGMD_t *MDMPayLoad = (MDM_PayLoadGMD_t *)MDM_GMDTable[GMDType].Address;
    memcpy(GMD,(void *)MDMPayLoad->puint8_GMD,MDMPayLoad->GMDSize);
 800fec6:	6862      	ldr	r2, [r4, #4]
 800fec8:	f104 0108 	add.w	r1, r4, #8
 800fecc:	f00c f9a2 	bl	801c214 <memcpy>
  uint32_t RetValue=1;
 800fed0:	2401      	movs	r4, #1
  } else {
    MDM_PRINTF("ERROR there is not a Generic Meta Data type=%d inside the MDM\r\n",GMDType);
    RetValue=0;
  }
  return RetValue;
}
 800fed2:	4620      	mov	r0, r4
 800fed4:	b040      	add	sp, #256	; 0x100
 800fed6:	bd10      	pop	{r4, pc}
    MDM_PRINTF("ERROR there is not a Generic Meta Data type=%d inside the MDM\r\n",GMDType);
 800fed8:	4905      	ldr	r1, [pc, #20]	; (800fef0 <MDM_ReCallGMD+0x40>)
 800feda:	4668      	mov	r0, sp
 800fedc:	f00c ff2c 	bl	801cd38 <siprintf>
 800fee0:	4601      	mov	r1, r0
 800fee2:	4668      	mov	r0, sp
 800fee4:	f009 fd62 	bl	80199ac <CDC_Fill_Buffer>
  return RetValue;
 800fee8:	e7f3      	b.n	800fed2 <MDM_ReCallGMD+0x22>
 800feea:	bf00      	nop
 800feec:	200000d0 	.word	0x200000d0
 800fef0:	08022b5a 	.word	0x08022b5a

0800fef4 <AttrMod_Request_AudioLevel>:
 * @param  uint8_t *att_data attribute data
 * @retval None
 */
static void AttrMod_Request_AudioLevel(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 800fef4:	9b00      	ldr	r3, [sp, #0]
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d102      	bne.n	800ff02 <AttrMod_Request_AudioLevel+0xe>
    BLE_AudioLevel_NotifyEvent= BLE_NOTIFY_SUB;
 800fefc:	4a03      	ldr	r2, [pc, #12]	; (800ff0c <AttrMod_Request_AudioLevel+0x18>)
 800fefe:	7013      	strb	r3, [r2, #0]
 800ff00:	4770      	bx	lr
  } else if (att_data[0] == 0U){
 800ff02:	b913      	cbnz	r3, 800ff0a <AttrMod_Request_AudioLevel+0x16>
    BLE_AudioLevel_NotifyEvent= BLE_NOTIFY_UNSUB;
 800ff04:	4b01      	ldr	r3, [pc, #4]	; (800ff0c <AttrMod_Request_AudioLevel+0x18>)
 800ff06:	2202      	movs	r2, #2
 800ff08:	701a      	strb	r2, [r3, #0]
   Term_Update(BufferToWrite,BytesToWrite);
 } else {
   BLE_MANAGER_PRINTF("--->Audio Level=%s", (BLE_AudioLevel_NotifyEvent == BLE_NOTIFY_SUB) ? " ON\r\n" : " OFF\r\n");
 }
#endif
}
 800ff0a:	4770      	bx	lr
 800ff0c:	200027e0 	.word	0x200027e0

0800ff10 <BLE_InitAudioLevelService>:
{
 800ff10:	b570      	push	{r4, r5, r6, lr}
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800ff12:	4c17      	ldr	r4, [pc, #92]	; (800ff70 <BLE_InitAudioLevelService+0x60>)
{
 800ff14:	b0c0      	sub	sp, #256	; 0x100
 800ff16:	4605      	mov	r5, r0
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800ff18:	2228      	movs	r2, #40	; 0x28
 800ff1a:	2100      	movs	r1, #0
 800ff1c:	f104 0008 	add.w	r0, r4, #8
 800ff20:	f00c f9a0 	bl	801c264 <memset>
  BleCharPointer->AttrMod_Request_CB= AttrMod_Request_AudioLevel;
 800ff24:	4b13      	ldr	r3, [pc, #76]	; (800ff74 <BLE_InitAudioLevelService+0x64>)
 800ff26:	6263      	str	r3, [r4, #36]	; 0x24
  COPY_AUDIO_LEVEL_CHAR_UUID((BleCharPointer->uuid));
 800ff28:	f64a 4236 	movw	r2, #44086	; 0xac36
 800ff2c:	4b12      	ldr	r3, [pc, #72]	; (800ff78 <BLE_InitAudioLevelService+0x68>)
 800ff2e:	6063      	str	r3, [r4, #4]
 800ff30:	8162      	strh	r2, [r4, #10]
 800ff32:	2302      	movs	r3, #2
 800ff34:	f241 12e1 	movw	r2, #4577	; 0x11e1
 800ff38:	7223      	strb	r3, [r4, #8]
 800ff3a:	81a2      	strh	r2, [r4, #12]
  BleCharPointer->Char_UUID_Type= UUID_TYPE_128;
 800ff3c:	7523      	strb	r3, [r4, #20]
  COPY_AUDIO_LEVEL_CHAR_UUID((BleCharPointer->uuid));
 800ff3e:	2201      	movs	r2, #1
  uint8_t TempResult= 2U + AudioLevelNumber;
 800ff40:	441d      	add	r5, r3
  BleCharPointer->Char_Properties= CHAR_PROP_NOTIFY;
 800ff42:	2310      	movs	r3, #16
  COPY_AUDIO_LEVEL_CHAR_UUID((BleCharPointer->uuid));
 800ff44:	73a2      	strb	r2, [r4, #14]
  BleCharPointer->Char_Properties= CHAR_PROP_NOTIFY;
 800ff46:	7623      	strb	r3, [r4, #24]
  COPY_AUDIO_LEVEL_CHAR_UUID((BleCharPointer->uuid));
 800ff48:	2204      	movs	r2, #4
  BleCharPointer->GATT_Evt_Mask= GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 800ff4a:	f241 0304 	movw	r3, #4100	; 0x1004
  BLE_MANAGER_PRINTF("BLE Audio Level features ok\r\n");
 800ff4e:	490b      	ldr	r1, [pc, #44]	; (800ff7c <BLE_InitAudioLevelService+0x6c>)
  COPY_AUDIO_LEVEL_CHAR_UUID((BleCharPointer->uuid));
 800ff50:	74e2      	strb	r2, [r4, #19]
  BleCharPointer->Char_Value_Length= (uint16_t)TempResult;
 800ff52:	b2ed      	uxtb	r5, r5
  BLE_MANAGER_PRINTF("BLE Audio Level features ok\r\n");
 800ff54:	4668      	mov	r0, sp
  BleCharPointer->GATT_Evt_Mask= GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 800ff56:	8363      	strh	r3, [r4, #26]
  BleCharPointer->Char_Value_Length= (uint16_t)TempResult;
 800ff58:	82e5      	strh	r5, [r4, #22]
  BLE_MANAGER_PRINTF("BLE Audio Level features ok\r\n");
 800ff5a:	f00c ff5d 	bl	801ce18 <strcpy>
 800ff5e:	211d      	movs	r1, #29
 800ff60:	4668      	mov	r0, sp
 800ff62:	f009 fd23 	bl	80199ac <CDC_Fill_Buffer>
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800ff66:	1d26      	adds	r6, r4, #4
}
 800ff68:	4630      	mov	r0, r6
 800ff6a:	b040      	add	sp, #256	; 0x100
 800ff6c:	bd70      	pop	{r4, r5, r6, pc}
 800ff6e:	bf00      	nop
 800ff70:	200027e0 	.word	0x200027e0
 800ff74:	0800fef5 	.word	0x0800fef5
 800ff78:	a5d5c51b 	.word	0xa5d5c51b
 800ff7c:	08022b9a 	.word	0x08022b9a

0800ff80 <BLE_SetAudioLevelAdvertizeData>:
  manuf_data[AUDIO_LEVEL_ADVERTIZE_DATA_POSITION] |= 0x04U;
 800ff80:	7bc3      	ldrb	r3, [r0, #15]
 800ff82:	f043 0304 	orr.w	r3, r3, #4
 800ff86:	73c3      	strb	r3, [r0, #15]
}
 800ff88:	4770      	bx	lr
	...

0800ff8c <BLE_AudioLevelUpdate>:
{  
 800ff8c:	b530      	push	{r4, r5, lr}
 800ff8e:	b0c3      	sub	sp, #268	; 0x10c
 800ff90:	4604      	mov	r4, r0
 800ff92:	460d      	mov	r5, r1
  STORE_LE_16(buff,(HAL_GetTick()>>3));
 800ff94:	f7f8 fb46 	bl	8008624 <HAL_GetTick>
 800ff98:	08c0      	lsrs	r0, r0, #3
 800ff9a:	f88d 0000 	strb.w	r0, [sp]
 800ff9e:	f7f8 fb41 	bl	8008624 <HAL_GetTick>
 800ffa2:	0ac0      	lsrs	r0, r0, #11
 800ffa4:	f88d 0001 	strb.w	r0, [sp, #1]
  for(Counter=0;Counter<AudioLevelNumber;Counter++) {
 800ffa8:	f10d 0302 	add.w	r3, sp, #2
 800ffac:	4620      	mov	r0, r4
 800ffae:	eb04 0245 	add.w	r2, r4, r5, lsl #1
 800ffb2:	4290      	cmp	r0, r2
 800ffb4:	d119      	bne.n	800ffea <BLE_AudioLevelUpdate+0x5e>
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharAudioLevel, 0, (2U + AudioLevelNumber), buff);
 800ffb6:	1caa      	adds	r2, r5, #2
 800ffb8:	4812      	ldr	r0, [pc, #72]	; (8010004 <BLE_AudioLevelUpdate+0x78>)
 800ffba:	466b      	mov	r3, sp
 800ffbc:	b2d2      	uxtb	r2, r2
 800ffbe:	2100      	movs	r1, #0
 800ffc0:	f001 f90e 	bl	80111e0 <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 800ffc4:	4604      	mov	r4, r0
 800ffc6:	b168      	cbz	r0, 800ffe4 <BLE_AudioLevelUpdate+0x58>
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800ffc8:	4b0f      	ldr	r3, [pc, #60]	; (8010008 <BLE_AudioLevelUpdate+0x7c>)
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Audio Level Data Char\r\n");
 800ffca:	4910      	ldr	r1, [pc, #64]	; (801000c <BLE_AudioLevelUpdate+0x80>)
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d110      	bne.n	800fff4 <BLE_AudioLevelUpdate+0x68>
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Audio Level Data Char\r\n");
 800ffd2:	480f      	ldr	r0, [pc, #60]	; (8010010 <BLE_AudioLevelUpdate+0x84>)
 800ffd4:	f00c ff20 	bl	801ce18 <strcpy>
 800ffd8:	4b0e      	ldr	r3, [pc, #56]	; (8010014 <BLE_AudioLevelUpdate+0x88>)
      Stderr_Update(BufferToWrite,BytesToWrite);
 800ffda:	480d      	ldr	r0, [pc, #52]	; (8010010 <BLE_AudioLevelUpdate+0x84>)
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Audio Level Data Char\r\n");
 800ffdc:	2126      	movs	r1, #38	; 0x26
 800ffde:	7019      	strb	r1, [r3, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 800ffe0:	f001 f95c 	bl	801129c <Stderr_Update>
}
 800ffe4:	4620      	mov	r0, r4
 800ffe6:	b043      	add	sp, #268	; 0x10c
 800ffe8:	bd30      	pop	{r4, r5, pc}
    buff[2U+Counter]= (uint8_t)(AudioLevelData[Counter]&0xFFU);
 800ffea:	f830 1b02 	ldrh.w	r1, [r0], #2
 800ffee:	f803 1b01 	strb.w	r1, [r3], #1
  for(Counter=0;Counter<AudioLevelNumber;Counter++) {
 800fff2:	e7de      	b.n	800ffb2 <BLE_AudioLevelUpdate+0x26>
      BLE_MANAGER_PRINTF("Error Updating Audio Level Data Char\r\n");
 800fff4:	a802      	add	r0, sp, #8
 800fff6:	f00c ff0f 	bl	801ce18 <strcpy>
 800fffa:	2126      	movs	r1, #38	; 0x26
 800fffc:	a802      	add	r0, sp, #8
 800fffe:	f009 fcd5 	bl	80199ac <CDC_Fill_Buffer>
 8010002:	e7ef      	b.n	800ffe4 <BLE_AudioLevelUpdate+0x58>
 8010004:	200027e4 	.word	0x200027e4
 8010008:	20002974 	.word	0x20002974
 801000c:	08022bb8 	.word	0x08022bb8
 8010010:	20002b41 	.word	0x20002b41
 8010014:	20002c41 	.word	0x20002c41

08010018 <AttrMod_Request_Battery>:
 * @param  uint8_t *att_data attribute data
 * @retval None
 */
static void AttrMod_Request_Battery(void *VoidCharPointer, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 8010018:	9b00      	ldr	r3, [sp, #0]
 801001a:	781b      	ldrb	r3, [r3, #0]
 801001c:	2b01      	cmp	r3, #1
 801001e:	d102      	bne.n	8010026 <AttrMod_Request_Battery+0xe>
    BLE_Battery_NotifyEvent= BLE_NOTIFY_SUB;
 8010020:	4a03      	ldr	r2, [pc, #12]	; (8010030 <AttrMod_Request_Battery+0x18>)
 8010022:	7013      	strb	r3, [r2, #0]
 8010024:	4770      	bx	lr
  } else if (att_data[0] == 0U){
 8010026:	b913      	cbnz	r3, 801002e <AttrMod_Request_Battery+0x16>
    BLE_Battery_NotifyEvent= BLE_NOTIFY_UNSUB;
 8010028:	4b01      	ldr	r3, [pc, #4]	; (8010030 <AttrMod_Request_Battery+0x18>)
 801002a:	2202      	movs	r2, #2
 801002c:	701a      	strb	r2, [r3, #0]
   Term_Update(BufferToWrite,BytesToWrite);
 } else {
   BLE_MANAGER_PRINTF("--->Bat=%s", (BLE_Battery_NotifyEvent == BLE_NOTIFY_SUB) ? " ON\r\n" : " OFF\r\n");
 }
#endif
}
 801002e:	4770      	bx	lr
 8010030:	20002810 	.word	0x20002810

08010034 <BLE_InitBatteryService>:
{
 8010034:	b530      	push	{r4, r5, lr}
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 8010036:	4c15      	ldr	r4, [pc, #84]	; (801008c <BLE_InitBatteryService+0x58>)
{
 8010038:	b0c1      	sub	sp, #260	; 0x104
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 801003a:	2228      	movs	r2, #40	; 0x28
 801003c:	2100      	movs	r1, #0
 801003e:	f104 0008 	add.w	r0, r4, #8
 8010042:	f00c f90f 	bl	801c264 <memset>
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_Battery;
 8010046:	4b12      	ldr	r3, [pc, #72]	; (8010090 <BLE_InitBatteryService+0x5c>)
 8010048:	6263      	str	r3, [r4, #36]	; 0x24
  COPY_BATTERY_CHAR_UUID((BleCharPointer->uuid));
 801004a:	4b12      	ldr	r3, [pc, #72]	; (8010094 <BLE_InitBatteryService+0x60>)
 801004c:	6063      	str	r3, [r4, #4]
 801004e:	2302      	movs	r3, #2
 8010050:	7223      	strb	r3, [r4, #8]
 8010052:	74a3      	strb	r3, [r4, #18]
  BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 8010054:	7523      	strb	r3, [r4, #20]
  COPY_BATTERY_CHAR_UUID((BleCharPointer->uuid));
 8010056:	f64a 4236 	movw	r2, #44086	; 0xac36
  BleCharPointer->Char_Value_Length=2+2+2+2+1;
 801005a:	2309      	movs	r3, #9
  COPY_BATTERY_CHAR_UUID((BleCharPointer->uuid));
 801005c:	8162      	strh	r2, [r4, #10]
  BleCharPointer->Char_Value_Length=2+2+2+2+1;
 801005e:	82e3      	strh	r3, [r4, #22]
  COPY_BATTERY_CHAR_UUID((BleCharPointer->uuid));
 8010060:	f241 12e1 	movw	r2, #4577	; 0x11e1
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 8010064:	2310      	movs	r3, #16
  COPY_BATTERY_CHAR_UUID((BleCharPointer->uuid));
 8010066:	81a2      	strh	r2, [r4, #12]
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 8010068:	7623      	strb	r3, [r4, #24]
  COPY_BATTERY_CHAR_UUID((BleCharPointer->uuid));
 801006a:	2201      	movs	r2, #1
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 801006c:	f241 0304 	movw	r3, #4100	; 0x1004
  BLE_MANAGER_PRINTF("BLE Battery features ok\r\n");
 8010070:	4909      	ldr	r1, [pc, #36]	; (8010098 <BLE_InitBatteryService+0x64>)
  COPY_BATTERY_CHAR_UUID((BleCharPointer->uuid));
 8010072:	73a2      	strb	r2, [r4, #14]
  BLE_MANAGER_PRINTF("BLE Battery features ok\r\n");
 8010074:	4668      	mov	r0, sp
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 8010076:	8363      	strh	r3, [r4, #26]
  BLE_MANAGER_PRINTF("BLE Battery features ok\r\n");
 8010078:	f00c fece 	bl	801ce18 <strcpy>
 801007c:	2119      	movs	r1, #25
 801007e:	4668      	mov	r0, sp
 8010080:	f009 fc94 	bl	80199ac <CDC_Fill_Buffer>
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 8010084:	1d25      	adds	r5, r4, #4
}
 8010086:	4628      	mov	r0, r5
 8010088:	b041      	add	sp, #260	; 0x104
 801008a:	bd30      	pop	{r4, r5, pc}
 801008c:	20002810 	.word	0x20002810
 8010090:	08010019 	.word	0x08010019
 8010094:	a5d5c51b 	.word	0xa5d5c51b
 8010098:	08022bdf 	.word	0x08022bdf

0801009c <BLE_SetBatteryAdvertizeData>:
  manuf_data[BATTERY_ADVERTIZE_DATA_POSITION] |= 0x02U;
 801009c:	7c03      	ldrb	r3, [r0, #16]
 801009e:	f043 0302 	orr.w	r3, r3, #2
 80100a2:	7403      	strb	r3, [r0, #16]
}
 80100a4:	4770      	bx	lr
	...

080100a8 <BLE_BatteryUpdate>:
{  
 80100a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100aa:	b0c5      	sub	sp, #276	; 0x114
 80100ac:	460e      	mov	r6, r1
 80100ae:	4615      	mov	r5, r2
 80100b0:	461f      	mov	r7, r3
 80100b2:	4604      	mov	r4, r0
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 80100b4:	f7f8 fab6 	bl	8008624 <HAL_GetTick>
 80100b8:	08c0      	lsrs	r0, r0, #3
 80100ba:	f88d 0004 	strb.w	r0, [sp, #4]
 80100be:	f7f8 fab1 	bl	8008624 <HAL_GetTick>
 80100c2:	0ac0      	lsrs	r0, r0, #11
 80100c4:	f88d 0005 	strb.w	r0, [sp, #5]
  STORE_LE_16(buff+2,(BatteryLevel*10U));
 80100c8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80100cc:	200a      	movs	r0, #10
 80100ce:	005b      	lsls	r3, r3, #1
 80100d0:	4344      	muls	r4, r0
 80100d2:	f88d 3006 	strb.w	r3, [sp, #6]
 80100d6:	0a24      	lsrs	r4, r4, #8
  STORE_LE_16(buff+4,(Voltage));
 80100d8:	f88d 6008 	strb.w	r6, [sp, #8]
  STORE_LE_16(buff+6,(Current));
 80100dc:	f88d 500a 	strb.w	r5, [sp, #10]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharBattery, 0, 2+2+2+2+1,buff);
 80100e0:	4815      	ldr	r0, [pc, #84]	; (8010138 <BLE_BatteryUpdate+0x90>)
  STORE_LE_16(buff+2,(BatteryLevel*10U));
 80100e2:	f88d 4007 	strb.w	r4, [sp, #7]
  STORE_LE_16(buff+4,(Voltage));
 80100e6:	0a36      	lsrs	r6, r6, #8
  STORE_LE_16(buff+6,(Current));
 80100e8:	0a2d      	lsrs	r5, r5, #8
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharBattery, 0, 2+2+2+2+1,buff);
 80100ea:	ab01      	add	r3, sp, #4
 80100ec:	2209      	movs	r2, #9
 80100ee:	2100      	movs	r1, #0
  STORE_LE_16(buff+4,(Voltage));
 80100f0:	f88d 6009 	strb.w	r6, [sp, #9]
  STORE_LE_16(buff+6,(Current));
 80100f4:	f88d 500b 	strb.w	r5, [sp, #11]
  buff[8] = (uint8_t)Status;
 80100f8:	f88d 700c 	strb.w	r7, [sp, #12]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharBattery, 0, 2+2+2+2+1,buff);
 80100fc:	f001 f870 	bl	80111e0 <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 8010100:	4604      	mov	r4, r0
 8010102:	b168      	cbz	r0, 8010120 <BLE_BatteryUpdate+0x78>
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 8010104:	4b0d      	ldr	r3, [pc, #52]	; (801013c <BLE_BatteryUpdate+0x94>)
 8010106:	781b      	ldrb	r3, [r3, #0]
 8010108:	2b01      	cmp	r3, #1
 801010a:	d10c      	bne.n	8010126 <BLE_BatteryUpdate+0x7e>
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Bat Char\n");
 801010c:	490c      	ldr	r1, [pc, #48]	; (8010140 <BLE_BatteryUpdate+0x98>)
 801010e:	480d      	ldr	r0, [pc, #52]	; (8010144 <BLE_BatteryUpdate+0x9c>)
 8010110:	f00c fe82 	bl	801ce18 <strcpy>
 8010114:	4b0c      	ldr	r3, [pc, #48]	; (8010148 <BLE_BatteryUpdate+0xa0>)
      Stderr_Update(BufferToWrite,BytesToWrite);
 8010116:	480b      	ldr	r0, [pc, #44]	; (8010144 <BLE_BatteryUpdate+0x9c>)
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Bat Char\n");
 8010118:	2118      	movs	r1, #24
 801011a:	7019      	strb	r1, [r3, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 801011c:	f001 f8be 	bl	801129c <Stderr_Update>
}
 8010120:	4620      	mov	r0, r4
 8010122:	b045      	add	sp, #276	; 0x114
 8010124:	bdf0      	pop	{r4, r5, r6, r7, pc}
      BLE_MANAGER_PRINTF("Error Updating Bat Char\r\n");
 8010126:	4909      	ldr	r1, [pc, #36]	; (801014c <BLE_BatteryUpdate+0xa4>)
 8010128:	a804      	add	r0, sp, #16
 801012a:	f00c fe75 	bl	801ce18 <strcpy>
 801012e:	2119      	movs	r1, #25
 8010130:	a804      	add	r0, sp, #16
 8010132:	f009 fc3b 	bl	80199ac <CDC_Fill_Buffer>
 8010136:	e7f3      	b.n	8010120 <BLE_BatteryUpdate+0x78>
 8010138:	20002814 	.word	0x20002814
 801013c:	20002974 	.word	0x20002974
 8010140:	08022bf9 	.word	0x08022bf9
 8010144:	20002b41 	.word	0x20002b41
 8010148:	20002c41 	.word	0x20002c41
 801014c:	08022c12 	.word	0x08022c12

08010150 <AttrMod_Request_Env>:
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void AttrMod_Request_Env(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 8010150:	9b00      	ldr	r3, [sp, #0]
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	2b01      	cmp	r3, #1
 8010156:	d102      	bne.n	801015e <AttrMod_Request_Env+0xe>
    BLE_Env_NotifyEvent= BLE_NOTIFY_SUB;
 8010158:	4a03      	ldr	r2, [pc, #12]	; (8010168 <AttrMod_Request_Env+0x18>)
 801015a:	7013      	strb	r3, [r2, #0]
 801015c:	4770      	bx	lr
  } else if (att_data[0] == 0U){
 801015e:	b913      	cbnz	r3, 8010166 <AttrMod_Request_Env+0x16>
    BLE_Env_NotifyEvent= BLE_NOTIFY_UNSUB;
 8010160:	4b01      	ldr	r3, [pc, #4]	; (8010168 <AttrMod_Request_Env+0x18>)
 8010162:	2202      	movs	r2, #2
 8010164:	701a      	strb	r2, [r3, #0]
    Term_Update(BufferToWrite,BytesToWrite);
  } else {
    BLE_MANAGER_PRINTF("--->Env=%s", (BLE_Env_NotifyEvent == BLE_NOTIFY_SUB) ? " ON\r\n" : " OFF\r\n");
  }
#endif
}
 8010166:	4770      	bx	lr
 8010168:	20002840 	.word	0x20002840

0801016c <Read_Request_Env>:
* @param  void *VoidCharPointer
* @param  uint16_t handle Handle of the attribute
* @retval None
*/
static void Read_Request_Env(void *VoidCharPointer,uint16_t handle)
{
 801016c:	b500      	push	{lr}
  if(CustomReadRequestEnv != NULL) {
 801016e:	4b09      	ldr	r3, [pc, #36]	; (8010194 <Read_Request_Env+0x28>)
 8010170:	685b      	ldr	r3, [r3, #4]
{
 8010172:	b0c1      	sub	sp, #260	; 0x104
  if(CustomReadRequestEnv != NULL) {
 8010174:	b11b      	cbz	r3, 801017e <Read_Request_Env+0x12>
    CustomReadRequestEnv();
  } else {
    BLE_MANAGER_PRINTF("\r\n\nRead request environmental function not defined\r\n\n");
  } 
}
 8010176:	b041      	add	sp, #260	; 0x104
 8010178:	f85d eb04 	ldr.w	lr, [sp], #4
    CustomReadRequestEnv();
 801017c:	4718      	bx	r3
    BLE_MANAGER_PRINTF("\r\n\nRead request environmental function not defined\r\n\n");
 801017e:	4906      	ldr	r1, [pc, #24]	; (8010198 <Read_Request_Env+0x2c>)
 8010180:	4668      	mov	r0, sp
 8010182:	f00c fe49 	bl	801ce18 <strcpy>
 8010186:	2135      	movs	r1, #53	; 0x35
 8010188:	4668      	mov	r0, sp
 801018a:	f009 fc0f 	bl	80199ac <CDC_Fill_Buffer>
}
 801018e:	b041      	add	sp, #260	; 0x104
 8010190:	f85d fb04 	ldr.w	pc, [sp], #4
 8010194:	20002840 	.word	0x20002840
 8010198:	08022c2c 	.word	0x08022c2c

0801019c <BLE_InitEnvService>:
{
 801019c:	b5f0      	push	{r4, r5, r6, r7, lr}
  EnvironmentalCharSize=2;
 801019e:	4c3b      	ldr	r4, [pc, #236]	; (801028c <BLE_InitEnvService+0xf0>)
 80101a0:	2302      	movs	r3, #2
  if( (PressEnable == 1U) ||
 80101a2:	2801      	cmp	r0, #1
{
 80101a4:	b0c1      	sub	sp, #260	; 0x104
 80101a6:	4607      	mov	r7, r0
 80101a8:	460e      	mov	r6, r1
 80101aa:	4615      	mov	r5, r2
  EnvironmentalCharSize=2;
 80101ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  EnvFeaturesEnabled.PressureIsEnable= PressEnable;
 80101b0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  EnvFeaturesEnabled.HumidityIsEnable= HumEnable;
 80101b4:	f884 1036 	strb.w	r1, [r4, #54]	; 0x36
  EnvFeaturesEnabled.NumberTemperaturesEnabled= NumTempEnabled;
 80101b8:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
  if( (PressEnable == 1U) ||
 80101bc:	d003      	beq.n	80101c6 <BLE_InitEnvService+0x2a>
 80101be:	2901      	cmp	r1, #1
 80101c0:	d001      	beq.n	80101c6 <BLE_InitEnvService+0x2a>
     (HumEnable == 1U)   ||
 80101c2:	2a00      	cmp	r2, #0
 80101c4:	d058      	beq.n	8010278 <BLE_InitEnvService+0xdc>
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 80101c6:	4832      	ldr	r0, [pc, #200]	; (8010290 <BLE_InitEnvService+0xf4>)
 80101c8:	2228      	movs	r2, #40	; 0x28
 80101ca:	2100      	movs	r1, #0
 80101cc:	f00c f84a 	bl	801c264 <memset>
    BleCharPointer->AttrMod_Request_CB= AttrMod_Request_Env;
 80101d0:	4b30      	ldr	r3, [pc, #192]	; (8010294 <BLE_InitEnvService+0xf8>)
 80101d2:	62a3      	str	r3, [r4, #40]	; 0x28
    BleCharPointer->Read_Request_CB= Read_Request_Env;
 80101d4:	4b30      	ldr	r3, [pc, #192]	; (8010298 <BLE_InitEnvService+0xfc>)
 80101d6:	62e3      	str	r3, [r4, #44]	; 0x2c
    COPY_ENVIRONMENTAL_CHAR_UUID((BleCharPointer->uuid));
 80101d8:	4b30      	ldr	r3, [pc, #192]	; (801029c <BLE_InitEnvService+0x100>)
 80101da:	60a3      	str	r3, [r4, #8]
 80101dc:	2302      	movs	r3, #2
 80101de:	7323      	strb	r3, [r4, #12]
 80101e0:	f64a 4336 	movw	r3, #44086	; 0xac36
 80101e4:	81e3      	strh	r3, [r4, #14]
 80101e6:	f241 13e1 	movw	r3, #4577	; 0x11e1
 80101ea:	8223      	strh	r3, [r4, #16]
 80101ec:	2301      	movs	r3, #1
    if(PressEnable == 1U){
 80101ee:	429f      	cmp	r7, r3
    COPY_ENVIRONMENTAL_CHAR_UUID((BleCharPointer->uuid));
 80101f0:	74a3      	strb	r3, [r4, #18]
      BleCharPointer->uuid[14] |= 0x10U;
 80101f2:	bf01      	itttt	eq
 80101f4:	2310      	moveq	r3, #16
 80101f6:	75a3      	strbeq	r3, [r4, #22]
      EnvironmentalCharSize+= 4U;
 80101f8:	2306      	moveq	r3, #6
 80101fa:	f884 3034 	strbeq.w	r3, [r4, #52]	; 0x34
    if(HumEnable == 1U){
 80101fe:	2e01      	cmp	r6, #1
 8010200:	d108      	bne.n	8010214 <BLE_InitEnvService+0x78>
      EnvironmentalCharSize+= 2U;
 8010202:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
      BleCharPointer->uuid[14] |= 0x08U;
 8010206:	7da2      	ldrb	r2, [r4, #22]
      EnvironmentalCharSize+= 2U;
 8010208:	3302      	adds	r3, #2
      BleCharPointer->uuid[14] |= 0x08U;
 801020a:	f042 0208 	orr.w	r2, r2, #8
 801020e:	75a2      	strb	r2, [r4, #22]
      EnvironmentalCharSize+= 2U;
 8010210:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(NumTempEnabled == 1U){
 8010214:	2d01      	cmp	r5, #1
      EnvironmentalCharSize+= 2U;
 8010216:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    if(NumTempEnabled == 1U){
 801021a:	d125      	bne.n	8010268 <BLE_InitEnvService+0xcc>
      BleCharPointer->uuid[14] |= 0x04U;
 801021c:	7da2      	ldrb	r2, [r4, #22]
 801021e:	f042 0204 	orr.w	r2, r2, #4
 8010222:	75a2      	strb	r2, [r4, #22]
      EnvironmentalCharSize+= 2U;
 8010224:	3302      	adds	r3, #2
      EnvironmentalCharSize+= 4U;
 8010226:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    BleCharPointer->Char_UUID_Type= UUID_TYPE_128;
 801022a:	2302      	movs	r3, #2
 801022c:	7623      	strb	r3, [r4, #24]
    BleCharPointer->Char_Value_Length= EnvironmentalCharSize;
 801022e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8010232:	8363      	strh	r3, [r4, #26]
    BleCharPointer->Char_Properties= ((uint8_t)(CHAR_PROP_NOTIFY))|((uint8_t)(CHAR_PROP_READ));
 8010234:	2312      	movs	r3, #18
 8010236:	7723      	strb	r3, [r4, #28]
    BleCharPointer->GATT_Evt_Mask= GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 8010238:	f241 0304 	movw	r3, #4100	; 0x1004
 801023c:	83e3      	strh	r3, [r4, #30]
    if(CustomReadRequestEnv == NULL) {
 801023e:	6863      	ldr	r3, [r4, #4]
 8010240:	b93b      	cbnz	r3, 8010252 <BLE_InitEnvService+0xb6>
      BLE_MANAGER_PRINTF("Warning: Read request environmental function not defined\r\n");
 8010242:	4917      	ldr	r1, [pc, #92]	; (80102a0 <BLE_InitEnvService+0x104>)
 8010244:	4668      	mov	r0, sp
 8010246:	f00c fde7 	bl	801ce18 <strcpy>
 801024a:	213a      	movs	r1, #58	; 0x3a
 801024c:	4668      	mov	r0, sp
 801024e:	f009 fbad 	bl	80199ac <CDC_Fill_Buffer>
    BLE_MANAGER_PRINTF("BLE Environmental features ok\r\n");
 8010252:	4914      	ldr	r1, [pc, #80]	; (80102a4 <BLE_InitEnvService+0x108>)
 8010254:	4668      	mov	r0, sp
 8010256:	f00c fddf 	bl	801ce18 <strcpy>
 801025a:	211f      	movs	r1, #31
 801025c:	4668      	mov	r0, sp
 801025e:	f009 fba5 	bl	80199ac <CDC_Fill_Buffer>
    BleCharPointer = &BleCharEnv;
 8010262:	4811      	ldr	r0, [pc, #68]	; (80102a8 <BLE_InitEnvService+0x10c>)
}
 8010264:	b041      	add	sp, #260	; 0x104
 8010266:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if(NumTempEnabled == 2U){
 8010268:	2d02      	cmp	r5, #2
 801026a:	d1de      	bne.n	801022a <BLE_InitEnvService+0x8e>
      BleCharPointer->uuid[14] |= 0x05U;
 801026c:	7da2      	ldrb	r2, [r4, #22]
 801026e:	f042 0205 	orr.w	r2, r2, #5
 8010272:	75a2      	strb	r2, [r4, #22]
      EnvironmentalCharSize+= 4U;
 8010274:	3304      	adds	r3, #4
 8010276:	e7d6      	b.n	8010226 <BLE_InitEnvService+0x8a>
    BLE_MANAGER_PRINTF(" ERROR: None environmental features is enabled\r\n");
 8010278:	490c      	ldr	r1, [pc, #48]	; (80102ac <BLE_InitEnvService+0x110>)
 801027a:	4668      	mov	r0, sp
 801027c:	f00c fdcc 	bl	801ce18 <strcpy>
 8010280:	2130      	movs	r1, #48	; 0x30
 8010282:	4668      	mov	r0, sp
 8010284:	f009 fb92 	bl	80199ac <CDC_Fill_Buffer>
  BleCharTypeDef *BleCharPointer= NULL;
 8010288:	4628      	mov	r0, r5
  return BleCharPointer;
 801028a:	e7eb      	b.n	8010264 <BLE_InitEnvService+0xc8>
 801028c:	20002840 	.word	0x20002840
 8010290:	2000284c 	.word	0x2000284c
 8010294:	08010151 	.word	0x08010151
 8010298:	0801016d 	.word	0x0801016d
 801029c:	a5d5c51b 	.word	0xa5d5c51b
 80102a0:	08022c62 	.word	0x08022c62
 80102a4:	08022c9d 	.word	0x08022c9d
 80102a8:	20002848 	.word	0x20002848
 80102ac:	08022cbd 	.word	0x08022cbd

080102b0 <BLE_SetEnvAdvertizeData>:
  if(EnvFeaturesEnabled.PressureIsEnable == 1U) {
 80102b0:	4b0f      	ldr	r3, [pc, #60]	; (80102f0 <BLE_SetEnvAdvertizeData+0x40>)
 80102b2:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80102b6:	2a01      	cmp	r2, #1
    manuf_data[ENVIRONMENTAL_ADVERTIZE_DATA_POSITION] |= 0x10U;
 80102b8:	bf02      	ittt	eq
 80102ba:	7c02      	ldrbeq	r2, [r0, #16]
 80102bc:	f042 0210 	orreq.w	r2, r2, #16
 80102c0:	7402      	strbeq	r2, [r0, #16]
  if(EnvFeaturesEnabled.HumidityIsEnable == 1U) {
 80102c2:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
  if(EnvFeaturesEnabled.NumberTemperaturesEnabled == 1U) {
 80102c6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
  if(EnvFeaturesEnabled.HumidityIsEnable == 1U) {
 80102ca:	2a01      	cmp	r2, #1
    manuf_data[ENVIRONMENTAL_ADVERTIZE_DATA_POSITION] |= 0x08U;
 80102cc:	bf02      	ittt	eq
 80102ce:	7c02      	ldrbeq	r2, [r0, #16]
 80102d0:	f042 0208 	orreq.w	r2, r2, #8
 80102d4:	7402      	strbeq	r2, [r0, #16]
  if(EnvFeaturesEnabled.NumberTemperaturesEnabled == 1U) {
 80102d6:	2b01      	cmp	r3, #1
 80102d8:	d104      	bne.n	80102e4 <BLE_SetEnvAdvertizeData+0x34>
    manuf_data[ENVIRONMENTAL_ADVERTIZE_DATA_POSITION] |= 0x04U;
 80102da:	7c03      	ldrb	r3, [r0, #16]
 80102dc:	f043 0304 	orr.w	r3, r3, #4
    manuf_data[ENVIRONMENTAL_ADVERTIZE_DATA_POSITION] |= 0x05U;
 80102e0:	7403      	strb	r3, [r0, #16]
}
 80102e2:	4770      	bx	lr
  if(EnvFeaturesEnabled.NumberTemperaturesEnabled == 2U) {
 80102e4:	2b02      	cmp	r3, #2
 80102e6:	d1fc      	bne.n	80102e2 <BLE_SetEnvAdvertizeData+0x32>
    manuf_data[ENVIRONMENTAL_ADVERTIZE_DATA_POSITION] |= 0x05U;
 80102e8:	7c03      	ldrb	r3, [r0, #16]
 80102ea:	f043 0305 	orr.w	r3, r3, #5
 80102ee:	e7f7      	b.n	80102e0 <BLE_SetEnvAdvertizeData+0x30>
 80102f0:	20002840 	.word	0x20002840

080102f4 <BLE_EnvironmentalUpdate>:
{
 80102f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102f8:	b0c4      	sub	sp, #272	; 0x110
 80102fa:	4617      	mov	r7, r2
 80102fc:	461e      	mov	r6, r3
 80102fe:	4688      	mov	r8, r1
 8010300:	4605      	mov	r5, r0
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 8010302:	f7f8 f98f 	bl	8008624 <HAL_GetTick>
 8010306:	ac01      	add	r4, sp, #4
 8010308:	08c0      	lsrs	r0, r0, #3
 801030a:	7020      	strb	r0, [r4, #0]
 801030c:	f7f8 f98a 	bl	8008624 <HAL_GetTick>
  if(EnvFeaturesEnabled.PressureIsEnable == 1U) {
 8010310:	4a2a      	ldr	r2, [pc, #168]	; (80103bc <BLE_EnvironmentalUpdate+0xc8>)
 8010312:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 8010316:	0ac0      	lsrs	r0, r0, #11
  if(EnvFeaturesEnabled.PressureIsEnable == 1U) {
 8010318:	2b01      	cmp	r3, #1
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 801031a:	7060      	strb	r0, [r4, #1]
  if(EnvFeaturesEnabled.PressureIsEnable == 1U) {
 801031c:	d143      	bne.n	80103a6 <BLE_EnvironmentalUpdate+0xb2>
    STORE_LE_32((buff+BuffPos),((uint32_t)Press));
 801031e:	0a2b      	lsrs	r3, r5, #8
 8010320:	70a5      	strb	r5, [r4, #2]
 8010322:	70e3      	strb	r3, [r4, #3]
 8010324:	0c2b      	lsrs	r3, r5, #16
 8010326:	0e2d      	lsrs	r5, r5, #24
 8010328:	7123      	strb	r3, [r4, #4]
 801032a:	7165      	strb	r5, [r4, #5]
    BuffPos+= 4U;
 801032c:	2006      	movs	r0, #6
  if(EnvFeaturesEnabled.HumidityIsEnable == 1U) {
 801032e:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 8010332:	2b01      	cmp	r3, #1
 8010334:	d109      	bne.n	801034a <BLE_EnvironmentalUpdate+0x56>
    STORE_LE_16((buff+BuffPos),Hum);
 8010336:	1c43      	adds	r3, r0, #1
 8010338:	b2db      	uxtb	r3, r3
 801033a:	f804 8000 	strb.w	r8, [r4, r0]
 801033e:	ea4f 2818 	mov.w	r8, r8, lsr #8
    BuffPos+= 2U;
 8010342:	3002      	adds	r0, #2
    STORE_LE_16((buff+BuffPos),Hum);
 8010344:	f804 8003 	strb.w	r8, [r4, r3]
    BuffPos+= 2U;
 8010348:	b2c0      	uxtb	r0, r0
  if(EnvFeaturesEnabled.NumberTemperaturesEnabled >= 1U) {
 801034a:	f892 1037 	ldrb.w	r1, [r2, #55]	; 0x37
 801034e:	b179      	cbz	r1, 8010370 <BLE_EnvironmentalUpdate+0x7c>
    STORE_LE_16((buff+BuffPos),((uint16_t)Temp1));
 8010350:	1c43      	adds	r3, r0, #1
 8010352:	b2db      	uxtb	r3, r3
 8010354:	5427      	strb	r7, [r4, r0]
  if(EnvFeaturesEnabled.NumberTemperaturesEnabled == 2U) {
 8010356:	2902      	cmp	r1, #2
    STORE_LE_16((buff+BuffPos),((uint16_t)Temp1));
 8010358:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801035c:	54e7      	strb	r7, [r4, r3]
  if(EnvFeaturesEnabled.NumberTemperaturesEnabled == 2U) {
 801035e:	d107      	bne.n	8010370 <BLE_EnvironmentalUpdate+0x7c>
    BuffPos+= 2U;
 8010360:	1c83      	adds	r3, r0, #2
    STORE_LE_16((buff+BuffPos),((uint16_t)Temp2));
 8010362:	b2db      	uxtb	r3, r3
 8010364:	3003      	adds	r0, #3
 8010366:	b2c0      	uxtb	r0, r0
 8010368:	54e6      	strb	r6, [r4, r3]
 801036a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801036e:	5426      	strb	r6, [r4, r0]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharEnv, 0, EnvironmentalCharSize,buff);
 8010370:	4623      	mov	r3, r4
 8010372:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8010376:	4812      	ldr	r0, [pc, #72]	; (80103c0 <BLE_EnvironmentalUpdate+0xcc>)
 8010378:	2100      	movs	r1, #0
 801037a:	f000 ff31 	bl	80111e0 <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 801037e:	4604      	mov	r4, r0
 8010380:	b168      	cbz	r0, 801039e <BLE_EnvironmentalUpdate+0xaa>
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 8010382:	4b10      	ldr	r3, [pc, #64]	; (80103c4 <BLE_EnvironmentalUpdate+0xd0>)
 8010384:	781b      	ldrb	r3, [r3, #0]
 8010386:	2b01      	cmp	r3, #1
 8010388:	d10f      	bne.n	80103aa <BLE_EnvironmentalUpdate+0xb6>
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Environmental Char\n");
 801038a:	490f      	ldr	r1, [pc, #60]	; (80103c8 <BLE_EnvironmentalUpdate+0xd4>)
 801038c:	480f      	ldr	r0, [pc, #60]	; (80103cc <BLE_EnvironmentalUpdate+0xd8>)
 801038e:	f00c fd43 	bl	801ce18 <strcpy>
 8010392:	4b0f      	ldr	r3, [pc, #60]	; (80103d0 <BLE_EnvironmentalUpdate+0xdc>)
      Stderr_Update(BufferToWrite,BytesToWrite);
 8010394:	480d      	ldr	r0, [pc, #52]	; (80103cc <BLE_EnvironmentalUpdate+0xd8>)
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Environmental Char\n");
 8010396:	2122      	movs	r1, #34	; 0x22
 8010398:	7019      	strb	r1, [r3, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 801039a:	f000 ff7f 	bl	801129c <Stderr_Update>
}
 801039e:	4620      	mov	r0, r4
 80103a0:	b044      	add	sp, #272	; 0x110
 80103a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  BuffPos= 2;
 80103a6:	2002      	movs	r0, #2
 80103a8:	e7c1      	b.n	801032e <BLE_EnvironmentalUpdate+0x3a>
      BLE_MANAGER_PRINTF("Error: Updating Environmental Char\r\n");
 80103aa:	490a      	ldr	r1, [pc, #40]	; (80103d4 <BLE_EnvironmentalUpdate+0xe0>)
 80103ac:	a804      	add	r0, sp, #16
 80103ae:	f00c fd33 	bl	801ce18 <strcpy>
 80103b2:	2124      	movs	r1, #36	; 0x24
 80103b4:	a804      	add	r0, sp, #16
 80103b6:	f009 faf9 	bl	80199ac <CDC_Fill_Buffer>
 80103ba:	e7f0      	b.n	801039e <BLE_EnvironmentalUpdate+0xaa>
 80103bc:	20002840 	.word	0x20002840
 80103c0:	20002848 	.word	0x20002848
 80103c4:	20002974 	.word	0x20002974
 80103c8:	08022cee 	.word	0x08022cee
 80103cc:	20002b41 	.word	0x20002b41
 80103d0:	20002c41 	.word	0x20002c41
 80103d4:	08022d11 	.word	0x08022d11

080103d8 <AttrMod_Request_FFTAlarmAccPeakStatus>:
 * @param  uint8_t *att_data attribute data
 * @retval None
 */
static void AttrMod_Request_FFTAlarmAccPeakStatus(void *VoidCharPointer, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 80103d8:	9b00      	ldr	r3, [sp, #0]
 80103da:	781b      	ldrb	r3, [r3, #0]
 80103dc:	2b01      	cmp	r3, #1
 80103de:	d102      	bne.n	80103e6 <AttrMod_Request_FFTAlarmAccPeakStatus+0xe>
    BLE_FFTAlarmAccPeakStatus_NotifyEvent= BLE_NOTIFY_SUB;
 80103e0:	4a03      	ldr	r2, [pc, #12]	; (80103f0 <AttrMod_Request_FFTAlarmAccPeakStatus+0x18>)
 80103e2:	7013      	strb	r3, [r2, #0]
 80103e4:	4770      	bx	lr
  } else if (att_data[0] == 0U){
 80103e6:	b913      	cbnz	r3, 80103ee <AttrMod_Request_FFTAlarmAccPeakStatus+0x16>
    BLE_FFTAlarmAccPeakStatus_NotifyEvent= BLE_NOTIFY_UNSUB;
 80103e8:	4b01      	ldr	r3, [pc, #4]	; (80103f0 <AttrMod_Request_FFTAlarmAccPeakStatus+0x18>)
 80103ea:	2202      	movs	r2, #2
 80103ec:	701a      	strb	r2, [r3, #0]
   Term_Update(BufferToWrite,BytesToWrite);
 } else {
   BLE_MANAGER_PRINTF("--->FFT Alarm Acc Peak=%s", (BLE_FFTAlarmAccPeakStatus_NotifyEvent == BLE_NOTIFY_SUB) ? " ON\r\n" : " OFF\r\n");
 }
#endif
}
 80103ee:	4770      	bx	lr
 80103f0:	20002878 	.word	0x20002878

080103f4 <BLE_InitFFTAlarmAccPeakStatusService>:
{
 80103f4:	b530      	push	{r4, r5, lr}
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 80103f6:	4c15      	ldr	r4, [pc, #84]	; (801044c <BLE_InitFFTAlarmAccPeakStatusService+0x58>)
{
 80103f8:	b0c1      	sub	sp, #260	; 0x104
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 80103fa:	2228      	movs	r2, #40	; 0x28
 80103fc:	2100      	movs	r1, #0
 80103fe:	f104 0008 	add.w	r0, r4, #8
 8010402:	f00b ff2f 	bl	801c264 <memset>
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_FFTAlarmAccPeakStatus;
 8010406:	4b12      	ldr	r3, [pc, #72]	; (8010450 <BLE_InitFFTAlarmAccPeakStatusService+0x5c>)
 8010408:	6263      	str	r3, [r4, #36]	; 0x24
  COPY_FFT_ALARM_ACC_PEAK_STATUS_CHAR_UUID((BleCharPointer->uuid));
 801040a:	4b12      	ldr	r3, [pc, #72]	; (8010454 <BLE_InitFFTAlarmAccPeakStatusService+0x60>)
 801040c:	6063      	str	r3, [r4, #4]
 801040e:	2302      	movs	r3, #2
 8010410:	7223      	strb	r3, [r4, #8]
 8010412:	73a3      	strb	r3, [r4, #14]
  BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 8010414:	7523      	strb	r3, [r4, #20]
  COPY_FFT_ALARM_ACC_PEAK_STATUS_CHAR_UUID((BleCharPointer->uuid));
 8010416:	f64a 4236 	movw	r2, #44086	; 0xac36
  BleCharPointer->Char_Value_Length=2+13;
 801041a:	230f      	movs	r3, #15
  COPY_FFT_ALARM_ACC_PEAK_STATUS_CHAR_UUID((BleCharPointer->uuid));
 801041c:	8162      	strh	r2, [r4, #10]
  BleCharPointer->Char_Value_Length=2+13;
 801041e:	82e3      	strh	r3, [r4, #22]
  COPY_FFT_ALARM_ACC_PEAK_STATUS_CHAR_UUID((BleCharPointer->uuid));
 8010420:	f241 12e1 	movw	r2, #4577	; 0x11e1
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 8010424:	2310      	movs	r3, #16
  COPY_FFT_ALARM_ACC_PEAK_STATUS_CHAR_UUID((BleCharPointer->uuid));
 8010426:	81a2      	strh	r2, [r4, #12]
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 8010428:	7623      	strb	r3, [r4, #24]
  COPY_FFT_ALARM_ACC_PEAK_STATUS_CHAR_UUID((BleCharPointer->uuid));
 801042a:	2208      	movs	r2, #8
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 801042c:	f241 0304 	movw	r3, #4100	; 0x1004
  BLE_MANAGER_PRINTF("BLE FFT Alarm Acc Peak Status features ok\r\n");
 8010430:	4909      	ldr	r1, [pc, #36]	; (8010458 <BLE_InitFFTAlarmAccPeakStatusService+0x64>)
  COPY_FFT_ALARM_ACC_PEAK_STATUS_CHAR_UUID((BleCharPointer->uuid));
 8010432:	7422      	strb	r2, [r4, #16]
  BLE_MANAGER_PRINTF("BLE FFT Alarm Acc Peak Status features ok\r\n");
 8010434:	4668      	mov	r0, sp
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 8010436:	8363      	strh	r3, [r4, #26]
  BLE_MANAGER_PRINTF("BLE FFT Alarm Acc Peak Status features ok\r\n");
 8010438:	f00c fcee 	bl	801ce18 <strcpy>
 801043c:	212b      	movs	r1, #43	; 0x2b
 801043e:	4668      	mov	r0, sp
 8010440:	f009 fab4 	bl	80199ac <CDC_Fill_Buffer>
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 8010444:	1d25      	adds	r5, r4, #4
}
 8010446:	4628      	mov	r0, r5
 8010448:	b041      	add	sp, #260	; 0x104
 801044a:	bd30      	pop	{r4, r5, pc}
 801044c:	20002878 	.word	0x20002878
 8010450:	080103d9 	.word	0x080103d9
 8010454:	a5d5c51b 	.word	0xa5d5c51b
 8010458:	08022d36 	.word	0x08022d36

0801045c <BLE_SetFFTAlarmAccPeakStatusAdvertizeData>:
  manuf_data[FFT_ALARM_ADVERTIZE_DATA_POSITION] |= 0x08U; 
 801045c:	7c43      	ldrb	r3, [r0, #17]
 801045e:	f043 0308 	orr.w	r3, r3, #8
 8010462:	7443      	strb	r3, [r0, #17]
}
 8010464:	4770      	bx	lr
	...

08010468 <BLE_FFTAlarmAccPeakStatusUpdate>:
{
 8010468:	b570      	push	{r4, r5, r6, lr}
 801046a:	b0c8      	sub	sp, #288	; 0x120
 801046c:	ed8d 0a00 	vstr	s0, [sp]
 8010470:	edcd 0a01 	vstr	s1, [sp, #4]
 8010474:	ed8d 1a02 	vstr	s2, [sp, #8]
  uint8_t Alarm_X= (uint8_t)Alarm.STATUS_AXIS_X;
 8010478:	b2c6      	uxtb	r6, r0
  uint8_t Alarm_Y= (uint8_t)Alarm.STATUS_AXIS_Y;
 801047a:	f3c0 2407 	ubfx	r4, r0, #8, #8
  uint8_t Alarm_Z= (uint8_t)Alarm.STATUS_AXIS_Z;
 801047e:	f3c0 4507 	ubfx	r5, r0, #16, #8
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 8010482:	f7f8 f8cf 	bl	8008624 <HAL_GetTick>
 8010486:	08c0      	lsrs	r0, r0, #3
 8010488:	f88d 0010 	strb.w	r0, [sp, #16]
 801048c:	f7f8 f8ca 	bl	8008624 <HAL_GetTick>
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 8010490:	9b00      	ldr	r3, [sp, #0]
 8010492:	f88d 3013 	strb.w	r3, [sp, #19]
 8010496:	0a1a      	lsrs	r2, r3, #8
 8010498:	f88d 2014 	strb.w	r2, [sp, #20]
 801049c:	0c1a      	lsrs	r2, r3, #16
 801049e:	0e1b      	lsrs	r3, r3, #24
 80104a0:	f88d 3016 	strb.w	r3, [sp, #22]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 80104a4:	9b01      	ldr	r3, [sp, #4]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 80104a6:	f88d 2015 	strb.w	r2, [sp, #21]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 80104aa:	0a1a      	lsrs	r2, r3, #8
 80104ac:	f88d 3017 	strb.w	r3, [sp, #23]
 80104b0:	f88d 2018 	strb.w	r2, [sp, #24]
 80104b4:	0c1a      	lsrs	r2, r3, #16
 80104b6:	0e1b      	lsrs	r3, r3, #24
 80104b8:	f88d 301a 	strb.w	r3, [sp, #26]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 80104bc:	9b02      	ldr	r3, [sp, #8]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 80104be:	f88d 2019 	strb.w	r2, [sp, #25]
  Buff[2]= (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 80104c2:	00a4      	lsls	r4, r4, #2
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 80104c4:	0a1a      	lsrs	r2, r3, #8
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 80104c6:	0ac0      	lsrs	r0, r0, #11
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 80104c8:	f88d 301b 	strb.w	r3, [sp, #27]
 80104cc:	f88d 201c 	strb.w	r2, [sp, #28]
  Buff[2]= (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 80104d0:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 80104d4:	0c1a      	lsrs	r2, r3, #16
 80104d6:	0e1b      	lsrs	r3, r3, #24
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 80104d8:	f88d 0011 	strb.w	r0, [sp, #17]
  Buff[2]= (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 80104dc:	432c      	orrs	r4, r5
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 80104de:	f88d 201d 	strb.w	r2, [sp, #29]
 80104e2:	f88d 301e 	strb.w	r3, [sp, #30]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFFTAlarmAccPeakStatus, 0, 2+13, Buff);
 80104e6:	4817      	ldr	r0, [pc, #92]	; (8010544 <BLE_FFTAlarmAccPeakStatusUpdate+0xdc>)
  Buff[2]= (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 80104e8:	f88d 4012 	strb.w	r4, [sp, #18]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFFTAlarmAccPeakStatus, 0, 2+13, Buff);
 80104ec:	ab04      	add	r3, sp, #16
 80104ee:	220f      	movs	r2, #15
 80104f0:	2100      	movs	r1, #0
 80104f2:	f000 fe75 	bl	80111e0 <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 80104f6:	4604      	mov	r4, r0
 80104f8:	b178      	cbz	r0, 801051a <BLE_FFTAlarmAccPeakStatusUpdate+0xb2>
    if(ret != BLE_STATUS_INSUFFICIENT_RESOURCES) {
 80104fa:	2864      	cmp	r0, #100	; 0x64
 80104fc:	d01a      	beq.n	8010534 <BLE_FFTAlarmAccPeakStatusUpdate+0xcc>
      if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 80104fe:	4b12      	ldr	r3, [pc, #72]	; (8010548 <BLE_FFTAlarmAccPeakStatusUpdate+0xe0>)
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	2b01      	cmp	r3, #1
 8010504:	d10c      	bne.n	8010520 <BLE_FFTAlarmAccPeakStatusUpdate+0xb8>
        BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating FFT Alarm Acc Peak Status Char\n");
 8010506:	4911      	ldr	r1, [pc, #68]	; (801054c <BLE_FFTAlarmAccPeakStatusUpdate+0xe4>)
 8010508:	4811      	ldr	r0, [pc, #68]	; (8010550 <BLE_FFTAlarmAccPeakStatusUpdate+0xe8>)
 801050a:	f00c fc85 	bl	801ce18 <strcpy>
 801050e:	4b11      	ldr	r3, [pc, #68]	; (8010554 <BLE_FFTAlarmAccPeakStatusUpdate+0xec>)
        Stderr_Update(BufferToWrite,BytesToWrite);
 8010510:	480f      	ldr	r0, [pc, #60]	; (8010550 <BLE_FFTAlarmAccPeakStatusUpdate+0xe8>)
        BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating FFT Alarm Acc Peak Status Char\n");
 8010512:	212e      	movs	r1, #46	; 0x2e
 8010514:	7019      	strb	r1, [r3, #0]
        Stderr_Update(BufferToWrite,BytesToWrite);
 8010516:	f000 fec1 	bl	801129c <Stderr_Update>
}
 801051a:	4620      	mov	r0, r4
 801051c:	b048      	add	sp, #288	; 0x120
 801051e:	bd70      	pop	{r4, r5, r6, pc}
        BLE_MANAGER_PRINTF("Error Updating FFT Alarm Acc Peak Status Char ret=%x\r\n",ret);
 8010520:	490d      	ldr	r1, [pc, #52]	; (8010558 <BLE_FFTAlarmAccPeakStatusUpdate+0xf0>)
 8010522:	4602      	mov	r2, r0
 8010524:	a808      	add	r0, sp, #32
 8010526:	f00c fc07 	bl	801cd38 <siprintf>
 801052a:	4601      	mov	r1, r0
      BLE_MANAGER_PRINTF("Error Updating FFT Alarm Acc Peak Status Char ret=%x\r\n",ret);
 801052c:	a808      	add	r0, sp, #32
 801052e:	f009 fa3d 	bl	80199ac <CDC_Fill_Buffer>
 8010532:	e7f2      	b.n	801051a <BLE_FFTAlarmAccPeakStatusUpdate+0xb2>
 8010534:	4908      	ldr	r1, [pc, #32]	; (8010558 <BLE_FFTAlarmAccPeakStatusUpdate+0xf0>)
 8010536:	4602      	mov	r2, r0
 8010538:	a808      	add	r0, sp, #32
 801053a:	f00c fbfd 	bl	801cd38 <siprintf>
 801053e:	2136      	movs	r1, #54	; 0x36
 8010540:	e7f4      	b.n	801052c <BLE_FFTAlarmAccPeakStatusUpdate+0xc4>
 8010542:	bf00      	nop
 8010544:	2000287c 	.word	0x2000287c
 8010548:	20002974 	.word	0x20002974
 801054c:	08022d62 	.word	0x08022d62
 8010550:	20002b41 	.word	0x20002b41
 8010554:	20002c41 	.word	0x20002c41
 8010558:	08022d91 	.word	0x08022d91

0801055c <AttrMod_Request_FFTAlarmSpeedStatus>:
 * @param  uint8_t *att_data attribute data
 * @retval None
 */
static void AttrMod_Request_FFTAlarmSpeedStatus(void *VoidCharPointer, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 801055c:	9b00      	ldr	r3, [sp, #0]
 801055e:	781b      	ldrb	r3, [r3, #0]
 8010560:	2b01      	cmp	r3, #1
 8010562:	d102      	bne.n	801056a <AttrMod_Request_FFTAlarmSpeedStatus+0xe>
    BLE_FFTAlarmSpeedStatus_NotifyEvent= BLE_NOTIFY_SUB;
 8010564:	4a03      	ldr	r2, [pc, #12]	; (8010574 <AttrMod_Request_FFTAlarmSpeedStatus+0x18>)
 8010566:	7013      	strb	r3, [r2, #0]
 8010568:	4770      	bx	lr
  } else if (att_data[0] == 0U){
 801056a:	b913      	cbnz	r3, 8010572 <AttrMod_Request_FFTAlarmSpeedStatus+0x16>
    BLE_FFTAlarmSpeedStatus_NotifyEvent= BLE_NOTIFY_UNSUB;
 801056c:	4b01      	ldr	r3, [pc, #4]	; (8010574 <AttrMod_Request_FFTAlarmSpeedStatus+0x18>)
 801056e:	2202      	movs	r2, #2
 8010570:	701a      	strb	r2, [r3, #0]
   Term_Update(BufferToWrite,BytesToWrite);
 } else {
   BLE_MANAGER_PRINTF("--->FFT Alarm Speed Status=%s", (BLE_FFTAlarmSpeedStatus_NotifyEvent == BLE_NOTIFY_SUB) ? " ON\r\n" : " OFF\r\n");
 }
#endif
}
 8010572:	4770      	bx	lr
 8010574:	200028a8 	.word	0x200028a8

08010578 <BLE_InitFFTAlarmSpeedStatusService>:
{
 8010578:	b570      	push	{r4, r5, r6, lr}
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 801057a:	4c16      	ldr	r4, [pc, #88]	; (80105d4 <BLE_InitFFTAlarmSpeedStatusService+0x5c>)
 801057c:	2528      	movs	r5, #40	; 0x28
{
 801057e:	b0c0      	sub	sp, #256	; 0x100
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 8010580:	462a      	mov	r2, r5
 8010582:	2100      	movs	r1, #0
 8010584:	f104 0008 	add.w	r0, r4, #8
 8010588:	f00b fe6c 	bl	801c264 <memset>
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_FFTAlarmSpeedStatus;
 801058c:	4b12      	ldr	r3, [pc, #72]	; (80105d8 <BLE_InitFFTAlarmSpeedStatusService+0x60>)
 801058e:	6263      	str	r3, [r4, #36]	; 0x24
  COPY_FFT_ALARM_SPEED_STATUS_CHAR_UUID((BleCharPointer->uuid));
 8010590:	4b12      	ldr	r3, [pc, #72]	; (80105dc <BLE_InitFFTAlarmSpeedStatusService+0x64>)
 8010592:	6063      	str	r3, [r4, #4]
 8010594:	2302      	movs	r3, #2
 8010596:	7223      	strb	r3, [r4, #8]
 8010598:	73a3      	strb	r3, [r4, #14]
  BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 801059a:	7523      	strb	r3, [r4, #20]
  COPY_FFT_ALARM_SPEED_STATUS_CHAR_UUID((BleCharPointer->uuid));
 801059c:	f64a 4236 	movw	r2, #44086	; 0xac36
  BleCharPointer->Char_Value_Length=2+13;
 80105a0:	230f      	movs	r3, #15
  COPY_FFT_ALARM_SPEED_STATUS_CHAR_UUID((BleCharPointer->uuid));
 80105a2:	8162      	strh	r2, [r4, #10]
  BleCharPointer->Char_Value_Length=2+13;
 80105a4:	82e3      	strh	r3, [r4, #22]
  COPY_FFT_ALARM_SPEED_STATUS_CHAR_UUID((BleCharPointer->uuid));
 80105a6:	f241 12e1 	movw	r2, #4577	; 0x11e1
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 80105aa:	2310      	movs	r3, #16
  COPY_FFT_ALARM_SPEED_STATUS_CHAR_UUID((BleCharPointer->uuid));
 80105ac:	81a2      	strh	r2, [r4, #12]
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 80105ae:	7623      	strb	r3, [r4, #24]
  COPY_FFT_ALARM_SPEED_STATUS_CHAR_UUID((BleCharPointer->uuid));
 80105b0:	2207      	movs	r2, #7
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 80105b2:	f241 0304 	movw	r3, #4100	; 0x1004
  BLE_MANAGER_PRINTF("BLE FFT Alarm Speed Status features ok\r\n");
 80105b6:	490a      	ldr	r1, [pc, #40]	; (80105e0 <BLE_InitFFTAlarmSpeedStatusService+0x68>)
  COPY_FFT_ALARM_SPEED_STATUS_CHAR_UUID((BleCharPointer->uuid));
 80105b8:	7422      	strb	r2, [r4, #16]
  BLE_MANAGER_PRINTF("BLE FFT Alarm Speed Status features ok\r\n");
 80105ba:	4668      	mov	r0, sp
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 80105bc:	8363      	strh	r3, [r4, #26]
  BLE_MANAGER_PRINTF("BLE FFT Alarm Speed Status features ok\r\n");
 80105be:	f00c fc2b 	bl	801ce18 <strcpy>
 80105c2:	4629      	mov	r1, r5
 80105c4:	4668      	mov	r0, sp
 80105c6:	f009 f9f1 	bl	80199ac <CDC_Fill_Buffer>
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 80105ca:	1d26      	adds	r6, r4, #4
}
 80105cc:	4630      	mov	r0, r6
 80105ce:	b040      	add	sp, #256	; 0x100
 80105d0:	bd70      	pop	{r4, r5, r6, pc}
 80105d2:	bf00      	nop
 80105d4:	200028a8 	.word	0x200028a8
 80105d8:	0801055d 	.word	0x0801055d
 80105dc:	a5d5c51b 	.word	0xa5d5c51b
 80105e0:	08022dc8 	.word	0x08022dc8

080105e4 <BLE_SetFFTAlarmSpeedStatusAdvertizeData>:
 manuf_data[FFT_ALARM_SPEED_STATUS_ADVERTIZE_DATA_POSITION] |= 0x07U; 
 80105e4:	7c83      	ldrb	r3, [r0, #18]
 80105e6:	f043 0307 	orr.w	r3, r3, #7
 80105ea:	7483      	strb	r3, [r0, #18]
}
 80105ec:	4770      	bx	lr
	...

080105f0 <BLE_FFTAlarmSpeedStatusUpdate>:
{
 80105f0:	b570      	push	{r4, r5, r6, lr}
 80105f2:	b0c8      	sub	sp, #288	; 0x120
 80105f4:	ed8d 0a00 	vstr	s0, [sp]
 80105f8:	edcd 0a01 	vstr	s1, [sp, #4]
 80105fc:	ed8d 1a02 	vstr	s2, [sp, #8]
  uint8_t Alarm_X= (uint8_t)Alarm.STATUS_AXIS_X;
 8010600:	b2c6      	uxtb	r6, r0
  uint8_t Alarm_Y= (uint8_t)Alarm.STATUS_AXIS_Y;
 8010602:	f3c0 2407 	ubfx	r4, r0, #8, #8
  uint8_t Alarm_Z= (uint8_t)Alarm.STATUS_AXIS_Z;
 8010606:	f3c0 4507 	ubfx	r5, r0, #16, #8
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 801060a:	f7f8 f80b 	bl	8008624 <HAL_GetTick>
 801060e:	08c0      	lsrs	r0, r0, #3
 8010610:	f88d 0010 	strb.w	r0, [sp, #16]
 8010614:	f7f8 f806 	bl	8008624 <HAL_GetTick>
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 8010618:	9b00      	ldr	r3, [sp, #0]
 801061a:	f88d 3013 	strb.w	r3, [sp, #19]
 801061e:	0a1a      	lsrs	r2, r3, #8
 8010620:	f88d 2014 	strb.w	r2, [sp, #20]
 8010624:	0c1a      	lsrs	r2, r3, #16
 8010626:	0e1b      	lsrs	r3, r3, #24
 8010628:	f88d 3016 	strb.w	r3, [sp, #22]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 801062c:	9b01      	ldr	r3, [sp, #4]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 801062e:	f88d 2015 	strb.w	r2, [sp, #21]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 8010632:	0a1a      	lsrs	r2, r3, #8
 8010634:	f88d 3017 	strb.w	r3, [sp, #23]
 8010638:	f88d 2018 	strb.w	r2, [sp, #24]
 801063c:	0c1a      	lsrs	r2, r3, #16
 801063e:	0e1b      	lsrs	r3, r3, #24
 8010640:	f88d 301a 	strb.w	r3, [sp, #26]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 8010644:	9b02      	ldr	r3, [sp, #8]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 8010646:	f88d 2019 	strb.w	r2, [sp, #25]
  Buff[2]= (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 801064a:	00a4      	lsls	r4, r4, #2
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 801064c:	0a1a      	lsrs	r2, r3, #8
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 801064e:	0ac0      	lsrs	r0, r0, #11
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 8010650:	f88d 301b 	strb.w	r3, [sp, #27]
 8010654:	f88d 201c 	strb.w	r2, [sp, #28]
  Buff[2]= (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 8010658:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 801065c:	0c1a      	lsrs	r2, r3, #16
 801065e:	0e1b      	lsrs	r3, r3, #24
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 8010660:	f88d 0011 	strb.w	r0, [sp, #17]
  Buff[2]= (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 8010664:	432c      	orrs	r4, r5
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 8010666:	f88d 201d 	strb.w	r2, [sp, #29]
 801066a:	f88d 301e 	strb.w	r3, [sp, #30]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFFTAlarmSpeedStatus, 0, 2+13, Buff);
 801066e:	4817      	ldr	r0, [pc, #92]	; (80106cc <BLE_FFTAlarmSpeedStatusUpdate+0xdc>)
  Buff[2]= (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 8010670:	f88d 4012 	strb.w	r4, [sp, #18]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFFTAlarmSpeedStatus, 0, 2+13, Buff);
 8010674:	ab04      	add	r3, sp, #16
 8010676:	220f      	movs	r2, #15
 8010678:	2100      	movs	r1, #0
 801067a:	f000 fdb1 	bl	80111e0 <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 801067e:	4604      	mov	r4, r0
 8010680:	b178      	cbz	r0, 80106a2 <BLE_FFTAlarmSpeedStatusUpdate+0xb2>
    if(ret != BLE_STATUS_INSUFFICIENT_RESOURCES) {
 8010682:	2864      	cmp	r0, #100	; 0x64
 8010684:	d01a      	beq.n	80106bc <BLE_FFTAlarmSpeedStatusUpdate+0xcc>
      if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 8010686:	4b12      	ldr	r3, [pc, #72]	; (80106d0 <BLE_FFTAlarmSpeedStatusUpdate+0xe0>)
 8010688:	781b      	ldrb	r3, [r3, #0]
 801068a:	2b01      	cmp	r3, #1
 801068c:	d10c      	bne.n	80106a8 <BLE_FFTAlarmSpeedStatusUpdate+0xb8>
        BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating FFT Alarm Speed Status Char\n");
 801068e:	4911      	ldr	r1, [pc, #68]	; (80106d4 <BLE_FFTAlarmSpeedStatusUpdate+0xe4>)
 8010690:	4811      	ldr	r0, [pc, #68]	; (80106d8 <BLE_FFTAlarmSpeedStatusUpdate+0xe8>)
 8010692:	f00c fbc1 	bl	801ce18 <strcpy>
 8010696:	4b11      	ldr	r3, [pc, #68]	; (80106dc <BLE_FFTAlarmSpeedStatusUpdate+0xec>)
        Stderr_Update(BufferToWrite,BytesToWrite);
 8010698:	480f      	ldr	r0, [pc, #60]	; (80106d8 <BLE_FFTAlarmSpeedStatusUpdate+0xe8>)
        BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating FFT Alarm Speed Status Char\n");
 801069a:	212b      	movs	r1, #43	; 0x2b
 801069c:	7019      	strb	r1, [r3, #0]
        Stderr_Update(BufferToWrite,BytesToWrite);
 801069e:	f000 fdfd 	bl	801129c <Stderr_Update>
}
 80106a2:	4620      	mov	r0, r4
 80106a4:	b048      	add	sp, #288	; 0x120
 80106a6:	bd70      	pop	{r4, r5, r6, pc}
        BLE_MANAGER_PRINTF("Error Updating FFT Alarm Speed Status Char ret=%x\r\n",ret);
 80106a8:	490d      	ldr	r1, [pc, #52]	; (80106e0 <BLE_FFTAlarmSpeedStatusUpdate+0xf0>)
 80106aa:	4602      	mov	r2, r0
 80106ac:	a808      	add	r0, sp, #32
 80106ae:	f00c fb43 	bl	801cd38 <siprintf>
 80106b2:	4601      	mov	r1, r0
      BLE_MANAGER_PRINTF("Error Updating FFT Alarm Speed Status Char ret=%x\r\n",ret);
 80106b4:	a808      	add	r0, sp, #32
 80106b6:	f009 f979 	bl	80199ac <CDC_Fill_Buffer>
 80106ba:	e7f2      	b.n	80106a2 <BLE_FFTAlarmSpeedStatusUpdate+0xb2>
 80106bc:	4908      	ldr	r1, [pc, #32]	; (80106e0 <BLE_FFTAlarmSpeedStatusUpdate+0xf0>)
 80106be:	4602      	mov	r2, r0
 80106c0:	a808      	add	r0, sp, #32
 80106c2:	f00c fb39 	bl	801cd38 <siprintf>
 80106c6:	2133      	movs	r1, #51	; 0x33
 80106c8:	e7f4      	b.n	80106b4 <BLE_FFTAlarmSpeedStatusUpdate+0xc4>
 80106ca:	bf00      	nop
 80106cc:	200028ac 	.word	0x200028ac
 80106d0:	20002974 	.word	0x20002974
 80106d4:	08022df1 	.word	0x08022df1
 80106d8:	20002b41 	.word	0x20002b41
 80106dc:	20002c41 	.word	0x20002c41
 80106e0:	08022e1d 	.word	0x08022e1d

080106e4 <AttrMod_Request_FFTAlarmSubrangeStatus>:
 * @param  uint8_t *att_data attribute data
 * @retval None
 */
static void AttrMod_Request_FFTAlarmSubrangeStatus(void *VoidCharPointer, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 80106e4:	9b00      	ldr	r3, [sp, #0]
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d102      	bne.n	80106f2 <AttrMod_Request_FFTAlarmSubrangeStatus+0xe>
    BLE_FFTAlarmSubrangeStatus_NotifyEvent= BLE_NOTIFY_SUB;
 80106ec:	4a03      	ldr	r2, [pc, #12]	; (80106fc <AttrMod_Request_FFTAlarmSubrangeStatus+0x18>)
 80106ee:	7013      	strb	r3, [r2, #0]
 80106f0:	4770      	bx	lr
  } else if (att_data[0] == 0U){
 80106f2:	b913      	cbnz	r3, 80106fa <AttrMod_Request_FFTAlarmSubrangeStatus+0x16>
    BLE_FFTAlarmSubrangeStatus_NotifyEvent= BLE_NOTIFY_UNSUB;
 80106f4:	4b01      	ldr	r3, [pc, #4]	; (80106fc <AttrMod_Request_FFTAlarmSubrangeStatus+0x18>)
 80106f6:	2202      	movs	r2, #2
 80106f8:	701a      	strb	r2, [r3, #0]
   Term_Update(BufferToWrite,BytesToWrite);
 } else {
   BLE_MANAGER_PRINTF("--->FFT Alarm Subrange Status=%s", (BLE_FFTAlarmSubrangeStatus_NotifyEvent == BLE_NOTIFY_SUB) ? " ON\r\n" : " OFF\r\n");
 }
#endif
}
 80106fa:	4770      	bx	lr
 80106fc:	200028d8 	.word	0x200028d8

08010700 <BLE_InitFFTAlarmSubrangeStatusService>:
{
 8010700:	b530      	push	{r4, r5, lr}
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 8010702:	4c15      	ldr	r4, [pc, #84]	; (8010758 <BLE_InitFFTAlarmSubrangeStatusService+0x58>)
{
 8010704:	b0c1      	sub	sp, #260	; 0x104
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 8010706:	2228      	movs	r2, #40	; 0x28
 8010708:	2100      	movs	r1, #0
 801070a:	f104 0008 	add.w	r0, r4, #8
 801070e:	f00b fda9 	bl	801c264 <memset>
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_FFTAlarmSubrangeStatus;
 8010712:	4b12      	ldr	r3, [pc, #72]	; (801075c <BLE_InitFFTAlarmSubrangeStatusService+0x5c>)
 8010714:	6263      	str	r3, [r4, #36]	; 0x24
  COPY_FFT_ALARM_SUBRANGE_STATUS_CHAR_UUID((BleCharPointer->uuid));
 8010716:	4b12      	ldr	r3, [pc, #72]	; (8010760 <BLE_InitFFTAlarmSubrangeStatusService+0x60>)
 8010718:	6063      	str	r3, [r4, #4]
 801071a:	2302      	movs	r3, #2
 801071c:	7223      	strb	r3, [r4, #8]
 801071e:	73a3      	strb	r3, [r4, #14]
  BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 8010720:	7523      	strb	r3, [r4, #20]
  COPY_FFT_ALARM_SUBRANGE_STATUS_CHAR_UUID((BleCharPointer->uuid));
 8010722:	f64a 4236 	movw	r2, #44086	; 0xac36
  BleCharPointer->Char_Value_Length=2+13;
 8010726:	230f      	movs	r3, #15
  COPY_FFT_ALARM_SUBRANGE_STATUS_CHAR_UUID((BleCharPointer->uuid));
 8010728:	8162      	strh	r2, [r4, #10]
  BleCharPointer->Char_Value_Length=2+13;
 801072a:	82e3      	strh	r3, [r4, #22]
  COPY_FFT_ALARM_SUBRANGE_STATUS_CHAR_UUID((BleCharPointer->uuid));
 801072c:	f241 12e1 	movw	r2, #4577	; 0x11e1
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 8010730:	2310      	movs	r3, #16
  COPY_FFT_ALARM_SUBRANGE_STATUS_CHAR_UUID((BleCharPointer->uuid));
 8010732:	81a2      	strh	r2, [r4, #12]
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 8010734:	7623      	strb	r3, [r4, #24]
  COPY_FFT_ALARM_SUBRANGE_STATUS_CHAR_UUID((BleCharPointer->uuid));
 8010736:	2209      	movs	r2, #9
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 8010738:	f241 0304 	movw	r3, #4100	; 0x1004
  BLE_MANAGER_PRINTF("BLE FFT Alarm Subrange Status features ok\r\n");
 801073c:	4909      	ldr	r1, [pc, #36]	; (8010764 <BLE_InitFFTAlarmSubrangeStatusService+0x64>)
  COPY_FFT_ALARM_SUBRANGE_STATUS_CHAR_UUID((BleCharPointer->uuid));
 801073e:	7422      	strb	r2, [r4, #16]
  BLE_MANAGER_PRINTF("BLE FFT Alarm Subrange Status features ok\r\n");
 8010740:	4668      	mov	r0, sp
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 8010742:	8363      	strh	r3, [r4, #26]
  BLE_MANAGER_PRINTF("BLE FFT Alarm Subrange Status features ok\r\n");
 8010744:	f00c fb68 	bl	801ce18 <strcpy>
 8010748:	212b      	movs	r1, #43	; 0x2b
 801074a:	4668      	mov	r0, sp
 801074c:	f009 f92e 	bl	80199ac <CDC_Fill_Buffer>
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 8010750:	1d25      	adds	r5, r4, #4
}
 8010752:	4628      	mov	r0, r5
 8010754:	b041      	add	sp, #260	; 0x104
 8010756:	bd30      	pop	{r4, r5, pc}
 8010758:	200028d8 	.word	0x200028d8
 801075c:	080106e5 	.word	0x080106e5
 8010760:	a5d5c51b 	.word	0xa5d5c51b
 8010764:	08022e51 	.word	0x08022e51

08010768 <BLE_SetFFTAlarmSubrangeStatusAdvertizeData>:
  manuf_data[FFT_ALARM_SUBRANGE_STATUS_ADVERTIZE_DATA_POSITION] |= 0x09U; 
 8010768:	7c83      	ldrb	r3, [r0, #18]
 801076a:	f043 0309 	orr.w	r3, r3, #9
 801076e:	7483      	strb	r3, [r0, #18]
}
 8010770:	4770      	bx	lr
	...

08010774 <BLE_FFTAlarmSubrangeStatusUpdate>:
{
 8010774:	b570      	push	{r4, r5, r6, lr}
 8010776:	b0cc      	sub	sp, #304	; 0x130
 8010778:	ed8d 0a04 	vstr	s0, [sp, #16]
 801077c:	edcd 0a05 	vstr	s1, [sp, #20]
 8010780:	ed8d 1a06 	vstr	s2, [sp, #24]
 8010784:	edcd 1a01 	vstr	s3, [sp, #4]
 8010788:	ed8d 2a02 	vstr	s4, [sp, #8]
 801078c:	edcd 2a03 	vstr	s5, [sp, #12]
  uint8_t Alarm_X= (uint8_t)AlarmStatus.STATUS_AXIS_X;
 8010790:	b2c6      	uxtb	r6, r0
  uint8_t Alarm_Y= (uint8_t)AlarmStatus.STATUS_AXIS_Y;
 8010792:	f3c0 2407 	ubfx	r4, r0, #8, #8
  uint8_t Alarm_Z= (uint8_t)AlarmStatus.STATUS_AXIS_Z;
 8010796:	f3c0 4507 	ubfx	r5, r0, #16, #8
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 801079a:	f7f7 ff43 	bl	8008624 <HAL_GetTick>
 801079e:	08c0      	lsrs	r0, r0, #3
 80107a0:	f88d 0020 	strb.w	r0, [sp, #32]
 80107a4:	f7f7 ff3e 	bl	8008624 <HAL_GetTick>
  TempResult= SubrangeFreqMaxValue.x * ((float)10);
 80107a8:	eddd 7a01 	vldr	s15, [sp, #4]
  TempResult= SubrangeMaxValue.x * ((float)100);
 80107ac:	ed9f 6a45 	vldr	s12, [pc, #276]	; 80108c4 <BLE_FFTAlarmSubrangeStatusUpdate+0x150>
 80107b0:	eddd 6a04 	vldr	s13, [sp, #16]
  TempResult= SubrangeFreqMaxValue.z * ((float)10);
 80107b4:	ed9d 7a03 	vldr	s14, [sp, #12]
  TempResult= SubrangeFreqMaxValue.x * ((float)10);
 80107b8:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 80107bc:	ee67 7aa5 	vmul.f32	s15, s15, s11
  TempResult= SubrangeMaxValue.x * ((float)100);
 80107c0:	ee66 6a86 	vmul.f32	s13, s13, s12
  STORE_LE_16(Buff + 3, ((uint16_t)TempResult));
 80107c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  STORE_LE_16(Buff + 5, ((uint16_t)TempResult));
 80107c8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
  STORE_LE_16(Buff + 3, ((uint16_t)TempResult));
 80107cc:	ee17 3a90 	vmov	r3, s15
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80107d6:	0a1b      	lsrs	r3, r3, #8
 80107d8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  STORE_LE_16(Buff + 5, ((uint16_t)TempResult));
 80107dc:	ee16 3a90 	vmov	r3, s13
  TempResult= SubrangeFreqMaxValue.y * ((float)10);
 80107e0:	eddd 6a02 	vldr	s13, [sp, #8]
  TempResult= SubrangeMaxValue.z * ((float)100);
 80107e4:	eddd 7a06 	vldr	s15, [sp, #24]
  TempResult= SubrangeFreqMaxValue.y * ((float)10);
 80107e8:	ee66 6aa5 	vmul.f32	s13, s13, s11
  STORE_LE_16(Buff + 5, ((uint16_t)TempResult));
 80107ec:	b29b      	uxth	r3, r3
  STORE_LE_16(Buff + 7, ((uint16_t)TempResult));
 80107ee:	eefc 6ae6 	vcvt.u32.f32	s13, s13
  STORE_LE_16(Buff + 5, ((uint16_t)TempResult));
 80107f2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80107f6:	0a1b      	lsrs	r3, r3, #8
 80107f8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  STORE_LE_16(Buff + 7, ((uint16_t)TempResult));
 80107fc:	ee16 3a90 	vmov	r3, s13
  TempResult= SubrangeMaxValue.y * ((float)100);
 8010800:	eddd 6a05 	vldr	s13, [sp, #20]
 8010804:	ee66 6a86 	vmul.f32	s13, s13, s12
  STORE_LE_16(Buff + 7, ((uint16_t)TempResult));
 8010808:	b29b      	uxth	r3, r3
  STORE_LE_16(Buff + 9, ((uint16_t)TempResult));
 801080a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
  STORE_LE_16(Buff + 7, ((uint16_t)TempResult));
 801080e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8010812:	0a1b      	lsrs	r3, r3, #8
  TempResult= SubrangeFreqMaxValue.z * ((float)10);
 8010814:	ee27 7a25 	vmul.f32	s14, s14, s11
  STORE_LE_16(Buff + 7, ((uint16_t)TempResult));
 8010818:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  STORE_LE_16(Buff + 9, ((uint16_t)TempResult));
 801081c:	ee16 3a90 	vmov	r3, s13
  STORE_LE_16(Buff + 11, ((uint16_t)TempResult));
 8010820:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  STORE_LE_16(Buff + 9, ((uint16_t)TempResult));
 8010824:	b29b      	uxth	r3, r3
 8010826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801082a:	0a1b      	lsrs	r3, r3, #8
  TempResult= SubrangeMaxValue.z * ((float)100);
 801082c:	ee67 7a86 	vmul.f32	s15, s15, s12
  STORE_LE_16(Buff + 9, ((uint16_t)TempResult));
 8010830:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  STORE_LE_16(Buff + 11, ((uint16_t)TempResult));
 8010834:	ee17 3a10 	vmov	r3, s14
  STORE_LE_16(Buff + 13, ((uint16_t)TempResult));
 8010838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  STORE_LE_16(Buff + 11, ((uint16_t)TempResult));
 801083c:	b29b      	uxth	r3, r3
 801083e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8010842:	0a1b      	lsrs	r3, r3, #8
 8010844:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  STORE_LE_16(Buff + 13, ((uint16_t)TempResult));
 8010848:	ee17 3a90 	vmov	r3, s15
  Buff[2] = (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 801084c:	00a4      	lsls	r4, r4, #2
  STORE_LE_16(Buff + 13, ((uint16_t)TempResult));
 801084e:	b29b      	uxth	r3, r3
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 8010850:	0ac0      	lsrs	r0, r0, #11
  STORE_LE_16(Buff + 13, ((uint16_t)TempResult));
 8010852:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  Buff[2] = (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 8010856:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
  STORE_LE_16(Buff + 13, ((uint16_t)TempResult));
 801085a:	0a1b      	lsrs	r3, r3, #8
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 801085c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
  Buff[2] = (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 8010860:	432c      	orrs	r4, r5
  STORE_LE_16(Buff + 13, ((uint16_t)TempResult));
 8010862:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFFTAlarmSubrangeStatus, 0, 2+13, Buff);
 8010866:	4818      	ldr	r0, [pc, #96]	; (80108c8 <BLE_FFTAlarmSubrangeStatusUpdate+0x154>)
  Buff[2] = (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 8010868:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFFTAlarmSubrangeStatus, 0, 2+13, Buff);
 801086c:	ab08      	add	r3, sp, #32
 801086e:	220f      	movs	r2, #15
 8010870:	2100      	movs	r1, #0
 8010872:	f000 fcb5 	bl	80111e0 <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 8010876:	4604      	mov	r4, r0
 8010878:	b178      	cbz	r0, 801089a <BLE_FFTAlarmSubrangeStatusUpdate+0x126>
    if(ret != BLE_STATUS_INSUFFICIENT_RESOURCES) {
 801087a:	2864      	cmp	r0, #100	; 0x64
 801087c:	d01a      	beq.n	80108b4 <BLE_FFTAlarmSubrangeStatusUpdate+0x140>
      if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 801087e:	4b13      	ldr	r3, [pc, #76]	; (80108cc <BLE_FFTAlarmSubrangeStatusUpdate+0x158>)
 8010880:	781b      	ldrb	r3, [r3, #0]
 8010882:	2b01      	cmp	r3, #1
 8010884:	d10c      	bne.n	80108a0 <BLE_FFTAlarmSubrangeStatusUpdate+0x12c>
        BytesToWrite =(uint8_t)sprintf((char *)BufferToWrite, "Error Updating FFT Alarm Subrange Status Char\n");
 8010886:	4912      	ldr	r1, [pc, #72]	; (80108d0 <BLE_FFTAlarmSubrangeStatusUpdate+0x15c>)
 8010888:	4812      	ldr	r0, [pc, #72]	; (80108d4 <BLE_FFTAlarmSubrangeStatusUpdate+0x160>)
 801088a:	f00c fac5 	bl	801ce18 <strcpy>
 801088e:	4b12      	ldr	r3, [pc, #72]	; (80108d8 <BLE_FFTAlarmSubrangeStatusUpdate+0x164>)
        Stderr_Update(BufferToWrite,BytesToWrite);
 8010890:	4810      	ldr	r0, [pc, #64]	; (80108d4 <BLE_FFTAlarmSubrangeStatusUpdate+0x160>)
        BytesToWrite =(uint8_t)sprintf((char *)BufferToWrite, "Error Updating FFT Alarm Subrange Status Char\n");
 8010892:	212e      	movs	r1, #46	; 0x2e
 8010894:	7019      	strb	r1, [r3, #0]
        Stderr_Update(BufferToWrite,BytesToWrite);
 8010896:	f000 fd01 	bl	801129c <Stderr_Update>
}
 801089a:	4620      	mov	r0, r4
 801089c:	b04c      	add	sp, #304	; 0x130
 801089e:	bd70      	pop	{r4, r5, r6, pc}
        BLE_MANAGER_PRINTF("Error Updating FFT Alarm Subrange Status Char ret=%x\r\n",ret);
 80108a0:	490e      	ldr	r1, [pc, #56]	; (80108dc <BLE_FFTAlarmSubrangeStatusUpdate+0x168>)
 80108a2:	4602      	mov	r2, r0
 80108a4:	a80c      	add	r0, sp, #48	; 0x30
 80108a6:	f00c fa47 	bl	801cd38 <siprintf>
 80108aa:	4601      	mov	r1, r0
      BLE_MANAGER_PRINTF("Error Updating FFT Alarm Subrange Status Char ret=%x\r\n",ret);
 80108ac:	a80c      	add	r0, sp, #48	; 0x30
 80108ae:	f009 f87d 	bl	80199ac <CDC_Fill_Buffer>
 80108b2:	e7f2      	b.n	801089a <BLE_FFTAlarmSubrangeStatusUpdate+0x126>
 80108b4:	4909      	ldr	r1, [pc, #36]	; (80108dc <BLE_FFTAlarmSubrangeStatusUpdate+0x168>)
 80108b6:	4602      	mov	r2, r0
 80108b8:	a80c      	add	r0, sp, #48	; 0x30
 80108ba:	f00c fa3d 	bl	801cd38 <siprintf>
 80108be:	2136      	movs	r1, #54	; 0x36
 80108c0:	e7f4      	b.n	80108ac <BLE_FFTAlarmSubrangeStatusUpdate+0x138>
 80108c2:	bf00      	nop
 80108c4:	42c80000 	.word	0x42c80000
 80108c8:	200028dc 	.word	0x200028dc
 80108cc:	20002974 	.word	0x20002974
 80108d0:	08022e7d 	.word	0x08022e7d
 80108d4:	20002b41 	.word	0x20002b41
 80108d8:	20002c41 	.word	0x20002c41
 80108dc:	08022eac 	.word	0x08022eac

080108e0 <AttrMod_Request_FFTAmplitude>:
 * @param  uint8_t *att_data attribute data
 * @retval None
 */
static void AttrMod_Request_FFTAmplitude(void *VoidCharPointer, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 80108e0:	9b00      	ldr	r3, [sp, #0]
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	2b01      	cmp	r3, #1
 80108e6:	d102      	bne.n	80108ee <AttrMod_Request_FFTAmplitude+0xe>
    BLE_FFT_Amplitude_NotifyEvent= BLE_NOTIFY_SUB;
 80108e8:	4a03      	ldr	r2, [pc, #12]	; (80108f8 <AttrMod_Request_FFTAmplitude+0x18>)
 80108ea:	7013      	strb	r3, [r2, #0]
 80108ec:	4770      	bx	lr
  } else if (att_data[0] == 0U){
 80108ee:	b913      	cbnz	r3, 80108f6 <AttrMod_Request_FFTAmplitude+0x16>
    BLE_FFT_Amplitude_NotifyEvent= BLE_NOTIFY_UNSUB;
 80108f0:	4b01      	ldr	r3, [pc, #4]	; (80108f8 <AttrMod_Request_FFTAmplitude+0x18>)
 80108f2:	2202      	movs	r2, #2
 80108f4:	701a      	strb	r2, [r3, #0]
   Term_Update(BufferToWrite,BytesToWrite);
 } else {
   BLE_MANAGER_PRINTF("--->FFT Amplitude=%s", (BLE_FFT_Amplitude_NotifyEvent == BLE_NOTIFY_SUB) ? " ON\r\n" : " OFF\r\n");
 }
#endif
}
 80108f6:	4770      	bx	lr
 80108f8:	20002908 	.word	0x20002908

080108fc <BLE_InitFFTAmplitudeService>:
{
 80108fc:	b530      	push	{r4, r5, lr}
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 80108fe:	4c16      	ldr	r4, [pc, #88]	; (8010958 <BLE_InitFFTAmplitudeService+0x5c>)
{
 8010900:	b0c1      	sub	sp, #260	; 0x104
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 8010902:	2228      	movs	r2, #40	; 0x28
 8010904:	2100      	movs	r1, #0
 8010906:	f104 0008 	add.w	r0, r4, #8
 801090a:	f00b fcab 	bl	801c264 <memset>
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_FFTAmplitude;
 801090e:	4b13      	ldr	r3, [pc, #76]	; (801095c <BLE_InitFFTAmplitudeService+0x60>)
 8010910:	6263      	str	r3, [r4, #36]	; 0x24
  COPY_FFT_AMPLITUDE_CHAR_UUID((BleCharPointer->uuid));
 8010912:	4b13      	ldr	r3, [pc, #76]	; (8010960 <BLE_InitFFTAmplitudeService+0x64>)
 8010914:	6063      	str	r3, [r4, #4]
 8010916:	2302      	movs	r3, #2
 8010918:	7223      	strb	r3, [r4, #8]
 801091a:	73a3      	strb	r3, [r4, #14]
  BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 801091c:	7523      	strb	r3, [r4, #20]
  BleCharPointer->Char_Value_Length=20;
 801091e:	2314      	movs	r3, #20
 8010920:	82e3      	strh	r3, [r4, #22]
  COPY_FFT_AMPLITUDE_CHAR_UUID((BleCharPointer->uuid));
 8010922:	f64a 4236 	movw	r2, #44086	; 0xac36
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 8010926:	2310      	movs	r3, #16
  COPY_FFT_AMPLITUDE_CHAR_UUID((BleCharPointer->uuid));
 8010928:	8162      	strh	r2, [r4, #10]
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 801092a:	7623      	strb	r3, [r4, #24]
  COPY_FFT_AMPLITUDE_CHAR_UUID((BleCharPointer->uuid));
 801092c:	f241 12e1 	movw	r2, #4577	; 0x11e1
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 8010930:	f241 0304 	movw	r3, #4100	; 0x1004
  COPY_FFT_AMPLITUDE_CHAR_UUID((BleCharPointer->uuid));
 8010934:	81a2      	strh	r2, [r4, #12]
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 8010936:	8363      	strh	r3, [r4, #26]
  COPY_FFT_AMPLITUDE_CHAR_UUID((BleCharPointer->uuid));
 8010938:	2205      	movs	r2, #5
  BleCharPointer->Is_Variable=1;
 801093a:	2301      	movs	r3, #1
  BLE_MANAGER_PRINTF("BLE FFT Amplitude features ok\r\n");
 801093c:	4909      	ldr	r1, [pc, #36]	; (8010964 <BLE_InitFFTAmplitudeService+0x68>)
  COPY_FFT_AMPLITUDE_CHAR_UUID((BleCharPointer->uuid));
 801093e:	7422      	strb	r2, [r4, #16]
  BLE_MANAGER_PRINTF("BLE FFT Amplitude features ok\r\n");
 8010940:	4668      	mov	r0, sp
  BleCharPointer->Is_Variable=1;
 8010942:	7723      	strb	r3, [r4, #28]
  BLE_MANAGER_PRINTF("BLE FFT Amplitude features ok\r\n");
 8010944:	f00c fa68 	bl	801ce18 <strcpy>
 8010948:	211f      	movs	r1, #31
 801094a:	4668      	mov	r0, sp
 801094c:	f009 f82e 	bl	80199ac <CDC_Fill_Buffer>
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 8010950:	1d25      	adds	r5, r4, #4
}
 8010952:	4628      	mov	r0, r5
 8010954:	b041      	add	sp, #260	; 0x104
 8010956:	bd30      	pop	{r4, r5, pc}
 8010958:	20002908 	.word	0x20002908
 801095c:	080108e1 	.word	0x080108e1
 8010960:	a5d5c51b 	.word	0xa5d5c51b
 8010964:	08022ee3 	.word	0x08022ee3

08010968 <BLE_SetFFTAmplitudeAdvertizeData>:
 manuf_data[FFT_AMPLITUDE_ADVERTIZE_DATA_POSITION] |= 0x05U;
 8010968:	7c83      	ldrb	r3, [r0, #18]
 801096a:	f043 0305 	orr.w	r3, r3, #5
 801096e:	7483      	strb	r3, [r0, #18]
}
 8010970:	4770      	bx	lr
	...

08010974 <BLE_FFTAmplitudeUpdate>:
{
 8010974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010978:	461e      	mov	r6, r3
  TotalSize= 2U /* nSample */ + 1U /* nComponents */ + 4U /*  Frequency Steps */ + ((DataToSend[2] * DataNumber) * 4U) /* Samples */;
 801097a:	7883      	ldrb	r3, [r0, #2]
 801097c:	fb13 f401 	smulbb	r4, r3, r1
  indexStart= 20U * (*CountSendData);
 8010980:	8831      	ldrh	r1, [r6, #0]
 8010982:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010986:	0089      	lsls	r1, r1, #2
 8010988:	b289      	uxth	r1, r1
  TotalSize= 2U /* nSample */ + 1U /* nComponents */ + 4U /*  Frequency Steps */ + ((DataToSend[2] * DataNumber) * 4U) /* Samples */;
 801098a:	00a4      	lsls	r4, r4, #2
  indexStop=  20U * ((*CountSendData) + 1U);
 801098c:	f101 0514 	add.w	r5, r1, #20
  TotalSize= 2U /* nSample */ + 1U /* nComponents */ + 4U /*  Frequency Steps */ + ((DataToSend[2] * DataNumber) * 4U) /* Samples */;
 8010990:	3407      	adds	r4, #7
 8010992:	b2a4      	uxth	r4, r4
  indexStop=  20U * ((*CountSendData) + 1U);
 8010994:	b2ad      	uxth	r5, r5
  if(indexStop > TotalSize)
 8010996:	42ac      	cmp	r4, r5
    NumByteSent= (uint8_t)(TotalSize % NumByteSent);
 8010998:	bf38      	it	cc
 801099a:	4625      	movcc	r5, r4
 801099c:	f04f 0814 	mov.w	r8, #20
{
 80109a0:	4617      	mov	r7, r2
    Buff[index - indexStart]= DataToSend[index];
 80109a2:	eba5 0201 	sub.w	r2, r5, r1
    NumByteSent= (uint8_t)(TotalSize % NumByteSent);
 80109a6:	bf38      	it	cc
 80109a8:	fbb4 f3f8 	udivcc	r3, r4, r8
{
 80109ac:	b086      	sub	sp, #24
    NumByteSent= (uint8_t)(TotalSize % NumByteSent);
 80109ae:	bf38      	it	cc
 80109b0:	fb08 4813 	mlscc	r8, r8, r3, r4
    Buff[index - indexStart]= DataToSend[index];
 80109b4:	b292      	uxth	r2, r2
    NumByteSent= (uint8_t)(TotalSize % NumByteSent);
 80109b6:	bf38      	it	cc
 80109b8:	fa5f f888 	uxtbcc.w	r8, r8
    Buff[index - indexStart]= DataToSend[index];
 80109bc:	428d      	cmp	r5, r1
 80109be:	bf38      	it	cc
 80109c0:	2200      	movcc	r2, #0
 80109c2:	4401      	add	r1, r0
 80109c4:	a801      	add	r0, sp, #4
 80109c6:	f00b fc25 	bl	801c214 <memcpy>
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFFTAmplitude, 0, NumByteSent,Buff);
 80109ca:	4809      	ldr	r0, [pc, #36]	; (80109f0 <BLE_FFTAmplitudeUpdate+0x7c>)
 80109cc:	ab01      	add	r3, sp, #4
 80109ce:	4642      	mov	r2, r8
 80109d0:	2100      	movs	r1, #0
 80109d2:	f000 fc05 	bl	80111e0 <safe_aci_gatt_update_char_value>
  if (ret == BLE_STATUS_SUCCESS)
 80109d6:	b938      	cbnz	r0, 80109e8 <BLE_FFTAmplitudeUpdate+0x74>
    (*CountSendData)++;
 80109d8:	8833      	ldrh	r3, [r6, #0]
    if(indexStop == TotalSize)
 80109da:	42a5      	cmp	r5, r4
    (*CountSendData)++;
 80109dc:	f103 0301 	add.w	r3, r3, #1
 80109e0:	8033      	strh	r3, [r6, #0]
      *SendingFFT= 0;
 80109e2:	bf04      	itt	eq
 80109e4:	7038      	strbeq	r0, [r7, #0]
      *CountSendData= 0;
 80109e6:	8030      	strheq	r0, [r6, #0]
}
 80109e8:	b006      	add	sp, #24
 80109ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109ee:	bf00      	nop
 80109f0:	2000290c 	.word	0x2000290c

080109f4 <AttrMod_Request_Inertial>:
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void AttrMod_Request_Inertial(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 80109f4:	9b00      	ldr	r3, [sp, #0]
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	d102      	bne.n	8010a02 <AttrMod_Request_Inertial+0xe>
    BLE_Inertial_NotifyEvent= BLE_NOTIFY_SUB;
 80109fc:	4a03      	ldr	r2, [pc, #12]	; (8010a0c <AttrMod_Request_Inertial+0x18>)
 80109fe:	7013      	strb	r3, [r2, #0]
 8010a00:	4770      	bx	lr
  } else if (att_data[0] == 0U){
 8010a02:	b913      	cbnz	r3, 8010a0a <AttrMod_Request_Inertial+0x16>
    BLE_Inertial_NotifyEvent= BLE_NOTIFY_UNSUB;
 8010a04:	4b01      	ldr	r3, [pc, #4]	; (8010a0c <AttrMod_Request_Inertial+0x18>)
 8010a06:	2202      	movs	r2, #2
 8010a08:	701a      	strb	r2, [r3, #0]
    Term_Update(BufferToWrite,BytesToWrite);
  } else {
    BLE_MANAGER_PRINTF("--->Acc/Gyro/Mag=%s", (BLE_Inertial_NotifyEvent == BLE_NOTIFY_SUB) ? " ON\r\n" : " OFF\r\n");
  }
#endif
}
 8010a0a:	4770      	bx	lr
 8010a0c:	20002938 	.word	0x20002938

08010a10 <BLE_InitInertialService>:
{
 8010a10:	b5f0      	push	{r4, r5, r6, r7, lr}
  InertialCharSize=2;
 8010a12:	4c31      	ldr	r4, [pc, #196]	; (8010ad8 <BLE_InitInertialService+0xc8>)
 8010a14:	2302      	movs	r3, #2
  if( (AccEnable == 1U) ||
 8010a16:	2801      	cmp	r0, #1
{
 8010a18:	b0c1      	sub	sp, #260	; 0x104
 8010a1a:	4607      	mov	r7, r0
 8010a1c:	460e      	mov	r6, r1
 8010a1e:	4615      	mov	r5, r2
  InertialCharSize=2;
 8010a20:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  InertialFeaturesEnabled.AccIsEnable = AccEnable;
 8010a24:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  InertialFeaturesEnabled.GyroIsEnable= GyroEnable;
 8010a28:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
  InertialFeaturesEnabled.MagIsEnabled= MagEnabled;
 8010a2c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if( (AccEnable == 1U) ||
 8010a30:	d003      	beq.n	8010a3a <BLE_InitInertialService+0x2a>
 8010a32:	2901      	cmp	r1, #1
 8010a34:	d001      	beq.n	8010a3a <BLE_InitInertialService+0x2a>
     (GyroEnable == 1U)   ||
 8010a36:	2a01      	cmp	r2, #1
 8010a38:	d144      	bne.n	8010ac4 <BLE_InitInertialService+0xb4>
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 8010a3a:	4828      	ldr	r0, [pc, #160]	; (8010adc <BLE_InitInertialService+0xcc>)
 8010a3c:	2228      	movs	r2, #40	; 0x28
 8010a3e:	2100      	movs	r1, #0
 8010a40:	f00b fc10 	bl	801c264 <memset>
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_Inertial;
 8010a44:	4b26      	ldr	r3, [pc, #152]	; (8010ae0 <BLE_InitInertialService+0xd0>)
 8010a46:	6263      	str	r3, [r4, #36]	; 0x24
    COPY_INERTIAL_CHAR_UUID((BleCharPointer->uuid));
 8010a48:	4b26      	ldr	r3, [pc, #152]	; (8010ae4 <BLE_InitInertialService+0xd4>)
 8010a4a:	6063      	str	r3, [r4, #4]
 8010a4c:	2302      	movs	r3, #2
 8010a4e:	7223      	strb	r3, [r4, #8]
 8010a50:	f64a 4336 	movw	r3, #44086	; 0xac36
 8010a54:	8163      	strh	r3, [r4, #10]
 8010a56:	f241 13e1 	movw	r3, #4577	; 0x11e1
 8010a5a:	81a3      	strh	r3, [r4, #12]
 8010a5c:	2301      	movs	r3, #1
    if(AccEnable == 1U){
 8010a5e:	429f      	cmp	r7, r3
    COPY_INERTIAL_CHAR_UUID((BleCharPointer->uuid));
 8010a60:	73a3      	strb	r3, [r4, #14]
      BleCharPointer->uuid[14] |= 0x80U;
 8010a62:	bf01      	itttt	eq
 8010a64:	2380      	moveq	r3, #128	; 0x80
 8010a66:	74a3      	strbeq	r3, [r4, #18]
      InertialCharSize+= 3U * 2U;
 8010a68:	2308      	moveq	r3, #8
 8010a6a:	f884 3030 	strbeq.w	r3, [r4, #48]	; 0x30
    if(GyroEnable == 1U){
 8010a6e:	2e01      	cmp	r6, #1
 8010a70:	d108      	bne.n	8010a84 <BLE_InitInertialService+0x74>
      InertialCharSize+= 3U * 2U;
 8010a72:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
      BleCharPointer->uuid[14] |= 0x40U;
 8010a76:	7ca2      	ldrb	r2, [r4, #18]
      InertialCharSize+= 3U * 2U;
 8010a78:	3306      	adds	r3, #6
      BleCharPointer->uuid[14] |= 0x40U;
 8010a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010a7e:	74a2      	strb	r2, [r4, #18]
      InertialCharSize+= 3U * 2U;
 8010a80:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if(MagEnabled == 1U){
 8010a84:	2d01      	cmp	r5, #1
 8010a86:	d108      	bne.n	8010a9a <BLE_InitInertialService+0x8a>
      InertialCharSize+= 3U * 2U;
 8010a88:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
      BleCharPointer->uuid[14] |= 0x20U;
 8010a8c:	7ca2      	ldrb	r2, [r4, #18]
      InertialCharSize+= 3U * 2U;
 8010a8e:	3306      	adds	r3, #6
      BleCharPointer->uuid[14] |= 0x20U;
 8010a90:	f042 0220 	orr.w	r2, r2, #32
 8010a94:	74a2      	strb	r2, [r4, #18]
      InertialCharSize+= 3U * 2U;
 8010a96:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 8010a9a:	2302      	movs	r3, #2
 8010a9c:	7523      	strb	r3, [r4, #20]
    BleCharPointer->Char_Value_Length= InertialCharSize;
 8010a9e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8010aa2:	82e3      	strh	r3, [r4, #22]
    BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 8010aa4:	2310      	movs	r3, #16
    BLE_MANAGER_PRINTF("BLE Inertial features ok\r\n");
 8010aa6:	4910      	ldr	r1, [pc, #64]	; (8010ae8 <BLE_InitInertialService+0xd8>)
    BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 8010aa8:	7623      	strb	r3, [r4, #24]
    BLE_MANAGER_PRINTF("BLE Inertial features ok\r\n");
 8010aaa:	4668      	mov	r0, sp
    BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 8010aac:	f241 0304 	movw	r3, #4100	; 0x1004
 8010ab0:	8363      	strh	r3, [r4, #26]
    BLE_MANAGER_PRINTF("BLE Inertial features ok\r\n");
 8010ab2:	f00c f9b1 	bl	801ce18 <strcpy>
 8010ab6:	211a      	movs	r1, #26
 8010ab8:	4668      	mov	r0, sp
 8010aba:	f008 ff77 	bl	80199ac <CDC_Fill_Buffer>
    BleCharPointer = &BleCharInertial;
 8010abe:	480b      	ldr	r0, [pc, #44]	; (8010aec <BLE_InitInertialService+0xdc>)
}
 8010ac0:	b041      	add	sp, #260	; 0x104
 8010ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    BLE_MANAGER_PRINTF(" ERROR: None inertial features is enabled\r\n");
 8010ac4:	490a      	ldr	r1, [pc, #40]	; (8010af0 <BLE_InitInertialService+0xe0>)
 8010ac6:	4668      	mov	r0, sp
 8010ac8:	f00c f9a6 	bl	801ce18 <strcpy>
 8010acc:	212b      	movs	r1, #43	; 0x2b
 8010ace:	4668      	mov	r0, sp
 8010ad0:	f008 ff6c 	bl	80199ac <CDC_Fill_Buffer>
  BleCharTypeDef *BleCharPointer= NULL;
 8010ad4:	2000      	movs	r0, #0
  return BleCharPointer;
 8010ad6:	e7f3      	b.n	8010ac0 <BLE_InitInertialService+0xb0>
 8010ad8:	20002938 	.word	0x20002938
 8010adc:	20002940 	.word	0x20002940
 8010ae0:	080109f5 	.word	0x080109f5
 8010ae4:	a5d5c51b 	.word	0xa5d5c51b
 8010ae8:	08022f03 	.word	0x08022f03
 8010aec:	2000293c 	.word	0x2000293c
 8010af0:	08022f1e 	.word	0x08022f1e

08010af4 <BLE_SetInertialAdvertizeData>:
  if(InertialFeaturesEnabled.AccIsEnable == 1U) {
 8010af4:	4b0c      	ldr	r3, [pc, #48]	; (8010b28 <BLE_SetInertialAdvertizeData+0x34>)
 8010af6:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8010afa:	2a01      	cmp	r2, #1
    manuf_data[INERTIAL_ADVERTIZE_DATA_POSITION] |= 0x80U;
 8010afc:	bf02      	ittt	eq
 8010afe:	7c02      	ldrbeq	r2, [r0, #16]
 8010b00:	f062 027f 	orneq	r2, r2, #127	; 0x7f
 8010b04:	7402      	strbeq	r2, [r0, #16]
  if(InertialFeaturesEnabled.GyroIsEnable == 1U) {
 8010b06:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
  if(InertialFeaturesEnabled.MagIsEnabled == 1U) {
 8010b0a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
  if(InertialFeaturesEnabled.GyroIsEnable == 1U) {
 8010b0e:	2a01      	cmp	r2, #1
    manuf_data[INERTIAL_ADVERTIZE_DATA_POSITION] |= 0x40U;
 8010b10:	bf02      	ittt	eq
 8010b12:	7c02      	ldrbeq	r2, [r0, #16]
 8010b14:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
 8010b18:	7402      	strbeq	r2, [r0, #16]
  if(InertialFeaturesEnabled.MagIsEnabled == 1U) {
 8010b1a:	2b01      	cmp	r3, #1
    manuf_data[INERTIAL_ADVERTIZE_DATA_POSITION] |= 0x20U;
 8010b1c:	bf02      	ittt	eq
 8010b1e:	7c03      	ldrbeq	r3, [r0, #16]
 8010b20:	f043 0320 	orreq.w	r3, r3, #32
 8010b24:	7403      	strbeq	r3, [r0, #16]
}
 8010b26:	4770      	bx	lr
 8010b28:	20002938 	.word	0x20002938

08010b2c <BLE_AccGyroMagUpdate>:
{
 8010b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b2e:	b0c7      	sub	sp, #284	; 0x11c
 8010b30:	4617      	mov	r7, r2
 8010b32:	460d      	mov	r5, r1
 8010b34:	4606      	mov	r6, r0
  STORE_LE_16(buff   ,(HAL_GetTick()>>3));
 8010b36:	f7f7 fd75 	bl	8008624 <HAL_GetTick>
 8010b3a:	ac01      	add	r4, sp, #4
 8010b3c:	08c0      	lsrs	r0, r0, #3
 8010b3e:	7020      	strb	r0, [r4, #0]
 8010b40:	f7f7 fd70 	bl	8008624 <HAL_GetTick>
  if(InertialFeaturesEnabled.AccIsEnable == 1U) {
 8010b44:	4a46      	ldr	r2, [pc, #280]	; (8010c60 <BLE_AccGyroMagUpdate+0x134>)
 8010b46:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
  STORE_LE_16(buff   ,(HAL_GetTick()>>3));
 8010b4a:	0ac0      	lsrs	r0, r0, #11
  if(InertialFeaturesEnabled.AccIsEnable == 1U) {
 8010b4c:	2b01      	cmp	r3, #1
  STORE_LE_16(buff   ,(HAL_GetTick()>>3));
 8010b4e:	7060      	strb	r0, [r4, #1]
  if(InertialFeaturesEnabled.AccIsEnable == 1U) {
 8010b50:	d172      	bne.n	8010c38 <BLE_AccGyroMagUpdate+0x10c>
    STORE_LE_16(buff+BuffPos, ((uint16_t)Acc->x));
 8010b52:	6833      	ldr	r3, [r6, #0]
 8010b54:	70a3      	strb	r3, [r4, #2]
 8010b56:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8010b5a:	70e3      	strb	r3, [r4, #3]
    STORE_LE_16(buff+BuffPos, ((uint16_t)Acc->y));
 8010b5c:	6873      	ldr	r3, [r6, #4]
 8010b5e:	7123      	strb	r3, [r4, #4]
 8010b60:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8010b64:	7163      	strb	r3, [r4, #5]
    STORE_LE_16(buff+BuffPos, ((uint16_t)Acc->z));
 8010b66:	68b3      	ldr	r3, [r6, #8]
 8010b68:	71a3      	strb	r3, [r4, #6]
 8010b6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8010b6e:	71e3      	strb	r3, [r4, #7]
    BuffPos+= 2U;
 8010b70:	2308      	movs	r3, #8
  if(InertialFeaturesEnabled.GyroIsEnable == 1U) {
 8010b72:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
 8010b76:	2901      	cmp	r1, #1
 8010b78:	d125      	bne.n	8010bc6 <BLE_AccGyroMagUpdate+0x9a>
    Gyro->x/=100;
 8010b7a:	682e      	ldr	r6, [r5, #0]
    Gyro->y/=100;
 8010b7c:	6868      	ldr	r0, [r5, #4]
    Gyro->z/=100;
 8010b7e:	68a9      	ldr	r1, [r5, #8]
    Gyro->x/=100;
 8010b80:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8010b84:	fb96 f6fc 	sdiv	r6, r6, ip
    Gyro->y/=100;
 8010b88:	fb90 f0fc 	sdiv	r0, r0, ip
    Gyro->z/=100;
 8010b8c:	fb91 f1fc 	sdiv	r1, r1, ip
    Gyro->x/=100;
 8010b90:	602e      	str	r6, [r5, #0]
    Gyro->y/=100;
 8010b92:	6068      	str	r0, [r5, #4]
    Gyro->z/=100;
 8010b94:	60a9      	str	r1, [r5, #8]
    STORE_LE_16(buff+BuffPos, ((uint16_t)Gyro->x));
 8010b96:	1c5d      	adds	r5, r3, #1
 8010b98:	b2ed      	uxtb	r5, r5
 8010b9a:	54e6      	strb	r6, [r4, r3]
 8010b9c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8010ba0:	5566      	strb	r6, [r4, r5]
    BuffPos+= 2U;
 8010ba2:	1c9d      	adds	r5, r3, #2
    STORE_LE_16(buff+BuffPos, ((uint16_t)Gyro->y));
 8010ba4:	b2ed      	uxtb	r5, r5
 8010ba6:	5560      	strb	r0, [r4, r5]
 8010ba8:	1cdd      	adds	r5, r3, #3
 8010baa:	b2ed      	uxtb	r5, r5
 8010bac:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8010bb0:	5560      	strb	r0, [r4, r5]
    BuffPos+= 2U;
 8010bb2:	1d18      	adds	r0, r3, #4
    STORE_LE_16(buff+BuffPos, ((uint16_t)Gyro->z));
 8010bb4:	b2c0      	uxtb	r0, r0
 8010bb6:	5421      	strb	r1, [r4, r0]
 8010bb8:	1d58      	adds	r0, r3, #5
 8010bba:	b2c0      	uxtb	r0, r0
 8010bbc:	f3c1 2107 	ubfx	r1, r1, #8, #8
    BuffPos+= 2U;
 8010bc0:	3306      	adds	r3, #6
    STORE_LE_16(buff+BuffPos, ((uint16_t)Gyro->z));
 8010bc2:	5421      	strb	r1, [r4, r0]
    BuffPos+= 2U;
 8010bc4:	b2db      	uxtb	r3, r3
  if(InertialFeaturesEnabled.MagIsEnabled == 1U) {
 8010bc6:	f892 1033 	ldrb.w	r1, [r2, #51]	; 0x33
 8010bca:	2901      	cmp	r1, #1
 8010bcc:	d118      	bne.n	8010c00 <BLE_AccGyroMagUpdate+0xd4>
    STORE_LE_16(buff+BuffPos, ((uint16_t)Mag->x));
 8010bce:	6839      	ldr	r1, [r7, #0]
 8010bd0:	54e1      	strb	r1, [r4, r3]
 8010bd2:	1c58      	adds	r0, r3, #1
 8010bd4:	b2c0      	uxtb	r0, r0
 8010bd6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010bda:	5421      	strb	r1, [r4, r0]
    BuffPos+= 2U;
 8010bdc:	1c98      	adds	r0, r3, #2
    STORE_LE_16(buff+BuffPos, ((uint16_t)Mag->y));
 8010bde:	b2c0      	uxtb	r0, r0
 8010be0:	6879      	ldr	r1, [r7, #4]
 8010be2:	5421      	strb	r1, [r4, r0]
 8010be4:	1cd8      	adds	r0, r3, #3
 8010be6:	b2c0      	uxtb	r0, r0
 8010be8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010bec:	5421      	strb	r1, [r4, r0]
    BuffPos+= 2U;
 8010bee:	1d18      	adds	r0, r3, #4
    STORE_LE_16(buff+BuffPos, ((uint16_t)Mag->z));
 8010bf0:	68b9      	ldr	r1, [r7, #8]
 8010bf2:	b2c0      	uxtb	r0, r0
 8010bf4:	3305      	adds	r3, #5
 8010bf6:	b2db      	uxtb	r3, r3
 8010bf8:	5421      	strb	r1, [r4, r0]
 8010bfa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010bfe:	54e1      	strb	r1, [r4, r3]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharInertial, 0, InertialCharSize, buff);
 8010c00:	4623      	mov	r3, r4
 8010c02:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8010c06:	4817      	ldr	r0, [pc, #92]	; (8010c64 <BLE_AccGyroMagUpdate+0x138>)
 8010c08:	2100      	movs	r1, #0
 8010c0a:	f000 fae9 	bl	80111e0 <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 8010c0e:	4604      	mov	r4, r0
 8010c10:	b178      	cbz	r0, 8010c32 <BLE_AccGyroMagUpdate+0x106>
    if(ret != BLE_STATUS_INSUFFICIENT_RESOURCES) {
 8010c12:	2864      	cmp	r0, #100	; 0x64
 8010c14:	d01c      	beq.n	8010c50 <BLE_AccGyroMagUpdate+0x124>
      if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 8010c16:	4b14      	ldr	r3, [pc, #80]	; (8010c68 <BLE_AccGyroMagUpdate+0x13c>)
 8010c18:	781b      	ldrb	r3, [r3, #0]
 8010c1a:	2b01      	cmp	r3, #1
 8010c1c:	d10e      	bne.n	8010c3c <BLE_AccGyroMagUpdate+0x110>
        BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Acc/Gyro/Mag Char\n");
 8010c1e:	4913      	ldr	r1, [pc, #76]	; (8010c6c <BLE_AccGyroMagUpdate+0x140>)
 8010c20:	4813      	ldr	r0, [pc, #76]	; (8010c70 <BLE_AccGyroMagUpdate+0x144>)
 8010c22:	f00c f8f9 	bl	801ce18 <strcpy>
 8010c26:	4b13      	ldr	r3, [pc, #76]	; (8010c74 <BLE_AccGyroMagUpdate+0x148>)
        Stderr_Update(BufferToWrite,BytesToWrite);
 8010c28:	4811      	ldr	r0, [pc, #68]	; (8010c70 <BLE_AccGyroMagUpdate+0x144>)
        BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Acc/Gyro/Mag Char\n");
 8010c2a:	2121      	movs	r1, #33	; 0x21
 8010c2c:	7019      	strb	r1, [r3, #0]
        Stderr_Update(BufferToWrite,BytesToWrite);
 8010c2e:	f000 fb35 	bl	801129c <Stderr_Update>
}
 8010c32:	4620      	mov	r0, r4
 8010c34:	b047      	add	sp, #284	; 0x11c
 8010c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BuffPos= 2;
 8010c38:	2302      	movs	r3, #2
 8010c3a:	e79a      	b.n	8010b72 <BLE_AccGyroMagUpdate+0x46>
        BLE_MANAGER_PRINTF("Error: Updating Acc/Gyro/Mag Char ret=%x\r\n",ret);
 8010c3c:	490e      	ldr	r1, [pc, #56]	; (8010c78 <BLE_AccGyroMagUpdate+0x14c>)
 8010c3e:	4602      	mov	r2, r0
 8010c40:	a806      	add	r0, sp, #24
 8010c42:	f00c f879 	bl	801cd38 <siprintf>
 8010c46:	4601      	mov	r1, r0
      BLE_MANAGER_PRINTF("Error: Updating Acc/Gyro/Mag Char ret=%x\r\n",ret);
 8010c48:	a806      	add	r0, sp, #24
 8010c4a:	f008 feaf 	bl	80199ac <CDC_Fill_Buffer>
 8010c4e:	e7f0      	b.n	8010c32 <BLE_AccGyroMagUpdate+0x106>
 8010c50:	4909      	ldr	r1, [pc, #36]	; (8010c78 <BLE_AccGyroMagUpdate+0x14c>)
 8010c52:	4602      	mov	r2, r0
 8010c54:	a806      	add	r0, sp, #24
 8010c56:	f00c f86f 	bl	801cd38 <siprintf>
 8010c5a:	212a      	movs	r1, #42	; 0x2a
 8010c5c:	e7f4      	b.n	8010c48 <BLE_AccGyroMagUpdate+0x11c>
 8010c5e:	bf00      	nop
 8010c60:	20002938 	.word	0x20002938
 8010c64:	2000293c 	.word	0x2000293c
 8010c68:	20002974 	.word	0x20002974
 8010c6c:	08022f4a 	.word	0x08022f4a
 8010c70:	20002b41 	.word	0x20002b41
 8010c74:	20002c41 	.word	0x20002c41
 8010c78:	08022f6c 	.word	0x08022f6c

08010c7c <AttrMod_Request_Config>:
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void AttrMod_Request_Config(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == (uint8_t)01) {
 8010c7c:	9b00      	ldr	r3, [sp, #0]
 8010c7e:	781b      	ldrb	r3, [r3, #0]
 8010c80:	2b01      	cmp	r3, #1
 8010c82:	d102      	bne.n	8010c8a <AttrMod_Request_Config+0xe>
    BLE_Conf_Service= BLE_SERV_ENABLE;
  } else if (att_data[0] == 0U){
    BLE_Conf_Service= BLE_SERV_NOT_ENABLE;
 8010c84:	4a02      	ldr	r2, [pc, #8]	; (8010c90 <AttrMod_Request_Config+0x14>)
 8010c86:	7013      	strb	r3, [r2, #0]
    Term_Update(BufferToWrite,BytesToWrite);
  } else {
    BLE_MANAGER_PRINTF("--->Conf=%s\r\n", (BLE_Conf_Service == BLE_SERV_ENABLE) ? "ON" : "OFF");
  }
#endif
}
 8010c88:	e001      	b.n	8010c8e <AttrMod_Request_Config+0x12>
  } else if (att_data[0] == 0U){
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d0fa      	beq.n	8010c84 <AttrMod_Request_Config+0x8>
}
 8010c8e:	4770      	bx	lr
 8010c90:	2000296c 	.word	0x2000296c

08010c94 <Write_Request_Config>:
* @param  uint8_t data_length length of the data
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void Write_Request_Config(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{ 
 8010c94:	4619      	mov	r1, r3
  /* Received one write command from Client on Configuration characteristc */
  if(CustomWriteRequestConfigCallback!=NULL) {
 8010c96:	4b03      	ldr	r3, [pc, #12]	; (8010ca4 <Write_Request_Config+0x10>)
{ 
 8010c98:	9800      	ldr	r0, [sp, #0]
  if(CustomWriteRequestConfigCallback!=NULL) {
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	b103      	cbz	r3, 8010ca0 <Write_Request_Config+0xc>
    CustomWriteRequestConfigCallback(att_data,data_length);
 8010c9e:	4718      	bx	r3
  }
}
 8010ca0:	4770      	bx	lr
 8010ca2:	bf00      	nop
 8010ca4:	2000296c 	.word	0x2000296c

08010ca8 <AttrMod_Request_StdErr>:
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void AttrMod_Request_StdErr(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 8010ca8:	9b00      	ldr	r3, [sp, #0]
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	d102      	bne.n	8010cb6 <AttrMod_Request_StdErr+0xe>
    BLE_StdErr_Service= BLE_SERV_ENABLE;
  } else if (att_data[0] == 0U){
    BLE_StdErr_Service= BLE_SERV_NOT_ENABLE;
 8010cb0:	4a02      	ldr	r2, [pc, #8]	; (8010cbc <AttrMod_Request_StdErr+0x14>)
 8010cb2:	7213      	strb	r3, [r2, #8]
  }
}
 8010cb4:	e001      	b.n	8010cba <AttrMod_Request_StdErr+0x12>
  } else if (att_data[0] == 0U){
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d0fa      	beq.n	8010cb0 <AttrMod_Request_StdErr+0x8>
}
 8010cba:	4770      	bx	lr
 8010cbc:	2000296c 	.word	0x2000296c

08010cc0 <AttrMod_Request_Term>:
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void AttrMod_Request_Term(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 8010cc0:	9b00      	ldr	r3, [sp, #0]
 8010cc2:	781b      	ldrb	r3, [r3, #0]
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	d102      	bne.n	8010cce <AttrMod_Request_Term+0xe>
    BLE_StdTerm_Service= BLE_SERV_ENABLE;
  } else if (att_data[0] == 0U){
    BLE_StdTerm_Service= BLE_SERV_NOT_ENABLE;
 8010cc8:	4a02      	ldr	r2, [pc, #8]	; (8010cd4 <AttrMod_Request_Term+0x14>)
 8010cca:	7253      	strb	r3, [r2, #9]
  }
}
 8010ccc:	e001      	b.n	8010cd2 <AttrMod_Request_Term+0x12>
  } else if (att_data[0] == 0U){
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d0fa      	beq.n	8010cc8 <AttrMod_Request_Term+0x8>
}
 8010cd2:	4770      	bx	lr
 8010cd4:	2000296c 	.word	0x2000296c

08010cd8 <AttrMod_Request_ExtConfig>:
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void AttrMod_Request_ExtConfig(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 8010cd8:	9b00      	ldr	r3, [sp, #0]
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	d102      	bne.n	8010ce6 <AttrMod_Request_ExtConfig+0xe>
    BLE_ExtConf_Service= BLE_SERV_ENABLE;
  } else if (att_data[0] == 0U){
    BLE_ExtConf_Service= BLE_SERV_NOT_ENABLE;
 8010ce0:	4a02      	ldr	r2, [pc, #8]	; (8010cec <AttrMod_Request_ExtConfig+0x14>)
 8010ce2:	7293      	strb	r3, [r2, #10]
  }
}
 8010ce4:	e001      	b.n	8010cea <AttrMod_Request_ExtConfig+0x12>
  } else if (att_data[0] == 0U){
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d0fa      	beq.n	8010ce0 <AttrMod_Request_ExtConfig+0x8>
}
 8010cea:	4770      	bx	lr
 8010cec:	2000296c 	.word	0x2000296c

08010cf0 <ClearSingleCommand>:
* @brief  Clear One Single Custom Command
* @param  BLE_ExtCustomCommand_t *NextCommand poiter to the next Custom Commands
* @retval None
*/
static void ClearSingleCommand(BLE_ExtCustomCommand_t *Command)
{
 8010cf0:	b510      	push	{r4, lr}
 8010cf2:	4604      	mov	r4, r0
  if(Command->NextCommand!=NULL) {
 8010cf4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010cf6:	b108      	cbz	r0, 8010cfc <ClearSingleCommand+0xc>
    ClearSingleCommand((BLE_ExtCustomCommand_t *)Command->NextCommand);
 8010cf8:	f7ff fffa 	bl	8010cf0 <ClearSingleCommand>
  }
#if (BLE_DEBUG_LEVEL>1)
  BLE_MANAGER_PRINTF("Deleting Custom Command<%s>\r\n",Command->CommandName);
#endif
  BLE_FreeFunction(Command);
 8010cfc:	4620      	mov	r0, r4
}
 8010cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BLE_FreeFunction(Command);
 8010d02:	f00b ba7f 	b.w	801c204 <free>
	...

08010d08 <InitBleManager_BlueNRG_Stack>:
/** @brief Initialize the BlueNRG Stack
* @param None
* @retval tBleStatus
*/
static tBleStatus InitBleManager_BlueNRG_Stack(void)
{
 8010d08:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Initialize the BlueNRG HCI */
  hci_init(APP_UserEvtRx, NULL);
  
  /* we will let the BLE chip to use its Random MAC address */
#define CONFIG_DATA_RANDOM_ADDRESS          (0x80) /**< Stored static random address. Read-only. */
  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, &data_len_out, BlueNRG_StackValue.BleMacAddress);
 8010d0a:	4d79      	ldr	r5, [pc, #484]	; (8010ef0 <InitBleManager_BlueNRG_Stack+0x1e8>)
  hci_init(APP_UserEvtRx, NULL);
 8010d0c:	4879      	ldr	r0, [pc, #484]	; (8010ef4 <InitBleManager_BlueNRG_Stack+0x1ec>)
{
 8010d0e:	b0cb      	sub	sp, #300	; 0x12c
  hci_init(APP_UserEvtRx, NULL);
 8010d10:	2100      	movs	r1, #0
 8010d12:	f7fe fc25 	bl	800f560 <hci_init>
  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, &data_len_out, BlueNRG_StackValue.BleMacAddress);
 8010d16:	f105 022b 	add.w	r2, r5, #43	; 0x2b
 8010d1a:	f10d 0119 	add.w	r1, sp, #25
 8010d1e:	2080      	movs	r0, #128	; 0x80
 8010d20:	f7fd fff6 	bl	800ed10 <aci_hal_read_config_data>
  
  if(ret != BLE_STATUS_SUCCESS){
 8010d24:	4604      	mov	r4, r0
 8010d26:	b150      	cbz	r0, 8010d3e <InitBleManager_BlueNRG_Stack+0x36>
    BLE_MANAGER_PRINTF("\r\nReading  Random BD_ADDR failed\r\n");
 8010d28:	4973      	ldr	r1, [pc, #460]	; (8010ef8 <InitBleManager_BlueNRG_Stack+0x1f0>)
 8010d2a:	a80a      	add	r0, sp, #40	; 0x28
 8010d2c:	f00c f874 	bl	801ce18 <strcpy>
 8010d30:	2122      	movs	r1, #34	; 0x22
  
  ret = aci_hal_write_config_data(BlueNRG_StackValue.ConfigValueOffsets,
                                  BlueNRG_StackValue.ConfigValuelength,
                                  BlueNRG_StackValue.BleMacAddress);
  if(ret != BLE_STATUS_SUCCESS){
    BLE_MANAGER_PRINTF("\r\nSetting Public BD_ADDR failed\r\n");
 8010d32:	a80a      	add	r0, sp, #40	; 0x28
 8010d34:	f008 fe3a 	bl	80199ac <CDC_Fill_Buffer>
  aci_hal_set_tx_power_level(BlueNRG_StackValue.EnableHighPowerMode,
                             BlueNRG_StackValue.PowerAmplifierOutputLevel); 
  
fail:
  return ret;
}
 8010d38:	4620      	mov	r0, r4
 8010d3a:	b04b      	add	sp, #300	; 0x12c
 8010d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(BlueNRG_StackValue.EnableRandomSecurePIN) {
 8010d3e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8010d42:	b30b      	cbz	r3, 8010d88 <InitBleManager_BlueNRG_Stack+0x80>
    BlueNRG_StackValue.SecurePIN = 99999;
 8010d44:	4b6d      	ldr	r3, [pc, #436]	; (8010efc <InitBleManager_BlueNRG_Stack+0x1f4>)
 8010d46:	626b      	str	r3, [r5, #36]	; 0x24
    if(hci_le_rand(random_number) != BLE_STATUS_SUCCESS) {
 8010d48:	a808      	add	r0, sp, #32
 8010d4a:	f7fe fbcf 	bl	800f4ec <hci_le_rand>
 8010d4e:	b138      	cbz	r0, 8010d60 <InitBleManager_BlueNRG_Stack+0x58>
      BLE_MANAGER_PRINTF("hci_le_rand() call failed\r\n");
 8010d50:	496b      	ldr	r1, [pc, #428]	; (8010f00 <InitBleManager_BlueNRG_Stack+0x1f8>)
 8010d52:	a80a      	add	r0, sp, #40	; 0x28
 8010d54:	f00c f860 	bl	801ce18 <strcpy>
 8010d58:	211b      	movs	r1, #27
 8010d5a:	a80a      	add	r0, sp, #40	; 0x28
 8010d5c:	f008 fe26 	bl	80199ac <CDC_Fill_Buffer>
 8010d60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010d62:	a908      	add	r1, sp, #32
{
 8010d64:	2208      	movs	r2, #8
      BlueNRG_StackValue.SecurePIN += (435U*((uint32_t)random_number[i]));
 8010d66:	f240 14b3 	movw	r4, #435	; 0x1b3
 8010d6a:	f811 0b01 	ldrb.w	r0, [r1], #1
    for (uint8_t i=0; i<8U; i++) {
 8010d6e:	3a01      	subs	r2, #1
 8010d70:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
      BlueNRG_StackValue.SecurePIN += (435U*((uint32_t)random_number[i]));
 8010d74:	fb04 3300 	mla	r3, r4, r0, r3
    for (uint8_t i=0; i<8U; i++) {
 8010d78:	d1f7      	bne.n	8010d6a <InitBleManager_BlueNRG_Stack+0x62>
    if (BlueNRG_StackValue.SecurePIN <99999U) {
 8010d7a:	4a62      	ldr	r2, [pc, #392]	; (8010f04 <InitBleManager_BlueNRG_Stack+0x1fc>)
 8010d7c:	4293      	cmp	r3, r2
      BlueNRG_StackValue.SecurePIN += 100000U;
 8010d7e:	bf9c      	itt	ls
 8010d80:	f503 33c3 	addls.w	r3, r3, #99840	; 0x18600
 8010d84:	33a0      	addls	r3, #160	; 0xa0
 8010d86:	626b      	str	r3, [r5, #36]	; 0x24
  ret = aci_hal_write_config_data(BlueNRG_StackValue.ConfigValueOffsets,
 8010d88:	4a5f      	ldr	r2, [pc, #380]	; (8010f08 <InitBleManager_BlueNRG_Stack+0x200>)
 8010d8a:	7b69      	ldrb	r1, [r5, #13]
 8010d8c:	7b28      	ldrb	r0, [r5, #12]
 8010d8e:	f7fd ff95 	bl	800ecbc <aci_hal_write_config_data>
  if(ret != BLE_STATUS_SUCCESS){
 8010d92:	4604      	mov	r4, r0
 8010d94:	b128      	cbz	r0, 8010da2 <InitBleManager_BlueNRG_Stack+0x9a>
    BLE_MANAGER_PRINTF("\r\nSetting Public BD_ADDR failed\r\n");
 8010d96:	495d      	ldr	r1, [pc, #372]	; (8010f0c <InitBleManager_BlueNRG_Stack+0x204>)
 8010d98:	a80a      	add	r0, sp, #40	; 0x28
 8010d9a:	f00c f83d 	bl	801ce18 <strcpy>
 8010d9e:	2121      	movs	r1, #33	; 0x21
 8010da0:	e7c7      	b.n	8010d32 <InitBleManager_BlueNRG_Stack+0x2a>
  ret = aci_gatt_init();
 8010da2:	f7fd fded 	bl	800e980 <aci_gatt_init>
  if(ret != BLE_STATUS_SUCCESS){
 8010da6:	4604      	mov	r4, r0
 8010da8:	b128      	cbz	r0, 8010db6 <InitBleManager_BlueNRG_Stack+0xae>
    BLE_MANAGER_PRINTF("\r\nGATT_Init failed\r\n");
 8010daa:	4959      	ldr	r1, [pc, #356]	; (8010f10 <InitBleManager_BlueNRG_Stack+0x208>)
 8010dac:	a80a      	add	r0, sp, #40	; 0x28
 8010dae:	f00c f833 	bl	801ce18 <strcpy>
 8010db2:	2114      	movs	r1, #20
 8010db4:	e7bd      	b.n	8010d32 <InitBleManager_BlueNRG_Stack+0x2a>
  ret = aci_gap_init(BlueNRG_StackValue.GAP_Roles, 0, (uint8_t) strlen(BlueNRG_StackValue.BoardName), &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8010db6:	4e57      	ldr	r6, [pc, #348]	; (8010f14 <InitBleManager_BlueNRG_Stack+0x20c>)
 8010db8:	4630      	mov	r0, r6
 8010dba:	f7f3 fa8b 	bl	80042d4 <strlen>
 8010dbe:	af07      	add	r7, sp, #28
 8010dc0:	f10d 031e 	add.w	r3, sp, #30
 8010dc4:	9301      	str	r3, [sp, #4]
 8010dc6:	b2c2      	uxtb	r2, r0
 8010dc8:	4621      	mov	r1, r4
 8010dca:	7ba8      	ldrb	r0, [r5, #14]
 8010dcc:	9700      	str	r7, [sp, #0]
 8010dce:	f10d 031a 	add.w	r3, sp, #26
 8010dd2:	f7fd fc7f 	bl	800e6d4 <aci_gap_init>
  if(ret != BLE_STATUS_SUCCESS){
 8010dd6:	4604      	mov	r4, r0
 8010dd8:	b128      	cbz	r0, 8010de6 <InitBleManager_BlueNRG_Stack+0xde>
    BLE_MANAGER_PRINTF("\r\nGAP_Init failed\r\n");
 8010dda:	494f      	ldr	r1, [pc, #316]	; (8010f18 <InitBleManager_BlueNRG_Stack+0x210>)
 8010ddc:	a80a      	add	r0, sp, #40	; 0x28
 8010dde:	f00c f81b 	bl	801ce18 <strcpy>
 8010de2:	2113      	movs	r1, #19
 8010de4:	e7a5      	b.n	8010d32 <InitBleManager_BlueNRG_Stack+0x2a>
                                   (uint8_t) strlen(BlueNRG_StackValue.BoardName), (uint8_t *)BlueNRG_StackValue.BoardName);
 8010de6:	4630      	mov	r0, r6
 8010de8:	f7f3 fa74 	bl	80042d4 <strlen>
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8010dec:	9600      	str	r6, [sp, #0]
 8010dee:	b2c3      	uxtb	r3, r0
 8010df0:	4622      	mov	r2, r4
 8010df2:	8839      	ldrh	r1, [r7, #0]
 8010df4:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8010df8:	f7fd fe7c 	bl	800eaf4 <aci_gatt_update_char_value>
  if(ret != BLE_STATUS_SUCCESS){
 8010dfc:	4604      	mov	r4, r0
 8010dfe:	b128      	cbz	r0, 8010e0c <InitBleManager_BlueNRG_Stack+0x104>
    BLE_MANAGER_PRINTF("\r\naci_gatt_update_char_value failed\r\n");
 8010e00:	4946      	ldr	r1, [pc, #280]	; (8010f1c <InitBleManager_BlueNRG_Stack+0x214>)
    BLE_MANAGER_PRINTF("\r\nGAP setting Authentication failed\r\n");
 8010e02:	a80a      	add	r0, sp, #40	; 0x28
 8010e04:	f00c f808 	bl	801ce18 <strcpy>
 8010e08:	2125      	movs	r1, #37	; 0x25
 8010e0a:	e792      	b.n	8010d32 <InitBleManager_BlueNRG_Stack+0x2a>
  if(BlueNRG_StackValue.EnableSecureConnection) {
 8010e0c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8010e10:	b34b      	cbz	r3, 8010e66 <InitBleManager_BlueNRG_Stack+0x15e>
    if(aci_gap_set_io_capability(BlueNRG_StackValue.IO_capabilities)==BLE_STATUS_SUCCESS) {
 8010e12:	7be8      	ldrb	r0, [r5, #15]
 8010e14:	f7fd fbe4 	bl	800e5e0 <aci_gap_set_io_capability>
 8010e18:	b9e8      	cbnz	r0, 8010e56 <InitBleManager_BlueNRG_Stack+0x14e>
      BLE_MANAGER_PRINTF("I/O Capability Configurated\r\n");
 8010e1a:	4941      	ldr	r1, [pc, #260]	; (8010f20 <InitBleManager_BlueNRG_Stack+0x218>)
 8010e1c:	a80a      	add	r0, sp, #40	; 0x28
 8010e1e:	f00b fffb 	bl	801ce18 <strcpy>
 8010e22:	211d      	movs	r1, #29
      BLE_MANAGER_PRINTF("Error Setting I/O Capability\r\n");
 8010e24:	a80a      	add	r0, sp, #40	; 0x28
 8010e26:	f008 fdc1 	bl	80199ac <CDC_Fill_Buffer>
      ret = aci_gap_set_authentication_requirement(BlueNRG_StackValue.AuthenticationRequirements,
 8010e2a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    if(BlueNRG_StackValue.EnableRandomSecurePIN) {
 8010e2c:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
      ret = aci_gap_set_authentication_requirement(BlueNRG_StackValue.AuthenticationRequirements,
 8010e30:	7c28      	ldrb	r0, [r5, #16]
 8010e32:	7c69      	ldrb	r1, [r5, #17]
 8010e34:	7caa      	ldrb	r2, [r5, #18]
 8010e36:	7ceb      	ldrb	r3, [r5, #19]
 8010e38:	2401      	movs	r4, #1
 8010e3a:	e9cd 7403 	strd	r7, r4, [sp, #12]
    if(BlueNRG_StackValue.EnableRandomSecurePIN) {
 8010e3e:	b186      	cbz	r6, 8010e62 <InitBleManager_BlueNRG_Stack+0x15a>
      ret = aci_gap_set_authentication_requirement(BlueNRG_StackValue.AuthenticationRequirements,
 8010e40:	9402      	str	r4, [sp, #8]
      ret = aci_gap_set_authentication_requirement(BlueNRG_StackValue.AuthenticationRequirements,
 8010e42:	2407      	movs	r4, #7
 8010e44:	2610      	movs	r6, #16
 8010e46:	e9cd 4600 	strd	r4, r6, [sp]
    ret = aci_gap_set_authentication_requirement(BlueNRG_StackValue.AuthenticationRequirements,
 8010e4a:	f7fd fbe7 	bl	800e61c <aci_gap_set_authentication_requirement>
 8010e4e:	4604      	mov	r4, r0
  if (ret != BLE_STATUS_SUCCESS) {
 8010e50:	b1b0      	cbz	r0, 8010e80 <InitBleManager_BlueNRG_Stack+0x178>
    BLE_MANAGER_PRINTF("\r\nGAP setting Authentication failed\r\n");
 8010e52:	4934      	ldr	r1, [pc, #208]	; (8010f24 <InitBleManager_BlueNRG_Stack+0x21c>)
 8010e54:	e7d5      	b.n	8010e02 <InitBleManager_BlueNRG_Stack+0xfa>
      BLE_MANAGER_PRINTF("Error Setting I/O Capability\r\n");
 8010e56:	4934      	ldr	r1, [pc, #208]	; (8010f28 <InitBleManager_BlueNRG_Stack+0x220>)
 8010e58:	a80a      	add	r0, sp, #40	; 0x28
 8010e5a:	f00b ffdd 	bl	801ce18 <strcpy>
 8010e5e:	211e      	movs	r1, #30
 8010e60:	e7e0      	b.n	8010e24 <InitBleManager_BlueNRG_Stack+0x11c>
      ret = aci_gap_set_authentication_requirement(BlueNRG_StackValue.AuthenticationRequirements,
 8010e62:	9602      	str	r6, [sp, #8]
 8010e64:	e7ed      	b.n	8010e42 <InitBleManager_BlueNRG_Stack+0x13a>
    ret = aci_gap_set_authentication_requirement(BlueNRG_StackValue.AuthenticationRequirements,
 8010e66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010e68:	9004      	str	r0, [sp, #16]
 8010e6a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010e6e:	2210      	movs	r2, #16
 8010e70:	2307      	movs	r3, #7
 8010e72:	e9cd 3200 	strd	r3, r2, [sp]
 8010e76:	7c69      	ldrb	r1, [r5, #17]
 8010e78:	7ceb      	ldrb	r3, [r5, #19]
 8010e7a:	7caa      	ldrb	r2, [r5, #18]
 8010e7c:	7c28      	ldrb	r0, [r5, #16]
 8010e7e:	e7e4      	b.n	8010e4a <InitBleManager_BlueNRG_Stack+0x142>
  BLE_MANAGER_PRINTF("\r\nSERVER: BLE Stack Initialized \r\n"
 8010e80:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8010e84:	9304      	str	r3, [sp, #16]
 8010e86:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8010e8a:	9303      	str	r3, [sp, #12]
 8010e8c:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8010e90:	9302      	str	r3, [sp, #8]
 8010e92:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 8010e96:	9301      	str	r3, [sp, #4]
 8010e98:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8010e9c:	4a1d      	ldr	r2, [pc, #116]	; (8010f14 <InitBleManager_BlueNRG_Stack+0x20c>)
 8010e9e:	4923      	ldr	r1, [pc, #140]	; (8010f2c <InitBleManager_BlueNRG_Stack+0x224>)
 8010ea0:	9300      	str	r3, [sp, #0]
 8010ea2:	a80a      	add	r0, sp, #40	; 0x28
 8010ea4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8010ea8:	f00b ff46 	bl	801cd38 <siprintf>
 8010eac:	4601      	mov	r1, r0
 8010eae:	a80a      	add	r0, sp, #40	; 0x28
 8010eb0:	f008 fd7c 	bl	80199ac <CDC_Fill_Buffer>
  if(BlueNRG_StackValue.EnableSecureConnection) {
 8010eb4:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8010eb8:	b19b      	cbz	r3, 8010ee2 <InitBleManager_BlueNRG_Stack+0x1da>
    BLE_MANAGER_PRINTF("\t-->ONLY SECURE CONNECTION<--\r\n");
 8010eba:	491d      	ldr	r1, [pc, #116]	; (8010f30 <InitBleManager_BlueNRG_Stack+0x228>)
 8010ebc:	a80a      	add	r0, sp, #40	; 0x28
 8010ebe:	f00b ffab 	bl	801ce18 <strcpy>
 8010ec2:	211f      	movs	r1, #31
 8010ec4:	a80a      	add	r0, sp, #40	; 0x28
 8010ec6:	f008 fd71 	bl	80199ac <CDC_Fill_Buffer>
    if(BlueNRG_StackValue.EnableRandomSecurePIN) {
 8010eca:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
      BLE_MANAGER_PRINTF("\t\tRandom Key = %ld\r\n",BlueNRG_StackValue.SecurePIN);
 8010ece:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    if(BlueNRG_StackValue.EnableRandomSecurePIN) {
 8010ed0:	b163      	cbz	r3, 8010eec <InitBleManager_BlueNRG_Stack+0x1e4>
      BLE_MANAGER_PRINTF("\t\tRandom Key = %ld\r\n",BlueNRG_StackValue.SecurePIN);
 8010ed2:	4918      	ldr	r1, [pc, #96]	; (8010f34 <InitBleManager_BlueNRG_Stack+0x22c>)
      BLE_MANAGER_PRINTF("\t\tFixed  Key = %ld\r\n",BlueNRG_StackValue.SecurePIN);
 8010ed4:	a80a      	add	r0, sp, #40	; 0x28
 8010ed6:	f00b ff2f 	bl	801cd38 <siprintf>
 8010eda:	4601      	mov	r1, r0
 8010edc:	a80a      	add	r0, sp, #40	; 0x28
 8010ede:	f008 fd65 	bl	80199ac <CDC_Fill_Buffer>
  aci_hal_set_tx_power_level(BlueNRG_StackValue.EnableHighPowerMode,
 8010ee2:	7d69      	ldrb	r1, [r5, #21]
 8010ee4:	7d28      	ldrb	r0, [r5, #20]
 8010ee6:	f7fd ff47 	bl	800ed78 <aci_hal_set_tx_power_level>
 8010eea:	e725      	b.n	8010d38 <InitBleManager_BlueNRG_Stack+0x30>
      BLE_MANAGER_PRINTF("\t\tFixed  Key = %ld\r\n",BlueNRG_StackValue.SecurePIN);
 8010eec:	4912      	ldr	r1, [pc, #72]	; (8010f38 <InitBleManager_BlueNRG_Stack+0x230>)
 8010eee:	e7f1      	b.n	8010ed4 <InitBleManager_BlueNRG_Stack+0x1cc>
 8010ef0:	2000296c 	.word	0x2000296c
 8010ef4:	08010f3d 	.word	0x08010f3d
 8010ef8:	0802303c 	.word	0x0802303c
 8010efc:	0001869f 	.word	0x0001869f
 8010f00:	0802305f 	.word	0x0802305f
 8010f04:	0001869e 	.word	0x0001869e
 8010f08:	20002997 	.word	0x20002997
 8010f0c:	0802307b 	.word	0x0802307b
 8010f10:	0802309d 	.word	0x0802309d
 8010f14:	20002985 	.word	0x20002985
 8010f18:	080230b2 	.word	0x080230b2
 8010f1c:	080230c6 	.word	0x080230c6
 8010f20:	080230ec 	.word	0x080230ec
 8010f24:	08023129 	.word	0x08023129
 8010f28:	0802310a 	.word	0x0802310a
 8010f2c:	0802314f 	.word	0x0802314f
 8010f30:	080231a3 	.word	0x080231a3
 8010f34:	080231c3 	.word	0x080231c3
 8010f38:	080231d8 	.word	0x080231d8

08010f3c <APP_UserEvtRx>:
{
 8010f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hci_pckt->type == (uint8_t)HCI_EVENT_PKT) {
 8010f3e:	7803      	ldrb	r3, [r0, #0]
 8010f40:	2b04      	cmp	r3, #4
{
 8010f42:	4604      	mov	r4, r0
  if(hci_pckt->type == (uint8_t)HCI_EVENT_PKT) {
 8010f44:	d111      	bne.n	8010f6a <APP_UserEvtRx+0x2e>
    if(event_pckt->evt == (uint8_t)EVT_LE_META_EVENT) {
 8010f46:	7843      	ldrb	r3, [r0, #1]
 8010f48:	2b3e      	cmp	r3, #62	; 0x3e
 8010f4a:	d10f      	bne.n	8010f6c <APP_UserEvtRx+0x30>
 8010f4c:	4d19      	ldr	r5, [pc, #100]	; (8010fb4 <APP_UserEvtRx+0x78>)
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++) {
 8010f4e:	2600      	movs	r6, #0
          hci_le_meta_events_table[i].process((void *)evt->data);
 8010f50:	1d07      	adds	r7, r0, #4
        if (evt->subevent == hci_le_meta_events_table[i].evt_code) {
 8010f52:	78e2      	ldrb	r2, [r4, #3]
 8010f54:	882b      	ldrh	r3, [r5, #0]
 8010f56:	429a      	cmp	r2, r3
 8010f58:	d102      	bne.n	8010f60 <APP_UserEvtRx+0x24>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8010f5a:	686b      	ldr	r3, [r5, #4]
 8010f5c:	4638      	mov	r0, r7
 8010f5e:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++) {
 8010f60:	3601      	adds	r6, #1
 8010f62:	2e0a      	cmp	r6, #10
 8010f64:	f105 0508 	add.w	r5, r5, #8
 8010f68:	d1f3      	bne.n	8010f52 <APP_UserEvtRx+0x16>
}
 8010f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(event_pckt->evt == (uint8_t)EVT_VENDOR) {
 8010f6c:	2bff      	cmp	r3, #255	; 0xff
 8010f6e:	d110      	bne.n	8010f92 <APP_UserEvtRx+0x56>
 8010f70:	4d11      	ldr	r5, [pc, #68]	; (8010fb8 <APP_UserEvtRx+0x7c>)
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++) {
 8010f72:	2600      	movs	r6, #0
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8010f74:	1d47      	adds	r7, r0, #5
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code) {
 8010f76:	f8b4 2003 	ldrh.w	r2, [r4, #3]
 8010f7a:	882b      	ldrh	r3, [r5, #0]
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d102      	bne.n	8010f86 <APP_UserEvtRx+0x4a>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8010f80:	686b      	ldr	r3, [r5, #4]
 8010f82:	4638      	mov	r0, r7
 8010f84:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++) {
 8010f86:	3601      	adds	r6, #1
 8010f88:	2e2b      	cmp	r6, #43	; 0x2b
 8010f8a:	f105 0508 	add.w	r5, r5, #8
 8010f8e:	d1f2      	bne.n	8010f76 <APP_UserEvtRx+0x3a>
 8010f90:	e7eb      	b.n	8010f6a <APP_UserEvtRx+0x2e>
 8010f92:	4d0a      	ldr	r5, [pc, #40]	; (8010fbc <APP_UserEvtRx+0x80>)
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++) {
 8010f94:	2600      	movs	r6, #0
          hci_events_table[i].process((void *)event_pckt->data);
 8010f96:	1cc7      	adds	r7, r0, #3
        if (event_pckt->evt == hci_events_table[i].evt_code) {
 8010f98:	7862      	ldrb	r2, [r4, #1]
 8010f9a:	882b      	ldrh	r3, [r5, #0]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d102      	bne.n	8010fa6 <APP_UserEvtRx+0x6a>
          hci_events_table[i].process((void *)event_pckt->data);
 8010fa0:	686b      	ldr	r3, [r5, #4]
 8010fa2:	4638      	mov	r0, r7
 8010fa4:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++) {
 8010fa6:	3601      	adds	r6, #1
 8010fa8:	2e07      	cmp	r6, #7
 8010faa:	f105 0508 	add.w	r5, r5, #8
 8010fae:	d1f3      	bne.n	8010f98 <APP_UserEvtRx+0x5c>
 8010fb0:	e7db      	b.n	8010f6a <APP_UserEvtRx+0x2e>
 8010fb2:	bf00      	nop
 8010fb4:	08021a4c 	.word	0x08021a4c
 8010fb8:	080218f4 	.word	0x080218f4
 8010fbc:	08021a9c 	.word	0x08021a9c

08010fc0 <ClearCustomCommandsList>:
void ClearCustomCommandsList(void) {
 8010fc0:	b538      	push	{r3, r4, r5, lr}
  if(CustomCommands!=NULL) {
 8010fc2:	4c07      	ldr	r4, [pc, #28]	; (8010fe0 <ClearCustomCommandsList+0x20>)
 8010fc4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8010fc6:	b14d      	cbz	r5, 8010fdc <ClearCustomCommandsList+0x1c>
    if(CustomCommands->NextCommand!=NULL) {
 8010fc8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8010fca:	b108      	cbz	r0, 8010fd0 <ClearCustomCommandsList+0x10>
      ClearSingleCommand((BLE_ExtCustomCommand_t *)CustomCommands->NextCommand);
 8010fcc:	f7ff fe90 	bl	8010cf0 <ClearSingleCommand>
    BLE_FreeFunction(CustomCommands);
 8010fd0:	4628      	mov	r0, r5
 8010fd2:	f00b f917 	bl	801c204 <free>
    LastCustomCommand = CustomCommands = NULL;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
}
 8010fdc:	bd38      	pop	{r3, r4, r5, pc}
 8010fde:	bf00      	nop
 8010fe0:	2000296c 	.word	0x2000296c

08010fe4 <AddCustomCommand>:
{
 8010fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fe8:	b0c1      	sub	sp, #260	; 0x104
 8010fea:	4606      	mov	r6, r0
 8010fec:	460d      	mov	r5, r1
 8010fee:	4691      	mov	r9, r2
 8010ff0:	4698      	mov	r8, r3
  if(strlen(CommandName) > BLE_MANAGER_CUSTOM_COMMAND_MAX_LEGHT) {
 8010ff2:	f7f3 f96f 	bl	80042d4 <strlen>
 8010ff6:	2820      	cmp	r0, #32
{
 8010ff8:	f8dd b130 	ldr.w	fp, [sp, #304]	; 0x130
  if(strlen(CommandName) > BLE_MANAGER_CUSTOM_COMMAND_MAX_LEGHT) {
 8010ffc:	4607      	mov	r7, r0
 8010ffe:	f200 8082 	bhi.w	8011106 <AddCustomCommand+0x122>
      if(strncmp(StandardExtConfigCommands[Index].CommandString,CommandName,strlen(CommandName)) == 0) {
 8011002:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 80111d8 <AddCustomCommand+0x1f4>
 8011006:	2400      	movs	r4, #0
 8011008:	eb0a 03c4 	add.w	r3, sl, r4, lsl #3
 801100c:	463a      	mov	r2, r7
 801100e:	68d8      	ldr	r0, [r3, #12]
 8011010:	4631      	mov	r1, r6
 8011012:	f00b ff09 	bl	801ce28 <strncmp>
    for(Index=((uint8_t)EXT_CONFIG_COM_READ_COMMAND); ((Index<((uint8_t)EXT_CONFIG_COMMAND_NUMBER)) && (Valid==1U)); Index++) {
 8011016:	2c12      	cmp	r4, #18
 8011018:	d005      	beq.n	8011026 <AddCustomCommand+0x42>
 801101a:	3401      	adds	r4, #1
 801101c:	2800      	cmp	r0, #0
 801101e:	d1f3      	bne.n	8011008 <AddCustomCommand+0x24>
}
 8011020:	b041      	add	sp, #260	; 0x104
 8011022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(Valid) {
 8011026:	2800      	cmp	r0, #0
 8011028:	d0fa      	beq.n	8011020 <AddCustomCommand+0x3c>
    tempJSON1 = json_value_init_object();
 801102a:	f003 fe89 	bl	8014d40 <json_value_init_object>
 801102e:	4682      	mov	sl, r0
    tempJSON1_Obj = json_value_get_object(tempJSON1);
 8011030:	f003 fc0d 	bl	801484e <json_value_get_object>
    json_object_dotset_string(tempJSON1_Obj, "Name", CommandName);
 8011034:	4958      	ldr	r1, [pc, #352]	; (8011198 <AddCustomCommand+0x1b4>)
 8011036:	4632      	mov	r2, r6
    tempJSON1_Obj = json_value_get_object(tempJSON1);
 8011038:	4604      	mov	r4, r0
    json_object_dotset_string(tempJSON1_Obj, "Name", CommandName);
 801103a:	f004 fa6b 	bl	8015514 <json_object_dotset_string>
    switch(CommandType) {
 801103e:	2d05      	cmp	r5, #5
 8011040:	d809      	bhi.n	8011056 <AddCustomCommand+0x72>
 8011042:	e8df f005 	tbb	[pc, r5]
 8011046:	6203      	.short	0x6203
 8011048:	6a686664 	.word	0x6a686664
      json_object_dotset_string(tempJSON1_Obj, "Type", "Void");
 801104c:	4a53      	ldr	r2, [pc, #332]	; (801119c <AddCustomCommand+0x1b8>)
      json_object_dotset_string(tempJSON1_Obj, "Type", "EnumString");
 801104e:	4954      	ldr	r1, [pc, #336]	; (80111a0 <AddCustomCommand+0x1bc>)
 8011050:	4620      	mov	r0, r4
 8011052:	f004 fa5f 	bl	8015514 <json_object_dotset_string>
    if(ShortDesc!=NULL) {
 8011056:	f1bb 0f00 	cmp.w	fp, #0
 801105a:	d004      	beq.n	8011066 <AddCustomCommand+0x82>
      json_object_dotset_string(tempJSON1_Obj, "Desc", ShortDesc);
 801105c:	4951      	ldr	r1, [pc, #324]	; (80111a4 <AddCustomCommand+0x1c0>)
 801105e:	465a      	mov	r2, fp
 8011060:	4620      	mov	r0, r4
 8011062:	f004 fa57 	bl	8015514 <json_object_dotset_string>
    if(Min!= (int32_t)BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN) {
 8011066:	f8df b174 	ldr.w	fp, [pc, #372]	; 80111dc <AddCustomCommand+0x1f8>
 801106a:	45d9      	cmp	r9, fp
 801106c:	d008      	beq.n	8011080 <AddCustomCommand+0x9c>
      json_object_dotset_number(tempJSON1_Obj, "Min", (double)Min);
 801106e:	4648      	mov	r0, r9
 8011070:	f7f3 fae0 	bl	8004634 <__aeabi_i2d>
 8011074:	ec41 0b10 	vmov	d0, r0, r1
 8011078:	494b      	ldr	r1, [pc, #300]	; (80111a8 <AddCustomCommand+0x1c4>)
 801107a:	4620      	mov	r0, r4
 801107c:	f004 fa65 	bl	801554a <json_object_dotset_number>
    if(Max!= (int32_t)BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN) {
 8011080:	45d8      	cmp	r8, fp
 8011082:	d008      	beq.n	8011096 <AddCustomCommand+0xb2>
      json_object_dotset_number(tempJSON1_Obj, "Max", (double)Max);
 8011084:	4640      	mov	r0, r8
 8011086:	f7f3 fad5 	bl	8004634 <__aeabi_i2d>
 801108a:	ec41 0b10 	vmov	d0, r0, r1
 801108e:	4947      	ldr	r1, [pc, #284]	; (80111ac <AddCustomCommand+0x1c8>)
 8011090:	4620      	mov	r0, r4
 8011092:	f004 fa5a 	bl	801554a <json_object_dotset_number>
    if((ValidValuesInt!=NULL) && (CommandType==BLE_CUSTOM_COMMAND_ENUM_INTEGER)) {
 8011096:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8011098:	2b00      	cmp	r3, #0
 801109a:	d048      	beq.n	801112e <AddCustomCommand+0x14a>
 801109c:	2d04      	cmp	r5, #4
 801109e:	d146      	bne.n	801112e <AddCustomCommand+0x14a>
      JSON_Value *tempJSONarray = json_value_init_object();
 80110a0:	f003 fe4e 	bl	8014d40 <json_value_init_object>
 80110a4:	4680      	mov	r8, r0
      JSON_Array *JSON_SensorArray2 = json_value_get_array(tempJSONarray);
 80110a6:	f003 fc01 	bl	80148ac <json_value_get_array>
      json_object_dotset_value(tempJSON1_Obj, "IntegerValues", json_value_init_array());
 80110aa:	f003 fe69 	bl	8014d80 <json_value_init_array>
 80110ae:	4940      	ldr	r1, [pc, #256]	; (80111b0 <AddCustomCommand+0x1cc>)
 80110b0:	4602      	mov	r2, r0
 80110b2:	4620      	mov	r0, r4
 80110b4:	f004 f9e1 	bl	801547a <json_object_dotset_value>
      JSON_SensorArray2 = json_object_dotget_array(tempJSON1_Obj, "IntegerValues");
 80110b8:	4620      	mov	r0, r4
 80110ba:	493d      	ldr	r1, [pc, #244]	; (80111b0 <AddCustomCommand+0x1cc>)
 80110bc:	f003 fbfe 	bl	80148bc <json_object_dotget_array>
 80110c0:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 80110c2:	4604      	mov	r4, r0
      while(ValidValuesInt[counter]!=(int32_t)BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN) {
 80110c4:	1f1f      	subs	r7, r3, #4
 80110c6:	f857 0f04 	ldr.w	r0, [r7, #4]!
 80110ca:	4558      	cmp	r0, fp
 80110cc:	d127      	bne.n	801111e <AddCustomCommand+0x13a>
      json_value_free(tempJSONarray);
 80110ce:	4640      	mov	r0, r8
      json_value_free(tempJSONarray);
 80110d0:	f003 fd92 	bl	8014bf8 <json_value_free>
    if(CustomCommands==NULL) {
 80110d4:	4f37      	ldr	r7, [pc, #220]	; (80111b4 <AddCustomCommand+0x1d0>)
    json_array_append_value(JSON_SensorArray,tempJSON1);
 80110d6:	984d      	ldr	r0, [sp, #308]	; 0x134
 80110d8:	4651      	mov	r1, sl
 80110da:	f004 f967 	bl	80153ac <json_array_append_value>
    if(CustomCommands==NULL) {
 80110de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d151      	bne.n	8011188 <AddCustomCommand+0x1a4>
      CustomCommands=(BLE_ExtCustomCommand_t*)BLE_MallocFunction(sizeof(BLE_ExtCustomCommand_t));
 80110e4:	2028      	movs	r0, #40	; 0x28
 80110e6:	f00b f885 	bl	801c1f4 <malloc>
 80110ea:	6378      	str	r0, [r7, #52]	; 0x34
      if(CustomCommands==NULL) {
 80110ec:	2800      	cmp	r0, #0
 80110ee:	d13f      	bne.n	8011170 <AddCustomCommand+0x18c>
        BLE_MANAGER_PRINTF("Errror: Mem calloc error: %d@%s\r\n",__LINE__,__FILE__);
 80110f0:	4931      	ldr	r1, [pc, #196]	; (80111b8 <AddCustomCommand+0x1d4>)
 80110f2:	4b32      	ldr	r3, [pc, #200]	; (80111bc <AddCustomCommand+0x1d8>)
 80110f4:	f240 5281 	movw	r2, #1409	; 0x581
 80110f8:	4668      	mov	r0, sp
 80110fa:	f00b fe1d 	bl	801cd38 <siprintf>
 80110fe:	21ac      	movs	r1, #172	; 0xac
 8011100:	4668      	mov	r0, sp
 8011102:	f008 fc53 	bl	80199ac <CDC_Fill_Buffer>
    Valid=0U;
 8011106:	2000      	movs	r0, #0
 8011108:	e78a      	b.n	8011020 <AddCustomCommand+0x3c>
      json_object_dotset_string(tempJSON1_Obj, "Type", "Integer");
 801110a:	4a2d      	ldr	r2, [pc, #180]	; (80111c0 <AddCustomCommand+0x1dc>)
 801110c:	e79f      	b.n	801104e <AddCustomCommand+0x6a>
      json_object_dotset_string(tempJSON1_Obj, "Type", "Boolean");
 801110e:	4a2d      	ldr	r2, [pc, #180]	; (80111c4 <AddCustomCommand+0x1e0>)
 8011110:	e79d      	b.n	801104e <AddCustomCommand+0x6a>
      json_object_dotset_string(tempJSON1_Obj, "Type", "String");
 8011112:	4a2d      	ldr	r2, [pc, #180]	; (80111c8 <AddCustomCommand+0x1e4>)
 8011114:	e79b      	b.n	801104e <AddCustomCommand+0x6a>
      json_object_dotset_string(tempJSON1_Obj, "Type", "EnumInteger");
 8011116:	4a2d      	ldr	r2, [pc, #180]	; (80111cc <AddCustomCommand+0x1e8>)
 8011118:	e799      	b.n	801104e <AddCustomCommand+0x6a>
      json_object_dotset_string(tempJSON1_Obj, "Type", "EnumString");
 801111a:	4a2d      	ldr	r2, [pc, #180]	; (80111d0 <AddCustomCommand+0x1ec>)
 801111c:	e797      	b.n	801104e <AddCustomCommand+0x6a>
        json_array_append_number(JSON_SensorArray2, (double)(ValidValuesInt[counter]));
 801111e:	f7f3 fa89 	bl	8004634 <__aeabi_i2d>
 8011122:	ec41 0b10 	vmov	d0, r0, r1
 8011126:	4620      	mov	r0, r4
 8011128:	f004 f961 	bl	80153ee <json_array_append_number>
        counter++;
 801112c:	e7cb      	b.n	80110c6 <AddCustomCommand+0xe2>
    if((ValidValuesString!=NULL) && (CommandType==BLE_CUSTOM_COMMAND_ENUM_STRING)) {
 801112e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8011130:	2b00      	cmp	r3, #0
 8011132:	d0cf      	beq.n	80110d4 <AddCustomCommand+0xf0>
 8011134:	2d05      	cmp	r5, #5
 8011136:	d1cd      	bne.n	80110d4 <AddCustomCommand+0xf0>
      JSON_Value *tempJSONarray = json_value_init_object();
 8011138:	f003 fe02 	bl	8014d40 <json_value_init_object>
 801113c:	4607      	mov	r7, r0
      JSON_Array *JSON_SensorArray2 = json_value_get_array(tempJSONarray);
 801113e:	f003 fbb5 	bl	80148ac <json_value_get_array>
      json_object_dotset_value(tempJSON1_Obj, "StringValues", json_value_init_array());
 8011142:	f003 fe1d 	bl	8014d80 <json_value_init_array>
 8011146:	4923      	ldr	r1, [pc, #140]	; (80111d4 <AddCustomCommand+0x1f0>)
 8011148:	4602      	mov	r2, r0
 801114a:	4620      	mov	r0, r4
 801114c:	f004 f995 	bl	801547a <json_object_dotset_value>
      JSON_SensorArray2 = json_object_dotget_array(tempJSON1_Obj, "StringValues");
 8011150:	4620      	mov	r0, r4
 8011152:	4920      	ldr	r1, [pc, #128]	; (80111d4 <AddCustomCommand+0x1f0>)
 8011154:	f003 fbb2 	bl	80148bc <json_object_dotget_array>
 8011158:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 801115a:	4680      	mov	r8, r0
      while(ValidValuesString[counter]!=NULL) {
 801115c:	1f1c      	subs	r4, r3, #4
 801115e:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8011162:	b909      	cbnz	r1, 8011168 <AddCustomCommand+0x184>
      json_value_free(tempJSONarray);
 8011164:	4638      	mov	r0, r7
 8011166:	e7b3      	b.n	80110d0 <AddCustomCommand+0xec>
        json_array_append_string(JSON_SensorArray2, (char const*)ValidValuesString[counter]);
 8011168:	4640      	mov	r0, r8
 801116a:	f004 f928 	bl	80153be <json_array_append_string>
        counter++;
 801116e:	e7f6      	b.n	801115e <AddCustomCommand+0x17a>
      LastCustomCommand = CustomCommands;
 8011170:	63b8      	str	r0, [r7, #56]	; 0x38
    LastCustomCommand->CommandType = CommandType;
 8011172:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    sprintf(LastCustomCommand->CommandName,"%s",CommandName);
 8011174:	4631      	mov	r1, r6
    LastCustomCommand->CommandType = CommandType;
 8011176:	f880 5020 	strb.w	r5, [r0, #32]
    sprintf(LastCustomCommand->CommandName,"%s",CommandName);
 801117a:	f00b fe4d 	bl	801ce18 <strcpy>
    LastCustomCommand->NextCommand = NULL;
 801117e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011180:	2200      	movs	r2, #0
 8011182:	625a      	str	r2, [r3, #36]	; 0x24
 8011184:	2001      	movs	r0, #1
 8011186:	e74b      	b.n	8011020 <AddCustomCommand+0x3c>
      LastCustomCommand->NextCommand = (void *) BLE_MallocFunction( sizeof(BLE_ExtCustomCommand_t));
 8011188:	2028      	movs	r0, #40	; 0x28
 801118a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 801118c:	f00b f832 	bl	801c1f4 <malloc>
 8011190:	6260      	str	r0, [r4, #36]	; 0x24
      LastCustomCommand = (BLE_ExtCustomCommand_t*) LastCustomCommand->NextCommand;
 8011192:	63b8      	str	r0, [r7, #56]	; 0x38
 8011194:	e7ed      	b.n	8011172 <AddCustomCommand+0x18e>
 8011196:	bf00      	nop
 8011198:	080236cb 	.word	0x080236cb
 801119c:	080231ed 	.word	0x080231ed
 80111a0:	080233b6 	.word	0x080233b6
 80111a4:	08023211 	.word	0x08023211
 80111a8:	08023216 	.word	0x08023216
 80111ac:	0802321a 	.word	0x0802321a
 80111b0:	0802321e 	.word	0x0802321e
 80111b4:	2000296c 	.word	0x2000296c
 80111b8:	080232c5 	.word	0x080232c5
 80111bc:	08023239 	.word	0x08023239
 80111c0:	08024013 	.word	0x08024013
 80111c4:	080231f2 	.word	0x080231f2
 80111c8:	0802405c 	.word	0x0802405c
 80111cc:	080231fa 	.word	0x080231fa
 80111d0:	08023206 	.word	0x08023206
 80111d4:	0802322c 	.word	0x0802322c
 80111d8:	08021ad4 	.word	0x08021ad4
 80111dc:	deadbeef 	.word	0xdeadbeef

080111e0 <safe_aci_gatt_update_char_value>:
{
 80111e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (breath==0){
 80111e2:	4c09      	ldr	r4, [pc, #36]	; (8011208 <safe_aci_gatt_update_char_value+0x28>)
 80111e4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80111e6:	b96d      	cbnz	r5, 8011204 <safe_aci_gatt_update_char_value+0x24>
    ret = aci_gatt_update_char_value(BleCharPointer->Service_Handle,BleCharPointer->attr_handle,charValOffset,charValueLen,charValue);
 80111e8:	9300      	str	r3, [sp, #0]
 80111ea:	4613      	mov	r3, r2
 80111ec:	460a      	mov	r2, r1
 80111ee:	8b41      	ldrh	r1, [r0, #26]
 80111f0:	8b80      	ldrh	r0, [r0, #28]
 80111f2:	f7fd fc7f 	bl	800eaf4 <aci_gatt_update_char_value>
    if (ret != BLE_STATUS_SUCCESS){
 80111f6:	b118      	cbz	r0, 8011200 <safe_aci_gatt_update_char_value+0x20>
      if(ret==BLE_STATUS_INSUFFICIENT_RESOURCES){
 80111f8:	2864      	cmp	r0, #100	; 0x64
 80111fa:	d101      	bne.n	8011200 <safe_aci_gatt_update_char_value+0x20>
        breath = 1;
 80111fc:	2301      	movs	r3, #1
 80111fe:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8011200:	b003      	add	sp, #12
 8011202:	bd30      	pop	{r4, r5, pc}
  tBleStatus ret = BLE_STATUS_INSUFFICIENT_RESOURCES;
 8011204:	2064      	movs	r0, #100	; 0x64
 8011206:	e7fb      	b.n	8011200 <safe_aci_gatt_update_char_value+0x20>
 8011208:	2000296c 	.word	0x2000296c

0801120c <UpdateTermStdErr>:
{
 801120c:	b500      	push	{lr}
 801120e:	4603      	mov	r3, r0
 8011210:	b0c1      	sub	sp, #260	; 0x104
 8011212:	460a      	mov	r2, r1
  if (ACI_GATT_UPDATE_CHAR_VALUE(&BleCharStdErr, 0, length , data) != BLE_STATUS_SUCCESS) {
 8011214:	4808      	ldr	r0, [pc, #32]	; (8011238 <UpdateTermStdErr+0x2c>)
 8011216:	2100      	movs	r1, #0
 8011218:	f7ff ffe2 	bl	80111e0 <safe_aci_gatt_update_char_value>
 801121c:	b140      	cbz	r0, 8011230 <UpdateTermStdErr+0x24>
    BLE_MANAGER_PRINTF("Error: Updating Stdout Char\r\n");
 801121e:	4907      	ldr	r1, [pc, #28]	; (801123c <UpdateTermStdErr+0x30>)
 8011220:	4668      	mov	r0, sp
 8011222:	f00b fdf9 	bl	801ce18 <strcpy>
 8011226:	211d      	movs	r1, #29
 8011228:	4668      	mov	r0, sp
 801122a:	f008 fbbf 	bl	80199ac <CDC_Fill_Buffer>
    return BLE_STATUS_ERROR;
 801122e:	2047      	movs	r0, #71	; 0x47
}
 8011230:	b041      	add	sp, #260	; 0x104
 8011232:	f85d fb04 	ldr.w	pc, [sp], #4
 8011236:	bf00      	nop
 8011238:	200029ac 	.word	0x200029ac
 801123c:	080233c8 	.word	0x080233c8

08011240 <UpdateTermStdOut>:
{
 8011240:	b500      	push	{lr}
 8011242:	4603      	mov	r3, r0
 8011244:	b0c1      	sub	sp, #260	; 0x104
 8011246:	460a      	mov	r2, r1
  if (ACI_GATT_UPDATE_CHAR_VALUE(&BleCharStdOut, 0, length , data) != BLE_STATUS_SUCCESS) {
 8011248:	4808      	ldr	r0, [pc, #32]	; (801126c <UpdateTermStdOut+0x2c>)
 801124a:	2100      	movs	r1, #0
 801124c:	f7ff ffc8 	bl	80111e0 <safe_aci_gatt_update_char_value>
 8011250:	b140      	cbz	r0, 8011264 <UpdateTermStdOut+0x24>
    BLE_MANAGER_PRINTF("Error: Updating Stdout Char\r\n");
 8011252:	4907      	ldr	r1, [pc, #28]	; (8011270 <UpdateTermStdOut+0x30>)
 8011254:	4668      	mov	r0, sp
 8011256:	f00b fddf 	bl	801ce18 <strcpy>
 801125a:	211d      	movs	r1, #29
 801125c:	4668      	mov	r0, sp
 801125e:	f008 fba5 	bl	80199ac <CDC_Fill_Buffer>
    return BLE_STATUS_ERROR;
 8011262:	2047      	movs	r0, #71	; 0x47
}
 8011264:	b041      	add	sp, #260	; 0x104
 8011266:	f85d fb04 	ldr.w	pc, [sp], #4
 801126a:	bf00      	nop
 801126c:	200029d8 	.word	0x200029d8
 8011270:	080233c8 	.word	0x080233c8

08011274 <Read_Request_StdErr>:
  ret = ACI_GATT_UPDATE_CHAR_VALUE(BleCharPointer, 0, LastStderrLen , LastStderrBuffer);
 8011274:	4a03      	ldr	r2, [pc, #12]	; (8011284 <Read_Request_StdErr+0x10>)
 8011276:	2100      	movs	r1, #0
 8011278:	f102 0398 	add.w	r3, r2, #152	; 0x98
 801127c:	f892 2133 	ldrb.w	r2, [r2, #307]	; 0x133
 8011280:	f7ff bfae 	b.w	80111e0 <safe_aci_gatt_update_char_value>
 8011284:	2000296c 	.word	0x2000296c

08011288 <aci_gatt_tx_pool_available_event>:
  breath=0;
 8011288:	4b03      	ldr	r3, [pc, #12]	; (8011298 <aci_gatt_tx_pool_available_event+0x10>)
 801128a:	2200      	movs	r2, #0
 801128c:	63da      	str	r2, [r3, #60]	; 0x3c
  if(CustomAciGattTxPoolAvailableEvent != NULL) {
 801128e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8011292:	b103      	cbz	r3, 8011296 <aci_gatt_tx_pool_available_event+0xe>
    CustomAciGattTxPoolAvailableEvent();
 8011294:	4718      	bx	r3
}
 8011296:	4770      	bx	lr
 8011298:	2000296c 	.word	0x2000296c

0801129c <Stderr_Update>:
{
 801129c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DataToSend = (length>MaxBLECharLen) ?  MaxBLECharLen : length;
 80112a0:	4c1e      	ldr	r4, [pc, #120]	; (801131c <Stderr_Update+0x80>)
 80112a2:	f894 5138 	ldrb.w	r5, [r4, #312]	; 0x138
 80112a6:	428d      	cmp	r5, r1
 80112a8:	bf28      	it	cs
 80112aa:	460d      	movcs	r5, r1
  memcpy(LastStderrBuffer,data,DataToSend);
 80112ac:	462a      	mov	r2, r5
{
 80112ae:	4680      	mov	r8, r0
 80112b0:	460e      	mov	r6, r1
  memcpy(LastStderrBuffer,data,DataToSend);
 80112b2:	4601      	mov	r1, r0
 80112b4:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80112b8:	f00a ffac 	bl	801c214 <memcpy>
  if(UpdateTermStdErr(data,DataToSend)!=BLE_STATUS_SUCCESS) {
 80112bc:	4629      	mov	r1, r5
 80112be:	4640      	mov	r0, r8
  LastStderrLen = DataToSend;
 80112c0:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
  if(UpdateTermStdErr(data,DataToSend)!=BLE_STATUS_SUCCESS) {
 80112c4:	f7ff ffa2 	bl	801120c <UpdateTermStdErr>
 80112c8:	4605      	mov	r5, r0
 80112ca:	b118      	cbz	r0, 80112d4 <Stderr_Update+0x38>
    return BLE_STATUS_ERROR;
 80112cc:	2547      	movs	r5, #71	; 0x47
}
 80112ce:	4628      	mov	r0, r5
 80112d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  Offset = MaxBLECharLen;
 80112d4:	f894 7138 	ldrb.w	r7, [r4, #312]	; 0x138
    memcpy(LastStderrBuffer,data+Offset,DataToSend);
 80112d8:	f104 0a98 	add.w	sl, r4, #152	; 0x98
  for(; Offset<length; Offset +=MaxBLECharLen){
 80112dc:	42b7      	cmp	r7, r6
 80112de:	d2f6      	bcs.n	80112ce <Stderr_Update+0x32>
    BLE_MANAGER_DELAY(20);
 80112e0:	2014      	movs	r0, #20
 80112e2:	f007 fc81 	bl	8018be8 <HAL_Delay>
    DataToSend = (DataToSend>MaxBLECharLen) ?  MaxBLECharLen : DataToSend;
 80112e6:	f894 9138 	ldrb.w	r9, [r4, #312]	; 0x138
    DataToSend = (length-Offset);
 80112ea:	1bf2      	subs	r2, r6, r7
 80112ec:	b2d2      	uxtb	r2, r2
    DataToSend = (DataToSend>MaxBLECharLen) ?  MaxBLECharLen : DataToSend;
 80112ee:	4591      	cmp	r9, r2
 80112f0:	bf28      	it	cs
 80112f2:	4691      	movcs	r9, r2
    memcpy(LastStderrBuffer,data+Offset,DataToSend);
 80112f4:	eb08 0b07 	add.w	fp, r8, r7
 80112f8:	4659      	mov	r1, fp
 80112fa:	464a      	mov	r2, r9
 80112fc:	4650      	mov	r0, sl
 80112fe:	f00a ff89 	bl	801c214 <memcpy>
    if(UpdateTermStdErr(data+Offset,DataToSend)!=BLE_STATUS_SUCCESS) {
 8011302:	4649      	mov	r1, r9
 8011304:	4658      	mov	r0, fp
    LastStderrLen = DataToSend;
 8011306:	f884 9133 	strb.w	r9, [r4, #307]	; 0x133
    if(UpdateTermStdErr(data+Offset,DataToSend)!=BLE_STATUS_SUCCESS) {
 801130a:	f7ff ff7f 	bl	801120c <UpdateTermStdErr>
 801130e:	2800      	cmp	r0, #0
 8011310:	d1dc      	bne.n	80112cc <Stderr_Update+0x30>
  for(; Offset<length; Offset +=MaxBLECharLen){
 8011312:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8011316:	441f      	add	r7, r3
 8011318:	b2ff      	uxtb	r7, r7
 801131a:	e7df      	b.n	80112dc <Stderr_Update+0x40>
 801131c:	2000296c 	.word	0x2000296c

08011320 <Read_Request_Term>:
{
 8011320:	b510      	push	{r4, lr}
  ret = ACI_GATT_UPDATE_CHAR_VALUE(BleCharPointer, 0, LastTermLen , LastTermBuffer);
 8011322:	4c13      	ldr	r4, [pc, #76]	; (8011370 <Read_Request_Term+0x50>)
{
 8011324:	b0c0      	sub	sp, #256	; 0x100
  ret = ACI_GATT_UPDATE_CHAR_VALUE(BleCharPointer, 0, LastTermLen , LastTermBuffer);
 8011326:	f894 21d4 	ldrb.w	r2, [r4, #468]	; 0x1d4
 801132a:	f204 1339 	addw	r3, r4, #313	; 0x139
 801132e:	2100      	movs	r1, #0
 8011330:	f7ff ff56 	bl	80111e0 <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS) {
 8011334:	b1c8      	cbz	r0, 801136a <Read_Request_Term+0x4a>
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 8011336:	7a23      	ldrb	r3, [r4, #8]
 8011338:	2b01      	cmp	r3, #1
 801133a:	d10e      	bne.n	801135a <Read_Request_Term+0x3a>
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Stdout Char\n");
 801133c:	490d      	ldr	r1, [pc, #52]	; (8011374 <Read_Request_Term+0x54>)
 801133e:	f204 10d5 	addw	r0, r4, #469	; 0x1d5
 8011342:	f00b fd69 	bl	801ce18 <strcpy>
 8011346:	211b      	movs	r1, #27
      Stderr_Update(BufferToWrite,BytesToWrite);
 8011348:	f204 10d5 	addw	r0, r4, #469	; 0x1d5
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Stdout Char\n");
 801134c:	f884 12d5 	strb.w	r1, [r4, #725]	; 0x2d5
}
 8011350:	b040      	add	sp, #256	; 0x100
 8011352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      Stderr_Update(BufferToWrite,BytesToWrite);
 8011356:	f7ff bfa1 	b.w	801129c <Stderr_Update>
      BLE_MANAGER_PRINTF("Error: Updating Stdout Char\r\n");
 801135a:	4907      	ldr	r1, [pc, #28]	; (8011378 <Read_Request_Term+0x58>)
 801135c:	4668      	mov	r0, sp
 801135e:	f00b fd5b 	bl	801ce18 <strcpy>
 8011362:	211d      	movs	r1, #29
 8011364:	4668      	mov	r0, sp
 8011366:	f008 fb21 	bl	80199ac <CDC_Fill_Buffer>
}
 801136a:	b040      	add	sp, #256	; 0x100
 801136c:	bd10      	pop	{r4, pc}
 801136e:	bf00      	nop
 8011370:	2000296c 	.word	0x2000296c
 8011374:	080233e6 	.word	0x080233e6
 8011378:	080233c8 	.word	0x080233c8

0801137c <Term_Update>:
{
 801137c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DataToSend = (length>MaxBLECharLen) ?  MaxBLECharLen : length;
 8011380:	4c1e      	ldr	r4, [pc, #120]	; (80113fc <Term_Update+0x80>)
 8011382:	f894 5138 	ldrb.w	r5, [r4, #312]	; 0x138
 8011386:	428d      	cmp	r5, r1
 8011388:	bf28      	it	cs
 801138a:	460d      	movcs	r5, r1
  memcpy(LastTermBuffer,data,DataToSend);
 801138c:	462a      	mov	r2, r5
{
 801138e:	4680      	mov	r8, r0
 8011390:	460e      	mov	r6, r1
  memcpy(LastTermBuffer,data,DataToSend);
 8011392:	4601      	mov	r1, r0
 8011394:	f204 1039 	addw	r0, r4, #313	; 0x139
 8011398:	f00a ff3c 	bl	801c214 <memcpy>
  if(UpdateTermStdOut(data,DataToSend)!=BLE_STATUS_SUCCESS) {
 801139c:	4629      	mov	r1, r5
 801139e:	4640      	mov	r0, r8
  LastTermLen = DataToSend;
 80113a0:	f884 51d4 	strb.w	r5, [r4, #468]	; 0x1d4
  if(UpdateTermStdOut(data,DataToSend)!=BLE_STATUS_SUCCESS) {
 80113a4:	f7ff ff4c 	bl	8011240 <UpdateTermStdOut>
 80113a8:	4605      	mov	r5, r0
 80113aa:	b118      	cbz	r0, 80113b4 <Term_Update+0x38>
    return BLE_STATUS_ERROR;
 80113ac:	2547      	movs	r5, #71	; 0x47
}
 80113ae:	4628      	mov	r0, r5
 80113b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  Offset = MaxBLECharLen;
 80113b4:	f894 7138 	ldrb.w	r7, [r4, #312]	; 0x138
    memcpy(LastTermBuffer,data+Offset,DataToSend);
 80113b8:	f204 1a39 	addw	sl, r4, #313	; 0x139
  for(; Offset<length; Offset +=MaxBLECharLen){
 80113bc:	42b7      	cmp	r7, r6
 80113be:	d2f6      	bcs.n	80113ae <Term_Update+0x32>
    BLE_MANAGER_DELAY(20);
 80113c0:	2014      	movs	r0, #20
 80113c2:	f007 fc11 	bl	8018be8 <HAL_Delay>
    DataToSend = (DataToSend>MaxBLECharLen) ?  MaxBLECharLen : DataToSend;
 80113c6:	f894 9138 	ldrb.w	r9, [r4, #312]	; 0x138
    DataToSend = (length-Offset);
 80113ca:	1bf2      	subs	r2, r6, r7
 80113cc:	b2d2      	uxtb	r2, r2
    DataToSend = (DataToSend>MaxBLECharLen) ?  MaxBLECharLen : DataToSend;
 80113ce:	4591      	cmp	r9, r2
 80113d0:	bf28      	it	cs
 80113d2:	4691      	movcs	r9, r2
    memcpy(LastTermBuffer,data+Offset,DataToSend);
 80113d4:	eb08 0b07 	add.w	fp, r8, r7
 80113d8:	4659      	mov	r1, fp
 80113da:	464a      	mov	r2, r9
 80113dc:	4650      	mov	r0, sl
 80113de:	f00a ff19 	bl	801c214 <memcpy>
    if(UpdateTermStdOut(data+Offset,DataToSend)!=BLE_STATUS_SUCCESS) {
 80113e2:	4649      	mov	r1, r9
 80113e4:	4658      	mov	r0, fp
    LastTermLen = DataToSend;
 80113e6:	f884 91d4 	strb.w	r9, [r4, #468]	; 0x1d4
    if(UpdateTermStdOut(data+Offset,DataToSend)!=BLE_STATUS_SUCCESS) {
 80113ea:	f7ff ff29 	bl	8011240 <UpdateTermStdOut>
 80113ee:	2800      	cmp	r0, #0
 80113f0:	d1dc      	bne.n	80113ac <Term_Update+0x30>
  for(; Offset<length; Offset +=MaxBLECharLen){
 80113f2:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 80113f6:	441f      	add	r7, r3
 80113f8:	b2ff      	uxtb	r7, r7
 80113fa:	e7df      	b.n	80113bc <Term_Update+0x40>
 80113fc:	2000296c 	.word	0x2000296c

08011400 <Write_Request_Term>:
{
 8011400:	b513      	push	{r0, r1, r4, lr}
 8011402:	4619      	mov	r1, r3
  if(CustomDebugConsoleParsingCallback!=NULL) {
 8011404:	4b09      	ldr	r3, [pc, #36]	; (801142c <Write_Request_Term+0x2c>)
{
 8011406:	9c04      	ldr	r4, [sp, #16]
  if(CustomDebugConsoleParsingCallback!=NULL) {
 8011408:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801140c:	b92b      	cbnz	r3, 801141a <Write_Request_Term+0x1a>
    Term_Update(att_data,data_length);
 801140e:	4620      	mov	r0, r4
}
 8011410:	b002      	add	sp, #8
 8011412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Term_Update(att_data,data_length);
 8011416:	f7ff bfb1 	b.w	801137c <Term_Update>
    SendBackData = CustomDebugConsoleParsingCallback(att_data,data_length);
 801141a:	4620      	mov	r0, r4
 801141c:	9101      	str	r1, [sp, #4]
 801141e:	4798      	blx	r3
  if(SendBackData) {
 8011420:	9901      	ldr	r1, [sp, #4]
 8011422:	2800      	cmp	r0, #0
 8011424:	d1f3      	bne.n	801140e <Write_Request_Term+0xe>
}
 8011426:	b002      	add	sp, #8
 8011428:	bd10      	pop	{r4, pc}
 801142a:	bf00      	nop
 801142c:	2000296c 	.word	0x2000296c

08011430 <setConnectable>:
{
 8011430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  BlueNRG_StackValue.BoardName[0],
 8011434:	4c4f      	ldr	r4, [pc, #316]	; (8011574 <setConnectable+0x144>)
{
 8011436:	b0d2      	sub	sp, #328	; 0x148
  uint8_t local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,
 8011438:	ad09      	add	r5, sp, #36	; 0x24
  BlueNRG_StackValue.BoardName[6]};
 801143a:	7fe3      	ldrb	r3, [r4, #31]
  uint8_t local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,
 801143c:	71eb      	strb	r3, [r5, #7]
  uint8_t manuf_data[ADVERTIZE_DATA_LENGHT] = {
 801143e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8011442:	230f      	movs	r3, #15
  BlueNRG_StackValue.BoardName[1],
 8011444:	7ea7      	ldrb	r7, [r4, #26]
  BlueNRG_StackValue.BoardName[2],
 8011446:	7ee6      	ldrb	r6, [r4, #27]
  uint8_t manuf_data[ADVERTIZE_DATA_LENGHT] = {
 8011448:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 801144c:	23ff      	movs	r3, #255	; 0xff
  BlueNRG_StackValue.BoardName[0],
 801144e:	f894 c019 	ldrb.w	ip, [r4, #25]
  BlueNRG_StackValue.BoardName[4],
 8011452:	7f61      	ldrb	r1, [r4, #29]
  BlueNRG_StackValue.BoardName[5],
 8011454:	7fa2      	ldrb	r2, [r4, #30]
  BlueNRG_StackValue.BoardName[3],
 8011456:	7f20      	ldrb	r0, [r4, #28]
  uint8_t local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,
 8011458:	70af      	strb	r7, [r5, #2]
 801145a:	f04f 0e09 	mov.w	lr, #9
 801145e:	70ee      	strb	r6, [r5, #3]
  uint8_t manuf_data[ADVERTIZE_DATA_LENGHT] = {
 8011460:	f04f 0808 	mov.w	r8, #8
 8011464:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
 8011468:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801146c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
 8011470:	2600      	movs	r6, #0
 8011472:	2330      	movs	r3, #48	; 0x30
 8011474:	2701      	movs	r7, #1
  uint8_t local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,
 8011476:	f885 e000 	strb.w	lr, [r5]
 801147a:	f885 c001 	strb.w	ip, [r5, #1]
 801147e:	7169      	strb	r1, [r5, #5]
 8011480:	71aa      	strb	r2, [r5, #6]
  uint8_t manuf_data[ADVERTIZE_DATA_LENGHT] = {
 8011482:	f88d e02d 	strb.w	lr, [sp, #45]	; 0x2d
 8011486:	f88d c02e 	strb.w	ip, [sp, #46]	; 0x2e
 801148a:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
 801148e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
  uint8_t local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,
 8011492:	7128      	strb	r0, [r5, #4]
  uint8_t manuf_data[ADVERTIZE_DATA_LENGHT] = {
 8011494:	f88d 0031 	strb.w	r0, [sp, #49]	; 0x31
 8011498:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 801149c:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 80114a0:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
 80114a4:	f88d 7039 	strb.w	r7, [sp, #57]	; 0x39
 80114a8:	f88d 803a 	strb.w	r8, [sp, #58]	; 0x3a
 80114ac:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
 80114b0:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 80114b4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80114b8:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80114bc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80114c0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80114c4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80114c8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 80114cc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80114d0:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 80114d4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80114d8:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
  BLE_SetCustomAdvertizeData(manuf_data);
 80114dc:	a80b      	add	r0, sp, #44	; 0x2c
  uint8_t manuf_data[ADVERTIZE_DATA_LENGHT] = {
 80114de:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80114e2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 80114e6:	f88d 603d 	strb.w	r6, [sp, #61]	; 0x3d
 80114ea:	f88d 603e 	strb.w	r6, [sp, #62]	; 0x3e
  BLE_SetCustomAdvertizeData(manuf_data);
 80114ee:	f005 fa95 	bl	8016a1c <BLE_SetCustomAdvertizeData>
  RetStatus = hci_le_set_scan_response_data(0,NULL);
 80114f2:	4631      	mov	r1, r6
 80114f4:	4630      	mov	r0, r6
 80114f6:	f7fd ffcd 	bl	800f494 <hci_le_set_scan_response_data>
  if(RetStatus !=BLE_STATUS_SUCCESS) {
 80114fa:	4601      	mov	r1, r0
 80114fc:	b128      	cbz	r0, 801150a <setConnectable+0xda>
    BLE_MANAGER_PRINTF("Error: hci_le_set_scan_response_data [%x]\r\n",RetStatus);
 80114fe:	491e      	ldr	r1, [pc, #120]	; (8011578 <setConnectable+0x148>)
 8011500:	4602      	mov	r2, r0
    BLE_MANAGER_PRINTF("Error: aci_gap_update_adv_data [%x]\r\n",RetStatus);
 8011502:	a812      	add	r0, sp, #72	; 0x48
 8011504:	f00b fc18 	bl	801cd38 <siprintf>
 8011508:	e015      	b.n	8011536 <setConnectable+0x106>
  if(BlueNRG_StackValue.AdvertisingFilter == ((uint8_t)NO_WHITE_LIST_USE)) {
 801150a:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 801150e:	b9ca      	cbnz	r2, 8011544 <setConnectable+0x114>
    RetStatus = aci_gap_set_discoverable(ADV_IND, 0,0,
 8011510:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8011514:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8011518:	9200      	str	r2, [sp, #0]
 801151a:	4611      	mov	r1, r2
 801151c:	e9cd 8501 	strd	r8, r5, [sp, #4]
 8011520:	463b      	mov	r3, r7
 8011522:	f7fd f809 	bl	800e538 <aci_gap_set_discoverable>
    if(RetStatus !=BLE_STATUS_SUCCESS) {
 8011526:	4602      	mov	r2, r0
 8011528:	b1b0      	cbz	r0, 8011558 <setConnectable+0x128>
      BLE_MANAGER_PRINTF("Error: aci_gap_set_discoverable [%x] Filter=%x\r\n",RetStatus,BlueNRG_StackValue.AdvertisingFilter);
 801152a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 801152e:	4913      	ldr	r1, [pc, #76]	; (801157c <setConnectable+0x14c>)
      BLE_MANAGER_PRINTF("Error: aci_gap_set_undirected_connectable [%x] Filter=%x\r\n",RetStatus,BlueNRG_StackValue.AdvertisingFilter);
 8011530:	a812      	add	r0, sp, #72	; 0x48
 8011532:	f00b fc01 	bl	801cd38 <siprintf>
    BLE_MANAGER_PRINTF("Error: aci_gap_update_adv_data [%x]\r\n",RetStatus);
 8011536:	4601      	mov	r1, r0
    BLE_MANAGER_PRINTF("aci_gap_update_adv_data OK\r\n");
 8011538:	a812      	add	r0, sp, #72	; 0x48
 801153a:	f008 fa37 	bl	80199ac <CDC_Fill_Buffer>
}
 801153e:	b052      	add	sp, #328	; 0x148
 8011540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    RetStatus = aci_gap_set_undirected_connectable(0,0,RANDOM_ADDR, BlueNRG_StackValue.AdvertisingFilter);
 8011544:	4613      	mov	r3, r2
 8011546:	463a      	mov	r2, r7
 8011548:	f7fd f8fc 	bl	800e744 <aci_gap_set_undirected_connectable>
    if(RetStatus !=BLE_STATUS_SUCCESS) {
 801154c:	4602      	mov	r2, r0
 801154e:	b118      	cbz	r0, 8011558 <setConnectable+0x128>
      BLE_MANAGER_PRINTF("Error: aci_gap_set_undirected_connectable [%x] Filter=%x\r\n",RetStatus,BlueNRG_StackValue.AdvertisingFilter);
 8011550:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8011554:	490a      	ldr	r1, [pc, #40]	; (8011580 <setConnectable+0x150>)
 8011556:	e7eb      	b.n	8011530 <setConnectable+0x100>
  RetStatus = aci_gap_update_adv_data(ADVERTIZE_DATA_LENGHT, manuf_data);
 8011558:	a90b      	add	r1, sp, #44	; 0x2c
 801155a:	2019      	movs	r0, #25
 801155c:	f7fd f938 	bl	800e7d0 <aci_gap_update_adv_data>
  if(RetStatus !=BLE_STATUS_SUCCESS) {
 8011560:	4602      	mov	r2, r0
 8011562:	b108      	cbz	r0, 8011568 <setConnectable+0x138>
    BLE_MANAGER_PRINTF("Error: aci_gap_update_adv_data [%x]\r\n",RetStatus);
 8011564:	4907      	ldr	r1, [pc, #28]	; (8011584 <setConnectable+0x154>)
 8011566:	e7cc      	b.n	8011502 <setConnectable+0xd2>
    BLE_MANAGER_PRINTF("aci_gap_update_adv_data OK\r\n");
 8011568:	4907      	ldr	r1, [pc, #28]	; (8011588 <setConnectable+0x158>)
 801156a:	a812      	add	r0, sp, #72	; 0x48
 801156c:	f00b fc54 	bl	801ce18 <strcpy>
 8011570:	211c      	movs	r1, #28
 8011572:	e7e1      	b.n	8011538 <setConnectable+0x108>
 8011574:	2000296c 	.word	0x2000296c
 8011578:	08023427 	.word	0x08023427
 801157c:	08023453 	.word	0x08023453
 8011580:	08023484 	.word	0x08023484
 8011584:	080234bf 	.word	0x080234bf
 8011588:	080234e5 	.word	0x080234e5

0801158c <BleManagerAddChar>:
  if(BleChar != NULL) {
 801158c:	b170      	cbz	r0, 80115ac <BleManagerAddChar+0x20>
    if(UsedBleChars<BLE_MANAGER_MAX_ALLOCABLE_CHARS) {
 801158e:	4a08      	ldr	r2, [pc, #32]	; (80115b0 <BleManagerAddChar+0x24>)
 8011590:	f892 3308 	ldrb.w	r3, [r2, #776]	; 0x308
 8011594:	2b1f      	cmp	r3, #31
 8011596:	d808      	bhi.n	80115aa <BleManagerAddChar+0x1e>
      BleCharsArray[UsedBleChars] = BleChar;
 8011598:	eb02 0183 	add.w	r1, r2, r3, lsl #2
      UsedBleChars++;
 801159c:	3301      	adds	r3, #1
      BleCharsArray[UsedBleChars] = BleChar;
 801159e:	f8c1 030c 	str.w	r0, [r1, #780]	; 0x30c
      UsedBleChars++;
 80115a2:	f882 3308 	strb.w	r3, [r2, #776]	; 0x308
      retValue=1;
 80115a6:	2001      	movs	r0, #1
 80115a8:	4770      	bx	lr
  int32_t retValue=0;
 80115aa:	2000      	movs	r0, #0
}
 80115ac:	4770      	bx	lr
 80115ae:	bf00      	nop
 80115b0:	2000296c 	.word	0x2000296c

080115b4 <InitBleManagerServices>:
* @brief  Init Ble Manager Services
* @param  None
* @retval tBleStatus Status
*/
static tBleStatus InitBleManagerServices(void)
{
 80115b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115b8:	b0cd      	sub	sp, #308	; 0x134
  tBleStatus Status = BLE_ERROR_UNSPECIFIED;
  BleCharTypeDef *BleCharPointer;
  
  //Set the Malloc/Free Functions  used inside the Json Parser
  json_set_allocation_functions(BLE_MallocFunction, BLE_FreeFunction);
 80115ba:	49d5      	ldr	r1, [pc, #852]	; (8011910 <InitBleManagerServices+0x35c>)
 80115bc:	48d5      	ldr	r0, [pc, #852]	; (8011914 <InitBleManagerServices+0x360>)
   BLE_MANAGER_PRINTF("BlueST-SDK V2\r\n");
#else /* BLE_MANAGER_SDKV2 */
   BLE_MANAGER_PRINTF("BlueST-SDK V1\r\n");
#endif /* BLE_MANAGER_SDKV2 */
  
  if(BlueNRG_StackValue.EnableConfig) {
 80115be:	4cd6      	ldr	r4, [pc, #856]	; (8011918 <InitBleManagerServices+0x364>)
   BLE_MANAGER_PRINTF("BlueST-SDK V1\r\n");
 80115c0:	ad0c      	add	r5, sp, #48	; 0x30
  json_set_allocation_functions(BLE_MallocFunction, BLE_FreeFunction);
 80115c2:	f003 ffdd 	bl	8015580 <json_set_allocation_functions>
   BLE_MANAGER_PRINTF("BlueST-SDK V1\r\n");
 80115c6:	49d5      	ldr	r1, [pc, #852]	; (801191c <InitBleManagerServices+0x368>)
 80115c8:	4628      	mov	r0, r5
 80115ca:	f00b fc25 	bl	801ce18 <strcpy>
 80115ce:	210f      	movs	r1, #15
 80115d0:	4628      	mov	r0, r5
 80115d2:	f008 f9eb 	bl	80199ac <CDC_Fill_Buffer>
  if(BlueNRG_StackValue.EnableConfig) {
 80115d6:	7da3      	ldrb	r3, [r4, #22]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	f000 8202 	beq.w	80119e2 <InitBleManagerServices+0x42e>
    BleCharPointer = &BleCharConfig;
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));
 80115de:	2224      	movs	r2, #36	; 0x24
 80115e0:	2100      	movs	r1, #0
 80115e2:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
 80115e6:	f00a fe3d 	bl	801c264 <memset>
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_Config;
 80115ea:	4bcd      	ldr	r3, [pc, #820]	; (8011920 <InitBleManagerServices+0x36c>)
 80115ec:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
    BleCharPointer->Write_Request_CB = Write_Request_Config;
 80115f0:	4bcc      	ldr	r3, [pc, #816]	; (8011924 <InitBleManagerServices+0x370>)
 80115f2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    COPY_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 80115f6:	4bcc      	ldr	r3, [pc, #816]	; (8011928 <InitBleManagerServices+0x374>)
 80115f8:	f8c4 32dc 	str.w	r3, [r4, #732]	; 0x2dc
 80115fc:	f64a 4336 	movw	r3, #44086	; 0xac36
 8011600:	f8a4 32e2 	strh.w	r3, [r4, #738]	; 0x2e2
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
    BleCharPointer->Char_Value_Length=DEFAULT_MAX_CHAR_LEN;
 8011604:	239b      	movs	r3, #155	; 0x9b
 8011606:	f8a4 32ee 	strh.w	r3, [r4, #750]	; 0x2ee
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));
 801160a:	f504 7637 	add.w	r6, r4, #732	; 0x2dc
    BleCharPointer->Char_Properties=((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_WRITE_WITHOUT_RESP);
 801160e:	2314      	movs	r3, #20
    COPY_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 8011610:	2702      	movs	r7, #2
 8011612:	f241 1ae1 	movw	sl, #4577	; 0x11e1
 8011616:	f04f 090f 	mov.w	r9, #15
    BleCharPointer->Char_Properties=((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_WRITE_WITHOUT_RESP);
 801161a:	f884 32f0 	strb.w	r3, [r4, #752]	; 0x2f0
    BleCharPointer->Security_Permissions=ATTR_PERMISSION_NONE;
    BleCharPointer->GATT_Evt_Mask= ((uint8_t)GATT_NOTIFY_ATTRIBUTE_WRITE) | ((uint8_t)GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP);
    BleCharPointer->Enc_Key_Size=16;
    BleCharPointer->Is_Variable=1;
 801161e:	f04f 0801 	mov.w	r8, #1
    BleCharPointer->GATT_Evt_Mask= ((uint8_t)GATT_NOTIFY_ATTRIBUTE_WRITE) | ((uint8_t)GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP);
 8011622:	f241 0305 	movw	r3, #4101	; 0x1005
    BleManagerAddChar(BleCharPointer);
 8011626:	4630      	mov	r0, r6
    COPY_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 8011628:	f884 72e0 	strb.w	r7, [r4, #736]	; 0x2e0
 801162c:	f884 72e8 	strb.w	r7, [r4, #744]	; 0x2e8
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 8011630:	f884 72ec 	strb.w	r7, [r4, #748]	; 0x2ec
    BleCharPointer->GATT_Evt_Mask= ((uint8_t)GATT_NOTIFY_ATTRIBUTE_WRITE) | ((uint8_t)GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP);
 8011634:	f8a4 32f2 	strh.w	r3, [r4, #754]	; 0x2f2
    COPY_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 8011638:	f8a4 a2e4 	strh.w	sl, [r4, #740]	; 0x2e4
 801163c:	f884 92e6 	strb.w	r9, [r4, #742]	; 0x2e6
    BleCharPointer->Is_Variable=1;
 8011640:	f884 82f4 	strb.w	r8, [r4, #756]	; 0x2f4
    BleManagerAddChar(BleCharPointer);
 8011644:	f7ff ffa2 	bl	801158c <BleManagerAddChar>
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8011648:	f24c 531b 	movw	r3, #50459	; 0xc51b
 801164c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011650:	f24a 53d5 	movw	r3, #42453	; 0xa5d5
 8011654:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8011658:	f649 23b4 	movw	r3, #39604	; 0x9ab4
 801165c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8011660:	2300      	movs	r3, #0
 8011662:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8011666:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, 1+3,&(BleCharConfig.Service_Handle));
 801166a:	f504 733e 	add.w	r3, r4, #760	; 0x2f8
 801166e:	9300      	str	r3, [sp, #0]
 8011670:	4638      	mov	r0, r7
 8011672:	2304      	movs	r3, #4
 8011674:	4642      	mov	r2, r8
 8011676:	a908      	add	r1, sp, #32
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8011678:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801167c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8011680:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
  ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, 1+3,&(BleCharConfig.Service_Handle));
 8011684:	f7fd f998 	bl	800e9b8 <aci_gatt_add_service>
  if (ret != BLE_STATUS_SUCCESS) {
 8011688:	4607      	mov	r7, r0
 801168a:	2800      	cmp	r0, #0
 801168c:	f040 81a7 	bne.w	80119de <InitBleManagerServices+0x42a>
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, BleCharConfig.uuid, 16);
 8011690:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8011694:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(BleCharConfig.Service_Handle,
 8011698:	f204 23f6 	addw	r3, r4, #758	; 0x2f6
 801169c:	9305      	str	r3, [sp, #20]
 801169e:	f894 32f4 	ldrb.w	r3, [r4, #756]	; 0x2f4
 80116a2:	9304      	str	r3, [sp, #16]
 80116a4:	f894 32f3 	ldrb.w	r3, [r4, #755]	; 0x2f3
 80116a8:	9303      	str	r3, [sp, #12]
 80116aa:	f894 32f2 	ldrb.w	r3, [r4, #754]	; 0x2f2
 80116ae:	9302      	str	r3, [sp, #8]
 80116b0:	f894 32f1 	ldrb.w	r3, [r4, #753]	; 0x2f1
 80116b4:	9301      	str	r3, [sp, #4]
 80116b6:	f894 32f0 	ldrb.w	r3, [r4, #752]	; 0x2f0
 80116ba:	9300      	str	r3, [sp, #0]
 80116bc:	f894 12ec 	ldrb.w	r1, [r4, #748]	; 0x2ec
 80116c0:	f8b4 32ee 	ldrh.w	r3, [r4, #750]	; 0x2ee
 80116c4:	f8b4 02f8 	ldrh.w	r0, [r4, #760]	; 0x2f8
 80116c8:	462a      	mov	r2, r5
 80116ca:	f7fd f9bd 	bl	800ea48 <aci_gatt_add_char>
    
    Status = BLE_Manager_AddConfigService();
    if(Status == BLE_STATUS_SUCCESS) {
 80116ce:	4607      	mov	r7, r0
 80116d0:	2800      	cmp	r0, #0
 80116d2:	f040 8184 	bne.w	80119de <InitBleManagerServices+0x42a>
      BLE_MANAGER_PRINTF("Config  Service added successfully\r\n");
 80116d6:	4995      	ldr	r1, [pc, #596]	; (801192c <InitBleManagerServices+0x378>)
    } else {
      BLE_MANAGER_PRINTF("Error: while adding Config Service\r\n");
 80116d8:	4628      	mov	r0, r5
 80116da:	f00b fb9d 	bl	801ce18 <strcpy>
 80116de:	2124      	movs	r1, #36	; 0x24
 80116e0:	4628      	mov	r0, r5
 80116e2:	f008 f963 	bl	80199ac <CDC_Fill_Buffer>
    }
  }
  
  if(BlueNRG_StackValue.EnableConsole) {
 80116e6:	7de3      	ldrb	r3, [r4, #23]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	f000 80d6 	beq.w	801189a <InitBleManagerServices+0x2e6>
    BleCharPointer = &BleCharStdOut;
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));    
 80116ee:	4e90      	ldr	r6, [pc, #576]	; (8011930 <InitBleManagerServices+0x37c>)
 80116f0:	2100      	movs	r1, #0
 80116f2:	221c      	movs	r2, #28
 80116f4:	1d30      	adds	r0, r6, #4
 80116f6:	f00a fdb5 	bl	801c264 <memset>
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_Term;
 80116fa:	4b8e      	ldr	r3, [pc, #568]	; (8011934 <InitBleManagerServices+0x380>)
 80116fc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    BleCharPointer->Write_Request_CB = Write_Request_Term;
 8011700:	4b8d      	ldr	r3, [pc, #564]	; (8011938 <InitBleManagerServices+0x384>)
 8011702:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    BleCharPointer->Read_Request_CB = Read_Request_Term;
    COPY_TERM_CHAR_UUID((BleCharPointer->uuid));
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
    BleCharPointer->Char_Value_Length=DEFAULT_MAX_CHAR_LEN;
 8011706:	f04f 029b 	mov.w	r2, #155	; 0x9b
    BleCharPointer->Read_Request_CB = Read_Request_Term;
 801170a:	4b8c      	ldr	r3, [pc, #560]	; (801193c <InitBleManagerServices+0x388>)
 801170c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    BleCharPointer->Char_Value_Length=DEFAULT_MAX_CHAR_LEN;
 8011710:	f8a4 207e 	strh.w	r2, [r4, #126]	; 0x7e
    COPY_TERM_CHAR_UUID((BleCharPointer->uuid));
 8011714:	4b84      	ldr	r3, [pc, #528]	; (8011928 <InitBleManagerServices+0x374>)
 8011716:	66e3      	str	r3, [r4, #108]	; 0x6c
    BleCharPointer->Char_Properties= ((uint8_t)CHAR_PROP_NOTIFY)| ((uint8_t)CHAR_PROP_WRITE_WITHOUT_RESP) | ((uint8_t)CHAR_PROP_WRITE) | ((uint8_t)CHAR_PROP_READ);
 8011718:	221e      	movs	r2, #30
    COPY_TERM_CHAR_UUID((BleCharPointer->uuid));
 801171a:	2702      	movs	r7, #2
 801171c:	f64a 4336 	movw	r3, #44086	; 0xac36
 8011720:	f04f 0901 	mov.w	r9, #1
 8011724:	f241 1be1 	movw	fp, #4577	; 0x11e1
 8011728:	f04f 0a0e 	mov.w	sl, #14
    BleCharPointer->Char_Properties= ((uint8_t)CHAR_PROP_NOTIFY)| ((uint8_t)CHAR_PROP_WRITE_WITHOUT_RESP) | ((uint8_t)CHAR_PROP_WRITE) | ((uint8_t)CHAR_PROP_READ);
 801172c:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    BleCharPointer->Security_Permissions=ATTR_PERMISSION_NONE;
    BleCharPointer->GATT_Evt_Mask= ((uint8_t)GATT_NOTIFY_ATTRIBUTE_WRITE) | ((uint8_t)GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP);
    BleCharPointer->Enc_Key_Size=16;
    BleCharPointer->Is_Variable=1;
    BleManagerAddChar(BleCharPointer);
 8011730:	4630      	mov	r0, r6
    BleCharPointer->GATT_Evt_Mask= ((uint8_t)GATT_NOTIFY_ATTRIBUTE_WRITE) | ((uint8_t)GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP);
 8011732:	f241 0205 	movw	r2, #4101	; 0x1005
    COPY_TERM_CHAR_UUID((BleCharPointer->uuid));
 8011736:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 801173a:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 801173e:	f884 707c 	strb.w	r7, [r4, #124]	; 0x7c
    BleCharPointer->GATT_Evt_Mask= ((uint8_t)GATT_NOTIFY_ATTRIBUTE_WRITE) | ((uint8_t)GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP);
 8011742:	f8a4 2082 	strh.w	r2, [r4, #130]	; 0x82
    COPY_TERM_CHAR_UUID((BleCharPointer->uuid));
 8011746:	f8a4 b074 	strh.w	fp, [r4, #116]	; 0x74
 801174a:	f884 a076 	strb.w	sl, [r4, #118]	; 0x76
 801174e:	f884 9078 	strb.w	r9, [r4, #120]	; 0x78
    BleCharPointer->Is_Variable=1;
 8011752:	f884 9084 	strb.w	r9, [r4, #132]	; 0x84
    BleManagerAddChar(BleCharPointer);
 8011756:	f7ff ff19 	bl	801158c <BleManagerAddChar>
    
    BleCharPointer = &BleCharStdErr;
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));
 801175a:	2100      	movs	r1, #0
 801175c:	2228      	movs	r2, #40	; 0x28
 801175e:	f1a6 0028 	sub.w	r0, r6, #40	; 0x28
 8011762:	f00a fd7f 	bl	801c264 <memset>
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_StdErr;
    BleCharPointer->Read_Request_CB = Read_Request_StdErr;
    COPY_STDERR_CHAR_UUID((BleCharPointer->uuid));
 8011766:	4b70      	ldr	r3, [pc, #448]	; (8011928 <InitBleManagerServices+0x374>)
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_StdErr;
 8011768:	4a75      	ldr	r2, [pc, #468]	; (8011940 <InitBleManagerServices+0x38c>)
    COPY_STDERR_CHAR_UUID((BleCharPointer->uuid));
 801176a:	6423      	str	r3, [r4, #64]	; 0x40
 801176c:	f64a 4336 	movw	r3, #44086	; 0xac36
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_StdErr;
 8011770:	6622      	str	r2, [r4, #96]	; 0x60
    COPY_STDERR_CHAR_UUID((BleCharPointer->uuid));
 8011772:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    BleCharPointer->Read_Request_CB = Read_Request_StdErr;
 8011776:	4a73      	ldr	r2, [pc, #460]	; (8011944 <InitBleManagerServices+0x390>)
 8011778:	6662      	str	r2, [r4, #100]	; 0x64
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
    BleCharPointer->Char_Value_Length=DEFAULT_MAX_CHAR_LEN;
    BleCharPointer->Char_Properties= ((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_READ);
 801177a:	2312      	movs	r3, #18
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));
 801177c:	f1a6 082c 	sub.w	r8, r6, #44	; 0x2c
    BleCharPointer->Char_Value_Length=DEFAULT_MAX_CHAR_LEN;
 8011780:	f04f 029b 	mov.w	r2, #155	; 0x9b
    BleCharPointer->Char_Properties= ((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_READ);
 8011784:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    BleCharPointer->Security_Permissions=ATTR_PERMISSION_NONE;
    BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
    BleCharPointer->Enc_Key_Size=16;
    BleCharPointer->Is_Variable=1;
    BleManagerAddChar(BleCharPointer);
 8011788:	4640      	mov	r0, r8
    BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 801178a:	f241 0304 	movw	r3, #4100	; 0x1004
    COPY_STDERR_CHAR_UUID((BleCharPointer->uuid));
 801178e:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8011792:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 8011796:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
    BleCharPointer->Char_Value_Length=DEFAULT_MAX_CHAR_LEN;
 801179a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 801179e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    COPY_STDERR_CHAR_UUID((BleCharPointer->uuid));
 80117a2:	f8a4 b048 	strh.w	fp, [r4, #72]	; 0x48
 80117a6:	f884 a04a 	strb.w	sl, [r4, #74]	; 0x4a
    BleCharPointer->Is_Variable=1;
 80117aa:	f884 9058 	strb.w	r9, [r4, #88]	; 0x58
    BleManagerAddChar(BleCharPointer);
 80117ae:	f7ff feed 	bl	801158c <BleManagerAddChar>
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80117b2:	f24c 531b 	movw	r3, #50459	; 0xc51b
 80117b6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80117ba:	f24a 53d5 	movw	r3, #42453	; 0xa5d5
 80117be:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80117c2:	f649 23b4 	movw	r3, #39604	; 0x9ab4
 80117c6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80117ca:	2300      	movs	r3, #0
 80117cc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80117d0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, 1+(3*2),&(BleCharStdOut.Service_Handle));
 80117d4:	f106 031c 	add.w	r3, r6, #28
 80117d8:	9300      	str	r3, [sp, #0]
 80117da:	4638      	mov	r0, r7
 80117dc:	2307      	movs	r3, #7
 80117de:	464a      	mov	r2, r9
 80117e0:	a908      	add	r1, sp, #32
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80117e2:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80117e6:	f8ad b028 	strh.w	fp, [sp, #40]	; 0x28
 80117ea:	f8ad a02a 	strh.w	sl, [sp, #42]	; 0x2a
  ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, 1+(3*2),&(BleCharStdOut.Service_Handle));
 80117ee:	f7fd f8e3 	bl	800e9b8 <aci_gatt_add_service>
  if (ret != BLE_STATUS_SUCCESS) {
 80117f2:	4607      	mov	r7, r0
 80117f4:	2800      	cmp	r0, #0
 80117f6:	f040 80f6 	bne.w	80119e6 <InitBleManagerServices+0x432>
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, BleCharStdOut.uuid, 16);
 80117fa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80117fe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(BleCharStdOut.Service_Handle,
 8011802:	f106 031a 	add.w	r3, r6, #26
 8011806:	9305      	str	r3, [sp, #20]
 8011808:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 801180c:	9304      	str	r3, [sp, #16]
 801180e:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
 8011812:	9303      	str	r3, [sp, #12]
 8011814:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 8011818:	9302      	str	r3, [sp, #8]
 801181a:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 801181e:	9301      	str	r3, [sp, #4]
 8011820:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8011824:	9300      	str	r3, [sp, #0]
 8011826:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
 801182a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 801182e:	f8b4 0088 	ldrh.w	r0, [r4, #136]	; 0x88
 8011832:	462a      	mov	r2, r5
 8011834:	f7fd f908 	bl	800ea48 <aci_gatt_add_char>
  if (ret != BLE_STATUS_SUCCESS) {
 8011838:	4607      	mov	r7, r0
 801183a:	2800      	cmp	r0, #0
 801183c:	f040 80d3 	bne.w	80119e6 <InitBleManagerServices+0x432>
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, BleCharStdErr.uuid, 16);
 8011840:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011844:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(BleCharStdErr.Service_Handle,
 8011848:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 801184c:	9304      	str	r3, [sp, #16]
 801184e:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 8011852:	9303      	str	r3, [sp, #12]
 8011854:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
  BleCharStdErr.Service_Handle = BleCharStdOut.Service_Handle;
 8011858:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
  ret =  aci_gatt_add_char(BleCharStdErr.Service_Handle,
 801185c:	9302      	str	r3, [sp, #8]
 801185e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8011862:	9301      	str	r3, [sp, #4]
 8011864:	3e12      	subs	r6, #18
 8011866:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801186a:	9300      	str	r3, [sp, #0]
 801186c:	4638      	mov	r0, r7
 801186e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8011872:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 8011876:	9605      	str	r6, [sp, #20]
 8011878:	462a      	mov	r2, r5
  BleCharStdErr.Service_Handle = BleCharStdOut.Service_Handle;
 801187a:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
  ret =  aci_gatt_add_char(BleCharStdErr.Service_Handle,
 801187e:	f7fd f8e3 	bl	800ea48 <aci_gatt_add_char>
    
    Status = BLE_Manager_AddConsoleService();
    if(Status == BLE_STATUS_SUCCESS) {
 8011882:	4607      	mov	r7, r0
 8011884:	2800      	cmp	r0, #0
 8011886:	f040 80ae 	bne.w	80119e6 <InitBleManagerServices+0x432>
      BLE_MANAGER_PRINTF("Console Service added successfully\r\n");
 801188a:	492f      	ldr	r1, [pc, #188]	; (8011948 <InitBleManagerServices+0x394>)
 801188c:	4628      	mov	r0, r5
 801188e:	f00b fac3 	bl	801ce18 <strcpy>
 8011892:	2124      	movs	r1, #36	; 0x24
    } else {
      BLE_MANAGER_PRINTF("Error: while adding Console Service\r\n");
 8011894:	4628      	mov	r0, r5
 8011896:	f008 f889 	bl	80199ac <CDC_Fill_Buffer>
    }
  }
  
  UsedStandardBleChars = UsedBleChars;
 801189a:	4c1f      	ldr	r4, [pc, #124]	; (8011918 <InitBleManagerServices+0x364>)
 801189c:	f894 3308 	ldrb.w	r3, [r4, #776]	; 0x308
 80118a0:	f884 338c 	strb.w	r3, [r4, #908]	; 0x38c
  
  /* Extended Configuration characteristic value */
  if(BlueNRG_StackValue.EnableExtConfig)
 80118a4:	7e23      	ldrb	r3, [r4, #24]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d054      	beq.n	8011954 <InitBleManagerServices+0x3a0>
  {
    BleCharPointer = &BleCharExtConfig;
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));
 80118aa:	2224      	movs	r2, #36	; 0x24
 80118ac:	2100      	movs	r1, #0
 80118ae:	f504 7065 	add.w	r0, r4, #916	; 0x394
 80118b2:	f00a fcd7 	bl	801c264 <memset>
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_ExtConfig;
 80118b6:	4b25      	ldr	r3, [pc, #148]	; (801194c <InitBleManagerServices+0x398>)
 80118b8:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
    BleCharPointer->Write_Request_CB = Write_Request_ExtConfig;
 80118bc:	4b24      	ldr	r3, [pc, #144]	; (8011950 <InitBleManagerServices+0x39c>)
 80118be:	f8c4 33b8 	str.w	r3, [r4, #952]	; 0x3b8
    COPY_EXT_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 80118c2:	4b19      	ldr	r3, [pc, #100]	; (8011928 <InitBleManagerServices+0x374>)
 80118c4:	f8c4 3390 	str.w	r3, [r4, #912]	; 0x390
 80118c8:	2302      	movs	r3, #2
 80118ca:	f64a 4236 	movw	r2, #44086	; 0xac36
 80118ce:	f884 3394 	strb.w	r3, [r4, #916]	; 0x394
 80118d2:	f884 339a 	strb.w	r3, [r4, #922]	; 0x39a
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 80118d6:	f884 33a0 	strb.w	r3, [r4, #928]	; 0x3a0
    BleCharPointer->Char_Value_Length=DEFAULT_MAX_CHAR_LEN;
 80118da:	239b      	movs	r3, #155	; 0x9b
    COPY_EXT_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 80118dc:	f8a4 2396 	strh.w	r2, [r4, #918]	; 0x396
    BleCharPointer->Char_Value_Length=DEFAULT_MAX_CHAR_LEN;
 80118e0:	f8a4 33a2 	strh.w	r3, [r4, #930]	; 0x3a2
    COPY_EXT_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 80118e4:	f241 12e1 	movw	r2, #4577	; 0x11e1
    BleCharPointer->Char_Properties= ((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_WRITE_WITHOUT_RESP);
    BleCharPointer->Security_Permissions=ATTR_PERMISSION_NONE;
    BleCharPointer->GATT_Evt_Mask= ((uint8_t)GATT_NOTIFY_ATTRIBUTE_WRITE) | ((uint8_t)GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP);
 80118e8:	f241 0305 	movw	r3, #4101	; 0x1005
    COPY_EXT_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 80118ec:	f8a4 2398 	strh.w	r2, [r4, #920]	; 0x398
    BleCharPointer->GATT_Evt_Mask= ((uint8_t)GATT_NOTIFY_ATTRIBUTE_WRITE) | ((uint8_t)GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP);
 80118f0:	f8a4 33a6 	strh.w	r3, [r4, #934]	; 0x3a6
    COPY_EXT_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 80118f4:	2214      	movs	r2, #20
    BleCharPointer->Enc_Key_Size=16;
    BleCharPointer->Is_Variable=1;
 80118f6:	2301      	movs	r3, #1
    BleManagerAddChar(BleCharPointer);
 80118f8:	f504 7064 	add.w	r0, r4, #912	; 0x390
    COPY_EXT_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 80118fc:	f884 239c 	strb.w	r2, [r4, #924]	; 0x39c
    BleCharPointer->Char_Properties= ((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_WRITE_WITHOUT_RESP);
 8011900:	f884 23a4 	strb.w	r2, [r4, #932]	; 0x3a4
    BleCharPointer->Is_Variable=1;
 8011904:	f884 33a8 	strb.w	r3, [r4, #936]	; 0x3a8
    BleManagerAddChar(BleCharPointer);
 8011908:	f7ff fe40 	bl	801158c <BleManagerAddChar>
 801190c:	e022      	b.n	8011954 <InitBleManagerServices+0x3a0>
 801190e:	bf00      	nop
 8011910:	0801c205 	.word	0x0801c205
 8011914:	0801c1f5 	.word	0x0801c1f5
 8011918:	2000296c 	.word	0x2000296c
 801191c:	08023502 	.word	0x08023502
 8011920:	08010c7d 	.word	0x08010c7d
 8011924:	08010c95 	.word	0x08010c95
 8011928:	a5d5c51b 	.word	0xa5d5c51b
 801192c:	08023512 	.word	0x08023512
 8011930:	200029d8 	.word	0x200029d8
 8011934:	08010cc1 	.word	0x08010cc1
 8011938:	08011401 	.word	0x08011401
 801193c:	08011321 	.word	0x08011321
 8011940:	08010ca9 	.word	0x08010ca9
 8011944:	08011275 	.word	0x08011275
 8011948:	0802355c 	.word	0x0802355c
 801194c:	08010cd9 	.word	0x08010cd9
 8011950:	08012745 	.word	0x08012745
  }
  
  /* Set Custom Configuration and Services */
  BLE_InitCustomService();
 8011954:	f004 ffe6 	bl	8016924 <BLE_InitCustomService>
  
  if((UsedBleChars-UsedStandardBleChars) > 0U)
 8011958:	f894 3308 	ldrb.w	r3, [r4, #776]	; 0x308
 801195c:	f894 138c 	ldrb.w	r1, [r4, #908]	; 0x38c
 8011960:	428b      	cmp	r3, r1
 8011962:	d038      	beq.n	80119d6 <InitBleManagerServices+0x422>
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8011964:	f24c 521b 	movw	r2, #50459	; 0xc51b
 8011968:	f8ad 2020 	strh.w	r2, [sp, #32]
 801196c:	f24a 52d5 	movw	r2, #42453	; 0xa5d5
 8011970:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8011974:	f649 22b4 	movw	r2, #39604	; 0x9ab4
 8011978:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
  uint8_t NumberCustomBLEChars = UsedBleChars-UsedStandardBleChars;
 801197c:	1a5b      	subs	r3, r3, r1
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 801197e:	f241 12e1 	movw	r2, #4577	; 0x11e1
 8011982:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
  ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, (1U+(3U*NumberCustomBLEChars)),&Service_Handle);
 8011986:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 801198a:	2201      	movs	r2, #1
  ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, (1U+(3U*NumberCustomBLEChars)),&Service_Handle);
 801198c:	4413      	add	r3, r2
 801198e:	f10d 081e 	add.w	r8, sp, #30
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8011992:	2002      	movs	r0, #2
 8011994:	2600      	movs	r6, #0
  ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, (1U+(3U*NumberCustomBLEChars)),&Service_Handle);
 8011996:	f8cd 8000 	str.w	r8, [sp]
 801199a:	b2db      	uxtb	r3, r3
 801199c:	a908      	add	r1, sp, #32
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 801199e:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 80119a2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80119a6:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 80119aa:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
  ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, (1U+(3U*NumberCustomBLEChars)),&Service_Handle);
 80119ae:	f7fd f803 	bl	800e9b8 <aci_gatt_add_service>
  if (ret != BLE_STATUS_SUCCESS) {
 80119b2:	4607      	mov	r7, r0
 80119b4:	2800      	cmp	r0, #0
 80119b6:	d149      	bne.n	8011a4c <InitBleManagerServices+0x498>
  for(BleChar=UsedStandardBleChars;BleChar<UsedBleChars;BleChar++) {
 80119b8:	f894 638c 	ldrb.w	r6, [r4, #908]	; 0x38c
 80119bc:	f894 3308 	ldrb.w	r3, [r4, #776]	; 0x308
 80119c0:	42b3      	cmp	r3, r6
 80119c2:	d816      	bhi.n	80119f2 <InitBleManagerServices+0x43e>
  {
    Status = BLE_Manager_AddFeaturesService();
    if(Status == BLE_STATUS_SUCCESS) {
      BLE_MANAGER_PRINTF("Features Service added successfully (Status= 0x%x)\r\n", Status);
 80119c4:	4925      	ldr	r1, [pc, #148]	; (8011a5c <InitBleManagerServices+0x4a8>)
 80119c6:	2200      	movs	r2, #0
 80119c8:	4628      	mov	r0, r5
 80119ca:	f00b f9b5 	bl	801cd38 <siprintf>
 80119ce:	2133      	movs	r1, #51	; 0x33
    } else {
      BLE_MANAGER_PRINTF("Error: while adding Features Service (Status= 0x%x)\r\n", Status);
 80119d0:	4628      	mov	r0, r5
 80119d2:	f007 ffeb 	bl	80199ac <CDC_Fill_Buffer>
    }
  }
  
  return Status;
}
 80119d6:	4638      	mov	r0, r7
 80119d8:	b04d      	add	sp, #308	; 0x134
 80119da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      BLE_MANAGER_PRINTF("Error: while adding Config Service\r\n");
 80119de:	4920      	ldr	r1, [pc, #128]	; (8011a60 <InitBleManagerServices+0x4ac>)
 80119e0:	e67a      	b.n	80116d8 <InitBleManagerServices+0x124>
  tBleStatus Status = BLE_ERROR_UNSPECIFIED;
 80119e2:	271f      	movs	r7, #31
 80119e4:	e67f      	b.n	80116e6 <InitBleManagerServices+0x132>
      BLE_MANAGER_PRINTF("Error: while adding Console Service\r\n");
 80119e6:	491f      	ldr	r1, [pc, #124]	; (8011a64 <InitBleManagerServices+0x4b0>)
 80119e8:	4628      	mov	r0, r5
 80119ea:	f00b fa15 	bl	801ce18 <strcpy>
 80119ee:	2125      	movs	r1, #37	; 0x25
 80119f0:	e750      	b.n	8011894 <InitBleManagerServices+0x2e0>
    BleCharsArray[BleChar]->Service_Handle = Service_Handle;
 80119f2:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80119f6:	f8b8 9000 	ldrh.w	r9, [r8]
 80119fa:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
    BLUENRG_memcpy(&char_uuid.Char_UUID_128, BleCharsArray[BleChar]->uuid, 16);
 80119fe:	46ae      	mov	lr, r5
    BleCharsArray[BleChar]->Service_Handle = Service_Handle;
 8011a00:	f8a2 901c 	strh.w	r9, [r2, #28]
    BLUENRG_memcpy(&char_uuid.Char_UUID_128, BleCharsArray[BleChar]->uuid, 16);
 8011a04:	4613      	mov	r3, r2
 8011a06:	f102 0a10 	add.w	sl, r2, #16
 8011a0a:	6818      	ldr	r0, [r3, #0]
 8011a0c:	6859      	ldr	r1, [r3, #4]
 8011a0e:	46f4      	mov	ip, lr
 8011a10:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8011a14:	3308      	adds	r3, #8
 8011a16:	4553      	cmp	r3, sl
 8011a18:	46e6      	mov	lr, ip
 8011a1a:	d1f6      	bne.n	8011a0a <InitBleManagerServices+0x456>
    ret =  aci_gatt_add_char(BleCharsArray[BleChar]->Service_Handle,
 8011a1c:	f102 001a 	add.w	r0, r2, #26
 8011a20:	8a53      	ldrh	r3, [r2, #18]
 8011a22:	7c11      	ldrb	r1, [r2, #16]
 8011a24:	9005      	str	r0, [sp, #20]
 8011a26:	7e10      	ldrb	r0, [r2, #24]
 8011a28:	9004      	str	r0, [sp, #16]
 8011a2a:	7dd0      	ldrb	r0, [r2, #23]
 8011a2c:	9003      	str	r0, [sp, #12]
 8011a2e:	7d90      	ldrb	r0, [r2, #22]
 8011a30:	9002      	str	r0, [sp, #8]
 8011a32:	7d50      	ldrb	r0, [r2, #21]
 8011a34:	9001      	str	r0, [sp, #4]
 8011a36:	7d12      	ldrb	r2, [r2, #20]
 8011a38:	9200      	str	r2, [sp, #0]
 8011a3a:	4648      	mov	r0, r9
 8011a3c:	462a      	mov	r2, r5
 8011a3e:	f7fd f803 	bl	800ea48 <aci_gatt_add_char>
    if (ret != BLE_STATUS_SUCCESS) {
 8011a42:	b910      	cbnz	r0, 8011a4a <InitBleManagerServices+0x496>
  for(BleChar=UsedStandardBleChars;BleChar<UsedBleChars;BleChar++) {
 8011a44:	3601      	adds	r6, #1
 8011a46:	b2f6      	uxtb	r6, r6
 8011a48:	e7b8      	b.n	80119bc <InitBleManagerServices+0x408>
 8011a4a:	4607      	mov	r7, r0
      BLE_MANAGER_PRINTF("Error: while adding Features Service (Status= 0x%x)\r\n", Status);
 8011a4c:	4906      	ldr	r1, [pc, #24]	; (8011a68 <InitBleManagerServices+0x4b4>)
 8011a4e:	463a      	mov	r2, r7
 8011a50:	4628      	mov	r0, r5
 8011a52:	f00b f971 	bl	801cd38 <siprintf>
 8011a56:	4601      	mov	r1, r0
 8011a58:	e7ba      	b.n	80119d0 <InitBleManagerServices+0x41c>
 8011a5a:	bf00      	nop
 8011a5c:	080235a7 	.word	0x080235a7
 8011a60:	08023537 	.word	0x08023537
 8011a64:	08023581 	.word	0x08023581
 8011a68:	080235dc 	.word	0x080235dc

08011a6c <InitBleManager>:
{
 8011a6c:	b570      	push	{r4, r5, r6, lr}
  BLE_Conf_Service = BLE_SERV_NOT_ENABLE;
 8011a6e:	4c1f      	ldr	r4, [pc, #124]	; (8011aec <InitBleManager+0x80>)
 8011a70:	2500      	movs	r5, #0
  MaxBLECharLen = DEFAULT_MAX_CHAR_LEN;
 8011a72:	239b      	movs	r3, #155	; 0x9b
  BLE_Conf_Service = BLE_SERV_NOT_ENABLE;
 8011a74:	7025      	strb	r5, [r4, #0]
  BLE_StdTerm_Service = BLE_SERV_NOT_ENABLE;
 8011a76:	7265      	strb	r5, [r4, #9]
  BLE_StdErr_Service = BLE_SERV_NOT_ENABLE;
 8011a78:	7225      	strb	r5, [r4, #8]
  BLE_ExtConf_Service = BLE_SERV_NOT_ENABLE;
 8011a7a:	72a5      	strb	r5, [r4, #10]
  UsedBleChars =0;
 8011a7c:	f884 5308 	strb.w	r5, [r4, #776]	; 0x308
  UsedStandardBleChars = 0;
 8011a80:	f884 538c 	strb.w	r5, [r4, #908]	; 0x38c
  connection_handle = 0;
 8011a84:	f8a4 53bc 	strh.w	r5, [r4, #956]	; 0x3bc
  set_connectable = FALSE;
 8011a88:	f884 53be 	strb.w	r5, [r4, #958]	; 0x3be
  MaxBLECharLen = DEFAULT_MAX_CHAR_LEN;
 8011a8c:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
  ret = InitBleManager_BlueNRG_Stack();
 8011a90:	f7ff f93a 	bl	8010d08 <InitBleManager_BlueNRG_Stack>
 8011a94:	4606      	mov	r6, r0
  CustomDisconnectionCompleted=NULL;
 8011a96:	e9c4 55f0 	strd	r5, r5, [r4, #960]	; 0x3c0
  CustomExtConfigPowerOffCommandCallback=NULL;
 8011a9a:	e9c4 55f2 	strd	r5, r5, [r4, #968]	; 0x3c8
  CustomExtConfigSetTimeCommandCallback=NULL;
 8011a9e:	e9c4 55f4 	strd	r5, r5, [r4, #976]	; 0x3d0
  CustomExtConfigSetWiFiCommandCallback=NULL;
 8011aa2:	e9c4 55f6 	strd	r5, r5, [r4, #984]	; 0x3d8
  CustomExtConfigClearDBCommandCallback=NULL;
 8011aa6:	e9c4 55f8 	strd	r5, r5, [r4, #992]	; 0x3e0
  CustomExtConfigInfoCommandCallback=NULL;
 8011aaa:	e9c4 55fa 	strd	r5, r5, [r4, #1000]	; 0x3e8
  CustomExtConfigPowerStatusCommandCallback=NULL;
 8011aae:	e9c4 55fc 	strd	r5, r5, [r4, #1008]	; 0x3f0
  CustomExtConfigReadCustomCommandsCallback=NULL;
 8011ab2:	e9c4 55fe 	strd	r5, r5, [r4, #1016]	; 0x3f8
  CustomAciGattTxPoolAvailableEvent=NULL;
 8011ab6:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
  CustomDebugConsoleParsingCallback=NULL;
 8011aba:	f8c4 52d8 	str.w	r5, [r4, #728]	; 0x2d8
  CustomWriteRequestConfigCallback=NULL;
 8011abe:	6065      	str	r5, [r4, #4]
  CustomExtConfigCustomCommandCallback=NULL;
 8011ac0:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
  CustomExtConfigReadCertCommandCallback=NULL;
 8011ac4:	f8c4 5404 	str.w	r5, [r4, #1028]	; 0x404
  CustomExtConfigSetCertCommandCallback=NULL;
 8011ac8:	f8c4 5408 	str.w	r5, [r4, #1032]	; 0x408
  CustomExtConfigReadSensorsConfigCommandsCallback=NULL;
 8011acc:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
  CustomExtConfigSetSensorsConfigCommandsCallback=NULL;
 8011ad0:	f8c4 5410 	str.w	r5, [r4, #1040]	; 0x410
  ClearCustomCommandsList();
 8011ad4:	f7ff fa74 	bl	8010fc0 <ClearCustomCommandsList>
  if(ret==BLE_STATUS_SUCCESS) {
 8011ad8:	b916      	cbnz	r6, 8011ae0 <InitBleManager+0x74>
    ret = InitBleManagerServices();
 8011ada:	f7ff fd6b 	bl	80115b4 <InitBleManagerServices>
 8011ade:	4606      	mov	r6, r0
  set_connectable=TRUE;
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	f884 33be 	strb.w	r3, [r4, #958]	; 0x3be
}
 8011ae6:	4630      	mov	r0, r6
 8011ae8:	bd70      	pop	{r4, r5, r6, pc}
 8011aea:	bf00      	nop
 8011aec:	2000296c 	.word	0x2000296c

08011af0 <BLE_Command_TP_Parse>:
* @param  buffer_in: pointer to the input data.
* @param  len: buffer in length
* @retval Buffer out length.
*/
uint32_t BLE_Command_TP_Parse(uint8_t** buffer_out, uint8_t* buffer_in, uint32_t len) 
{
 8011af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  static BLE_COMM_TP_Status_Typedef status = BLE_COMM_TP_WAIT_START;
  BLE_COMM_TP_Packet_Typedef packet_type;
  
  packet_type = (BLE_COMM_TP_Packet_Typedef) buffer_in[0];
  
  switch (status)
 8011af4:	4d43      	ldr	r5, [pc, #268]	; (8011c04 <BLE_Command_TP_Parse+0x114>)
{
 8011af6:	4680      	mov	r8, r0
  switch (status)
 8011af8:	f895 0414 	ldrb.w	r0, [r5, #1044]	; 0x414
{
 8011afc:	4616      	mov	r6, r2
 8011afe:	b0c4      	sub	sp, #272	; 0x110
  packet_type = (BLE_COMM_TP_Packet_Typedef) buffer_in[0];
 8011b00:	780a      	ldrb	r2, [r1, #0]
{
 8011b02:	460f      	mov	r7, r1
  switch (status)
 8011b04:	b128      	cbz	r0, 8011b12 <BLE_Command_TP_Parse+0x22>
 8011b06:	2801      	cmp	r0, #1
 8011b08:	d058      	beq.n	8011bbc <BLE_Command_TP_Parse+0xcc>
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[3], (len - 3U));
      
      
      tot_len += len - 3U;
      status = BLE_COMM_TP_WAIT_END;
      buff_out_len = 0; 
 8011b0a:	2000      	movs	r0, #0
      buff_out_len = 0; /* error */
    }
    break;
  }
  return buff_out_len;
}
 8011b0c:	b044      	add	sp, #272	; 0x110
 8011b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (packet_type == BLE_COMM_TP_START_PACKET) 
 8011b12:	bb42      	cbnz	r2, 8011b66 <BLE_Command_TP_Parse+0x76>
      message_length |= buffer_in[2];
 8011b14:	f8b1 2001 	ldrh.w	r2, [r1, #1]
 8011b18:	ba52      	rev16	r2, r2
 8011b1a:	b292      	uxth	r2, r2
      *buffer_out = (uint8_t*)BLE_MallocFunction((message_length) * sizeof(uint8_t));
 8011b1c:	4610      	mov	r0, r2
 8011b1e:	9203      	str	r2, [sp, #12]
 8011b20:	f00a fb68 	bl	801c1f4 <malloc>
      if(*buffer_out == NULL) {
 8011b24:	9a03      	ldr	r2, [sp, #12]
      *buffer_out = (uint8_t*)BLE_MallocFunction((message_length) * sizeof(uint8_t));
 8011b26:	f8c8 0000 	str.w	r0, [r8]
      if(*buffer_out == NULL) {
 8011b2a:	b958      	cbnz	r0, 8011b44 <BLE_Command_TP_Parse+0x54>
        BLE_MANAGER_PRINTF("Error: Mem alloc error [%d]: %d@%s\r\n", message_length, __LINE__, __FILE__);
 8011b2c:	4b36      	ldr	r3, [pc, #216]	; (8011c08 <BLE_Command_TP_Parse+0x118>)
 8011b2e:	4937      	ldr	r1, [pc, #220]	; (8011c0c <BLE_Command_TP_Parse+0x11c>)
 8011b30:	9300      	str	r3, [sp, #0]
 8011b32:	a804      	add	r0, sp, #16
 8011b34:	f640 1361 	movw	r3, #2401	; 0x961
 8011b38:	f00b f8fe 	bl	801cd38 <siprintf>
 8011b3c:	4601      	mov	r1, r0
 8011b3e:	a804      	add	r0, sp, #16
 8011b40:	f007 ff34 	bl	80199ac <CDC_Fill_Buffer>
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[3], (len - 3U));
 8011b44:	f8d5 4418 	ldr.w	r4, [r5, #1048]	; 0x418
 8011b48:	f8d8 0000 	ldr.w	r0, [r8]
 8011b4c:	1ef2      	subs	r2, r6, #3
 8011b4e:	1cf9      	adds	r1, r7, #3
 8011b50:	4420      	add	r0, r4
 8011b52:	f00a fb5f 	bl	801c214 <memcpy>
      tot_len += len - 3U;
 8011b56:	1ee0      	subs	r0, r4, #3
 8011b58:	4430      	add	r0, r6
      status = BLE_COMM_TP_WAIT_END;
 8011b5a:	2301      	movs	r3, #1
      tot_len += len - 3U;
 8011b5c:	f8c5 0418 	str.w	r0, [r5, #1048]	; 0x418
      status = BLE_COMM_TP_WAIT_END;
 8011b60:	f885 3414 	strb.w	r3, [r5, #1044]	; 0x414
 8011b64:	e7d1      	b.n	8011b0a <BLE_Command_TP_Parse+0x1a>
    else if (packet_type == BLE_COMM_TP_START_END_PACKET) 
 8011b66:	2a20      	cmp	r2, #32
 8011b68:	d1d0      	bne.n	8011b0c <BLE_Command_TP_Parse+0x1c>
      message_length |= buffer_in[2];
 8011b6a:	f8b1 2001 	ldrh.w	r2, [r1, #1]
 8011b6e:	ba52      	rev16	r2, r2
 8011b70:	b292      	uxth	r2, r2
      *buffer_out = (uint8_t*)BLE_MallocFunction((message_length) * sizeof(uint8_t));        
 8011b72:	4610      	mov	r0, r2
 8011b74:	9203      	str	r2, [sp, #12]
 8011b76:	f00a fb3d 	bl	801c1f4 <malloc>
      if(*buffer_out == NULL) {
 8011b7a:	9a03      	ldr	r2, [sp, #12]
      *buffer_out = (uint8_t*)BLE_MallocFunction((message_length) * sizeof(uint8_t));        
 8011b7c:	f8c8 0000 	str.w	r0, [r8]
      if(*buffer_out == NULL) {
 8011b80:	b958      	cbnz	r0, 8011b9a <BLE_Command_TP_Parse+0xaa>
        BLE_MANAGER_PRINTF("Error: Mem alloc error [%d]: %d@%s\r\n", message_length, __LINE__, __FILE__);
 8011b82:	4b21      	ldr	r3, [pc, #132]	; (8011c08 <BLE_Command_TP_Parse+0x118>)
 8011b84:	4921      	ldr	r1, [pc, #132]	; (8011c0c <BLE_Command_TP_Parse+0x11c>)
 8011b86:	9300      	str	r3, [sp, #0]
 8011b88:	a804      	add	r0, sp, #16
 8011b8a:	f640 1375 	movw	r3, #2421	; 0x975
 8011b8e:	f00b f8d3 	bl	801cd38 <siprintf>
 8011b92:	4601      	mov	r1, r0
 8011b94:	a804      	add	r0, sp, #16
 8011b96:	f007 ff09 	bl	80199ac <CDC_Fill_Buffer>
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[3], (len - 3U));
 8011b9a:	f8d5 4418 	ldr.w	r4, [r5, #1048]	; 0x418
 8011b9e:	f8d8 0000 	ldr.w	r0, [r8]
 8011ba2:	1ef2      	subs	r2, r6, #3
 8011ba4:	4420      	add	r0, r4
 8011ba6:	1cf9      	adds	r1, r7, #3
 8011ba8:	f00a fb34 	bl	801c214 <memcpy>
      tot_len += len - 3U;
 8011bac:	3c03      	subs	r4, #3
      tot_len = 0;
 8011bae:	2300      	movs	r3, #0
      tot_len += len - 1U;
 8011bb0:	19a0      	adds	r0, r4, r6
      tot_len = 0;
 8011bb2:	f8c5 3418 	str.w	r3, [r5, #1048]	; 0x418
      status = BLE_COMM_TP_WAIT_START; 
 8011bb6:	f885 3414 	strb.w	r3, [r5, #1044]	; 0x414
 8011bba:	e7a7      	b.n	8011b0c <BLE_Command_TP_Parse+0x1c>
    if (packet_type == BLE_COMM_TP_MIDDLE_PACKET) 
 8011bbc:	2a40      	cmp	r2, #64	; 0x40
 8011bbe:	d10d      	bne.n	8011bdc <BLE_Command_TP_Parse+0xec>
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[1], (len - 1U));
 8011bc0:	f8d5 4418 	ldr.w	r4, [r5, #1048]	; 0x418
 8011bc4:	f8d8 0000 	ldr.w	r0, [r8]
 8011bc8:	1e72      	subs	r2, r6, #1
 8011bca:	3101      	adds	r1, #1
 8011bcc:	4420      	add	r0, r4
 8011bce:	f00a fb21 	bl	801c214 <memcpy>
      tot_len += len - 1U;
 8011bd2:	1e60      	subs	r0, r4, #1
 8011bd4:	4430      	add	r0, r6
 8011bd6:	f8c5 0418 	str.w	r0, [r5, #1048]	; 0x418
      buff_out_len = 0; 
 8011bda:	e796      	b.n	8011b0a <BLE_Command_TP_Parse+0x1a>
    else if (packet_type == BLE_COMM_TP_END_PACKET) 
 8011bdc:	2a80      	cmp	r2, #128	; 0x80
 8011bde:	d10a      	bne.n	8011bf6 <BLE_Command_TP_Parse+0x106>
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[1], (len - 1U));
 8011be0:	f8d5 4418 	ldr.w	r4, [r5, #1048]	; 0x418
 8011be4:	f8d8 0000 	ldr.w	r0, [r8]
 8011be8:	1e72      	subs	r2, r6, #1
 8011bea:	4420      	add	r0, r4
 8011bec:	3101      	adds	r1, #1
 8011bee:	f00a fb11 	bl	801c214 <memcpy>
      tot_len += len - 1U;
 8011bf2:	3c01      	subs	r4, #1
 8011bf4:	e7db      	b.n	8011bae <BLE_Command_TP_Parse+0xbe>
      status = BLE_COMM_TP_WAIT_START;
 8011bf6:	2000      	movs	r0, #0
 8011bf8:	f885 0414 	strb.w	r0, [r5, #1044]	; 0x414
      tot_len = 0;
 8011bfc:	f8c5 0418 	str.w	r0, [r5, #1048]	; 0x418
      buff_out_len = 0; /* error */
 8011c00:	e784      	b.n	8011b0c <BLE_Command_TP_Parse+0x1c>
 8011c02:	bf00      	nop
 8011c04:	2000296c 	.word	0x2000296c
 8011c08:	08023239 	.word	0x08023239
 8011c0c:	08023629 	.word	0x08023629

08011c10 <BLE_Command_TP_Encapsulate>:
* @param  buffer_in: pointer to the input data.
* @param  len: buffer in length
* @retval Buffer out length.
*/
uint32_t BLE_Command_TP_Encapsulate(uint8_t* buffer_out, uint8_t* buffer_in, uint32_t len) 
{
 8011c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t size = 0, tot_size = 0;
  uint32_t counter = 0;
  BLE_COMM_TP_Packet_Typedef packet_type = BLE_COMM_TP_START_PACKET;
 8011c14:	2500      	movs	r5, #0
{
 8011c16:	4680      	mov	r8, r0
 8011c18:	4689      	mov	r9, r1
 8011c1a:	4617      	mov	r7, r2
  uint32_t counter = 0;
 8011c1c:	462e      	mov	r6, r5
  uint32_t size = 0, tot_size = 0;
 8011c1e:	462c      	mov	r4, r5
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_MIDDLE_PACKET));
      tot_size++;
      break;
    case BLE_COMM_TP_END_PACKET: 
      /*Last part of an BLE Command packet*/
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_END_PACKET));
 8011c20:	f04f 0a80 	mov.w	sl, #128	; 0x80
  while (counter < len) 
 8011c24:	42be      	cmp	r6, r7
 8011c26:	d302      	bcc.n	8011c2e <BLE_Command_TP_Encapsulate+0x1e>
    /*length variables update*/
    counter += size;
    tot_size += size;
  }
  return tot_size;
}
 8011c28:	4620      	mov	r0, r4
 8011c2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size = MIN(19U, (len - counter));
 8011c2e:	1bba      	subs	r2, r7, r6
 8011c30:	2a13      	cmp	r2, #19
 8011c32:	4693      	mov	fp, r2
 8011c34:	bf28      	it	cs
 8011c36:	f04f 0b13 	movcs.w	fp, #19
    if ((len - counter) <= 19U) 
 8011c3a:	2a13      	cmp	r2, #19
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_END_PACKET));
 8011c3c:	eb08 0304 	add.w	r3, r8, r4
    if ((len - counter) <= 19U) 
 8011c40:	d804      	bhi.n	8011c4c <BLE_Command_TP_Encapsulate+0x3c>
      if (counter == 0U) 
 8011c42:	3401      	adds	r4, #1
 8011c44:	b186      	cbz	r6, 8011c68 <BLE_Command_TP_Encapsulate+0x58>
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_END_PACKET));
 8011c46:	f883 a000 	strb.w	sl, [r3]
 8011c4a:	e00f      	b.n	8011c6c <BLE_Command_TP_Encapsulate+0x5c>
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_START_PACKET));
 8011c4c:	701d      	strb	r5, [r3, #0]
      tot_size++;
 8011c4e:	3401      	adds	r4, #1
    switch (packet_type) 
 8011c50:	b905      	cbnz	r5, 8011c54 <BLE_Command_TP_Encapsulate+0x44>
      packet_type = BLE_COMM_TP_MIDDLE_PACKET;
 8011c52:	2540      	movs	r5, #64	; 0x40
    memcpy((uint8_t*) &buffer_out[tot_size], (uint8_t *) &buffer_in[counter], size);
 8011c54:	eb09 0106 	add.w	r1, r9, r6
 8011c58:	eb08 0004 	add.w	r0, r8, r4
 8011c5c:	465a      	mov	r2, fp
 8011c5e:	f00a fad9 	bl	801c214 <memcpy>
    counter += size;
 8011c62:	445e      	add	r6, fp
    tot_size += size;
 8011c64:	445c      	add	r4, fp
 8011c66:	e7dd      	b.n	8011c24 <BLE_Command_TP_Encapsulate+0x14>
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_START_END_PACKET));
 8011c68:	2220      	movs	r2, #32
 8011c6a:	701a      	strb	r2, [r3, #0]
      packet_type = BLE_COMM_TP_START_PACKET;
 8011c6c:	2500      	movs	r5, #0
      break;
 8011c6e:	e7f1      	b.n	8011c54 <BLE_Command_TP_Encapsulate+0x44>

08011c70 <BLE_ExtConfiguration_Update>:
{
 8011c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    length_wTP = (length/19U)+length;
 8011c74:	2213      	movs	r2, #19
 8011c76:	fbb1 f3f2 	udiv	r3, r1, r2
  if ((length % 19U) == 0U) {
 8011c7a:	fb02 1213 	mls	r2, r2, r3, r1
{
 8011c7e:	b0c3      	sub	sp, #268	; 0x10c
 8011c80:	4606      	mov	r6, r0
 8011c82:	460c      	mov	r4, r1
  if ((length % 19U) == 0U) {
 8011c84:	b992      	cbnz	r2, 8011cac <BLE_ExtConfiguration_Update+0x3c>
    length_wTP = (length/19U)+length;
 8011c86:	1858      	adds	r0, r3, r1
  JSON_string_command_wTP = BLE_MallocFunction(sizeof(uint8_t) * length_wTP);
 8011c88:	f00a fab4 	bl	801c1f4 <malloc>
  if(JSON_string_command_wTP==NULL) {
 8011c8c:	4605      	mov	r5, r0
 8011c8e:	b980      	cbnz	r0, 8011cb2 <BLE_ExtConfiguration_Update+0x42>
    BLE_MANAGER_PRINTF("Error: Mem calloc error [%ld]: %d@%s\r\n",length,__LINE__,__FILE__);
 8011c90:	4b24      	ldr	r3, [pc, #144]	; (8011d24 <BLE_ExtConfiguration_Update+0xb4>)
 8011c92:	4925      	ldr	r1, [pc, #148]	; (8011d28 <BLE_ExtConfiguration_Update+0xb8>)
 8011c94:	9300      	str	r3, [sp, #0]
 8011c96:	4622      	mov	r2, r4
 8011c98:	f44f 63cd 	mov.w	r3, #1640	; 0x668
 8011c9c:	a802      	add	r0, sp, #8
 8011c9e:	f00b f84b 	bl	801cd38 <siprintf>
 8011ca2:	4601      	mov	r1, r0
      BLE_MANAGER_PRINTF("Error: Updating Bat Char\r\n");
 8011ca4:	a802      	add	r0, sp, #8
 8011ca6:	f007 fe81 	bl	80199ac <CDC_Fill_Buffer>
 8011caa:	e02c      	b.n	8011d06 <BLE_ExtConfiguration_Update+0x96>
    length_wTP = (length/19U)+1U+length;
 8011cac:	1c48      	adds	r0, r1, #1
 8011cae:	4418      	add	r0, r3
 8011cb0:	e7ea      	b.n	8011c88 <BLE_ExtConfiguration_Update+0x18>
    tot_len = BLE_Command_TP_Encapsulate(JSON_string_command_wTP, data, length);
 8011cb2:	4622      	mov	r2, r4
 8011cb4:	4631      	mov	r1, r6
 8011cb6:	f7ff ffab 	bl	8011c10 <BLE_Command_TP_Encapsulate>
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharExtConfig, 0, length,data);
 8011cba:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8011d38 <BLE_ExtConfiguration_Update+0xc8>
    tot_len = BLE_Command_TP_Encapsulate(JSON_string_command_wTP, data, length);
 8011cbe:	4607      	mov	r7, r0
    j = 0;
 8011cc0:	2400      	movs	r4, #0
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharExtConfig, 0, length,data);
 8011cc2:	f508 7964 	add.w	r9, r8, #912	; 0x390
    while (j < tot_len) {
 8011cc6:	42bc      	cmp	r4, r7
 8011cc8:	d304      	bcc.n	8011cd4 <BLE_ExtConfiguration_Update+0x64>
    BLE_FreeFunction(JSON_string_command_wTP);
 8011cca:	4628      	mov	r0, r5
 8011ccc:	f00a fa9a 	bl	801c204 <free>
    return BLE_STATUS_SUCCESS;
 8011cd0:	2000      	movs	r0, #0
 8011cd2:	e019      	b.n	8011d08 <BLE_ExtConfiguration_Update+0x98>
      len = MIN(20U, (tot_len - j));
 8011cd4:	1b3e      	subs	r6, r7, r4
 8011cd6:	2e14      	cmp	r6, #20
 8011cd8:	bf28      	it	cs
 8011cda:	2614      	movcs	r6, #20
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharExtConfig, 0, length,data);
 8011cdc:	192b      	adds	r3, r5, r4
 8011cde:	b2f2      	uxtb	r2, r6
 8011ce0:	2100      	movs	r1, #0
 8011ce2:	4648      	mov	r0, r9
 8011ce4:	f7ff fa7c 	bl	80111e0 <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 8011ce8:	b1b8      	cbz	r0, 8011d1a <BLE_ExtConfiguration_Update+0xaa>
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 8011cea:	f898 3008 	ldrb.w	r3, [r8, #8]
 8011cee:	2b01      	cmp	r3, #1
 8011cf0:	d10d      	bne.n	8011d0e <BLE_ExtConfiguration_Update+0x9e>
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Bat Char\n");
 8011cf2:	490e      	ldr	r1, [pc, #56]	; (8011d2c <BLE_ExtConfiguration_Update+0xbc>)
 8011cf4:	480e      	ldr	r0, [pc, #56]	; (8011d30 <BLE_ExtConfiguration_Update+0xc0>)
 8011cf6:	f00b f88f 	bl	801ce18 <strcpy>
 8011cfa:	2118      	movs	r1, #24
      Stderr_Update(BufferToWrite,BytesToWrite);
 8011cfc:	480c      	ldr	r0, [pc, #48]	; (8011d30 <BLE_ExtConfiguration_Update+0xc0>)
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Bat Char\n");
 8011cfe:	f888 12d5 	strb.w	r1, [r8, #725]	; 0x2d5
      Stderr_Update(BufferToWrite,BytesToWrite);
 8011d02:	f7ff facb 	bl	801129c <Stderr_Update>
        return BLE_STATUS_ERROR;
 8011d06:	2047      	movs	r0, #71	; 0x47
}
 8011d08:	b043      	add	sp, #268	; 0x10c
 8011d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      BLE_MANAGER_PRINTF("Error: Updating Bat Char\r\n");
 8011d0e:	4909      	ldr	r1, [pc, #36]	; (8011d34 <BLE_ExtConfiguration_Update+0xc4>)
 8011d10:	a802      	add	r0, sp, #8
 8011d12:	f00b f881 	bl	801ce18 <strcpy>
 8011d16:	211a      	movs	r1, #26
 8011d18:	e7c4      	b.n	8011ca4 <BLE_ExtConfiguration_Update+0x34>
      BLE_MANAGER_DELAY(20);
 8011d1a:	2014      	movs	r0, #20
 8011d1c:	f006 ff64 	bl	8018be8 <HAL_Delay>
      j += len;
 8011d20:	4434      	add	r4, r6
 8011d22:	e7d0      	b.n	8011cc6 <BLE_ExtConfiguration_Update+0x56>
 8011d24:	08023239 	.word	0x08023239
 8011d28:	0802364e 	.word	0x0802364e
 8011d2c:	08022bf9 	.word	0x08022bf9
 8011d30:	20002b41 	.word	0x20002b41
 8011d34:	08023675 	.word	0x08023675
 8011d38:	2000296c 	.word	0x2000296c

08011d3c <Write_Request_ExtConfig.part.0>:
static void Write_Request_ExtConfig(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
 8011d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    CommandType = BLE_ExtConfig_ExtractCommandType(hs_command_buffer);
 8011d40:	4c90      	ldr	r4, [pc, #576]	; (8011f84 <Write_Request_ExtConfig.part.0+0x248>)
static void Write_Request_ExtConfig(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
 8011d42:	f6ad 1d28 	subw	sp, sp, #2344	; 0x928
  JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 8011d46:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 8011d4a:	f003 fad1 	bl	80152f0 <json_parse_string>
 8011d4e:	4607      	mov	r7, r0
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 8011d50:	f002 fd7d 	bl	801484e <json_value_get_object>
  if (json_object_dothas_value(JSON_ParseHandler,"command")) {
 8011d54:	498c      	ldr	r1, [pc, #560]	; (8011f88 <Write_Request_ExtConfig.part.0+0x24c>)
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 8011d56:	4681      	mov	r9, r0
  if (json_object_dothas_value(JSON_ParseHandler,"command")) {
 8011d58:	f002 fd9a 	bl	8014890 <json_object_dothas_value>
 8011d5c:	b9e0      	cbnz	r0, 8011d98 <Write_Request_ExtConfig.part.0+0x5c>
  BLE_ExtConfigCommandType ReturnCode = EXT_CONFIG_COM_NOT_VALID;
 8011d5e:	2500      	movs	r5, #0
  json_value_free(tempJSON);
 8011d60:	4638      	mov	r0, r7
    switch(CommandType)
 8011d62:	3d01      	subs	r5, #1
  json_value_free(tempJSON);
 8011d64:	f002 ff48 	bl	8014bf8 <json_value_free>
    switch(CommandType)
 8011d68:	2d12      	cmp	r5, #18
 8011d6a:	f200 83fa 	bhi.w	8012562 <Write_Request_ExtConfig.part.0+0x826>
 8011d6e:	e8df f015 	tbh	[pc, r5, lsl #1]
 8011d72:	002b      	.short	0x002b
 8011d74:	02360215 	.word	0x02360215
 8011d78:	019c0137 	.word	0x019c0137
 8011d7c:	01e101c7 	.word	0x01e101c7
 8011d80:	025e01fb 	.word	0x025e01fb
 8011d84:	027f026f 	.word	0x027f026f
 8011d88:	0343016c 	.word	0x0343016c
 8011d8c:	02eb028f 	.word	0x02eb028f
 8011d90:	03890317 	.word	0x03890317
 8011d94:	03e503b9 	.word	0x03e503b9
 8011d98:	4e7c      	ldr	r6, [pc, #496]	; (8011f8c <Write_Request_ExtConfig.part.0+0x250>)
      if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),StandardExtConfigCommands[SearchCommand].CommandString) == 0) {
 8011d9a:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8011f88 <Write_Request_ExtConfig.part.0+0x24c>
  if (json_object_dothas_value(JSON_ParseHandler,"command")) {
 8011d9e:	f04f 0801 	mov.w	r8, #1
      if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),StandardExtConfigCommands[SearchCommand].CommandString) == 0) {
 8011da2:	4651      	mov	r1, sl
 8011da4:	4648      	mov	r0, r9
 8011da6:	f002 fd96 	bl	80148d6 <json_object_dotget_string>
 8011daa:	68f1      	ldr	r1, [r6, #12]
 8011dac:	f7f2 fa88 	bl	80042c0 <strcmp>
 8011db0:	b910      	cbnz	r0, 8011db8 <Write_Request_ExtConfig.part.0+0x7c>
        ReturnCode = StandardExtConfigCommands[SearchCommand].CommandType;
 8011db2:	7a35      	ldrb	r5, [r6, #8]
    while((ReturnCode == EXT_CONFIG_COM_NOT_VALID) && (SearchCommand<((uint8_t)EXT_CONFIG_COMMAND_NUMBER))) {
 8011db4:	2d00      	cmp	r5, #0
 8011db6:	d1d3      	bne.n	8011d60 <Write_Request_ExtConfig.part.0+0x24>
 8011db8:	f108 0801 	add.w	r8, r8, #1
 8011dbc:	f1b8 0f14 	cmp.w	r8, #20
 8011dc0:	f106 0608 	add.w	r6, r6, #8
 8011dc4:	d1ed      	bne.n	8011da2 <Write_Request_ExtConfig.part.0+0x66>
 8011dc6:	e7ca      	b.n	8011d5e <Write_Request_ExtConfig.part.0+0x22>
        JSON_Value *tempJSON = json_value_init_object();
 8011dc8:	f002 ffba 	bl	8014d40 <json_value_init_object>
 8011dcc:	4606      	mov	r6, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 8011dce:	f002 fd3e 	bl	801484e <json_value_get_object>
        if(CustomExtConfigReadCustomCommandsCallback!=NULL) {
 8011dd2:	f8d4 53fc 	ldr.w	r5, [r4, #1020]	; 0x3fc
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 8011dd6:	4607      	mov	r7, r0
        if(CustomExtConfigReadCustomCommandsCallback!=NULL) {
 8011dd8:	b12d      	cbz	r5, 8011de6 <Write_Request_ExtConfig.part.0+0xaa>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_CUSTOM_COMMAND].CommandString);
 8011dda:	4a6d      	ldr	r2, [pc, #436]	; (8011f90 <Write_Request_ExtConfig.part.0+0x254>)
 8011ddc:	496d      	ldr	r1, [pc, #436]	; (8011f94 <Write_Request_ExtConfig.part.0+0x258>)
 8011dde:	a84a      	add	r0, sp, #296	; 0x128
 8011de0:	f00a ffaa 	bl	801cd38 <siprintf>
 8011de4:	2512      	movs	r5, #18
        if(CustomExtConfigReadSensorsConfigCommandsCallback!=NULL) {
 8011de6:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
 8011dea:	b133      	cbz	r3, 8011dfa <Write_Request_ExtConfig.part.0+0xbe>
           WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_SENSOR_CONFIG].CommandString);
 8011dec:	ab4a      	add	r3, sp, #296	; 0x128
 8011dee:	1958      	adds	r0, r3, r5
 8011df0:	4a69      	ldr	r2, [pc, #420]	; (8011f98 <Write_Request_ExtConfig.part.0+0x25c>)
 8011df2:	4968      	ldr	r1, [pc, #416]	; (8011f94 <Write_Request_ExtConfig.part.0+0x258>)
 8011df4:	f00a ffa0 	bl	801cd38 <siprintf>
 8011df8:	3512      	adds	r5, #18
        if(CustomExtConfigRebootOnDFUModeCommandCallback!=NULL) {
 8011dfa:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8011dfe:	b133      	cbz	r3, 8011e0e <Write_Request_ExtConfig.part.0+0xd2>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_DFU].CommandString);
 8011e00:	ab4a      	add	r3, sp, #296	; 0x128
 8011e02:	1958      	adds	r0, r3, r5
 8011e04:	4a65      	ldr	r2, [pc, #404]	; (8011f9c <Write_Request_ExtConfig.part.0+0x260>)
 8011e06:	4963      	ldr	r1, [pc, #396]	; (8011f94 <Write_Request_ExtConfig.part.0+0x258>)
 8011e08:	f00a ff96 	bl	801cd38 <siprintf>
 8011e0c:	3504      	adds	r5, #4
        if(CustomExtConfigPowerOffCommandCallback!=NULL) {
 8011e0e:	f8d4 33cc 	ldr.w	r3, [r4, #972]	; 0x3cc
 8011e12:	b133      	cbz	r3, 8011e22 <Write_Request_ExtConfig.part.0+0xe6>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_OFF].CommandString);
 8011e14:	ab4a      	add	r3, sp, #296	; 0x128
 8011e16:	1958      	adds	r0, r3, r5
 8011e18:	4a61      	ldr	r2, [pc, #388]	; (8011fa0 <Write_Request_ExtConfig.part.0+0x264>)
 8011e1a:	495e      	ldr	r1, [pc, #376]	; (8011f94 <Write_Request_ExtConfig.part.0+0x258>)
 8011e1c:	f00a ff8c 	bl	801cd38 <siprintf>
 8011e20:	3504      	adds	r5, #4
        if(CustomExtConfigSetNameCommandCallback!=NULL) {
 8011e22:	f8d4 33d0 	ldr.w	r3, [r4, #976]	; 0x3d0
 8011e26:	b133      	cbz	r3, 8011e36 <Write_Request_ExtConfig.part.0+0xfa>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_NAME].CommandString);
 8011e28:	ab4a      	add	r3, sp, #296	; 0x128
 8011e2a:	1958      	adds	r0, r3, r5
 8011e2c:	4a5d      	ldr	r2, [pc, #372]	; (8011fa4 <Write_Request_ExtConfig.part.0+0x268>)
 8011e2e:	4959      	ldr	r1, [pc, #356]	; (8011f94 <Write_Request_ExtConfig.part.0+0x258>)
 8011e30:	f00a ff82 	bl	801cd38 <siprintf>
 8011e34:	3508      	adds	r5, #8
        if(CustomExtConfigSetTimeCommandCallback!=NULL) {
 8011e36:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8011e3a:	b133      	cbz	r3, 8011e4a <Write_Request_ExtConfig.part.0+0x10e>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_TIME].CommandString);
 8011e3c:	ab4a      	add	r3, sp, #296	; 0x128
 8011e3e:	1958      	adds	r0, r3, r5
 8011e40:	4a59      	ldr	r2, [pc, #356]	; (8011fa8 <Write_Request_ExtConfig.part.0+0x26c>)
 8011e42:	4954      	ldr	r1, [pc, #336]	; (8011f94 <Write_Request_ExtConfig.part.0+0x258>)
 8011e44:	f00a ff78 	bl	801cd38 <siprintf>
 8011e48:	3508      	adds	r5, #8
        if(CustomExtConfigSetDateCommandCallback!=NULL) {
 8011e4a:	f8d4 33d8 	ldr.w	r3, [r4, #984]	; 0x3d8
 8011e4e:	b133      	cbz	r3, 8011e5e <Write_Request_ExtConfig.part.0+0x122>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_DATE].CommandString);
 8011e50:	ab4a      	add	r3, sp, #296	; 0x128
 8011e52:	1958      	adds	r0, r3, r5
 8011e54:	4a55      	ldr	r2, [pc, #340]	; (8011fac <Write_Request_ExtConfig.part.0+0x270>)
 8011e56:	494f      	ldr	r1, [pc, #316]	; (8011f94 <Write_Request_ExtConfig.part.0+0x258>)
 8011e58:	f00a ff6e 	bl	801cd38 <siprintf>
 8011e5c:	3508      	adds	r5, #8
        if(CustomExtConfigSetWiFiCommandCallback!=NULL) {
 8011e5e:	f8d4 33dc 	ldr.w	r3, [r4, #988]	; 0x3dc
 8011e62:	b133      	cbz	r3, 8011e72 <Write_Request_ExtConfig.part.0+0x136>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_WIFI].CommandString);
 8011e64:	ab4a      	add	r3, sp, #296	; 0x128
 8011e66:	1958      	adds	r0, r3, r5
 8011e68:	4a51      	ldr	r2, [pc, #324]	; (8011fb0 <Write_Request_ExtConfig.part.0+0x274>)
 8011e6a:	494a      	ldr	r1, [pc, #296]	; (8011f94 <Write_Request_ExtConfig.part.0+0x258>)
 8011e6c:	f00a ff64 	bl	801cd38 <siprintf>
 8011e70:	3508      	adds	r5, #8
        if(CustomExtConfigChangePinCommandCallback!=NULL) {
 8011e72:	f8d4 33e0 	ldr.w	r3, [r4, #992]	; 0x3e0
 8011e76:	b133      	cbz	r3, 8011e86 <Write_Request_ExtConfig.part.0+0x14a>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_CHANGE_PIN].CommandString);
 8011e78:	ab4a      	add	r3, sp, #296	; 0x128
 8011e7a:	1958      	adds	r0, r3, r5
 8011e7c:	4a4d      	ldr	r2, [pc, #308]	; (8011fb4 <Write_Request_ExtConfig.part.0+0x278>)
 8011e7e:	4945      	ldr	r1, [pc, #276]	; (8011f94 <Write_Request_ExtConfig.part.0+0x258>)
 8011e80:	f00a ff5a 	bl	801cd38 <siprintf>
 8011e84:	350a      	adds	r5, #10
        if(CustomExtConfigClearDBCommandCallback!=NULL) {
 8011e86:	f8d4 33e4 	ldr.w	r3, [r4, #996]	; 0x3e4
 8011e8a:	b133      	cbz	r3, 8011e9a <Write_Request_ExtConfig.part.0+0x15e>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_CLEAR_DB].CommandString);
 8011e8c:	ab4a      	add	r3, sp, #296	; 0x128
 8011e8e:	1958      	adds	r0, r3, r5
 8011e90:	4a49      	ldr	r2, [pc, #292]	; (8011fb8 <Write_Request_ExtConfig.part.0+0x27c>)
 8011e92:	4940      	ldr	r1, [pc, #256]	; (8011f94 <Write_Request_ExtConfig.part.0+0x258>)
 8011e94:	f00a ff50 	bl	801cd38 <siprintf>
 8011e98:	3508      	adds	r5, #8
        if(CustomExtConfigReadCertCommandCallback!=NULL) {
 8011e9a:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 8011e9e:	b133      	cbz	r3, 8011eae <Write_Request_ExtConfig.part.0+0x172>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_CERT].CommandString);
 8011ea0:	ab4a      	add	r3, sp, #296	; 0x128
 8011ea2:	1958      	adds	r0, r3, r5
 8011ea4:	4a45      	ldr	r2, [pc, #276]	; (8011fbc <Write_Request_ExtConfig.part.0+0x280>)
 8011ea6:	493b      	ldr	r1, [pc, #236]	; (8011f94 <Write_Request_ExtConfig.part.0+0x258>)
 8011ea8:	f00a ff46 	bl	801cd38 <siprintf>
 8011eac:	3509      	adds	r5, #9
        if(CustomExtConfigSetCertCommandCallback!=NULL) {
 8011eae:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
 8011eb2:	b133      	cbz	r3, 8011ec2 <Write_Request_ExtConfig.part.0+0x186>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_CERT].CommandString);
 8011eb4:	ab4a      	add	r3, sp, #296	; 0x128
 8011eb6:	1958      	adds	r0, r3, r5
 8011eb8:	4a41      	ldr	r2, [pc, #260]	; (8011fc0 <Write_Request_ExtConfig.part.0+0x284>)
 8011eba:	4936      	ldr	r1, [pc, #216]	; (8011f94 <Write_Request_ExtConfig.part.0+0x258>)
 8011ebc:	f00a ff3c 	bl	801cd38 <siprintf>
 8011ec0:	3508      	adds	r5, #8
        if(CustomExtConfigUidCommandCallback!=NULL) {
 8011ec2:	f8d4 33e8 	ldr.w	r3, [r4, #1000]	; 0x3e8
 8011ec6:	b133      	cbz	r3, 8011ed6 <Write_Request_ExtConfig.part.0+0x19a>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_UID].CommandString);
 8011ec8:	ab4a      	add	r3, sp, #296	; 0x128
 8011eca:	1958      	adds	r0, r3, r5
 8011ecc:	4a3d      	ldr	r2, [pc, #244]	; (8011fc4 <Write_Request_ExtConfig.part.0+0x288>)
 8011ece:	4931      	ldr	r1, [pc, #196]	; (8011f94 <Write_Request_ExtConfig.part.0+0x258>)
 8011ed0:	f00a ff32 	bl	801cd38 <siprintf>
 8011ed4:	3504      	adds	r5, #4
        if(CustomExtConfigInfoCommandCallback!=NULL) {
 8011ed6:	f8d4 33ec 	ldr.w	r3, [r4, #1004]	; 0x3ec
 8011eda:	b133      	cbz	r3, 8011eea <Write_Request_ExtConfig.part.0+0x1ae>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_INFO].CommandString);
 8011edc:	ab4a      	add	r3, sp, #296	; 0x128
 8011ede:	1958      	adds	r0, r3, r5
 8011ee0:	4a39      	ldr	r2, [pc, #228]	; (8011fc8 <Write_Request_ExtConfig.part.0+0x28c>)
 8011ee2:	492c      	ldr	r1, [pc, #176]	; (8011f94 <Write_Request_ExtConfig.part.0+0x258>)
 8011ee4:	f00a ff28 	bl	801cd38 <siprintf>
 8011ee8:	3505      	adds	r5, #5
        if(CustomExtConfigHelpCommandCallback!=NULL) {
 8011eea:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	; 0x3f0
 8011eee:	b133      	cbz	r3, 8011efe <Write_Request_ExtConfig.part.0+0x1c2>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_HELP].CommandString);
 8011ef0:	ab4a      	add	r3, sp, #296	; 0x128
 8011ef2:	1958      	adds	r0, r3, r5
 8011ef4:	4a35      	ldr	r2, [pc, #212]	; (8011fcc <Write_Request_ExtConfig.part.0+0x290>)
 8011ef6:	4927      	ldr	r1, [pc, #156]	; (8011f94 <Write_Request_ExtConfig.part.0+0x258>)
 8011ef8:	f00a ff1e 	bl	801cd38 <siprintf>
 8011efc:	3505      	adds	r5, #5
        if(CustomExtConfigPowerStatusCommandCallback!=NULL) {
 8011efe:	f8d4 33f4 	ldr.w	r3, [r4, #1012]	; 0x3f4
 8011f02:	b133      	cbz	r3, 8011f12 <Write_Request_ExtConfig.part.0+0x1d6>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_POWER].CommandString);
 8011f04:	ab4a      	add	r3, sp, #296	; 0x128
 8011f06:	1958      	adds	r0, r3, r5
 8011f08:	4a31      	ldr	r2, [pc, #196]	; (8011fd0 <Write_Request_ExtConfig.part.0+0x294>)
 8011f0a:	4922      	ldr	r1, [pc, #136]	; (8011f94 <Write_Request_ExtConfig.part.0+0x258>)
 8011f0c:	f00a ff14 	bl	801cd38 <siprintf>
 8011f10:	350c      	adds	r5, #12
        if(CustomExtConfigVersionFwCommandCallback!=NULL) {
 8011f12:	f8d4 33f8 	ldr.w	r3, [r4, #1016]	; 0x3f8
 8011f16:	b163      	cbz	r3, 8011f32 <Write_Request_ExtConfig.part.0+0x1f6>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_VER_FW].CommandString);
 8011f18:	ab4a      	add	r3, sp, #296	; 0x128
 8011f1a:	1958      	adds	r0, r3, r5
 8011f1c:	4a2d      	ldr	r2, [pc, #180]	; (8011fd4 <Write_Request_ExtConfig.part.0+0x298>)
 8011f1e:	491d      	ldr	r1, [pc, #116]	; (8011f94 <Write_Request_ExtConfig.part.0+0x258>)
 8011f20:	f00a ff0a 	bl	801cd38 <siprintf>
 8011f24:	350a      	adds	r5, #10
          LocalBufferToWrite[WritingPointer-1]=0U;
 8011f26:	ab4a      	add	r3, sp, #296	; 0x128
 8011f28:	441d      	add	r5, r3
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	f805 3c01 	strb.w	r3, [r5, #-1]
 8011f30:	e001      	b.n	8011f36 <Write_Request_ExtConfig.part.0+0x1fa>
        if(WritingPointer!=0) {
 8011f32:	2d00      	cmp	r5, #0
 8011f34:	d1f7      	bne.n	8011f26 <Write_Request_ExtConfig.part.0+0x1ea>
        BLE_MANAGER_PRINTF("Command ReadCommand\r\n");
 8011f36:	4928      	ldr	r1, [pc, #160]	; (8011fd8 <Write_Request_ExtConfig.part.0+0x29c>)
 8011f38:	a80a      	add	r0, sp, #40	; 0x28
 8011f3a:	f00a ff6d 	bl	801ce18 <strcpy>
 8011f3e:	2115      	movs	r1, #21
 8011f40:	a80a      	add	r0, sp, #40	; 0x28
 8011f42:	f007 fd33 	bl	80199ac <CDC_Fill_Buffer>
        json_object_dotset_string(tempJSON_Obj, "Commands", (char *)LocalBufferToWrite);
 8011f46:	4925      	ldr	r1, [pc, #148]	; (8011fdc <Write_Request_ExtConfig.part.0+0x2a0>)
 8011f48:	aa4a      	add	r2, sp, #296	; 0x128
 8011f4a:	4638      	mov	r0, r7
        json_object_dotset_string(tempJSON_Obj, "UID", (char *)LocalBufferToWrite);
 8011f4c:	f003 fae2 	bl	8015514 <json_object_dotset_string>
        JSON_string_command = json_serialize_to_string(tempJSON);
 8011f50:	4630      	mov	r0, r6
 8011f52:	f003 fa0f 	bl	8015374 <json_serialize_to_string>
 8011f56:	4605      	mov	r5, r0
        JSON_size = json_serialization_size(tempJSON);
 8011f58:	4630      	mov	r0, r6
 8011f5a:	f003 f9de 	bl	801531a <json_serialization_size>
 8011f5e:	4601      	mov	r1, r0
        BLE_ExtConfiguration_Update((uint8_t*) JSON_string_command,JSON_size);
 8011f60:	4628      	mov	r0, r5
 8011f62:	f7ff fe85 	bl	8011c70 <BLE_ExtConfiguration_Update>
        BLE_FreeFunction(JSON_string_command);
 8011f66:	4628      	mov	r0, r5
 8011f68:	f00a f94c 	bl	801c204 <free>
        json_value_free(tempJSON);
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	f002 fe43 	bl	8014bf8 <json_value_free>
    BLE_FreeFunction(hs_command_buffer);
 8011f72:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 8011f76:	f00a f945 	bl	801c204 <free>
}
 8011f7a:	f60d 1d28 	addw	sp, sp, #2344	; 0x928
 8011f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f82:	bf00      	nop
 8011f84:	2000296c 	.word	0x2000296c
 8011f88:	08023690 	.word	0x08023690
 8011f8c:	08021ad4 	.word	0x08021ad4
 8011f90:	08023698 	.word	0x08023698
 8011f94:	080236aa 	.word	0x080236aa
 8011f98:	080236ae 	.word	0x080236ae
 8011f9c:	080236c0 	.word	0x080236c0
 8011fa0:	080236c4 	.word	0x080236c4
 8011fa4:	080236c8 	.word	0x080236c8
 8011fa8:	080236d0 	.word	0x080236d0
 8011fac:	080236d8 	.word	0x080236d8
 8011fb0:	080236e0 	.word	0x080236e0
 8011fb4:	080236e8 	.word	0x080236e8
 8011fb8:	080236f2 	.word	0x080236f2
 8011fbc:	080236fa 	.word	0x080236fa
 8011fc0:	08023703 	.word	0x08023703
 8011fc4:	0802370b 	.word	0x0802370b
 8011fc8:	0802370f 	.word	0x0802370f
 8011fcc:	08023714 	.word	0x08023714
 8011fd0:	08023719 	.word	0x08023719
 8011fd4:	08023725 	.word	0x08023725
 8011fd8:	0802372f 	.word	0x0802372f
 8011fdc:	08023818 	.word	0x08023818
      if(CustomExtConfigUidCommandCallback!=NULL) {
 8011fe0:	f8d4 33e8 	ldr.w	r3, [r4, #1000]	; 0x3e8
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d0c4      	beq.n	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        JSON_Value *tempJSON = json_value_init_object();
 8011fe8:	f002 feaa 	bl	8014d40 <json_value_init_object>
 8011fec:	4606      	mov	r6, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 8011fee:	f002 fc2e 	bl	801484e <json_value_get_object>
        BLE_MANAGER_PRINTF("Command UID\r\n");
 8011ff2:	49be      	ldr	r1, [pc, #760]	; (80122ec <Write_Request_ExtConfig.part.0+0x5b0>)
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 8011ff4:	4605      	mov	r5, r0
        BLE_MANAGER_PRINTF("Command UID\r\n");
 8011ff6:	a84a      	add	r0, sp, #296	; 0x128
 8011ff8:	f00a ff0e 	bl	801ce18 <strcpy>
 8011ffc:	210d      	movs	r1, #13
 8011ffe:	a84a      	add	r0, sp, #296	; 0x128
 8012000:	f007 fcd4 	bl	80199ac <CDC_Fill_Buffer>
        CustomExtConfigUidCommandCallback(&uid);
 8012004:	f8d4 33e8 	ldr.w	r3, [r4, #1000]	; 0x3e8
 8012008:	a80a      	add	r0, sp, #40	; 0x28
 801200a:	4798      	blx	r3
                uid[ 3],uid[ 2],uid[ 1],uid[ 0],
 801200c:	990a      	ldr	r1, [sp, #40]	; 0x28
        sprintf((char *)LocalBufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X",
 801200e:	7a08      	ldrb	r0, [r1, #8]
 8012010:	78ca      	ldrb	r2, [r1, #3]
 8012012:	788b      	ldrb	r3, [r1, #2]
 8012014:	9009      	str	r0, [sp, #36]	; 0x24
 8012016:	7a48      	ldrb	r0, [r1, #9]
 8012018:	9008      	str	r0, [sp, #32]
 801201a:	7a88      	ldrb	r0, [r1, #10]
 801201c:	9007      	str	r0, [sp, #28]
 801201e:	7ac8      	ldrb	r0, [r1, #11]
 8012020:	9006      	str	r0, [sp, #24]
 8012022:	7908      	ldrb	r0, [r1, #4]
 8012024:	9005      	str	r0, [sp, #20]
 8012026:	7948      	ldrb	r0, [r1, #5]
 8012028:	9004      	str	r0, [sp, #16]
 801202a:	7988      	ldrb	r0, [r1, #6]
 801202c:	9003      	str	r0, [sp, #12]
 801202e:	79c8      	ldrb	r0, [r1, #7]
 8012030:	9002      	str	r0, [sp, #8]
 8012032:	7808      	ldrb	r0, [r1, #0]
 8012034:	9001      	str	r0, [sp, #4]
 8012036:	7849      	ldrb	r1, [r1, #1]
 8012038:	9100      	str	r1, [sp, #0]
 801203a:	a84a      	add	r0, sp, #296	; 0x128
 801203c:	49ac      	ldr	r1, [pc, #688]	; (80122f0 <Write_Request_ExtConfig.part.0+0x5b4>)
 801203e:	f00a fe7b 	bl	801cd38 <siprintf>
        json_object_dotset_string(tempJSON_Obj, "UID", (char *)LocalBufferToWrite);
 8012042:	49ac      	ldr	r1, [pc, #688]	; (80122f4 <Write_Request_ExtConfig.part.0+0x5b8>)
 8012044:	aa4a      	add	r2, sp, #296	; 0x128
 8012046:	4628      	mov	r0, r5
 8012048:	e780      	b.n	8011f4c <Write_Request_ExtConfig.part.0+0x210>
      if(CustomExtConfigReadSensorsConfigCommandsCallback!=NULL) {
 801204a:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
 801204e:	2b00      	cmp	r3, #0
 8012050:	d08f      	beq.n	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        JSON_Value *tempJSON = json_value_init_object();
 8012052:	f002 fe75 	bl	8014d40 <json_value_init_object>
 8012056:	4605      	mov	r5, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 8012058:	f002 fbf9 	bl	801484e <json_value_get_object>
        BLE_MANAGER_PRINTF("Command ReadSensorsConfigCommand\r\n");
 801205c:	49a6      	ldr	r1, [pc, #664]	; (80122f8 <Write_Request_ExtConfig.part.0+0x5bc>)
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 801205e:	4606      	mov	r6, r0
        BLE_MANAGER_PRINTF("Command ReadSensorsConfigCommand\r\n");
 8012060:	a84a      	add	r0, sp, #296	; 0x128
 8012062:	f00a fed9 	bl	801ce18 <strcpy>
 8012066:	2122      	movs	r1, #34	; 0x22
 8012068:	a84a      	add	r0, sp, #296	; 0x128
 801206a:	f007 fc9f 	bl	80199ac <CDC_Fill_Buffer>
        json_object_dotset_value(tempJSON_Obj, "sensor", json_value_init_array());
 801206e:	f002 fe87 	bl	8014d80 <json_value_init_array>
 8012072:	49a2      	ldr	r1, [pc, #648]	; (80122fc <Write_Request_ExtConfig.part.0+0x5c0>)
 8012074:	4602      	mov	r2, r0
 8012076:	4630      	mov	r0, r6
 8012078:	f003 f9ff 	bl	801547a <json_object_dotset_value>
        JSON_SensorArray = json_object_dotget_array(tempJSON_Obj, "sensor");
 801207c:	499f      	ldr	r1, [pc, #636]	; (80122fc <Write_Request_ExtConfig.part.0+0x5c0>)
 801207e:	4630      	mov	r0, r6
 8012080:	f002 fc1c 	bl	80148bc <json_object_dotget_array>
        CustomExtConfigReadSensorsConfigCommandsCallback(JSON_SensorArray);
 8012084:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
        CustomExtConfigReadCustomCommandsCallback(JSON_SensorArray);
 8012088:	4798      	blx	r3
        JSON_string_command = json_serialize_to_string(tempJSON);
 801208a:	4628      	mov	r0, r5
 801208c:	f003 f972 	bl	8015374 <json_serialize_to_string>
 8012090:	4606      	mov	r6, r0
        JSON_size = json_serialization_size(tempJSON);
 8012092:	4628      	mov	r0, r5
 8012094:	f003 f941 	bl	801531a <json_serialization_size>
 8012098:	4601      	mov	r1, r0
        BLE_ExtConfiguration_Update((uint8_t*) JSON_string_command,JSON_size);
 801209a:	4630      	mov	r0, r6
 801209c:	f7ff fde8 	bl	8011c70 <BLE_ExtConfiguration_Update>
        BLE_FreeFunction(JSON_string_command);
 80120a0:	4630      	mov	r0, r6
 80120a2:	f00a f8af 	bl	801c204 <free>
        json_value_free(tempJSON);
 80120a6:	4628      	mov	r0, r5
 80120a8:	e761      	b.n	8011f6e <Write_Request_ExtConfig.part.0+0x232>
      if(CustomExtConfigVersionFwCommandCallback!=NULL) {
 80120aa:	f8d4 33f8 	ldr.w	r3, [r4, #1016]	; 0x3f8
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	f43f af5f 	beq.w	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        JSON_Value *tempJSON = json_value_init_object();
 80120b4:	f002 fe44 	bl	8014d40 <json_value_init_object>
 80120b8:	4606      	mov	r6, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 80120ba:	f002 fbc8 	bl	801484e <json_value_get_object>
        BLE_MANAGER_PRINTF("Command VersionFw\r\n");
 80120be:	4990      	ldr	r1, [pc, #576]	; (8012300 <Write_Request_ExtConfig.part.0+0x5c4>)
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 80120c0:	4605      	mov	r5, r0
        BLE_MANAGER_PRINTF("Command VersionFw\r\n");
 80120c2:	a84a      	add	r0, sp, #296	; 0x128
 80120c4:	f00a fea8 	bl	801ce18 <strcpy>
 80120c8:	2113      	movs	r1, #19
 80120ca:	a84a      	add	r0, sp, #296	; 0x128
 80120cc:	f007 fc6e 	bl	80199ac <CDC_Fill_Buffer>
        CustomExtConfigVersionFwCommandCallback(LocalBufferToWrite);
 80120d0:	f8d4 33f8 	ldr.w	r3, [r4, #1016]	; 0x3f8
 80120d4:	a84a      	add	r0, sp, #296	; 0x128
 80120d6:	4798      	blx	r3
        json_object_dotset_string(tempJSON_Obj, "VersionFw", (char *)LocalBufferToWrite);
 80120d8:	498a      	ldr	r1, [pc, #552]	; (8012304 <Write_Request_ExtConfig.part.0+0x5c8>)
 80120da:	aa4a      	add	r2, sp, #296	; 0x128
        json_object_dotset_string(tempJSON_Obj, "Info", (char *)LocalBufferToWrite);
 80120dc:	4628      	mov	r0, r5
 80120de:	f003 fa19 	bl	8015514 <json_object_dotset_string>
        JSON_string_command = json_serialize_to_string(tempJSON);
 80120e2:	4630      	mov	r0, r6
 80120e4:	f003 f946 	bl	8015374 <json_serialize_to_string>
 80120e8:	4605      	mov	r5, r0
        JSON_size = json_serialization_size(tempJSON);
 80120ea:	4630      	mov	r0, r6
 80120ec:	f003 f915 	bl	801531a <json_serialization_size>
 80120f0:	4601      	mov	r1, r0
        BLE_ExtConfiguration_Update((uint8_t*) JSON_string_command,JSON_size);
 80120f2:	4628      	mov	r0, r5
 80120f4:	f7ff fdbc 	bl	8011c70 <BLE_ExtConfiguration_Update>
        BLE_FreeFunction(JSON_string_command);
 80120f8:	4628      	mov	r0, r5
 80120fa:	f00a f883 	bl	801c204 <free>
 80120fe:	e738      	b.n	8011f72 <Write_Request_ExtConfig.part.0+0x236>
      if(CustomExtConfigInfoCommandCallback!=NULL) {
 8012100:	f8d4 33ec 	ldr.w	r3, [r4, #1004]	; 0x3ec
 8012104:	2b00      	cmp	r3, #0
 8012106:	f43f af34 	beq.w	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        JSON_Value *tempJSON = json_value_init_object();
 801210a:	f002 fe19 	bl	8014d40 <json_value_init_object>
 801210e:	4606      	mov	r6, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 8012110:	f002 fb9d 	bl	801484e <json_value_get_object>
        BLE_MANAGER_PRINTF("Command Info\r\n");
 8012114:	497c      	ldr	r1, [pc, #496]	; (8012308 <Write_Request_ExtConfig.part.0+0x5cc>)
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 8012116:	4605      	mov	r5, r0
        BLE_MANAGER_PRINTF("Command Info\r\n");
 8012118:	a84a      	add	r0, sp, #296	; 0x128
 801211a:	f00a fe7d 	bl	801ce18 <strcpy>
 801211e:	210e      	movs	r1, #14
 8012120:	a84a      	add	r0, sp, #296	; 0x128
 8012122:	f007 fc43 	bl	80199ac <CDC_Fill_Buffer>
        CustomExtConfigInfoCommandCallback(LocalBufferToWrite);
 8012126:	f8d4 33ec 	ldr.w	r3, [r4, #1004]	; 0x3ec
 801212a:	a84a      	add	r0, sp, #296	; 0x128
 801212c:	4798      	blx	r3
        json_object_dotset_string(tempJSON_Obj, "Info", (char *)LocalBufferToWrite);
 801212e:	4977      	ldr	r1, [pc, #476]	; (801230c <Write_Request_ExtConfig.part.0+0x5d0>)
 8012130:	aa4a      	add	r2, sp, #296	; 0x128
 8012132:	e7d3      	b.n	80120dc <Write_Request_ExtConfig.part.0+0x3a0>
      if(CustomExtConfigHelpCommandCallback!=NULL) {
 8012134:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	; 0x3f0
 8012138:	2b00      	cmp	r3, #0
 801213a:	f43f af1a 	beq.w	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        JSON_Value *tempJSON = json_value_init_object();
 801213e:	f002 fdff 	bl	8014d40 <json_value_init_object>
 8012142:	4606      	mov	r6, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 8012144:	f002 fb83 	bl	801484e <json_value_get_object>
        BLE_MANAGER_PRINTF("Command Help\r\n");
 8012148:	4971      	ldr	r1, [pc, #452]	; (8012310 <Write_Request_ExtConfig.part.0+0x5d4>)
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 801214a:	4605      	mov	r5, r0
        BLE_MANAGER_PRINTF("Command Help\r\n");
 801214c:	a84a      	add	r0, sp, #296	; 0x128
 801214e:	f00a fe63 	bl	801ce18 <strcpy>
 8012152:	210e      	movs	r1, #14
 8012154:	a84a      	add	r0, sp, #296	; 0x128
 8012156:	f007 fc29 	bl	80199ac <CDC_Fill_Buffer>
        CustomExtConfigHelpCommandCallback(LocalBufferToWrite);
 801215a:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	; 0x3f0
 801215e:	a84a      	add	r0, sp, #296	; 0x128
 8012160:	4798      	blx	r3
        json_object_dotset_string(tempJSON_Obj, "Help", (char *)LocalBufferToWrite);
 8012162:	496c      	ldr	r1, [pc, #432]	; (8012314 <Write_Request_ExtConfig.part.0+0x5d8>)
 8012164:	aa4a      	add	r2, sp, #296	; 0x128
 8012166:	e7b9      	b.n	80120dc <Write_Request_ExtConfig.part.0+0x3a0>
       if(CustomExtConfigPowerStatusCommandCallback!=NULL) {
 8012168:	f8d4 33f4 	ldr.w	r3, [r4, #1012]	; 0x3f4
 801216c:	2b00      	cmp	r3, #0
 801216e:	f43f af00 	beq.w	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        JSON_Value *tempJSON = json_value_init_object();
 8012172:	f002 fde5 	bl	8014d40 <json_value_init_object>
 8012176:	4606      	mov	r6, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 8012178:	f002 fb69 	bl	801484e <json_value_get_object>
        BLE_MANAGER_PRINTF("Command PowerStatus\r\n");
 801217c:	4966      	ldr	r1, [pc, #408]	; (8012318 <Write_Request_ExtConfig.part.0+0x5dc>)
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 801217e:	4605      	mov	r5, r0
        BLE_MANAGER_PRINTF("Command PowerStatus\r\n");
 8012180:	a84a      	add	r0, sp, #296	; 0x128
 8012182:	f00a fe49 	bl	801ce18 <strcpy>
 8012186:	2115      	movs	r1, #21
 8012188:	a84a      	add	r0, sp, #296	; 0x128
 801218a:	f007 fc0f 	bl	80199ac <CDC_Fill_Buffer>
        CustomExtConfigPowerStatusCommandCallback(LocalBufferToWrite);
 801218e:	f8d4 33f4 	ldr.w	r3, [r4, #1012]	; 0x3f4
 8012192:	a84a      	add	r0, sp, #296	; 0x128
 8012194:	4798      	blx	r3
        json_object_dotset_string(tempJSON_Obj, "PowerStatus", (char *)LocalBufferToWrite);
 8012196:	4961      	ldr	r1, [pc, #388]	; (801231c <Write_Request_ExtConfig.part.0+0x5e0>)
 8012198:	aa4a      	add	r2, sp, #296	; 0x128
 801219a:	e79f      	b.n	80120dc <Write_Request_ExtConfig.part.0+0x3a0>
      if(CustomExtConfigReadCustomCommandsCallback!=NULL) {
 801219c:	f8d4 33fc 	ldr.w	r3, [r4, #1020]	; 0x3fc
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	f43f aee6 	beq.w	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        JSON_Value *tempJSON = json_value_init_object();
 80121a6:	f002 fdcb 	bl	8014d40 <json_value_init_object>
 80121aa:	4605      	mov	r5, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 80121ac:	f002 fb4f 	bl	801484e <json_value_get_object>
        BLE_MANAGER_PRINTF("Command ReadCustomCommand\r\n");
 80121b0:	495b      	ldr	r1, [pc, #364]	; (8012320 <Write_Request_ExtConfig.part.0+0x5e4>)
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 80121b2:	4606      	mov	r6, r0
        BLE_MANAGER_PRINTF("Command ReadCustomCommand\r\n");
 80121b4:	a84a      	add	r0, sp, #296	; 0x128
 80121b6:	f00a fe2f 	bl	801ce18 <strcpy>
 80121ba:	211b      	movs	r1, #27
 80121bc:	a84a      	add	r0, sp, #296	; 0x128
 80121be:	f007 fbf5 	bl	80199ac <CDC_Fill_Buffer>
        json_object_dotset_value(tempJSON_Obj, "CustomCommands", json_value_init_array());
 80121c2:	f002 fddd 	bl	8014d80 <json_value_init_array>
 80121c6:	4957      	ldr	r1, [pc, #348]	; (8012324 <Write_Request_ExtConfig.part.0+0x5e8>)
 80121c8:	4602      	mov	r2, r0
 80121ca:	4630      	mov	r0, r6
 80121cc:	f003 f955 	bl	801547a <json_object_dotset_value>
        JSON_SensorArray = json_object_dotget_array(tempJSON_Obj, "CustomCommands");
 80121d0:	4954      	ldr	r1, [pc, #336]	; (8012324 <Write_Request_ExtConfig.part.0+0x5e8>)
 80121d2:	4630      	mov	r0, r6
 80121d4:	f002 fb72 	bl	80148bc <json_object_dotget_array>
        CustomExtConfigReadCustomCommandsCallback(JSON_SensorArray);
 80121d8:	f8d4 33fc 	ldr.w	r3, [r4, #1020]	; 0x3fc
 80121dc:	e754      	b.n	8012088 <Write_Request_ExtConfig.part.0+0x34c>
      if(CustomExtConfigReadCertCommandCallback!=NULL) {
 80121de:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	f43f aec5 	beq.w	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        JSON_Value *tempJSON = json_value_init_object();
 80121e8:	f002 fdaa 	bl	8014d40 <json_value_init_object>
 80121ec:	4605      	mov	r5, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 80121ee:	f002 fb2e 	bl	801484e <json_value_get_object>
        BLE_MANAGER_PRINTF("Command PowerStatus\r\n");
 80121f2:	4949      	ldr	r1, [pc, #292]	; (8012318 <Write_Request_ExtConfig.part.0+0x5dc>)
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 80121f4:	4606      	mov	r6, r0
        BLE_MANAGER_PRINTF("Command PowerStatus\r\n");
 80121f6:	a84a      	add	r0, sp, #296	; 0x128
 80121f8:	f00a fe0e 	bl	801ce18 <strcpy>
 80121fc:	2115      	movs	r1, #21
 80121fe:	a84a      	add	r0, sp, #296	; 0x128
 8012200:	f007 fbd4 	bl	80199ac <CDC_Fill_Buffer>
        CustomExtConfigReadCertCommandCallback(LocalBufferToWrite);
 8012204:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 8012208:	a84a      	add	r0, sp, #296	; 0x128
 801220a:	4798      	blx	r3
        json_object_dotset_string(tempJSON_Obj, "Certificate", (char *)LocalBufferToWrite);
 801220c:	4946      	ldr	r1, [pc, #280]	; (8012328 <Write_Request_ExtConfig.part.0+0x5ec>)
 801220e:	aa4a      	add	r2, sp, #296	; 0x128
 8012210:	4630      	mov	r0, r6
 8012212:	f003 f97f 	bl	8015514 <json_object_dotset_string>
        JSON_string_command = json_serialize_to_string(tempJSON);
 8012216:	4628      	mov	r0, r5
 8012218:	f003 f8ac 	bl	8015374 <json_serialize_to_string>
 801221c:	4606      	mov	r6, r0
        JSON_size = json_serialization_size(tempJSON);
 801221e:	4628      	mov	r0, r5
 8012220:	f003 f87b 	bl	801531a <json_serialization_size>
 8012224:	4601      	mov	r1, r0
        BLE_ExtConfiguration_Update((uint8_t*) JSON_string_command,JSON_size);
 8012226:	4630      	mov	r0, r6
 8012228:	f7ff fd22 	bl	8011c70 <BLE_ExtConfiguration_Update>
 801222c:	e6a1      	b.n	8011f72 <Write_Request_ExtConfig.part.0+0x236>
      if(CustomExtConfigRebootOnDFUModeCommandCallback!=NULL) {
 801222e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8012232:	2b00      	cmp	r3, #0
 8012234:	f43f ae9d 	beq.w	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        BLE_MANAGER_PRINTF("Command DFU\r\n");
 8012238:	493c      	ldr	r1, [pc, #240]	; (801232c <Write_Request_ExtConfig.part.0+0x5f0>)
 801223a:	a84a      	add	r0, sp, #296	; 0x128
 801223c:	f00a fdec 	bl	801ce18 <strcpy>
 8012240:	210d      	movs	r1, #13
 8012242:	a84a      	add	r0, sp, #296	; 0x128
 8012244:	f007 fbb2 	bl	80199ac <CDC_Fill_Buffer>
        CustomExtConfigRebootOnDFUModeCommandCallback();
 8012248:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
        CustomExtConfigClearDBCommandCallback();
 801224c:	4798      	blx	r3
 801224e:	e690      	b.n	8011f72 <Write_Request_ExtConfig.part.0+0x236>
      if(CustomExtConfigPowerOffCommandCallback!=NULL) {
 8012250:	f8d4 33cc 	ldr.w	r3, [r4, #972]	; 0x3cc
 8012254:	2b00      	cmp	r3, #0
 8012256:	f43f ae8c 	beq.w	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        BLE_MANAGER_PRINTF("Command Off\r\n");
 801225a:	4935      	ldr	r1, [pc, #212]	; (8012330 <Write_Request_ExtConfig.part.0+0x5f4>)
 801225c:	a84a      	add	r0, sp, #296	; 0x128
 801225e:	f00a fddb 	bl	801ce18 <strcpy>
 8012262:	210d      	movs	r1, #13
 8012264:	a84a      	add	r0, sp, #296	; 0x128
 8012266:	f007 fba1 	bl	80199ac <CDC_Fill_Buffer>
        CustomExtConfigPowerOffCommandCallback();
 801226a:	f8d4 33cc 	ldr.w	r3, [r4, #972]	; 0x3cc
 801226e:	e7ed      	b.n	801224c <Write_Request_ExtConfig.part.0+0x510>
      if(CustomExtConfigClearDBCommandCallback!=NULL) {
 8012270:	f8d4 33e4 	ldr.w	r3, [r4, #996]	; 0x3e4
 8012274:	2b00      	cmp	r3, #0
 8012276:	f43f ae7c 	beq.w	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        BLE_MANAGER_PRINTF("Command ClearDB\r\n");
 801227a:	492e      	ldr	r1, [pc, #184]	; (8012334 <Write_Request_ExtConfig.part.0+0x5f8>)
 801227c:	a84a      	add	r0, sp, #296	; 0x128
 801227e:	f00a fdcb 	bl	801ce18 <strcpy>
 8012282:	2111      	movs	r1, #17
 8012284:	a84a      	add	r0, sp, #296	; 0x128
 8012286:	f007 fb91 	bl	80199ac <CDC_Fill_Buffer>
        CustomExtConfigClearDBCommandCallback();
 801228a:	f8d4 33e4 	ldr.w	r3, [r4, #996]	; 0x3e4
 801228e:	e7dd      	b.n	801224c <Write_Request_ExtConfig.part.0+0x510>
      if(CustomExtConfigSetDateCommandCallback!=NULL) {
 8012290:	f8d4 33d8 	ldr.w	r3, [r4, #984]	; 0x3d8
 8012294:	2b00      	cmp	r3, #0
 8012296:	f43f ae6c 	beq.w	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        BLE_MANAGER_PRINTF("Command SetDate\r\n");
 801229a:	4927      	ldr	r1, [pc, #156]	; (8012338 <Write_Request_ExtConfig.part.0+0x5fc>)
 801229c:	a84a      	add	r0, sp, #296	; 0x128
 801229e:	f00a fdbb 	bl	801ce18 <strcpy>
 80122a2:	2111      	movs	r1, #17
 80122a4:	a84a      	add	r0, sp, #296	; 0x128
 80122a6:	f007 fb81 	bl	80199ac <CDC_Fill_Buffer>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 80122aa:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 80122ae:	f003 f81f 	bl	80152f0 <json_parse_string>
 80122b2:	4606      	mov	r6, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 80122b4:	f002 facb 	bl	801484e <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetDate") == 0) {
 80122b8:	4920      	ldr	r1, [pc, #128]	; (801233c <Write_Request_ExtConfig.part.0+0x600>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 80122ba:	4605      	mov	r5, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetDate") == 0) {
 80122bc:	f002 fb0b 	bl	80148d6 <json_object_dotget_string>
 80122c0:	491f      	ldr	r1, [pc, #124]	; (8012340 <Write_Request_ExtConfig.part.0+0x604>)
 80122c2:	f7f1 fffd 	bl	80042c0 <strcmp>
 80122c6:	2800      	cmp	r0, #0
 80122c8:	f47f ae50 	bne.w	8011f6c <Write_Request_ExtConfig.part.0+0x230>
          if(json_object_dothas_value(JSON_ParseHandler,"argString")) {
 80122cc:	491d      	ldr	r1, [pc, #116]	; (8012344 <Write_Request_ExtConfig.part.0+0x608>)
 80122ce:	4628      	mov	r0, r5
 80122d0:	f002 fade 	bl	8014890 <json_object_dothas_value>
 80122d4:	2800      	cmp	r0, #0
 80122d6:	f43f ae49 	beq.w	8011f6c <Write_Request_ExtConfig.part.0+0x230>
            uint8_t *NewDate = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 80122da:	491a      	ldr	r1, [pc, #104]	; (8012344 <Write_Request_ExtConfig.part.0+0x608>)
 80122dc:	4628      	mov	r0, r5
 80122de:	f002 fafa 	bl	80148d6 <json_object_dotget_string>
            CustomExtConfigSetDateCommandCallback(NewDate);
 80122e2:	f8d4 33d8 	ldr.w	r3, [r4, #984]	; 0x3d8
            CustomExtConfigSetNameCommandCallback(NewBoardName);
 80122e6:	4798      	blx	r3
        json_value_free(tempJSON);
 80122e8:	e640      	b.n	8011f6c <Write_Request_ExtConfig.part.0+0x230>
 80122ea:	bf00      	nop
 80122ec:	08023745 	.word	0x08023745
 80122f0:	08023753 	.word	0x08023753
 80122f4:	0802370b 	.word	0x0802370b
 80122f8:	08023784 	.word	0x08023784
 80122fc:	080237a7 	.word	0x080237a7
 8012300:	080237ae 	.word	0x080237ae
 8012304:	08023725 	.word	0x08023725
 8012308:	080237c2 	.word	0x080237c2
 801230c:	0802370f 	.word	0x0802370f
 8012310:	080237d1 	.word	0x080237d1
 8012314:	08023714 	.word	0x08023714
 8012318:	080237e0 	.word	0x080237e0
 801231c:	08023719 	.word	0x08023719
 8012320:	080237f6 	.word	0x080237f6
 8012324:	08023812 	.word	0x08023812
 8012328:	08023821 	.word	0x08023821
 801232c:	0802382d 	.word	0x0802382d
 8012330:	0802383b 	.word	0x0802383b
 8012334:	08023849 	.word	0x08023849
 8012338:	0802385b 	.word	0x0802385b
 801233c:	08023690 	.word	0x08023690
 8012340:	080236d8 	.word	0x080236d8
 8012344:	0802386d 	.word	0x0802386d
       if(CustomExtConfigSetTimeCommandCallback!=NULL) {
 8012348:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 801234c:	2b00      	cmp	r3, #0
 801234e:	f43f ae10 	beq.w	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        BLE_MANAGER_PRINTF("Command SetTime\r\n");
 8012352:	49aa      	ldr	r1, [pc, #680]	; (80125fc <Write_Request_ExtConfig.part.0+0x8c0>)
 8012354:	a84a      	add	r0, sp, #296	; 0x128
 8012356:	f00a fd5f 	bl	801ce18 <strcpy>
 801235a:	2111      	movs	r1, #17
 801235c:	a84a      	add	r0, sp, #296	; 0x128
 801235e:	f007 fb25 	bl	80199ac <CDC_Fill_Buffer>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 8012362:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 8012366:	f002 ffc3 	bl	80152f0 <json_parse_string>
 801236a:	4606      	mov	r6, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 801236c:	f002 fa6f 	bl	801484e <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetTime") == 0) {
 8012370:	49a3      	ldr	r1, [pc, #652]	; (8012600 <Write_Request_ExtConfig.part.0+0x8c4>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 8012372:	4605      	mov	r5, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetTime") == 0) {
 8012374:	f002 faaf 	bl	80148d6 <json_object_dotget_string>
 8012378:	49a2      	ldr	r1, [pc, #648]	; (8012604 <Write_Request_ExtConfig.part.0+0x8c8>)
 801237a:	f7f1 ffa1 	bl	80042c0 <strcmp>
 801237e:	2800      	cmp	r0, #0
 8012380:	f47f adf4 	bne.w	8011f6c <Write_Request_ExtConfig.part.0+0x230>
          if(json_object_dothas_value(JSON_ParseHandler,"argString")) {
 8012384:	49a0      	ldr	r1, [pc, #640]	; (8012608 <Write_Request_ExtConfig.part.0+0x8cc>)
 8012386:	4628      	mov	r0, r5
 8012388:	f002 fa82 	bl	8014890 <json_object_dothas_value>
 801238c:	2800      	cmp	r0, #0
 801238e:	f43f aded 	beq.w	8011f6c <Write_Request_ExtConfig.part.0+0x230>
            uint8_t *NewTime = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 8012392:	499d      	ldr	r1, [pc, #628]	; (8012608 <Write_Request_ExtConfig.part.0+0x8cc>)
 8012394:	4628      	mov	r0, r5
 8012396:	f002 fa9e 	bl	80148d6 <json_object_dotget_string>
            CustomExtConfigSetTimeCommandCallback(NewTime);
 801239a:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 801239e:	e7a2      	b.n	80122e6 <Write_Request_ExtConfig.part.0+0x5aa>
       if(CustomExtConfigSetNameCommandCallback!=NULL) {
 80123a0:	f8d4 33d0 	ldr.w	r3, [r4, #976]	; 0x3d0
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	f43f ade4 	beq.w	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        BLE_MANAGER_PRINTF("Command SetName\r\n");
 80123aa:	4998      	ldr	r1, [pc, #608]	; (801260c <Write_Request_ExtConfig.part.0+0x8d0>)
 80123ac:	a84a      	add	r0, sp, #296	; 0x128
 80123ae:	f00a fd33 	bl	801ce18 <strcpy>
 80123b2:	2111      	movs	r1, #17
 80123b4:	a84a      	add	r0, sp, #296	; 0x128
 80123b6:	f007 faf9 	bl	80199ac <CDC_Fill_Buffer>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 80123ba:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 80123be:	f002 ff97 	bl	80152f0 <json_parse_string>
 80123c2:	4606      	mov	r6, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 80123c4:	f002 fa43 	bl	801484e <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetName") == 0) {
 80123c8:	498d      	ldr	r1, [pc, #564]	; (8012600 <Write_Request_ExtConfig.part.0+0x8c4>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 80123ca:	4605      	mov	r5, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetName") == 0) {
 80123cc:	f002 fa83 	bl	80148d6 <json_object_dotget_string>
 80123d0:	498f      	ldr	r1, [pc, #572]	; (8012610 <Write_Request_ExtConfig.part.0+0x8d4>)
 80123d2:	f7f1 ff75 	bl	80042c0 <strcmp>
 80123d6:	2800      	cmp	r0, #0
 80123d8:	f47f adc8 	bne.w	8011f6c <Write_Request_ExtConfig.part.0+0x230>
          if(json_object_dothas_value(JSON_ParseHandler,"argString")) {
 80123dc:	498a      	ldr	r1, [pc, #552]	; (8012608 <Write_Request_ExtConfig.part.0+0x8cc>)
 80123de:	4628      	mov	r0, r5
 80123e0:	f002 fa56 	bl	8014890 <json_object_dothas_value>
 80123e4:	2800      	cmp	r0, #0
 80123e6:	f43f adc1 	beq.w	8011f6c <Write_Request_ExtConfig.part.0+0x230>
            uint8_t *NewBoardName = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 80123ea:	4987      	ldr	r1, [pc, #540]	; (8012608 <Write_Request_ExtConfig.part.0+0x8cc>)
 80123ec:	4628      	mov	r0, r5
 80123ee:	f002 fa72 	bl	80148d6 <json_object_dotget_string>
            CustomExtConfigSetNameCommandCallback(NewBoardName);
 80123f2:	f8d4 33d0 	ldr.w	r3, [r4, #976]	; 0x3d0
 80123f6:	e776      	b.n	80122e6 <Write_Request_ExtConfig.part.0+0x5aa>
      if(CustomExtConfigSetWiFiCommandCallback!=NULL) {
 80123f8:	f8d4 33dc 	ldr.w	r3, [r4, #988]	; 0x3dc
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	f43f adb8 	beq.w	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        BLE_MANAGER_PRINTF("Command SetWiFi\r\n");
 8012402:	ae4a      	add	r6, sp, #296	; 0x128
 8012404:	4983      	ldr	r1, [pc, #524]	; (8012614 <Write_Request_ExtConfig.part.0+0x8d8>)
 8012406:	4630      	mov	r0, r6
 8012408:	f00a fd06 	bl	801ce18 <strcpy>
 801240c:	2111      	movs	r1, #17
 801240e:	4630      	mov	r0, r6
 8012410:	f007 facc 	bl	80199ac <CDC_Fill_Buffer>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 8012414:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 8012418:	f002 ff6a 	bl	80152f0 <json_parse_string>
 801241c:	4607      	mov	r7, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 801241e:	f002 fa16 	bl	801484e <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetWiFi") == 0) {
 8012422:	4977      	ldr	r1, [pc, #476]	; (8012600 <Write_Request_ExtConfig.part.0+0x8c4>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 8012424:	4605      	mov	r5, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetWiFi") == 0) {
 8012426:	f002 fa56 	bl	80148d6 <json_object_dotget_string>
 801242a:	497b      	ldr	r1, [pc, #492]	; (8012618 <Write_Request_ExtConfig.part.0+0x8dc>)
 801242c:	f7f1 ff48 	bl	80042c0 <strcmp>
 8012430:	bb30      	cbnz	r0, 8012480 <Write_Request_ExtConfig.part.0+0x744>
          JSON_Object *JSON_Wifi = json_object_dotget_object(JSON_ParseHandler,"argJsonElement");
 8012432:	497a      	ldr	r1, [pc, #488]	; (801261c <Write_Request_ExtConfig.part.0+0x8e0>)
 8012434:	4628      	mov	r0, r5
 8012436:	f002 fa32 	bl	801489e <json_object_dotget_object>
          if(json_object_dothas_value(JSON_Wifi,"ssid")) {
 801243a:	4979      	ldr	r1, [pc, #484]	; (8012620 <Write_Request_ExtConfig.part.0+0x8e4>)
          JSON_Object *JSON_Wifi = json_object_dotget_object(JSON_ParseHandler,"argJsonElement");
 801243c:	4605      	mov	r5, r0
          if(json_object_dothas_value(JSON_Wifi,"ssid")) {
 801243e:	f002 fa27 	bl	8014890 <json_object_dothas_value>
 8012442:	b1e8      	cbz	r0, 8012480 <Write_Request_ExtConfig.part.0+0x744>
            NewWiFiCred.SSID = (uint8_t *)json_object_dotget_string(JSON_Wifi,"ssid");
 8012444:	4976      	ldr	r1, [pc, #472]	; (8012620 <Write_Request_ExtConfig.part.0+0x8e4>)
 8012446:	4628      	mov	r0, r5
 8012448:	f002 fa45 	bl	80148d6 <json_object_dotget_string>
            if(json_object_dothas_value(JSON_Wifi,"password")) {
 801244c:	4975      	ldr	r1, [pc, #468]	; (8012624 <Write_Request_ExtConfig.part.0+0x8e8>)
            NewWiFiCred.SSID = (uint8_t *)json_object_dotget_string(JSON_Wifi,"ssid");
 801244e:	904a      	str	r0, [sp, #296]	; 0x128
            if(json_object_dothas_value(JSON_Wifi,"password")) {
 8012450:	4628      	mov	r0, r5
 8012452:	f002 fa1d 	bl	8014890 <json_object_dothas_value>
 8012456:	b198      	cbz	r0, 8012480 <Write_Request_ExtConfig.part.0+0x744>
              NewWiFiCred.PassWd = (uint8_t *)json_object_dotget_string(JSON_Wifi,"password");
 8012458:	4972      	ldr	r1, [pc, #456]	; (8012624 <Write_Request_ExtConfig.part.0+0x8e8>)
 801245a:	4628      	mov	r0, r5
 801245c:	f002 fa3b 	bl	80148d6 <json_object_dotget_string>
              if(json_object_dothas_value(JSON_Wifi,"securityType")) {
 8012460:	4971      	ldr	r1, [pc, #452]	; (8012628 <Write_Request_ExtConfig.part.0+0x8ec>)
              NewWiFiCred.PassWd = (uint8_t *)json_object_dotget_string(JSON_Wifi,"password");
 8012462:	904b      	str	r0, [sp, #300]	; 0x12c
              if(json_object_dothas_value(JSON_Wifi,"securityType")) {
 8012464:	4628      	mov	r0, r5
 8012466:	f002 fa13 	bl	8014890 <json_object_dothas_value>
 801246a:	b148      	cbz	r0, 8012480 <Write_Request_ExtConfig.part.0+0x744>
                NewWiFiCred.Security = (uint8_t *)json_object_dotget_string(JSON_Wifi,"securityType");
 801246c:	496e      	ldr	r1, [pc, #440]	; (8012628 <Write_Request_ExtConfig.part.0+0x8ec>)
 801246e:	4628      	mov	r0, r5
 8012470:	f002 fa31 	bl	80148d6 <json_object_dotget_string>
 8012474:	904c      	str	r0, [sp, #304]	; 0x130
                CustomExtConfigSetWiFiCommandCallback(NewWiFiCred);
 8012476:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801247a:	f8d4 33dc 	ldr.w	r3, [r4, #988]	; 0x3dc
 801247e:	4798      	blx	r3
        json_value_free(tempJSON);
 8012480:	4638      	mov	r0, r7
 8012482:	e574      	b.n	8011f6e <Write_Request_ExtConfig.part.0+0x232>
       if(CustomExtConfigChangePinCommandCallback!=NULL) {
 8012484:	f8d4 33e0 	ldr.w	r3, [r4, #992]	; 0x3e0
 8012488:	2b00      	cmp	r3, #0
 801248a:	f43f ad72 	beq.w	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        BLE_MANAGER_PRINTF("Command ChangePIN\r\n");
 801248e:	4967      	ldr	r1, [pc, #412]	; (801262c <Write_Request_ExtConfig.part.0+0x8f0>)
 8012490:	a84a      	add	r0, sp, #296	; 0x128
 8012492:	f00a fcc1 	bl	801ce18 <strcpy>
 8012496:	2113      	movs	r1, #19
 8012498:	a84a      	add	r0, sp, #296	; 0x128
 801249a:	f007 fa87 	bl	80199ac <CDC_Fill_Buffer>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 801249e:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 80124a2:	f002 ff25 	bl	80152f0 <json_parse_string>
 80124a6:	4606      	mov	r6, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 80124a8:	f002 f9d1 	bl	801484e <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"ChangePIN") == 0) {
 80124ac:	4954      	ldr	r1, [pc, #336]	; (8012600 <Write_Request_ExtConfig.part.0+0x8c4>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 80124ae:	4605      	mov	r5, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"ChangePIN") == 0) {
 80124b0:	f002 fa11 	bl	80148d6 <json_object_dotget_string>
 80124b4:	495e      	ldr	r1, [pc, #376]	; (8012630 <Write_Request_ExtConfig.part.0+0x8f4>)
 80124b6:	f7f1 ff03 	bl	80042c0 <strcmp>
 80124ba:	2800      	cmp	r0, #0
 80124bc:	f47f ad56 	bne.w	8011f6c <Write_Request_ExtConfig.part.0+0x230>
          if(json_object_dothas_value(JSON_ParseHandler,"argNumber")) {
 80124c0:	495c      	ldr	r1, [pc, #368]	; (8012634 <Write_Request_ExtConfig.part.0+0x8f8>)
 80124c2:	4628      	mov	r0, r5
 80124c4:	f002 f9e4 	bl	8014890 <json_object_dothas_value>
 80124c8:	2800      	cmp	r0, #0
 80124ca:	f43f ad4f 	beq.w	8011f6c <Write_Request_ExtConfig.part.0+0x230>
            uint32_t NewBoardPin = (uint32_t)json_object_dotget_number(JSON_ParseHandler,"argNumber");
 80124ce:	4959      	ldr	r1, [pc, #356]	; (8012634 <Write_Request_ExtConfig.part.0+0x8f8>)
 80124d0:	4628      	mov	r0, r5
 80124d2:	f002 fa1d 	bl	8014910 <json_object_dotget_number>
 80124d6:	ec51 0b10 	vmov	r0, r1, d0
 80124da:	f7f2 fbed 	bl	8004cb8 <__aeabi_d2uiz>
            CustomExtConfigChangePinCommandCallback(NewBoardPin);
 80124de:	f8d4 33e0 	ldr.w	r3, [r4, #992]	; 0x3e0
 80124e2:	e700      	b.n	80122e6 <Write_Request_ExtConfig.part.0+0x5aa>
      if(CustomExtConfigSetCertCommandCallback!=NULL) {
 80124e4:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	f43f ad42 	beq.w	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        BLE_MANAGER_PRINTF("Command SetCert\r\n");
 80124ee:	4952      	ldr	r1, [pc, #328]	; (8012638 <Write_Request_ExtConfig.part.0+0x8fc>)
 80124f0:	a84a      	add	r0, sp, #296	; 0x128
 80124f2:	f00a fc91 	bl	801ce18 <strcpy>
 80124f6:	2111      	movs	r1, #17
 80124f8:	a84a      	add	r0, sp, #296	; 0x128
 80124fa:	f007 fa57 	bl	80199ac <CDC_Fill_Buffer>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 80124fe:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 8012502:	f002 fef5 	bl	80152f0 <json_parse_string>
 8012506:	4606      	mov	r6, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 8012508:	f002 f9a1 	bl	801484e <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetCert") == 0) {
 801250c:	493c      	ldr	r1, [pc, #240]	; (8012600 <Write_Request_ExtConfig.part.0+0x8c4>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 801250e:	4605      	mov	r5, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetCert") == 0) {
 8012510:	f002 f9e1 	bl	80148d6 <json_object_dotget_string>
 8012514:	4949      	ldr	r1, [pc, #292]	; (801263c <Write_Request_ExtConfig.part.0+0x900>)
 8012516:	f7f1 fed3 	bl	80042c0 <strcmp>
 801251a:	2800      	cmp	r0, #0
 801251c:	f47f ad26 	bne.w	8011f6c <Write_Request_ExtConfig.part.0+0x230>
          if(json_object_dothas_value(JSON_ParseHandler,"argString")) {
 8012520:	4939      	ldr	r1, [pc, #228]	; (8012608 <Write_Request_ExtConfig.part.0+0x8cc>)
 8012522:	4628      	mov	r0, r5
 8012524:	f002 f9b4 	bl	8014890 <json_object_dothas_value>
 8012528:	2800      	cmp	r0, #0
 801252a:	f43f ad1f 	beq.w	8011f6c <Write_Request_ExtConfig.part.0+0x230>
            uint8_t *NewCertificate = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 801252e:	4936      	ldr	r1, [pc, #216]	; (8012608 <Write_Request_ExtConfig.part.0+0x8cc>)
 8012530:	4628      	mov	r0, r5
 8012532:	f002 f9d0 	bl	80148d6 <json_object_dotget_string>
            CustomExtConfigSetCertCommandCallback(NewCertificate);
 8012536:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
 801253a:	e6d4      	b.n	80122e6 <Write_Request_ExtConfig.part.0+0x5aa>
      if(CustomExtConfigSetSensorsConfigCommandsCallback!=NULL) {
 801253c:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
 8012540:	2b00      	cmp	r3, #0
 8012542:	f43f ad16 	beq.w	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        BLE_MANAGER_PRINTF("Command SetSensorsConfigCommand\r\n");
 8012546:	493e      	ldr	r1, [pc, #248]	; (8012640 <Write_Request_ExtConfig.part.0+0x904>)
 8012548:	a84a      	add	r0, sp, #296	; 0x128
 801254a:	f00a fc65 	bl	801ce18 <strcpy>
 801254e:	2121      	movs	r1, #33	; 0x21
 8012550:	a84a      	add	r0, sp, #296	; 0x128
 8012552:	f007 fa2b 	bl	80199ac <CDC_Fill_Buffer>
        CustomExtConfigSetSensorsConfigCommandsCallback(hs_command_buffer);
 8012556:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
 801255a:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 801255e:	4798      	blx	r3
 8012560:	e507      	b.n	8011f72 <Write_Request_ExtConfig.part.0+0x236>
      if(CustomExtConfigCustomCommandCallback!=NULL) {
 8012562:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8012566:	b943      	cbnz	r3, 801257a <Write_Request_ExtConfig.part.0+0x83e>
        BLE_MANAGER_PRINTF("Error: Command Not Valid\r\n");
 8012568:	4936      	ldr	r1, [pc, #216]	; (8012644 <Write_Request_ExtConfig.part.0+0x908>)
 801256a:	a84a      	add	r0, sp, #296	; 0x128
 801256c:	f00a fc54 	bl	801ce18 <strcpy>
 8012570:	211a      	movs	r1, #26
 8012572:	a84a      	add	r0, sp, #296	; 0x128
 8012574:	f007 fa1a 	bl	80199ac <CDC_Fill_Buffer>
 8012578:	e4fb      	b.n	8011f72 <Write_Request_ExtConfig.part.0+0x236>
        if(CustomCommands!=NULL) {
 801257a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801257c:	2b00      	cmp	r3, #0
 801257e:	d0f3      	beq.n	8012568 <Write_Request_ExtConfig.part.0+0x82c>
          JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 8012580:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
            if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),LastCustomCommand->CommandName) == 0) {
 8012584:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8012600 <Write_Request_ExtConfig.part.0+0x8c4>
          JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 8012588:	f002 feb2 	bl	80152f0 <json_parse_string>
 801258c:	4606      	mov	r6, r0
          JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 801258e:	f002 f95e 	bl	801484e <json_value_get_object>
          LastCustomCommand = CustomCommands;
 8012592:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012594:	63a3      	str	r3, [r4, #56]	; 0x38
          JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 8012596:	4607      	mov	r7, r0
          while((ValidCustomCommand==0U) && (LastCustomCommand!=NULL)){
 8012598:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801259a:	b92d      	cbnz	r5, 80125a8 <Write_Request_ExtConfig.part.0+0x86c>
          json_value_free(tempJSON);
 801259c:	4630      	mov	r0, r6
 801259e:	f002 fb2b 	bl	8014bf8 <json_value_free>
      if(ValidCustomCommand==0U) {
 80125a2:	2d00      	cmp	r5, #0
 80125a4:	d0e0      	beq.n	8012568 <Write_Request_ExtConfig.part.0+0x82c>
 80125a6:	e4e4      	b.n	8011f72 <Write_Request_ExtConfig.part.0+0x236>
            if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),LastCustomCommand->CommandName) == 0) {
 80125a8:	4641      	mov	r1, r8
 80125aa:	4638      	mov	r0, r7
 80125ac:	f002 f993 	bl	80148d6 <json_object_dotget_string>
 80125b0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80125b2:	4629      	mov	r1, r5
 80125b4:	f7f1 fe84 	bl	80042c0 <strcmp>
 80125b8:	b958      	cbnz	r0, 80125d2 <Write_Request_ExtConfig.part.0+0x896>
            CommandResult.CommandName= (uint8_t *)LastCustomCommand->CommandName;
 80125ba:	950a      	str	r5, [sp, #40]	; 0x28
            CommandResult.CommandType= LastCustomCommand->CommandType;
 80125bc:	f895 3020 	ldrb.w	r3, [r5, #32]
 80125c0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
            switch(LastCustomCommand->CommandType) { 
 80125c4:	2b05      	cmp	r3, #5
 80125c6:	d813      	bhi.n	80125f0 <Write_Request_ExtConfig.part.0+0x8b4>
 80125c8:	e8df f003 	tbb	[pc, r3]
 80125cc:	8c654006 	.word	0x8c654006
 80125d0:	8c40      	.short	0x8c40
              LastCustomCommand = (BLE_ExtCustomCommand_t *) LastCustomCommand->NextCommand;
 80125d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80125d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80125d6:	e7df      	b.n	8012598 <Write_Request_ExtConfig.part.0+0x85c>
              BLE_MANAGER_PRINTF("Called Custom Void Command <%s>\r\n",LastCustomCommand->CommandName);
 80125d8:	491b      	ldr	r1, [pc, #108]	; (8012648 <Write_Request_ExtConfig.part.0+0x90c>)
 80125da:	462a      	mov	r2, r5
 80125dc:	a84a      	add	r0, sp, #296	; 0x128
 80125de:	f00a fbab 	bl	801cd38 <siprintf>
 80125e2:	4601      	mov	r1, r0
 80125e4:	a84a      	add	r0, sp, #296	; 0x128
 80125e6:	f007 f9e1 	bl	80199ac <CDC_Fill_Buffer>
              CommandResult.IntValue= 0;
 80125ea:	2300      	movs	r3, #0
              CommandResult.StringValue= NULL;
 80125ec:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
            CustomExtConfigCustomCommandCallback(&CommandResult);
 80125f0:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80125f4:	a80a      	add	r0, sp, #40	; 0x28
 80125f6:	4798      	blx	r3
              ValidCustomCommand=1;
 80125f8:	2501      	movs	r5, #1
 80125fa:	e7cf      	b.n	801259c <Write_Request_ExtConfig.part.0+0x860>
 80125fc:	08023877 	.word	0x08023877
 8012600:	08023690 	.word	0x08023690
 8012604:	080236d0 	.word	0x080236d0
 8012608:	0802386d 	.word	0x0802386d
 801260c:	08023889 	.word	0x08023889
 8012610:	080236c8 	.word	0x080236c8
 8012614:	0802389b 	.word	0x0802389b
 8012618:	080236e0 	.word	0x080236e0
 801261c:	080238ad 	.word	0x080238ad
 8012620:	080238bc 	.word	0x080238bc
 8012624:	080238c1 	.word	0x080238c1
 8012628:	080238ca 	.word	0x080238ca
 801262c:	080238d7 	.word	0x080238d7
 8012630:	080236e8 	.word	0x080236e8
 8012634:	080238eb 	.word	0x080238eb
 8012638:	080238f5 	.word	0x080238f5
 801263c:	08023703 	.word	0x08023703
 8012640:	08023907 	.word	0x08023907
 8012644:	08023929 	.word	0x08023929
 8012648:	08023944 	.word	0x08023944
              if(json_object_dothas_value(JSON_ParseHandler,"argNumber")) {
 801264c:	4933      	ldr	r1, [pc, #204]	; (801271c <Write_Request_ExtConfig.part.0+0x9e0>)
 801264e:	4638      	mov	r0, r7
 8012650:	f002 f91e 	bl	8014890 <json_object_dothas_value>
 8012654:	2800      	cmp	r0, #0
 8012656:	d0cb      	beq.n	80125f0 <Write_Request_ExtConfig.part.0+0x8b4>
                int32_t NewValue = (int32_t)json_object_dotget_number(JSON_ParseHandler,"argNumber");
 8012658:	4930      	ldr	r1, [pc, #192]	; (801271c <Write_Request_ExtConfig.part.0+0x9e0>)
 801265a:	4638      	mov	r0, r7
 801265c:	f002 f958 	bl	8014910 <json_object_dotget_number>
 8012660:	ec51 0b10 	vmov	r0, r1, d0
 8012664:	f7f2 fb00 	bl	8004c68 <__aeabi_d2iz>
                BLE_MANAGER_PRINTF("Called Custom Integer Command <%s>\r\n",LastCustomCommand->CommandName);
 8012668:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801266a:	492d      	ldr	r1, [pc, #180]	; (8012720 <Write_Request_ExtConfig.part.0+0x9e4>)
                CommandResult.IntValue= NewValue;
 801266c:	900c      	str	r0, [sp, #48]	; 0x30
                CommandResult.StringValue= NULL;
 801266e:	2300      	movs	r3, #0
                int32_t NewValue = (int32_t)json_object_dotget_number(JSON_ParseHandler,"argNumber");
 8012670:	4605      	mov	r5, r0
                BLE_MANAGER_PRINTF("Called Custom Integer Command <%s>\r\n",LastCustomCommand->CommandName);
 8012672:	a84a      	add	r0, sp, #296	; 0x128
                CommandResult.StringValue= NULL;
 8012674:	930d      	str	r3, [sp, #52]	; 0x34
                BLE_MANAGER_PRINTF("Called Custom Integer Command <%s>\r\n",LastCustomCommand->CommandName);
 8012676:	f00a fb5f 	bl	801cd38 <siprintf>
 801267a:	4601      	mov	r1, r0
 801267c:	a84a      	add	r0, sp, #296	; 0x128
 801267e:	f007 f995 	bl	80199ac <CDC_Fill_Buffer>
                BLE_MANAGER_PRINTF("\tNumber=%ld\r\n",NewValue);
 8012682:	4928      	ldr	r1, [pc, #160]	; (8012724 <Write_Request_ExtConfig.part.0+0x9e8>)
 8012684:	462a      	mov	r2, r5
                BLE_MANAGER_PRINTF("\tString=<%s>\r\n",NewString);
 8012686:	a84a      	add	r0, sp, #296	; 0x128
 8012688:	f00a fb56 	bl	801cd38 <siprintf>
 801268c:	4601      	mov	r1, r0
 801268e:	a84a      	add	r0, sp, #296	; 0x128
 8012690:	f007 f98c 	bl	80199ac <CDC_Fill_Buffer>
 8012694:	e7ac      	b.n	80125f0 <Write_Request_ExtConfig.part.0+0x8b4>
              if(json_object_dothas_value(JSON_ParseHandler,"argString")) {
 8012696:	4924      	ldr	r1, [pc, #144]	; (8012728 <Write_Request_ExtConfig.part.0+0x9ec>)
 8012698:	4638      	mov	r0, r7
 801269a:	f002 f8f9 	bl	8014890 <json_object_dothas_value>
 801269e:	2800      	cmp	r0, #0
 80126a0:	d0a6      	beq.n	80125f0 <Write_Request_ExtConfig.part.0+0x8b4>
                uint8_t *NewString = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 80126a2:	4921      	ldr	r1, [pc, #132]	; (8012728 <Write_Request_ExtConfig.part.0+0x9ec>)
 80126a4:	4638      	mov	r0, r7
 80126a6:	f002 f916 	bl	80148d6 <json_object_dotget_string>
                if(strncmp((char*)NewString,"true",4)==0)
 80126aa:	4920      	ldr	r1, [pc, #128]	; (801272c <Write_Request_ExtConfig.part.0+0x9f0>)
 80126ac:	2204      	movs	r2, #4
                uint8_t *NewString = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 80126ae:	4605      	mov	r5, r0
                if(strncmp((char*)NewString,"true",4)==0)
 80126b0:	f00a fbba 	bl	801ce28 <strncmp>
 80126b4:	b908      	cbnz	r0, 80126ba <Write_Request_ExtConfig.part.0+0x97e>
                  CommandResult.IntValue= 1;
 80126b6:	2301      	movs	r3, #1
 80126b8:	930c      	str	r3, [sp, #48]	; 0x30
                if(strncmp((char*)NewString,"false",5)==0)
 80126ba:	491d      	ldr	r1, [pc, #116]	; (8012730 <Write_Request_ExtConfig.part.0+0x9f4>)
 80126bc:	2205      	movs	r2, #5
 80126be:	4628      	mov	r0, r5
 80126c0:	f00a fbb2 	bl	801ce28 <strncmp>
 80126c4:	b900      	cbnz	r0, 80126c8 <Write_Request_ExtConfig.part.0+0x98c>
                  CommandResult.IntValue= 0;
 80126c6:	900c      	str	r0, [sp, #48]	; 0x30
                BLE_MANAGER_PRINTF("Called Custom Boolean Command <%s>\r\n",LastCustomCommand->CommandName);
 80126c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80126ca:	491a      	ldr	r1, [pc, #104]	; (8012734 <Write_Request_ExtConfig.part.0+0x9f8>)
                CommandResult.StringValue= NULL;
 80126cc:	2300      	movs	r3, #0
                BLE_MANAGER_PRINTF("Called Custom Boolean Command <%s>\r\n",LastCustomCommand->CommandName);
 80126ce:	a84a      	add	r0, sp, #296	; 0x128
                CommandResult.StringValue= NULL;
 80126d0:	930d      	str	r3, [sp, #52]	; 0x34
                BLE_MANAGER_PRINTF("Called Custom Boolean Command <%s>\r\n",LastCustomCommand->CommandName);
 80126d2:	f00a fb31 	bl	801cd38 <siprintf>
 80126d6:	4601      	mov	r1, r0
 80126d8:	a84a      	add	r0, sp, #296	; 0x128
 80126da:	f007 f967 	bl	80199ac <CDC_Fill_Buffer>
                BLE_MANAGER_PRINTF("\tBoolean=<%s>\r\n",NewString);
 80126de:	4916      	ldr	r1, [pc, #88]	; (8012738 <Write_Request_ExtConfig.part.0+0x9fc>)
 80126e0:	462a      	mov	r2, r5
 80126e2:	e7d0      	b.n	8012686 <Write_Request_ExtConfig.part.0+0x94a>
              if(json_object_dothas_value(JSON_ParseHandler,"argString")) {
 80126e4:	4910      	ldr	r1, [pc, #64]	; (8012728 <Write_Request_ExtConfig.part.0+0x9ec>)
 80126e6:	4638      	mov	r0, r7
 80126e8:	f002 f8d2 	bl	8014890 <json_object_dothas_value>
 80126ec:	2800      	cmp	r0, #0
 80126ee:	f43f af7f 	beq.w	80125f0 <Write_Request_ExtConfig.part.0+0x8b4>
                uint8_t *NewString = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 80126f2:	490d      	ldr	r1, [pc, #52]	; (8012728 <Write_Request_ExtConfig.part.0+0x9ec>)
 80126f4:	4638      	mov	r0, r7
 80126f6:	f002 f8ee 	bl	80148d6 <json_object_dotget_string>
                CommandResult.IntValue= 0;
 80126fa:	2300      	movs	r3, #0
                CommandResult.StringValue= NewString;
 80126fc:	e9cd 300c 	strd	r3, r0, [sp, #48]	; 0x30
                BLE_MANAGER_PRINTF("Called Custom String Command <%s>\r\n",LastCustomCommand->CommandName);
 8012700:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8012702:	490e      	ldr	r1, [pc, #56]	; (801273c <Write_Request_ExtConfig.part.0+0xa00>)
                uint8_t *NewString = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 8012704:	4605      	mov	r5, r0
                BLE_MANAGER_PRINTF("Called Custom String Command <%s>\r\n",LastCustomCommand->CommandName);
 8012706:	a84a      	add	r0, sp, #296	; 0x128
 8012708:	f00a fb16 	bl	801cd38 <siprintf>
 801270c:	4601      	mov	r1, r0
 801270e:	a84a      	add	r0, sp, #296	; 0x128
 8012710:	f007 f94c 	bl	80199ac <CDC_Fill_Buffer>
                BLE_MANAGER_PRINTF("\tString=<%s>\r\n",NewString);
 8012714:	490a      	ldr	r1, [pc, #40]	; (8012740 <Write_Request_ExtConfig.part.0+0xa04>)
 8012716:	462a      	mov	r2, r5
 8012718:	e7b5      	b.n	8012686 <Write_Request_ExtConfig.part.0+0x94a>
 801271a:	bf00      	nop
 801271c:	080238eb 	.word	0x080238eb
 8012720:	08023966 	.word	0x08023966
 8012724:	0802398b 	.word	0x0802398b
 8012728:	0802386d 	.word	0x0802386d
 801272c:	08023999 	.word	0x08023999
 8012730:	0802399e 	.word	0x0802399e
 8012734:	080239a4 	.word	0x080239a4
 8012738:	080239c9 	.word	0x080239c9
 801273c:	080239d9 	.word	0x080239d9
 8012740:	080239fd 	.word	0x080239fd

08012744 <Write_Request_ExtConfig>:
{
 8012744:	b508      	push	{r3, lr}
  CommandBufLen = BLE_Command_TP_Parse(&hs_command_buffer, att_data, data_length);
 8012746:	9902      	ldr	r1, [sp, #8]
 8012748:	4804      	ldr	r0, [pc, #16]	; (801275c <Write_Request_ExtConfig+0x18>)
 801274a:	461a      	mov	r2, r3
 801274c:	f7ff f9d0 	bl	8011af0 <BLE_Command_TP_Parse>
  if(CommandBufLen) {
 8012750:	b118      	cbz	r0, 801275a <Write_Request_ExtConfig+0x16>
}
 8012752:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012756:	f7ff baf1 	b.w	8011d3c <Write_Request_ExtConfig.part.0>
 801275a:	bd08      	pop	{r3, pc}
 801275c:	20002d88 	.word	0x20002d88

08012760 <hci_le_connection_complete_event>:
                                      uint8_t Peer_Address[6],
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)
{
 8012760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012762:	b0c5      	sub	sp, #276	; 0x114
 8012764:	461f      	mov	r7, r3
 8012766:	9c4a      	ldr	r4, [sp, #296]	; 0x128
  connection_handle = Connection_Handle;
 8012768:	4d1c      	ldr	r5, [pc, #112]	; (80127dc <hci_le_connection_complete_event+0x7c>)
  
  BLE_MANAGER_PRINTF(">>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n",Peer_Address[5],Peer_Address[4],Peer_Address[3],Peer_Address[2],Peer_Address[1],Peer_Address[0]);
 801276a:	7823      	ldrb	r3, [r4, #0]
 801276c:	9303      	str	r3, [sp, #12]
 801276e:	7863      	ldrb	r3, [r4, #1]
 8012770:	9302      	str	r3, [sp, #8]
 8012772:	78a3      	ldrb	r3, [r4, #2]
 8012774:	9301      	str	r3, [sp, #4]
 8012776:	78e3      	ldrb	r3, [r4, #3]
 8012778:	9300      	str	r3, [sp, #0]
 801277a:	7923      	ldrb	r3, [r4, #4]
 801277c:	7962      	ldrb	r2, [r4, #5]
  connection_handle = Connection_Handle;
 801277e:	f8a5 13bc 	strh.w	r1, [r5, #956]	; 0x3bc
{
 8012782:	460e      	mov	r6, r1
  BLE_MANAGER_PRINTF(">>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n",Peer_Address[5],Peer_Address[4],Peer_Address[3],Peer_Address[2],Peer_Address[1],Peer_Address[0]);
 8012784:	a804      	add	r0, sp, #16
 8012786:	4916      	ldr	r1, [pc, #88]	; (80127e0 <hci_le_connection_complete_event+0x80>)
 8012788:	f00a fad6 	bl	801cd38 <siprintf>
 801278c:	4601      	mov	r1, r0
 801278e:	a804      	add	r0, sp, #16
 8012790:	f007 f90c 	bl	80199ac <CDC_Fill_Buffer>
  
  if(BlueNRG_StackValue.EnableSecureConnection) {
 8012794:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8012798:	b18b      	cbz	r3, 80127be <hci_le_connection_complete_event+0x5e>
    tBleStatus RetStatus;
    /* Check if the device is already bonded */
    RetStatus = aci_gap_is_device_bonded(Peer_Address_Type,Peer_Address);
 801279a:	4621      	mov	r1, r4
 801279c:	4638      	mov	r0, r7
 801279e:	f7fc f8a7 	bl	800e8f0 <aci_gap_is_device_bonded>
    if( RetStatus !=BLE_STATUS_SUCCESS) {
 80127a2:	b160      	cbz	r0, 80127be <hci_le_connection_complete_event+0x5e>
      /* Send a slave security request to the master */
      RetStatus = aci_gap_slave_security_req(Connection_Handle);
 80127a4:	4630      	mov	r0, r6
 80127a6:	f7fb fff3 	bl	800e790 <aci_gap_slave_security_req>
      if (RetStatus != BLE_STATUS_SUCCESS) {
 80127aa:	4602      	mov	r2, r0
 80127ac:	b138      	cbz	r0, 80127be <hci_le_connection_complete_event+0x5e>
        BLE_MANAGER_PRINTF("Error: GAP Slave secury request failed %d\r\n",RetStatus);
 80127ae:	490d      	ldr	r1, [pc, #52]	; (80127e4 <hci_le_connection_complete_event+0x84>)
 80127b0:	a804      	add	r0, sp, #16
 80127b2:	f00a fac1 	bl	801cd38 <siprintf>
 80127b6:	4601      	mov	r1, r0
 80127b8:	a804      	add	r0, sp, #16
 80127ba:	f007 f8f7 	bl	80199ac <CDC_Fill_Buffer>
#endif
    }
  }
  
  /* Start one Exchange configuration for understaning the maxium ATT_MTU */
  aci_gatt_exchange_config(connection_handle);  
 80127be:	f8b5 03bc 	ldrh.w	r0, [r5, #956]	; 0x3bc
 80127c2:	f7fc f9c5 	bl	800eb50 <aci_gatt_exchange_config>
  
  if(CustomConnectionCompleted!=NULL){
 80127c6:	f8d5 33c0 	ldr.w	r3, [r5, #960]	; 0x3c0
 80127ca:	b12b      	cbz	r3, 80127d8 <hci_le_connection_complete_event+0x78>
    CustomConnectionCompleted(connection_handle);
 80127cc:	f8b5 03bc 	ldrh.w	r0, [r5, #956]	; 0x3bc
  }
  
}/* end hci_le_connection_complete_event() */
 80127d0:	b045      	add	sp, #276	; 0x114
 80127d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    CustomConnectionCompleted(connection_handle);
 80127d6:	4718      	bx	r3
}/* end hci_le_connection_complete_event() */
 80127d8:	b045      	add	sp, #276	; 0x114
 80127da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127dc:	2000296c 	.word	0x2000296c
 80127e0:	08023a0c 	.word	0x08023a0c
 80127e4:	08023a30 	.word	0x08023a30

080127e8 <hci_disconnection_complete_event>:
* Return         : See file bluenrg1_events.h
*******************************************************************************/
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{  
 80127e8:	b510      	push	{r4, lr}
  /* No Device Connected */
  connection_handle =0;
 80127ea:	4c0c      	ldr	r4, [pc, #48]	; (801281c <hci_disconnection_complete_event+0x34>)
  
  BLE_MANAGER_PRINTF("<<<<<<DISCONNECTED\r\n");
 80127ec:	490c      	ldr	r1, [pc, #48]	; (8012820 <hci_disconnection_complete_event+0x38>)
{  
 80127ee:	b0c0      	sub	sp, #256	; 0x100
  connection_handle =0;
 80127f0:	2300      	movs	r3, #0
  BLE_MANAGER_PRINTF("<<<<<<DISCONNECTED\r\n");
 80127f2:	4668      	mov	r0, sp
  connection_handle =0;
 80127f4:	f8a4 33bc 	strh.w	r3, [r4, #956]	; 0x3bc
  BLE_MANAGER_PRINTF("<<<<<<DISCONNECTED\r\n");
 80127f8:	f00a fb0e 	bl	801ce18 <strcpy>
 80127fc:	2114      	movs	r1, #20
 80127fe:	4668      	mov	r0, sp
 8012800:	f007 f8d4 	bl	80199ac <CDC_Fill_Buffer>
  
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8012804:	2301      	movs	r3, #1
 8012806:	f884 33be 	strb.w	r3, [r4, #958]	; 0x3be
  
  if(CustomDisconnectionCompleted!=NULL){
 801280a:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 801280e:	b11b      	cbz	r3, 8012818 <hci_disconnection_complete_event+0x30>
  
  //  if(BlueNRG_StackValue.EnableSecureConnection) {
  //    BlueNRG_StackValue.AdvertisingFilter = WHITE_LIST_FOR_ALL;
  //  }
  
}/* end hci_disconnection_complete_event() */
 8012810:	b040      	add	sp, #256	; 0x100
 8012812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CustomDisconnectionCompleted();
 8012816:	4718      	bx	r3
}/* end hci_disconnection_complete_event() */
 8012818:	b040      	add	sp, #256	; 0x100
 801281a:	bd10      	pop	{r4, pc}
 801281c:	2000296c 	.word	0x2000296c
 8012820:	08023a5c 	.word	0x08023a5c

08012824 <aci_gatt_read_permit_req_event>:
* Return         : See file bluenrg1_events.h
*******************************************************************************/
void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset)
{
 8012824:	b570      	push	{r4, r5, r6, lr}
  uint32_t FoundHandle=0;
  uint8_t RegisteredHandle;
  
  //Search inside all the registed handles
  for(RegisteredHandle=0;((RegisteredHandle<UsedBleChars) && (FoundHandle==0U));RegisteredHandle++) {
 8012826:	4d0f      	ldr	r5, [pc, #60]	; (8012864 <aci_gatt_read_permit_req_event+0x40>)
{
 8012828:	460c      	mov	r4, r1
  for(RegisteredHandle=0;((RegisteredHandle<UsedBleChars) && (FoundHandle==0U));RegisteredHandle++) {
 801282a:	2600      	movs	r6, #0
 801282c:	f895 2308 	ldrb.w	r2, [r5, #776]	; 0x308
 8012830:	b2f3      	uxtb	r3, r6
 8012832:	429a      	cmp	r2, r3
 8012834:	d806      	bhi.n	8012844 <aci_gatt_read_permit_req_event+0x20>
        BleCharsArray[RegisteredHandle]->Read_Request_CB(BleCharsArray[RegisteredHandle],Attribute_Handle);
      }
    }
  }
  
  if(connection_handle != 0U)
 8012836:	f8b5 03bc 	ldrh.w	r0, [r5, #956]	; 0x3bc
 801283a:	b188      	cbz	r0, 8012860 <aci_gatt_read_permit_req_event+0x3c>
    aci_gatt_allow_read(connection_handle);
}
 801283c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    aci_gatt_allow_read(connection_handle);
 8012840:	f7fc b9c6 	b.w	800ebd0 <aci_gatt_allow_read>
    if(BleCharsArray[RegisteredHandle]->Read_Request_CB!=NULL) {
 8012844:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012848:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
 801284c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 801284e:	b12a      	cbz	r2, 801285c <aci_gatt_read_permit_req_event+0x38>
      if(Attribute_Handle==(BleCharsArray[RegisteredHandle]->attr_handle+1U)) {
 8012850:	8b43      	ldrh	r3, [r0, #26]
 8012852:	3301      	adds	r3, #1
 8012854:	429c      	cmp	r4, r3
 8012856:	d101      	bne.n	801285c <aci_gatt_read_permit_req_event+0x38>
        BleCharsArray[RegisteredHandle]->Read_Request_CB(BleCharsArray[RegisteredHandle],Attribute_Handle);
 8012858:	4621      	mov	r1, r4
 801285a:	4790      	blx	r2
  for(RegisteredHandle=0;((RegisteredHandle<UsedBleChars) && (FoundHandle==0U));RegisteredHandle++) {
 801285c:	3601      	adds	r6, #1
 801285e:	e7e5      	b.n	801282c <aci_gatt_read_permit_req_event+0x8>
}
 8012860:	bd70      	pop	{r4, r5, r6, pc}
 8012862:	bf00      	nop
 8012864:	2000296c 	.word	0x2000296c

08012868 <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 8012868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801286c:	b0c5      	sub	sp, #276	; 0x114
  uint32_t FoundHandle=0;
  uint8_t RegisteredHandle;
  
  if (Attr_Handle==((uint16_t)(0x0002+2))) {
 801286e:	2904      	cmp	r1, #4
{
 8012870:	f8dd a138 	ldr.w	sl, [sp, #312]	; 0x138
 8012874:	4f3f      	ldr	r7, [pc, #252]	; (8012974 <aci_gatt_attribute_modified_event+0x10c>)
 8012876:	460d      	mov	r5, r1
 8012878:	4690      	mov	r8, r2
 801287a:	461e      	mov	r6, r3
  if (Attr_Handle==((uint16_t)(0x0002+2))) {
 801287c:	d138      	bne.n	80128f0 <aci_gatt_attribute_modified_event+0x88>
    BLE_MANAGER_PRINTF("Notification on Service Change Characteristic\r\n");
 801287e:	493e      	ldr	r1, [pc, #248]	; (8012978 <aci_gatt_attribute_modified_event+0x110>)
 8012880:	a804      	add	r0, sp, #16
 8012882:	f00a fac9 	bl	801ce18 <strcpy>
 8012886:	212f      	movs	r1, #47	; 0x2f
 8012888:	a804      	add	r0, sp, #16
 801288a:	f007 f88f 	bl	80199ac <CDC_Fill_Buffer>
    FoundHandle=1;
    if(BlueNRG_StackValue.ForceRescan) {
 801288e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8012892:	2001      	movs	r0, #1
 8012894:	b373      	cbz	r3, 80128f4 <aci_gatt_attribute_modified_event+0x8c>
      tBleStatus ret = BLE_STATUS_INSUFFICIENT_RESOURCES;
      uint8_t buff[4];
      
      /* Delete all the Handles from 0x0001 to 0xFFFF */
      STORE_LE_16(buff  ,0x0001U);
      STORE_LE_16(buff+2,0xFFFFU);
 8012896:	23ff      	movs	r3, #255	; 0xff
      STORE_LE_16(buff  ,0x0001U);
 8012898:	a903      	add	r1, sp, #12
 801289a:	2200      	movs	r2, #0
      STORE_LE_16(buff+2,0xFFFFU);
 801289c:	f88d 300e 	strb.w	r3, [sp, #14]
 80128a0:	f88d 300f 	strb.w	r3, [sp, #15]
      
      ret = aci_gatt_update_char_value(0x0001,0x0002,0,4,buff);
 80128a4:	9100      	str	r1, [sp, #0]
 80128a6:	462b      	mov	r3, r5
 80128a8:	2102      	movs	r1, #2
      STORE_LE_16(buff  ,0x0001U);
 80128aa:	f88d 000c 	strb.w	r0, [sp, #12]
 80128ae:	f88d 200d 	strb.w	r2, [sp, #13]
      ret = aci_gatt_update_char_value(0x0001,0x0002,0,4,buff);
 80128b2:	f7fc f91f 	bl	800eaf4 <aci_gatt_update_char_value>
      
      if (ret == BLE_STATUS_SUCCESS){
 80128b6:	b9a8      	cbnz	r0, 80128e4 <aci_gatt_attribute_modified_event+0x7c>
        BLE_MANAGER_PRINTF("UUID Rescan Forced\r\n");
 80128b8:	4930      	ldr	r1, [pc, #192]	; (801297c <aci_gatt_attribute_modified_event+0x114>)
 80128ba:	a804      	add	r0, sp, #16
 80128bc:	f00a faac 	bl	801ce18 <strcpy>
 80128c0:	2114      	movs	r1, #20
      } else {
        BLE_MANAGER_PRINTF("Error: Problem forcing UUID Rescan\r\n");
 80128c2:	a804      	add	r0, sp, #16
 80128c4:	f007 f872 	bl	80199ac <CDC_Fill_Buffer>
    FoundHandle=1;
 80128c8:	2401      	movs	r4, #1
    
    /* Write */
    if(FoundHandle==0U) {
      if(BleCharsArray[RegisteredHandle]->Write_Request_CB!=NULL) {
        if(Attr_Handle==(BleCharsArray[RegisteredHandle]->attr_handle+1U)) {
          FoundHandle = 1U;
 80128ca:	f04f 0900 	mov.w	r9, #0
          BleCharsArray[RegisteredHandle]->Write_Request_CB(BleCharsArray[RegisteredHandle],Attr_Handle, Offset, Attr_Data_Length, Attr_Data);
 80128ce:	b2f6      	uxtb	r6, r6
  for(RegisteredHandle=0;((RegisteredHandle<UsedBleChars) && (FoundHandle==0U));RegisteredHandle++) {
 80128d0:	f897 2308 	ldrb.w	r2, [r7, #776]	; 0x308
 80128d4:	fa5f f389 	uxtb.w	r3, r9
 80128d8:	429a      	cmp	r2, r3
 80128da:	d92e      	bls.n	801293a <aci_gatt_attribute_modified_event+0xd2>
 80128dc:	b164      	cbz	r4, 80128f8 <aci_gatt_attribute_modified_event+0x90>
      Stderr_Update(BufferToWrite,BytesToWrite);
    } else {
      BLE_MANAGER_PRINTF("Notification UNKNOWN handle =%d\r\n",Attr_Handle);
    }
  }
}
 80128de:	b045      	add	sp, #276	; 0x114
 80128e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        BLE_MANAGER_PRINTF("Error: Problem forcing UUID Rescan\r\n");
 80128e4:	4926      	ldr	r1, [pc, #152]	; (8012980 <aci_gatt_attribute_modified_event+0x118>)
 80128e6:	a804      	add	r0, sp, #16
 80128e8:	f00a fa96 	bl	801ce18 <strcpy>
 80128ec:	2124      	movs	r1, #36	; 0x24
 80128ee:	e7e8      	b.n	80128c2 <aci_gatt_attribute_modified_event+0x5a>
  uint32_t FoundHandle=0;
 80128f0:	2400      	movs	r4, #0
 80128f2:	e7ea      	b.n	80128ca <aci_gatt_attribute_modified_event+0x62>
    FoundHandle=1;
 80128f4:	4604      	mov	r4, r0
 80128f6:	e7e8      	b.n	80128ca <aci_gatt_attribute_modified_event+0x62>
    if(BleCharsArray[RegisteredHandle]->AttrMod_Request_CB!=NULL) {
 80128f8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80128fc:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
 8012900:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8012904:	f1bb 0f00 	cmp.w	fp, #0
 8012908:	d00b      	beq.n	8012922 <aci_gatt_attribute_modified_event+0xba>
      if(Attr_Handle==(BleCharsArray[RegisteredHandle]->attr_handle+2U)) {
 801290a:	8b43      	ldrh	r3, [r0, #26]
 801290c:	3302      	adds	r3, #2
 801290e:	429d      	cmp	r5, r3
 8012910:	d107      	bne.n	8012922 <aci_gatt_attribute_modified_event+0xba>
          BleCharsArray[RegisteredHandle]->Write_Request_CB(BleCharsArray[RegisteredHandle],Attr_Handle, Offset, Attr_Data_Length, Attr_Data);
 8012912:	f8cd a000 	str.w	sl, [sp]
 8012916:	4633      	mov	r3, r6
 8012918:	4642      	mov	r2, r8
 801291a:	4629      	mov	r1, r5
 801291c:	47d8      	blx	fp
          FoundHandle = 1U;
 801291e:	2401      	movs	r4, #1
 8012920:	e008      	b.n	8012934 <aci_gatt_attribute_modified_event+0xcc>
      if(BleCharsArray[RegisteredHandle]->Write_Request_CB!=NULL) {
 8012922:	f8d0 b028 	ldr.w	fp, [r0, #40]	; 0x28
 8012926:	f1bb 0f00 	cmp.w	fp, #0
 801292a:	d003      	beq.n	8012934 <aci_gatt_attribute_modified_event+0xcc>
        if(Attr_Handle==(BleCharsArray[RegisteredHandle]->attr_handle+1U)) {
 801292c:	8b43      	ldrh	r3, [r0, #26]
 801292e:	3301      	adds	r3, #1
 8012930:	429d      	cmp	r5, r3
 8012932:	d0ee      	beq.n	8012912 <aci_gatt_attribute_modified_event+0xaa>
  for(RegisteredHandle=0;((RegisteredHandle<UsedBleChars) && (FoundHandle==0U));RegisteredHandle++) {
 8012934:	f109 0901 	add.w	r9, r9, #1
 8012938:	e7ca      	b.n	80128d0 <aci_gatt_attribute_modified_event+0x68>
  if(FoundHandle==0U) {
 801293a:	2c00      	cmp	r4, #0
 801293c:	d1cf      	bne.n	80128de <aci_gatt_attribute_modified_event+0x76>
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 801293e:	7a3b      	ldrb	r3, [r7, #8]
 8012940:	2b01      	cmp	r3, #1
 8012942:	d10c      	bne.n	801295e <aci_gatt_attribute_modified_event+0xf6>
      BytesToWrite =(uint8_t)sprintf((char *)BufferToWrite, "Notification UNKNOWN handle\n");
 8012944:	490f      	ldr	r1, [pc, #60]	; (8012984 <aci_gatt_attribute_modified_event+0x11c>)
 8012946:	4810      	ldr	r0, [pc, #64]	; (8012988 <aci_gatt_attribute_modified_event+0x120>)
 8012948:	f00a fa66 	bl	801ce18 <strcpy>
      Stderr_Update(BufferToWrite,BytesToWrite);
 801294c:	480e      	ldr	r0, [pc, #56]	; (8012988 <aci_gatt_attribute_modified_event+0x120>)
      BytesToWrite =(uint8_t)sprintf((char *)BufferToWrite, "Notification UNKNOWN handle\n");
 801294e:	211c      	movs	r1, #28
 8012950:	f887 12d5 	strb.w	r1, [r7, #725]	; 0x2d5
}
 8012954:	b045      	add	sp, #276	; 0x114
 8012956:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      Stderr_Update(BufferToWrite,BytesToWrite);
 801295a:	f7fe bc9f 	b.w	801129c <Stderr_Update>
      BLE_MANAGER_PRINTF("Notification UNKNOWN handle =%d\r\n",Attr_Handle);
 801295e:	490b      	ldr	r1, [pc, #44]	; (801298c <aci_gatt_attribute_modified_event+0x124>)
 8012960:	462a      	mov	r2, r5
 8012962:	a804      	add	r0, sp, #16
 8012964:	f00a f9e8 	bl	801cd38 <siprintf>
 8012968:	4601      	mov	r1, r0
 801296a:	a804      	add	r0, sp, #16
 801296c:	f007 f81e 	bl	80199ac <CDC_Fill_Buffer>
}
 8012970:	e7b5      	b.n	80128de <aci_gatt_attribute_modified_event+0x76>
 8012972:	bf00      	nop
 8012974:	2000296c 	.word	0x2000296c
 8012978:	08023a71 	.word	0x08023a71
 801297c:	08023aa1 	.word	0x08023aa1
 8012980:	08023ab6 	.word	0x08023ab6
 8012984:	08023adb 	.word	0x08023adb
 8012988:	20002b41 	.word	0x20002b41
 801298c:	08023af8 	.word	0x08023af8

08012990 <aci_l2cap_connection_update_resp_event>:
                                            uint16_t Result)
{
#if (BLE_DEBUG_LEVEL>2)
  BLE_MANAGER_PRINTF("aci_l2cap_connection_update_resp_event Result=%d\r\n",Result);
#endif
}
 8012990:	4770      	bx	lr

08012992 <hci_le_connection_update_complete_event>:
  BLE_MANAGER_PRINTF("\tStatus=%d\r\n",Status);
  BLE_MANAGER_PRINTF("\tConn_Interval=%d\r\n",Conn_Interval);
  BLE_MANAGER_PRINTF("\tConn_Latency=%d\r\n",Conn_Latency);
  BLE_MANAGER_PRINTF("\tSupervision_Timeout=%d\r\n",Supervision_Timeout);
#endif
}
 8012992:	4770      	bx	lr

08012994 <aci_att_exchange_mtu_resp_event>:
* Return         : See file bluenrg1_events.h
*******************************************************************************/
void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU)
{
  if((Server_RX_MTU-3U)<MaxBLECharLen) {
 8012994:	4b04      	ldr	r3, [pc, #16]	; (80129a8 <aci_att_exchange_mtu_resp_event+0x14>)
 8012996:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
 801299a:	3903      	subs	r1, #3
 801299c:	4291      	cmp	r1, r2
    MaxBLECharLen = (uint8_t)(Server_RX_MTU-3U);
 801299e:	bf38      	it	cc
 80129a0:	f883 1138 	strbcc.w	r1, [r3, #312]	; 0x138
  }
#if (BLE_DEBUG_LEVEL>2)
  BLE_MANAGER_PRINTF("aci_att_exchange_mtu_resp_event Server_RX_MTU=%d\r\n",Server_RX_MTU);
#endif
}
 80129a4:	4770      	bx	lr
 80129a6:	bf00      	nop
 80129a8:	2000296c 	.word	0x2000296c

080129ac <aci_gatt_proc_complete_event>:
* Output         : See file bluenrg1_events.h
* Return         : See file bluenrg1_events.h
*******************************************************************************/
void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code)
{
 80129ac:	b500      	push	{lr}
  if(Error_Code!=0U) {
 80129ae:	460a      	mov	r2, r1
{
 80129b0:	b0c1      	sub	sp, #260	; 0x104
  if(Error_Code!=0U) {
 80129b2:	b139      	cbz	r1, 80129c4 <aci_gatt_proc_complete_event+0x18>
    BLE_MANAGER_PRINTF("Error: aci_gatt_proc_complete_event Error Code=%d\r\n",Error_Code);
 80129b4:	4905      	ldr	r1, [pc, #20]	; (80129cc <aci_gatt_proc_complete_event+0x20>)
 80129b6:	4668      	mov	r0, sp
 80129b8:	f00a f9be 	bl	801cd38 <siprintf>
 80129bc:	4601      	mov	r1, r0
 80129be:	4668      	mov	r0, sp
 80129c0:	f006 fff4 	bl	80199ac <CDC_Fill_Buffer>
#if (BLE_DEBUG_LEVEL>2)
  } else {
    BLE_MANAGER_PRINTF("aci_gatt_proc_complete_event Success\r\n");
#endif
  }
}
 80129c4:	b041      	add	sp, #260	; 0x104
 80129c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80129ca:	bf00      	nop
 80129cc:	08023b1a 	.word	0x08023b1a

080129d0 <hci_le_data_length_change_event>:
void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime)
{
 80129d0:	b500      	push	{lr}
 80129d2:	b0c1      	sub	sp, #260	; 0x104
  tBleStatus RetStatus;
#if (BLE_DEBUG_LEVEL>2)
  BLE_MANAGER_PRINTF("hci_le_data_length_change_event\r\n");
#endif
  RetStatus = aci_gatt_exchange_config(Connection_Handle);
 80129d4:	f7fc f8bc 	bl	800eb50 <aci_gatt_exchange_config>
  if( RetStatus !=BLE_STATUS_SUCCESS) {
 80129d8:	b138      	cbz	r0, 80129ea <hci_le_data_length_change_event+0x1a>
    BLE_MANAGER_PRINTF("Error: ACI GATT Exchange Config Failed\r\n");
 80129da:	4905      	ldr	r1, [pc, #20]	; (80129f0 <hci_le_data_length_change_event+0x20>)
 80129dc:	4668      	mov	r0, sp
 80129de:	f00a fa1b 	bl	801ce18 <strcpy>
 80129e2:	2128      	movs	r1, #40	; 0x28
 80129e4:	4668      	mov	r0, sp
 80129e6:	f006 ffe1 	bl	80199ac <CDC_Fill_Buffer>
#if (BLE_DEBUG_LEVEL>2)
  } else {
    BLE_MANAGER_PRINTF("ACI GATT Exchange Config Done\r\n");
#endif
  }
}
 80129ea:	b041      	add	sp, #260	; 0x104
 80129ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80129f0:	08023b4e 	.word	0x08023b4e

080129f4 <aci_gatt_indication_event>:
*/
void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[])
{
 80129f4:	b500      	push	{lr}
 80129f6:	b0c1      	sub	sp, #260	; 0x104
    }
    
    BLE_MANAGER_PRINTF("Nothing to do except send confirmation\r\n");
  #endif
#endif /* BLE_MANAGER_DEBUG */
  RetStatus = aci_gatt_confirm_indication(Connection_Handle);
 80129f8:	f7fc f8ca 	bl	800eb90 <aci_gatt_confirm_indication>
  if (RetStatus != BLE_STATUS_SUCCESS) {
 80129fc:	4602      	mov	r2, r0
 80129fe:	b138      	cbz	r0, 8012a10 <aci_gatt_indication_event+0x1c>
    BLE_MANAGER_PRINTF("Error: aci_gatt_confirm_indicationt failed %d\r\n",RetStatus);
 8012a00:	4905      	ldr	r1, [pc, #20]	; (8012a18 <aci_gatt_indication_event+0x24>)
 8012a02:	4668      	mov	r0, sp
 8012a04:	f00a f998 	bl	801cd38 <siprintf>
 8012a08:	4601      	mov	r1, r0
 8012a0a:	4668      	mov	r0, sp
 8012a0c:	f006 ffce 	bl	80199ac <CDC_Fill_Buffer>
#if (BLE_DEBUG_LEVEL>2)
  } else {
    BLE_MANAGER_PRINTF("aci_gatt_confirm_indication Done\r\n");
#endif
  }
}
 8012a10:	b041      	add	sp, #260	; 0x104
 8012a12:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a16:	bf00      	nop
 8012a18:	08023b77 	.word	0x08023b77

08012a1c <hci_hardware_error_event>:
- 0x02: Timer overrun error
- 0x03: Internal queue overflow error
* @retval None
*/
void hci_hardware_error_event(uint8_t Hardware_Code)
{
 8012a1c:	b500      	push	{lr}
 8012a1e:	b0c1      	sub	sp, #260	; 0x104
 8012a20:	4602      	mov	r2, r0
  BLE_MANAGER_PRINTF("Error: hci_hardware_error_event Hardware_Code=%x\r\n",Hardware_Code);
 8012a22:	4906      	ldr	r1, [pc, #24]	; (8012a3c <hci_hardware_error_event+0x20>)
 8012a24:	4668      	mov	r0, sp
 8012a26:	f00a f987 	bl	801cd38 <siprintf>
 8012a2a:	4601      	mov	r1, r0
 8012a2c:	4668      	mov	r0, sp
 8012a2e:	f006 ffbd 	bl	80199ac <CDC_Fill_Buffer>
  //BLE_MANAGER_DELAY(1000);
  HAL_NVIC_SystemReset();
}
 8012a32:	b041      	add	sp, #260	; 0x104
 8012a34:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_SystemReset();
 8012a38:	f7f6 bd70 	b.w	800951c <HAL_NVIC_SystemReset>
 8012a3c:	08023ba7 	.word	0x08023ba7

08012a40 <aci_gap_bond_lost_event>:
* Input          : See file bluenrg1_events.h
* Output         : See file bluenrg1_events.h
* Return         : See file bluenrg1_events.h
*******************************************************************************/
void aci_gap_bond_lost_event(void) {
  aci_gap_allow_rebond(connection_handle);
 8012a40:	4b02      	ldr	r3, [pc, #8]	; (8012a4c <aci_gap_bond_lost_event+0xc>)
 8012a42:	f8b3 03bc 	ldrh.w	r0, [r3, #956]	; 0x3bc
 8012a46:	f7fb bf07 	b.w	800e858 <aci_gap_allow_rebond>
 8012a4a:	bf00      	nop
 8012a4c:	2000296c 	.word	0x2000296c

08012a50 <aci_gap_pairing_complete_event>:
* Return         : See file bluenrg1_events.h
*******************************************************************************/
void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason)
{
 8012a50:	b500      	push	{lr}
 8012a52:	4613      	mov	r3, r2
 8012a54:	b0c9      	sub	sp, #292	; 0x124
  
  if(Status==0x00U) {
 8012a56:	bb11      	cbnz	r1, 8012a9e <aci_gap_pairing_complete_event+0x4e>
    BLE_MANAGER_PRINTF("Pairing Completed\r\n");
 8012a58:	4916      	ldr	r1, [pc, #88]	; (8012ab4 <aci_gap_pairing_complete_event+0x64>)
 8012a5a:	a808      	add	r0, sp, #32
 8012a5c:	f00a f9dc 	bl	801ce18 <strcpy>
 8012a60:	2113      	movs	r1, #19
  } else {
    BLE_MANAGER_PRINTF("Pairing Not Completed for [%s] with reason=%x\r\n",
 8012a62:	a808      	add	r0, sp, #32
 8012a64:	f006 ffa2 	bl	80199ac <CDC_Fill_Buffer>
{
  tBleStatus RetStatus;
  uint8_t NumOfAddresses;
  Bonded_Device_Entry_t BondedDeviceEntry[BLE_MANAGER_MAX_BONDED_DEVICES];
  
  RetStatus =  aci_gap_get_bonded_devices(&NumOfAddresses, BondedDeviceEntry);
 8012a68:	a902      	add	r1, sp, #8
 8012a6a:	f10d 0007 	add.w	r0, sp, #7
 8012a6e:	f7fb ff13 	bl	800e898 <aci_gap_get_bonded_devices>
  
  if (RetStatus == BLE_STATUS_SUCCESS) {
 8012a72:	b970      	cbnz	r0, 8012a92 <aci_gap_pairing_complete_event+0x42>
    if (NumOfAddresses > 0U) {
 8012a74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012a78:	b15b      	cbz	r3, 8012a92 <aci_gap_pairing_complete_event+0x42>
#if (BLE_DEBUG_LEVEL>2)
      BLE_MANAGER_PRINTF("Bonded with %d Device(s): \r\n", NumOfAddresses);
#endif
      RetStatus = aci_gap_configure_whitelist();
 8012a7a:	f7fb fed1 	bl	800e820 <aci_gap_configure_whitelist>
      if (RetStatus != BLE_STATUS_SUCCESS) {
 8012a7e:	4602      	mov	r2, r0
 8012a80:	b138      	cbz	r0, 8012a92 <aci_gap_pairing_complete_event+0x42>
        BLE_MANAGER_PRINTF("Error: aci_gap_configure_whitelist() failed:0x%02x\r\n", RetStatus);
 8012a82:	490d      	ldr	r1, [pc, #52]	; (8012ab8 <aci_gap_pairing_complete_event+0x68>)
 8012a84:	a808      	add	r0, sp, #32
 8012a86:	f00a f957 	bl	801cd38 <siprintf>
 8012a8a:	2132      	movs	r1, #50	; 0x32
 8012a8c:	a808      	add	r0, sp, #32
 8012a8e:	f006 ff8d 	bl	80199ac <CDC_Fill_Buffer>
  BLE_MANAGER_DELAY(100);
 8012a92:	2064      	movs	r0, #100	; 0x64
}
 8012a94:	b049      	add	sp, #292	; 0x124
 8012a96:	f85d eb04 	ldr.w	lr, [sp], #4
  BLE_MANAGER_DELAY(100);
 8012a9a:	f006 b8a5 	b.w	8018be8 <HAL_Delay>
    BLE_MANAGER_PRINTF("Pairing Not Completed for [%s] with reason=%x\r\n",
 8012a9e:	4807      	ldr	r0, [pc, #28]	; (8012abc <aci_gap_pairing_complete_event+0x6c>)
 8012aa0:	4a07      	ldr	r2, [pc, #28]	; (8012ac0 <aci_gap_pairing_complete_event+0x70>)
 8012aa2:	2901      	cmp	r1, #1
 8012aa4:	bf08      	it	eq
 8012aa6:	4602      	moveq	r2, r0
 8012aa8:	4906      	ldr	r1, [pc, #24]	; (8012ac4 <aci_gap_pairing_complete_event+0x74>)
 8012aaa:	a808      	add	r0, sp, #32
 8012aac:	f00a f944 	bl	801cd38 <siprintf>
 8012ab0:	4601      	mov	r1, r0
 8012ab2:	e7d6      	b.n	8012a62 <aci_gap_pairing_complete_event+0x12>
 8012ab4:	08023be1 	.word	0x08023be1
 8012ab8:	08023c25 	.word	0x08023c25
 8012abc:	080227fa 	.word	0x080227fa
 8012ac0:	08023bda 	.word	0x08023bda
 8012ac4:	08023bf5 	.word	0x08023bf5

08012ac8 <aci_gap_pass_key_req_event>:
{
 8012ac8:	b500      	push	{lr}
  status = aci_gap_pass_key_resp(connection_handle, BlueNRG_StackValue.SecurePIN);
 8012aca:	4b0a      	ldr	r3, [pc, #40]	; (8012af4 <aci_gap_pass_key_req_event+0x2c>)
{
 8012acc:	b0c1      	sub	sp, #260	; 0x104
  status = aci_gap_pass_key_resp(connection_handle, BlueNRG_StackValue.SecurePIN);
 8012ace:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012ad0:	f8b3 03bc 	ldrh.w	r0, [r3, #956]	; 0x3bc
 8012ad4:	f7fb fddc 	bl	800e690 <aci_gap_pass_key_resp>
  if (status != BLE_STATUS_SUCCESS) {
 8012ad8:	4602      	mov	r2, r0
 8012ada:	b138      	cbz	r0, 8012aec <aci_gap_pass_key_req_event+0x24>
    BLE_MANAGER_PRINTF("Error: aci_gap_pass_key_resp failed:0x%02x\r\n", status);
 8012adc:	4906      	ldr	r1, [pc, #24]	; (8012af8 <aci_gap_pass_key_req_event+0x30>)
 8012ade:	4668      	mov	r0, sp
 8012ae0:	f00a f92a 	bl	801cd38 <siprintf>
 8012ae4:	212a      	movs	r1, #42	; 0x2a
 8012ae6:	4668      	mov	r0, sp
 8012ae8:	f006 ff60 	bl	80199ac <CDC_Fill_Buffer>
}
 8012aec:	b041      	add	sp, #260	; 0x104
 8012aee:	f85d fb04 	ldr.w	pc, [sp], #4
 8012af2:	bf00      	nop
 8012af4:	2000296c 	.word	0x2000296c
 8012af8:	08023c5a 	.word	0x08023c5a

08012afc <aci_gap_numeric_comparison_value_event>:
#if (BLE_DEBUG_LEVEL>2)
  BLE_MANAGER_PRINTF("aci_gap_numeric_comparison_value_event Numeric_Value=%ld\r\n",Numeric_Value);
#endif
  
  /* Confirm Yes... without control of Numeric Value received from Master */
  aci_gap_numeric_comparison_value_confirm_yesno(Connection_Handle,0x01);
 8012afc:	2101      	movs	r1, #1
 8012afe:	f7fb bf1d 	b.w	800e93c <aci_gap_numeric_comparison_value_confirm_yesno>

08012b02 <hci_encryption_change_event>:
void hci_encryption_change_event(uint8_t Status,uint16_t Connection_Handle,uint8_t Encryption_Enabled)
{
#if (BLE_DEBUG_LEVEL>2)
  BLE_MANAGER_PRINTF("hci_encryption_change_event\r\n");  
#endif
}
 8012b02:	4770      	bx	lr

08012b04 <AttrMod_Request_TimeDomain>:
 * @param  uint8_t *att_data attribute data
 * @retval None
 */
static void AttrMod_Request_TimeDomain(void *VoidCharPointer, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 8012b04:	9b00      	ldr	r3, [sp, #0]
 8012b06:	781b      	ldrb	r3, [r3, #0]
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d102      	bne.n	8012b12 <AttrMod_Request_TimeDomain+0xe>
    BLE_TimeDomain_NotifyEvent= BLE_NOTIFY_SUB;
 8012b0c:	4a03      	ldr	r2, [pc, #12]	; (8012b1c <AttrMod_Request_TimeDomain+0x18>)
 8012b0e:	7013      	strb	r3, [r2, #0]
 8012b10:	4770      	bx	lr
  } else if (att_data[0] == 0U){
 8012b12:	b913      	cbnz	r3, 8012b1a <AttrMod_Request_TimeDomain+0x16>
    BLE_TimeDomain_NotifyEvent= BLE_NOTIFY_UNSUB;
 8012b14:	4b01      	ldr	r3, [pc, #4]	; (8012b1c <AttrMod_Request_TimeDomain+0x18>)
 8012b16:	2202      	movs	r2, #2
 8012b18:	701a      	strb	r2, [r3, #0]
   Term_Update(BufferToWrite,BytesToWrite);
 } else {
   BLE_MANAGER_PRINTF("--->Time Domain=%s", (BLE_TimeDomain_NotifyEvent == BLE_NOTIFY_SUB) ? " ON\r\n" : " OFF\r\n");
 }
#endif
}
 8012b1a:	4770      	bx	lr
 8012b1c:	20002d8c 	.word	0x20002d8c

08012b20 <BLE_InitTimeDomainService>:
{
 8012b20:	b530      	push	{r4, r5, lr}
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 8012b22:	4c15      	ldr	r4, [pc, #84]	; (8012b78 <BLE_InitTimeDomainService+0x58>)
{
 8012b24:	b0c1      	sub	sp, #260	; 0x104
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 8012b26:	2228      	movs	r2, #40	; 0x28
 8012b28:	2100      	movs	r1, #0
 8012b2a:	f104 0008 	add.w	r0, r4, #8
 8012b2e:	f009 fb99 	bl	801c264 <memset>
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_TimeDomain;
 8012b32:	4b12      	ldr	r3, [pc, #72]	; (8012b7c <BLE_InitTimeDomainService+0x5c>)
 8012b34:	6263      	str	r3, [r4, #36]	; 0x24
  COPY_TIME_DOMAIN_CHAR_UUID((BleCharPointer->uuid));
 8012b36:	4b12      	ldr	r3, [pc, #72]	; (8012b80 <BLE_InitTimeDomainService+0x60>)
 8012b38:	6063      	str	r3, [r4, #4]
 8012b3a:	2302      	movs	r3, #2
 8012b3c:	7223      	strb	r3, [r4, #8]
 8012b3e:	73a3      	strb	r3, [r4, #14]
  BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 8012b40:	7523      	strb	r3, [r4, #20]
  COPY_TIME_DOMAIN_CHAR_UUID((BleCharPointer->uuid));
 8012b42:	f64a 4236 	movw	r2, #44086	; 0xac36
  BleCharPointer->Char_Value_Length=2+18;
 8012b46:	2314      	movs	r3, #20
  COPY_TIME_DOMAIN_CHAR_UUID((BleCharPointer->uuid));
 8012b48:	8162      	strh	r2, [r4, #10]
  BleCharPointer->Char_Value_Length=2+18;
 8012b4a:	82e3      	strh	r3, [r4, #22]
  COPY_TIME_DOMAIN_CHAR_UUID((BleCharPointer->uuid));
 8012b4c:	f241 12e1 	movw	r2, #4577	; 0x11e1
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 8012b50:	2310      	movs	r3, #16
  COPY_TIME_DOMAIN_CHAR_UUID((BleCharPointer->uuid));
 8012b52:	81a2      	strh	r2, [r4, #12]
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 8012b54:	7623      	strb	r3, [r4, #24]
  COPY_TIME_DOMAIN_CHAR_UUID((BleCharPointer->uuid));
 8012b56:	2206      	movs	r2, #6
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 8012b58:	f241 0304 	movw	r3, #4100	; 0x1004
  BLE_MANAGER_PRINTF("BLE Time Domain features ok\r\n");
 8012b5c:	4909      	ldr	r1, [pc, #36]	; (8012b84 <BLE_InitTimeDomainService+0x64>)
  COPY_TIME_DOMAIN_CHAR_UUID((BleCharPointer->uuid));
 8012b5e:	7422      	strb	r2, [r4, #16]
  BLE_MANAGER_PRINTF("BLE Time Domain features ok\r\n");
 8012b60:	4668      	mov	r0, sp
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 8012b62:	8363      	strh	r3, [r4, #26]
  BLE_MANAGER_PRINTF("BLE Time Domain features ok\r\n");
 8012b64:	f00a f958 	bl	801ce18 <strcpy>
 8012b68:	211d      	movs	r1, #29
 8012b6a:	4668      	mov	r0, sp
 8012b6c:	f006 ff1e 	bl	80199ac <CDC_Fill_Buffer>
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 8012b70:	1d25      	adds	r5, r4, #4
}
 8012b72:	4628      	mov	r0, r5
 8012b74:	b041      	add	sp, #260	; 0x104
 8012b76:	bd30      	pop	{r4, r5, pc}
 8012b78:	20002d8c 	.word	0x20002d8c
 8012b7c:	08012b05 	.word	0x08012b05
 8012b80:	a5d5c51b 	.word	0xa5d5c51b
 8012b84:	08023ca9 	.word	0x08023ca9

08012b88 <BLE_SetTimeDomainAdvertizeData>:
  manuf_data[TIME_DOMAIN_ADVERTIZE_DATA_POSITION] |= 0x06U;
 8012b88:	7c83      	ldrb	r3, [r0, #18]
 8012b8a:	f043 0306 	orr.w	r3, r3, #6
 8012b8e:	7483      	strb	r3, [r0, #18]
}
 8012b90:	4770      	bx	lr
	...

08012b94 <BLE_TimeDomainUpdate>:
{
 8012b94:	b510      	push	{r4, lr}
 8012b96:	b0cc      	sub	sp, #304	; 0x130
 8012b98:	ed8d 0a03 	vstr	s0, [sp, #12]
 8012b9c:	edcd 0a04 	vstr	s1, [sp, #16]
 8012ba0:	ed8d 1a05 	vstr	s2, [sp, #20]
 8012ba4:	edcd 1a00 	vstr	s3, [sp]
 8012ba8:	ed8d 2a01 	vstr	s4, [sp, #4]
 8012bac:	edcd 2a02 	vstr	s5, [sp, #8]
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 8012bb0:	f7f5 fd38 	bl	8008624 <HAL_GetTick>
 8012bb4:	08c0      	lsrs	r0, r0, #3
 8012bb6:	f88d 001c 	strb.w	r0, [sp, #28]
 8012bba:	f7f5 fd33 	bl	8008624 <HAL_GetTick>
  TempResult= PeakValue.x * ((float)100);
 8012bbe:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8012cf0 <BLE_TimeDomainUpdate+0x15c>
 8012bc2:	ed9d 7a03 	vldr	s14, [sp, #12]
  TempResult= PeakValue.z * ((float)100);
 8012bc6:	eddd 7a05 	vldr	s15, [sp, #20]
  TempResult= PeakValue.x * ((float)100);
 8012bca:	ee27 7a26 	vmul.f32	s14, s14, s13
  TempResult= PeakValue.z * ((float)100);
 8012bce:	ee67 7aa6 	vmul.f32	s15, s15, s13
  Temp= (uint16_t)TempResult;
 8012bd2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  Temp= (uint16_t)TempResult;
 8012bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  Temp= (uint16_t)TempResult;
 8012bda:	ee17 3a10 	vmov	r3, s14
  TempResult= PeakValue.y * ((float)100);
 8012bde:	ed9d 7a04 	vldr	s14, [sp, #16]
 8012be2:	ee27 7a26 	vmul.f32	s14, s14, s13
  Temp= (uint16_t)TempResult;
 8012be6:	b29b      	uxth	r3, r3
  Temp= (uint16_t)TempResult;
 8012be8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  STORE_LE_16(Buff+2 ,Temp);
 8012bec:	f88d 301e 	strb.w	r3, [sp, #30]
 8012bf0:	0a1b      	lsrs	r3, r3, #8
 8012bf2:	f88d 301f 	strb.w	r3, [sp, #31]
  Temp= (uint16_t)TempResult;
 8012bf6:	ee17 3a10 	vmov	r3, s14
 8012bfa:	b29b      	uxth	r3, r3
  STORE_LE_16(Buff+4 ,Temp);
 8012bfc:	f88d 3020 	strb.w	r3, [sp, #32]
 8012c00:	0a1b      	lsrs	r3, r3, #8
  TempFloat = SpeedRmsValue.x * ((float)1000);
 8012c02:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8012cf4 <BLE_TimeDomainUpdate+0x160>
  STORE_LE_16(Buff+4 ,Temp);
 8012c06:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  Temp= (uint16_t)TempResult;
 8012c0a:	ee17 3a90 	vmov	r3, s15
  TempFloat = SpeedRmsValue.x * ((float)1000);
 8012c0e:	eddd 7a00 	vldr	s15, [sp]
  Temp= (uint16_t)TempResult;
 8012c12:	b29b      	uxth	r3, r3
  Buff[BuffPos]= TempBuff[0];
 8012c14:	ee67 7a87 	vmul.f32	s15, s15, s14
  STORE_LE_16(Buff+6 ,Temp);
 8012c18:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8012c1c:	0a1b      	lsrs	r3, r3, #8
 8012c1e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  Buff[BuffPos]= TempBuff[0];
 8012c22:	ee17 3a90 	vmov	r3, s15
  TempFloat = SpeedRmsValue.y * ((float)1000);
 8012c26:	eddd 7a01 	vldr	s15, [sp, #4]
  Buff[BuffPos]= TempBuff[0];
 8012c2a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  Buff[BuffPos]= TempBuff[0];
 8012c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
  Buff[BuffPos]= TempBuff[1];
 8012c32:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012c36:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
  Buff[BuffPos]= TempBuff[2];
 8012c3a:	f3c3 4207 	ubfx	r2, r3, #16, #8
  Buff[BuffPos]= TempBuff[3];
 8012c3e:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8012c42:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  Buff[BuffPos]= TempBuff[0];
 8012c46:	ee17 3a90 	vmov	r3, s15
  TempFloat = SpeedRmsValue.z * ((float)1000);
 8012c4a:	eddd 7a02 	vldr	s15, [sp, #8]
  Buff[BuffPos]= TempBuff[2];
 8012c4e:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
  Buff[BuffPos]= TempBuff[0];
 8012c52:	ee67 7a87 	vmul.f32	s15, s15, s14
  Buff[BuffPos]= TempBuff[1];
 8012c56:	f3c3 2207 	ubfx	r2, r3, #8, #8
  Buff[BuffPos]= TempBuff[0];
 8012c5a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  Buff[BuffPos]= TempBuff[1];
 8012c5e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
  Buff[BuffPos]= TempBuff[2];
 8012c62:	f3c3 4207 	ubfx	r2, r3, #16, #8
  Buff[BuffPos]= TempBuff[3];
 8012c66:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8012c6a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  Buff[BuffPos]= TempBuff[0];
 8012c6e:	ee17 3a90 	vmov	r3, s15
  Buff[BuffPos]= TempBuff[2];
 8012c72:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
  Buff[BuffPos]= TempBuff[1];
 8012c76:	f3c3 2207 	ubfx	r2, r3, #8, #8
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 8012c7a:	0ac0      	lsrs	r0, r0, #11
  Buff[BuffPos]= TempBuff[0];
 8012c7c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  Buff[BuffPos]= TempBuff[1];
 8012c80:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  Buff[BuffPos]= TempBuff[2];
 8012c84:	f3c3 4207 	ubfx	r2, r3, #16, #8
  Buff[BuffPos]= TempBuff[3];
 8012c88:	f3c3 6307 	ubfx	r3, r3, #24, #8
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 8012c8c:	f88d 001d 	strb.w	r0, [sp, #29]
  Buff[BuffPos]= TempBuff[2];
 8012c90:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  Buff[BuffPos]= TempBuff[3];
 8012c94:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharTimeDomain, 0, 20,Buff);
 8012c98:	4817      	ldr	r0, [pc, #92]	; (8012cf8 <BLE_TimeDomainUpdate+0x164>)
 8012c9a:	ab07      	add	r3, sp, #28
 8012c9c:	2214      	movs	r2, #20
 8012c9e:	2100      	movs	r1, #0
 8012ca0:	f7fe fa9e 	bl	80111e0 <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 8012ca4:	4604      	mov	r4, r0
 8012ca6:	b178      	cbz	r0, 8012cc8 <BLE_TimeDomainUpdate+0x134>
    if(ret != BLE_STATUS_INSUFFICIENT_RESOURCES) {
 8012ca8:	2864      	cmp	r0, #100	; 0x64
 8012caa:	d01a      	beq.n	8012ce2 <BLE_TimeDomainUpdate+0x14e>
      if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 8012cac:	4b13      	ldr	r3, [pc, #76]	; (8012cfc <BLE_TimeDomainUpdate+0x168>)
 8012cae:	781b      	ldrb	r3, [r3, #0]
 8012cb0:	2b01      	cmp	r3, #1
 8012cb2:	d10c      	bne.n	8012cce <BLE_TimeDomainUpdate+0x13a>
        BytesToWrite =(uint8_t)sprintf((char *)BufferToWrite, "Error Updating Time Domain Char\n");
 8012cb4:	4912      	ldr	r1, [pc, #72]	; (8012d00 <BLE_TimeDomainUpdate+0x16c>)
 8012cb6:	4813      	ldr	r0, [pc, #76]	; (8012d04 <BLE_TimeDomainUpdate+0x170>)
 8012cb8:	f00a f8ae 	bl	801ce18 <strcpy>
 8012cbc:	4b12      	ldr	r3, [pc, #72]	; (8012d08 <BLE_TimeDomainUpdate+0x174>)
        Stderr_Update(BufferToWrite,BytesToWrite);
 8012cbe:	4811      	ldr	r0, [pc, #68]	; (8012d04 <BLE_TimeDomainUpdate+0x170>)
        BytesToWrite =(uint8_t)sprintf((char *)BufferToWrite, "Error Updating Time Domain Char\n");
 8012cc0:	2120      	movs	r1, #32
 8012cc2:	7019      	strb	r1, [r3, #0]
        Stderr_Update(BufferToWrite,BytesToWrite);
 8012cc4:	f7fe faea 	bl	801129c <Stderr_Update>
}
 8012cc8:	4620      	mov	r0, r4
 8012cca:	b04c      	add	sp, #304	; 0x130
 8012ccc:	bd10      	pop	{r4, pc}
        BLE_MANAGER_PRINTF("Error Updating Time Domain Char ret=%x\r\n",ret);
 8012cce:	490f      	ldr	r1, [pc, #60]	; (8012d0c <BLE_TimeDomainUpdate+0x178>)
 8012cd0:	4602      	mov	r2, r0
 8012cd2:	a80c      	add	r0, sp, #48	; 0x30
 8012cd4:	f00a f830 	bl	801cd38 <siprintf>
 8012cd8:	4601      	mov	r1, r0
      BLE_MANAGER_PRINTF("Error Updating Time Domain Char ret=%x\r\n",ret);
 8012cda:	a80c      	add	r0, sp, #48	; 0x30
 8012cdc:	f006 fe66 	bl	80199ac <CDC_Fill_Buffer>
 8012ce0:	e7f2      	b.n	8012cc8 <BLE_TimeDomainUpdate+0x134>
 8012ce2:	490a      	ldr	r1, [pc, #40]	; (8012d0c <BLE_TimeDomainUpdate+0x178>)
 8012ce4:	4602      	mov	r2, r0
 8012ce6:	a80c      	add	r0, sp, #48	; 0x30
 8012ce8:	f00a f826 	bl	801cd38 <siprintf>
 8012cec:	2128      	movs	r1, #40	; 0x28
 8012cee:	e7f4      	b.n	8012cda <BLE_TimeDomainUpdate+0x146>
 8012cf0:	42c80000 	.word	0x42c80000
 8012cf4:	447a0000 	.word	0x447a0000
 8012cf8:	20002d90 	.word	0x20002d90
 8012cfc:	20002974 	.word	0x20002974
 8012d00:	08023cc7 	.word	0x08023cc7
 8012d04:	20002b41 	.word	0x20002b41
 8012d08:	20002c41 	.word	0x20002c41
 8012d0c:	08023ce8 	.word	0x08023ce8

08012d10 <MotionSP_SwSpeedRmsFilter.part.0>:
  * @return none
  *
  * @details More details
  * Reference by MATLAB DSP Toolbox modified with Y(n-1)^2
  */
static void MotionSP_SwSpeedRmsFilter(SensorVal_f_t *pDstArr, SensorVal_f_t *pSrcArr, float Lambda, uint8_t start)
 8012d10:	b570      	push	{r4, r5, r6, lr}

    PrevSquareData.AXIS_X = pDstArr->AXIS_X * pDstArr->AXIS_X;
    PrevSquareData.AXIS_Y = pDstArr->AXIS_Y * pDstArr->AXIS_Y;
    PrevSquareData.AXIS_Z = pDstArr->AXIS_Z * pDstArr->AXIS_Z;

    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 8012d12:	4e30      	ldr	r6, [pc, #192]	; (8012dd4 <MotionSP_SwSpeedRmsFilter.part.0+0xc4>)
    SquareData.AXIS_X = pSrcArr->AXIS_X * pSrcArr->AXIS_X;
 8012d14:	ed91 7a00 	vldr	s14, [r1]
    PrevSquareData.AXIS_X = pDstArr->AXIS_X * pDstArr->AXIS_X;
 8012d18:	edd0 6a00 	vldr	s13, [r0]
    SquareData.AXIS_Y = pSrcArr->AXIS_Y * pSrcArr->AXIS_Y;
 8012d1c:	edd1 7a01 	vldr	s15, [r1, #4]
static void MotionSP_SwSpeedRmsFilter(SensorVal_f_t *pDstArr, SensorVal_f_t *pSrcArr, float Lambda, uint8_t start)
 8012d20:	ed2d 8b0a 	vpush	{d8-d12}
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 8012d24:	ed96 ba00 	vldr	s22, [r6]
    SquareData.AXIS_Z = pSrcArr->AXIS_Z * pSrcArr->AXIS_Z;
 8012d28:	edd1 8a02 	vldr	s17, [r1, #8]
    PrevSquareData.AXIS_Z = pDstArr->AXIS_Z * pDstArr->AXIS_Z;
 8012d2c:	edd0 9a02 	vldr	s19, [r0, #8]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 8012d30:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8012d34:	ee89 aa0b 	vdiv.f32	s20, s18, s22
static void MotionSP_SwSpeedRmsFilter(SensorVal_f_t *pDstArr, SensorVal_f_t *pSrcArr, float Lambda, uint8_t start)
 8012d38:	4604      	mov	r4, r0
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8012d3a:	2500      	movs	r5, #0
    SquareData.AXIS_X = pSrcArr->AXIS_X * pSrcArr->AXIS_X;
 8012d3c:	ee27 7a07 	vmul.f32	s14, s14, s14
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 8012d40:	ee39 ca4a 	vsub.f32	s24, s18, s20
    PrevSquareData.AXIS_X = pDstArr->AXIS_X * pDstArr->AXIS_X;
 8012d44:	ee66 6aa6 	vmul.f32	s13, s13, s13
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 8012d48:	ee27 7a0a 	vmul.f32	s14, s14, s20
    SquareData.AXIS_Y = pSrcArr->AXIS_Y * pSrcArr->AXIS_Y;
 8012d4c:	ee27 8aa7 	vmul.f32	s16, s15, s15
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 8012d50:	eea6 7a8c 	vfma.f32	s14, s13, s24
    PrevSquareData.AXIS_Y = pDstArr->AXIS_Y * pDstArr->AXIS_Y;
 8012d54:	edd0 7a01 	vldr	s15, [r0, #4]
 8012d58:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
static void MotionSP_SwSpeedRmsFilter(SensorVal_f_t *pDstArr, SensorVal_f_t *pSrcArr, float Lambda, uint8_t start)
 8012d60:	eef0 aa40 	vmov.f32	s21, s0
    SquareData.AXIS_Z = pSrcArr->AXIS_Z * pSrcArr->AXIS_Z;
 8012d64:	ee68 8aa8 	vmul.f32	s17, s17, s17
    PrevSquareData.AXIS_Y = pDstArr->AXIS_Y * pDstArr->AXIS_Y;
 8012d68:	ee67 baa7 	vmul.f32	s23, s15, s15
    PrevSquareData.AXIS_Z = pDstArr->AXIS_Z * pDstArr->AXIS_Z;
 8012d6c:	ee69 9aa9 	vmul.f32	s19, s19, s19
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 8012d70:	eeb0 0a47 	vmov.f32	s0, s14
 8012d74:	db28      	blt.n	8012dc8 <MotionSP_SwSpeedRmsFilter.part.0+0xb8>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8012d76:	f00d fbb1 	bl	80204dc <sqrtf>
 8012d7a:	ed84 0a00 	vstr	s0, [r4]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Y + (1 / WN) * SquareData.AXIS_Y), &pDstArr->AXIS_Y);
 8012d7e:	ee68 7a0a 	vmul.f32	s15, s16, s20
 8012d82:	eeeb 7a8c 	vfma.f32	s15, s23, s24
    if (in >= 0.0f)
 8012d86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8012d92:	db1b      	blt.n	8012dcc <MotionSP_SwSpeedRmsFilter.part.0+0xbc>
      *pOut = __builtin_sqrtf(in);
 8012d94:	f00d fba2 	bl	80204dc <sqrtf>
 8012d98:	ed84 0a01 	vstr	s0, [r4, #4]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Z + (1 / WN) * SquareData.AXIS_Z), &pDstArr->AXIS_Z);
 8012d9c:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8012da0:	eeb0 0a68 	vmov.f32	s0, s17
 8012da4:	eea9 0a8c 	vfma.f32	s0, s19, s24
    if (in >= 0.0f)
 8012da8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012db0:	db0e      	blt.n	8012dd0 <MotionSP_SwSpeedRmsFilter.part.0+0xc0>
      *pOut = __builtin_sqrtf(in);
 8012db2:	f00d fb93 	bl	80204dc <sqrtf>
 8012db6:	ed84 0a02 	vstr	s0, [r4, #8]

    WN_1 =  WN;
    WN =  Lambda * WN_1 + 1;
 8012dba:	eeab 9a2a 	vfma.f32	s18, s22, s21
 8012dbe:	ed86 9a00 	vstr	s18, [r6]
  }
}
 8012dc2:	ecbd 8b0a 	vpop	{d8-d12}
 8012dc6:	bd70      	pop	{r4, r5, r6, pc}

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8012dc8:	6005      	str	r5, [r0, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8012dca:	e7d8      	b.n	8012d7e <MotionSP_SwSpeedRmsFilter.part.0+0x6e>
      *pOut = 0.0f;
 8012dcc:	6065      	str	r5, [r4, #4]
      return (ARM_MATH_ARGUMENT_ERROR);
 8012dce:	e7e5      	b.n	8012d9c <MotionSP_SwSpeedRmsFilter.part.0+0x8c>
      *pOut = 0.0f;
 8012dd0:	60a5      	str	r5, [r4, #8]
      return (ARM_MATH_ARGUMENT_ERROR);
 8012dd2:	e7f2      	b.n	8012dba <MotionSP_SwSpeedRmsFilter.part.0+0xaa>
 8012dd4:	20002dbc 	.word	0x20002dbc

08012dd8 <MotionSP_speedDelOffset.constprop.0>:
  if (Restart == 1)
 8012dd8:	2a01      	cmp	r2, #1
static void MotionSP_speedDelOffset(SensorVal_f_t *pDstArr, SensorVal_f_t *pSrcArr, float Smooth, uint8_t Restart)
 8012dda:	b510      	push	{r4, lr}
 8012ddc:	4b23      	ldr	r3, [pc, #140]	; (8012e6c <MotionSP_speedDelOffset.constprop.0+0x94>)
  if (Restart == 1)
 8012dde:	d10d      	bne.n	8012dfc <MotionSP_speedDelOffset.constprop.0+0x24>
    pDstArr->AXIS_X = 0.0;
 8012de0:	2200      	movs	r2, #0
 8012de2:	6002      	str	r2, [r0, #0]
    pDstArr->AXIS_Y = 0.0;
 8012de4:	6042      	str	r2, [r0, #4]
    pDstArr->AXIS_Z = 0.0;
 8012de6:	6082      	str	r2, [r0, #8]
    DstArrPre.AXIS_X = pSrcArr->AXIS_X;
 8012de8:	680c      	ldr	r4, [r1, #0]
    DstArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 8012dea:	6848      	ldr	r0, [r1, #4]
    DstArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 8012dec:	688a      	ldr	r2, [r1, #8]
    DstArrPre.AXIS_X = pSrcArr->AXIS_X;
 8012dee:	605c      	str	r4, [r3, #4]
    DstArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 8012df0:	6098      	str	r0, [r3, #8]
    DstArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 8012df2:	60da      	str	r2, [r3, #12]
    SrcArrPre.AXIS_X = pSrcArr->AXIS_X;
 8012df4:	611c      	str	r4, [r3, #16]
    SrcArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 8012df6:	6158      	str	r0, [r3, #20]
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 8012df8:	619a      	str	r2, [r3, #24]
}
 8012dfa:	bd10      	pop	{r4, pc}
    pDstArr->AXIS_X = (Smooth * DstArrPre.AXIS_X) + Smooth * (pSrcArr->AXIS_X - SrcArrPre.AXIS_X);
 8012dfc:	edd1 6a00 	vldr	s13, [r1]
 8012e00:	edd3 7a04 	vldr	s15, [r3, #16]
 8012e04:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8012e70 <MotionSP_speedDelOffset.constprop.0+0x98>
    pDstArr->AXIS_Y = (Smooth * DstArrPre.AXIS_Y) + Smooth * (pSrcArr->AXIS_Y - SrcArrPre.AXIS_Y);
 8012e08:	ed91 7a01 	vldr	s14, [r1, #4]
    pDstArr->AXIS_Z = (Smooth * DstArrPre.AXIS_Z) + Smooth * (pSrcArr->AXIS_Z - SrcArrPre.AXIS_Z);
 8012e0c:	edd3 5a06 	vldr	s11, [r3, #24]
    pDstArr->AXIS_X = (Smooth * DstArrPre.AXIS_X) + Smooth * (pSrcArr->AXIS_X - SrcArrPre.AXIS_X);
 8012e10:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8012e14:	edd3 7a01 	vldr	s15, [r3, #4]
 8012e18:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012e1c:	eee7 6a86 	vfma.f32	s13, s15, s12
    pDstArr->AXIS_Y = (Smooth * DstArrPre.AXIS_Y) + Smooth * (pSrcArr->AXIS_Y - SrcArrPre.AXIS_Y);
 8012e20:	edd3 7a05 	vldr	s15, [r3, #20]
    pDstArr->AXIS_X = (Smooth * DstArrPre.AXIS_X) + Smooth * (pSrcArr->AXIS_X - SrcArrPre.AXIS_X);
 8012e24:	edc0 6a00 	vstr	s13, [r0]
    pDstArr->AXIS_Y = (Smooth * DstArrPre.AXIS_Y) + Smooth * (pSrcArr->AXIS_Y - SrcArrPre.AXIS_Y);
 8012e28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012e2c:	edd3 7a02 	vldr	s15, [r3, #8]
    SrcArrPre.AXIS_X = pSrcArr->AXIS_X;
 8012e30:	680a      	ldr	r2, [r1, #0]
 8012e32:	611a      	str	r2, [r3, #16]
    pDstArr->AXIS_Y = (Smooth * DstArrPre.AXIS_Y) + Smooth * (pSrcArr->AXIS_Y - SrcArrPre.AXIS_Y);
 8012e34:	ee27 7a06 	vmul.f32	s14, s14, s12
    DstArrPre.AXIS_X = pDstArr->AXIS_X;
 8012e38:	edc3 6a01 	vstr	s13, [r3, #4]
    pDstArr->AXIS_Y = (Smooth * DstArrPre.AXIS_Y) + Smooth * (pSrcArr->AXIS_Y - SrcArrPre.AXIS_Y);
 8012e3c:	eea7 7a86 	vfma.f32	s14, s15, s12
    pDstArr->AXIS_Z = (Smooth * DstArrPre.AXIS_Z) + Smooth * (pSrcArr->AXIS_Z - SrcArrPre.AXIS_Z);
 8012e40:	edd1 7a02 	vldr	s15, [r1, #8]
    pDstArr->AXIS_Y = (Smooth * DstArrPre.AXIS_Y) + Smooth * (pSrcArr->AXIS_Y - SrcArrPre.AXIS_Y);
 8012e44:	ed80 7a01 	vstr	s14, [r0, #4]
    pDstArr->AXIS_Z = (Smooth * DstArrPre.AXIS_Z) + Smooth * (pSrcArr->AXIS_Z - SrcArrPre.AXIS_Z);
 8012e48:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8012e4c:	edd3 5a03 	vldr	s11, [r3, #12]
    SrcArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 8012e50:	684a      	ldr	r2, [r1, #4]
 8012e52:	615a      	str	r2, [r3, #20]
    pDstArr->AXIS_Z = (Smooth * DstArrPre.AXIS_Z) + Smooth * (pSrcArr->AXIS_Z - SrcArrPre.AXIS_Z);
 8012e54:	ee67 7a86 	vmul.f32	s15, s15, s12
    DstArrPre.AXIS_Y = pDstArr->AXIS_Y;
 8012e58:	ed83 7a02 	vstr	s14, [r3, #8]
    pDstArr->AXIS_Z = (Smooth * DstArrPre.AXIS_Z) + Smooth * (pSrcArr->AXIS_Z - SrcArrPre.AXIS_Z);
 8012e5c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012e60:	edc0 7a02 	vstr	s15, [r0, #8]
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 8012e64:	688a      	ldr	r2, [r1, #8]
    DstArrPre.AXIS_Z = pDstArr->AXIS_Z;
 8012e66:	edc3 7a03 	vstr	s15, [r3, #12]
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 8012e6a:	e7c5      	b.n	8012df8 <MotionSP_speedDelOffset.constprop.0+0x20>
 8012e6c:	20002dbc 	.word	0x20002dbc
 8012e70:	3f79999a 	.word	0x3f79999a

08012e74 <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0>:
  * @param  SrcId Actual Circular Buffer index
  * @param AccOdr Accelerometer ODR info
  * @param Rst Restart flag
  * @return none
  */
static void MotionSP_TD_AccRmsEvalFromCircBuff(sTimeDomainData_t *pDst, sCircBuff_t *pSrc, uint16_t SrcId, sAcceleroODR_t  AccOdr, uint8_t Rst)
 8012e74:	b570      	push	{r4, r5, r6, lr}
 8012e76:	4604      	mov	r4, r0
  static float WN = 0.0;
  static float WN_1 = 0.0;
  
  if (Rst)
  {
    pDst->AccRms.AXIS_X = pSrc->Array.X[SrcId];
 8012e78:	6888      	ldr	r0, [r1, #8]
 8012e7a:	4d3a      	ldr	r5, [pc, #232]	; (8012f64 <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0+0xf0>)
 8012e7c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8012e80:	edd0 7a00 	vldr	s15, [r0]
    pDst->AccRms.AXIS_Y = pSrc->Array.Y[SrcId];
 8012e84:	68c8      	ldr	r0, [r1, #12]
    pDst->AccRms.AXIS_Z = pSrc->Array.Z[SrcId];
 8012e86:	6909      	ldr	r1, [r1, #16]
static void MotionSP_TD_AccRmsEvalFromCircBuff(sTimeDomainData_t *pDst, sCircBuff_t *pSrc, uint16_t SrcId, sAcceleroODR_t  AccOdr, uint8_t Rst)
 8012e88:	ed2d 8b0a 	vpush	{d8-d12}
    pDst->AccRms.AXIS_Y = pSrc->Array.Y[SrcId];
 8012e8c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
static void MotionSP_TD_AccRmsEvalFromCircBuff(sTimeDomainData_t *pDst, sCircBuff_t *pSrc, uint16_t SrcId, sAcceleroODR_t  AccOdr, uint8_t Rst)
 8012e90:	eef0 aa40 	vmov.f32	s21, s0
    pDst->AccRms.AXIS_Z = pSrc->Array.Z[SrcId];
 8012e94:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8012e98:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
  if (Rst)
 8012e9c:	b153      	cbz	r3, 8012eb4 <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0+0x40>
    pDst->AccRms.AXIS_X = pSrc->Array.X[SrcId];
 8012e9e:	edc4 7a03 	vstr	s15, [r4, #12]
    pDst->AccRms.AXIS_Y = pSrc->Array.Y[SrcId];
 8012ea2:	6803      	ldr	r3, [r0, #0]
 8012ea4:	6123      	str	r3, [r4, #16]
    pDst->AccRms.AXIS_Z = pSrc->Array.Z[SrcId];
 8012ea6:	6813      	ldr	r3, [r2, #0]
 8012ea8:	6163      	str	r3, [r4, #20]
    
    WN = 1;
 8012eaa:	ed85 9a07 	vstr	s18, [r5, #28]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Z + (1 / WN) * SquareData.AXIS_Z), &pDst->AccRms.AXIS_Z);
    
    WN_1 =  WN;
    WN =  AccOdr.Tau * WN_1 + 1;
  }
}
 8012eae:	ecbd 8b0a 	vpop	{d8-d12}
 8012eb2:	bd70      	pop	{r4, r5, r6, pc}
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDst->AccRms.AXIS_X);
 8012eb4:	ed95 ba07 	vldr	s22, [r5, #28]
    PrevSquareData.AXIS_X = pDst->AccRms.AXIS_X * pDst->AccRms.AXIS_X;
 8012eb8:	edd4 6a03 	vldr	s13, [r4, #12]
    SquareData.AXIS_Y = pSrc->Array.Y[SrcId] * pSrc->Array.Y[SrcId];
 8012ebc:	ed90 7a00 	vldr	s14, [r0]
    SquareData.AXIS_Z = pSrc->Array.Z[SrcId] * pSrc->Array.Z[SrcId];;
 8012ec0:	edd2 8a00 	vldr	s17, [r2]
    PrevSquareData.AXIS_Z = pDst->AccRms.AXIS_Z * pDst->AccRms.AXIS_Z;
 8012ec4:	edd4 9a05 	vldr	s19, [r4, #20]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDst->AccRms.AXIS_X);
 8012ec8:	ee89 aa0b 	vdiv.f32	s20, s18, s22
    if (in >= 0.0f)
 8012ecc:	2600      	movs	r6, #0
    SquareData.AXIS_X = pSrc->Array.X[SrcId] * pSrc->Array.X[SrcId];
 8012ece:	ee67 7aa7 	vmul.f32	s15, s15, s15
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDst->AccRms.AXIS_X);
 8012ed2:	ee39 ca4a 	vsub.f32	s24, s18, s20
    PrevSquareData.AXIS_X = pDst->AccRms.AXIS_X * pDst->AccRms.AXIS_X;
 8012ed6:	ee66 6aa6 	vmul.f32	s13, s13, s13
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDst->AccRms.AXIS_X);
 8012eda:	ee67 7a8a 	vmul.f32	s15, s15, s20
    SquareData.AXIS_Y = pSrc->Array.Y[SrcId] * pSrc->Array.Y[SrcId];
 8012ede:	ee27 8a07 	vmul.f32	s16, s14, s14
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDst->AccRms.AXIS_X);
 8012ee2:	eee6 7a8c 	vfma.f32	s15, s13, s24
    PrevSquareData.AXIS_Y = pDst->AccRms.AXIS_Y * pDst->AccRms.AXIS_Y;
 8012ee6:	ed94 7a04 	vldr	s14, [r4, #16]
 8012eea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    SquareData.AXIS_Z = pSrc->Array.Z[SrcId] * pSrc->Array.Z[SrcId];;
 8012ef2:	ee68 8aa8 	vmul.f32	s17, s17, s17
    PrevSquareData.AXIS_Y = pDst->AccRms.AXIS_Y * pDst->AccRms.AXIS_Y;
 8012ef6:	ee67 ba07 	vmul.f32	s23, s14, s14
    PrevSquareData.AXIS_Z = pDst->AccRms.AXIS_Z * pDst->AccRms.AXIS_Z;
 8012efa:	ee69 9aa9 	vmul.f32	s19, s19, s19
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDst->AccRms.AXIS_X);
 8012efe:	eeb0 0a67 	vmov.f32	s0, s15
 8012f02:	db28      	blt.n	8012f56 <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0+0xe2>
      *pOut = __builtin_sqrtf(in);
 8012f04:	f00d faea 	bl	80204dc <sqrtf>
 8012f08:	ed84 0a03 	vstr	s0, [r4, #12]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Y + (1 / WN) * SquareData.AXIS_Y), &pDst->AccRms.AXIS_Y);
 8012f0c:	ee28 7a0a 	vmul.f32	s14, s16, s20
 8012f10:	eeab 7a8c 	vfma.f32	s14, s23, s24
    if (in >= 0.0f)
 8012f14:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f1c:	eeb0 0a47 	vmov.f32	s0, s14
 8012f20:	db1b      	blt.n	8012f5a <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0+0xe6>
      *pOut = __builtin_sqrtf(in);
 8012f22:	f00d fadb 	bl	80204dc <sqrtf>
 8012f26:	ed84 0a04 	vstr	s0, [r4, #16]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Z + (1 / WN) * SquareData.AXIS_Z), &pDst->AccRms.AXIS_Z);
 8012f2a:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8012f2e:	eeb0 0a68 	vmov.f32	s0, s17
 8012f32:	eea9 0a8c 	vfma.f32	s0, s19, s24
    if (in >= 0.0f)
 8012f36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f3e:	db0e      	blt.n	8012f5e <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0+0xea>
      *pOut = __builtin_sqrtf(in);
 8012f40:	f00d facc 	bl	80204dc <sqrtf>
 8012f44:	ed84 0a05 	vstr	s0, [r4, #20]
    WN =  AccOdr.Tau * WN_1 + 1;
 8012f48:	eef0 7a49 	vmov.f32	s15, s18
 8012f4c:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8012f50:	edc5 7a07 	vstr	s15, [r5, #28]
}
 8012f54:	e7ab      	b.n	8012eae <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0+0x3a>
      *pOut = 0.0f;
 8012f56:	60e6      	str	r6, [r4, #12]
      return (ARM_MATH_ARGUMENT_ERROR);
 8012f58:	e7d8      	b.n	8012f0c <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0+0x98>
      *pOut = 0.0f;
 8012f5a:	6126      	str	r6, [r4, #16]
      return (ARM_MATH_ARGUMENT_ERROR);
 8012f5c:	e7e5      	b.n	8012f2a <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0+0xb6>
      *pOut = 0.0f;
 8012f5e:	6166      	str	r6, [r4, #20]
      return (ARM_MATH_ARGUMENT_ERROR);
 8012f60:	e7f2      	b.n	8012f48 <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0+0xd4>
 8012f62:	bf00      	nop
 8012f64:	20002dbc 	.word	0x20002dbc

08012f68 <MotionSP_TD_SpeedEvalFromCircBuff.isra.0>:
static void MotionSP_TD_SpeedEvalFromCircBuff(sTimeDomainData_t *pDst, sCircBuff_t *pSrc, uint16_t SrcId, sAcceleroODR_t  AccOdr, uint8_t Rst)
 8012f68:	b530      	push	{r4, r5, lr}
  if (Rst)
 8012f6a:	b123      	cbz	r3, 8012f76 <MotionSP_TD_SpeedEvalFromCircBuff.isra.0+0xe>
    pDst->Speed.AXIS_X = 0.0;
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	6243      	str	r3, [r0, #36]	; 0x24
    pDst->Speed.AXIS_Y = 0.0;
 8012f70:	6283      	str	r3, [r0, #40]	; 0x28
    pDst->Speed.AXIS_Z = 0.0;
 8012f72:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8012f74:	bd30      	pop	{r4, r5, pc}
    if (SrcId == 0)
 8012f76:	bbd2      	cbnz	r2, 8012fee <MotionSP_TD_SpeedEvalFromCircBuff.isra.0+0x86>
      previd = (pSrc->Size)-1;
 8012f78:	880b      	ldrh	r3, [r1, #0]
 8012f7a:	3b01      	subs	r3, #1
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.X[previd]))+\
 8012f7c:	688c      	ldr	r4, [r1, #8]
      previd = SrcId-1;
 8012f7e:	b29b      	uxth	r3, r3
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.X[previd]))+\
 8012f80:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 8012f84:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012f88:	ee20 0a27 	vmul.f32	s0, s0, s15
    pDst->Speed.AXIS_X = pDst->Speed.AXIS_X +\
 8012f8c:	ed95 7a00 	vldr	s14, [r5]
 8012f90:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
 8012f94:	eee0 7a07 	vfma.f32	s15, s0, s14
        (GAMMA*AccOdr.Period*(pSrc->Array.X[SrcId]));
 8012f98:	eb04 0482 	add.w	r4, r4, r2, lsl #2
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.X[previd]))+\
 8012f9c:	ed94 7a00 	vldr	s14, [r4]
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.Y[previd]))+\
 8012fa0:	68cc      	ldr	r4, [r1, #12]
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.Z[previd]))+\
 8012fa2:	6909      	ldr	r1, [r1, #16]
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.X[previd]))+\
 8012fa4:	eee0 7a07 	vfma.f32	s15, s0, s14
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.Y[previd]))+\
 8012fa8:	eb04 0583 	add.w	r5, r4, r3, lsl #2
        (GAMMA*AccOdr.Period*(pSrc->Array.Y[SrcId]));
 8012fac:	eb04 0482 	add.w	r4, r4, r2, lsl #2
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.Z[previd]))+\
 8012fb0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    pDst->Speed.AXIS_X = pDst->Speed.AXIS_X +\
 8012fb4:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    pDst->Speed.AXIS_Y = pDst->Speed.AXIS_Y +\
 8012fb8:	ed95 7a00 	vldr	s14, [r5]
 8012fbc:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8012fc0:	eee0 7a07 	vfma.f32	s15, s0, s14
        (GAMMA*AccOdr.Period*(pSrc->Array.Z[SrcId]));
 8012fc4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.Y[previd]))+\
 8012fc8:	ed94 7a00 	vldr	s14, [r4]
 8012fcc:	eee0 7a07 	vfma.f32	s15, s0, s14
    pDst->Speed.AXIS_Y = pDst->Speed.AXIS_Y +\
 8012fd0:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
    pDst->Speed.AXIS_Z = pDst->Speed.AXIS_Z +\
 8012fd4:	ed93 7a00 	vldr	s14, [r3]
 8012fd8:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
 8012fdc:	eee0 7a07 	vfma.f32	s15, s0, s14
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.Z[previd]))+\
 8012fe0:	ed92 7a00 	vldr	s14, [r2]
 8012fe4:	eee0 7a07 	vfma.f32	s15, s0, s14
    pDst->Speed.AXIS_Z = pDst->Speed.AXIS_Z +\
 8012fe8:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
}
 8012fec:	e7c2      	b.n	8012f74 <MotionSP_TD_SpeedEvalFromCircBuff.isra.0+0xc>
      previd = SrcId-1;
 8012fee:	1e53      	subs	r3, r2, #1
 8012ff0:	e7c4      	b.n	8012f7c <MotionSP_TD_SpeedEvalFromCircBuff.isra.0+0x14>
	...

08012ff4 <MotionSP_TimeDomainEvalFromCircBuff>:
  * @param AccOdr Accelerometer ODR info
  * @param Rst Restart flag
  * @return none
  */
void MotionSP_TimeDomainEvalFromCircBuff(sTimeDomainData_t *pTimeDomainData, sCircBuff_t *pAccCircBuff, uint16_t NewDataSamples, Td_Type_t td_type, sAcceleroODR_t  AccOdr, uint8_t Rst)
{
 8012ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t id = 0;
  uint16_t s = 0;
  
  /* Evaluate the initial IdPos for theese new data samples */
  id = (pAccCircBuff->IdPos) - (NewDataSamples - 1);
 8012ff8:	f1c2 0501 	rsb	r5, r2, #1
{
 8012ffc:	4693      	mov	fp, r2
  id = (pAccCircBuff->IdPos) - (NewDataSamples - 1);
 8012ffe:	884a      	ldrh	r2, [r1, #2]
{
 8013000:	ed2d 8b02 	vpush	{d8}
  id = (pAccCircBuff->IdPos) - (NewDataSamples - 1);
 8013004:	4415      	add	r5, r2
 8013006:	b2aa      	uxth	r2, r5
 8013008:	b22d      	sxth	r5, r5
  if (id < 0)
 801300a:	2d00      	cmp	r5, #0
{
 801300c:	b085      	sub	sp, #20
    id += (pAccCircBuff->Size);
 801300e:	bfb8      	it	lt
 8013010:	880d      	ldrhlt	r5, [r1, #0]
{
 8013012:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013016:	461f      	mov	r7, r3
    id += (pAccCircBuff->Size);
 8013018:	bfb8      	it	lt
 801301a:	18ad      	addlt	r5, r5, r2
{
 801301c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8013020:	edcd 0a02 	vstr	s1, [sp, #8]
 8013024:	4604      	mov	r4, r0
 8013026:	460e      	mov	r6, r1
 8013028:	eef0 8a60 	vmov.f32	s17, s1
 801302c:	eeb0 8a41 	vmov.f32	s16, s2
 8013030:	ed8d 1a03 	vstr	s2, [sp, #12]
    id += (pAccCircBuff->Size);
 8013034:	bfb8      	it	lt
 8013036:	b22d      	sxthlt	r5, r5
{
 8013038:	f04f 0900 	mov.w	r9, #0
    case TD_BOTH_TAU:
      /* Speed evaluation */
      MotionSP_TD_SpeedEvalFromCircBuff(pTimeDomainData, pAccCircBuff, id, AccOdr, Rst);
      
      /* Remove the speed DC components */
      MotionSP_speedDelOffset(&pTimeDomainData->Speed_noDC, &pTimeDomainData->Speed, DC_SMOOTH, Rst);
 801303c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013040:	f100 0a24 	add.w	sl, r0, #36	; 0x24
  for (s=0; s<NewDataSamples; s++)
 8013044:	45cb      	cmp	fp, r9
 8013046:	d104      	bne.n	8013052 <MotionSP_TimeDomainEvalFromCircBuff+0x5e>
    id %= (pAccCircBuff->Size);
    
    if (Rst)
      Rst = 0;
  }
}
 8013048:	b005      	add	sp, #20
 801304a:	ecbd 8b02 	vpop	{d8}
 801304e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pDst->AccPeak.AXIS_X < fabsf(pSrc->Array.X[SrcId]))
 8013052:	68b1      	ldr	r1, [r6, #8]
 8013054:	ed94 7a00 	vldr	s14, [r4]
  if (pDst->AccPeak.AXIS_Z < fabsf(pSrc->Array.Z[SrcId]))
 8013058:	6932      	ldr	r2, [r6, #16]
    MotionSP_TD_PeakEvalFromCircBuff(pTimeDomainData, pAccCircBuff, id);
 801305a:	b2ad      	uxth	r5, r5
  if (pDst->AccPeak.AXIS_X < fabsf(pSrc->Array.X[SrcId]))
 801305c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8013060:	edd1 7a00 	vldr	s15, [r1]
  if (pDst->AccPeak.AXIS_Y < fabsf(pSrc->Array.Y[SrcId]))
 8013064:	68f1      	ldr	r1, [r6, #12]
  if (pDst->AccPeak.AXIS_X < fabsf(pSrc->Array.X[SrcId]))
 8013066:	eef0 7ae7 	vabs.f32	s15, s15
 801306a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801306e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013072:	ea4f 0085 	mov.w	r0, r5, lsl #2
    pDst->AccPeak.AXIS_X = fabsf(pSrc->Array.X[SrcId]);
 8013076:	bf48      	it	mi
 8013078:	edc4 7a00 	vstrmi	s15, [r4]
  if (pDst->AccPeak.AXIS_Y < fabsf(pSrc->Array.Y[SrcId]))
 801307c:	4401      	add	r1, r0
 801307e:	edd1 7a00 	vldr	s15, [r1]
 8013082:	ed94 7a01 	vldr	s14, [r4, #4]
 8013086:	eef0 7ae7 	vabs.f32	s15, s15
 801308a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801308e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    pDst->AccPeak.AXIS_Y = fabsf(pSrc->Array.Y[SrcId]);
 8013092:	bf48      	it	mi
 8013094:	edc4 7a01 	vstrmi	s15, [r4, #4]
  if (pDst->AccPeak.AXIS_Z < fabsf(pSrc->Array.Z[SrcId]))
 8013098:	4402      	add	r2, r0
 801309a:	edd2 7a00 	vldr	s15, [r2]
 801309e:	ed94 7a02 	vldr	s14, [r4, #8]
 80130a2:	eef0 7ae7 	vabs.f32	s15, s15
 80130a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80130aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    pDst->AccPeak.AXIS_Z = fabsf(pSrc->Array.Z[SrcId]);      
 80130ae:	bf48      	it	mi
 80130b0:	edc4 7a02 	vstrmi	s15, [r4, #8]
    switch (td_type)
 80130b4:	2f01      	cmp	r7, #1
 80130b6:	d04c      	beq.n	8013152 <MotionSP_TimeDomainEvalFromCircBuff+0x15e>
 80130b8:	2f02      	cmp	r7, #2
 80130ba:	d02f      	beq.n	801311c <MotionSP_TimeDomainEvalFromCircBuff+0x128>
 80130bc:	b9d7      	cbnz	r7, 80130f4 <MotionSP_TimeDomainEvalFromCircBuff+0x100>
      MotionSP_TD_SpeedEvalFromCircBuff(pTimeDomainData, pAccCircBuff, id, AccOdr, Rst);
 80130be:	462a      	mov	r2, r5
 80130c0:	4631      	mov	r1, r6
 80130c2:	4620      	mov	r0, r4
 80130c4:	eeb0 0a68 	vmov.f32	s0, s17
 80130c8:	9300      	str	r3, [sp, #0]
 80130ca:	f7ff ff4d 	bl	8012f68 <MotionSP_TD_SpeedEvalFromCircBuff.isra.0>
      MotionSP_speedDelOffset(&pTimeDomainData->Speed_noDC, &pTimeDomainData->Speed, DC_SMOOTH, Rst);
 80130ce:	9b00      	ldr	r3, [sp, #0]
 80130d0:	4651      	mov	r1, sl
 80130d2:	461a      	mov	r2, r3
 80130d4:	4640      	mov	r0, r8
 80130d6:	f7ff fe7f 	bl	8012dd8 <MotionSP_speedDelOffset.constprop.0>
  if (start == 1)
 80130da:	9b00      	ldr	r3, [sp, #0]
 80130dc:	2b01      	cmp	r3, #1
 80130de:	d115      	bne.n	801310c <MotionSP_TimeDomainEvalFromCircBuff+0x118>
    pDstArr->AXIS_X = pSrcArr->AXIS_X;
 80130e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80130e2:	61a3      	str	r3, [r4, #24]
    pDstArr->AXIS_Y = pSrcArr->AXIS_Y;
 80130e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    WN = 1;
 80130e6:	4a24      	ldr	r2, [pc, #144]	; (8013178 <MotionSP_TimeDomainEvalFromCircBuff+0x184>)
    pDstArr->AXIS_Y = pSrcArr->AXIS_Y;
 80130e8:	61e3      	str	r3, [r4, #28]
    pDstArr->AXIS_Z = pSrcArr->AXIS_Z;
 80130ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80130ec:	6223      	str	r3, [r4, #32]
    WN = 1;
 80130ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80130f2:	6013      	str	r3, [r2, #0]
    id %= (pAccCircBuff->Size);
 80130f4:	8833      	ldrh	r3, [r6, #0]
    id++;
 80130f6:	3501      	adds	r5, #1
    id %= (pAccCircBuff->Size);
 80130f8:	b22d      	sxth	r5, r5
 80130fa:	fb95 f2f3 	sdiv	r2, r5, r3
 80130fe:	fb03 5512 	mls	r5, r3, r2, r5
 8013102:	b22d      	sxth	r5, r5
  for (s=0; s<NewDataSamples; s++)
 8013104:	f109 0901 	add.w	r9, r9, #1
    id %= (pAccCircBuff->Size);
 8013108:	2300      	movs	r3, #0
 801310a:	e79b      	b.n	8013044 <MotionSP_TimeDomainEvalFromCircBuff+0x50>
 801310c:	eeb0 0a48 	vmov.f32	s0, s16
 8013110:	4641      	mov	r1, r8
 8013112:	f104 0018 	add.w	r0, r4, #24
 8013116:	f7ff fdfb 	bl	8012d10 <MotionSP_SwSpeedRmsFilter.part.0>
 801311a:	e7eb      	b.n	80130f4 <MotionSP_TimeDomainEvalFromCircBuff+0x100>
      MotionSP_TD_SpeedEvalFromCircBuff(pTimeDomainData, pAccCircBuff, id, AccOdr, Rst);
 801311c:	462a      	mov	r2, r5
 801311e:	4631      	mov	r1, r6
 8013120:	4620      	mov	r0, r4
 8013122:	eeb0 0a68 	vmov.f32	s0, s17
 8013126:	9300      	str	r3, [sp, #0]
 8013128:	f7ff ff1e 	bl	8012f68 <MotionSP_TD_SpeedEvalFromCircBuff.isra.0>
      MotionSP_speedDelOffset(&pTimeDomainData->Speed_noDC, &pTimeDomainData->Speed, DC_SMOOTH, Rst);
 801312c:	9b00      	ldr	r3, [sp, #0]
 801312e:	4651      	mov	r1, sl
 8013130:	461a      	mov	r2, r3
 8013132:	4640      	mov	r0, r8
 8013134:	f7ff fe50 	bl	8012dd8 <MotionSP_speedDelOffset.constprop.0>
  if (start == 1)
 8013138:	9b00      	ldr	r3, [sp, #0]
 801313a:	2b01      	cmp	r3, #1
 801313c:	d111      	bne.n	8013162 <MotionSP_TimeDomainEvalFromCircBuff+0x16e>
    pDstArr->AXIS_X = pSrcArr->AXIS_X;
 801313e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8013140:	61a2      	str	r2, [r4, #24]
    pDstArr->AXIS_Y = pSrcArr->AXIS_Y;
 8013142:	6b62      	ldr	r2, [r4, #52]	; 0x34
    WN = 1;
 8013144:	490c      	ldr	r1, [pc, #48]	; (8013178 <MotionSP_TimeDomainEvalFromCircBuff+0x184>)
    pDstArr->AXIS_Y = pSrcArr->AXIS_Y;
 8013146:	61e2      	str	r2, [r4, #28]
    pDstArr->AXIS_Z = pSrcArr->AXIS_Z;
 8013148:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801314a:	6222      	str	r2, [r4, #32]
    WN = 1;
 801314c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8013150:	600a      	str	r2, [r1, #0]
      MotionSP_TD_AccRmsEvalFromCircBuff(pTimeDomainData, pAccCircBuff, id, AccOdr, Rst);
 8013152:	eeb0 0a48 	vmov.f32	s0, s16
 8013156:	462a      	mov	r2, r5
 8013158:	4631      	mov	r1, r6
 801315a:	4620      	mov	r0, r4
 801315c:	f7ff fe8a 	bl	8012e74 <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0>
      break;
 8013160:	e7c8      	b.n	80130f4 <MotionSP_TimeDomainEvalFromCircBuff+0x100>
 8013162:	eeb0 0a48 	vmov.f32	s0, s16
 8013166:	4641      	mov	r1, r8
 8013168:	f104 0018 	add.w	r0, r4, #24
 801316c:	9300      	str	r3, [sp, #0]
 801316e:	f7ff fdcf 	bl	8012d10 <MotionSP_SwSpeedRmsFilter.part.0>
 8013172:	9b00      	ldr	r3, [sp, #0]
 8013174:	e7ed      	b.n	8013152 <MotionSP_TimeDomainEvalFromCircBuff+0x15e>
 8013176:	bf00      	nop
 8013178:	20002dbc 	.word	0x20002dbc

0801317c <MotionSP_fftCalc>:
  * @param  pfftIn pointer to the FFT-In array
  * @param  pfftOut pointer to the FFT-Out array
  * @return none
  */
void MotionSP_fftCalc(arm_rfft_fast_instance_f32 *pfftS, float *pfftIn, float *pfftOut)
{
 801317c:	b570      	push	{r4, r5, r6, lr}
  static float fftTmp[FFT_SIZE_MAX];

  // Compute the Fourier transform of the signal.
  arm_rfft_fast_f32(pfftS, pfftIn, fftTmp, 0);
 801317e:	4e07      	ldr	r6, [pc, #28]	; (801319c <MotionSP_fftCalc+0x20>)
{
 8013180:	4605      	mov	r5, r0
 8013182:	4614      	mov	r4, r2
  arm_rfft_fast_f32(pfftS, pfftIn, fftTmp, 0);
 8013184:	2300      	movs	r3, #0
 8013186:	4632      	mov	r2, r6
 8013188:	f007 fd1a 	bl	801abc0 <arm_rfft_fast_f32>

  // Compute the two-sided spectrum
  arm_cmplx_mag_f32(fftTmp, pfftOut, pfftS->fftLenRFFT / 2);
 801318c:	8a2a      	ldrh	r2, [r5, #16]
 801318e:	4621      	mov	r1, r4
 8013190:	4630      	mov	r0, r6
 8013192:	0852      	lsrs	r2, r2, #1
}
 8013194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  arm_cmplx_mag_f32(fftTmp, pfftOut, pfftS->fftLenRFFT / 2);
 8013198:	f008 b97e 	b.w	801b498 <arm_cmplx_mag_f32>
 801319c:	2000cec4 	.word	0x2000cec4

080131a0 <MotionSP_fftAdapting>:
  * @param  pAccMagResults The structure for FFT Results
  * @param  WSF Scale factor to correct amplitude
  * @return none
  */
void MotionSP_fftAdapting(sAccMagResults_t *pAccMagResults, float WSF)
{
 80131a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t cnt = pAccMagResults->MagSizeTBU;
 80131a2:	8846      	ldrh	r6, [r0, #2]
  uint16_t size = pAccMagResults->MagSize;
 80131a4:	8807      	ldrh	r7, [r0, #0]
  
  for (int i = 0; i < cnt; i++)
 80131a6:	2300      	movs	r3, #0
  {
    if (i == 0) /* Adjust DC component */
    {
      pAccMagResults->Array.X[i] = 0.0;
 80131a8:	2500      	movs	r5, #0
  for (int i = 0; i < cnt; i++)
 80131aa:	429e      	cmp	r6, r3
 80131ac:	dc00      	bgt.n	80131b0 <MotionSP_fftAdapting+0x10>
      pAccMagResults->Array.X[i] = (pAccMagResults->Array.X[i] * WSF) / size;
      pAccMagResults->Array.Y[i] = (pAccMagResults->Array.Y[i] * WSF) / size;
      pAccMagResults->Array.Z[i] = (pAccMagResults->Array.Z[i] * WSF) / size;
    }
  }
}
 80131ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (i == 0) /* Adjust DC component */
 80131b0:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
 80131b4:	6902      	ldr	r2, [r0, #16]
 80131b6:	b923      	cbnz	r3, 80131c2 <MotionSP_fftAdapting+0x22>
      pAccMagResults->Array.X[i] = 0.0;
 80131b8:	6025      	str	r5, [r4, #0]
      pAccMagResults->Array.Y[i] = 0.0;
 80131ba:	600d      	str	r5, [r1, #0]
      pAccMagResults->Array.Z[i] = 0.0;
 80131bc:	6015      	str	r5, [r2, #0]
  for (int i = 0; i < cnt; i++)
 80131be:	3301      	adds	r3, #1
 80131c0:	e7f3      	b.n	80131aa <MotionSP_fftAdapting+0xa>
      pAccMagResults->Array.X[i] = (pAccMagResults->Array.X[i] * WSF) / size;
 80131c2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80131c6:	ed94 7a00 	vldr	s14, [r4]
 80131ca:	ee07 7a90 	vmov	s15, r7
 80131ce:	ee20 7a07 	vmul.f32	s14, s0, s14
 80131d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      pAccMagResults->Array.Y[i] = (pAccMagResults->Array.Y[i] * WSF) / size;
 80131d6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
      pAccMagResults->Array.X[i] = (pAccMagResults->Array.X[i] * WSF) / size;
 80131da:	eec7 6a27 	vdiv.f32	s13, s14, s15
      pAccMagResults->Array.Z[i] = (pAccMagResults->Array.Z[i] * WSF) / size;
 80131de:	eb02 0283 	add.w	r2, r2, r3, lsl #2
      pAccMagResults->Array.X[i] = (pAccMagResults->Array.X[i] * WSF) / size;
 80131e2:	edc4 6a00 	vstr	s13, [r4]
      pAccMagResults->Array.Y[i] = (pAccMagResults->Array.Y[i] * WSF) / size;
 80131e6:	ed91 7a00 	vldr	s14, [r1]
 80131ea:	ee20 7a07 	vmul.f32	s14, s0, s14
 80131ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80131f2:	edc1 6a00 	vstr	s13, [r1]
      pAccMagResults->Array.Z[i] = (pAccMagResults->Array.Z[i] * WSF) / size;
 80131f6:	ed92 7a00 	vldr	s14, [r2]
 80131fa:	ee20 7a07 	vmul.f32	s14, s0, s14
 80131fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013202:	edc2 6a00 	vstr	s13, [r2]
 8013206:	e7da      	b.n	80131be <MotionSP_fftAdapting+0x1e>

08013208 <MotionSP_fftPeakFinding>:
  * @brief  Find the biggest peak in the spectrum
  * @param  pAccMagResults The structure for FFT Results
  * @return none
  */
void MotionSP_fftPeakFinding(sAccMagResults_t *pAccMagResults)
{
 8013208:	b513      	push	{r0, r1, r4, lr}
 801320a:	4604      	mov	r4, r0
  uint16_t size = pAccMagResults->MagSizeTBU;
   
  arm_max_f32(pAccMagResults->Array.X, size, &pAccMagResults->Max.X.value, &pAccMagResults->Max.X.loc);
 801320c:	8841      	ldrh	r1, [r0, #2]
 801320e:	9101      	str	r1, [sp, #4]
 8013210:	f100 0318 	add.w	r3, r0, #24
 8013214:	f100 0214 	add.w	r2, r0, #20
 8013218:	6880      	ldr	r0, [r0, #8]
 801321a:	f007 fbe7 	bl	801a9ec <arm_max_f32>
  arm_max_f32(pAccMagResults->Array.Y, size, &pAccMagResults->Max.Y.value, &pAccMagResults->Max.Y.loc);
 801321e:	9901      	ldr	r1, [sp, #4]
 8013220:	68e0      	ldr	r0, [r4, #12]
 8013222:	f104 0320 	add.w	r3, r4, #32
 8013226:	f104 021c 	add.w	r2, r4, #28
 801322a:	f007 fbdf 	bl	801a9ec <arm_max_f32>
  arm_max_f32(pAccMagResults->Array.Z, size, &pAccMagResults->Max.Z.value, &pAccMagResults->Max.Z.loc);
 801322e:	9901      	ldr	r1, [sp, #4]
 8013230:	6920      	ldr	r0, [r4, #16]
 8013232:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8013236:	f104 0224 	add.w	r2, r4, #36	; 0x24
}
 801323a:	b002      	add	sp, #8
 801323c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  arm_max_f32(pAccMagResults->Array.Z, size, &pAccMagResults->Max.Z.value, &pAccMagResults->Max.Z.loc);
 8013240:	f007 bbd4 	b.w	801a9ec <arm_max_f32>

08013244 <MotionSP_SetWindFiltArray>:
  * @param  size filtering parameters array size
  * @param  Ftype filtering method
  * @return none
  */
void MotionSP_SetWindFiltArray(float *Filter_Params, uint16_t size, Filt_Type_t Ftype)
{
 8013244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013246:	ed2d 8b06 	vpush	{d8-d10}
      Filter_Params[i] = 1.0f;
    }

    if (Ftype == HANNING)
    {
      Filter_Params[i] = (0.5f * (1 - arm_cos_f32((2 * PI * i) / (size - 1))));
 801324a:	eddf 9a4e 	vldr	s19, [pc, #312]	; 8013384 <MotionSP_SetWindFiltArray+0x140>
    }

    if (Ftype == HAMMING)
    {
      Filter_Params[i] = 0.54f - (0.46f * (arm_cos_f32((2 * PI * i) / (size - 1))));
 801324e:	ed9f aa4e 	vldr	s20, [pc, #312]	; 8013388 <MotionSP_SetWindFiltArray+0x144>
 8013252:	eddf aa4e 	vldr	s21, [pc, #312]	; 801338c <MotionSP_SetWindFiltArray+0x148>
{
 8013256:	460f      	mov	r7, r1
 8013258:	4614      	mov	r4, r2
 801325a:	4605      	mov	r5, r0
  for (int i = 0; i < size; i++)
 801325c:	2600      	movs	r6, #0
 801325e:	42b7      	cmp	r7, r6
 8013260:	dc06      	bgt.n	8013270 <MotionSP_SetWindFiltArray+0x2c>
                         0.277263158f * (arm_cos_f32((4 * PI * i) / (size - 1))) - \
                         0.083578947f * (arm_cos_f32((6 * PI * i) / (size - 1))) + \
                         0.006947368f * (arm_cos_f32((8 * PI * i) / (size - 1)));
  }

  switch (Ftype)
 8013262:	2c03      	cmp	r4, #3
 8013264:	f200 8081 	bhi.w	801336a <MotionSP_SetWindFiltArray+0x126>
 8013268:	e8df f004 	tbb	[pc, r4]
 801326c:	8986827b 	.word	0x8986827b
    if (Ftype == RECTANGULAR)
 8013270:	b92c      	cbnz	r4, 801327e <MotionSP_SetWindFiltArray+0x3a>
      Filter_Params[i] = 1.0f;
 8013272:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013276:	602b      	str	r3, [r5, #0]
  for (int i = 0; i < size; i++)
 8013278:	3601      	adds	r6, #1
 801327a:	3504      	adds	r5, #4
 801327c:	e7ef      	b.n	801325e <MotionSP_SetWindFiltArray+0x1a>
    if (Ftype == HANNING)
 801327e:	2c01      	cmp	r4, #1
 8013280:	d03f      	beq.n	8013302 <MotionSP_SetWindFiltArray+0xbe>
    if (Ftype == HAMMING)
 8013282:	2c02      	cmp	r4, #2
 8013284:	d057      	beq.n	8013336 <MotionSP_SetWindFiltArray+0xf2>
    if (Ftype == FLAT_TOP)
 8013286:	2c03      	cmp	r4, #3
 8013288:	d1f6      	bne.n	8013278 <MotionSP_SetWindFiltArray+0x34>
                         (0.41663158f * arm_cos_f32((2 * PI * i) / (size - 1))) + \
 801328a:	ee07 6a90 	vmov	s15, r6
 801328e:	1e7b      	subs	r3, r7, #1
 8013290:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8013294:	ee08 3a90 	vmov	s17, r3
 8013298:	ee29 0a29 	vmul.f32	s0, s18, s19
 801329c:	eef8 8ae8 	vcvt.f32.s32	s17, s17
      Filter_Params[i] = 0.21557895f - \
 80132a0:	ed9f 8a3b 	vldr	s16, [pc, #236]	; 8013390 <MotionSP_SetWindFiltArray+0x14c>
                         (0.41663158f * arm_cos_f32((2 * PI * i) / (size - 1))) + \
 80132a4:	ee80 0a28 	vdiv.f32	s0, s0, s17
 80132a8:	f008 f9de 	bl	801b668 <arm_cos_f32>
      Filter_Params[i] = 0.21557895f - \
 80132ac:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013394 <MotionSP_SetWindFiltArray+0x150>
 80132b0:	eea0 8a67 	vfms.f32	s16, s0, s15
                         0.277263158f * (arm_cos_f32((4 * PI * i) / (size - 1))) - \
 80132b4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8013398 <MotionSP_SetWindFiltArray+0x154>
 80132b8:	ee29 0a00 	vmul.f32	s0, s18, s0
 80132bc:	ee80 0a28 	vdiv.f32	s0, s0, s17
 80132c0:	f008 f9d2 	bl	801b668 <arm_cos_f32>
                         (0.41663158f * arm_cos_f32((2 * PI * i) / (size - 1))) + \
 80132c4:	eddf 7a35 	vldr	s15, [pc, #212]	; 801339c <MotionSP_SetWindFiltArray+0x158>
 80132c8:	eea0 8a27 	vfma.f32	s16, s0, s15
                         0.083578947f * (arm_cos_f32((6 * PI * i) / (size - 1))) + \
 80132cc:	ed9f 0a34 	vldr	s0, [pc, #208]	; 80133a0 <MotionSP_SetWindFiltArray+0x15c>
 80132d0:	ee29 0a00 	vmul.f32	s0, s18, s0
 80132d4:	ee80 0a28 	vdiv.f32	s0, s0, s17
 80132d8:	f008 f9c6 	bl	801b668 <arm_cos_f32>
                         0.277263158f * (arm_cos_f32((4 * PI * i) / (size - 1))) - \
 80132dc:	eddf 7a31 	vldr	s15, [pc, #196]	; 80133a4 <MotionSP_SetWindFiltArray+0x160>
 80132e0:	eea0 8a67 	vfms.f32	s16, s0, s15
                         0.006947368f * (arm_cos_f32((8 * PI * i) / (size - 1)));
 80132e4:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80133a8 <MotionSP_SetWindFiltArray+0x164>
 80132e8:	ee29 0a00 	vmul.f32	s0, s18, s0
 80132ec:	ee80 0a28 	vdiv.f32	s0, s0, s17
 80132f0:	f008 f9ba 	bl	801b668 <arm_cos_f32>
                         0.083578947f * (arm_cos_f32((6 * PI * i) / (size - 1))) + \
 80132f4:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80133ac <MotionSP_SetWindFiltArray+0x168>
 80132f8:	eea0 8a27 	vfma.f32	s16, s0, s15
      Filter_Params[i] = 0.21557895f - \
 80132fc:	ed85 8a00 	vstr	s16, [r5]
 8013300:	e7ba      	b.n	8013278 <MotionSP_SetWindFiltArray+0x34>
      Filter_Params[i] = (0.5f * (1 - arm_cos_f32((2 * PI * i) / (size - 1))));
 8013302:	ee07 6a90 	vmov	s15, r6
 8013306:	1e7b      	subs	r3, r7, #1
 8013308:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801330c:	ee07 3a90 	vmov	s15, r3
 8013310:	ee20 0a29 	vmul.f32	s0, s0, s19
 8013314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013318:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801331c:	f008 f9a4 	bl	801b668 <arm_cos_f32>
 8013320:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013324:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013328:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801332c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013330:	ed85 0a00 	vstr	s0, [r5]
    if (Ftype == FLAT_TOP)
 8013334:	e7a0      	b.n	8013278 <MotionSP_SetWindFiltArray+0x34>
      Filter_Params[i] = 0.54f - (0.46f * (arm_cos_f32((2 * PI * i) / (size - 1))));
 8013336:	ee07 6a90 	vmov	s15, r6
 801333a:	1e7b      	subs	r3, r7, #1
 801333c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013340:	ee07 3a90 	vmov	s15, r3
 8013344:	ee20 0a29 	vmul.f32	s0, s0, s19
 8013348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801334c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8013350:	f008 f98a 	bl	801b668 <arm_cos_f32>
 8013354:	eef0 7a6a 	vmov.f32	s15, s21
 8013358:	eee0 7a4a 	vfms.f32	s15, s0, s20
 801335c:	edc5 7a00 	vstr	s15, [r5]
    if (Ftype == FLAT_TOP)
 8013360:	e78a      	b.n	8013278 <MotionSP_SetWindFiltArray+0x34>
  {
    case RECTANGULAR:
      Window_Scale_Factor = 1.0f;
 8013362:	4b13      	ldr	r3, [pc, #76]	; (80133b0 <MotionSP_SetWindFiltArray+0x16c>)
 8013364:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    case HAMMING:
      Window_Scale_Factor = 1.85f;
      break;

    case FLAT_TOP:
      Window_Scale_Factor = 4.55f;
 8013368:	639a      	str	r2, [r3, #56]	; 0x38
      break;
  }
}
 801336a:	ecbd 8b06 	vpop	{d8-d10}
 801336e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Window_Scale_Factor = 2.0f;
 8013370:	4b0f      	ldr	r3, [pc, #60]	; (80133b0 <MotionSP_SetWindFiltArray+0x16c>)
 8013372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013376:	e7f7      	b.n	8013368 <MotionSP_SetWindFiltArray+0x124>
      Window_Scale_Factor = 1.85f;
 8013378:	4b0d      	ldr	r3, [pc, #52]	; (80133b0 <MotionSP_SetWindFiltArray+0x16c>)
 801337a:	4a0e      	ldr	r2, [pc, #56]	; (80133b4 <MotionSP_SetWindFiltArray+0x170>)
 801337c:	e7f4      	b.n	8013368 <MotionSP_SetWindFiltArray+0x124>
      Window_Scale_Factor = 4.55f;
 801337e:	4b0c      	ldr	r3, [pc, #48]	; (80133b0 <MotionSP_SetWindFiltArray+0x16c>)
 8013380:	4a0d      	ldr	r2, [pc, #52]	; (80133b8 <MotionSP_SetWindFiltArray+0x174>)
 8013382:	e7f1      	b.n	8013368 <MotionSP_SetWindFiltArray+0x124>
 8013384:	40c90fdb 	.word	0x40c90fdb
 8013388:	3eeb851f 	.word	0x3eeb851f
 801338c:	3f0a3d71 	.word	0x3f0a3d71
 8013390:	3e5cc0ba 	.word	0x3e5cc0ba
 8013394:	3ed550bc 	.word	0x3ed550bc
 8013398:	41490fdb 	.word	0x41490fdb
 801339c:	3e8df570 	.word	0x3e8df570
 80133a0:	4196cbe4 	.word	0x4196cbe4
 80133a4:	3dab2b70 	.word	0x3dab2b70
 80133a8:	41c90fdb 	.word	0x41c90fdb
 80133ac:	3be3a6bf 	.word	0x3be3a6bf
 80133b0:	20002dbc 	.word	0x20002dbc
 80133b4:	3feccccd 	.word	0x3feccccd
 80133b8:	4091999a 	.word	0x4091999a

080133bc <MotionSP_fftInBuild>:
  * @param  SrcLastPos last index of data to be taken
  * @retval 0 in case of success
  * @retval 1 in case of failure
  */
uint8_t MotionSP_fftInBuild(float *pDst, uint16_t DstSize, float *pSrc, uint16_t SrcSize, uint16_t SrcLastPos)
{
 80133bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133c0:	f8bd 4018 	ldrh.w	r4, [sp, #24]
  int16_t initPos;
  uint16_t pos2end;

  if (SrcLastPos < SrcSize)
 80133c4:	429c      	cmp	r4, r3
{
 80133c6:	4606      	mov	r6, r0
 80133c8:	460d      	mov	r5, r1
 80133ca:	4617      	mov	r7, r2
  if (SrcLastPos < SrcSize)
 80133cc:	d220      	bcs.n	8013410 <MotionSP_fftInBuild+0x54>
  {
    // Replace the last index of data to be taken with the first one
    initPos = SrcLastPos - (DstSize - 1);
 80133ce:	f1c1 0201 	rsb	r2, r1, #1
 80133d2:	4414      	add	r4, r2
 80133d4:	b2a2      	uxth	r2, r4
 80133d6:	b224      	sxth	r4, r4
    if (initPos < 0)
 80133d8:	2c00      	cmp	r4, #0
    {
      initPos += SrcSize;
 80133da:	bfbc      	itt	lt
 80133dc:	189c      	addlt	r4, r3, r2
 80133de:	b224      	sxthlt	r4, r4
    }

    if (initPos <= (SrcSize - DstSize))
 80133e0:	1b5a      	subs	r2, r3, r5
 80133e2:	4294      	cmp	r4, r2
    {
      memcpy((void *)pDst, (void *)(pSrc + initPos), DstSize * sizeof(float));
 80133e4:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    if (initPos <= (SrcSize - DstSize))
 80133e8:	dc05      	bgt.n	80133f6 <MotionSP_fftInBuild+0x3a>
      memcpy((void *)pDst, (void *)(pSrc + initPos), DstSize * sizeof(float));
 80133ea:	00aa      	lsls	r2, r5, #2
    }
    else
    {
      pos2end = SrcSize - initPos;
      memcpy((void *)pDst, (void *)(pSrc + initPos), pos2end * sizeof(float));
      memcpy((void *)(pDst + pos2end), (void *)pSrc, (DstSize - pos2end)*sizeof(float));
 80133ec:	f008 ff12 	bl	801c214 <memcpy>
 80133f0:	2000      	movs	r0, #0
  {
    return 1;
  }

  return 0;
}
 80133f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pos2end = SrcSize - initPos;
 80133f6:	1b1b      	subs	r3, r3, r4
 80133f8:	b29c      	uxth	r4, r3
      memcpy((void *)pDst, (void *)(pSrc + initPos), pos2end * sizeof(float));
 80133fa:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80133fe:	4642      	mov	r2, r8
 8013400:	f008 ff08 	bl	801c214 <memcpy>
      memcpy((void *)(pDst + pos2end), (void *)pSrc, (DstSize - pos2end)*sizeof(float));
 8013404:	1b2a      	subs	r2, r5, r4
 8013406:	0092      	lsls	r2, r2, #2
 8013408:	4639      	mov	r1, r7
 801340a:	eb06 0008 	add.w	r0, r6, r8
 801340e:	e7ed      	b.n	80133ec <MotionSP_fftInBuild+0x30>
    return 1;
 8013410:	2001      	movs	r0, #1
 8013412:	e7ee      	b.n	80133f2 <MotionSP_fftInBuild+0x36>

08013414 <MotionSP_fftAverageCalcTime>:
  *  @param  FinishAvg Description for FinishAvg
  *  @retval 1 in case of success
  *  @retval 0 in case of failure
  */
uint8_t MotionSP_fftAverageCalcTime(float *pDstArr, float *pSrcArr, uint16_t LenArr, uint16_t *pSumCnt, uint8_t FinishAvg)
{
 8013414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013418:	4688      	mov	r8, r1
  if ((*pSumCnt == 0))
 801341a:	8819      	ldrh	r1, [r3, #0]
{
 801341c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8013420:	4604      	mov	r4, r0
 8013422:	461e      	mov	r6, r3
 8013424:	0095      	lsls	r5, r2, #2
  if ((*pSumCnt == 0))
 8013426:	b911      	cbnz	r1, 801342e <MotionSP_fftAverageCalcTime+0x1a>
  {
    // reset the destination array
    memset((void *)pDstArr, 0, LenArr * sizeof(float));
 8013428:	462a      	mov	r2, r5
 801342a:	f008 ff1b 	bl	801c264 <memset>
 801342e:	4620      	mov	r0, r4
 8013430:	4641      	mov	r1, r8
 8013432:	4425      	add	r5, r4
{
 8013434:	4623      	mov	r3, r4
  }

  // add new source values to destination
  for (uint16_t j = 0; j < LenArr; j++)
 8013436:	42ab      	cmp	r3, r5
 8013438:	d10a      	bne.n	8013450 <MotionSP_fftAverageCalcTime+0x3c>
  {
    *(pDstArr + j) += *(pSrcArr + j);
  }

  // increase the number of times
  *pSumCnt += 1;
 801343a:	8832      	ldrh	r2, [r6, #0]
 801343c:	3201      	adds	r2, #1
 801343e:	b292      	uxth	r2, r2
 8013440:	8032      	strh	r2, [r6, #0]

  if (FinishAvg)
 8013442:	b117      	cbz	r7, 801344a <MotionSP_fftAverageCalcTime+0x36>
  {
    // Process the average
    for (uint16_t j = 0; j < LenArr; j++)
 8013444:	42a8      	cmp	r0, r5
 8013446:	d10c      	bne.n	8013462 <MotionSP_fftAverageCalcTime+0x4e>
    {
      *(pDstArr + j) = *(pDstArr + j) / (*pSumCnt);
    }

    return 1;
 8013448:	2701      	movs	r7, #1
  }
  
  return 0;
}
 801344a:	4638      	mov	r0, r7
 801344c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(pDstArr + j) += *(pSrcArr + j);
 8013450:	edd3 7a00 	vldr	s15, [r3]
 8013454:	ecb1 7a01 	vldmia	r1!, {s14}
 8013458:	ee77 7a87 	vadd.f32	s15, s15, s14
 801345c:	ece3 7a01 	vstmia	r3!, {s15}
  for (uint16_t j = 0; j < LenArr; j++)
 8013460:	e7e9      	b.n	8013436 <MotionSP_fftAverageCalcTime+0x22>
      *(pDstArr + j) = *(pDstArr + j) / (*pSumCnt);
 8013462:	ee07 2a90 	vmov	s15, r2
 8013466:	edd0 6a00 	vldr	s13, [r0]
 801346a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801346e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013472:	ece0 7a01 	vstmia	r0!, {s15}
    for (uint16_t j = 0; j < LenArr; j++)
 8013476:	e7e5      	b.n	8013444 <MotionSP_fftAverageCalcTime+0x30>

08013478 <MotionSP_fftExecution>:
  * @brief  Frequency Domain Analysis
  * @param  avg Performing average
  * @return None
  */
void MotionSP_fftExecution(uint8_t avg)
{
 8013478:	b537      	push	{r0, r1, r2, r4, r5, lr}
  static sAccAxesArray_t AccAxesArray_fftIn;  //!< Array for acc axes input values for FFT
  static float fftIn[FFT_SIZE_MAX];           //!< Array for input values for FFT
  static float fftOut[FFT_SIZE_MAX];          //!< Array for output values for the complex magnitude function

  /* ------------------ Freeze the Accelerometer data to analyze--------------*/
  MotionSP_fftInBuild(AccAxesArray_fftIn.AXIS_X, MotionSP_Parameters.FftSize, MotionSP_Data.AccCircBuff.Array.X, MotionSP_Data.AccCircBuff.Size, accCircBuffIndexForFft);
 801347a:	4c52      	ldr	r4, [pc, #328]	; (80135c4 <MotionSP_fftExecution+0x14c>)
 801347c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8013480:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8013482:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8013486:	9300      	str	r3, [sp, #0]
{
 8013488:	4605      	mov	r5, r0
  MotionSP_fftInBuild(AccAxesArray_fftIn.AXIS_X, MotionSP_Parameters.FftSize, MotionSP_Data.AccCircBuff.Array.X, MotionSP_Data.AccCircBuff.Size, accCircBuffIndexForFft);
 801348a:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 801348e:	484e      	ldr	r0, [pc, #312]	; (80135c8 <MotionSP_fftExecution+0x150>)
 8013490:	f7ff ff94 	bl	80133bc <MotionSP_fftInBuild>
  MotionSP_fftInBuild(AccAxesArray_fftIn.AXIS_Y, MotionSP_Parameters.FftSize, MotionSP_Data.AccCircBuff.Array.Y, MotionSP_Data.AccCircBuff.Size, accCircBuffIndexForFft);
 8013494:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8013498:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801349a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 801349e:	9300      	str	r3, [sp, #0]
 80134a0:	484a      	ldr	r0, [pc, #296]	; (80135cc <MotionSP_fftExecution+0x154>)
 80134a2:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 80134a6:	f7ff ff89 	bl	80133bc <MotionSP_fftInBuild>
  MotionSP_fftInBuild(AccAxesArray_fftIn.AXIS_Z, MotionSP_Parameters.FftSize, MotionSP_Data.AccCircBuff.Array.Z, MotionSP_Data.AccCircBuff.Size, accCircBuffIndexForFft);
 80134aa:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 80134ae:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80134b0:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80134b4:	9300      	str	r3, [sp, #0]
 80134b6:	4846      	ldr	r0, [pc, #280]	; (80135d0 <MotionSP_fftExecution+0x158>)
 80134b8:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 80134bc:	f7ff ff7e 	bl	80133bc <MotionSP_fftInBuild>
  arm_mult_f32(pSrcArr, Window_Params, pDstArr, SizeArr);
 80134c0:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 80134c4:	4a43      	ldr	r2, [pc, #268]	; (80135d4 <MotionSP_fftExecution+0x15c>)
 80134c6:	4944      	ldr	r1, [pc, #272]	; (80135d8 <MotionSP_fftExecution+0x160>)
 80134c8:	483f      	ldr	r0, [pc, #252]	; (80135c8 <MotionSP_fftExecution+0x150>)
 80134ca:	f008 f90d 	bl	801b6e8 <arm_mult_f32>
  
  /* ------------------ First Axis: Analysis on X-Acceleration--------------*/
  /* Apply the Windowing before to perform FFT */
  motionSP_fftUseWindow(fftIn, AccAxesArray_fftIn.AXIS_X, MotionSP_Parameters.FftSize, Filter_Params);
  MotionSP_fftCalc(&fftS, fftIn, fftOut);
 80134ce:	4a43      	ldr	r2, [pc, #268]	; (80135dc <MotionSP_fftExecution+0x164>)
 80134d0:	4940      	ldr	r1, [pc, #256]	; (80135d4 <MotionSP_fftExecution+0x15c>)
 80134d2:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80134d6:	f7ff fe51 	bl	801317c <MotionSP_fftCalc>
  if (MotionSP_fftAverageCalcTime(AccMagResults.Array.X, fftOut, AccMagResults.MagSizeTBU, &(FftCnt.X), avg))
 80134da:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 80134de:	493f      	ldr	r1, [pc, #252]	; (80135dc <MotionSP_fftExecution+0x164>)
 80134e0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80134e4:	9500      	str	r5, [sp, #0]
 80134e6:	f104 0380 	add.w	r3, r4, #128	; 0x80
 80134ea:	f7ff ff93 	bl	8013414 <MotionSP_fftAverageCalcTime>
 80134ee:	b148      	cbz	r0, 8013504 <MotionSP_fftExecution+0x8c>
  {
    // Save the max evaluated FFT Number
    AccMagResults.FFT_Items.X = FftCnt.X;
 80134f0:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 80134f4:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
    // Set flag about available average
    IsFftAvgRdy.X = 1;
 80134f8:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 80134fc:	f043 0301 	orr.w	r3, r3, #1
 8013500:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
  arm_mult_f32(pSrcArr, Window_Params, pDstArr, SizeArr);
 8013504:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 8013508:	4a32      	ldr	r2, [pc, #200]	; (80135d4 <MotionSP_fftExecution+0x15c>)
 801350a:	4933      	ldr	r1, [pc, #204]	; (80135d8 <MotionSP_fftExecution+0x160>)
 801350c:	482f      	ldr	r0, [pc, #188]	; (80135cc <MotionSP_fftExecution+0x154>)
 801350e:	f008 f8eb 	bl	801b6e8 <arm_mult_f32>
  }

  /* ------------------ Second Axis: Analysis on Y-Acceleration ----------*/
  /* Apply the Windowing before to perform FFT */
  motionSP_fftUseWindow(fftIn, AccAxesArray_fftIn.AXIS_Y, MotionSP_Parameters.FftSize, Filter_Params);
  MotionSP_fftCalc(&fftS, fftIn, fftOut);
 8013512:	4a32      	ldr	r2, [pc, #200]	; (80135dc <MotionSP_fftExecution+0x164>)
 8013514:	492f      	ldr	r1, [pc, #188]	; (80135d4 <MotionSP_fftExecution+0x15c>)
 8013516:	4832      	ldr	r0, [pc, #200]	; (80135e0 <MotionSP_fftExecution+0x168>)
 8013518:	f7ff fe30 	bl	801317c <MotionSP_fftCalc>
  if (MotionSP_fftAverageCalcTime(AccMagResults.Array.Y, fftOut, AccMagResults.MagSizeTBU, &(FftCnt.Y), avg))
 801351c:	4b31      	ldr	r3, [pc, #196]	; (80135e4 <MotionSP_fftExecution+0x16c>)
 801351e:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8013522:	492e      	ldr	r1, [pc, #184]	; (80135dc <MotionSP_fftExecution+0x164>)
 8013524:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8013528:	9500      	str	r5, [sp, #0]
 801352a:	f7ff ff73 	bl	8013414 <MotionSP_fftAverageCalcTime>
 801352e:	b148      	cbz	r0, 8013544 <MotionSP_fftExecution+0xcc>
  {
    // Save the max evaluated FFT Number
    AccMagResults.FFT_Items.Y = FftCnt.Y;
 8013530:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
 8013534:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
    // Set flag about available average
    IsFftAvgRdy.Y = 1;
 8013538:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 801353c:	f043 0302 	orr.w	r3, r3, #2
 8013540:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
  arm_mult_f32(pSrcArr, Window_Params, pDstArr, SizeArr);
 8013544:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 8013548:	4a22      	ldr	r2, [pc, #136]	; (80135d4 <MotionSP_fftExecution+0x15c>)
 801354a:	4923      	ldr	r1, [pc, #140]	; (80135d8 <MotionSP_fftExecution+0x160>)
 801354c:	4820      	ldr	r0, [pc, #128]	; (80135d0 <MotionSP_fftExecution+0x158>)
 801354e:	f008 f8cb 	bl	801b6e8 <arm_mult_f32>
  }

  /* ------------------ Third Axis: Analysis on Z-Acceleration-------------*/
  /* Apply the Windowing before to perform FFT */
  motionSP_fftUseWindow(fftIn, AccAxesArray_fftIn.AXIS_Z, MotionSP_Parameters.FftSize, Filter_Params);
  MotionSP_fftCalc(&fftS, fftIn, fftOut);
 8013552:	4a22      	ldr	r2, [pc, #136]	; (80135dc <MotionSP_fftExecution+0x164>)
 8013554:	491f      	ldr	r1, [pc, #124]	; (80135d4 <MotionSP_fftExecution+0x15c>)
 8013556:	4822      	ldr	r0, [pc, #136]	; (80135e0 <MotionSP_fftExecution+0x168>)
 8013558:	f7ff fe10 	bl	801317c <MotionSP_fftCalc>
  if (MotionSP_fftAverageCalcTime(AccMagResults.Array.Z, fftOut, AccMagResults.MagSizeTBU, &(FftCnt.Z), avg))
 801355c:	4b22      	ldr	r3, [pc, #136]	; (80135e8 <MotionSP_fftExecution+0x170>)
 801355e:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8013562:	491e      	ldr	r1, [pc, #120]	; (80135dc <MotionSP_fftExecution+0x164>)
 8013564:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8013568:	9500      	str	r5, [sp, #0]
 801356a:	f7ff ff53 	bl	8013414 <MotionSP_fftAverageCalcTime>
 801356e:	b148      	cbz	r0, 8013584 <MotionSP_fftExecution+0x10c>
  {
    // Save the max evaluated FFT Number
    AccMagResults.FFT_Items.Z = FftCnt.Z;
 8013570:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8013574:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
    // Set flag about available average
    IsFftAvgRdy.Z = 1;
 8013578:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 801357c:	f043 0304 	orr.w	r3, r3, #4
 8013580:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
  }

  /* ---------------------------- Finish ----------------------------------*/
  if (IsFftAvgRdy.X & IsFftAvgRdy.Y & IsFftAvgRdy.Z) 
 8013584:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
 8013588:	f3c2 0300 	ubfx	r3, r2, #0, #1
 801358c:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8013590:	400b      	ands	r3, r1
 8013592:	ea13 0392 	ands.w	r3, r3, r2, lsr #2
 8013596:	d013      	beq.n	80135c0 <MotionSP_fftExecution+0x148>
  {
    MotionSP_fftAdapting(&AccMagResults, Window_Scale_Factor);
 8013598:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 801359c:	4813      	ldr	r0, [pc, #76]	; (80135ec <MotionSP_fftExecution+0x174>)
 801359e:	f7ff fdff 	bl	80131a0 <MotionSP_fftAdapting>
    MotionSP_fftPeakFinding(&AccMagResults);
 80135a2:	f7ff fe31 	bl	8013208 <MotionSP_fftPeakFinding>
    MotionSP_evalMaxAmplitudeRange (AccMagResults.Array.Y, MotionSP_Parameters.subrange_num, SRAmplitude.AXIS_Y, SRBinVal.AXIS_Y);
    MotionSP_evalMaxAmplitudeRange (AccMagResults.Array.Z, MotionSP_Parameters.subrange_num, SRAmplitude.AXIS_Z, SRBinVal.AXIS_Z);
#endif
    
    // Reset FFT sum counter
    FftCnt.X = 0;
 80135a6:	2300      	movs	r3, #0
 80135a8:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
    FftCnt.Y = 0;
 80135ac:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
    FftCnt.Z = 0;
 80135b0:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84

    // Reset FFT average status
    IsFftAvgRdy.X = 0;
 80135b4:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 80135b8:	f023 0307 	bic.w	r3, r3, #7
 80135bc:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
    IsFftAvgRdy.Y = 0;
    IsFftAvgRdy.Z = 0;
  }
}
 80135c0:	b003      	add	sp, #12
 80135c2:	bd30      	pop	{r4, r5, pc}
 80135c4:	20002dbc 	.word	0x20002dbc
 80135c8:	20006ec4 	.word	0x20006ec4
 80135cc:	20008ec4 	.word	0x20008ec4
 80135d0:	2000aec4 	.word	0x2000aec4
 80135d4:	20004ec4 	.word	0x20004ec4
 80135d8:	2000f4c4 	.word	0x2000f4c4
 80135dc:	20002ec4 	.word	0x20002ec4
 80135e0:	20002e24 	.word	0x20002e24
 80135e4:	20002e3e 	.word	0x20002e3e
 80135e8:	20002e40 	.word	0x20002e40
 80135ec:	20002e44 	.word	0x20002e44

080135f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80135f0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80135f2:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80135f6:	b184      	cbz	r4, 801361a <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80135f8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80135fc:	b15b      	cbz	r3, 8013616 <USBD_CDC_EP0_RxReady+0x26>
 80135fe:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8013602:	28ff      	cmp	r0, #255	; 0xff
 8013604:	d007      	beq.n	8013616 <USBD_CDC_EP0_RxReady+0x26>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013606:	689b      	ldr	r3, [r3, #8]
 8013608:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 801360c:	4621      	mov	r1, r4
 801360e:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8013610:	23ff      	movs	r3, #255	; 0xff
 8013612:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013616:	2000      	movs	r0, #0
 8013618:	e000      	b.n	801361c <USBD_CDC_EP0_RxReady+0x2c>
    return (uint8_t)USBD_FAIL;
 801361a:	2003      	movs	r0, #3
}
 801361c:	bd10      	pop	{r4, pc}
	...

08013620 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8013620:	2343      	movs	r3, #67	; 0x43
 8013622:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8013624:	4800      	ldr	r0, [pc, #0]	; (8013628 <USBD_CDC_GetFSCfgDesc+0x8>)
 8013626:	4770      	bx	lr
 8013628:	200003e8 	.word	0x200003e8

0801362c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801362c:	2343      	movs	r3, #67	; 0x43
 801362e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8013630:	4800      	ldr	r0, [pc, #0]	; (8013634 <USBD_CDC_GetHSCfgDesc+0x8>)
 8013632:	4770      	bx	lr
 8013634:	2000042c 	.word	0x2000042c

08013638 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013638:	2343      	movs	r3, #67	; 0x43
 801363a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 801363c:	4800      	ldr	r0, [pc, #0]	; (8013640 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 801363e:	4770      	bx	lr
 8013640:	20000470 	.word	0x20000470

08013644 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013644:	230a      	movs	r3, #10
 8013646:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8013648:	4800      	ldr	r0, [pc, #0]	; (801364c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 801364a:	4770      	bx	lr
 801364c:	200004b4 	.word	0x200004b4

08013650 <USBD_CDC_DataOut>:
{
 8013650:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013652:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
{
 8013656:	4605      	mov	r5, r0
  if (pdev->pClassData == NULL)
 8013658:	b16c      	cbz	r4, 8013676 <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801365a:	f006 faa3 	bl	8019ba4 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801365e:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013662:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013666:	68db      	ldr	r3, [r3, #12]
 8013668:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 801366c:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8013670:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8013672:	2000      	movs	r0, #0
}
 8013674:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8013676:	2003      	movs	r0, #3
 8013678:	e7fc      	b.n	8013674 <USBD_CDC_DataOut+0x24>

0801367a <USBD_CDC_DataIn>:
{
 801367a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 801367c:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
{
 8013680:	4605      	mov	r5, r0
 8013682:	460a      	mov	r2, r1
  if (pdev->pClassData == NULL)
 8013684:	b336      	cbz	r6, 80136d4 <USBD_CDC_DataIn+0x5a>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013686:	2314      	movs	r3, #20
 8013688:	fb03 0301 	mla	r3, r3, r1, r0
 801368c:	699c      	ldr	r4, [r3, #24]
 801368e:	b194      	cbz	r4, 80136b6 <USBD_CDC_DataIn+0x3c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013690:	f8d0 72c4 	ldr.w	r7, [r0, #708]	; 0x2c4
 8013694:	f04f 0c1c 	mov.w	ip, #28
 8013698:	fb0c 7701 	mla	r7, ip, r1, r7
 801369c:	6c7f      	ldr	r7, [r7, #68]	; 0x44
 801369e:	fbb4 fcf7 	udiv	ip, r4, r7
 80136a2:	fb07 441c 	mls	r4, r7, ip, r4
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80136a6:	b934      	cbnz	r4, 80136b6 <USBD_CDC_DataIn+0x3c>
    pdev->ep_in[epnum].total_length = 0U;
 80136a8:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80136aa:	4622      	mov	r2, r4
 80136ac:	4623      	mov	r3, r4
 80136ae:	f006 fa6b 	bl	8019b88 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 80136b2:	4620      	mov	r0, r4
 80136b4:	e00d      	b.n	80136d2 <USBD_CDC_DataIn+0x58>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80136b6:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
 80136ba:	691c      	ldr	r4, [r3, #16]
    hcdc->TxState = 0U;
 80136bc:	2700      	movs	r7, #0
 80136be:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80136c2:	2c00      	cmp	r4, #0
 80136c4:	d0f5      	beq.n	80136b2 <USBD_CDC_DataIn+0x38>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80136c6:	f8d6 0208 	ldr.w	r0, [r6, #520]	; 0x208
 80136ca:	f506 7104 	add.w	r1, r6, #528	; 0x210
 80136ce:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 80136d0:	4638      	mov	r0, r7
}
 80136d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 80136d4:	2003      	movs	r0, #3
 80136d6:	e7fc      	b.n	80136d2 <USBD_CDC_DataIn+0x58>

080136d8 <USBD_CDC_Setup>:
{
 80136d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80136dc:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 80136e0:	f04f 0800 	mov.w	r8, #0
{
 80136e4:	4605      	mov	r5, r0
 80136e6:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 80136e8:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 80136ec:	f8ad 8006 	strh.w	r8, [sp, #6]
  if (hcdc == NULL)
 80136f0:	2f00      	cmp	r7, #0
 80136f2:	d06a      	beq.n	80137ca <USBD_CDC_Setup+0xf2>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80136f4:	780a      	ldrb	r2, [r1, #0]
 80136f6:	f012 0460 	ands.w	r4, r2, #96	; 0x60
 80136fa:	d02b      	beq.n	8013754 <USBD_CDC_Setup+0x7c>
 80136fc:	2c20      	cmp	r4, #32
 80136fe:	d160      	bne.n	80137c2 <USBD_CDC_Setup+0xea>
      if (req->wLength != 0U)
 8013700:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013702:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength != 0U)
 8013704:	b1fc      	cbz	r4, 8013746 <USBD_CDC_Setup+0x6e>
        if ((req->bmRequest & 0x80U) != 0U)
 8013706:	0612      	lsls	r2, r2, #24
 8013708:	d514      	bpl.n	8013734 <USBD_CDC_Setup+0x5c>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801370a:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 801370e:	4639      	mov	r1, r7
 8013710:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8013714:	4618      	mov	r0, r3
 8013716:	4622      	mov	r2, r4
 8013718:	47c8      	blx	r9
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801371a:	88f2      	ldrh	r2, [r6, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801371c:	2a07      	cmp	r2, #7
 801371e:	bf28      	it	cs
 8013720:	2207      	movcs	r2, #7
 8013722:	4639      	mov	r1, r7
 8013724:	4628      	mov	r0, r5
 8013726:	f000 fca3 	bl	8014070 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 801372a:	4644      	mov	r4, r8
}
 801372c:	4620      	mov	r0, r4
 801372e:	b003      	add	sp, #12
 8013730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8013734:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8013738:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 801373c:	4622      	mov	r2, r4
 801373e:	4639      	mov	r1, r7
 8013740:	f000 fcab 	bl	801409a <USBD_CtlPrepareRx>
 8013744:	e7f1      	b.n	801372a <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013746:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 801374a:	4618      	mov	r0, r3
 801374c:	6895      	ldr	r5, [r2, #8]
 801374e:	4622      	mov	r2, r4
 8013750:	47a8      	blx	r5
 8013752:	e7eb      	b.n	801372c <USBD_CDC_Setup+0x54>
      switch (req->bRequest)
 8013754:	784f      	ldrb	r7, [r1, #1]
 8013756:	2f0b      	cmp	r7, #11
 8013758:	d833      	bhi.n	80137c2 <USBD_CDC_Setup+0xea>
 801375a:	a301      	add	r3, pc, #4	; (adr r3, 8013760 <USBD_CDC_Setup+0x88>)
 801375c:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8013760:	08013791 	.word	0x08013791
 8013764:	0801372d 	.word	0x0801372d
 8013768:	080137c3 	.word	0x080137c3
 801376c:	080137c3 	.word	0x080137c3
 8013770:	080137c3 	.word	0x080137c3
 8013774:	080137c3 	.word	0x080137c3
 8013778:	080137c3 	.word	0x080137c3
 801377c:	080137c3 	.word	0x080137c3
 8013780:	080137c3 	.word	0x080137c3
 8013784:	080137c3 	.word	0x080137c3
 8013788:	080137a7 	.word	0x080137a7
 801378c:	080137bb 	.word	0x080137bb
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013790:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013794:	2b03      	cmp	r3, #3
 8013796:	d114      	bne.n	80137c2 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013798:	2202      	movs	r2, #2
 801379a:	f10d 0106 	add.w	r1, sp, #6
 801379e:	f000 fc67 	bl	8014070 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80137a2:	463c      	mov	r4, r7
 80137a4:	e7c2      	b.n	801372c <USBD_CDC_Setup+0x54>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80137aa:	2b03      	cmp	r3, #3
 80137ac:	d109      	bne.n	80137c2 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80137ae:	2201      	movs	r2, #1
 80137b0:	f10d 0105 	add.w	r1, sp, #5
 80137b4:	f000 fc5c 	bl	8014070 <USBD_CtlSendData>
 80137b8:	e7b8      	b.n	801372c <USBD_CDC_Setup+0x54>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80137ba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80137be:	2b03      	cmp	r3, #3
 80137c0:	d0b4      	beq.n	801372c <USBD_CDC_Setup+0x54>
          USBD_CtlError(pdev, req);
 80137c2:	4631      	mov	r1, r6
 80137c4:	4628      	mov	r0, r5
 80137c6:	f000 fc2c 	bl	8014022 <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 80137ca:	2403      	movs	r4, #3
 80137cc:	e7ae      	b.n	801372c <USBD_CDC_Setup+0x54>
 80137ce:	bf00      	nop

080137d0 <USBD_CDC_DeInit>:
{
 80137d0:	b538      	push	{r3, r4, r5, lr}
 80137d2:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80137d4:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80137d6:	2181      	movs	r1, #129	; 0x81
 80137d8:	f006 f9a7 	bl	8019b2a <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80137dc:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80137de:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80137e0:	4620      	mov	r0, r4
 80137e2:	f006 f9a2 	bl	8019b2a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80137e6:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80137ea:	2182      	movs	r1, #130	; 0x82
 80137ec:	4620      	mov	r0, r4
 80137ee:	f006 f99c 	bl	8019b2a <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80137f2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80137f6:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 80137f8:	b14b      	cbz	r3, 801380e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80137fa:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8013802:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8013806:	f008 fcfd 	bl	801c204 <free>
    pdev->pClassData = NULL;
 801380a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 801380e:	2000      	movs	r0, #0
 8013810:	bd38      	pop	{r3, r4, r5, pc}

08013812 <USBD_CDC_Init>:
{
 8013812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013814:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013816:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801381a:	f008 fceb 	bl	801c1f4 <malloc>
  if (hcdc == NULL)
 801381e:	4605      	mov	r5, r0
    pdev->pClassData = NULL;
 8013820:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (hcdc == NULL)
 8013824:	b910      	cbnz	r0, 801382c <USBD_CDC_Init+0x1a>
    return (uint8_t)USBD_EMEM;
 8013826:	2602      	movs	r6, #2
}
 8013828:	4630      	mov	r0, r6
 801382a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801382c:	7c23      	ldrb	r3, [r4, #16]
 801382e:	bb8b      	cbnz	r3, 8013894 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013834:	2202      	movs	r2, #2
 8013836:	2181      	movs	r1, #129	; 0x81
 8013838:	4620      	mov	r0, r4
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801383a:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801383c:	f006 f96b 	bl	8019b16 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013840:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013842:	f44f 7300 	mov.w	r3, #512	; 0x200
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013846:	4631      	mov	r1, r6
 8013848:	2202      	movs	r2, #2
 801384a:	4620      	mov	r0, r4
 801384c:	f006 f963 	bl	8019b16 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013850:	2310      	movs	r3, #16
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013852:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013856:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801385a:	2203      	movs	r2, #3
 801385c:	2308      	movs	r3, #8
 801385e:	2182      	movs	r1, #130	; 0x82
 8013860:	4620      	mov	r0, r4
 8013862:	f006 f958 	bl	8019b16 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013866:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801386a:	2101      	movs	r1, #1
 801386c:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013874:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 8013876:	2700      	movs	r7, #0
 8013878:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801387c:	2101      	movs	r1, #1
  hcdc->RxState = 0U;
 801387e:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013882:	b98e      	cbnz	r6, 80138a8 <USBD_CDC_Init+0x96>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013884:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8013888:	f44f 7300 	mov.w	r3, #512	; 0x200
 801388c:	4620      	mov	r0, r4
 801388e:	f006 f982 	bl	8019b96 <USBD_LL_PrepareReceive>
 8013892:	e7c9      	b.n	8013828 <USBD_CDC_Init+0x16>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013894:	2340      	movs	r3, #64	; 0x40
 8013896:	2202      	movs	r2, #2
 8013898:	2181      	movs	r1, #129	; 0x81
 801389a:	4620      	mov	r0, r4
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801389c:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801389e:	f006 f93a 	bl	8019b16 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80138a2:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80138a4:	2340      	movs	r3, #64	; 0x40
 80138a6:	e7ce      	b.n	8013846 <USBD_CDC_Init+0x34>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80138a8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80138ac:	2340      	movs	r3, #64	; 0x40
 80138ae:	4620      	mov	r0, r4
 80138b0:	f006 f971 	bl	8019b96 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80138b4:	463e      	mov	r6, r7
 80138b6:	e7b7      	b.n	8013828 <USBD_CDC_Init+0x16>

080138b8 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 80138b8:	b119      	cbz	r1, 80138c2 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 80138ba:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80138be:	2000      	movs	r0, #0
 80138c0:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80138c2:	2003      	movs	r0, #3
}
 80138c4:	4770      	bx	lr

080138c6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80138c6:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80138ca:	b12b      	cbz	r3, 80138d8 <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 80138cc:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80138d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80138d4:	2000      	movs	r0, #0
 80138d6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80138d8:	2003      	movs	r0, #3
}
 80138da:	4770      	bx	lr

080138dc <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80138dc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80138e0:	b11b      	cbz	r3, 80138ea <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 80138e2:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80138e6:	2000      	movs	r0, #0
 80138e8:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80138ea:	2003      	movs	r0, #3
}
 80138ec:	4770      	bx	lr

080138ee <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80138ee:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 80138f2:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 80138f4:	b17a      	cbz	r2, 8013916 <USBD_CDC_TransmitPacket+0x28>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 80138f6:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 80138fa:	2301      	movs	r3, #1
 80138fc:	b96c      	cbnz	r4, 801391a <USBD_CDC_TransmitPacket+0x2c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80138fe:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8013902:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8013906:	62c3      	str	r3, [r0, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8013908:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 801390c:	2181      	movs	r1, #129	; 0x81
 801390e:	f006 f93b 	bl	8019b88 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013912:	4620      	mov	r0, r4
  }

  return (uint8_t)ret;
}
 8013914:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8013916:	2003      	movs	r0, #3
 8013918:	e7fc      	b.n	8013914 <USBD_CDC_TransmitPacket+0x26>
  USBD_StatusTypeDef ret = USBD_BUSY;
 801391a:	4618      	mov	r0, r3
 801391c:	e7fa      	b.n	8013914 <USBD_CDC_TransmitPacket+0x26>

0801391e <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801391e:	b178      	cbz	r0, 8013940 <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8013920:	2300      	movs	r3, #0
 8013922:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8013926:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801392a:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801392e:	b109      	cbz	r1, 8013934 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8013930:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013934:	2301      	movs	r3, #1
 8013936:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 801393a:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801393c:	f006 b8b6 	b.w	8019aac <USBD_LL_Init>

  return ret;
}
 8013940:	2003      	movs	r0, #3
 8013942:	4770      	bx	lr

08013944 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013944:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t len = 0U;
 8013946:	2500      	movs	r5, #0
{
 8013948:	4604      	mov	r4, r0
  uint16_t len = 0U;
 801394a:	f8ad 5006 	strh.w	r5, [sp, #6]

  if (pclass == NULL)
 801394e:	b159      	cbz	r1, 8013968 <USBD_RegisterClass+0x24>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8013950:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass = pclass;
 8013952:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8013956:	b14b      	cbz	r3, 801396c <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8013958:	f10d 0006 	add.w	r0, sp, #6
 801395c:	4798      	blx	r3
 801395e:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8013962:	4628      	mov	r0, r5
}
 8013964:	b003      	add	sp, #12
 8013966:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8013968:	2003      	movs	r0, #3
 801396a:	e7fb      	b.n	8013964 <USBD_RegisterClass+0x20>
  return USBD_OK;
 801396c:	4618      	mov	r0, r3
 801396e:	e7f9      	b.n	8013964 <USBD_RegisterClass+0x20>

08013970 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013970:	f006 b8ca 	b.w	8019b08 <USBD_LL_Start>

08013974 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8013974:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013978:	b10b      	cbz	r3, 801397e <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	4718      	bx	r3
  }

  return ret;
}
 801397e:	2003      	movs	r0, #3
 8013980:	4770      	bx	lr

08013982 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013982:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013984:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013988:	b10b      	cbz	r3, 801398e <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801398a:	685b      	ldr	r3, [r3, #4]
 801398c:	4798      	blx	r3
  }

  return USBD_OK;
}
 801398e:	2000      	movs	r0, #0
 8013990:	bd08      	pop	{r3, pc}

08013992 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013992:	b538      	push	{r3, r4, r5, lr}
 8013994:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013996:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 801399a:	4628      	mov	r0, r5
 801399c:	f000 fb36 	bl	801400c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80139a0:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80139a2:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 80139a6:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80139aa:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 80139ae:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80139b2:	f001 031f 	and.w	r3, r1, #31
 80139b6:	2b01      	cmp	r3, #1
 80139b8:	d008      	beq.n	80139cc <USBD_LL_SetupStage+0x3a>
 80139ba:	2b02      	cmp	r3, #2
 80139bc:	d00c      	beq.n	80139d8 <USBD_LL_SetupStage+0x46>
 80139be:	b98b      	cbnz	r3, 80139e4 <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80139c0:	4629      	mov	r1, r5
 80139c2:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 80139c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80139c8:	f000 b926 	b.w	8013c18 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80139cc:	4629      	mov	r1, r5
 80139ce:	4620      	mov	r0, r4
}
 80139d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80139d4:	f000 ba64 	b.w	8013ea0 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80139d8:	4629      	mov	r1, r5
 80139da:	4620      	mov	r0, r4
}
 80139dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80139e0:	f000 ba84 	b.w	8013eec <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80139e4:	4620      	mov	r0, r4
 80139e6:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 80139ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80139ee:	f006 b8a3 	b.w	8019b38 <USBD_LL_StallEP>

080139f2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80139f2:	b570      	push	{r4, r5, r6, lr}
 80139f4:	4604      	mov	r4, r0
 80139f6:	4615      	mov	r5, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80139f8:	b9f9      	cbnz	r1, 8013a3a <USBD_LL_DataOutStage+0x48>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80139fa:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80139fe:	2b03      	cmp	r3, #3
 8013a00:	d10c      	bne.n	8013a1c <USBD_LL_DataOutStage+0x2a>
    {
      if (pep->rem_length > pep->maxpacket)
 8013a02:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	; 0x15c
 8013a06:	4293      	cmp	r3, r2
 8013a08:	d90a      	bls.n	8013a20 <USBD_LL_DataOutStage+0x2e>
      {
        pep->rem_length -= pep->maxpacket;
 8013a0a:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013a0c:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8013a0e:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013a12:	bf28      	it	cs
 8013a14:	461a      	movcs	r2, r3
 8013a16:	4629      	mov	r1, r5
 8013a18:	f000 fb4c 	bl	80140b4 <USBD_CtlContinueRx>
      }
    }
  }

  return USBD_OK;
}
 8013a1c:	2000      	movs	r0, #0
 8013a1e:	bd70      	pop	{r4, r5, r6, pc}
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a20:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013a24:	2b03      	cmp	r3, #3
 8013a26:	d104      	bne.n	8013a32 <USBD_LL_DataOutStage+0x40>
          if (pdev->pClass->EP0_RxReady != NULL)
 8013a28:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013a2c:	691b      	ldr	r3, [r3, #16]
 8013a2e:	b103      	cbz	r3, 8013a32 <USBD_LL_DataOutStage+0x40>
            pdev->pClass->EP0_RxReady(pdev);
 8013a30:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8013a32:	4620      	mov	r0, r4
 8013a34:	f000 fb46 	bl	80140c4 <USBD_CtlSendStatus>
 8013a38:	e7f0      	b.n	8013a1c <USBD_LL_DataOutStage+0x2a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a3a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013a3e:	2b03      	cmp	r3, #3
 8013a40:	d1ec      	bne.n	8013a1c <USBD_LL_DataOutStage+0x2a>
      if (pdev->pClass->DataOut != NULL)
 8013a42:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013a46:	699b      	ldr	r3, [r3, #24]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d0e7      	beq.n	8013a1c <USBD_LL_DataOutStage+0x2a>
}
 8013a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013a50:	4718      	bx	r3

08013a52 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013a54:	4604      	mov	r4, r0
 8013a56:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013a58:	2900      	cmp	r1, #0
 8013a5a:	d13f      	bne.n	8013adc <USBD_LL_DataInStage+0x8a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013a5c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8013a60:	2a02      	cmp	r2, #2
 8013a62:	d10f      	bne.n	8013a84 <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 8013a64:	e9d0 5207 	ldrd	r5, r2, [r0, #28]
 8013a68:	4295      	cmp	r5, r2
 8013a6a:	d915      	bls.n	8013a98 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8013a6c:	1aaa      	subs	r2, r5, r2
 8013a6e:	9101      	str	r1, [sp, #4]
 8013a70:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013a72:	4631      	mov	r1, r6
 8013a74:	f000 fb09 	bl	801408a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013a78:	9b01      	ldr	r3, [sp, #4]
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013a7a:	461a      	mov	r2, r3
 8013a7c:	4619      	mov	r1, r3
 8013a7e:	4620      	mov	r0, r4
 8013a80:	f006 f889 	bl	8019b96 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8013a84:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8013a88:	2b01      	cmp	r3, #1
 8013a8a:	d102      	bne.n	8013a92 <USBD_LL_DataInStage+0x40>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8013a92:	2000      	movs	r0, #0
 8013a94:	b002      	add	sp, #8
 8013a96:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 8013a98:	d10e      	bne.n	8013ab8 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 8013a9a:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8013a9c:	4295      	cmp	r5, r2
 8013a9e:	d80b      	bhi.n	8013ab8 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 8013aa0:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 8013aa4:	42aa      	cmp	r2, r5
 8013aa6:	d207      	bcs.n	8013ab8 <USBD_LL_DataInStage+0x66>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013aa8:	460a      	mov	r2, r1
 8013aaa:	9101      	str	r1, [sp, #4]
 8013aac:	f000 faed 	bl	801408a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013ab0:	9b01      	ldr	r3, [sp, #4]
 8013ab2:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8013ab6:	e7e0      	b.n	8013a7a <USBD_LL_DataInStage+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ab8:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8013abc:	2b03      	cmp	r3, #3
 8013abe:	d105      	bne.n	8013acc <USBD_LL_DataInStage+0x7a>
            if (pdev->pClass->EP0_TxSent != NULL)
 8013ac0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8013ac4:	68db      	ldr	r3, [r3, #12]
 8013ac6:	b10b      	cbz	r3, 8013acc <USBD_LL_DataInStage+0x7a>
              pdev->pClass->EP0_TxSent(pdev);
 8013ac8:	4620      	mov	r0, r4
 8013aca:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013acc:	2180      	movs	r1, #128	; 0x80
 8013ace:	4620      	mov	r0, r4
 8013ad0:	f006 f832 	bl	8019b38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013ad4:	4620      	mov	r0, r4
 8013ad6:	f000 fb00 	bl	80140da <USBD_CtlReceiveStatus>
 8013ada:	e7d3      	b.n	8013a84 <USBD_LL_DataInStage+0x32>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013adc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013ae0:	2b03      	cmp	r3, #3
 8013ae2:	d1d6      	bne.n	8013a92 <USBD_LL_DataInStage+0x40>
      if (pdev->pClass->DataIn != NULL)
 8013ae4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013ae8:	695b      	ldr	r3, [r3, #20]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d0d1      	beq.n	8013a92 <USBD_LL_DataInStage+0x40>
}
 8013aee:	b002      	add	sp, #8
 8013af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8013af4:	4718      	bx	r3

08013af6 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013af6:	2301      	movs	r3, #1
{
 8013af8:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013afa:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 8013afe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8013b02:	2100      	movs	r1, #0
{
 8013b04:	4604      	mov	r4, r0
  pdev->ep0_state = USBD_EP0_IDLE;
 8013b06:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8013b0a:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8013b0c:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 8013b10:	b1db      	cbz	r3, 8013b4a <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8013b12:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8013b16:	b112      	cbz	r2, 8013b1e <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 8013b18:	685b      	ldr	r3, [r3, #4]
 8013b1a:	b103      	cbz	r3, 8013b1e <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013b1c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013b1e:	2200      	movs	r2, #0
 8013b20:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013b22:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013b24:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013b26:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013b28:	4620      	mov	r0, r4
 8013b2a:	f005 fff4 	bl	8019b16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013b2e:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013b32:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013b36:	462b      	mov	r3, r5
 8013b38:	2200      	movs	r2, #0
 8013b3a:	2180      	movs	r1, #128	; 0x80
 8013b3c:	4620      	mov	r0, r4
 8013b3e:	f005 ffea 	bl	8019b16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013b42:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013b44:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8013b46:	2000      	movs	r0, #0
}
 8013b48:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8013b4a:	2003      	movs	r0, #3
 8013b4c:	e7fc      	b.n	8013b48 <USBD_LL_Reset+0x52>

08013b4e <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8013b4e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8013b50:	2000      	movs	r0, #0
 8013b52:	4770      	bx	lr

08013b54 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8013b54:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013b58:	b2db      	uxtb	r3, r3
 8013b5a:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013b5e:	2304      	movs	r3, #4
 8013b60:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8013b64:	2000      	movs	r0, #0
 8013b66:	4770      	bx	lr

08013b68 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013b68:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013b6c:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8013b6e:	bf02      	ittt	eq
 8013b70:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8013b74:	b2db      	uxtbeq	r3, r3
 8013b76:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8013b7a:	2000      	movs	r0, #0
 8013b7c:	4770      	bx	lr

08013b7e <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8013b7e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8013b82:	b508      	push	{r3, lr}
  if (pdev->pClass == NULL)
 8013b84:	b142      	cbz	r2, 8013b98 <USBD_LL_SOF+0x1a>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b86:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013b8a:	2b03      	cmp	r3, #3
 8013b8c:	d102      	bne.n	8013b94 <USBD_LL_SOF+0x16>
  {
    if (pdev->pClass->SOF != NULL)
 8013b8e:	69d3      	ldr	r3, [r2, #28]
 8013b90:	b123      	cbz	r3, 8013b9c <USBD_LL_SOF+0x1e>
    {
      (void)pdev->pClass->SOF(pdev);
 8013b92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013b94:	2000      	movs	r0, #0
 8013b96:	e000      	b.n	8013b9a <USBD_LL_SOF+0x1c>
    return USBD_FAIL;
 8013b98:	2003      	movs	r0, #3
}
 8013b9a:	bd08      	pop	{r3, pc}
  return USBD_OK;
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	e7fc      	b.n	8013b9a <USBD_LL_SOF+0x1c>

08013ba0 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8013ba0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8013ba4:	b508      	push	{r3, lr}
  if (pdev->pClass == NULL)
 8013ba6:	b142      	cbz	r2, 8013bba <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ba8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013bac:	2b03      	cmp	r3, #3
 8013bae:	d102      	bne.n	8013bb6 <USBD_LL_IsoINIncomplete+0x16>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8013bb0:	6a13      	ldr	r3, [r2, #32]
 8013bb2:	b123      	cbz	r3, 8013bbe <USBD_LL_IsoINIncomplete+0x1e>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8013bb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013bb6:	2000      	movs	r0, #0
 8013bb8:	e000      	b.n	8013bbc <USBD_LL_IsoINIncomplete+0x1c>
    return USBD_FAIL;
 8013bba:	2003      	movs	r0, #3
}
 8013bbc:	bd08      	pop	{r3, pc}
  return USBD_OK;
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	e7fc      	b.n	8013bbc <USBD_LL_IsoINIncomplete+0x1c>

08013bc2 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8013bc2:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8013bc6:	b508      	push	{r3, lr}
  if (pdev->pClass == NULL)
 8013bc8:	b142      	cbz	r2, 8013bdc <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013bca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013bce:	2b03      	cmp	r3, #3
 8013bd0:	d102      	bne.n	8013bd8 <USBD_LL_IsoOUTIncomplete+0x16>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8013bd2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8013bd4:	b123      	cbz	r3, 8013be0 <USBD_LL_IsoOUTIncomplete+0x1e>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8013bd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013bd8:	2000      	movs	r0, #0
 8013bda:	e000      	b.n	8013bde <USBD_LL_IsoOUTIncomplete+0x1c>
    return USBD_FAIL;
 8013bdc:	2003      	movs	r0, #3
}
 8013bde:	bd08      	pop	{r3, pc}
  return USBD_OK;
 8013be0:	4618      	mov	r0, r3
 8013be2:	e7fc      	b.n	8013bde <USBD_LL_IsoOUTIncomplete+0x1c>

08013be4 <USBD_LL_DevConnected>:
 8013be4:	2000      	movs	r0, #0
 8013be6:	4770      	bx	lr

08013be8 <USBD_LL_DevDisconnected>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013be8:	2201      	movs	r2, #1
{
 8013bea:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013bec:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8013bf0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8013bf4:	b112      	cbz	r2, 8013bfc <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013bf6:	6852      	ldr	r2, [r2, #4]
 8013bf8:	7901      	ldrb	r1, [r0, #4]
 8013bfa:	4790      	blx	r2
  }

  return USBD_OK;
}
 8013bfc:	2000      	movs	r0, #0
 8013bfe:	bd08      	pop	{r3, pc}

08013c00 <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8013c00:	b510      	push	{r4, lr}
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013c02:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8013c04:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013c06:	f005 ff97 	bl	8019b38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013c0a:	4620      	mov	r0, r4
 8013c0c:	2100      	movs	r1, #0
}
 8013c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8013c12:	f005 bf91 	b.w	8019b38 <USBD_LL_StallEP>
	...

08013c18 <USBD_StdDevReq>:
{
 8013c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c1a:	780d      	ldrb	r5, [r1, #0]
 8013c1c:	f005 0560 	and.w	r5, r5, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013c20:	2d20      	cmp	r5, #32
{
 8013c22:	4604      	mov	r4, r0
 8013c24:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013c26:	d014      	beq.n	8013c52 <USBD_StdDevReq+0x3a>
 8013c28:	2d40      	cmp	r5, #64	; 0x40
 8013c2a:	d012      	beq.n	8013c52 <USBD_StdDevReq+0x3a>
 8013c2c:	2d00      	cmp	r5, #0
 8013c2e:	f040 8100 	bne.w	8013e32 <USBD_StdDevReq+0x21a>
      switch (req->bRequest)
 8013c32:	784f      	ldrb	r7, [r1, #1]
 8013c34:	2f09      	cmp	r7, #9
 8013c36:	f200 80fc 	bhi.w	8013e32 <USBD_StdDevReq+0x21a>
 8013c3a:	e8df f017 	tbh	[pc, r7, lsl #1]
 8013c3e:	0101      	.short	0x0101
 8013c40:	00fa0123 	.word	0x00fa0123
 8013c44:	00fa0119 	.word	0x00fa0119
 8013c48:	00130082 	.word	0x00130082
 8013c4c:	00e900fa 	.word	0x00e900fa
 8013c50:	009e      	.short	0x009e
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013c52:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8013c56:	689b      	ldr	r3, [r3, #8]
 8013c58:	4631      	mov	r1, r6
 8013c5a:	4620      	mov	r0, r4
}
 8013c5c:	b003      	add	sp, #12
 8013c5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013c62:	4718      	bx	r3
  uint16_t len = 0U;
 8013c64:	2300      	movs	r3, #0
 8013c66:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8013c6a:	884b      	ldrh	r3, [r1, #2]
 8013c6c:	0a1a      	lsrs	r2, r3, #8
 8013c6e:	3a01      	subs	r2, #1
 8013c70:	2a06      	cmp	r2, #6
 8013c72:	d837      	bhi.n	8013ce4 <USBD_StdDevReq+0xcc>
 8013c74:	e8df f002 	tbb	[pc, r2]
 8013c78:	36291c04 	.word	0x36291c04
 8013c7c:	5036      	.short	0x5036
 8013c7e:	5a          	.byte	0x5a
 8013c7f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013c80:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013c84:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013c86:	7c20      	ldrb	r0, [r4, #16]
 8013c88:	f10d 0106 	add.w	r1, sp, #6
 8013c8c:	4798      	blx	r3
  if (req->wLength != 0U)
 8013c8e:	88f2      	ldrh	r2, [r6, #6]
 8013c90:	2a00      	cmp	r2, #0
 8013c92:	f000 80f3 	beq.w	8013e7c <USBD_StdDevReq+0x264>
    if (len != 0U)
 8013c96:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013c9a:	b31b      	cbz	r3, 8013ce4 <USBD_StdDevReq+0xcc>
      len = MIN(len, req->wLength);
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	bf28      	it	cs
 8013ca0:	461a      	movcs	r2, r3
 8013ca2:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013ca6:	4601      	mov	r1, r0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013ca8:	4620      	mov	r0, r4
 8013caa:	f000 f9e1 	bl	8014070 <USBD_CtlSendData>
        break;
 8013cae:	e01c      	b.n	8013cea <USBD_StdDevReq+0xd2>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013cb0:	7c02      	ldrb	r2, [r0, #16]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013cb2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013cb6:	b932      	cbnz	r2, 8013cc6 <USBD_StdDevReq+0xae>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013cba:	f10d 0006 	add.w	r0, sp, #6
 8013cbe:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013cc0:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013cc2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8013cc4:	e7e3      	b.n	8013c8e <USBD_StdDevReq+0x76>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cc8:	e7f7      	b.n	8013cba <USBD_StdDevReq+0xa2>
      switch ((uint8_t)(req->wValue))
 8013cca:	b2db      	uxtb	r3, r3
 8013ccc:	2b05      	cmp	r3, #5
 8013cce:	d809      	bhi.n	8013ce4 <USBD_StdDevReq+0xcc>
 8013cd0:	e8df f003 	tbb	[pc, r3]
 8013cd4:	16120e03 	.word	0x16120e03
 8013cd8:	1e1a      	.short	0x1e1a
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013cda:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013cde:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d1d0      	bne.n	8013c86 <USBD_StdDevReq+0x6e>
      USBD_CtlError(pdev, req);
 8013ce4:	4620      	mov	r0, r4
          USBD_CtlError(pdev, req);
 8013ce6:	f7ff ff8b 	bl	8013c00 <USBD_CtlError.constprop.0>
}
 8013cea:	4628      	mov	r0, r5
 8013cec:	b003      	add	sp, #12
 8013cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013cf0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013cf4:	689b      	ldr	r3, [r3, #8]
 8013cf6:	e7f3      	b.n	8013ce0 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013cf8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013cfc:	68db      	ldr	r3, [r3, #12]
 8013cfe:	e7ef      	b.n	8013ce0 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013d00:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013d04:	691b      	ldr	r3, [r3, #16]
 8013d06:	e7eb      	b.n	8013ce0 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013d08:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013d0c:	695b      	ldr	r3, [r3, #20]
 8013d0e:	e7e7      	b.n	8013ce0 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013d10:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013d14:	699b      	ldr	r3, [r3, #24]
 8013d16:	e7e3      	b.n	8013ce0 <USBD_StdDevReq+0xc8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d18:	7c03      	ldrb	r3, [r0, #16]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d1e2      	bne.n	8013ce4 <USBD_StdDevReq+0xcc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013d1e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013d22:	f10d 0006 	add.w	r0, sp, #6
 8013d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d28:	4798      	blx	r3
  if (err != 0U)
 8013d2a:	e7b0      	b.n	8013c8e <USBD_StdDevReq+0x76>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d2c:	7c03      	ldrb	r3, [r0, #16]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d1d8      	bne.n	8013ce4 <USBD_StdDevReq+0xcc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013d32:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013d36:	f10d 0006 	add.w	r0, sp, #6
 8013d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d3c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013d3e:	2307      	movs	r3, #7
 8013d40:	e7bf      	b.n	8013cc2 <USBD_StdDevReq+0xaa>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013d42:	888b      	ldrh	r3, [r1, #4]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d1cd      	bne.n	8013ce4 <USBD_StdDevReq+0xcc>
 8013d48:	88cb      	ldrh	r3, [r1, #6]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d1ca      	bne.n	8013ce4 <USBD_StdDevReq+0xcc>
 8013d4e:	884e      	ldrh	r6, [r1, #2]
 8013d50:	2e7f      	cmp	r6, #127	; 0x7f
 8013d52:	d8c7      	bhi.n	8013ce4 <USBD_StdDevReq+0xcc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d54:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013d58:	2b03      	cmp	r3, #3
 8013d5a:	d0c3      	beq.n	8013ce4 <USBD_StdDevReq+0xcc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013d5c:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8013d5e:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013d62:	f005 ff0a 	bl	8019b7a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013d66:	4620      	mov	r0, r4
 8013d68:	f000 f9ac 	bl	80140c4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8013d6c:	b11e      	cbz	r6, 8013d76 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013d6e:	2302      	movs	r3, #2
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013d70:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8013d74:	e7b9      	b.n	8013cea <USBD_StdDevReq+0xd2>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013d76:	2301      	movs	r3, #1
 8013d78:	e7fa      	b.n	8013d70 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8013d7a:	788e      	ldrb	r6, [r1, #2]
 8013d7c:	4f47      	ldr	r7, [pc, #284]	; (8013e9c <USBD_StdDevReq+0x284>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013d7e:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8013d80:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013d82:	d903      	bls.n	8013d8c <USBD_StdDevReq+0x174>
    USBD_CtlError(pdev, req);
 8013d84:	f7ff ff3c 	bl	8013c00 <USBD_CtlError.constprop.0>
      ret = USBD_FAIL;
 8013d88:	2503      	movs	r5, #3
      break;
 8013d8a:	e7ae      	b.n	8013cea <USBD_StdDevReq+0xd2>
  switch (pdev->dev_state)
 8013d8c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013d90:	2b02      	cmp	r3, #2
 8013d92:	b2da      	uxtb	r2, r3
 8013d94:	d008      	beq.n	8013da8 <USBD_StdDevReq+0x190>
 8013d96:	2a03      	cmp	r2, #3
 8013d98:	d014      	beq.n	8013dc4 <USBD_StdDevReq+0x1ac>
      USBD_CtlError(pdev, req);
 8013d9a:	f7ff ff31 	bl	8013c00 <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013d9e:	7839      	ldrb	r1, [r7, #0]
 8013da0:	4620      	mov	r0, r4
 8013da2:	f7ff fdee 	bl	8013982 <USBD_ClrClassConfig>
 8013da6:	e7ef      	b.n	8013d88 <USBD_StdDevReq+0x170>
      if (cfgidx != 0U)
 8013da8:	2e00      	cmp	r6, #0
 8013daa:	d067      	beq.n	8013e7c <USBD_StdDevReq+0x264>
        pdev->dev_config = cfgidx;
 8013dac:	2101      	movs	r1, #1
 8013dae:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013db0:	f7ff fde0 	bl	8013974 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8013db4:	4605      	mov	r5, r0
 8013db6:	4620      	mov	r0, r4
 8013db8:	2d00      	cmp	r5, #0
 8013dba:	d194      	bne.n	8013ce6 <USBD_StdDevReq+0xce>
          (void)USBD_CtlSendStatus(pdev);
 8013dbc:	f000 f982 	bl	80140c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013dc0:	2303      	movs	r3, #3
 8013dc2:	e7d5      	b.n	8013d70 <USBD_StdDevReq+0x158>
      if (cfgidx == 0U)
 8013dc4:	b95e      	cbnz	r6, 8013dde <USBD_StdDevReq+0x1c6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013dc6:	2302      	movs	r3, #2
 8013dc8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8013dcc:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013dce:	4631      	mov	r1, r6
 8013dd0:	f7ff fdd7 	bl	8013982 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013dd4:	4620      	mov	r0, r4
 8013dd6:	f000 f975 	bl	80140c4 <USBD_CtlSendStatus>
 8013dda:	4635      	mov	r5, r6
 8013ddc:	e785      	b.n	8013cea <USBD_StdDevReq+0xd2>
      else if (cfgidx != pdev->dev_config)
 8013dde:	6841      	ldr	r1, [r0, #4]
 8013de0:	2901      	cmp	r1, #1
 8013de2:	d04b      	beq.n	8013e7c <USBD_StdDevReq+0x264>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013de4:	b2c9      	uxtb	r1, r1
 8013de6:	f7ff fdcc 	bl	8013982 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013dea:	7839      	ldrb	r1, [r7, #0]
 8013dec:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013dee:	4620      	mov	r0, r4
 8013df0:	f7ff fdc0 	bl	8013974 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8013df4:	4606      	mov	r6, r0
 8013df6:	2800      	cmp	r0, #0
 8013df8:	d040      	beq.n	8013e7c <USBD_StdDevReq+0x264>
          USBD_CtlError(pdev, req);
 8013dfa:	4620      	mov	r0, r4
 8013dfc:	f7ff ff00 	bl	8013c00 <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013e00:	7921      	ldrb	r1, [r4, #4]
 8013e02:	4620      	mov	r0, r4
 8013e04:	f7ff fdbd 	bl	8013982 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013e08:	2302      	movs	r3, #2
 8013e0a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8013e0e:	e7e4      	b.n	8013dda <USBD_StdDevReq+0x1c2>
  if (req->wLength != 1U)
 8013e10:	88ca      	ldrh	r2, [r1, #6]
 8013e12:	2a01      	cmp	r2, #1
 8013e14:	f47f af66 	bne.w	8013ce4 <USBD_StdDevReq+0xcc>
    switch (pdev->dev_state)
 8013e18:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 8013e1c:	2902      	cmp	r1, #2
 8013e1e:	b2cb      	uxtb	r3, r1
 8013e20:	d805      	bhi.n	8013e2e <USBD_StdDevReq+0x216>
 8013e22:	b133      	cbz	r3, 8013e32 <USBD_StdDevReq+0x21a>
        pdev->dev_default_config = 0U;
 8013e24:	4601      	mov	r1, r0
 8013e26:	2300      	movs	r3, #0
 8013e28:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013e2c:	e73c      	b.n	8013ca8 <USBD_StdDevReq+0x90>
    switch (pdev->dev_state)
 8013e2e:	2b03      	cmp	r3, #3
 8013e30:	d004      	beq.n	8013e3c <USBD_StdDevReq+0x224>
        USBD_CtlError(pdev, req);
 8013e32:	4620      	mov	r0, r4
 8013e34:	f7ff fee4 	bl	8013c00 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8013e38:	2500      	movs	r5, #0
        break;
 8013e3a:	e756      	b.n	8013cea <USBD_StdDevReq+0xd2>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013e3c:	1d01      	adds	r1, r0, #4
 8013e3e:	e733      	b.n	8013ca8 <USBD_StdDevReq+0x90>
  switch (pdev->dev_state)
 8013e40:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013e44:	3b01      	subs	r3, #1
 8013e46:	2b02      	cmp	r3, #2
 8013e48:	d8f3      	bhi.n	8013e32 <USBD_StdDevReq+0x21a>
      if (req->wLength != 0x2U)
 8013e4a:	88cb      	ldrh	r3, [r1, #6]
 8013e4c:	2b02      	cmp	r3, #2
 8013e4e:	f47f af49 	bne.w	8013ce4 <USBD_StdDevReq+0xcc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013e52:	2301      	movs	r3, #1
 8013e54:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8013e56:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8013e5a:	b10b      	cbz	r3, 8013e60 <USBD_StdDevReq+0x248>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013e5c:	2303      	movs	r3, #3
 8013e5e:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013e60:	2202      	movs	r2, #2
 8013e62:	f104 010c 	add.w	r1, r4, #12
 8013e66:	4620      	mov	r0, r4
 8013e68:	f000 f902 	bl	8014070 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8013e6c:	463d      	mov	r5, r7
      break;
 8013e6e:	e73c      	b.n	8013cea <USBD_StdDevReq+0xd2>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013e70:	884b      	ldrh	r3, [r1, #2]
 8013e72:	2b01      	cmp	r3, #1
 8013e74:	f47f af39 	bne.w	8013cea <USBD_StdDevReq+0xd2>
        pdev->dev_remote_wakeup = 0U;
 8013e78:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013e7c:	4620      	mov	r0, r4
 8013e7e:	f000 f921 	bl	80140c4 <USBD_CtlSendStatus>
 8013e82:	e732      	b.n	8013cea <USBD_StdDevReq+0xd2>
  switch (pdev->dev_state)
 8013e84:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013e88:	3b01      	subs	r3, #1
 8013e8a:	2b02      	cmp	r3, #2
 8013e8c:	d8d1      	bhi.n	8013e32 <USBD_StdDevReq+0x21a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013e8e:	884b      	ldrh	r3, [r1, #2]
 8013e90:	2b01      	cmp	r3, #1
 8013e92:	f47f af2a 	bne.w	8013cea <USBD_StdDevReq+0xd2>
        pdev->dev_remote_wakeup = 0U;
 8013e96:	2300      	movs	r3, #0
 8013e98:	e7ee      	b.n	8013e78 <USBD_StdDevReq+0x260>
 8013e9a:	bf00      	nop
 8013e9c:	200114c4 	.word	0x200114c4

08013ea0 <USBD_StdItfReq>:
{
 8013ea0:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013ea2:	780b      	ldrb	r3, [r1, #0]
 8013ea4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8013ea8:	2a40      	cmp	r2, #64	; 0x40
{
 8013eaa:	4604      	mov	r4, r0
 8013eac:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013eae:	d001      	beq.n	8013eb4 <USBD_StdItfReq+0x14>
 8013eb0:	065b      	lsls	r3, r3, #25
 8013eb2:	d416      	bmi.n	8013ee2 <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8013eb4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8013eb8:	3b01      	subs	r3, #1
 8013eba:	2b02      	cmp	r3, #2
 8013ebc:	d811      	bhi.n	8013ee2 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013ebe:	7933      	ldrb	r3, [r6, #4]
 8013ec0:	2b01      	cmp	r3, #1
 8013ec2:	d80e      	bhi.n	8013ee2 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013ec4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8013ec8:	4631      	mov	r1, r6
 8013eca:	689b      	ldr	r3, [r3, #8]
 8013ecc:	4620      	mov	r0, r4
 8013ece:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013ed0:	88f3      	ldrh	r3, [r6, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013ed2:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013ed4:	b91b      	cbnz	r3, 8013ede <USBD_StdItfReq+0x3e>
 8013ed6:	b910      	cbnz	r0, 8013ede <USBD_StdItfReq+0x3e>
              (void)USBD_CtlSendStatus(pdev);
 8013ed8:	4620      	mov	r0, r4
 8013eda:	f000 f8f3 	bl	80140c4 <USBD_CtlSendStatus>
}
 8013ede:	4628      	mov	r0, r5
 8013ee0:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8013ee2:	4620      	mov	r0, r4
 8013ee4:	f7ff fe8c 	bl	8013c00 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8013ee8:	2500      	movs	r5, #0
          break;
 8013eea:	e7f8      	b.n	8013ede <USBD_StdItfReq+0x3e>

08013eec <USBD_StdEPReq>:
{
 8013eec:	b570      	push	{r4, r5, r6, lr}
 8013eee:	780b      	ldrb	r3, [r1, #0]
 8013ef0:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013ef4:	2b20      	cmp	r3, #32
{
 8013ef6:	4604      	mov	r4, r0
 8013ef8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013efa:	d053      	beq.n	8013fa4 <USBD_StdEPReq+0xb8>
 8013efc:	2b40      	cmp	r3, #64	; 0x40
 8013efe:	d051      	beq.n	8013fa4 <USBD_StdEPReq+0xb8>
 8013f00:	bb73      	cbnz	r3, 8013f60 <USBD_StdEPReq+0x74>
      switch (req->bRequest)
 8013f02:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 8013f04:	888a      	ldrh	r2, [r1, #4]
 8013f06:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 8013f08:	2b01      	cmp	r3, #1
 8013f0a:	d03a      	beq.n	8013f82 <USBD_StdEPReq+0x96>
 8013f0c:	2b03      	cmp	r3, #3
 8013f0e:	d020      	beq.n	8013f52 <USBD_StdEPReq+0x66>
 8013f10:	bb33      	cbnz	r3, 8013f60 <USBD_StdEPReq+0x74>
          switch (pdev->dev_state)
 8013f12:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013f16:	2b02      	cmp	r3, #2
 8013f18:	b2d8      	uxtb	r0, r3
 8013f1a:	d054      	beq.n	8013fc6 <USBD_StdEPReq+0xda>
 8013f1c:	2803      	cmp	r0, #3
 8013f1e:	d11f      	bne.n	8013f60 <USBD_StdEPReq+0x74>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013f20:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8013f24:	f012 0f80 	tst.w	r2, #128	; 0x80
 8013f28:	f04f 0214 	mov.w	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013f2c:	fb02 4303 	mla	r3, r2, r3, r4
              if ((ep_addr & 0x80U) == 0x80U)
 8013f30:	d058      	beq.n	8013fe4 <USBD_StdEPReq+0xf8>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013f32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013f34:	b1a3      	cbz	r3, 8013f60 <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013f36:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8013f3a:	3501      	adds	r5, #1
 8013f3c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8013f40:	eb04 0585 	add.w	r5, r4, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013f44:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8013f48:	d158      	bne.n	8013ffc <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 8013f4a:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013f4c:	2202      	movs	r2, #2
 8013f4e:	4629      	mov	r1, r5
 8013f50:	e044      	b.n	8013fdc <USBD_StdEPReq+0xf0>
          switch (pdev->dev_state)
 8013f52:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013f56:	2b02      	cmp	r3, #2
 8013f58:	b2da      	uxtb	r2, r3
 8013f5a:	d02b      	beq.n	8013fb4 <USBD_StdEPReq+0xc8>
 8013f5c:	2a03      	cmp	r2, #3
 8013f5e:	d003      	beq.n	8013f68 <USBD_StdEPReq+0x7c>
              USBD_CtlError(pdev, req);
 8013f60:	4620      	mov	r0, r4
 8013f62:	f7ff fe4d 	bl	8013c00 <USBD_CtlError.constprop.0>
              break;
 8013f66:	e00a      	b.n	8013f7e <USBD_StdEPReq+0x92>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013f68:	886b      	ldrh	r3, [r5, #2]
 8013f6a:	b92b      	cbnz	r3, 8013f78 <USBD_StdEPReq+0x8c>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013f6c:	064a      	lsls	r2, r1, #25
 8013f6e:	d003      	beq.n	8013f78 <USBD_StdEPReq+0x8c>
 8013f70:	88eb      	ldrh	r3, [r5, #6]
 8013f72:	b90b      	cbnz	r3, 8013f78 <USBD_StdEPReq+0x8c>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013f74:	f005 fde0 	bl	8019b38 <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 8013f78:	4620      	mov	r0, r4
 8013f7a:	f000 f8a3 	bl	80140c4 <USBD_CtlSendStatus>
}
 8013f7e:	2000      	movs	r0, #0
 8013f80:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8013f82:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013f86:	2b02      	cmp	r3, #2
 8013f88:	b2da      	uxtb	r2, r3
 8013f8a:	d013      	beq.n	8013fb4 <USBD_StdEPReq+0xc8>
 8013f8c:	2a03      	cmp	r2, #3
 8013f8e:	d1e7      	bne.n	8013f60 <USBD_StdEPReq+0x74>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013f90:	886b      	ldrh	r3, [r5, #2]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d1f3      	bne.n	8013f7e <USBD_StdEPReq+0x92>
                if ((ep_addr & 0x7FU) != 0x00U)
 8013f96:	064e      	lsls	r6, r1, #25
 8013f98:	d001      	beq.n	8013f9e <USBD_StdEPReq+0xb2>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013f9a:	f005 fdd4 	bl	8019b46 <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 8013f9e:	4620      	mov	r0, r4
 8013fa0:	f000 f890 	bl	80140c4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013fa4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8013fa8:	4629      	mov	r1, r5
 8013faa:	4620      	mov	r0, r4
 8013fac:	689b      	ldr	r3, [r3, #8]
}
 8013fae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013fb2:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013fb4:	064b      	lsls	r3, r1, #25
 8013fb6:	d0d3      	beq.n	8013f60 <USBD_StdEPReq+0x74>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013fb8:	f005 fdbe 	bl	8019b38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013fbc:	2180      	movs	r1, #128	; 0x80
 8013fbe:	4620      	mov	r0, r4
 8013fc0:	f005 fdba 	bl	8019b38 <USBD_LL_StallEP>
 8013fc4:	e7db      	b.n	8013f7e <USBD_StdEPReq+0x92>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013fc6:	0649      	lsls	r1, r1, #25
 8013fc8:	d1ca      	bne.n	8013f60 <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013fca:	0613      	lsls	r3, r2, #24
 8013fcc:	bf4c      	ite	mi
 8013fce:	f104 0114 	addmi.w	r1, r4, #20
 8013fd2:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013fda:	2202      	movs	r2, #2
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013fdc:	4620      	mov	r0, r4
 8013fde:	f000 f847 	bl	8014070 <USBD_CtlSendData>
              break;
 8013fe2:	e7cc      	b.n	8013f7e <USBD_StdEPReq+0x92>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013fe4:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d0b9      	beq.n	8013f60 <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013fec:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8013ff0:	2314      	movs	r3, #20
 8013ff2:	fb03 4505 	mla	r5, r3, r5, r4
 8013ff6:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8013ffa:	e7a3      	b.n	8013f44 <USBD_StdEPReq+0x58>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013ffc:	4620      	mov	r0, r4
 8013ffe:	f005 fda9 	bl	8019b54 <USBD_LL_IsStallEP>
 8014002:	b108      	cbz	r0, 8014008 <USBD_StdEPReq+0x11c>
                pep->status = 0x0001U;
 8014004:	2301      	movs	r3, #1
 8014006:	e7a0      	b.n	8013f4a <USBD_StdEPReq+0x5e>
                pep->status = 0x0000U;
 8014008:	6028      	str	r0, [r5, #0]
 801400a:	e79f      	b.n	8013f4c <USBD_StdEPReq+0x60>

0801400c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 801400c:	780b      	ldrb	r3, [r1, #0]
 801400e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8014010:	784b      	ldrb	r3, [r1, #1]
 8014012:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8014014:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 8014016:	8043      	strh	r3, [r0, #2]
 8014018:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 801401a:	8083      	strh	r3, [r0, #4]
 801401c:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 801401e:	80c3      	strh	r3, [r0, #6]
}
 8014020:	4770      	bx	lr

08014022 <USBD_CtlError>:
{
 8014022:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014024:	2180      	movs	r1, #128	; 0x80
{
 8014026:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014028:	f005 fd86 	bl	8019b38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801402c:	4620      	mov	r0, r4
 801402e:	2100      	movs	r1, #0
}
 8014030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8014034:	f005 bd80 	b.w	8019b38 <USBD_LL_StallEP>

08014038 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014038:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 801403a:	b188      	cbz	r0, 8014060 <USBD_GetString+0x28>
 801403c:	2400      	movs	r4, #0
 801403e:	3801      	subs	r0, #1
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8014040:	4623      	mov	r3, r4
 8014042:	3401      	adds	r4, #1
 8014044:	5d05      	ldrb	r5, [r0, r4]
 8014046:	2d00      	cmp	r5, #0
 8014048:	d1fa      	bne.n	8014040 <USBD_GetString+0x8>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801404a:	b2db      	uxtb	r3, r3
 801404c:	3301      	adds	r3, #1
 801404e:	005b      	lsls	r3, r3, #1
 8014050:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 8014052:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014054:	2303      	movs	r3, #3
 8014056:	704b      	strb	r3, [r1, #1]
  idx++;
 8014058:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 801405a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801405e:	b902      	cbnz	r2, 8014062 <USBD_GetString+0x2a>
}
 8014060:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 8014062:	54ca      	strb	r2, [r1, r3]
    idx++;
 8014064:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8014066:	b2d2      	uxtb	r2, r2
    idx++;
 8014068:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 801406a:	548d      	strb	r5, [r1, r2]
    idx++;
 801406c:	b2db      	uxtb	r3, r3
 801406e:	e7f4      	b.n	801405a <USBD_GetString+0x22>

08014070 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014070:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014072:	2402      	movs	r4, #2
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014074:	4613      	mov	r3, r2
  pdev->ep_in[0].rem_length = len;
 8014076:	e9c0 2206 	strd	r2, r2, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801407a:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801407e:	460a      	mov	r2, r1
 8014080:	2100      	movs	r1, #0
 8014082:	f005 fd81 	bl	8019b88 <USBD_LL_Transmit>

  return USBD_OK;
}
 8014086:	2000      	movs	r0, #0
 8014088:	bd10      	pop	{r4, pc}

0801408a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801408a:	b508      	push	{r3, lr}
 801408c:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801408e:	460a      	mov	r2, r1
 8014090:	2100      	movs	r1, #0
 8014092:	f005 fd79 	bl	8019b88 <USBD_LL_Transmit>

  return USBD_OK;
}
 8014096:	2000      	movs	r0, #0
 8014098:	bd08      	pop	{r3, pc}

0801409a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801409a:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801409c:	2403      	movs	r4, #3
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801409e:	4613      	mov	r3, r2
  pdev->ep_out[0].rem_length = len;
 80140a0:	e9c0 2256 	strd	r2, r2, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80140a4:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80140a8:	460a      	mov	r2, r1
 80140aa:	2100      	movs	r1, #0
 80140ac:	f005 fd73 	bl	8019b96 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80140b0:	2000      	movs	r0, #0
 80140b2:	bd10      	pop	{r4, pc}

080140b4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80140b4:	b508      	push	{r3, lr}
 80140b6:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80140b8:	460a      	mov	r2, r1
 80140ba:	2100      	movs	r1, #0
 80140bc:	f005 fd6b 	bl	8019b96 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80140c0:	2000      	movs	r0, #0
 80140c2:	bd08      	pop	{r3, pc}

080140c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80140c4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80140c6:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80140c8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80140ca:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80140ce:	4619      	mov	r1, r3
 80140d0:	461a      	mov	r2, r3
 80140d2:	f005 fd59 	bl	8019b88 <USBD_LL_Transmit>

  return USBD_OK;
}
 80140d6:	2000      	movs	r0, #0
 80140d8:	bd08      	pop	{r3, pc}

080140da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80140da:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80140dc:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80140de:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80140e0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80140e4:	4619      	mov	r1, r3
 80140e6:	461a      	mov	r2, r3
 80140e8:	f005 fd55 	bl	8019b96 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80140ec:	2000      	movs	r0, #0
 80140ee:	bd08      	pop	{r3, pc}

080140f0 <json_value_init_string_no_copy>:
    parson_free(array->items);
    parson_free(array);
}

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string, size_t length) {
 80140f0:	b538      	push	{r3, r4, r5, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80140f2:	4b07      	ldr	r3, [pc, #28]	; (8014110 <json_value_init_string_no_copy+0x20>)
static JSON_Value * json_value_init_string_no_copy(char *string, size_t length) {
 80140f4:	4605      	mov	r5, r0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	2010      	movs	r0, #16
static JSON_Value * json_value_init_string_no_copy(char *string, size_t length) {
 80140fa:	460c      	mov	r4, r1
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80140fc:	4798      	blx	r3
    if (!new_value) {
 80140fe:	b128      	cbz	r0, 801410c <json_value_init_string_no_copy+0x1c>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONString;
 8014100:	2200      	movs	r2, #0
 8014102:	2302      	movs	r3, #2
 8014104:	e9c0 2300 	strd	r2, r3, [r0]
    new_value->value.string.chars = string;
    new_value->value.string.length = length;
 8014108:	e9c0 5402 	strd	r5, r4, [r0, #8]
    return new_value;
}
 801410c:	bd38      	pop	{r3, r4, r5, pc}
 801410e:	bf00      	nop
 8014110:	200004f8 	.word	0x200004f8

08014114 <json_value_get_string_desc>:
    return array->wrapping_value;
}

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
    return value ? value->type : JSONError;
 8014114:	b128      	cbz	r0, 8014122 <json_value_get_string_desc+0xe>
JSON_Array * json_value_get_array(const JSON_Value *value) {
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
}

static const JSON_String * json_value_get_string_desc(const JSON_Value *value) {
    return json_value_get_type(value) == JSONString ? &value->value.string : NULL;
 8014116:	6843      	ldr	r3, [r0, #4]
 8014118:	2b02      	cmp	r3, #2
 801411a:	d101      	bne.n	8014120 <json_value_get_string_desc+0xc>
 801411c:	3008      	adds	r0, #8
 801411e:	4770      	bx	lr
 8014120:	2000      	movs	r0, #0
}
 8014122:	4770      	bx	lr

08014124 <parson_strndup>:
    char *output_string = (char*)parson_malloc(n + 1);
 8014124:	4b08      	ldr	r3, [pc, #32]	; (8014148 <parson_strndup+0x24>)
static char * parson_strndup(const char *string, size_t n) {
 8014126:	b570      	push	{r4, r5, r6, lr}
    char *output_string = (char*)parson_malloc(n + 1);
 8014128:	681b      	ldr	r3, [r3, #0]
static char * parson_strndup(const char *string, size_t n) {
 801412a:	4606      	mov	r6, r0
    char *output_string = (char*)parson_malloc(n + 1);
 801412c:	1c48      	adds	r0, r1, #1
static char * parson_strndup(const char *string, size_t n) {
 801412e:	460d      	mov	r5, r1
    char *output_string = (char*)parson_malloc(n + 1);
 8014130:	4798      	blx	r3
    if (!output_string) {
 8014132:	4604      	mov	r4, r0
 8014134:	b128      	cbz	r0, 8014142 <parson_strndup+0x1e>
    output_string[n] = '\0';
 8014136:	2300      	movs	r3, #0
 8014138:	5543      	strb	r3, [r0, r5]
    memcpy(output_string, string, n);
 801413a:	462a      	mov	r2, r5
 801413c:	4631      	mov	r1, r6
 801413e:	f008 f869 	bl	801c214 <memcpy>
}
 8014142:	4620      	mov	r0, r4
 8014144:	bd70      	pop	{r4, r5, r6, pc}
 8014146:	bf00      	nop
 8014148:	200004f8 	.word	0x200004f8

0801414c <json_object_resize>:
    if ((object->names == NULL && object->values != NULL) ||
 801414c:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {
 8014150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014154:	4604      	mov	r4, r0
 8014156:	460e      	mov	r6, r1
    if ((object->names == NULL && object->values != NULL) ||
 8014158:	b922      	cbnz	r2, 8014164 <json_object_resize+0x18>
 801415a:	b12b      	cbz	r3, 8014168 <json_object_resize+0x1c>
        return JSONFailure;
 801415c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8014160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (object->names != NULL && object->values == NULL) ||
 8014164:	2b00      	cmp	r3, #0
 8014166:	d0f9      	beq.n	801415c <json_object_resize+0x10>
 8014168:	2e00      	cmp	r6, #0
 801416a:	d0f7      	beq.n	801415c <json_object_resize+0x10>
    temp_names = (char**)parson_malloc(new_capacity * sizeof(char*));
 801416c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80141d0 <json_object_resize+0x84>
 8014170:	00b7      	lsls	r7, r6, #2
 8014172:	f8d8 3000 	ldr.w	r3, [r8]
 8014176:	4638      	mov	r0, r7
 8014178:	4798      	blx	r3
    if (temp_names == NULL) {
 801417a:	4605      	mov	r5, r0
 801417c:	2800      	cmp	r0, #0
 801417e:	d0ed      	beq.n	801415c <json_object_resize+0x10>
    temp_values = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 8014180:	4638      	mov	r0, r7
 8014182:	f8d8 3000 	ldr.w	r3, [r8]
 8014186:	4798      	blx	r3
    if (temp_values == NULL) {
 8014188:	4607      	mov	r7, r0
 801418a:	b920      	cbnz	r0, 8014196 <json_object_resize+0x4a>
        parson_free(temp_names);
 801418c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014190:	4628      	mov	r0, r5
 8014192:	4798      	blx	r3
 8014194:	e7e2      	b.n	801415c <json_object_resize+0x10>
    if (object->names != NULL && object->values != NULL && object->count > 0) {
 8014196:	6861      	ldr	r1, [r4, #4]
 8014198:	b169      	cbz	r1, 80141b6 <json_object_resize+0x6a>
 801419a:	68a3      	ldr	r3, [r4, #8]
 801419c:	b15b      	cbz	r3, 80141b6 <json_object_resize+0x6a>
 801419e:	68e2      	ldr	r2, [r4, #12]
 80141a0:	b14a      	cbz	r2, 80141b6 <json_object_resize+0x6a>
        memcpy(temp_names, object->names, object->count * sizeof(char*));
 80141a2:	0092      	lsls	r2, r2, #2
 80141a4:	4628      	mov	r0, r5
 80141a6:	f008 f835 	bl	801c214 <memcpy>
        memcpy(temp_values, object->values, object->count * sizeof(JSON_Value*));
 80141aa:	68e2      	ldr	r2, [r4, #12]
 80141ac:	68a1      	ldr	r1, [r4, #8]
 80141ae:	0092      	lsls	r2, r2, #2
 80141b0:	4638      	mov	r0, r7
 80141b2:	f008 f82f 	bl	801c214 <memcpy>
    parson_free(object->names);
 80141b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80141ba:	6860      	ldr	r0, [r4, #4]
 80141bc:	4798      	blx	r3
    parson_free(object->values);
 80141be:	68a0      	ldr	r0, [r4, #8]
 80141c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80141c4:	4798      	blx	r3
    object->values = temp_values;
 80141c6:	e9c4 5701 	strd	r5, r7, [r4, #4]
    object->capacity = new_capacity;
 80141ca:	6126      	str	r6, [r4, #16]
    return JSONSuccess;
 80141cc:	2000      	movs	r0, #0
 80141ce:	e7c7      	b.n	8014160 <json_object_resize+0x14>
 80141d0:	200004f8 	.word	0x200004f8

080141d4 <json_array_resize>:
static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 80141d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141d6:	4604      	mov	r4, r0
    if (new_capacity == 0) {
 80141d8:	460d      	mov	r5, r1
 80141da:	b911      	cbnz	r1, 80141e2 <json_array_resize+0xe>
        return JSONFailure;
 80141dc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80141e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 80141e2:	4f0a      	ldr	r7, [pc, #40]	; (801420c <json_array_resize+0x38>)
 80141e4:	0088      	lsls	r0, r1, #2
 80141e6:	683b      	ldr	r3, [r7, #0]
 80141e8:	4798      	blx	r3
    if (new_items == NULL) {
 80141ea:	4606      	mov	r6, r0
 80141ec:	2800      	cmp	r0, #0
 80141ee:	d0f5      	beq.n	80141dc <json_array_resize+0x8>
    if (array->items != NULL && array->count > 0) {
 80141f0:	6861      	ldr	r1, [r4, #4]
 80141f2:	b121      	cbz	r1, 80141fe <json_array_resize+0x2a>
 80141f4:	68a2      	ldr	r2, [r4, #8]
 80141f6:	b112      	cbz	r2, 80141fe <json_array_resize+0x2a>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 80141f8:	0092      	lsls	r2, r2, #2
 80141fa:	f008 f80b 	bl	801c214 <memcpy>
    parson_free(array->items);
 80141fe:	6860      	ldr	r0, [r4, #4]
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	4798      	blx	r3
    array->items = new_items;
 8014204:	6066      	str	r6, [r4, #4]
    array->capacity = new_capacity;
 8014206:	60e5      	str	r5, [r4, #12]
    return JSONSuccess;
 8014208:	2000      	movs	r0, #0
 801420a:	e7e9      	b.n	80141e0 <json_array_resize+0xc>
 801420c:	200004f8 	.word	0x200004f8

08014210 <json_array_add>:
static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 8014210:	b538      	push	{r3, r4, r5, lr}
 8014212:	460d      	mov	r5, r1
    if (array->count >= array->capacity) {
 8014214:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
 8014218:	428a      	cmp	r2, r1
static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 801421a:	4604      	mov	r4, r0
    if (array->count >= array->capacity) {
 801421c:	d209      	bcs.n	8014232 <json_array_add+0x22>
    value->parent = json_array_get_wrapping_value(array);
 801421e:	6823      	ldr	r3, [r4, #0]
 8014220:	602b      	str	r3, [r5, #0]
    array->items[array->count] = value;
 8014222:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8014226:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    array->count++;
 801422a:	3301      	adds	r3, #1
 801422c:	60a3      	str	r3, [r4, #8]
    return JSONSuccess;
 801422e:	2000      	movs	r0, #0
}
 8014230:	bd38      	pop	{r3, r4, r5, pc}
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 8014232:	0049      	lsls	r1, r1, #1
        if (json_array_resize(array, new_capacity) == JSONFailure) {
 8014234:	2910      	cmp	r1, #16
 8014236:	bf38      	it	cc
 8014238:	2110      	movcc	r1, #16
 801423a:	f7ff ffcb 	bl	80141d4 <json_array_resize>
 801423e:	1c43      	adds	r3, r0, #1
 8014240:	d1ed      	bne.n	801421e <json_array_add+0xe>
 8014242:	e7f5      	b.n	8014230 <json_array_add+0x20>

08014244 <json_object_getn_value>:
static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {
 8014244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014248:	4604      	mov	r4, r0
 801424a:	460f      	mov	r7, r1
 801424c:	4616      	mov	r6, r2
    for (i = 0; i < json_object_get_count(object); i++) {
 801424e:	2500      	movs	r5, #0
    return object ? object->count : 0;
 8014250:	b1bc      	cbz	r4, 8014282 <json_object_getn_value+0x3e>
    for (i = 0; i < json_object_get_count(object); i++) {
 8014252:	68e3      	ldr	r3, [r4, #12]
 8014254:	429d      	cmp	r5, r3
 8014256:	d301      	bcc.n	801425c <json_object_getn_value+0x18>
    return NULL;
 8014258:	2400      	movs	r4, #0
 801425a:	e012      	b.n	8014282 <json_object_getn_value+0x3e>
        name_length = strlen(object->names[i]);
 801425c:	6863      	ldr	r3, [r4, #4]
 801425e:	f853 8025 	ldr.w	r8, [r3, r5, lsl #2]
 8014262:	4640      	mov	r0, r8
 8014264:	f7f0 f836 	bl	80042d4 <strlen>
        if (name_length != name_len) {
 8014268:	42b0      	cmp	r0, r6
 801426a:	ea4f 0985 	mov.w	r9, r5, lsl #2
 801426e:	d10b      	bne.n	8014288 <json_object_getn_value+0x44>
        if (strncmp(object->names[i], name, name_len) == 0) {
 8014270:	4632      	mov	r2, r6
 8014272:	4639      	mov	r1, r7
 8014274:	4640      	mov	r0, r8
 8014276:	f008 fdd7 	bl	801ce28 <strncmp>
 801427a:	b928      	cbnz	r0, 8014288 <json_object_getn_value+0x44>
            return object->values[i];
 801427c:	68a3      	ldr	r3, [r4, #8]
 801427e:	f853 4009 	ldr.w	r4, [r3, r9]
}
 8014282:	4620      	mov	r0, r4
 8014284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for (i = 0; i < json_object_get_count(object); i++) {
 8014288:	3501      	adds	r5, #1
 801428a:	e7e1      	b.n	8014250 <json_object_getn_value+0xc>

0801428c <json_object_addn>:
static JSON_Status json_object_addn(JSON_Object *object, const char *name, size_t name_len, JSON_Value *value) {
 801428c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014290:	460e      	mov	r6, r1
 8014292:	4690      	mov	r8, r2
 8014294:	461d      	mov	r5, r3
    if (object == NULL || name == NULL || value == NULL) {
 8014296:	4604      	mov	r4, r0
 8014298:	b918      	cbnz	r0, 80142a2 <json_object_addn+0x16>
        return JSONFailure;
 801429a:	f04f 30ff 	mov.w	r0, #4294967295
}
 801429e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (object == NULL || name == NULL || value == NULL) {
 80142a2:	2900      	cmp	r1, #0
 80142a4:	d0f9      	beq.n	801429a <json_object_addn+0xe>
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d0f7      	beq.n	801429a <json_object_addn+0xe>
    if (json_object_getn_value(object, name, name_len) != NULL) {
 80142aa:	f7ff ffcb 	bl	8014244 <json_object_getn_value>
 80142ae:	2800      	cmp	r0, #0
 80142b0:	d1f3      	bne.n	801429a <json_object_addn+0xe>
    if (object->count >= object->capacity) {
 80142b2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80142b6:	428a      	cmp	r2, r1
 80142b8:	d217      	bcs.n	80142ea <json_object_addn+0x5e>
    object->names[index] = parson_strndup(name, name_len);
 80142ba:	4641      	mov	r1, r8
 80142bc:	4630      	mov	r0, r6
 80142be:	68e7      	ldr	r7, [r4, #12]
 80142c0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80142c4:	f7ff ff2e 	bl	8014124 <parson_strndup>
    if (object->names[index] == NULL) {
 80142c8:	6863      	ldr	r3, [r4, #4]
    object->names[index] = parson_strndup(name, name_len);
 80142ca:	f849 0027 	str.w	r0, [r9, r7, lsl #2]
    if (object->names[index] == NULL) {
 80142ce:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d0e1      	beq.n	801429a <json_object_addn+0xe>
    value->parent = json_object_get_wrapping_value(object);
 80142d6:	6823      	ldr	r3, [r4, #0]
 80142d8:	602b      	str	r3, [r5, #0]
    object->values[index] = value;
 80142da:	68a3      	ldr	r3, [r4, #8]
 80142dc:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
    object->count++;
 80142e0:	68e3      	ldr	r3, [r4, #12]
 80142e2:	3301      	adds	r3, #1
 80142e4:	60e3      	str	r3, [r4, #12]
    return JSONSuccess;
 80142e6:	2000      	movs	r0, #0
 80142e8:	e7d9      	b.n	801429e <json_object_addn+0x12>
        size_t new_capacity = MAX(object->capacity * 2, STARTING_CAPACITY);
 80142ea:	0049      	lsls	r1, r1, #1
        if (json_object_resize(object, new_capacity) == JSONFailure) {
 80142ec:	2910      	cmp	r1, #16
 80142ee:	bf38      	it	cc
 80142f0:	2110      	movcc	r1, #16
 80142f2:	4620      	mov	r0, r4
 80142f4:	f7ff ff2a 	bl	801414c <json_object_resize>
 80142f8:	3001      	adds	r0, #1
 80142fa:	d1de      	bne.n	80142ba <json_object_addn+0x2e>
 80142fc:	e7cd      	b.n	801429a <json_object_addn+0xe>

080142fe <json_object_add>:
static JSON_Status json_object_add(JSON_Object *object, const char *name, JSON_Value *value) {
 80142fe:	b513      	push	{r0, r1, r4, lr}
 8014300:	4604      	mov	r4, r0
 8014302:	9201      	str	r2, [sp, #4]
    if (name == NULL) {
 8014304:	b161      	cbz	r1, 8014320 <json_object_add+0x22>
    return json_object_addn(object, name, strlen(name), value);
 8014306:	4608      	mov	r0, r1
 8014308:	9100      	str	r1, [sp, #0]
 801430a:	f7ef ffe3 	bl	80042d4 <strlen>
 801430e:	e9dd 1300 	ldrd	r1, r3, [sp]
 8014312:	4602      	mov	r2, r0
 8014314:	4620      	mov	r0, r4
}
 8014316:	b002      	add	sp, #8
 8014318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return json_object_addn(object, name, strlen(name), value);
 801431c:	f7ff bfb6 	b.w	801428c <json_object_addn>
}
 8014320:	f04f 30ff 	mov.w	r0, #4294967295
 8014324:	b002      	add	sp, #8
 8014326:	bd10      	pop	{r4, pc}

08014328 <hex_char_to_int>:
    if (c >= '0' && c <= '9') {
 8014328:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801432c:	b2da      	uxtb	r2, r3
 801432e:	2a09      	cmp	r2, #9
 8014330:	d801      	bhi.n	8014336 <hex_char_to_int+0xe>
        return c - '0';
 8014332:	4618      	mov	r0, r3
 8014334:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
 8014336:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801433a:	2b05      	cmp	r3, #5
 801433c:	d801      	bhi.n	8014342 <hex_char_to_int+0x1a>
        return c - 'a' + 10;
 801433e:	3857      	subs	r0, #87	; 0x57
 8014340:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
 8014342:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014346:	2b05      	cmp	r3, #5
        return c - 'A' + 10;
 8014348:	bf94      	ite	ls
 801434a:	3837      	subls	r0, #55	; 0x37
    return -1;
 801434c:	f04f 30ff 	movhi.w	r0, #4294967295
}
 8014350:	4770      	bx	lr

08014352 <parse_utf16_hex>:
static int parse_utf16_hex(const char *s, unsigned int *result) {
 8014352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014354:	4603      	mov	r3, r0
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 8014356:	7800      	ldrb	r0, [r0, #0]
 8014358:	b320      	cbz	r0, 80143a4 <parse_utf16_hex+0x52>
 801435a:	785d      	ldrb	r5, [r3, #1]
 801435c:	b31d      	cbz	r5, 80143a6 <parse_utf16_hex+0x54>
 801435e:	789e      	ldrb	r6, [r3, #2]
 8014360:	b30e      	cbz	r6, 80143a6 <parse_utf16_hex+0x54>
 8014362:	78dc      	ldrb	r4, [r3, #3]
 8014364:	b1fc      	cbz	r4, 80143a6 <parse_utf16_hex+0x54>
    x1 = hex_char_to_int(s[0]);
 8014366:	f7ff ffdf 	bl	8014328 <hex_char_to_int>
 801436a:	4607      	mov	r7, r0
    x2 = hex_char_to_int(s[1]);
 801436c:	4628      	mov	r0, r5
 801436e:	f7ff ffdb 	bl	8014328 <hex_char_to_int>
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 8014372:	1c7b      	adds	r3, r7, #1
    x2 = hex_char_to_int(s[1]);
 8014374:	4605      	mov	r5, r0
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 8014376:	d016      	beq.n	80143a6 <parse_utf16_hex+0x54>
 8014378:	1c68      	adds	r0, r5, #1
 801437a:	d014      	beq.n	80143a6 <parse_utf16_hex+0x54>
    x3 = hex_char_to_int(s[2]);
 801437c:	4630      	mov	r0, r6
 801437e:	f7ff ffd3 	bl	8014328 <hex_char_to_int>
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 8014382:	1c42      	adds	r2, r0, #1
    x3 = hex_char_to_int(s[2]);
 8014384:	4606      	mov	r6, r0
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 8014386:	d00e      	beq.n	80143a6 <parse_utf16_hex+0x54>
    x4 = hex_char_to_int(s[3]);
 8014388:	4620      	mov	r0, r4
 801438a:	f7ff ffcd 	bl	8014328 <hex_char_to_int>
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 801438e:	1c43      	adds	r3, r0, #1
    x4 = hex_char_to_int(s[3]);
 8014390:	4604      	mov	r4, r0
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 8014392:	d008      	beq.n	80143a6 <parse_utf16_hex+0x54>
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 8014394:	022a      	lsls	r2, r5, #8
 8014396:	ea42 3307 	orr.w	r3, r2, r7, lsl #12
 801439a:	ea43 1506 	orr.w	r5, r3, r6, lsl #4
 801439e:	432c      	orrs	r4, r5
 80143a0:	600c      	str	r4, [r1, #0]
    return 1;
 80143a2:	2001      	movs	r0, #1
}
 80143a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 80143a6:	2000      	movs	r0, #0
 80143a8:	e7fc      	b.n	80143a4 <parse_utf16_hex+0x52>
	...

080143ac <append_string>:
static int append_string(char *buf, const char *string) {
 80143ac:	460a      	mov	r2, r1
    if (buf == NULL) {
 80143ae:	b910      	cbnz	r0, 80143b6 <append_string+0xa>
        return (int)strlen(string);
 80143b0:	4608      	mov	r0, r1
 80143b2:	f7ef bf8f 	b.w	80042d4 <strlen>
    return sprintf(buf, "%s", string);
 80143b6:	4901      	ldr	r1, [pc, #4]	; (80143bc <append_string+0x10>)
 80143b8:	f008 bcbe 	b.w	801cd38 <siprintf>
 80143bc:	08023d11 	.word	0x08023d11

080143c0 <append_indent>:
static int append_indent(char *buf, int level) {
 80143c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int written = -1, written_total = 0;
 80143c4:	2500      	movs	r5, #0
        APPEND_STRING("    ");
 80143c6:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80143f8 <append_indent+0x38>
static int append_indent(char *buf, int level) {
 80143ca:	4604      	mov	r4, r0
 80143cc:	460e      	mov	r6, r1
    for (i = 0; i < level; i++) {
 80143ce:	462f      	mov	r7, r5
 80143d0:	42b7      	cmp	r7, r6
 80143d2:	db02      	blt.n	80143da <append_indent+0x1a>
}
 80143d4:	4628      	mov	r0, r5
 80143d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APPEND_STRING("    ");
 80143da:	4641      	mov	r1, r8
 80143dc:	4620      	mov	r0, r4
 80143de:	f7ff ffe5 	bl	80143ac <append_string>
 80143e2:	2800      	cmp	r0, #0
 80143e4:	db04      	blt.n	80143f0 <append_indent+0x30>
 80143e6:	b104      	cbz	r4, 80143ea <append_indent+0x2a>
 80143e8:	4404      	add	r4, r0
 80143ea:	4405      	add	r5, r0
    for (i = 0; i < level; i++) {
 80143ec:	3701      	adds	r7, #1
 80143ee:	e7ef      	b.n	80143d0 <append_indent+0x10>
        APPEND_STRING("    ");
 80143f0:	f04f 35ff 	mov.w	r5, #4294967295
 80143f4:	e7ee      	b.n	80143d4 <append_indent+0x14>
 80143f6:	bf00      	nop
 80143f8:	08023d14 	.word	0x08023d14

080143fc <json_serialize_string>:
static int json_serialize_string(const char *string, size_t len, char *buf) {
 80143fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014400:	4606      	mov	r6, r0
 8014402:	460f      	mov	r7, r1
    APPEND_STRING("\"");
 8014404:	4610      	mov	r0, r2
 8014406:	4955      	ldr	r1, [pc, #340]	; (801455c <json_serialize_string+0x160>)
static int json_serialize_string(const char *string, size_t len, char *buf) {
 8014408:	4614      	mov	r4, r2
    APPEND_STRING("\"");
 801440a:	f7ff ffcf 	bl	80143ac <append_string>
 801440e:	1e05      	subs	r5, r0, #0
 8014410:	da03      	bge.n	801441a <json_serialize_string+0x1e>
 8014412:	f04f 30ff 	mov.w	r0, #4294967295
}
 8014416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    APPEND_STRING("\"");
 801441a:	b104      	cbz	r4, 801441e <json_serialize_string+0x22>
 801441c:	442c      	add	r4, r5
                if (parson_escape_slashes) {
 801441e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80145e8 <json_serialize_string+0x1ec>
                    APPEND_STRING("/");
 8014422:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80145ec <json_serialize_string+0x1f0>
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8014426:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 80145f0 <json_serialize_string+0x1f4>
 801442a:	4437      	add	r7, r6
    for (i = 0; i < len; i++) {
 801442c:	42be      	cmp	r6, r7
 801442e:	d107      	bne.n	8014440 <json_serialize_string+0x44>
    APPEND_STRING("\"");
 8014430:	494a      	ldr	r1, [pc, #296]	; (801455c <json_serialize_string+0x160>)
 8014432:	4620      	mov	r0, r4
 8014434:	f7ff ffba 	bl	80143ac <append_string>
 8014438:	2800      	cmp	r0, #0
 801443a:	dbea      	blt.n	8014412 <json_serialize_string+0x16>
 801443c:	4428      	add	r0, r5
    return written_total;
 801443e:	e7ea      	b.n	8014416 <json_serialize_string+0x1a>
        c = string[i];
 8014440:	f816 3b01 	ldrb.w	r3, [r6], #1
        switch (c) {
 8014444:	2b5c      	cmp	r3, #92	; 0x5c
 8014446:	f200 8084 	bhi.w	8014552 <json_serialize_string+0x156>
 801444a:	e8df f003 	tbb	[pc, r3]
 801444e:	4745      	.short	0x4745
 8014450:	4f4d4b49 	.word	0x4f4d4b49
 8014454:	433b5351 	.word	0x433b5351
 8014458:	413d553f 	.word	0x413d553f
 801445c:	5d5b5957 	.word	0x5d5b5957
 8014460:	6563615f 	.word	0x6563615f
 8014464:	6d6b6967 	.word	0x6d6b6967
 8014468:	7573716f 	.word	0x7573716f
 801446c:	82827977 	.word	0x82827977
 8014470:	8282822f 	.word	0x8282822f
 8014474:	82828282 	.word	0x82828282
 8014478:	82828282 	.word	0x82828282
 801447c:	82827b82 	.word	0x82827b82
 8014480:	82828282 	.word	0x82828282
 8014484:	82828282 	.word	0x82828282
 8014488:	82828282 	.word	0x82828282
 801448c:	82828282 	.word	0x82828282
 8014490:	82828282 	.word	0x82828282
 8014494:	82828282 	.word	0x82828282
 8014498:	82828282 	.word	0x82828282
 801449c:	82828282 	.word	0x82828282
 80144a0:	82828282 	.word	0x82828282
 80144a4:	82828282 	.word	0x82828282
 80144a8:	8282      	.short	0x8282
 80144aa:	39          	.byte	0x39
 80144ab:	00          	.byte	0x00
            case '\"': APPEND_STRING("\\\""); break;
 80144ac:	492c      	ldr	r1, [pc, #176]	; (8014560 <json_serialize_string+0x164>)
                    APPEND_STRING("/");
 80144ae:	4620      	mov	r0, r4
 80144b0:	f7ff ff7c 	bl	80143ac <append_string>
 80144b4:	2800      	cmp	r0, #0
 80144b6:	dbac      	blt.n	8014412 <json_serialize_string+0x16>
 80144b8:	b104      	cbz	r4, 80144bc <json_serialize_string+0xc0>
 80144ba:	4404      	add	r4, r0
 80144bc:	4405      	add	r5, r0
 80144be:	e7b5      	b.n	801442c <json_serialize_string+0x30>
            case '\\': APPEND_STRING("\\\\"); break;
 80144c0:	4928      	ldr	r1, [pc, #160]	; (8014564 <json_serialize_string+0x168>)
 80144c2:	e7f4      	b.n	80144ae <json_serialize_string+0xb2>
            case '\b': APPEND_STRING("\\b"); break;
 80144c4:	4928      	ldr	r1, [pc, #160]	; (8014568 <json_serialize_string+0x16c>)
 80144c6:	e7f2      	b.n	80144ae <json_serialize_string+0xb2>
            case '\f': APPEND_STRING("\\f"); break;
 80144c8:	4928      	ldr	r1, [pc, #160]	; (801456c <json_serialize_string+0x170>)
 80144ca:	e7f0      	b.n	80144ae <json_serialize_string+0xb2>
            case '\n': APPEND_STRING("\\n"); break;
 80144cc:	4928      	ldr	r1, [pc, #160]	; (8014570 <json_serialize_string+0x174>)
 80144ce:	e7ee      	b.n	80144ae <json_serialize_string+0xb2>
            case '\r': APPEND_STRING("\\r"); break;
 80144d0:	4928      	ldr	r1, [pc, #160]	; (8014574 <json_serialize_string+0x178>)
 80144d2:	e7ec      	b.n	80144ae <json_serialize_string+0xb2>
            case '\t': APPEND_STRING("\\t"); break;
 80144d4:	4928      	ldr	r1, [pc, #160]	; (8014578 <json_serialize_string+0x17c>)
 80144d6:	e7ea      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x00': APPEND_STRING("\\u0000"); break;
 80144d8:	4928      	ldr	r1, [pc, #160]	; (801457c <json_serialize_string+0x180>)
 80144da:	e7e8      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x01': APPEND_STRING("\\u0001"); break;
 80144dc:	4928      	ldr	r1, [pc, #160]	; (8014580 <json_serialize_string+0x184>)
 80144de:	e7e6      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x02': APPEND_STRING("\\u0002"); break;
 80144e0:	4928      	ldr	r1, [pc, #160]	; (8014584 <json_serialize_string+0x188>)
 80144e2:	e7e4      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x03': APPEND_STRING("\\u0003"); break;
 80144e4:	4928      	ldr	r1, [pc, #160]	; (8014588 <json_serialize_string+0x18c>)
 80144e6:	e7e2      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x04': APPEND_STRING("\\u0004"); break;
 80144e8:	4928      	ldr	r1, [pc, #160]	; (801458c <json_serialize_string+0x190>)
 80144ea:	e7e0      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x05': APPEND_STRING("\\u0005"); break;
 80144ec:	4928      	ldr	r1, [pc, #160]	; (8014590 <json_serialize_string+0x194>)
 80144ee:	e7de      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x06': APPEND_STRING("\\u0006"); break;
 80144f0:	4928      	ldr	r1, [pc, #160]	; (8014594 <json_serialize_string+0x198>)
 80144f2:	e7dc      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x07': APPEND_STRING("\\u0007"); break;
 80144f4:	4928      	ldr	r1, [pc, #160]	; (8014598 <json_serialize_string+0x19c>)
 80144f6:	e7da      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x0b': APPEND_STRING("\\u000b"); break;
 80144f8:	4928      	ldr	r1, [pc, #160]	; (801459c <json_serialize_string+0x1a0>)
 80144fa:	e7d8      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x0e': APPEND_STRING("\\u000e"); break;
 80144fc:	4928      	ldr	r1, [pc, #160]	; (80145a0 <json_serialize_string+0x1a4>)
 80144fe:	e7d6      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 8014500:	4928      	ldr	r1, [pc, #160]	; (80145a4 <json_serialize_string+0x1a8>)
 8014502:	e7d4      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x10': APPEND_STRING("\\u0010"); break;
 8014504:	4928      	ldr	r1, [pc, #160]	; (80145a8 <json_serialize_string+0x1ac>)
 8014506:	e7d2      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x11': APPEND_STRING("\\u0011"); break;
 8014508:	4928      	ldr	r1, [pc, #160]	; (80145ac <json_serialize_string+0x1b0>)
 801450a:	e7d0      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x12': APPEND_STRING("\\u0012"); break;
 801450c:	4928      	ldr	r1, [pc, #160]	; (80145b0 <json_serialize_string+0x1b4>)
 801450e:	e7ce      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x13': APPEND_STRING("\\u0013"); break;
 8014510:	4928      	ldr	r1, [pc, #160]	; (80145b4 <json_serialize_string+0x1b8>)
 8014512:	e7cc      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x14': APPEND_STRING("\\u0014"); break;
 8014514:	4928      	ldr	r1, [pc, #160]	; (80145b8 <json_serialize_string+0x1bc>)
 8014516:	e7ca      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x15': APPEND_STRING("\\u0015"); break;
 8014518:	4928      	ldr	r1, [pc, #160]	; (80145bc <json_serialize_string+0x1c0>)
 801451a:	e7c8      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x16': APPEND_STRING("\\u0016"); break;
 801451c:	4928      	ldr	r1, [pc, #160]	; (80145c0 <json_serialize_string+0x1c4>)
 801451e:	e7c6      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x17': APPEND_STRING("\\u0017"); break;
 8014520:	4928      	ldr	r1, [pc, #160]	; (80145c4 <json_serialize_string+0x1c8>)
 8014522:	e7c4      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x18': APPEND_STRING("\\u0018"); break;
 8014524:	4928      	ldr	r1, [pc, #160]	; (80145c8 <json_serialize_string+0x1cc>)
 8014526:	e7c2      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x19': APPEND_STRING("\\u0019"); break;
 8014528:	4928      	ldr	r1, [pc, #160]	; (80145cc <json_serialize_string+0x1d0>)
 801452a:	e7c0      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 801452c:	4928      	ldr	r1, [pc, #160]	; (80145d0 <json_serialize_string+0x1d4>)
 801452e:	e7be      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 8014530:	4928      	ldr	r1, [pc, #160]	; (80145d4 <json_serialize_string+0x1d8>)
 8014532:	e7bc      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x1c': APPEND_STRING("\\u001c"); break;
 8014534:	4928      	ldr	r1, [pc, #160]	; (80145d8 <json_serialize_string+0x1dc>)
 8014536:	e7ba      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 8014538:	4928      	ldr	r1, [pc, #160]	; (80145dc <json_serialize_string+0x1e0>)
 801453a:	e7b8      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x1e': APPEND_STRING("\\u001e"); break;
 801453c:	4928      	ldr	r1, [pc, #160]	; (80145e0 <json_serialize_string+0x1e4>)
 801453e:	e7b6      	b.n	80144ae <json_serialize_string+0xb2>
            case '\x1f': APPEND_STRING("\\u001f"); break;
 8014540:	4928      	ldr	r1, [pc, #160]	; (80145e4 <json_serialize_string+0x1e8>)
 8014542:	e7b4      	b.n	80144ae <json_serialize_string+0xb2>
                if (parson_escape_slashes) {
 8014544:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014548:	b10b      	cbz	r3, 801454e <json_serialize_string+0x152>
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 801454a:	4651      	mov	r1, sl
 801454c:	e7af      	b.n	80144ae <json_serialize_string+0xb2>
                    APPEND_STRING("/");
 801454e:	4649      	mov	r1, r9
 8014550:	e7ad      	b.n	80144ae <json_serialize_string+0xb2>
                if (buf != NULL) {
 8014552:	b10c      	cbz	r4, 8014558 <json_serialize_string+0x15c>
                    buf[0] = c;
 8014554:	f804 3b01 	strb.w	r3, [r4], #1
                written_total += 1;
 8014558:	3501      	adds	r5, #1
                break;
 801455a:	e767      	b.n	801442c <json_serialize_string+0x30>
 801455c:	08023d1a 	.word	0x08023d1a
 8014560:	08023d19 	.word	0x08023d19
 8014564:	08023d1c 	.word	0x08023d1c
 8014568:	08023d1f 	.word	0x08023d1f
 801456c:	08023d22 	.word	0x08023d22
 8014570:	08023d25 	.word	0x08023d25
 8014574:	08023d28 	.word	0x08023d28
 8014578:	08023d2b 	.word	0x08023d2b
 801457c:	08023d2e 	.word	0x08023d2e
 8014580:	08023d35 	.word	0x08023d35
 8014584:	08023d3c 	.word	0x08023d3c
 8014588:	08023d43 	.word	0x08023d43
 801458c:	08023d4a 	.word	0x08023d4a
 8014590:	08023d51 	.word	0x08023d51
 8014594:	08023d58 	.word	0x08023d58
 8014598:	08023d5f 	.word	0x08023d5f
 801459c:	08023d66 	.word	0x08023d66
 80145a0:	08023d6d 	.word	0x08023d6d
 80145a4:	08023d74 	.word	0x08023d74
 80145a8:	08023d7b 	.word	0x08023d7b
 80145ac:	08023d82 	.word	0x08023d82
 80145b0:	08023d89 	.word	0x08023d89
 80145b4:	08023d90 	.word	0x08023d90
 80145b8:	08023d97 	.word	0x08023d97
 80145bc:	08023d9e 	.word	0x08023d9e
 80145c0:	08023da5 	.word	0x08023da5
 80145c4:	08023dac 	.word	0x08023dac
 80145c8:	08023db3 	.word	0x08023db3
 80145cc:	08023dba 	.word	0x08023dba
 80145d0:	08023dc1 	.word	0x08023dc1
 80145d4:	08023dc8 	.word	0x08023dc8
 80145d8:	08023dcf 	.word	0x08023dcf
 80145dc:	08023dd6 	.word	0x08023dd6
 80145e0:	08023ddd 	.word	0x08023ddd
 80145e4:	08023de4 	.word	0x08023de4
 80145e8:	200004f8 	.word	0x200004f8
 80145ec:	08023e09 	.word	0x08023e09
 80145f0:	08023deb 	.word	0x08023deb

080145f4 <get_quoted_string.constprop.0>:
static char * get_quoted_string(const char **string, size_t *output_string_len) {
 80145f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char *string_start = *string;
 80145f8:	6802      	ldr	r2, [r0, #0]
    if (**string != '\"') {
 80145fa:	7813      	ldrb	r3, [r2, #0]
static char * get_quoted_string(const char **string, size_t *output_string_len) {
 80145fc:	b085      	sub	sp, #20
    if (**string != '\"') {
 80145fe:	2b22      	cmp	r3, #34	; 0x22
static char * get_quoted_string(const char **string, size_t *output_string_len) {
 8014600:	9101      	str	r1, [sp, #4]
    if (**string != '\"') {
 8014602:	d001      	beq.n	8014608 <get_quoted_string.constprop.0+0x14>
    return NULL;
 8014604:	2500      	movs	r5, #0
 8014606:	e032      	b.n	801466e <get_quoted_string.constprop.0+0x7a>
    SKIP_CHAR(string);
 8014608:	f102 0801 	add.w	r8, r2, #1
 801460c:	f8c0 8000 	str.w	r8, [r0]
    while (**string != '\"') {
 8014610:	6803      	ldr	r3, [r0, #0]
 8014612:	7819      	ldrb	r1, [r3, #0]
 8014614:	2922      	cmp	r1, #34	; 0x22
 8014616:	d12e      	bne.n	8014676 <get_quoted_string.constprop.0+0x82>
    SKIP_CHAR(string);
 8014618:	3301      	adds	r3, #1
 801461a:	6003      	str	r3, [r0, #0]
    output = (char*)parson_malloc(initial_size);
 801461c:	4f76      	ldr	r7, [pc, #472]	; (80147f8 <get_quoted_string.constprop.0+0x204>)
    input_string_len = *string - string_start - 2; /* length without quotes */
 801461e:	1a98      	subs	r0, r3, r2
 8014620:	1e83      	subs	r3, r0, #2
 8014622:	9300      	str	r3, [sp, #0]
    output = (char*)parson_malloc(initial_size);
 8014624:	3801      	subs	r0, #1
 8014626:	683b      	ldr	r3, [r7, #0]
 8014628:	4798      	blx	r3
    if (output == NULL) {
 801462a:	4683      	mov	fp, r0
 801462c:	2800      	cmp	r0, #0
 801462e:	d040      	beq.n	80146b2 <get_quoted_string.constprop.0+0xbe>
 8014630:	4604      	mov	r4, r0
    const char *input_ptr = input;
 8014632:	4646      	mov	r6, r8
                case 'f':  *output_ptr = '\f'; break;
 8014634:	f04f 0a0c 	mov.w	sl, #12
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 8014638:	7832      	ldrb	r2, [r6, #0]
 801463a:	b122      	cbz	r2, 8014646 <get_quoted_string.constprop.0+0x52>
 801463c:	9b00      	ldr	r3, [sp, #0]
 801463e:	eba6 0108 	sub.w	r1, r6, r8
 8014642:	428b      	cmp	r3, r1
 8014644:	d825      	bhi.n	8014692 <get_quoted_string.constprop.0+0x9e>
    *output_ptr = '\0';
 8014646:	2200      	movs	r2, #0
 8014648:	7022      	strb	r2, [r4, #0]
    final_size = (size_t)(output_ptr-output) + 1;
 801464a:	eba4 040b 	sub.w	r4, r4, fp
 801464e:	1c62      	adds	r2, r4, #1
    resized_output = (char*)parson_malloc(final_size);
 8014650:	6839      	ldr	r1, [r7, #0]
 8014652:	9200      	str	r2, [sp, #0]
 8014654:	4610      	mov	r0, r2
 8014656:	4788      	blx	r1
    if (resized_output == NULL) {
 8014658:	4605      	mov	r5, r0
 801465a:	b350      	cbz	r0, 80146b2 <get_quoted_string.constprop.0+0xbe>
    memcpy(resized_output, output, final_size);
 801465c:	9a00      	ldr	r2, [sp, #0]
 801465e:	4659      	mov	r1, fp
 8014660:	f007 fdd8 	bl	801c214 <memcpy>
    *output_len = final_size - 1;
 8014664:	9b01      	ldr	r3, [sp, #4]
    parson_free(output);
 8014666:	687a      	ldr	r2, [r7, #4]
    *output_len = final_size - 1;
 8014668:	601c      	str	r4, [r3, #0]
    parson_free(output);
 801466a:	4658      	mov	r0, fp
 801466c:	4790      	blx	r2
}
 801466e:	4628      	mov	r0, r5
 8014670:	b005      	add	sp, #20
 8014672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (**string == '\0') {
 8014676:	2900      	cmp	r1, #0
 8014678:	d0c4      	beq.n	8014604 <get_quoted_string.constprop.0+0x10>
        } else if (**string == '\\') {
 801467a:	295c      	cmp	r1, #92	; 0x5c
 801467c:	d003      	beq.n	8014686 <get_quoted_string.constprop.0+0x92>
        SKIP_CHAR(string);
 801467e:	6803      	ldr	r3, [r0, #0]
 8014680:	3301      	adds	r3, #1
 8014682:	6003      	str	r3, [r0, #0]
 8014684:	e7c4      	b.n	8014610 <get_quoted_string.constprop.0+0x1c>
            SKIP_CHAR(string);
 8014686:	1c59      	adds	r1, r3, #1
 8014688:	6001      	str	r1, [r0, #0]
            if (**string == '\0') {
 801468a:	785b      	ldrb	r3, [r3, #1]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d1f6      	bne.n	801467e <get_quoted_string.constprop.0+0x8a>
 8014690:	e7b8      	b.n	8014604 <get_quoted_string.constprop.0+0x10>
        if (*input_ptr == '\\') {
 8014692:	2a5c      	cmp	r2, #92	; 0x5c
 8014694:	f040 80a9 	bne.w	80147ea <get_quoted_string.constprop.0+0x1f6>
            switch (*input_ptr) {
 8014698:	7871      	ldrb	r1, [r6, #1]
 801469a:	2966      	cmp	r1, #102	; 0x66
            input_ptr++;
 801469c:	f106 0201 	add.w	r2, r6, #1
            switch (*input_ptr) {
 80146a0:	d02a      	beq.n	80146f8 <get_quoted_string.constprop.0+0x104>
 80146a2:	d80f      	bhi.n	80146c4 <get_quoted_string.constprop.0+0xd0>
 80146a4:	295c      	cmp	r1, #92	; 0x5c
 80146a6:	d00b      	beq.n	80146c0 <get_quoted_string.constprop.0+0xcc>
 80146a8:	d807      	bhi.n	80146ba <get_quoted_string.constprop.0+0xc6>
 80146aa:	2922      	cmp	r1, #34	; 0x22
 80146ac:	d008      	beq.n	80146c0 <get_quoted_string.constprop.0+0xcc>
 80146ae:	292f      	cmp	r1, #47	; 0x2f
 80146b0:	d006      	beq.n	80146c0 <get_quoted_string.constprop.0+0xcc>
    parson_free(output);
 80146b2:	687a      	ldr	r2, [r7, #4]
 80146b4:	4658      	mov	r0, fp
 80146b6:	4790      	blx	r2
 80146b8:	e7a4      	b.n	8014604 <get_quoted_string.constprop.0+0x10>
            switch (*input_ptr) {
 80146ba:	2962      	cmp	r1, #98	; 0x62
 80146bc:	d1f9      	bne.n	80146b2 <get_quoted_string.constprop.0+0xbe>
                case 'b':  *output_ptr = '\b'; break;
 80146be:	2108      	movs	r1, #8
                case 't':  *output_ptr = '\t'; break;
 80146c0:	7021      	strb	r1, [r4, #0]
 80146c2:	e01b      	b.n	80146fc <get_quoted_string.constprop.0+0x108>
            switch (*input_ptr) {
 80146c4:	396e      	subs	r1, #110	; 0x6e
 80146c6:	b2c8      	uxtb	r0, r1
 80146c8:	2807      	cmp	r0, #7
 80146ca:	d8f2      	bhi.n	80146b2 <get_quoted_string.constprop.0+0xbe>
 80146cc:	2907      	cmp	r1, #7
 80146ce:	d8f0      	bhi.n	80146b2 <get_quoted_string.constprop.0+0xbe>
 80146d0:	a301      	add	r3, pc, #4	; (adr r3, 80146d8 <get_quoted_string.constprop.0+0xe4>)
 80146d2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80146d6:	bf00      	nop
 80146d8:	08014703 	.word	0x08014703
 80146dc:	080146b3 	.word	0x080146b3
 80146e0:	080146b3 	.word	0x080146b3
 80146e4:	080146b3 	.word	0x080146b3
 80146e8:	08014707 	.word	0x08014707
 80146ec:	080146b3 	.word	0x080146b3
 80146f0:	0801470b 	.word	0x0801470b
 80146f4:	0801470f 	.word	0x0801470f
                case 'f':  *output_ptr = '\f'; break;
 80146f8:	f884 a000 	strb.w	sl, [r4]
        output_ptr++;
 80146fc:	3401      	adds	r4, #1
        input_ptr++;
 80146fe:	1c56      	adds	r6, r2, #1
 8014700:	e79a      	b.n	8014638 <get_quoted_string.constprop.0+0x44>
                case 'n':  *output_ptr = '\n'; break;
 8014702:	210a      	movs	r1, #10
 8014704:	e7dc      	b.n	80146c0 <get_quoted_string.constprop.0+0xcc>
                case 'r':  *output_ptr = '\r'; break;
 8014706:	210d      	movs	r1, #13
 8014708:	e7da      	b.n	80146c0 <get_quoted_string.constprop.0+0xcc>
                case 't':  *output_ptr = '\t'; break;
 801470a:	2109      	movs	r1, #9
 801470c:	e7d8      	b.n	80146c0 <get_quoted_string.constprop.0+0xcc>
    unprocessed_ptr++; /* skips u */
 801470e:	f106 0902 	add.w	r9, r6, #2
    parse_succeeded = parse_utf16_hex(unprocessed_ptr, &cp);
 8014712:	a902      	add	r1, sp, #8
 8014714:	4648      	mov	r0, r9
 8014716:	f7ff fe1c 	bl	8014352 <parse_utf16_hex>
    if (!parse_succeeded) {
 801471a:	2800      	cmp	r0, #0
 801471c:	d0c9      	beq.n	80146b2 <get_quoted_string.constprop.0+0xbe>
    if (cp < 0x80) {
 801471e:	9d02      	ldr	r5, [sp, #8]
 8014720:	2d7f      	cmp	r5, #127	; 0x7f
 8014722:	d803      	bhi.n	801472c <get_quoted_string.constprop.0+0x138>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 8014724:	7025      	strb	r5, [r4, #0]
    unprocessed_ptr += 3;
 8014726:	f109 0203 	add.w	r2, r9, #3
    return JSONSuccess;
 801472a:	e7e7      	b.n	80146fc <get_quoted_string.constprop.0+0x108>
    } else if (cp < 0x800) {
 801472c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8014730:	d20b      	bcs.n	801474a <get_quoted_string.constprop.0+0x156>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 8014732:	09ad      	lsrs	r5, r5, #6
 8014734:	f065 053f 	orn	r5, r5, #63	; 0x3f
 8014738:	7025      	strb	r5, [r4, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 801473a:	9902      	ldr	r1, [sp, #8]
 801473c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8014740:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8014744:	f804 1f01 	strb.w	r1, [r4, #1]!
        processed_ptr += 1;
 8014748:	e7ed      	b.n	8014726 <get_quoted_string.constprop.0+0x132>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 801474a:	f5a5 4158 	sub.w	r1, r5, #55296	; 0xd800
 801474e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8014752:	d312      	bcc.n	801477a <get_quoted_string.constprop.0+0x186>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 8014754:	f3c5 3503 	ubfx	r5, r5, #12, #4
 8014758:	f065 051f 	orn	r5, r5, #31
 801475c:	7025      	strb	r5, [r4, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 801475e:	9902      	ldr	r1, [sp, #8]
 8014760:	f3c1 1185 	ubfx	r1, r1, #6, #6
 8014764:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8014768:	7061      	strb	r1, [r4, #1]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 801476a:	9902      	ldr	r1, [sp, #8]
 801476c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8014770:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8014774:	f804 1f02 	strb.w	r1, [r4, #2]!
        processed_ptr += 2;
 8014778:	e7d5      	b.n	8014726 <get_quoted_string.constprop.0+0x132>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 801477a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801477e:	d298      	bcs.n	80146b2 <get_quoted_string.constprop.0+0xbe>
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 8014780:	79b2      	ldrb	r2, [r6, #6]
 8014782:	2a5c      	cmp	r2, #92	; 0x5c
 8014784:	d195      	bne.n	80146b2 <get_quoted_string.constprop.0+0xbe>
 8014786:	79f1      	ldrb	r1, [r6, #7]
 8014788:	2975      	cmp	r1, #117	; 0x75
 801478a:	f106 0908 	add.w	r9, r6, #8
 801478e:	d190      	bne.n	80146b2 <get_quoted_string.constprop.0+0xbe>
        parse_succeeded = parse_utf16_hex(unprocessed_ptr, &trail);
 8014790:	a903      	add	r1, sp, #12
 8014792:	4648      	mov	r0, r9
 8014794:	f7ff fddd 	bl	8014352 <parse_utf16_hex>
        if (!parse_succeeded || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 8014798:	2800      	cmp	r0, #0
 801479a:	d08a      	beq.n	80146b2 <get_quoted_string.constprop.0+0xbe>
 801479c:	9903      	ldr	r1, [sp, #12]
 801479e:	f5a1 405c 	sub.w	r0, r1, #56320	; 0xdc00
 80147a2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80147a6:	d284      	bcs.n	80146b2 <get_quoted_string.constprop.0+0xbe>
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 80147a8:	4b14      	ldr	r3, [pc, #80]	; (80147fc <get_quoted_string.constprop.0+0x208>)
 80147aa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80147ae:	ea03 2585 	and.w	r5, r3, r5, lsl #10
 80147b2:	430d      	orrs	r5, r1
 80147b4:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 80147b8:	9502      	str	r5, [sp, #8]
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 80147ba:	0cad      	lsrs	r5, r5, #18
 80147bc:	f065 050f 	orn	r5, r5, #15
 80147c0:	7025      	strb	r5, [r4, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 80147c2:	9902      	ldr	r1, [sp, #8]
 80147c4:	f3c1 3105 	ubfx	r1, r1, #12, #6
 80147c8:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80147cc:	7061      	strb	r1, [r4, #1]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 80147ce:	9902      	ldr	r1, [sp, #8]
 80147d0:	f3c1 1185 	ubfx	r1, r1, #6, #6
 80147d4:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80147d8:	70a1      	strb	r1, [r4, #2]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 80147da:	9902      	ldr	r1, [sp, #8]
 80147dc:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80147e0:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80147e4:	f804 1f03 	strb.w	r1, [r4, #3]!
        processed_ptr += 3;
 80147e8:	e79d      	b.n	8014726 <get_quoted_string.constprop.0+0x132>
        } else if ((unsigned char)*input_ptr < 0x20) {
 80147ea:	2a1f      	cmp	r2, #31
 80147ec:	f67f af61 	bls.w	80146b2 <get_quoted_string.constprop.0+0xbe>
            *output_ptr = *input_ptr;
 80147f0:	7022      	strb	r2, [r4, #0]
 80147f2:	4632      	mov	r2, r6
 80147f4:	e782      	b.n	80146fc <get_quoted_string.constprop.0+0x108>
 80147f6:	bf00      	nop
 80147f8:	200004f8 	.word	0x200004f8
 80147fc:	000ffc00 	.word	0x000ffc00

08014800 <json_object_get_value>:
JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
 8014800:	b513      	push	{r0, r1, r4, lr}
    if (object == NULL || name == NULL) {
 8014802:	4604      	mov	r4, r0
 8014804:	b160      	cbz	r0, 8014820 <json_object_get_value+0x20>
 8014806:	b159      	cbz	r1, 8014820 <json_object_get_value+0x20>
    return json_object_getn_value(object, name, strlen(name));
 8014808:	4608      	mov	r0, r1
 801480a:	9101      	str	r1, [sp, #4]
 801480c:	f7ef fd62 	bl	80042d4 <strlen>
 8014810:	9901      	ldr	r1, [sp, #4]
 8014812:	4602      	mov	r2, r0
 8014814:	4620      	mov	r0, r4
}
 8014816:	b002      	add	sp, #8
 8014818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return json_object_getn_value(object, name, strlen(name));
 801481c:	f7ff bd12 	b.w	8014244 <json_object_getn_value>
}
 8014820:	2000      	movs	r0, #0
 8014822:	b002      	add	sp, #8
 8014824:	bd10      	pop	{r4, pc}

08014826 <json_object_get_name>:
    if (object == NULL || index >= json_object_get_count(object)) {
 8014826:	b138      	cbz	r0, 8014838 <json_object_get_name+0x12>
 8014828:	68c3      	ldr	r3, [r0, #12]
 801482a:	428b      	cmp	r3, r1
 801482c:	d903      	bls.n	8014836 <json_object_get_name+0x10>
    return object->names[index];
 801482e:	6843      	ldr	r3, [r0, #4]
 8014830:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8014834:	4770      	bx	lr
        return NULL;
 8014836:	2000      	movs	r0, #0
}
 8014838:	4770      	bx	lr

0801483a <json_array_get_value>:
    if (array == NULL || index >= json_array_get_count(array)) {
 801483a:	b138      	cbz	r0, 801484c <json_array_get_value+0x12>
 801483c:	6883      	ldr	r3, [r0, #8]
 801483e:	428b      	cmp	r3, r1
 8014840:	d903      	bls.n	801484a <json_array_get_value+0x10>
    return array->items[index];
 8014842:	6843      	ldr	r3, [r0, #4]
 8014844:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8014848:	4770      	bx	lr
        return NULL;
 801484a:	2000      	movs	r0, #0
}
 801484c:	4770      	bx	lr

0801484e <json_value_get_object>:
    return value ? value->type : JSONError;
 801484e:	b128      	cbz	r0, 801485c <json_value_get_object+0xe>
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8014850:	6843      	ldr	r3, [r0, #4]
 8014852:	2b04      	cmp	r3, #4
 8014854:	d101      	bne.n	801485a <json_value_get_object+0xc>
 8014856:	6880      	ldr	r0, [r0, #8]
 8014858:	4770      	bx	lr
 801485a:	2000      	movs	r0, #0
}
 801485c:	4770      	bx	lr

0801485e <json_object_dotget_value>:
JSON_Value * json_object_dotget_value(const JSON_Object *object, const char *name) {
 801485e:	b570      	push	{r4, r5, r6, lr}
 8014860:	4605      	mov	r5, r0
 8014862:	460c      	mov	r4, r1
    const char *dot_position = strchr(name, '.');
 8014864:	212e      	movs	r1, #46	; 0x2e
 8014866:	4620      	mov	r0, r4
 8014868:	f008 fac9 	bl	801cdfe <strchr>
    if (!dot_position) {
 801486c:	4606      	mov	r6, r0
 801486e:	b928      	cbnz	r0, 801487c <json_object_dotget_value+0x1e>
        return json_object_get_value(object, name);
 8014870:	4621      	mov	r1, r4
 8014872:	4628      	mov	r0, r5
}
 8014874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return json_object_get_value(object, name);
 8014878:	f7ff bfc2 	b.w	8014800 <json_object_get_value>
    object = json_value_get_object(json_object_getn_value(object, name, dot_position - name));
 801487c:	1b02      	subs	r2, r0, r4
 801487e:	4621      	mov	r1, r4
 8014880:	4628      	mov	r0, r5
 8014882:	f7ff fcdf 	bl	8014244 <json_object_getn_value>
 8014886:	f7ff ffe2 	bl	801484e <json_value_get_object>
    return json_object_dotget_value(object, dot_position + 1);
 801488a:	1c74      	adds	r4, r6, #1
    object = json_value_get_object(json_object_getn_value(object, name, dot_position - name));
 801488c:	4605      	mov	r5, r0
    return json_object_dotget_value(object, dot_position + 1);
 801488e:	e7e9      	b.n	8014864 <json_object_dotget_value+0x6>

08014890 <json_object_dothas_value>:
int json_object_dothas_value (const JSON_Object *object, const char *name) {
 8014890:	b508      	push	{r3, lr}
    return json_object_dotget_value(object, name) != NULL;
 8014892:	f7ff ffe4 	bl	801485e <json_object_dotget_value>
}
 8014896:	3800      	subs	r0, #0
 8014898:	bf18      	it	ne
 801489a:	2001      	movne	r0, #1
 801489c:	bd08      	pop	{r3, pc}

0801489e <json_object_dotget_object>:
JSON_Object * json_object_dotget_object(const JSON_Object *object, const char *name) {
 801489e:	b508      	push	{r3, lr}
    return json_value_get_object(json_object_dotget_value(object, name));
 80148a0:	f7ff ffdd 	bl	801485e <json_object_dotget_value>
}
 80148a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return json_value_get_object(json_object_dotget_value(object, name));
 80148a8:	f7ff bfd1 	b.w	801484e <json_value_get_object>

080148ac <json_value_get_array>:
    return value ? value->type : JSONError;
 80148ac:	b128      	cbz	r0, 80148ba <json_value_get_array+0xe>
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 80148ae:	6843      	ldr	r3, [r0, #4]
 80148b0:	2b05      	cmp	r3, #5
 80148b2:	d101      	bne.n	80148b8 <json_value_get_array+0xc>
 80148b4:	6880      	ldr	r0, [r0, #8]
 80148b6:	4770      	bx	lr
 80148b8:	2000      	movs	r0, #0
}
 80148ba:	4770      	bx	lr

080148bc <json_object_dotget_array>:
JSON_Array * json_object_dotget_array(const JSON_Object *object, const char *name) {
 80148bc:	b508      	push	{r3, lr}
    return json_value_get_array(json_object_dotget_value(object, name));
 80148be:	f7ff ffce 	bl	801485e <json_object_dotget_value>
}
 80148c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return json_value_get_array(json_object_dotget_value(object, name));
 80148c6:	f7ff bff1 	b.w	80148ac <json_value_get_array>

080148ca <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 80148ca:	b508      	push	{r3, lr}
    const JSON_String *str = json_value_get_string_desc(value);
 80148cc:	f7ff fc22 	bl	8014114 <json_value_get_string_desc>
    return str ? str->chars : NULL;
 80148d0:	b100      	cbz	r0, 80148d4 <json_value_get_string+0xa>
 80148d2:	6800      	ldr	r0, [r0, #0]
}
 80148d4:	bd08      	pop	{r3, pc}

080148d6 <json_object_dotget_string>:
const char * json_object_dotget_string(const JSON_Object *object, const char *name) {
 80148d6:	b508      	push	{r3, lr}
    return json_value_get_string(json_object_dotget_value(object, name));
 80148d8:	f7ff ffc1 	bl	801485e <json_object_dotget_value>
}
 80148dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return json_value_get_string(json_object_dotget_value(object, name));
 80148e0:	f7ff bff3 	b.w	80148ca <json_value_get_string>

080148e4 <json_value_get_string_len>:

size_t json_value_get_string_len(const JSON_Value *value) {
 80148e4:	b508      	push	{r3, lr}
    const JSON_String *str = json_value_get_string_desc(value);
 80148e6:	f7ff fc15 	bl	8014114 <json_value_get_string_desc>
    return str ? str->length : 0;
 80148ea:	b100      	cbz	r0, 80148ee <json_value_get_string_len+0xa>
 80148ec:	6840      	ldr	r0, [r0, #4]
}
 80148ee:	bd08      	pop	{r3, pc}

080148f0 <json_value_get_number>:
    return value ? value->type : JSONError;
 80148f0:	b128      	cbz	r0, 80148fe <json_value_get_number+0xe>

double json_value_get_number(const JSON_Value *value) {
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 80148f2:	6843      	ldr	r3, [r0, #4]
 80148f4:	2b03      	cmp	r3, #3
 80148f6:	d102      	bne.n	80148fe <json_value_get_number+0xe>
 80148f8:	ed90 0b02 	vldr	d0, [r0, #8]
 80148fc:	4770      	bx	lr
 80148fe:	ed9f 0b02 	vldr	d0, [pc, #8]	; 8014908 <json_value_get_number+0x18>
}
 8014902:	4770      	bx	lr
 8014904:	f3af 8000 	nop.w
	...

08014910 <json_object_dotget_number>:
double json_object_dotget_number(const JSON_Object *object, const char *name) {
 8014910:	b508      	push	{r3, lr}
    return json_value_get_number(json_object_dotget_value(object, name));
 8014912:	f7ff ffa4 	bl	801485e <json_object_dotget_value>
}
 8014916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return json_value_get_number(json_object_dotget_value(object, name));
 801491a:	f7ff bfe9 	b.w	80148f0 <json_value_get_number>

0801491e <json_value_get_boolean>:
    return value ? value->type : JSONError;
 801491e:	b120      	cbz	r0, 801492a <json_value_get_boolean+0xc>

int json_value_get_boolean(const JSON_Value *value) {
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 8014920:	6843      	ldr	r3, [r0, #4]
 8014922:	2b06      	cmp	r3, #6
 8014924:	d101      	bne.n	801492a <json_value_get_boolean+0xc>
 8014926:	6880      	ldr	r0, [r0, #8]
 8014928:	4770      	bx	lr
 801492a:	f04f 30ff 	mov.w	r0, #4294967295
}
 801492e:	4770      	bx	lr

08014930 <json_serialize_to_buffer_r>:
{
 8014930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014934:	b085      	sub	sp, #20
 8014936:	461e      	mov	r6, r3
 8014938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801493a:	9303      	str	r3, [sp, #12]
 801493c:	4693      	mov	fp, r2
 801493e:	460c      	mov	r4, r1
    return value ? value->type : JSONError;
 8014940:	4602      	mov	r2, r0
 8014942:	b910      	cbnz	r0, 801494a <json_serialize_to_buffer_r+0x1a>
    switch (json_value_get_type(value)) {
 8014944:	f04f 30ff 	mov.w	r0, #4294967295
 8014948:	e071      	b.n	8014a2e <json_serialize_to_buffer_r+0xfe>
 801494a:	6843      	ldr	r3, [r0, #4]
 801494c:	3b01      	subs	r3, #1
 801494e:	2b05      	cmp	r3, #5
 8014950:	d8f8      	bhi.n	8014944 <json_serialize_to_buffer_r+0x14>
 8014952:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014956:	0137      	.short	0x0137
 8014958:	0129010e 	.word	0x0129010e
 801495c:	00060071 	.word	0x00060071
 8014960:	011f      	.short	0x011f
            array = json_value_get_array(value);
 8014962:	f7ff ffa3 	bl	80148ac <json_value_get_array>
    return array ? array->count : 0;
 8014966:	4607      	mov	r7, r0
 8014968:	2800      	cmp	r0, #0
 801496a:	d063      	beq.n	8014a34 <json_serialize_to_buffer_r+0x104>
 801496c:	f8d0 9008 	ldr.w	r9, [r0, #8]
            APPEND_STRING("[");
 8014970:	4995      	ldr	r1, [pc, #596]	; (8014bc8 <json_serialize_to_buffer_r+0x298>)
 8014972:	4620      	mov	r0, r4
 8014974:	f7ff fd1a 	bl	80143ac <append_string>
 8014978:	1e05      	subs	r5, r0, #0
 801497a:	dbe3      	blt.n	8014944 <json_serialize_to_buffer_r+0x14>
 801497c:	b104      	cbz	r4, 8014980 <json_serialize_to_buffer_r+0x50>
 801497e:	442c      	add	r4, r5
            if (count > 0 && is_pretty) {
 8014980:	f1b9 0f00 	cmp.w	r9, #0
 8014984:	d04c      	beq.n	8014a20 <json_serialize_to_buffer_r+0xf0>
 8014986:	b146      	cbz	r6, 801499a <json_serialize_to_buffer_r+0x6a>
                APPEND_STRING("\n");
 8014988:	4990      	ldr	r1, [pc, #576]	; (8014bcc <json_serialize_to_buffer_r+0x29c>)
 801498a:	4620      	mov	r0, r4
 801498c:	f7ff fd0e 	bl	80143ac <append_string>
 8014990:	2800      	cmp	r0, #0
 8014992:	dbd7      	blt.n	8014944 <json_serialize_to_buffer_r+0x14>
 8014994:	b104      	cbz	r4, 8014998 <json_serialize_to_buffer_r+0x68>
 8014996:	4404      	add	r4, r0
 8014998:	4405      	add	r5, r0
    return array ? array->count : 0;
 801499a:	f04f 0800 	mov.w	r8, #0
                    APPEND_INDENT(level+1);
 801499e:	f10b 0a01 	add.w	sl, fp, #1
                if (is_pretty) {
 80149a2:	b146      	cbz	r6, 80149b6 <json_serialize_to_buffer_r+0x86>
                    APPEND_INDENT(level+1);
 80149a4:	4651      	mov	r1, sl
 80149a6:	4620      	mov	r0, r4
 80149a8:	f7ff fd0a 	bl	80143c0 <append_indent>
 80149ac:	2800      	cmp	r0, #0
 80149ae:	dbc9      	blt.n	8014944 <json_serialize_to_buffer_r+0x14>
 80149b0:	b104      	cbz	r4, 80149b4 <json_serialize_to_buffer_r+0x84>
 80149b2:	4404      	add	r4, r0
 80149b4:	4405      	add	r5, r0
                temp_value = json_array_get_value(array, i);
 80149b6:	4641      	mov	r1, r8
 80149b8:	4638      	mov	r0, r7
 80149ba:	f7ff ff3e 	bl	801483a <json_array_get_value>
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 80149be:	9b03      	ldr	r3, [sp, #12]
 80149c0:	9300      	str	r3, [sp, #0]
 80149c2:	4652      	mov	r2, sl
 80149c4:	4633      	mov	r3, r6
 80149c6:	4621      	mov	r1, r4
 80149c8:	f7ff ffb2 	bl	8014930 <json_serialize_to_buffer_r>
                if (written < 0) {
 80149cc:	2800      	cmp	r0, #0
 80149ce:	dbb9      	blt.n	8014944 <json_serialize_to_buffer_r+0x14>
                if (buf != NULL) {
 80149d0:	b104      	cbz	r4, 80149d4 <json_serialize_to_buffer_r+0xa4>
                    buf += written;
 80149d2:	4404      	add	r4, r0
                if (i < (count - 1)) {
 80149d4:	f109 33ff 	add.w	r3, r9, #4294967295
 80149d8:	4543      	cmp	r3, r8
                written_total += written;
 80149da:	4405      	add	r5, r0
                if (i < (count - 1)) {
 80149dc:	d908      	bls.n	80149f0 <json_serialize_to_buffer_r+0xc0>
                    APPEND_STRING(",");
 80149de:	497c      	ldr	r1, [pc, #496]	; (8014bd0 <json_serialize_to_buffer_r+0x2a0>)
 80149e0:	4620      	mov	r0, r4
 80149e2:	f7ff fce3 	bl	80143ac <append_string>
 80149e6:	2800      	cmp	r0, #0
 80149e8:	dbac      	blt.n	8014944 <json_serialize_to_buffer_r+0x14>
 80149ea:	b104      	cbz	r4, 80149ee <json_serialize_to_buffer_r+0xbe>
 80149ec:	4404      	add	r4, r0
 80149ee:	4405      	add	r5, r0
                if (is_pretty) {
 80149f0:	b146      	cbz	r6, 8014a04 <json_serialize_to_buffer_r+0xd4>
                    APPEND_STRING("\n");
 80149f2:	4976      	ldr	r1, [pc, #472]	; (8014bcc <json_serialize_to_buffer_r+0x29c>)
 80149f4:	4620      	mov	r0, r4
 80149f6:	f7ff fcd9 	bl	80143ac <append_string>
 80149fa:	2800      	cmp	r0, #0
 80149fc:	dba2      	blt.n	8014944 <json_serialize_to_buffer_r+0x14>
 80149fe:	b104      	cbz	r4, 8014a02 <json_serialize_to_buffer_r+0xd2>
 8014a00:	4404      	add	r4, r0
 8014a02:	4405      	add	r5, r0
            for (i = 0; i < count; i++) {
 8014a04:	f108 0801 	add.w	r8, r8, #1
 8014a08:	45c8      	cmp	r8, r9
 8014a0a:	d1ca      	bne.n	80149a2 <json_serialize_to_buffer_r+0x72>
            if (count > 0 && is_pretty) {
 8014a0c:	b146      	cbz	r6, 8014a20 <json_serialize_to_buffer_r+0xf0>
                APPEND_INDENT(level);
 8014a0e:	4659      	mov	r1, fp
 8014a10:	4620      	mov	r0, r4
 8014a12:	f7ff fcd5 	bl	80143c0 <append_indent>
 8014a16:	2800      	cmp	r0, #0
 8014a18:	db94      	blt.n	8014944 <json_serialize_to_buffer_r+0x14>
 8014a1a:	b104      	cbz	r4, 8014a1e <json_serialize_to_buffer_r+0xee>
 8014a1c:	4404      	add	r4, r0
 8014a1e:	4405      	add	r5, r0
            APPEND_STRING("]");
 8014a20:	496c      	ldr	r1, [pc, #432]	; (8014bd4 <json_serialize_to_buffer_r+0x2a4>)
 8014a22:	4620      	mov	r0, r4
 8014a24:	f7ff fcc2 	bl	80143ac <append_string>
 8014a28:	2800      	cmp	r0, #0
 8014a2a:	db8b      	blt.n	8014944 <json_serialize_to_buffer_r+0x14>
 8014a2c:	4428      	add	r0, r5
}
 8014a2e:	b005      	add	sp, #20
 8014a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return array ? array->count : 0;
 8014a34:	4681      	mov	r9, r0
 8014a36:	e79b      	b.n	8014970 <json_serialize_to_buffer_r+0x40>
            object = json_value_get_object(value);
 8014a38:	f7ff ff09 	bl	801484e <json_value_get_object>
    return object ? object->count : 0;
 8014a3c:	4605      	mov	r5, r0
 8014a3e:	2800      	cmp	r0, #0
 8014a40:	f000 8095 	beq.w	8014b6e <json_serialize_to_buffer_r+0x23e>
 8014a44:	f8d0 a00c 	ldr.w	sl, [r0, #12]
            APPEND_STRING("{");
 8014a48:	4963      	ldr	r1, [pc, #396]	; (8014bd8 <json_serialize_to_buffer_r+0x2a8>)
 8014a4a:	4620      	mov	r0, r4
 8014a4c:	f7ff fcae 	bl	80143ac <append_string>
 8014a50:	1e07      	subs	r7, r0, #0
 8014a52:	f6ff af77 	blt.w	8014944 <json_serialize_to_buffer_r+0x14>
 8014a56:	b104      	cbz	r4, 8014a5a <json_serialize_to_buffer_r+0x12a>
 8014a58:	443c      	add	r4, r7
            if (count > 0 && is_pretty) {
 8014a5a:	f1ba 0f00 	cmp.w	sl, #0
 8014a5e:	d07d      	beq.n	8014b5c <json_serialize_to_buffer_r+0x22c>
 8014a60:	b14e      	cbz	r6, 8014a76 <json_serialize_to_buffer_r+0x146>
                APPEND_STRING("\n");
 8014a62:	495a      	ldr	r1, [pc, #360]	; (8014bcc <json_serialize_to_buffer_r+0x29c>)
 8014a64:	4620      	mov	r0, r4
 8014a66:	f7ff fca1 	bl	80143ac <append_string>
 8014a6a:	2800      	cmp	r0, #0
 8014a6c:	f6ff af6a 	blt.w	8014944 <json_serialize_to_buffer_r+0x14>
 8014a70:	b104      	cbz	r4, 8014a74 <json_serialize_to_buffer_r+0x144>
 8014a72:	4404      	add	r4, r0
 8014a74:	4407      	add	r7, r0
    return object ? object->count : 0;
 8014a76:	f04f 0900 	mov.w	r9, #0
                key = json_object_get_name(object, i);
 8014a7a:	4649      	mov	r1, r9
 8014a7c:	4628      	mov	r0, r5
 8014a7e:	f7ff fed2 	bl	8014826 <json_object_get_name>
                if (key == NULL) {
 8014a82:	4680      	mov	r8, r0
 8014a84:	2800      	cmp	r0, #0
 8014a86:	f43f af5d 	beq.w	8014944 <json_serialize_to_buffer_r+0x14>
                if (is_pretty) {
 8014a8a:	b156      	cbz	r6, 8014aa2 <json_serialize_to_buffer_r+0x172>
                    APPEND_INDENT(level+1);
 8014a8c:	f10b 0101 	add.w	r1, fp, #1
 8014a90:	4620      	mov	r0, r4
 8014a92:	f7ff fc95 	bl	80143c0 <append_indent>
 8014a96:	2800      	cmp	r0, #0
 8014a98:	f6ff af54 	blt.w	8014944 <json_serialize_to_buffer_r+0x14>
 8014a9c:	b104      	cbz	r4, 8014aa0 <json_serialize_to_buffer_r+0x170>
 8014a9e:	4404      	add	r4, r0
 8014aa0:	4407      	add	r7, r0
                written = json_serialize_string(key, strlen(key), buf);
 8014aa2:	4640      	mov	r0, r8
 8014aa4:	f7ef fc16 	bl	80042d4 <strlen>
 8014aa8:	4622      	mov	r2, r4
 8014aaa:	4601      	mov	r1, r0
 8014aac:	4640      	mov	r0, r8
 8014aae:	f7ff fca5 	bl	80143fc <json_serialize_string>
                if (written < 0) {
 8014ab2:	2800      	cmp	r0, #0
 8014ab4:	f6ff af46 	blt.w	8014944 <json_serialize_to_buffer_r+0x14>
                if (buf != NULL) {
 8014ab8:	b104      	cbz	r4, 8014abc <json_serialize_to_buffer_r+0x18c>
                    buf += written;
 8014aba:	4404      	add	r4, r0
                APPEND_STRING(":");
 8014abc:	4947      	ldr	r1, [pc, #284]	; (8014bdc <json_serialize_to_buffer_r+0x2ac>)
                written_total += written;
 8014abe:	4407      	add	r7, r0
                APPEND_STRING(":");
 8014ac0:	4620      	mov	r0, r4
 8014ac2:	f7ff fc73 	bl	80143ac <append_string>
 8014ac6:	2800      	cmp	r0, #0
 8014ac8:	f6ff af3c 	blt.w	8014944 <json_serialize_to_buffer_r+0x14>
 8014acc:	b104      	cbz	r4, 8014ad0 <json_serialize_to_buffer_r+0x1a0>
 8014ace:	4404      	add	r4, r0
 8014ad0:	4407      	add	r7, r0
                if (is_pretty) {
 8014ad2:	b14e      	cbz	r6, 8014ae8 <json_serialize_to_buffer_r+0x1b8>
                    APPEND_STRING(" ");
 8014ad4:	4942      	ldr	r1, [pc, #264]	; (8014be0 <json_serialize_to_buffer_r+0x2b0>)
 8014ad6:	4620      	mov	r0, r4
 8014ad8:	f7ff fc68 	bl	80143ac <append_string>
 8014adc:	2800      	cmp	r0, #0
 8014ade:	f6ff af31 	blt.w	8014944 <json_serialize_to_buffer_r+0x14>
 8014ae2:	b104      	cbz	r4, 8014ae6 <json_serialize_to_buffer_r+0x1b6>
 8014ae4:	4404      	add	r4, r0
 8014ae6:	4407      	add	r7, r0
                temp_value = json_object_get_value(object, key);
 8014ae8:	4641      	mov	r1, r8
 8014aea:	4628      	mov	r0, r5
 8014aec:	f7ff fe88 	bl	8014800 <json_object_get_value>
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8014af0:	9b03      	ldr	r3, [sp, #12]
 8014af2:	9300      	str	r3, [sp, #0]
 8014af4:	f10b 0201 	add.w	r2, fp, #1
 8014af8:	4633      	mov	r3, r6
 8014afa:	4621      	mov	r1, r4
 8014afc:	f7ff ff18 	bl	8014930 <json_serialize_to_buffer_r>
                if (written < 0) {
 8014b00:	2800      	cmp	r0, #0
 8014b02:	f6ff af1f 	blt.w	8014944 <json_serialize_to_buffer_r+0x14>
                if (buf != NULL) {
 8014b06:	b104      	cbz	r4, 8014b0a <json_serialize_to_buffer_r+0x1da>
                    buf += written;
 8014b08:	4404      	add	r4, r0
                if (i < (count - 1)) {
 8014b0a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014b0e:	454b      	cmp	r3, r9
                written_total += written;
 8014b10:	4407      	add	r7, r0
                if (i < (count - 1)) {
 8014b12:	d909      	bls.n	8014b28 <json_serialize_to_buffer_r+0x1f8>
                    APPEND_STRING(",");
 8014b14:	492e      	ldr	r1, [pc, #184]	; (8014bd0 <json_serialize_to_buffer_r+0x2a0>)
 8014b16:	4620      	mov	r0, r4
 8014b18:	f7ff fc48 	bl	80143ac <append_string>
 8014b1c:	2800      	cmp	r0, #0
 8014b1e:	f6ff af11 	blt.w	8014944 <json_serialize_to_buffer_r+0x14>
 8014b22:	b104      	cbz	r4, 8014b26 <json_serialize_to_buffer_r+0x1f6>
 8014b24:	4404      	add	r4, r0
 8014b26:	4407      	add	r7, r0
                if (is_pretty) {
 8014b28:	b14e      	cbz	r6, 8014b3e <json_serialize_to_buffer_r+0x20e>
                    APPEND_STRING("\n");
 8014b2a:	4928      	ldr	r1, [pc, #160]	; (8014bcc <json_serialize_to_buffer_r+0x29c>)
 8014b2c:	4620      	mov	r0, r4
 8014b2e:	f7ff fc3d 	bl	80143ac <append_string>
 8014b32:	2800      	cmp	r0, #0
 8014b34:	f6ff af06 	blt.w	8014944 <json_serialize_to_buffer_r+0x14>
 8014b38:	b104      	cbz	r4, 8014b3c <json_serialize_to_buffer_r+0x20c>
 8014b3a:	4404      	add	r4, r0
 8014b3c:	4407      	add	r7, r0
            for (i = 0; i < count; i++) {
 8014b3e:	f109 0901 	add.w	r9, r9, #1
 8014b42:	45ca      	cmp	sl, r9
 8014b44:	d199      	bne.n	8014a7a <json_serialize_to_buffer_r+0x14a>
            if (count > 0 && is_pretty) {
 8014b46:	b14e      	cbz	r6, 8014b5c <json_serialize_to_buffer_r+0x22c>
                APPEND_INDENT(level);
 8014b48:	4659      	mov	r1, fp
 8014b4a:	4620      	mov	r0, r4
 8014b4c:	f7ff fc38 	bl	80143c0 <append_indent>
 8014b50:	2800      	cmp	r0, #0
 8014b52:	f6ff aef7 	blt.w	8014944 <json_serialize_to_buffer_r+0x14>
 8014b56:	b104      	cbz	r4, 8014b5a <json_serialize_to_buffer_r+0x22a>
 8014b58:	4404      	add	r4, r0
 8014b5a:	4407      	add	r7, r0
            APPEND_STRING("}");
 8014b5c:	4921      	ldr	r1, [pc, #132]	; (8014be4 <json_serialize_to_buffer_r+0x2b4>)
 8014b5e:	4620      	mov	r0, r4
 8014b60:	f7ff fc24 	bl	80143ac <append_string>
 8014b64:	2800      	cmp	r0, #0
 8014b66:	f6ff aeed 	blt.w	8014944 <json_serialize_to_buffer_r+0x14>
 8014b6a:	4438      	add	r0, r7
            return written_total;
 8014b6c:	e75f      	b.n	8014a2e <json_serialize_to_buffer_r+0xfe>
    return object ? object->count : 0;
 8014b6e:	4682      	mov	sl, r0
 8014b70:	e76a      	b.n	8014a48 <json_serialize_to_buffer_r+0x118>
            string = json_value_get_string(value);
 8014b72:	f7ff feaa 	bl	80148ca <json_value_get_string>
            if (string == NULL) {
 8014b76:	4605      	mov	r5, r0
 8014b78:	2800      	cmp	r0, #0
 8014b7a:	f43f aee3 	beq.w	8014944 <json_serialize_to_buffer_r+0x14>
            len = json_value_get_string_len(value);
 8014b7e:	4610      	mov	r0, r2
 8014b80:	f7ff feb0 	bl	80148e4 <json_value_get_string_len>
            written = json_serialize_string(string, len, buf);
 8014b84:	4622      	mov	r2, r4
            len = json_value_get_string_len(value);
 8014b86:	4601      	mov	r1, r0
            written = json_serialize_string(string, len, buf);
 8014b88:	4628      	mov	r0, r5
 8014b8a:	f7ff fc37 	bl	80143fc <json_serialize_string>
            APPEND_STRING("null");
 8014b8e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8014b92:	e74c      	b.n	8014a2e <json_serialize_to_buffer_r+0xfe>
            if (json_value_get_boolean(value)) {
 8014b94:	f7ff fec3 	bl	801491e <json_value_get_boolean>
 8014b98:	b120      	cbz	r0, 8014ba4 <json_serialize_to_buffer_r+0x274>
                APPEND_STRING("true");
 8014b9a:	4913      	ldr	r1, [pc, #76]	; (8014be8 <json_serialize_to_buffer_r+0x2b8>)
            APPEND_STRING("null");
 8014b9c:	4620      	mov	r0, r4
 8014b9e:	f7ff fc05 	bl	80143ac <append_string>
 8014ba2:	e7f4      	b.n	8014b8e <json_serialize_to_buffer_r+0x25e>
                APPEND_STRING("false");
 8014ba4:	4911      	ldr	r1, [pc, #68]	; (8014bec <json_serialize_to_buffer_r+0x2bc>)
 8014ba6:	e7f9      	b.n	8014b9c <json_serialize_to_buffer_r+0x26c>
            num = json_value_get_number(value);
 8014ba8:	f7ff fea2 	bl	80148f0 <json_value_get_number>
            written = sprintf(num_buf, FLOAT_FORMAT, num);
 8014bac:	9803      	ldr	r0, [sp, #12]
 8014bae:	4910      	ldr	r1, [pc, #64]	; (8014bf0 <json_serialize_to_buffer_r+0x2c0>)
            num = json_value_get_number(value);
 8014bb0:	ec53 2b10 	vmov	r2, r3, d0
            written = sprintf(num_buf, FLOAT_FORMAT, num);
 8014bb4:	2c00      	cmp	r4, #0
 8014bb6:	bf18      	it	ne
 8014bb8:	4620      	movne	r0, r4
}
 8014bba:	b005      	add	sp, #20
 8014bbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            written = sprintf(num_buf, FLOAT_FORMAT, num);
 8014bc0:	f008 b8ba 	b.w	801cd38 <siprintf>
            APPEND_STRING("null");
 8014bc4:	490b      	ldr	r1, [pc, #44]	; (8014bf4 <json_serialize_to_buffer_r+0x2c4>)
 8014bc6:	e7e9      	b.n	8014b9c <json_serialize_to_buffer_r+0x26c>
 8014bc8:	08023dee 	.word	0x08023dee
 8014bcc:	08024f9f 	.word	0x08024f9f
 8014bd0:	080236ac 	.word	0x080236ac
 8014bd4:	08024422 	.word	0x08024422
 8014bd8:	08023df0 	.word	0x08023df0
 8014bdc:	08023df2 	.word	0x08023df2
 8014be0:	08023d17 	.word	0x08023d17
 8014be4:	08023df4 	.word	0x08023df4
 8014be8:	08023999 	.word	0x08023999
 8014bec:	0802399e 	.word	0x0802399e
 8014bf0:	08023df6 	.word	0x08023df6
 8014bf4:	08023dfd 	.word	0x08023dfd

08014bf8 <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 8014bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return value ? value->type : JSONError;
 8014bfc:	4604      	mov	r4, r0
 8014bfe:	b1c8      	cbz	r0, 8014c34 <json_value_free+0x3c>
 8014c00:	6843      	ldr	r3, [r0, #4]
    switch (json_value_get_type(value)) {
 8014c02:	2b04      	cmp	r3, #4
 8014c04:	d007      	beq.n	8014c16 <json_value_free+0x1e>
 8014c06:	2b05      	cmp	r3, #5
 8014c08:	d024      	beq.n	8014c54 <json_value_free+0x5c>
 8014c0a:	2b02      	cmp	r3, #2
 8014c0c:	d112      	bne.n	8014c34 <json_value_free+0x3c>
        case JSONObject:
            json_object_free(value->value.object);
            break;
        case JSONString:
            parson_free(value->value.string.chars);
 8014c0e:	4b1a      	ldr	r3, [pc, #104]	; (8014c78 <json_value_free+0x80>)
 8014c10:	6880      	ldr	r0, [r0, #8]
 8014c12:	685b      	ldr	r3, [r3, #4]
 8014c14:	e00d      	b.n	8014c32 <json_value_free+0x3a>
            json_object_free(value->value.object);
 8014c16:	6885      	ldr	r5, [r0, #8]
        parson_free(object->names[i]);
 8014c18:	4f17      	ldr	r7, [pc, #92]	; (8014c78 <json_value_free+0x80>)
    for (i = 0; i < object->count; i++) {
 8014c1a:	2600      	movs	r6, #0
 8014c1c:	68ea      	ldr	r2, [r5, #12]
        parson_free(object->names[i]);
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	6868      	ldr	r0, [r5, #4]
    for (i = 0; i < object->count; i++) {
 8014c22:	4296      	cmp	r6, r2
 8014c24:	d30c      	bcc.n	8014c40 <json_value_free+0x48>
    parson_free(object->names);
 8014c26:	4798      	blx	r3
    parson_free(object->values);
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	68a8      	ldr	r0, [r5, #8]
 8014c2c:	4798      	blx	r3
    parson_free(object);
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	4628      	mov	r0, r5
    parson_free(array);
 8014c32:	4798      	blx	r3
            json_array_free(value->value.array);
            break;
        default:
            break;
    }
    parson_free(value);
 8014c34:	4b10      	ldr	r3, [pc, #64]	; (8014c78 <json_value_free+0x80>)
 8014c36:	4620      	mov	r0, r4
 8014c38:	685b      	ldr	r3, [r3, #4]
}
 8014c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    parson_free(value);
 8014c3e:	4718      	bx	r3
        parson_free(object->names[i]);
 8014c40:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8014c44:	4798      	blx	r3
        json_value_free(object->values[i]);
 8014c46:	68ab      	ldr	r3, [r5, #8]
 8014c48:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014c4c:	f7ff ffd4 	bl	8014bf8 <json_value_free>
    for (i = 0; i < object->count; i++) {
 8014c50:	3601      	adds	r6, #1
 8014c52:	e7e3      	b.n	8014c1c <json_value_free+0x24>
            json_array_free(value->value.array);
 8014c54:	6886      	ldr	r6, [r0, #8]
    for (i = 0; i < array->count; i++) {
 8014c56:	2500      	movs	r5, #0
 8014c58:	e9d6 0301 	ldrd	r0, r3, [r6, #4]
 8014c5c:	429d      	cmp	r5, r3
 8014c5e:	d305      	bcc.n	8014c6c <json_value_free+0x74>
    parson_free(array->items);
 8014c60:	4d05      	ldr	r5, [pc, #20]	; (8014c78 <json_value_free+0x80>)
 8014c62:	686b      	ldr	r3, [r5, #4]
 8014c64:	4798      	blx	r3
    parson_free(array);
 8014c66:	686b      	ldr	r3, [r5, #4]
 8014c68:	4630      	mov	r0, r6
 8014c6a:	e7e2      	b.n	8014c32 <json_value_free+0x3a>
        json_value_free(array->items[i]);
 8014c6c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8014c70:	f7ff ffc2 	bl	8014bf8 <json_value_free>
    for (i = 0; i < array->count; i++) {
 8014c74:	3501      	adds	r5, #1
 8014c76:	e7ef      	b.n	8014c58 <json_value_free+0x60>
 8014c78:	200004f8 	.word	0x200004f8

08014c7c <json_object_remove_internal>:
static JSON_Status json_object_remove_internal(JSON_Object *object, const char *name, int free_value) {
 8014c7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c80:	460f      	mov	r7, r1
 8014c82:	4690      	mov	r8, r2
    if (object == NULL || json_object_get_value(object, name) == NULL) {
 8014c84:	4604      	mov	r4, r0
 8014c86:	b138      	cbz	r0, 8014c98 <json_object_remove_internal+0x1c>
 8014c88:	f7ff fdba 	bl	8014800 <json_object_get_value>
 8014c8c:	b120      	cbz	r0, 8014c98 <json_object_remove_internal+0x1c>
    return object ? object->count : 0;
 8014c8e:	f8d4 900c 	ldr.w	r9, [r4, #12]
    for (i = 0; i < json_object_get_count(object); i++) {
 8014c92:	2600      	movs	r6, #0
 8014c94:	454e      	cmp	r6, r9
 8014c96:	d102      	bne.n	8014c9e <json_object_remove_internal+0x22>
        return JSONFailure;
 8014c98:	f04f 35ff 	mov.w	r5, #4294967295
 8014c9c:	e027      	b.n	8014cee <json_object_remove_internal+0x72>
        if (strcmp(object->names[i], name) == 0) {
 8014c9e:	6863      	ldr	r3, [r4, #4]
 8014ca0:	f853 b026 	ldr.w	fp, [r3, r6, lsl #2]
 8014ca4:	4639      	mov	r1, r7
 8014ca6:	4658      	mov	r0, fp
 8014ca8:	f7ef fb0a 	bl	80042c0 <strcmp>
 8014cac:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8014cb0:	4605      	mov	r5, r0
 8014cb2:	b9f8      	cbnz	r0, 8014cf4 <json_object_remove_internal+0x78>
            parson_free(object->names[i]);
 8014cb4:	4b10      	ldr	r3, [pc, #64]	; (8014cf8 <json_object_remove_internal+0x7c>)
 8014cb6:	4658      	mov	r0, fp
 8014cb8:	685b      	ldr	r3, [r3, #4]
 8014cba:	4798      	blx	r3
            if (free_value) {
 8014cbc:	f1b8 0f00 	cmp.w	r8, #0
 8014cc0:	d004      	beq.n	8014ccc <json_object_remove_internal+0x50>
                json_value_free(object->values[i]);
 8014cc2:	68a3      	ldr	r3, [r4, #8]
 8014cc4:	f853 000a 	ldr.w	r0, [r3, sl]
 8014cc8:	f7ff ff96 	bl	8014bf8 <json_value_free>
    last_item_index = json_object_get_count(object) - 1;
 8014ccc:	f109 33ff 	add.w	r3, r9, #4294967295
            if (i != last_item_index) { /* Replace key value pair with one from the end */
 8014cd0:	429e      	cmp	r6, r3
 8014cd2:	d009      	beq.n	8014ce8 <json_object_remove_internal+0x6c>
                object->names[i] = object->names[last_item_index];
 8014cd4:	6862      	ldr	r2, [r4, #4]
 8014cd6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8014cda:	f842 100a 	str.w	r1, [r2, sl]
                object->values[i] = object->values[last_item_index];
 8014cde:	68a2      	ldr	r2, [r4, #8]
 8014ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ce4:	f842 300a 	str.w	r3, [r2, sl]
            object->count -= 1;
 8014ce8:	68e3      	ldr	r3, [r4, #12]
 8014cea:	3b01      	subs	r3, #1
 8014cec:	60e3      	str	r3, [r4, #12]
}
 8014cee:	4628      	mov	r0, r5
 8014cf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (i = 0; i < json_object_get_count(object); i++) {
 8014cf4:	3601      	adds	r6, #1
 8014cf6:	e7cd      	b.n	8014c94 <json_object_remove_internal+0x18>
 8014cf8:	200004f8 	.word	0x200004f8

08014cfc <json_object_dotremove_internal>:
static JSON_Status json_object_dotremove_internal(JSON_Object *object, const char *name, int free_value) {
 8014cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cfe:	4605      	mov	r5, r0
 8014d00:	460c      	mov	r4, r1
 8014d02:	4617      	mov	r7, r2
    const char *dot_pos = strchr(name, '.');
 8014d04:	212e      	movs	r1, #46	; 0x2e
 8014d06:	4620      	mov	r0, r4
 8014d08:	f008 f879 	bl	801cdfe <strchr>
    if (dot_pos == NULL) {
 8014d0c:	4606      	mov	r6, r0
 8014d0e:	b930      	cbnz	r0, 8014d1e <json_object_dotremove_internal+0x22>
        return json_object_remove_internal(object, name, free_value);
 8014d10:	463a      	mov	r2, r7
 8014d12:	4621      	mov	r1, r4
 8014d14:	4628      	mov	r0, r5
}
 8014d16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return json_object_remove_internal(object, name, free_value);
 8014d1a:	f7ff bfaf 	b.w	8014c7c <json_object_remove_internal>
    temp_value = json_object_getn_value(object, name, dot_pos - name);
 8014d1e:	1b02      	subs	r2, r0, r4
 8014d20:	4621      	mov	r1, r4
 8014d22:	4628      	mov	r0, r5
 8014d24:	f7ff fa8e 	bl	8014244 <json_object_getn_value>
    return value ? value->type : JSONError;
 8014d28:	b138      	cbz	r0, 8014d3a <json_object_dotremove_internal+0x3e>
    if (json_value_get_type(temp_value) != JSONObject) {
 8014d2a:	6843      	ldr	r3, [r0, #4]
 8014d2c:	2b04      	cmp	r3, #4
 8014d2e:	d104      	bne.n	8014d3a <json_object_dotremove_internal+0x3e>
    temp_object = json_value_get_object(temp_value);
 8014d30:	f7ff fd8d 	bl	801484e <json_value_get_object>
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
 8014d34:	1c74      	adds	r4, r6, #1
    temp_object = json_value_get_object(temp_value);
 8014d36:	4605      	mov	r5, r0
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
 8014d38:	e7e4      	b.n	8014d04 <json_object_dotremove_internal+0x8>
}
 8014d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8014d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014d40 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 8014d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8014d42:	4f0e      	ldr	r7, [pc, #56]	; (8014d7c <json_value_init_object+0x3c>)
 8014d44:	2010      	movs	r0, #16
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	4798      	blx	r3
    if (!new_value) {
 8014d4a:	4604      	mov	r4, r0
 8014d4c:	b168      	cbz	r0, 8014d6a <json_value_init_object+0x2a>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONObject;
 8014d4e:	2304      	movs	r3, #4
 8014d50:	2600      	movs	r6, #0
 8014d52:	e9c0 6300 	strd	r6, r3, [r0]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 8014d56:	683b      	ldr	r3, [r7, #0]
 8014d58:	2014      	movs	r0, #20
 8014d5a:	4798      	blx	r3
    if (new_obj == NULL) {
 8014d5c:	4605      	mov	r5, r0
 8014d5e:	b930      	cbnz	r0, 8014d6e <json_value_init_object+0x2e>
    new_value->value.object = json_object_init(new_value);
 8014d60:	60a0      	str	r0, [r4, #8]
    if (!new_value->value.object) {
        parson_free(new_value);
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	4620      	mov	r0, r4
 8014d66:	4798      	blx	r3
        return NULL;
 8014d68:	462c      	mov	r4, r5
    }
    return new_value;
}
 8014d6a:	4620      	mov	r0, r4
 8014d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    new_obj->names = (char**)NULL;
 8014d6e:	e9c0 4600 	strd	r4, r6, [r0]
    new_obj->count = 0;
 8014d72:	e9c0 6603 	strd	r6, r6, [r0, #12]
    new_obj->values = (JSON_Value**)NULL;
 8014d76:	6086      	str	r6, [r0, #8]
    new_value->value.object = json_object_init(new_value);
 8014d78:	60a0      	str	r0, [r4, #8]
    if (!new_value->value.object) {
 8014d7a:	e7f6      	b.n	8014d6a <json_value_init_object+0x2a>
 8014d7c:	200004f8 	.word	0x200004f8

08014d80 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
 8014d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8014d82:	4f0e      	ldr	r7, [pc, #56]	; (8014dbc <json_value_init_array+0x3c>)
 8014d84:	2010      	movs	r0, #16
 8014d86:	683b      	ldr	r3, [r7, #0]
 8014d88:	4798      	blx	r3
    if (!new_value) {
 8014d8a:	4604      	mov	r4, r0
 8014d8c:	b168      	cbz	r0, 8014daa <json_value_init_array+0x2a>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONArray;
 8014d8e:	2305      	movs	r3, #5
 8014d90:	2600      	movs	r6, #0
 8014d92:	e9c0 6300 	strd	r6, r3, [r0]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 8014d96:	683b      	ldr	r3, [r7, #0]
 8014d98:	2010      	movs	r0, #16
 8014d9a:	4798      	blx	r3
    if (new_array == NULL) {
 8014d9c:	4605      	mov	r5, r0
 8014d9e:	b930      	cbnz	r0, 8014dae <json_value_init_array+0x2e>
    new_value->value.array = json_array_init(new_value);
 8014da0:	60a0      	str	r0, [r4, #8]
    if (!new_value->value.array) {
        parson_free(new_value);
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	4620      	mov	r0, r4
 8014da6:	4798      	blx	r3
        return NULL;
 8014da8:	462c      	mov	r4, r5
    }
    return new_value;
}
 8014daa:	4620      	mov	r0, r4
 8014dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    new_array->items = (JSON_Value**)NULL;
 8014dae:	e9c0 4600 	strd	r4, r6, [r0]
    new_array->count = 0;
 8014db2:	e9c0 6602 	strd	r6, r6, [r0, #8]
    new_value->value.array = json_array_init(new_value);
 8014db6:	60a0      	str	r0, [r4, #8]
    if (!new_value->value.array) {
 8014db8:	e7f7      	b.n	8014daa <json_value_init_array+0x2a>
 8014dba:	bf00      	nop
 8014dbc:	200004f8 	.word	0x200004f8

08014dc0 <json_value_init_string_with_len>:
        return NULL;
    }
    return json_value_init_string_with_len(string, strlen(string));
}

JSON_Value * json_value_init_string_with_len(const char *string, size_t length) {
 8014dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    char *copy = NULL;
    JSON_Value *value;
    if (string == NULL) {
 8014dc2:	b918      	cbnz	r0, 8014dcc <json_value_init_string_with_len+0xc>
        return NULL;
 8014dc4:	2400      	movs	r4, #0
    value = json_value_init_string_no_copy(copy, length);
    if (value == NULL) {
        parson_free(copy);
    }
    return value;
}
 8014dc6:	4620      	mov	r0, r4
 8014dc8:	b003      	add	sp, #12
 8014dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const char *string_end =  string + string_len;
 8014dcc:	1845      	adds	r5, r0, r1
    while (string < string_end) {
 8014dce:	4604      	mov	r4, r0
 8014dd0:	42a5      	cmp	r5, r4
 8014dd2:	d810      	bhi.n	8014df6 <json_value_init_string_with_len+0x36>
    copy = parson_strndup(string, length);
 8014dd4:	9101      	str	r1, [sp, #4]
 8014dd6:	f7ff f9a5 	bl	8014124 <parson_strndup>
    if (copy == NULL) {
 8014dda:	9901      	ldr	r1, [sp, #4]
 8014ddc:	4605      	mov	r5, r0
 8014dde:	2800      	cmp	r0, #0
 8014de0:	d0f0      	beq.n	8014dc4 <json_value_init_string_with_len+0x4>
    value = json_value_init_string_no_copy(copy, length);
 8014de2:	f7ff f985 	bl	80140f0 <json_value_init_string_no_copy>
    if (value == NULL) {
 8014de6:	4604      	mov	r4, r0
 8014de8:	2800      	cmp	r0, #0
 8014dea:	d1ec      	bne.n	8014dc6 <json_value_init_string_with_len+0x6>
        parson_free(copy);
 8014dec:	4b3e      	ldr	r3, [pc, #248]	; (8014ee8 <json_value_init_string_with_len+0x128>)
 8014dee:	4628      	mov	r0, r5
 8014df0:	685b      	ldr	r3, [r3, #4]
 8014df2:	4798      	blx	r3
 8014df4:	e7e7      	b.n	8014dc6 <json_value_init_string_with_len+0x6>
    *len = num_bytes_in_utf8_sequence(string[0]);
 8014df6:	7823      	ldrb	r3, [r4, #0]
    if (c == 0xC0 || c == 0xC1 || c > 0xF4 || IS_CONT(c)) {
 8014df8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8014dfc:	b2d2      	uxtb	r2, r2
 8014dfe:	2a01      	cmp	r2, #1
 8014e00:	d9e0      	bls.n	8014dc4 <json_value_init_string_with_len+0x4>
 8014e02:	2bf4      	cmp	r3, #244	; 0xf4
 8014e04:	d8de      	bhi.n	8014dc4 <json_value_init_string_with_len+0x4>
 8014e06:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8014e0a:	2a80      	cmp	r2, #128	; 0x80
 8014e0c:	d0da      	beq.n	8014dc4 <json_value_init_string_with_len+0x4>
    } else if ((c & 0x80) == 0) {    /* 0xxxxxxx */
 8014e0e:	061a      	lsls	r2, r3, #24
 8014e10:	d530      	bpl.n	8014e74 <json_value_init_string_with_len+0xb4>
    } else if ((c & 0xE0) == 0xC0) { /* 110xxxxx */
 8014e12:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8014e16:	2ac0      	cmp	r2, #192	; 0xc0
 8014e18:	d02e      	beq.n	8014e78 <json_value_init_string_with_len+0xb8>
    } else if ((c & 0xF0) == 0xE0) { /* 1110xxxx */
 8014e1a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8014e1e:	2ae0      	cmp	r2, #224	; 0xe0
 8014e20:	d03e      	beq.n	8014ea0 <json_value_init_string_with_len+0xe0>
    } else if ((c & 0xF8) == 0xF0) { /* 11110xxx */
 8014e22:	f003 02f8 	and.w	r2, r3, #248	; 0xf8
 8014e26:	2af0      	cmp	r2, #240	; 0xf0
 8014e28:	d1cc      	bne.n	8014dc4 <json_value_init_string_with_len+0x4>
    } else if (*len == 4 && IS_CONT(string[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {
 8014e2a:	7867      	ldrb	r7, [r4, #1]
 8014e2c:	f007 02c0 	and.w	r2, r7, #192	; 0xc0
 8014e30:	2a80      	cmp	r2, #128	; 0x80
 8014e32:	d1c7      	bne.n	8014dc4 <json_value_init_string_with_len+0x4>
 8014e34:	78a6      	ldrb	r6, [r4, #2]
 8014e36:	f006 02c0 	and.w	r2, r6, #192	; 0xc0
 8014e3a:	2a80      	cmp	r2, #128	; 0x80
 8014e3c:	d1c2      	bne.n	8014dc4 <json_value_init_string_with_len+0x4>
 8014e3e:	78e2      	ldrb	r2, [r4, #3]
 8014e40:	f002 0cc0 	and.w	ip, r2, #192	; 0xc0
 8014e44:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 8014e48:	d1bc      	bne.n	8014dc4 <json_value_init_string_with_len+0x4>
        cp = string[0] & 0x7;
 8014e4a:	f003 0307 	and.w	r3, r3, #7
        cp = (cp << 6) | (string[1] & 0x3F);
 8014e4e:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 8014e52:	ea47 1383 	orr.w	r3, r7, r3, lsl #6
        cp = (cp << 6) | (string[2] & 0x3F);
 8014e56:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 8014e5a:	ea46 1683 	orr.w	r6, r6, r3, lsl #6
        cp = (cp << 6) | (string[3] & 0x3F);
 8014e5e:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8014e62:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8014e66:	2204      	movs	r2, #4
 8014e68:	e02f      	b.n	8014eca <json_value_init_string_with_len+0x10a>
    if (cp > 0x10FFFF) {
 8014e6a:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8014e6e:	d2a9      	bcs.n	8014dc4 <json_value_init_string_with_len+0x4>
        string += len;
 8014e70:	4414      	add	r4, r2
 8014e72:	e7ad      	b.n	8014dd0 <json_value_init_string_with_len+0x10>
        return 1;
 8014e74:	2201      	movs	r2, #1
 8014e76:	e7fb      	b.n	8014e70 <json_value_init_string_with_len+0xb0>
    } else if (*len == 2 && IS_CONT(string[1])) {
 8014e78:	7862      	ldrb	r2, [r4, #1]
 8014e7a:	f002 06c0 	and.w	r6, r2, #192	; 0xc0
 8014e7e:	2e80      	cmp	r6, #128	; 0x80
 8014e80:	d1a0      	bne.n	8014dc4 <json_value_init_string_with_len+0x4>
        cp = string[0] & 0x1F;
 8014e82:	f003 061f 	and.w	r6, r3, #31
        cp = (cp << 6) | (string[1] & 0x3F);
 8014e86:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8014e8a:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
    if ((cp < 0x80    && *len > 1) ||
 8014e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8014e90:	d998      	bls.n	8014dc4 <json_value_init_string_with_len+0x4>
 8014e92:	2202      	movs	r2, #2
    if (cp >= 0xD800 && cp <= 0xDFFF) {
 8014e94:	f5a3 4358 	sub.w	r3, r3, #55296	; 0xd800
 8014e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014e9c:	d392      	bcc.n	8014dc4 <json_value_init_string_with_len+0x4>
 8014e9e:	e7e7      	b.n	8014e70 <json_value_init_string_with_len+0xb0>
    } else if (*len == 3 && IS_CONT(string[1]) && IS_CONT(string[2])) {
 8014ea0:	7866      	ldrb	r6, [r4, #1]
 8014ea2:	f006 02c0 	and.w	r2, r6, #192	; 0xc0
 8014ea6:	2a80      	cmp	r2, #128	; 0x80
 8014ea8:	d18c      	bne.n	8014dc4 <json_value_init_string_with_len+0x4>
 8014eaa:	78a2      	ldrb	r2, [r4, #2]
 8014eac:	f002 07c0 	and.w	r7, r2, #192	; 0xc0
 8014eb0:	2f80      	cmp	r7, #128	; 0x80
 8014eb2:	d187      	bne.n	8014dc4 <json_value_init_string_with_len+0x4>
        cp = ((unsigned char)string[0]) & 0xF;
 8014eb4:	f003 030f 	and.w	r3, r3, #15
        cp = (cp << 6) | (string[1] & 0x3F);
 8014eb8:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 8014ebc:	ea46 1683 	orr.w	r6, r6, r3, lsl #6
        cp = (cp << 6) | (string[2] & 0x3F);
 8014ec0:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8014ec4:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8014ec8:	2203      	movs	r2, #3
    if ((cp < 0x80    && *len > 1) ||
 8014eca:	2b7f      	cmp	r3, #127	; 0x7f
 8014ecc:	f67f af7a 	bls.w	8014dc4 <json_value_init_string_with_len+0x4>
 8014ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014ed4:	f4ff af76 	bcc.w	8014dc4 <json_value_init_string_with_len+0x4>
        (cp < 0x800   && *len > 2) ||
 8014ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014edc:	d2c5      	bcs.n	8014e6a <json_value_init_string_with_len+0xaa>
        (cp < 0x10000 && *len > 3)) {
 8014ede:	2a04      	cmp	r2, #4
 8014ee0:	f43f af70 	beq.w	8014dc4 <json_value_init_string_with_len+0x4>
 8014ee4:	2203      	movs	r2, #3
 8014ee6:	e7d5      	b.n	8014e94 <json_value_init_string_with_len+0xd4>
 8014ee8:	200004f8 	.word	0x200004f8

08014eec <json_value_init_string>:
JSON_Value * json_value_init_string(const char *string) {
 8014eec:	b510      	push	{r4, lr}
    if (string == NULL) {
 8014eee:	4604      	mov	r4, r0
 8014ef0:	b138      	cbz	r0, 8014f02 <json_value_init_string+0x16>
    return json_value_init_string_with_len(string, strlen(string));
 8014ef2:	f7ef f9ef 	bl	80042d4 <strlen>
 8014ef6:	4601      	mov	r1, r0
 8014ef8:	4620      	mov	r0, r4
}
 8014efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return json_value_init_string_with_len(string, strlen(string));
 8014efe:	f7ff bf5f 	b.w	8014dc0 <json_value_init_string_with_len>
}
 8014f02:	bd10      	pop	{r4, pc}

08014f04 <json_value_init_number>:

JSON_Value * json_value_init_number(double number) {
 8014f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f06:	ec55 4b10 	vmov	r4, r5, d0
    JSON_Value *new_value = NULL;
    if (IS_NUMBER_INVALID(number)) {
 8014f0a:	ee10 2a10 	vmov	r2, s0
 8014f0e:	ee10 0a10 	vmov	r0, s0
 8014f12:	462b      	mov	r3, r5
 8014f14:	4629      	mov	r1, r5
 8014f16:	f7ef fe91 	bl	8004c3c <__aeabi_dcmpun>
 8014f1a:	b9e8      	cbnz	r0, 8014f58 <json_value_init_number+0x54>
 8014f1c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8014f20:	4b0e      	ldr	r3, [pc, #56]	; (8014f5c <json_value_init_number+0x58>)
 8014f22:	f04f 32ff 	mov.w	r2, #4294967295
 8014f26:	4620      	mov	r0, r4
 8014f28:	4639      	mov	r1, r7
 8014f2a:	f7ef fe87 	bl	8004c3c <__aeabi_dcmpun>
 8014f2e:	b938      	cbnz	r0, 8014f40 <json_value_init_number+0x3c>
 8014f30:	4b0a      	ldr	r3, [pc, #40]	; (8014f5c <json_value_init_number+0x58>)
 8014f32:	f04f 32ff 	mov.w	r2, #4294967295
 8014f36:	4620      	mov	r0, r4
 8014f38:	4639      	mov	r1, r7
 8014f3a:	f7ef fe61 	bl	8004c00 <__aeabi_dcmple>
 8014f3e:	b150      	cbz	r0, 8014f56 <json_value_init_number+0x52>
        return NULL;
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8014f40:	4b07      	ldr	r3, [pc, #28]	; (8014f60 <json_value_init_number+0x5c>)
 8014f42:	2010      	movs	r0, #16
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	4798      	blx	r3
    if (new_value == NULL) {
 8014f48:	b128      	cbz	r0, 8014f56 <json_value_init_number+0x52>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONNumber;
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	2303      	movs	r3, #3
 8014f4e:	e9c0 2300 	strd	r2, r3, [r0]
    new_value->value.number = number;
 8014f52:	e9c0 4502 	strd	r4, r5, [r0, #8]
    return new_value;
}
 8014f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 8014f58:	2000      	movs	r0, #0
 8014f5a:	e7fc      	b.n	8014f56 <json_value_init_number+0x52>
 8014f5c:	7fefffff 	.word	0x7fefffff
 8014f60:	200004f8 	.word	0x200004f8

08014f64 <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8014f64:	4b07      	ldr	r3, [pc, #28]	; (8014f84 <json_value_init_boolean+0x20>)
JSON_Value * json_value_init_boolean(int boolean) {
 8014f66:	b510      	push	{r4, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8014f68:	681b      	ldr	r3, [r3, #0]
JSON_Value * json_value_init_boolean(int boolean) {
 8014f6a:	4604      	mov	r4, r0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8014f6c:	2010      	movs	r0, #16
 8014f6e:	4798      	blx	r3
    if (!new_value) {
 8014f70:	b138      	cbz	r0, 8014f82 <json_value_init_boolean+0x1e>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONBoolean;
 8014f72:	2200      	movs	r2, #0
 8014f74:	2306      	movs	r3, #6
    new_value->value.boolean = boolean ? 1 : 0;
 8014f76:	3c00      	subs	r4, #0
    new_value->type = JSONBoolean;
 8014f78:	e9c0 2300 	strd	r2, r3, [r0]
    new_value->value.boolean = boolean ? 1 : 0;
 8014f7c:	bf18      	it	ne
 8014f7e:	2401      	movne	r4, #1
 8014f80:	6084      	str	r4, [r0, #8]
    return new_value;
}
 8014f82:	bd10      	pop	{r4, pc}
 8014f84:	200004f8 	.word	0x200004f8

08014f88 <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
 8014f88:	b508      	push	{r3, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8014f8a:	4b05      	ldr	r3, [pc, #20]	; (8014fa0 <json_value_init_null+0x18>)
 8014f8c:	2010      	movs	r0, #16
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	4798      	blx	r3
    if (!new_value) {
 8014f92:	b118      	cbz	r0, 8014f9c <json_value_init_null+0x14>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONNull;
 8014f94:	2200      	movs	r2, #0
 8014f96:	2301      	movs	r3, #1
 8014f98:	e9c0 2300 	strd	r2, r3, [r0]
    return new_value;
}
 8014f9c:	bd08      	pop	{r3, pc}
 8014f9e:	bf00      	nop
 8014fa0:	200004f8 	.word	0x200004f8

08014fa4 <parse_value.part.0>:
static JSON_Value * parse_value(const char **string, size_t nesting) {
 8014fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fa8:	ed2d 8b02 	vpush	{d8}
    SKIP_WHITESPACES(string);
 8014fac:	4e9c      	ldr	r6, [pc, #624]	; (8015220 <parse_value.part.0+0x27c>)
static JSON_Value * parse_value(const char **string, size_t nesting) {
 8014fae:	b085      	sub	sp, #20
 8014fb0:	4605      	mov	r5, r0
 8014fb2:	460f      	mov	r7, r1
    SKIP_WHITESPACES(string);
 8014fb4:	682c      	ldr	r4, [r5, #0]
 8014fb6:	7823      	ldrb	r3, [r4, #0]
 8014fb8:	f813 8006 	ldrb.w	r8, [r3, r6]
 8014fbc:	f018 0808 	ands.w	r8, r8, #8
 8014fc0:	d110      	bne.n	8014fe4 <parse_value.part.0+0x40>
    switch (**string) {
 8014fc2:	2b66      	cmp	r3, #102	; 0x66
 8014fc4:	f000 8132 	beq.w	801522c <parse_value.part.0+0x288>
 8014fc8:	d841      	bhi.n	801504e <parse_value.part.0+0xaa>
 8014fca:	2b39      	cmp	r3, #57	; 0x39
 8014fcc:	d80d      	bhi.n	8014fea <parse_value.part.0+0x46>
 8014fce:	2b2f      	cmp	r3, #47	; 0x2f
 8014fd0:	f200 8147 	bhi.w	8015262 <parse_value.part.0+0x2be>
 8014fd4:	2b22      	cmp	r3, #34	; 0x22
 8014fd6:	f000 810d 	beq.w	80151f4 <parse_value.part.0+0x250>
 8014fda:	2b2d      	cmp	r3, #45	; 0x2d
 8014fdc:	f000 8141 	beq.w	8015262 <parse_value.part.0+0x2be>
        return NULL;
 8014fe0:	2400      	movs	r4, #0
            return parse_number_value(string);
 8014fe2:	e081      	b.n	80150e8 <parse_value.part.0+0x144>
    SKIP_WHITESPACES(string);
 8014fe4:	3401      	adds	r4, #1
 8014fe6:	602c      	str	r4, [r5, #0]
 8014fe8:	e7e4      	b.n	8014fb4 <parse_value.part.0+0x10>
    switch (**string) {
 8014fea:	2b5b      	cmp	r3, #91	; 0x5b
 8014fec:	d1f8      	bne.n	8014fe0 <parse_value.part.0+0x3c>
    output_value = json_value_init_array();
 8014fee:	f7ff fec7 	bl	8014d80 <json_value_init_array>
    if (output_value == NULL) {
 8014ff2:	4604      	mov	r4, r0
 8014ff4:	2800      	cmp	r0, #0
 8014ff6:	d0f3      	beq.n	8014fe0 <parse_value.part.0+0x3c>
    if (**string != '[') {
 8014ff8:	682a      	ldr	r2, [r5, #0]
 8014ffa:	7813      	ldrb	r3, [r2, #0]
 8014ffc:	2b5b      	cmp	r3, #91	; 0x5b
 8014ffe:	d146      	bne.n	801508e <parse_value.part.0+0xea>
    output_array = json_value_get_array(output_value);
 8015000:	f7ff fc54 	bl	80148ac <json_value_get_array>
    SKIP_CHAR(string);
 8015004:	3201      	adds	r2, #1
    output_array = json_value_get_array(output_value);
 8015006:	4680      	mov	r8, r0
    SKIP_CHAR(string);
 8015008:	602a      	str	r2, [r5, #0]
    SKIP_WHITESPACES(string);
 801500a:	682b      	ldr	r3, [r5, #0]
 801500c:	781a      	ldrb	r2, [r3, #0]
 801500e:	5cb1      	ldrb	r1, [r6, r2]
 8015010:	0708      	lsls	r0, r1, #28
 8015012:	f100 80c3 	bmi.w	801519c <parse_value.part.0+0x1f8>
    if (**string == ']') { /* empty array */
 8015016:	2a5d      	cmp	r2, #93	; 0x5d
 8015018:	d064      	beq.n	80150e4 <parse_value.part.0+0x140>
            return parse_array_value(string, nesting + 1);
 801501a:	3701      	adds	r7, #1
    if (nesting > MAX_NESTING) {
 801501c:	f640 0901 	movw	r9, #2049	; 0x801
    while (**string != '\0') {
 8015020:	682b      	ldr	r3, [r5, #0]
 8015022:	781b      	ldrb	r3, [r3, #0]
 8015024:	2b00      	cmp	r3, #0
 8015026:	f040 80bc 	bne.w	80151a2 <parse_value.part.0+0x1fe>
    SKIP_WHITESPACES(string);
 801502a:	682b      	ldr	r3, [r5, #0]
 801502c:	781a      	ldrb	r2, [r3, #0]
 801502e:	5cb1      	ldrb	r1, [r6, r2]
 8015030:	0709      	lsls	r1, r1, #28
 8015032:	f100 80da 	bmi.w	80151ea <parse_value.part.0+0x246>
    if (**string != ']' || /* Trim array after parsing is over */
 8015036:	2a5d      	cmp	r2, #93	; 0x5d
 8015038:	d16c      	bne.n	8015114 <parse_value.part.0+0x170>
    return array ? array->count : 0;
 801503a:	f1b8 0f00 	cmp.w	r8, #0
 801503e:	f000 80d7 	beq.w	80151f0 <parse_value.part.0+0x24c>
 8015042:	f8d8 1008 	ldr.w	r1, [r8, #8]
        json_array_resize(output_array, json_array_get_count(output_array)) == JSONFailure) {
 8015046:	4640      	mov	r0, r8
 8015048:	f7ff f8c4 	bl	80141d4 <json_array_resize>
 801504c:	e047      	b.n	80150de <parse_value.part.0+0x13a>
    switch (**string) {
 801504e:	2b74      	cmp	r3, #116	; 0x74
 8015050:	f000 80ec 	beq.w	801522c <parse_value.part.0+0x288>
 8015054:	2b7b      	cmp	r3, #123	; 0x7b
 8015056:	d011      	beq.n	801507c <parse_value.part.0+0xd8>
 8015058:	2b6e      	cmp	r3, #110	; 0x6e
 801505a:	d1c1      	bne.n	8014fe0 <parse_value.part.0+0x3c>
    if (strncmp("null", *string, token_size) == 0) {
 801505c:	4871      	ldr	r0, [pc, #452]	; (8015224 <parse_value.part.0+0x280>)
 801505e:	2204      	movs	r2, #4
 8015060:	4621      	mov	r1, r4
 8015062:	f007 fee1 	bl	801ce28 <strncmp>
 8015066:	2800      	cmp	r0, #0
 8015068:	d1ba      	bne.n	8014fe0 <parse_value.part.0+0x3c>
        *string += token_size;
 801506a:	3404      	adds	r4, #4
 801506c:	602c      	str	r4, [r5, #0]
}
 801506e:	b005      	add	sp, #20
 8015070:	ecbd 8b02 	vpop	{d8}
 8015074:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return json_value_init_null();
 8015078:	f7ff bf86 	b.w	8014f88 <json_value_init_null>
    output_value = json_value_init_object();
 801507c:	f7ff fe60 	bl	8014d40 <json_value_init_object>
    if (output_value == NULL) {
 8015080:	4604      	mov	r4, r0
 8015082:	2800      	cmp	r0, #0
 8015084:	d0ac      	beq.n	8014fe0 <parse_value.part.0+0x3c>
    if (**string != '{') {
 8015086:	682a      	ldr	r2, [r5, #0]
 8015088:	7813      	ldrb	r3, [r2, #0]
 801508a:	2b7b      	cmp	r3, #123	; 0x7b
 801508c:	d002      	beq.n	8015094 <parse_value.part.0+0xf0>
            json_value_free(output_value);
 801508e:	f7ff fdb3 	bl	8014bf8 <json_value_free>
            return NULL;
 8015092:	e7a5      	b.n	8014fe0 <parse_value.part.0+0x3c>
    output_object = json_value_get_object(output_value);
 8015094:	f7ff fbdb 	bl	801484e <json_value_get_object>
    SKIP_CHAR(string);
 8015098:	3201      	adds	r2, #1
    output_object = json_value_get_object(output_value);
 801509a:	4680      	mov	r8, r0
    SKIP_CHAR(string);
 801509c:	602a      	str	r2, [r5, #0]
    SKIP_WHITESPACES(string);
 801509e:	682b      	ldr	r3, [r5, #0]
 80150a0:	781a      	ldrb	r2, [r3, #0]
 80150a2:	f816 9002 	ldrb.w	r9, [r6, r2]
 80150a6:	f019 0108 	ands.w	r1, r9, #8
 80150aa:	9101      	str	r1, [sp, #4]
 80150ac:	d122      	bne.n	80150f4 <parse_value.part.0+0x150>
    if (**string == '}') { /* empty object */
 80150ae:	2a7d      	cmp	r2, #125	; 0x7d
 80150b0:	d018      	beq.n	80150e4 <parse_value.part.0+0x140>
 80150b2:	f8df a174 	ldr.w	sl, [pc, #372]	; 8015228 <parse_value.part.0+0x284>
            return parse_object_value(string, nesting + 1);
 80150b6:	f107 0b01 	add.w	fp, r7, #1
    while (**string != '\0') {
 80150ba:	682b      	ldr	r3, [r5, #0]
 80150bc:	781b      	ldrb	r3, [r3, #0]
 80150be:	b9e3      	cbnz	r3, 80150fa <parse_value.part.0+0x156>
    SKIP_WHITESPACES(string);
 80150c0:	682b      	ldr	r3, [r5, #0]
 80150c2:	781a      	ldrb	r2, [r3, #0]
 80150c4:	5cb1      	ldrb	r1, [r6, r2]
 80150c6:	070f      	lsls	r7, r1, #28
 80150c8:	d463      	bmi.n	8015192 <parse_value.part.0+0x1ee>
    if (**string != '}' || /* Trim object after parsing is over */
 80150ca:	2a7d      	cmp	r2, #125	; 0x7d
 80150cc:	d122      	bne.n	8015114 <parse_value.part.0+0x170>
    return object ? object->count : 0;
 80150ce:	f1b8 0f00 	cmp.w	r8, #0
 80150d2:	d061      	beq.n	8015198 <parse_value.part.0+0x1f4>
 80150d4:	f8d8 100c 	ldr.w	r1, [r8, #12]
        json_object_resize(output_object, json_object_get_count(output_object)) == JSONFailure) {
 80150d8:	4640      	mov	r0, r8
 80150da:	f7ff f837 	bl	801414c <json_object_resize>
    if (**string != ']' || /* Trim array after parsing is over */
 80150de:	3001      	adds	r0, #1
 80150e0:	d018      	beq.n	8015114 <parse_value.part.0+0x170>
    SKIP_CHAR(string);
 80150e2:	682b      	ldr	r3, [r5, #0]
 80150e4:	3301      	adds	r3, #1
 80150e6:	602b      	str	r3, [r5, #0]
}
 80150e8:	4620      	mov	r0, r4
 80150ea:	b005      	add	sp, #20
 80150ec:	ecbd 8b02 	vpop	{d8}
 80150f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SKIP_WHITESPACES(string);
 80150f4:	3301      	adds	r3, #1
 80150f6:	602b      	str	r3, [r5, #0]
 80150f8:	e7d1      	b.n	801509e <parse_value.part.0+0xfa>
        size_t key_len = 0;
 80150fa:	9b01      	ldr	r3, [sp, #4]
 80150fc:	9303      	str	r3, [sp, #12]
        new_key = get_quoted_string(string, &key_len);
 80150fe:	a903      	add	r1, sp, #12
 8015100:	4628      	mov	r0, r5
 8015102:	f7ff fa77 	bl	80145f4 <get_quoted_string.constprop.0>
        if (new_key == NULL || key_len != strlen(new_key)) {
 8015106:	4607      	mov	r7, r0
 8015108:	b120      	cbz	r0, 8015114 <parse_value.part.0+0x170>
 801510a:	f7ef f8e3 	bl	80042d4 <strlen>
 801510e:	9b03      	ldr	r3, [sp, #12]
 8015110:	4298      	cmp	r0, r3
 8015112:	d003      	beq.n	801511c <parse_value.part.0+0x178>
            json_value_free(output_value);
 8015114:	4620      	mov	r0, r4
 8015116:	e7ba      	b.n	801508e <parse_value.part.0+0xea>
        SKIP_WHITESPACES(string);
 8015118:	3301      	adds	r3, #1
 801511a:	602b      	str	r3, [r5, #0]
 801511c:	682b      	ldr	r3, [r5, #0]
 801511e:	781a      	ldrb	r2, [r3, #0]
 8015120:	5cb1      	ldrb	r1, [r6, r2]
 8015122:	0708      	lsls	r0, r1, #28
 8015124:	d4f8      	bmi.n	8015118 <parse_value.part.0+0x174>
        if (**string != ':') {
 8015126:	2a3a      	cmp	r2, #58	; 0x3a
 8015128:	d004      	beq.n	8015134 <parse_value.part.0+0x190>
            parson_free(new_key);
 801512a:	f8da 3004 	ldr.w	r3, [sl, #4]
 801512e:	4638      	mov	r0, r7
 8015130:	4798      	blx	r3
            json_value_free(output_value);
 8015132:	e7ef      	b.n	8015114 <parse_value.part.0+0x170>
        SKIP_CHAR(string);
 8015134:	3301      	adds	r3, #1
 8015136:	602b      	str	r3, [r5, #0]
    if (nesting > MAX_NESTING) {
 8015138:	f640 0301 	movw	r3, #2049	; 0x801
 801513c:	459b      	cmp	fp, r3
 801513e:	d0f4      	beq.n	801512a <parse_value.part.0+0x186>
 8015140:	4659      	mov	r1, fp
 8015142:	4628      	mov	r0, r5
 8015144:	f7ff ff2e 	bl	8014fa4 <parse_value.part.0>
        if (new_value == NULL) {
 8015148:	4681      	mov	r9, r0
 801514a:	2800      	cmp	r0, #0
 801514c:	d0ed      	beq.n	801512a <parse_value.part.0+0x186>
        if (json_object_add(output_object, new_key, new_value) == JSONFailure) {
 801514e:	4602      	mov	r2, r0
 8015150:	4639      	mov	r1, r7
 8015152:	4640      	mov	r0, r8
 8015154:	f7ff f8d3 	bl	80142fe <json_object_add>
 8015158:	3001      	adds	r0, #1
            parson_free(new_key);
 801515a:	f8da 3004 	ldr.w	r3, [sl, #4]
 801515e:	4638      	mov	r0, r7
        if (json_object_add(output_object, new_key, new_value) == JSONFailure) {
 8015160:	d104      	bne.n	801516c <parse_value.part.0+0x1c8>
            parson_free(new_key);
 8015162:	4798      	blx	r3
            json_value_free(new_value);
 8015164:	4648      	mov	r0, r9
            json_value_free(new_array_value);
 8015166:	f7ff fd47 	bl	8014bf8 <json_value_free>
            json_value_free(output_value);
 801516a:	e7d3      	b.n	8015114 <parse_value.part.0+0x170>
        parson_free(new_key);
 801516c:	4798      	blx	r3
        SKIP_WHITESPACES(string);
 801516e:	682b      	ldr	r3, [r5, #0]
 8015170:	781a      	ldrb	r2, [r3, #0]
 8015172:	5cb1      	ldrb	r1, [r6, r2]
 8015174:	0709      	lsls	r1, r1, #28
 8015176:	d409      	bmi.n	801518c <parse_value.part.0+0x1e8>
        if (**string != ',') {
 8015178:	2a2c      	cmp	r2, #44	; 0x2c
 801517a:	d1a1      	bne.n	80150c0 <parse_value.part.0+0x11c>
        SKIP_WHITESPACES(string);
 801517c:	3301      	adds	r3, #1
 801517e:	602b      	str	r3, [r5, #0]
 8015180:	682b      	ldr	r3, [r5, #0]
 8015182:	781a      	ldrb	r2, [r3, #0]
 8015184:	5cb2      	ldrb	r2, [r6, r2]
 8015186:	0712      	lsls	r2, r2, #28
 8015188:	d4f8      	bmi.n	801517c <parse_value.part.0+0x1d8>
 801518a:	e796      	b.n	80150ba <parse_value.part.0+0x116>
        SKIP_WHITESPACES(string);
 801518c:	3301      	adds	r3, #1
 801518e:	602b      	str	r3, [r5, #0]
 8015190:	e7ed      	b.n	801516e <parse_value.part.0+0x1ca>
    SKIP_WHITESPACES(string);
 8015192:	3301      	adds	r3, #1
 8015194:	602b      	str	r3, [r5, #0]
 8015196:	e793      	b.n	80150c0 <parse_value.part.0+0x11c>
    return object ? object->count : 0;
 8015198:	4641      	mov	r1, r8
 801519a:	e79d      	b.n	80150d8 <parse_value.part.0+0x134>
    SKIP_WHITESPACES(string);
 801519c:	3301      	adds	r3, #1
 801519e:	602b      	str	r3, [r5, #0]
 80151a0:	e733      	b.n	801500a <parse_value.part.0+0x66>
    if (nesting > MAX_NESTING) {
 80151a2:	454f      	cmp	r7, r9
 80151a4:	d0b6      	beq.n	8015114 <parse_value.part.0+0x170>
 80151a6:	4639      	mov	r1, r7
 80151a8:	4628      	mov	r0, r5
 80151aa:	f7ff fefb 	bl	8014fa4 <parse_value.part.0>
        if (new_array_value == NULL) {
 80151ae:	4601      	mov	r1, r0
 80151b0:	2800      	cmp	r0, #0
 80151b2:	d0af      	beq.n	8015114 <parse_value.part.0+0x170>
        if (json_array_add(output_array, new_array_value) == JSONFailure) {
 80151b4:	9001      	str	r0, [sp, #4]
 80151b6:	4640      	mov	r0, r8
 80151b8:	f7ff f82a 	bl	8014210 <json_array_add>
 80151bc:	3001      	adds	r0, #1
 80151be:	9901      	ldr	r1, [sp, #4]
 80151c0:	d103      	bne.n	80151ca <parse_value.part.0+0x226>
            json_value_free(new_array_value);
 80151c2:	4608      	mov	r0, r1
 80151c4:	e7cf      	b.n	8015166 <parse_value.part.0+0x1c2>
        SKIP_WHITESPACES(string);
 80151c6:	3301      	adds	r3, #1
 80151c8:	602b      	str	r3, [r5, #0]
 80151ca:	682b      	ldr	r3, [r5, #0]
 80151cc:	781a      	ldrb	r2, [r3, #0]
 80151ce:	5cb1      	ldrb	r1, [r6, r2]
 80151d0:	0709      	lsls	r1, r1, #28
 80151d2:	d4f8      	bmi.n	80151c6 <parse_value.part.0+0x222>
        if (**string != ',') {
 80151d4:	2a2c      	cmp	r2, #44	; 0x2c
 80151d6:	f47f af28 	bne.w	801502a <parse_value.part.0+0x86>
        SKIP_WHITESPACES(string);
 80151da:	3301      	adds	r3, #1
 80151dc:	602b      	str	r3, [r5, #0]
 80151de:	682b      	ldr	r3, [r5, #0]
 80151e0:	781a      	ldrb	r2, [r3, #0]
 80151e2:	5cb2      	ldrb	r2, [r6, r2]
 80151e4:	0710      	lsls	r0, r2, #28
 80151e6:	d4f8      	bmi.n	80151da <parse_value.part.0+0x236>
 80151e8:	e71a      	b.n	8015020 <parse_value.part.0+0x7c>
    SKIP_WHITESPACES(string);
 80151ea:	3301      	adds	r3, #1
 80151ec:	602b      	str	r3, [r5, #0]
 80151ee:	e71c      	b.n	801502a <parse_value.part.0+0x86>
    return array ? array->count : 0;
 80151f0:	4641      	mov	r1, r8
 80151f2:	e728      	b.n	8015046 <parse_value.part.0+0xa2>
    char *new_string = get_quoted_string(string, &new_string_len);
 80151f4:	4628      	mov	r0, r5
 80151f6:	a903      	add	r1, sp, #12
    size_t new_string_len = 0;
 80151f8:	f8cd 800c 	str.w	r8, [sp, #12]
    char *new_string = get_quoted_string(string, &new_string_len);
 80151fc:	f7ff f9fa 	bl	80145f4 <get_quoted_string.constprop.0>
    if (new_string == NULL) {
 8015200:	4605      	mov	r5, r0
 8015202:	2800      	cmp	r0, #0
 8015204:	f43f aeec 	beq.w	8014fe0 <parse_value.part.0+0x3c>
    value = json_value_init_string_no_copy(new_string, new_string_len);
 8015208:	9903      	ldr	r1, [sp, #12]
 801520a:	f7fe ff71 	bl	80140f0 <json_value_init_string_no_copy>
    if (value == NULL) {
 801520e:	4604      	mov	r4, r0
 8015210:	2800      	cmp	r0, #0
 8015212:	f47f af69 	bne.w	80150e8 <parse_value.part.0+0x144>
        parson_free(new_string);
 8015216:	4b04      	ldr	r3, [pc, #16]	; (8015228 <parse_value.part.0+0x284>)
 8015218:	4628      	mov	r0, r5
 801521a:	685b      	ldr	r3, [r3, #4]
 801521c:	4798      	blx	r3
        return NULL;
 801521e:	e763      	b.n	80150e8 <parse_value.part.0+0x144>
 8015220:	080393f5 	.word	0x080393f5
 8015224:	08023dfd 	.word	0x08023dfd
 8015228:	200004f8 	.word	0x200004f8
    if (strncmp("true", *string, true_token_size) == 0) {
 801522c:	482c      	ldr	r0, [pc, #176]	; (80152e0 <parse_value.part.0+0x33c>)
 801522e:	2204      	movs	r2, #4
 8015230:	4621      	mov	r1, r4
 8015232:	f007 fdf9 	bl	801ce28 <strncmp>
 8015236:	b948      	cbnz	r0, 801524c <parse_value.part.0+0x2a8>
        *string += true_token_size;
 8015238:	3404      	adds	r4, #4
 801523a:	602c      	str	r4, [r5, #0]
        return json_value_init_boolean(1);
 801523c:	2001      	movs	r0, #1
}
 801523e:	b005      	add	sp, #20
 8015240:	ecbd 8b02 	vpop	{d8}
 8015244:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return json_value_init_boolean(0);
 8015248:	f7ff be8c 	b.w	8014f64 <json_value_init_boolean>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 801524c:	4825      	ldr	r0, [pc, #148]	; (80152e4 <parse_value.part.0+0x340>)
 801524e:	2205      	movs	r2, #5
 8015250:	4621      	mov	r1, r4
 8015252:	f007 fde9 	bl	801ce28 <strncmp>
 8015256:	2800      	cmp	r0, #0
 8015258:	f47f aec2 	bne.w	8014fe0 <parse_value.part.0+0x3c>
        *string += false_token_size;
 801525c:	3405      	adds	r4, #5
 801525e:	602c      	str	r4, [r5, #0]
 8015260:	e7ed      	b.n	801523e <parse_value.part.0+0x29a>
    errno = 0;
 8015262:	f006 fd7d 	bl	801bd60 <__errno>
 8015266:	2400      	movs	r4, #0
 8015268:	6004      	str	r4, [r0, #0]
    number = strtod(*string, &end);
 801526a:	a903      	add	r1, sp, #12
 801526c:	6828      	ldr	r0, [r5, #0]
 801526e:	f008 fc25 	bl	801dabc <strtod>
 8015272:	eeb0 8a40 	vmov.f32	s16, s0
 8015276:	eef0 8a60 	vmov.f32	s17, s1
    if (errno || !is_decimal(*string, end - *string)) {
 801527a:	f006 fd71 	bl	801bd60 <__errno>
 801527e:	6800      	ldr	r0, [r0, #0]
 8015280:	2800      	cmp	r0, #0
 8015282:	f47f af31 	bne.w	80150e8 <parse_value.part.0+0x144>
 8015286:	682e      	ldr	r6, [r5, #0]
 8015288:	9f03      	ldr	r7, [sp, #12]
 801528a:	1bbb      	subs	r3, r7, r6
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 801528c:	2b01      	cmp	r3, #1
 801528e:	d910      	bls.n	80152b2 <parse_value.part.0+0x30e>
 8015290:	7832      	ldrb	r2, [r6, #0]
 8015292:	2a30      	cmp	r2, #48	; 0x30
 8015294:	d102      	bne.n	801529c <parse_value.part.0+0x2f8>
 8015296:	7872      	ldrb	r2, [r6, #1]
 8015298:	2a2e      	cmp	r2, #46	; 0x2e
 801529a:	d11f      	bne.n	80152dc <parse_value.part.0+0x338>
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 801529c:	2b02      	cmp	r3, #2
 801529e:	d008      	beq.n	80152b2 <parse_value.part.0+0x30e>
 80152a0:	4911      	ldr	r1, [pc, #68]	; (80152e8 <parse_value.part.0+0x344>)
 80152a2:	2202      	movs	r2, #2
 80152a4:	4630      	mov	r0, r6
 80152a6:	f007 fdbf 	bl	801ce28 <strncmp>
 80152aa:	b910      	cbnz	r0, 80152b2 <parse_value.part.0+0x30e>
 80152ac:	78b3      	ldrb	r3, [r6, #2]
 80152ae:	2b2e      	cmp	r3, #46	; 0x2e
 80152b0:	d114      	bne.n	80152dc <parse_value.part.0+0x338>
        if (strchr("xX", string[length])) {
 80152b2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80152ec <parse_value.part.0+0x348>
 80152b6:	463c      	mov	r4, r7
 80152b8:	e007      	b.n	80152ca <parse_value.part.0+0x326>
 80152ba:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 80152be:	4640      	mov	r0, r8
 80152c0:	f007 fd9d 	bl	801cdfe <strchr>
 80152c4:	2800      	cmp	r0, #0
 80152c6:	f47f ae8b 	bne.w	8014fe0 <parse_value.part.0+0x3c>
    while (length--) {
 80152ca:	42b4      	cmp	r4, r6
 80152cc:	d1f5      	bne.n	80152ba <parse_value.part.0+0x316>
    *string = end;
 80152ce:	602f      	str	r7, [r5, #0]
    return json_value_init_number(number);
 80152d0:	eeb0 0a48 	vmov.f32	s0, s16
 80152d4:	eef0 0a68 	vmov.f32	s1, s17
 80152d8:	f7ff fe14 	bl	8014f04 <json_value_init_number>
 80152dc:	4604      	mov	r4, r0
 80152de:	e703      	b.n	80150e8 <parse_value.part.0+0x144>
 80152e0:	08023999 	.word	0x08023999
 80152e4:	0802399e 	.word	0x0802399e
 80152e8:	08023e02 	.word	0x08023e02
 80152ec:	08023e05 	.word	0x08023e05

080152f0 <json_parse_string>:
JSON_Value * json_parse_string(const char *string) {
 80152f0:	b507      	push	{r0, r1, r2, lr}
 80152f2:	9001      	str	r0, [sp, #4]
    if (string == NULL) {
 80152f4:	b170      	cbz	r0, 8015314 <json_parse_string+0x24>
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 80152f6:	7803      	ldrb	r3, [r0, #0]
 80152f8:	2bef      	cmp	r3, #239	; 0xef
 80152fa:	d107      	bne.n	801530c <json_parse_string+0x1c>
 80152fc:	7843      	ldrb	r3, [r0, #1]
 80152fe:	2bbb      	cmp	r3, #187	; 0xbb
 8015300:	d104      	bne.n	801530c <json_parse_string+0x1c>
 8015302:	7883      	ldrb	r3, [r0, #2]
 8015304:	2bbf      	cmp	r3, #191	; 0xbf
        string = string + 3; /* Support for UTF-8 BOM */
 8015306:	bf04      	itt	eq
 8015308:	3003      	addeq	r0, #3
 801530a:	9001      	streq	r0, [sp, #4]
    if (nesting > MAX_NESTING) {
 801530c:	2100      	movs	r1, #0
 801530e:	a801      	add	r0, sp, #4
 8015310:	f7ff fe48 	bl	8014fa4 <parse_value.part.0>
}
 8015314:	b003      	add	sp, #12
 8015316:	f85d fb04 	ldr.w	pc, [sp], #4

0801531a <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 801531a:	b500      	push	{lr}
 801531c:	b093      	sub	sp, #76	; 0x4c
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, 0, num_buf);
 801531e:	ab02      	add	r3, sp, #8
 8015320:	9300      	str	r3, [sp, #0]
 8015322:	2300      	movs	r3, #0
 8015324:	461a      	mov	r2, r3
 8015326:	4619      	mov	r1, r3
 8015328:	f7ff fb02 	bl	8014930 <json_serialize_to_buffer_r>
    return res < 0 ? 0 : (size_t)(res) + 1;
 801532c:	2800      	cmp	r0, #0
 801532e:	bfac      	ite	ge
 8015330:	3001      	addge	r0, #1
 8015332:	2000      	movlt	r0, #0
}
 8015334:	b013      	add	sp, #76	; 0x4c
 8015336:	f85d fb04 	ldr.w	pc, [sp], #4

0801533a <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 801533a:	b530      	push	{r4, r5, lr}
 801533c:	b085      	sub	sp, #20
 801533e:	4604      	mov	r4, r0
 8015340:	9103      	str	r1, [sp, #12]
 8015342:	4615      	mov	r5, r2
    int written = -1;
    size_t needed_size_in_bytes = json_serialization_size(value);
 8015344:	f7ff ffe9 	bl	801531a <json_serialization_size>
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 8015348:	b158      	cbz	r0, 8015362 <json_serialize_to_buffer+0x28>
 801534a:	42a8      	cmp	r0, r5
 801534c:	d809      	bhi.n	8015362 <json_serialize_to_buffer+0x28>
        return JSONFailure;
    }
    written = json_serialize_to_buffer_r(value, buf, 0, 0, NULL);
 801534e:	2300      	movs	r3, #0
 8015350:	9903      	ldr	r1, [sp, #12]
 8015352:	9300      	str	r3, [sp, #0]
 8015354:	461a      	mov	r2, r3
 8015356:	4620      	mov	r0, r4
 8015358:	f7ff faea 	bl	8014930 <json_serialize_to_buffer_r>
    if (written < 0) {
 801535c:	17c0      	asrs	r0, r0, #31
        return JSONFailure;
    }
    return JSONSuccess;
}
 801535e:	b005      	add	sp, #20
 8015360:	bd30      	pop	{r4, r5, pc}
        return JSONFailure;
 8015362:	f04f 30ff 	mov.w	r0, #4294967295
 8015366:	e7fa      	b.n	801535e <json_serialize_to_buffer+0x24>

08015368 <json_free_serialized_string>:
    }
    return buf;
}

void json_free_serialized_string(char *string) {
    parson_free(string);
 8015368:	4b01      	ldr	r3, [pc, #4]	; (8015370 <json_free_serialized_string+0x8>)
 801536a:	685b      	ldr	r3, [r3, #4]
 801536c:	4718      	bx	r3
 801536e:	bf00      	nop
 8015370:	200004f8 	.word	0x200004f8

08015374 <json_serialize_to_string>:
char * json_serialize_to_string(const JSON_Value *value) {
 8015374:	b570      	push	{r4, r5, r6, lr}
 8015376:	4606      	mov	r6, r0
    size_t buf_size_bytes = json_serialization_size(value);
 8015378:	f7ff ffcf 	bl	801531a <json_serialization_size>
    if (buf_size_bytes == 0) {
 801537c:	4605      	mov	r5, r0
 801537e:	b910      	cbnz	r0, 8015386 <json_serialize_to_string+0x12>
        return NULL;
 8015380:	2400      	movs	r4, #0
}
 8015382:	4620      	mov	r0, r4
 8015384:	bd70      	pop	{r4, r5, r6, pc}
    buf = (char*)parson_malloc(buf_size_bytes);
 8015386:	4b08      	ldr	r3, [pc, #32]	; (80153a8 <json_serialize_to_string+0x34>)
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	4798      	blx	r3
    if (buf == NULL) {
 801538c:	4604      	mov	r4, r0
 801538e:	2800      	cmp	r0, #0
 8015390:	d0f6      	beq.n	8015380 <json_serialize_to_string+0xc>
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 8015392:	4601      	mov	r1, r0
 8015394:	462a      	mov	r2, r5
 8015396:	4630      	mov	r0, r6
 8015398:	f7ff ffcf 	bl	801533a <json_serialize_to_buffer>
    if (serialization_result == JSONFailure) {
 801539c:	3001      	adds	r0, #1
 801539e:	d1f0      	bne.n	8015382 <json_serialize_to_string+0xe>
        json_free_serialized_string(buf);
 80153a0:	4620      	mov	r0, r4
 80153a2:	f7ff ffe1 	bl	8015368 <json_free_serialized_string>
 80153a6:	e7eb      	b.n	8015380 <json_serialize_to_string+0xc>
 80153a8:	200004f8 	.word	0x200004f8

080153ac <json_array_append_value>:
    array->count = 0;
    return JSONSuccess;
}

JSON_Status json_array_append_value(JSON_Array *array, JSON_Value *value) {
    if (array == NULL || value == NULL || value->parent != NULL) {
 80153ac:	b120      	cbz	r0, 80153b8 <json_array_append_value+0xc>
 80153ae:	b119      	cbz	r1, 80153b8 <json_array_append_value+0xc>
 80153b0:	680b      	ldr	r3, [r1, #0]
 80153b2:	b90b      	cbnz	r3, 80153b8 <json_array_append_value+0xc>
        return JSONFailure;
    }
    return json_array_add(array, value);
 80153b4:	f7fe bf2c 	b.w	8014210 <json_array_add>
}
 80153b8:	f04f 30ff 	mov.w	r0, #4294967295
 80153bc:	4770      	bx	lr

080153be <json_array_append_string>:

JSON_Status json_array_append_string(JSON_Array *array, const char *string) {
 80153be:	b538      	push	{r3, r4, r5, lr}
 80153c0:	4604      	mov	r4, r0
    JSON_Value *value = json_value_init_string(string);
 80153c2:	4608      	mov	r0, r1
 80153c4:	f7ff fd92 	bl	8014eec <json_value_init_string>
    if (value == NULL) {
 80153c8:	4605      	mov	r5, r0
 80153ca:	b158      	cbz	r0, 80153e4 <json_array_append_string+0x26>
        return JSONFailure;
    }
    if (json_array_append_value(array, value) == JSONFailure) {
 80153cc:	4601      	mov	r1, r0
 80153ce:	4620      	mov	r0, r4
 80153d0:	f7ff ffec 	bl	80153ac <json_array_append_value>
 80153d4:	1c43      	adds	r3, r0, #1
 80153d6:	4604      	mov	r4, r0
 80153d8:	d107      	bne.n	80153ea <json_array_append_string+0x2c>
        json_value_free(value);
 80153da:	4628      	mov	r0, r5
 80153dc:	f7ff fc0c 	bl	8014bf8 <json_value_free>
        return JSONFailure;
    }
    return JSONSuccess;
}
 80153e0:	4620      	mov	r0, r4
 80153e2:	bd38      	pop	{r3, r4, r5, pc}
        return JSONFailure;
 80153e4:	f04f 34ff 	mov.w	r4, #4294967295
 80153e8:	e7fa      	b.n	80153e0 <json_array_append_string+0x22>
    return JSONSuccess;
 80153ea:	2400      	movs	r4, #0
 80153ec:	e7f8      	b.n	80153e0 <json_array_append_string+0x22>

080153ee <json_array_append_number>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_array_append_number(JSON_Array *array, double number) {
 80153ee:	b538      	push	{r3, r4, r5, lr}
 80153f0:	4604      	mov	r4, r0
    JSON_Value *value = json_value_init_number(number);
 80153f2:	f7ff fd87 	bl	8014f04 <json_value_init_number>
    if (value == NULL) {
 80153f6:	4605      	mov	r5, r0
 80153f8:	b158      	cbz	r0, 8015412 <json_array_append_number+0x24>
        return JSONFailure;
    }
    if (json_array_append_value(array, value) == JSONFailure) {
 80153fa:	4601      	mov	r1, r0
 80153fc:	4620      	mov	r0, r4
 80153fe:	f7ff ffd5 	bl	80153ac <json_array_append_value>
 8015402:	1c43      	adds	r3, r0, #1
 8015404:	4604      	mov	r4, r0
 8015406:	d107      	bne.n	8015418 <json_array_append_number+0x2a>
        json_value_free(value);
 8015408:	4628      	mov	r0, r5
 801540a:	f7ff fbf5 	bl	8014bf8 <json_value_free>
        return JSONFailure;
    }
    return JSONSuccess;
}
 801540e:	4620      	mov	r0, r4
 8015410:	bd38      	pop	{r3, r4, r5, pc}
        return JSONFailure;
 8015412:	f04f 34ff 	mov.w	r4, #4294967295
 8015416:	e7fa      	b.n	801540e <json_array_append_number+0x20>
    return JSONSuccess;
 8015418:	2400      	movs	r4, #0
 801541a:	e7f8      	b.n	801540e <json_array_append_number+0x20>

0801541c <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 801541c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015420:	460f      	mov	r7, r1
 8015422:	4616      	mov	r6, r2
    size_t i = 0;
    JSON_Value *old_value;
    if (object == NULL || name == NULL || value == NULL || value->parent != NULL) {
 8015424:	4604      	mov	r4, r0
 8015426:	b328      	cbz	r0, 8015474 <json_object_set_value+0x58>
 8015428:	b321      	cbz	r1, 8015474 <json_object_set_value+0x58>
 801542a:	b31a      	cbz	r2, 8015474 <json_object_set_value+0x58>
 801542c:	6815      	ldr	r5, [r2, #0]
 801542e:	bb0d      	cbnz	r5, 8015474 <json_object_set_value+0x58>
        return JSONFailure;
    }
    old_value = json_object_get_value(object, name);
 8015430:	f7ff f9e6 	bl	8014800 <json_object_get_value>
    if (old_value != NULL) { /* free and overwrite old value */
 8015434:	b930      	cbnz	r0, 8015444 <json_object_set_value+0x28>
                return JSONSuccess;
            }
        }
    }
    /* add new key value pair */
    return json_object_add(object, name, value);
 8015436:	4632      	mov	r2, r6
 8015438:	4639      	mov	r1, r7
 801543a:	4620      	mov	r0, r4
}
 801543c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return json_object_add(object, name, value);
 8015440:	f7fe bf5d 	b.w	80142fe <json_object_add>
        json_value_free(old_value);
 8015444:	f7ff fbd8 	bl	8014bf8 <json_value_free>
    return object ? object->count : 0;
 8015448:	f8d4 800c 	ldr.w	r8, [r4, #12]
        for (i = 0; i < json_object_get_count(object); i++) {
 801544c:	4545      	cmp	r5, r8
 801544e:	d0f2      	beq.n	8015436 <json_object_set_value+0x1a>
            if (strcmp(object->names[i], name) == 0) {
 8015450:	6863      	ldr	r3, [r4, #4]
 8015452:	4639      	mov	r1, r7
 8015454:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015458:	ea4f 0985 	mov.w	r9, r5, lsl #2
 801545c:	f7ee ff30 	bl	80042c0 <strcmp>
 8015460:	b930      	cbnz	r0, 8015470 <json_object_set_value+0x54>
                value->parent = json_object_get_wrapping_value(object);
 8015462:	6823      	ldr	r3, [r4, #0]
 8015464:	6033      	str	r3, [r6, #0]
                object->values[i] = value;
 8015466:	68a3      	ldr	r3, [r4, #8]
 8015468:	f843 6009 	str.w	r6, [r3, r9]
}
 801546c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < json_object_get_count(object); i++) {
 8015470:	3501      	adds	r5, #1
 8015472:	e7eb      	b.n	801544c <json_object_set_value+0x30>
        return JSONFailure;
 8015474:	f04f 30ff 	mov.w	r0, #4294967295
 8015478:	e7f8      	b.n	801546c <json_object_set_value+0x50>

0801547a <json_object_dotset_value>:
        json_value_free(value);
    }
    return status;
}

JSON_Status json_object_dotset_value(JSON_Object *object, const char *name, JSON_Value *value) {
 801547a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801547e:	4604      	mov	r4, r0
 8015480:	460d      	mov	r5, r1
 8015482:	4691      	mov	r9, r2
    const char *dot_pos = NULL;
    JSON_Value *temp_value = NULL, *new_value = NULL;
    JSON_Object *temp_object = NULL, *new_object = NULL;
    JSON_Status status = JSONFailure;
    size_t name_len = 0;
    if (object == NULL || name == NULL || value == NULL) {
 8015484:	b91c      	cbnz	r4, 801548e <json_object_dotset_value+0x14>
    }
    status = json_object_addn(object, name, name_len, new_value);
    if (status != JSONSuccess) {
        json_object_dotremove_internal(new_object, dot_pos + 1, 0);
        json_value_free(new_value);
        return JSONFailure;
 8015486:	f04f 30ff 	mov.w	r0, #4294967295
    }
    return JSONSuccess;
}
 801548a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (object == NULL || name == NULL || value == NULL) {
 801548e:	2d00      	cmp	r5, #0
 8015490:	d0f9      	beq.n	8015486 <json_object_dotset_value+0xc>
 8015492:	f1b9 0f00 	cmp.w	r9, #0
 8015496:	d0f6      	beq.n	8015486 <json_object_dotset_value+0xc>
    dot_pos = strchr(name, '.');
 8015498:	212e      	movs	r1, #46	; 0x2e
 801549a:	4628      	mov	r0, r5
 801549c:	f007 fcaf 	bl	801cdfe <strchr>
    if (dot_pos == NULL) {
 80154a0:	4606      	mov	r6, r0
 80154a2:	b930      	cbnz	r0, 80154b2 <json_object_dotset_value+0x38>
        return json_object_set_value(object, name, value);
 80154a4:	464a      	mov	r2, r9
 80154a6:	4629      	mov	r1, r5
 80154a8:	4620      	mov	r0, r4
}
 80154aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return json_object_set_value(object, name, value);
 80154ae:	f7ff bfb5 	b.w	801541c <json_object_set_value>
    name_len = dot_pos - name;
 80154b2:	eba0 0a05 	sub.w	sl, r0, r5
    temp_value = json_object_getn_value(object, name, name_len);
 80154b6:	4652      	mov	r2, sl
 80154b8:	4629      	mov	r1, r5
 80154ba:	4620      	mov	r0, r4
 80154bc:	f7fe fec2 	bl	8014244 <json_object_getn_value>
    if (temp_value) {
 80154c0:	b138      	cbz	r0, 80154d2 <json_object_dotset_value+0x58>
        if (json_value_get_type(temp_value) != JSONObject) {
 80154c2:	6843      	ldr	r3, [r0, #4]
 80154c4:	2b04      	cmp	r3, #4
 80154c6:	d1de      	bne.n	8015486 <json_object_dotset_value+0xc>
        temp_object = json_value_get_object(temp_value);
 80154c8:	f7ff f9c1 	bl	801484e <json_value_get_object>
        return json_object_dotset_value(temp_object, dot_pos + 1, value);
 80154cc:	1c75      	adds	r5, r6, #1
        temp_object = json_value_get_object(temp_value);
 80154ce:	4604      	mov	r4, r0
        return json_object_dotset_value(temp_object, dot_pos + 1, value);
 80154d0:	e7d8      	b.n	8015484 <json_object_dotset_value+0xa>
    new_value = json_value_init_object();
 80154d2:	f7ff fc35 	bl	8014d40 <json_value_init_object>
    if (new_value == NULL) {
 80154d6:	4607      	mov	r7, r0
 80154d8:	2800      	cmp	r0, #0
 80154da:	d0d4      	beq.n	8015486 <json_object_dotset_value+0xc>
    new_object = json_value_get_object(new_value);
 80154dc:	f7ff f9b7 	bl	801484e <json_value_get_object>
    status = json_object_dotset_value(new_object, dot_pos + 1, value);
 80154e0:	3601      	adds	r6, #1
 80154e2:	464a      	mov	r2, r9
 80154e4:	4631      	mov	r1, r6
    new_object = json_value_get_object(new_value);
 80154e6:	4680      	mov	r8, r0
    status = json_object_dotset_value(new_object, dot_pos + 1, value);
 80154e8:	f7ff ffc7 	bl	801547a <json_object_dotset_value>
    if (status != JSONSuccess) {
 80154ec:	4681      	mov	r9, r0
 80154ee:	b118      	cbz	r0, 80154f8 <json_object_dotset_value+0x7e>
        json_value_free(new_value);
 80154f0:	4638      	mov	r0, r7
 80154f2:	f7ff fb81 	bl	8014bf8 <json_value_free>
 80154f6:	e7c6      	b.n	8015486 <json_object_dotset_value+0xc>
    status = json_object_addn(object, name, name_len, new_value);
 80154f8:	463b      	mov	r3, r7
 80154fa:	4652      	mov	r2, sl
 80154fc:	4629      	mov	r1, r5
 80154fe:	4620      	mov	r0, r4
 8015500:	f7fe fec4 	bl	801428c <json_object_addn>
    if (status != JSONSuccess) {
 8015504:	2800      	cmp	r0, #0
 8015506:	d0c0      	beq.n	801548a <json_object_dotset_value+0x10>
        json_object_dotremove_internal(new_object, dot_pos + 1, 0);
 8015508:	464a      	mov	r2, r9
 801550a:	4631      	mov	r1, r6
 801550c:	4640      	mov	r0, r8
 801550e:	f7ff fbf5 	bl	8014cfc <json_object_dotremove_internal>
 8015512:	e7ed      	b.n	80154f0 <json_object_dotset_value+0x76>

08015514 <json_object_dotset_string>:

JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {
 8015514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015516:	4604      	mov	r4, r0
    JSON_Value *value = json_value_init_string(string);
 8015518:	4610      	mov	r0, r2
JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {
 801551a:	9101      	str	r1, [sp, #4]
    JSON_Value *value = json_value_init_string(string);
 801551c:	f7ff fce6 	bl	8014eec <json_value_init_string>
    if (value == NULL) {
 8015520:	4605      	mov	r5, r0
 8015522:	b168      	cbz	r0, 8015540 <json_object_dotset_string+0x2c>
        return JSONFailure;
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 8015524:	4602      	mov	r2, r0
 8015526:	9901      	ldr	r1, [sp, #4]
 8015528:	4620      	mov	r0, r4
 801552a:	f7ff ffa6 	bl	801547a <json_object_dotset_value>
 801552e:	1c43      	adds	r3, r0, #1
 8015530:	4604      	mov	r4, r0
 8015532:	d108      	bne.n	8015546 <json_object_dotset_string+0x32>
        json_value_free(value);
 8015534:	4628      	mov	r0, r5
 8015536:	f7ff fb5f 	bl	8014bf8 <json_value_free>
        return JSONFailure;
    }
    return JSONSuccess;
}
 801553a:	4620      	mov	r0, r4
 801553c:	b003      	add	sp, #12
 801553e:	bd30      	pop	{r4, r5, pc}
        return JSONFailure;
 8015540:	f04f 34ff 	mov.w	r4, #4294967295
 8015544:	e7f9      	b.n	801553a <json_object_dotset_string+0x26>
    return JSONSuccess;
 8015546:	2400      	movs	r4, #0
 8015548:	e7f7      	b.n	801553a <json_object_dotset_string+0x26>

0801554a <json_object_dotset_number>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_dotset_number(JSON_Object *object, const char *name, double number) {
 801554a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801554c:	4604      	mov	r4, r0
 801554e:	9101      	str	r1, [sp, #4]
    JSON_Value *value = json_value_init_number(number);
 8015550:	f7ff fcd8 	bl	8014f04 <json_value_init_number>
    if (value == NULL) {
 8015554:	4605      	mov	r5, r0
 8015556:	b168      	cbz	r0, 8015574 <json_object_dotset_number+0x2a>
        return JSONFailure;
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 8015558:	4602      	mov	r2, r0
 801555a:	9901      	ldr	r1, [sp, #4]
 801555c:	4620      	mov	r0, r4
 801555e:	f7ff ff8c 	bl	801547a <json_object_dotset_value>
 8015562:	1c43      	adds	r3, r0, #1
 8015564:	4604      	mov	r4, r0
 8015566:	d108      	bne.n	801557a <json_object_dotset_number+0x30>
        json_value_free(value);
 8015568:	4628      	mov	r0, r5
 801556a:	f7ff fb45 	bl	8014bf8 <json_value_free>
        return JSONFailure;
    }
    return JSONSuccess;
}
 801556e:	4620      	mov	r0, r4
 8015570:	b003      	add	sp, #12
 8015572:	bd30      	pop	{r4, r5, pc}
        return JSONFailure;
 8015574:	f04f 34ff 	mov.w	r4, #4294967295
 8015578:	e7f9      	b.n	801556e <json_object_dotset_number+0x24>
    return JSONSuccess;
 801557a:	2400      	movs	r4, #0
 801557c:	e7f7      	b.n	801556e <json_object_dotset_number+0x24>
	...

08015580 <json_set_allocation_functions>:
int json_boolean(const JSON_Value *value) {
    return json_value_get_boolean(value);
}

void json_set_allocation_functions(JSON_Malloc_Function malloc_fun, JSON_Free_Function free_fun) {
    parson_malloc = malloc_fun;
 8015580:	4b01      	ldr	r3, [pc, #4]	; (8015588 <json_set_allocation_functions+0x8>)
    parson_free = free_fun;
 8015582:	e9c3 0100 	strd	r0, r1, [r3]
}
 8015586:	4770      	bx	lr
 8015588:	200004f8 	.word	0x200004f8

0801558c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 801558c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80155c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8015590:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8015592:	e003      	b.n	801559c <LoopCopyDataInit>

08015594 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8015594:	4b0c      	ldr	r3, [pc, #48]	; (80155c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8015596:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8015598:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 801559a:	3104      	adds	r1, #4

0801559c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 801559c:	480b      	ldr	r0, [pc, #44]	; (80155cc <LoopForever+0xa>)
	ldr	r3, =_edata
 801559e:	4b0c      	ldr	r3, [pc, #48]	; (80155d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80155a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80155a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80155a4:	d3f6      	bcc.n	8015594 <CopyDataInit>
	ldr	r2, =_sbss
 80155a6:	4a0b      	ldr	r2, [pc, #44]	; (80155d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80155a8:	e002      	b.n	80155b0 <LoopFillZerobss>

080155aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80155aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80155ac:	f842 3b04 	str.w	r3, [r2], #4

080155b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80155b0:	4b09      	ldr	r3, [pc, #36]	; (80155d8 <LoopForever+0x16>)
	cmp	r2, r3
 80155b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80155b4:	d3f9      	bcc.n	80155aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80155b6:	f7f2 ffcd 	bl	8008554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80155ba:	f006 fd8f 	bl	801c0dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80155be:	f003 fb67 	bl	8018c90 <main>

080155c2 <LoopForever>:

LoopForever:
    b LoopForever
 80155c2:	e7fe      	b.n	80155c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80155c4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80155c8:	08039908 	.word	0x08039908
	ldr	r0, =_sdata
 80155cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80155d0:	200007d0 	.word	0x200007d0
	ldr	r2, =_sbss
 80155d4:	200007d0 	.word	0x200007d0
	ldr	r3, = _ebss
 80155d8:	2001424c 	.word	0x2001424c

080155dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80155dc:	e7fe      	b.n	80155dc <ADC1_IRQHandler>

080155de <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80155de:	2001      	movs	r0, #1
 80155e0:	4770      	bx	lr

080155e2 <_kill>:

int _kill(int pid, int sig)
{
 80155e2:	b508      	push	{r3, lr}
	errno = EINVAL;
 80155e4:	f006 fbbc 	bl	801bd60 <__errno>
 80155e8:	2316      	movs	r3, #22
 80155ea:	6003      	str	r3, [r0, #0]
	return -1;
}
 80155ec:	f04f 30ff 	mov.w	r0, #4294967295
 80155f0:	bd08      	pop	{r3, pc}

080155f2 <_exit>:

void _exit (int status)
{
 80155f2:	b508      	push	{r3, lr}
	errno = EINVAL;
 80155f4:	f006 fbb4 	bl	801bd60 <__errno>
 80155f8:	2316      	movs	r3, #22
 80155fa:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80155fc:	e7fe      	b.n	80155fc <_exit+0xa>

080155fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80155fe:	b570      	push	{r4, r5, r6, lr}
 8015600:	460d      	mov	r5, r1
 8015602:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015604:	460e      	mov	r6, r1
 8015606:	1b73      	subs	r3, r6, r5
 8015608:	429c      	cmp	r4, r3
 801560a:	dc01      	bgt.n	8015610 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 801560c:	4620      	mov	r0, r4
 801560e:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8015610:	f3af 8000 	nop.w
 8015614:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015618:	e7f5      	b.n	8015606 <_read+0x8>

0801561a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801561a:	b570      	push	{r4, r5, r6, lr}
 801561c:	460d      	mov	r5, r1
 801561e:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015620:	460e      	mov	r6, r1
 8015622:	1b73      	subs	r3, r6, r5
 8015624:	429c      	cmp	r4, r3
 8015626:	dc01      	bgt.n	801562c <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8015628:	4620      	mov	r0, r4
 801562a:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 801562c:	f816 0b01 	ldrb.w	r0, [r6], #1
 8015630:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015634:	e7f5      	b.n	8015622 <_write+0x8>
	...

08015638 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8015638:	4a0a      	ldr	r2, [pc, #40]	; (8015664 <_sbrk+0x2c>)
 801563a:	6811      	ldr	r1, [r2, #0]
{
 801563c:	b508      	push	{r3, lr}
 801563e:	4603      	mov	r3, r0
	if (heap_end == 0)
 8015640:	b909      	cbnz	r1, 8015646 <_sbrk+0xe>
		heap_end = &end;
 8015642:	4909      	ldr	r1, [pc, #36]	; (8015668 <_sbrk+0x30>)
 8015644:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8015646:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8015648:	4669      	mov	r1, sp
 801564a:	4403      	add	r3, r0
 801564c:	428b      	cmp	r3, r1
 801564e:	d906      	bls.n	801565e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8015650:	f006 fb86 	bl	801bd60 <__errno>
 8015654:	230c      	movs	r3, #12
 8015656:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8015658:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 801565c:	bd08      	pop	{r3, pc}
	heap_end += incr;
 801565e:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8015660:	e7fc      	b.n	801565c <_sbrk+0x24>
 8015662:	bf00      	nop
 8015664:	200114c8 	.word	0x200114c8
 8015668:	20014250 	.word	0x20014250

0801566c <_close>:

int _close(int file)
{
	return -1;
}
 801566c:	f04f 30ff 	mov.w	r0, #4294967295
 8015670:	4770      	bx	lr

08015672 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8015672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015676:	604b      	str	r3, [r1, #4]
	return 0;
}
 8015678:	2000      	movs	r0, #0
 801567a:	4770      	bx	lr

0801567c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 801567c:	2001      	movs	r0, #1
 801567e:	4770      	bx	lr

08015680 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8015680:	2000      	movs	r0, #0
 8015682:	4770      	bx	lr

08015684 <ExtExtConfigUidCommandCallback>:
 * @param  uint8_t **UID STM32 UID Return value
 * @retval None
 */
static void ExtExtConfigUidCommandCallback(uint8_t **UID)
{
  *UID = (uint8_t *)STM32_UUID;
 8015684:	4b01      	ldr	r3, [pc, #4]	; (801568c <ExtExtConfigUidCommandCallback+0x8>)
 8015686:	6003      	str	r3, [r0, #0]
}
 8015688:	4770      	bx	lr
 801568a:	bf00      	nop
 801568c:	1fff7590 	.word	0x1fff7590

08015690 <ExtConfigVersionFwCommandCallback>:
 * @brief  Callback Function for answering to VersionFw command
 * @param  uint8_t *Answer Return String
 * @retval None
 */
static void ExtConfigVersionFwCommandCallback(uint8_t *Answer)
{
 8015690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  sprintf((char *)Answer,"%s_%s_%c.%c.%c",
 8015692:	2334      	movs	r3, #52	; 0x34
 8015694:	2230      	movs	r2, #48	; 0x30
 8015696:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801569a:	2332      	movs	r3, #50	; 0x32
 801569c:	9300      	str	r3, [sp, #0]
 801569e:	4a04      	ldr	r2, [pc, #16]	; (80156b0 <ExtConfigVersionFwCommandCallback+0x20>)
 80156a0:	4b04      	ldr	r3, [pc, #16]	; (80156b4 <ExtConfigVersionFwCommandCallback+0x24>)
 80156a2:	4905      	ldr	r1, [pc, #20]	; (80156b8 <ExtConfigVersionFwCommandCallback+0x28>)
 80156a4:	f007 fb48 	bl	801cd38 <siprintf>
      BLE_STM32_MICRO,
      BLE_FW_PACKAGENAME,
      BLE_VERSION_FW_MAJOR,
      BLE_VERSION_FW_MINOR,
      BLE_VERSION_FW_PATCH);
}
 80156a8:	b005      	add	sp, #20
 80156aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80156ae:	bf00      	nop
 80156b0:	08023e45 	.word	0x08023e45
 80156b4:	08023e35 	.word	0x08023e35
 80156b8:	08023e4a 	.word	0x08023e4a

080156bc <ExtConfigHelpCommandCallback>:
  sprintf((char *)Answer,"List of available command:\n"
 80156bc:	4901      	ldr	r1, [pc, #4]	; (80156c4 <ExtConfigHelpCommandCallback+0x8>)
 80156be:	f007 bbab 	b.w	801ce18 <strcpy>
 80156c2:	bf00      	nop
 80156c4:	08023e59 	.word	0x08023e59

080156c8 <ExtConfigCustomCommandCallback>:
{
 80156c8:	b530      	push	{r4, r5, lr}
 80156ca:	b0c1      	sub	sp, #260	; 0x104
 80156cc:	4604      	mov	r4, r0
  BLE_MANAGER_PRINTF("Received Custom Command:\r\n");
 80156ce:	495e      	ldr	r1, [pc, #376]	; (8015848 <ExtConfigCustomCommandCallback+0x180>)
 80156d0:	4668      	mov	r0, sp
 80156d2:	f007 fba1 	bl	801ce18 <strcpy>
 80156d6:	211a      	movs	r1, #26
 80156d8:	4668      	mov	r0, sp
 80156da:	f004 f967 	bl	80199ac <CDC_Fill_Buffer>
  BLE_MANAGER_PRINTF("\tCommand Name: <%s>\r\n", CustomCommand->CommandName);
 80156de:	6822      	ldr	r2, [r4, #0]
 80156e0:	495a      	ldr	r1, [pc, #360]	; (801584c <ExtConfigCustomCommandCallback+0x184>)
 80156e2:	4668      	mov	r0, sp
 80156e4:	f007 fb28 	bl	801cd38 <siprintf>
 80156e8:	4601      	mov	r1, r0
 80156ea:	4668      	mov	r0, sp
 80156ec:	f004 f95e 	bl	80199ac <CDC_Fill_Buffer>
  BLE_MANAGER_PRINTF("\tCommand Type: <%d>\r\n", CustomCommand->CommandType);
 80156f0:	7922      	ldrb	r2, [r4, #4]
 80156f2:	4957      	ldr	r1, [pc, #348]	; (8015850 <ExtConfigCustomCommandCallback+0x188>)
 80156f4:	4668      	mov	r0, sp
 80156f6:	f007 fb1f 	bl	801cd38 <siprintf>
 80156fa:	4601      	mov	r1, r0
 80156fc:	4668      	mov	r0, sp
 80156fe:	f004 f955 	bl	80199ac <CDC_Fill_Buffer>
  switch(CustomCommand->CommandType) { 
 8015702:	7923      	ldrb	r3, [r4, #4]
 8015704:	3b01      	subs	r3, #1
 8015706:	2b04      	cmp	r3, #4
 8015708:	d862      	bhi.n	80157d0 <ExtConfigCustomCommandCallback+0x108>
 801570a:	e8df f003 	tbb	[pc, r3]
 801570e:	5803      	.short	0x5803
 8015710:	2663      	.short	0x2663
 8015712:	66          	.byte	0x66
 8015713:	00          	.byte	0x00
      BLE_MANAGER_PRINTF("\tInt    Value: <%ld>\r\n", CustomCommand->IntValue);
 8015714:	68a2      	ldr	r2, [r4, #8]
 8015716:	494f      	ldr	r1, [pc, #316]	; (8015854 <ExtConfigCustomCommandCallback+0x18c>)
 8015718:	4668      	mov	r0, sp
 801571a:	f007 fb0d 	bl	801cd38 <siprintf>
 801571e:	4601      	mov	r1, r0
 8015720:	4668      	mov	r0, sp
 8015722:	f004 f943 	bl	80199ac <CDC_Fill_Buffer>
      if(!strncmp((char *)CustomCommand->CommandName,"FFT_Overlapping",15))
 8015726:	6825      	ldr	r5, [r4, #0]
 8015728:	494b      	ldr	r1, [pc, #300]	; (8015858 <ExtConfigCustomCommandCallback+0x190>)
 801572a:	220f      	movs	r2, #15
 801572c:	4628      	mov	r0, r5
 801572e:	f007 fb7b 	bl	801ce28 <strncmp>
 8015732:	b938      	cbnz	r0, 8015744 <ExtConfigCustomCommandCallback+0x7c>
        MotionSP_Parameters.FftOvl= CustomCommand->IntValue;
 8015734:	4b49      	ldr	r3, [pc, #292]	; (801585c <ExtConfigCustomCommandCallback+0x194>)
 8015736:	68a2      	ldr	r2, [r4, #8]
 8015738:	729a      	strb	r2, [r3, #10]
}
 801573a:	b041      	add	sp, #260	; 0x104
 801573c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        SaveVibrationParamToMemory();
 8015740:	f003 ba62 	b.w	8018c08 <SaveVibrationParamToMemory>
      } else if(!strncmp((char *)CustomCommand->CommandName,"AquisitionTime",14)) {
 8015744:	4946      	ldr	r1, [pc, #280]	; (8015860 <ExtConfigCustomCommandCallback+0x198>)
 8015746:	220e      	movs	r2, #14
 8015748:	4628      	mov	r0, r5
 801574a:	f007 fb6d 	bl	801ce28 <strncmp>
 801574e:	2800      	cmp	r0, #0
 8015750:	d13e      	bne.n	80157d0 <ExtConfigCustomCommandCallback+0x108>
        MotionSP_Parameters.tacq= CustomCommand->IntValue;
 8015752:	68a2      	ldr	r2, [r4, #8]
 8015754:	4b41      	ldr	r3, [pc, #260]	; (801585c <ExtConfigCustomCommandCallback+0x194>)
        AcceleroParams.fs= CustomCommand->IntValue;
 8015756:	811a      	strh	r2, [r3, #8]
        SaveVibrationParamToMemory();
 8015758:	e7ef      	b.n	801573a <ExtConfigCustomCommandCallback+0x72>
      BLE_MANAGER_PRINTF("\tInt     Enum: <%ld>\r\n", CustomCommand->IntValue);
 801575a:	68a2      	ldr	r2, [r4, #8]
 801575c:	4941      	ldr	r1, [pc, #260]	; (8015864 <ExtConfigCustomCommandCallback+0x19c>)
 801575e:	4668      	mov	r0, sp
 8015760:	f007 faea 	bl	801cd38 <siprintf>
 8015764:	4601      	mov	r1, r0
 8015766:	4668      	mov	r0, sp
 8015768:	f004 f920 	bl	80199ac <CDC_Fill_Buffer>
      if(!strncmp((char *)CustomCommand->CommandName,"SensorFullScale",15))
 801576c:	6825      	ldr	r5, [r4, #0]
 801576e:	493e      	ldr	r1, [pc, #248]	; (8015868 <ExtConfigCustomCommandCallback+0x1a0>)
 8015770:	220f      	movs	r2, #15
 8015772:	4628      	mov	r0, r5
 8015774:	f007 fb58 	bl	801ce28 <strncmp>
 8015778:	b910      	cbnz	r0, 8015780 <ExtConfigCustomCommandCallback+0xb8>
        AcceleroParams.fs= CustomCommand->IntValue;
 801577a:	68a2      	ldr	r2, [r4, #8]
 801577c:	4b3b      	ldr	r3, [pc, #236]	; (801586c <ExtConfigCustomCommandCallback+0x1a4>)
 801577e:	e7ea      	b.n	8015756 <ExtConfigCustomCommandCallback+0x8e>
      } else if(!strncmp((char *)CustomCommand->CommandName,"SensorOutputDataRate",20)) {
 8015780:	493b      	ldr	r1, [pc, #236]	; (8015870 <ExtConfigCustomCommandCallback+0x1a8>)
 8015782:	2214      	movs	r2, #20
 8015784:	4628      	mov	r0, r5
 8015786:	f007 fb4f 	bl	801ce28 <strncmp>
 801578a:	b920      	cbnz	r0, 8015796 <ExtConfigCustomCommandCallback+0xce>
        AcceleroParams.AccOdr= CustomCommand->IntValue;
 801578c:	4b37      	ldr	r3, [pc, #220]	; (801586c <ExtConfigCustomCommandCallback+0x1a4>)
 801578e:	8922      	ldrh	r2, [r4, #8]
 8015790:	801a      	strh	r2, [r3, #0]
          MotionSP_Parameters.window= FLAT_TOP;
 8015792:	809a      	strh	r2, [r3, #4]
 8015794:	e7d1      	b.n	801573a <ExtConfigCustomCommandCallback+0x72>
      } else if(!strncmp((char *)CustomCommand->CommandName,"FFT_Size",8)) {
 8015796:	4937      	ldr	r1, [pc, #220]	; (8015874 <ExtConfigCustomCommandCallback+0x1ac>)
 8015798:	2208      	movs	r2, #8
 801579a:	4628      	mov	r0, r5
 801579c:	f007 fb44 	bl	801ce28 <strncmp>
 80157a0:	b918      	cbnz	r0, 80157aa <ExtConfigCustomCommandCallback+0xe2>
        MotionSP_Parameters.FftSize= CustomCommand->IntValue;
 80157a2:	4b2e      	ldr	r3, [pc, #184]	; (801585c <ExtConfigCustomCommandCallback+0x194>)
 80157a4:	68a2      	ldr	r2, [r4, #8]
 80157a6:	801a      	strh	r2, [r3, #0]
        SaveVibrationParamToMemory();
 80157a8:	e7c7      	b.n	801573a <ExtConfigCustomCommandCallback+0x72>
      } else if(!strncmp((char *)CustomCommand->CommandName,"NumberOfBubrange",16)) {
 80157aa:	4933      	ldr	r1, [pc, #204]	; (8015878 <ExtConfigCustomCommandCallback+0x1b0>)
 80157ac:	2210      	movs	r2, #16
 80157ae:	4628      	mov	r0, r5
 80157b0:	f007 fb3a 	bl	801ce28 <strncmp>
 80157b4:	b960      	cbnz	r0, 80157d0 <ExtConfigCustomCommandCallback+0x108>
        MotionSP_Parameters.subrange_num= CustomCommand->IntValue;
 80157b6:	4b29      	ldr	r3, [pc, #164]	; (801585c <ExtConfigCustomCommandCallback+0x194>)
 80157b8:	68a2      	ldr	r2, [r4, #8]
 80157ba:	819a      	strh	r2, [r3, #12]
        SaveVibrationParamToMemory();
 80157bc:	e7bd      	b.n	801573a <ExtConfigCustomCommandCallback+0x72>
      BLE_MANAGER_PRINTF("\tInt    Value: <%ld>\r\n", CustomCommand->IntValue);
 80157be:	68a2      	ldr	r2, [r4, #8]
 80157c0:	4924      	ldr	r1, [pc, #144]	; (8015854 <ExtConfigCustomCommandCallback+0x18c>)
      BLE_MANAGER_PRINTF("\tString Value: <%s>\r\n", CustomCommand->StringValue);
 80157c2:	4668      	mov	r0, sp
 80157c4:	f007 fab8 	bl	801cd38 <siprintf>
 80157c8:	4601      	mov	r1, r0
 80157ca:	4668      	mov	r0, sp
 80157cc:	f004 f8ee 	bl	80199ac <CDC_Fill_Buffer>
}
 80157d0:	b041      	add	sp, #260	; 0x104
 80157d2:	bd30      	pop	{r4, r5, pc}
      BLE_MANAGER_PRINTF("\tString Value: <%s>\r\n", CustomCommand->StringValue);
 80157d4:	68e2      	ldr	r2, [r4, #12]
 80157d6:	4929      	ldr	r1, [pc, #164]	; (801587c <ExtConfigCustomCommandCallback+0x1b4>)
 80157d8:	e7f3      	b.n	80157c2 <ExtConfigCustomCommandCallback+0xfa>
      BLE_MANAGER_PRINTF("\tString  Enum: <%s>\r\n", CustomCommand->StringValue);
 80157da:	68e2      	ldr	r2, [r4, #12]
 80157dc:	4928      	ldr	r1, [pc, #160]	; (8015880 <ExtConfigCustomCommandCallback+0x1b8>)
 80157de:	4668      	mov	r0, sp
 80157e0:	f007 faaa 	bl	801cd38 <siprintf>
 80157e4:	4601      	mov	r1, r0
 80157e6:	4668      	mov	r0, sp
 80157e8:	f004 f8e0 	bl	80199ac <CDC_Fill_Buffer>
      if(!strncmp((char *)CustomCommand->CommandName,"FFT_WindowType",15))
 80157ec:	4925      	ldr	r1, [pc, #148]	; (8015884 <ExtConfigCustomCommandCallback+0x1bc>)
 80157ee:	6820      	ldr	r0, [r4, #0]
 80157f0:	f7ee fd66 	bl	80042c0 <strcmp>
 80157f4:	2800      	cmp	r0, #0
 80157f6:	d1eb      	bne.n	80157d0 <ExtConfigCustomCommandCallback+0x108>
        if(!strncmp((char *)CustomCommand->StringValue,"Rectangular",11)) {
 80157f8:	68e4      	ldr	r4, [r4, #12]
 80157fa:	4923      	ldr	r1, [pc, #140]	; (8015888 <ExtConfigCustomCommandCallback+0x1c0>)
 80157fc:	220b      	movs	r2, #11
 80157fe:	4620      	mov	r0, r4
 8015800:	f007 fb12 	bl	801ce28 <strncmp>
 8015804:	b910      	cbnz	r0, 801580c <ExtConfigCustomCommandCallback+0x144>
          MotionSP_Parameters.window= RECTANGULAR;
 8015806:	4b15      	ldr	r3, [pc, #84]	; (801585c <ExtConfigCustomCommandCallback+0x194>)
 8015808:	8098      	strh	r0, [r3, #4]
 801580a:	e796      	b.n	801573a <ExtConfigCustomCommandCallback+0x72>
        } else if(!strncmp((char *)CustomCommand->StringValue,"Hanning",7)) {
 801580c:	491f      	ldr	r1, [pc, #124]	; (801588c <ExtConfigCustomCommandCallback+0x1c4>)
 801580e:	2207      	movs	r2, #7
 8015810:	4620      	mov	r0, r4
 8015812:	f007 fb09 	bl	801ce28 <strncmp>
 8015816:	b910      	cbnz	r0, 801581e <ExtConfigCustomCommandCallback+0x156>
          MotionSP_Parameters.window= HANNING;
 8015818:	4b10      	ldr	r3, [pc, #64]	; (801585c <ExtConfigCustomCommandCallback+0x194>)
 801581a:	2201      	movs	r2, #1
 801581c:	e7b9      	b.n	8015792 <ExtConfigCustomCommandCallback+0xca>
        } else if(!strncmp((char *)CustomCommand->StringValue,"Hamming",7)) {
 801581e:	491c      	ldr	r1, [pc, #112]	; (8015890 <ExtConfigCustomCommandCallback+0x1c8>)
 8015820:	2207      	movs	r2, #7
 8015822:	4620      	mov	r0, r4
 8015824:	f007 fb00 	bl	801ce28 <strncmp>
 8015828:	b910      	cbnz	r0, 8015830 <ExtConfigCustomCommandCallback+0x168>
          MotionSP_Parameters.window= HAMMING;
 801582a:	4b0c      	ldr	r3, [pc, #48]	; (801585c <ExtConfigCustomCommandCallback+0x194>)
 801582c:	2202      	movs	r2, #2
 801582e:	e7b0      	b.n	8015792 <ExtConfigCustomCommandCallback+0xca>
        } else if(!strncmp((char *)CustomCommand->StringValue,"FlatTop",7)) {
 8015830:	4918      	ldr	r1, [pc, #96]	; (8015894 <ExtConfigCustomCommandCallback+0x1cc>)
 8015832:	2207      	movs	r2, #7
 8015834:	4620      	mov	r0, r4
 8015836:	f007 faf7 	bl	801ce28 <strncmp>
 801583a:	2800      	cmp	r0, #0
 801583c:	f47f af7d 	bne.w	801573a <ExtConfigCustomCommandCallback+0x72>
          MotionSP_Parameters.window= FLAT_TOP;
 8015840:	4b06      	ldr	r3, [pc, #24]	; (801585c <ExtConfigCustomCommandCallback+0x194>)
 8015842:	2203      	movs	r2, #3
 8015844:	e7a5      	b.n	8015792 <ExtConfigCustomCommandCallback+0xca>
 8015846:	bf00      	nop
 8015848:	08023ef5 	.word	0x08023ef5
 801584c:	08023f10 	.word	0x08023f10
 8015850:	08023f26 	.word	0x08023f26
 8015854:	08023f3c 	.word	0x08023f3c
 8015858:	08023f53 	.word	0x08023f53
 801585c:	20002e14 	.word	0x20002e14
 8015860:	08023f63 	.word	0x08023f63
 8015864:	08023f72 	.word	0x08023f72
 8015868:	08023f89 	.word	0x08023f89
 801586c:	20011538 	.word	0x20011538
 8015870:	08023f99 	.word	0x08023f99
 8015874:	08023fae 	.word	0x08023fae
 8015878:	08023fb7 	.word	0x08023fb7
 801587c:	08023fc8 	.word	0x08023fc8
 8015880:	08023fde 	.word	0x08023fde
 8015884:	08023ff4 	.word	0x08023ff4
 8015888:	08023e11 	.word	0x08023e11
 801588c:	08023e1d 	.word	0x08023e1d
 8015890:	08023e25 	.word	0x08023e25
 8015894:	08023e2d 	.word	0x08023e2d

08015898 <ExtConfigReadCustomCommandsCallback>:
{
 8015898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int32_t ValidIntValues[]={2,4,8,16,BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN};
 801589c:	4c73      	ldr	r4, [pc, #460]	; (8015a6c <ExtConfigReadCustomCommandsCallback+0x1d4>)
    if(AddCustomCommand("SensorFullScale", //Name
 801589e:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 8015a9c <ExtConfigReadCustomCommandsCallback+0x204>
{
 80158a2:	b0d0      	sub	sp, #320	; 0x140
 80158a4:	4681      	mov	r9, r0
  ClearCustomCommandsList();
 80158a6:	f7fb fb8b 	bl	8010fc0 <ClearCustomCommandsList>
    int32_t ValidIntValues[]={2,4,8,16,BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN};
 80158aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80158ac:	af05      	add	r7, sp, #20
 80158ae:	463d      	mov	r5, r7
 80158b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80158b2:	6823      	ldr	r3, [r4, #0]
 80158b4:	602b      	str	r3, [r5, #0]
    if(AddCustomCommand("SensorFullScale", //Name
 80158b6:	4b6e      	ldr	r3, [pc, #440]	; (8015a70 <ExtConfigReadCustomCommandsCallback+0x1d8>)
 80158b8:	486e      	ldr	r0, [pc, #440]	; (8015a74 <ExtConfigReadCustomCommandsCallback+0x1dc>)
 80158ba:	f8cd 900c 	str.w	r9, [sp, #12]
 80158be:	f04f 0800 	mov.w	r8, #0
 80158c2:	461a      	mov	r2, r3
 80158c4:	e9cd 7800 	strd	r7, r8, [sp]
 80158c8:	f8cd a008 	str.w	sl, [sp, #8]
 80158cc:	2104      	movs	r1, #4
 80158ce:	f7fb fb89 	bl	8010fe4 <AddCustomCommand>
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","SensorFullScale");
 80158d2:	4a68      	ldr	r2, [pc, #416]	; (8015a74 <ExtConfigReadCustomCommandsCallback+0x1dc>)
    if(AddCustomCommand("SensorFullScale", //Name
 80158d4:	2800      	cmp	r0, #0
 80158d6:	f000 80a3 	beq.w	8015a20 <ExtConfigReadCustomCommandsCallback+0x188>
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","SensorFullScale");
 80158da:	4967      	ldr	r1, [pc, #412]	; (8015a78 <ExtConfigReadCustomCommandsCallback+0x1e0>)
 80158dc:	a810      	add	r0, sp, #64	; 0x40
 80158de:	f007 fa2b 	bl	801cd38 <siprintf>
    int32_t ValidIntValues[]={13,26,52,104,208,416,833,1660,3330,6660,BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN};
 80158e2:	1d26      	adds	r6, r4, #4
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","SensorFullScale");
 80158e4:	2121      	movs	r1, #33	; 0x21
 80158e6:	a810      	add	r0, sp, #64	; 0x40
 80158e8:	f004 f860 	bl	80199ac <CDC_Fill_Buffer>
    int32_t ValidIntValues[]={13,26,52,104,208,416,833,1660,3330,6660,BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN};
 80158ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80158ee:	463d      	mov	r5, r7
 80158f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80158f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80158f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80158f6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    if(AddCustomCommand("SensorOutputDataRate", //Name
 80158fa:	4b5d      	ldr	r3, [pc, #372]	; (8015a70 <ExtConfigReadCustomCommandsCallback+0x1d8>)
    int32_t ValidIntValues[]={13,26,52,104,208,416,833,1660,3330,6660,BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN};
 80158fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if(AddCustomCommand("SensorOutputDataRate", //Name
 8015900:	e9cd a902 	strd	sl, r9, [sp, #8]
 8015904:	e9cd 7800 	strd	r7, r8, [sp]
 8015908:	485c      	ldr	r0, [pc, #368]	; (8015a7c <ExtConfigReadCustomCommandsCallback+0x1e4>)
 801590a:	461a      	mov	r2, r3
 801590c:	2104      	movs	r1, #4
 801590e:	f7fb fb69 	bl	8010fe4 <AddCustomCommand>
 8015912:	b958      	cbnz	r0, 801592c <ExtConfigReadCustomCommandsCallback+0x94>
      BLE_MANAGER_PRINTF("Error Adding Command <%s>\r\n","SensorOutputDataRate");
 8015914:	495a      	ldr	r1, [pc, #360]	; (8015a80 <ExtConfigReadCustomCommandsCallback+0x1e8>)
 8015916:	4a59      	ldr	r2, [pc, #356]	; (8015a7c <ExtConfigReadCustomCommandsCallback+0x1e4>)
 8015918:	a810      	add	r0, sp, #64	; 0x40
 801591a:	f007 fa0d 	bl	801cd38 <siprintf>
 801591e:	212d      	movs	r1, #45	; 0x2d
     BLE_MANAGER_PRINTF("Error Adding Command <%s>\r\n","AquisitionTime");
 8015920:	a810      	add	r0, sp, #64	; 0x40
 8015922:	f004 f843 	bl	80199ac <CDC_Fill_Buffer>
}
 8015926:	b050      	add	sp, #320	; 0x140
 8015928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","SensorOutputDataRate");
 801592c:	4a53      	ldr	r2, [pc, #332]	; (8015a7c <ExtConfigReadCustomCommandsCallback+0x1e4>)
 801592e:	4952      	ldr	r1, [pc, #328]	; (8015a78 <ExtConfigReadCustomCommandsCallback+0x1e0>)
 8015930:	a810      	add	r0, sp, #64	; 0x40
 8015932:	f007 fa01 	bl	801cd38 <siprintf>
    char *ValidStringValues[]={"Rectangular", "Hanning","Hamming","FlatTop",NULL};
 8015936:	f104 0630 	add.w	r6, r4, #48	; 0x30
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","SensorOutputDataRate");
 801593a:	2126      	movs	r1, #38	; 0x26
 801593c:	a810      	add	r0, sp, #64	; 0x40
 801593e:	f004 f835 	bl	80199ac <CDC_Fill_Buffer>
    char *ValidStringValues[]={"Rectangular", "Hanning","Hamming","FlatTop",NULL};
 8015942:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015944:	463d      	mov	r5, r7
 8015946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015948:	6833      	ldr	r3, [r6, #0]
 801594a:	602b      	str	r3, [r5, #0]
    if(AddCustomCommand("FFT_WindowType", //Name
 801594c:	4b4d      	ldr	r3, [pc, #308]	; (8015a84 <ExtConfigReadCustomCommandsCallback+0x1ec>)
 801594e:	484e      	ldr	r0, [pc, #312]	; (8015a88 <ExtConfigReadCustomCommandsCallback+0x1f0>)
 8015950:	f8cd 900c 	str.w	r9, [sp, #12]
 8015954:	e9cd 8301 	strd	r8, r3, [sp, #4]
 8015958:	4b45      	ldr	r3, [pc, #276]	; (8015a70 <ExtConfigReadCustomCommandsCallback+0x1d8>)
 801595a:	9700      	str	r7, [sp, #0]
 801595c:	461a      	mov	r2, r3
 801595e:	2105      	movs	r1, #5
 8015960:	f7fb fb40 	bl	8010fe4 <AddCustomCommand>
 8015964:	b930      	cbnz	r0, 8015974 <ExtConfigReadCustomCommandsCallback+0xdc>
      BLE_MANAGER_PRINTF("Error Adding Command <%s>\r\n","FFT_WindowType");
 8015966:	4a48      	ldr	r2, [pc, #288]	; (8015a88 <ExtConfigReadCustomCommandsCallback+0x1f0>)
     BLE_MANAGER_PRINTF("Error Adding Command <%s>\r\n","AquisitionTime");
 8015968:	4945      	ldr	r1, [pc, #276]	; (8015a80 <ExtConfigReadCustomCommandsCallback+0x1e8>)
 801596a:	a810      	add	r0, sp, #64	; 0x40
 801596c:	f007 f9e4 	bl	801cd38 <siprintf>
 8015970:	2127      	movs	r1, #39	; 0x27
 8015972:	e7d5      	b.n	8015920 <ExtConfigReadCustomCommandsCallback+0x88>
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","FFT_WindowType");
 8015974:	4a44      	ldr	r2, [pc, #272]	; (8015a88 <ExtConfigReadCustomCommandsCallback+0x1f0>)
 8015976:	4940      	ldr	r1, [pc, #256]	; (8015a78 <ExtConfigReadCustomCommandsCallback+0x1e0>)
 8015978:	a810      	add	r0, sp, #64	; 0x40
 801597a:	f007 f9dd 	bl	801cd38 <siprintf>
 801597e:	2120      	movs	r1, #32
 8015980:	a810      	add	r0, sp, #64	; 0x40
 8015982:	f004 f813 	bl	80199ac <CDC_Fill_Buffer>
    int32_t ValidIntValues[]={256,512,1024,BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN};
 8015986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801598a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801598c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    if(AddCustomCommand("FFT_Size", //Name
 8015990:	4b37      	ldr	r3, [pc, #220]	; (8015a70 <ExtConfigReadCustomCommandsCallback+0x1d8>)
 8015992:	483e      	ldr	r0, [pc, #248]	; (8015a8c <ExtConfigReadCustomCommandsCallback+0x1f4>)
 8015994:	e9cd a902 	strd	sl, r9, [sp, #8]
 8015998:	e9cd 7800 	strd	r7, r8, [sp]
 801599c:	461a      	mov	r2, r3
 801599e:	2104      	movs	r1, #4
 80159a0:	f7fb fb20 	bl	8010fe4 <AddCustomCommand>
 80159a4:	b930      	cbnz	r0, 80159b4 <ExtConfigReadCustomCommandsCallback+0x11c>
      BLE_MANAGER_PRINTF("Error Adding Command <%s>\r\n","FFT_Size");
 80159a6:	4936      	ldr	r1, [pc, #216]	; (8015a80 <ExtConfigReadCustomCommandsCallback+0x1e8>)
 80159a8:	4a38      	ldr	r2, [pc, #224]	; (8015a8c <ExtConfigReadCustomCommandsCallback+0x1f4>)
 80159aa:	a810      	add	r0, sp, #64	; 0x40
 80159ac:	f007 f9c4 	bl	801cd38 <siprintf>
 80159b0:	2121      	movs	r1, #33	; 0x21
 80159b2:	e7b5      	b.n	8015920 <ExtConfigReadCustomCommandsCallback+0x88>
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","FFT_Size");
 80159b4:	4a35      	ldr	r2, [pc, #212]	; (8015a8c <ExtConfigReadCustomCommandsCallback+0x1f4>)
 80159b6:	4930      	ldr	r1, [pc, #192]	; (8015a78 <ExtConfigReadCustomCommandsCallback+0x1e0>)
 80159b8:	a810      	add	r0, sp, #64	; 0x40
 80159ba:	f007 f9bd 	bl	801cd38 <siprintf>
    int32_t ValidIntValues[]={8,16,32,64,BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN};
 80159be:	3454      	adds	r4, #84	; 0x54
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","FFT_Size");
 80159c0:	211a      	movs	r1, #26
 80159c2:	a810      	add	r0, sp, #64	; 0x40
 80159c4:	f003 fff2 	bl	80199ac <CDC_Fill_Buffer>
    int32_t ValidIntValues[]={8,16,32,64,BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN};
 80159c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80159ca:	463d      	mov	r5, r7
 80159cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80159ce:	6823      	ldr	r3, [r4, #0]
 80159d0:	602b      	str	r3, [r5, #0]
    if(AddCustomCommand("NumberOfSubrange", //Name
 80159d2:	4b27      	ldr	r3, [pc, #156]	; (8015a70 <ExtConfigReadCustomCommandsCallback+0x1d8>)
 80159d4:	482e      	ldr	r0, [pc, #184]	; (8015a90 <ExtConfigReadCustomCommandsCallback+0x1f8>)
 80159d6:	e9cd a902 	strd	sl, r9, [sp, #8]
 80159da:	e9cd 7800 	strd	r7, r8, [sp]
 80159de:	461a      	mov	r2, r3
 80159e0:	2104      	movs	r1, #4
 80159e2:	f7fb faff 	bl	8010fe4 <AddCustomCommand>
 80159e6:	b930      	cbnz	r0, 80159f6 <ExtConfigReadCustomCommandsCallback+0x15e>
      BLE_MANAGER_PRINTF("Error Adding Command <%s>\r\n","NumberOfSubrange");
 80159e8:	4925      	ldr	r1, [pc, #148]	; (8015a80 <ExtConfigReadCustomCommandsCallback+0x1e8>)
 80159ea:	4a29      	ldr	r2, [pc, #164]	; (8015a90 <ExtConfigReadCustomCommandsCallback+0x1f8>)
 80159ec:	a810      	add	r0, sp, #64	; 0x40
 80159ee:	f007 f9a3 	bl	801cd38 <siprintf>
 80159f2:	2129      	movs	r1, #41	; 0x29
 80159f4:	e794      	b.n	8015920 <ExtConfigReadCustomCommandsCallback+0x88>
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","NumberOfSubrange");
 80159f6:	4a26      	ldr	r2, [pc, #152]	; (8015a90 <ExtConfigReadCustomCommandsCallback+0x1f8>)
 80159f8:	491f      	ldr	r1, [pc, #124]	; (8015a78 <ExtConfigReadCustomCommandsCallback+0x1e0>)
 80159fa:	a810      	add	r0, sp, #64	; 0x40
 80159fc:	f007 f99c 	bl	801cd38 <siprintf>
 8015a00:	2122      	movs	r1, #34	; 0x22
 8015a02:	a810      	add	r0, sp, #64	; 0x40
 8015a04:	f003 ffd2 	bl	80199ac <CDC_Fill_Buffer>
  if(AddCustomCommand("FFT_Overlapping", //Name
 8015a08:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015a0c:	e9cd 8800 	strd	r8, r8, [sp]
 8015a10:	4820      	ldr	r0, [pc, #128]	; (8015a94 <ExtConfigReadCustomCommandsCallback+0x1fc>)
 8015a12:	235f      	movs	r3, #95	; 0x5f
 8015a14:	2205      	movs	r2, #5
 8015a16:	2101      	movs	r1, #1
 8015a18:	f7fb fae4 	bl	8010fe4 <AddCustomCommand>
 8015a1c:	b930      	cbnz	r0, 8015a2c <ExtConfigReadCustomCommandsCallback+0x194>
     BLE_MANAGER_PRINTF("Error Adding Command <%s>\r\n","FFT_Overlapping");
 8015a1e:	4a1d      	ldr	r2, [pc, #116]	; (8015a94 <ExtConfigReadCustomCommandsCallback+0x1fc>)
 8015a20:	4917      	ldr	r1, [pc, #92]	; (8015a80 <ExtConfigReadCustomCommandsCallback+0x1e8>)
 8015a22:	a810      	add	r0, sp, #64	; 0x40
 8015a24:	f007 f988 	bl	801cd38 <siprintf>
 8015a28:	2128      	movs	r1, #40	; 0x28
 8015a2a:	e779      	b.n	8015920 <ExtConfigReadCustomCommandsCallback+0x88>
    BLE_MANAGER_PRINTF("Added Command <%s>\r\n","FFT_Overlapping");
 8015a2c:	4a19      	ldr	r2, [pc, #100]	; (8015a94 <ExtConfigReadCustomCommandsCallback+0x1fc>)
 8015a2e:	4912      	ldr	r1, [pc, #72]	; (8015a78 <ExtConfigReadCustomCommandsCallback+0x1e0>)
 8015a30:	a810      	add	r0, sp, #64	; 0x40
 8015a32:	f007 f981 	bl	801cd38 <siprintf>
 8015a36:	2121      	movs	r1, #33	; 0x21
 8015a38:	a810      	add	r0, sp, #64	; 0x40
 8015a3a:	f003 ffb7 	bl	80199ac <CDC_Fill_Buffer>
  if(AddCustomCommand("AquisitionTime", //Name
 8015a3e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015a42:	e9cd 8800 	strd	r8, r8, [sp]
 8015a46:	4814      	ldr	r0, [pc, #80]	; (8015a98 <ExtConfigReadCustomCommandsCallback+0x200>)
 8015a48:	f242 7310 	movw	r3, #10000	; 0x2710
 8015a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015a50:	2101      	movs	r1, #1
 8015a52:	f7fb fac7 	bl	8010fe4 <AddCustomCommand>
 8015a56:	b908      	cbnz	r0, 8015a5c <ExtConfigReadCustomCommandsCallback+0x1c4>
     BLE_MANAGER_PRINTF("Error Adding Command <%s>\r\n","AquisitionTime");
 8015a58:	4a0f      	ldr	r2, [pc, #60]	; (8015a98 <ExtConfigReadCustomCommandsCallback+0x200>)
 8015a5a:	e785      	b.n	8015968 <ExtConfigReadCustomCommandsCallback+0xd0>
    BLE_MANAGER_PRINTF("Added Command <%s>\r\n","AquisitionTime");
 8015a5c:	4906      	ldr	r1, [pc, #24]	; (8015a78 <ExtConfigReadCustomCommandsCallback+0x1e0>)
 8015a5e:	4a0e      	ldr	r2, [pc, #56]	; (8015a98 <ExtConfigReadCustomCommandsCallback+0x200>)
 8015a60:	a810      	add	r0, sp, #64	; 0x40
 8015a62:	f007 f969 	bl	801cd38 <siprintf>
 8015a66:	2120      	movs	r1, #32
 8015a68:	e75a      	b.n	8015920 <ExtConfigReadCustomCommandsCallback+0x88>
 8015a6a:	bf00      	nop
 8015a6c:	08021b74 	.word	0x08021b74
 8015a70:	deadbeef 	.word	0xdeadbeef
 8015a74:	08023f89 	.word	0x08023f89
 8015a78:	0802401b 	.word	0x0802401b
 8015a7c:	08023f99 	.word	0x08023f99
 8015a80:	08024030 	.word	0x08024030
 8015a84:	0802404c 	.word	0x0802404c
 8015a88:	08023ff4 	.word	0x08023ff4
 8015a8c:	08023fae 	.word	0x08023fae
 8015a90:	08024063 	.word	0x08024063
 8015a94:	08023f53 	.word	0x08023f53
 8015a98:	08023f63 	.word	0x08023f63
 8015a9c:	08024003 	.word	0x08024003

08015aa0 <ExtConfigSetNameCommandCallback>:
 * @brief  Callback Function for managing the SetName command
 * @param  uint8_t *NewName
 * @retval None
 */
static void ExtConfigSetNameCommandCallback(uint8_t *NewName)
{ 
 8015aa0:	b510      	push	{r4, lr}
 8015aa2:	b0c0      	sub	sp, #256	; 0x100
  BLE_MANAGER_PRINTF("New Board Name = <%s>\r\n", NewName);
 8015aa4:	4602      	mov	r2, r0
{ 
 8015aa6:	4604      	mov	r4, r0
  BLE_MANAGER_PRINTF("New Board Name = <%s>\r\n", NewName);
 8015aa8:	4916      	ldr	r1, [pc, #88]	; (8015b04 <ExtConfigSetNameCommandCallback+0x64>)
 8015aaa:	4668      	mov	r0, sp
 8015aac:	f007 f944 	bl	801cd38 <siprintf>
 8015ab0:	4601      	mov	r1, r0
 8015ab2:	4668      	mov	r0, sp
 8015ab4:	f003 ff7a 	bl	80199ac <CDC_Fill_Buffer>
  /* Change the Board Name */
  sprintf(BlueNRG_StackValue.BoardName,"%s",NewName);
 8015ab8:	4b13      	ldr	r3, [pc, #76]	; (8015b08 <ExtConfigSetNameCommandCallback+0x68>)
 8015aba:	4621      	mov	r1, r4
 8015abc:	4618      	mov	r0, r3
 8015abe:	f007 f9ab 	bl	801ce18 <strcpy>
  
  for(int i=0; i<7; i++)
    NodeName[i+1]= BlueNRG_StackValue.BoardName[i];
 8015ac2:	4912      	ldr	r1, [pc, #72]	; (8015b0c <ExtConfigSetNameCommandCallback+0x6c>)
 8015ac4:	6802      	ldr	r2, [r0, #0]
 8015ac6:	600a      	str	r2, [r1, #0]
 8015ac8:	8882      	ldrh	r2, [r0, #4]
 8015aca:	808a      	strh	r2, [r1, #4]
 8015acc:	7983      	ldrb	r3, [r0, #6]
 8015ace:	718b      	strb	r3, [r1, #6]
  
  MDM_SaveGMD(GMD_NODE_NAME,(void *)&NodeName);
 8015ad0:	2008      	movs	r0, #8
 8015ad2:	3901      	subs	r1, #1
 8015ad4:	f7fa f9c0 	bl	800fe58 <MDM_SaveGMD>
  NecessityToSaveMetaDataManager=1;
 8015ad8:	4b0d      	ldr	r3, [pc, #52]	; (8015b10 <ExtConfigSetNameCommandCallback+0x70>)
  
  BLE_MANAGER_PRINTF("\nThe node nome has been updated\r\n");
 8015ada:	490e      	ldr	r1, [pc, #56]	; (8015b14 <ExtConfigSetNameCommandCallback+0x74>)
  NecessityToSaveMetaDataManager=1;
 8015adc:	2201      	movs	r2, #1
  BLE_MANAGER_PRINTF("\nThe node nome has been updated\r\n");
 8015ade:	4668      	mov	r0, sp
  NecessityToSaveMetaDataManager=1;
 8015ae0:	601a      	str	r2, [r3, #0]
  BLE_MANAGER_PRINTF("\nThe node nome has been updated\r\n");
 8015ae2:	f007 f999 	bl	801ce18 <strcpy>
 8015ae6:	2121      	movs	r1, #33	; 0x21
 8015ae8:	4668      	mov	r0, sp
 8015aea:	f003 ff5f 	bl	80199ac <CDC_Fill_Buffer>
  BLE_MANAGER_PRINTF("Disconnecting and riconnecting to see the new node name\r\n");
 8015aee:	490a      	ldr	r1, [pc, #40]	; (8015b18 <ExtConfigSetNameCommandCallback+0x78>)
 8015af0:	4668      	mov	r0, sp
 8015af2:	f007 f991 	bl	801ce18 <strcpy>
 8015af6:	2139      	movs	r1, #57	; 0x39
 8015af8:	4668      	mov	r0, sp
 8015afa:	f003 ff57 	bl	80199ac <CDC_Fill_Buffer>
}
 8015afe:	b040      	add	sp, #256	; 0x100
 8015b00:	bd10      	pop	{r4, pc}
 8015b02:	bf00      	nop
 8015b04:	08024074 	.word	0x08024074
 8015b08:	20002985 	.word	0x20002985
 8015b0c:	200124b7 	.word	0x200124b7
 8015b10:	20001798 	.word	0x20001798
 8015b14:	0802408c 	.word	0x0802408c
 8015b18:	080240ae 	.word	0x080240ae

08015b1c <ExtConfigPowerStatusCommandCallback>:
{
 8015b1c:	b530      	push	{r4, r5, lr}
  stbc02_State_TypeDef BC_State = {(stbc02_ChgState_TypeDef)0, ""};
 8015b1e:	4b1b      	ldr	r3, [pc, #108]	; (8015b8c <ExtConfigPowerStatusCommandCallback+0x70>)
{
 8015b20:	b095      	sub	sp, #84	; 0x54
  stbc02_State_TypeDef BC_State = {(stbc02_ChgState_TypeDef)0, ""};
 8015b22:	2500      	movs	r5, #0
 8015b24:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8015b28:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8015b2c:	221f      	movs	r2, #31
 8015b2e:	4629      	mov	r1, r5
{
 8015b30:	4604      	mov	r4, r0
  stbc02_State_TypeDef BC_State = {(stbc02_ChgState_TypeDef)0, ""};
 8015b32:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
 8015b36:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8015b3a:	f006 fb93 	bl	801c264 <memset>
  BSP_BC_GetVoltageAndLevel(&Voltage,&BatteryLevel);
 8015b3e:	a903      	add	r1, sp, #12
 8015b40:	a804      	add	r0, sp, #16
  uint32_t BatteryLevel= 0;
 8015b42:	9503      	str	r5, [sp, #12]
  BSP_BC_GetVoltageAndLevel(&Voltage,&BatteryLevel);
 8015b44:	f7f1 fcb0 	bl	80074a8 <BSP_BC_GetVoltageAndLevel>
  BSP_BC_GetState(&BC_State);
 8015b48:	a80b      	add	r0, sp, #44	; 0x2c
 8015b4a:	f7f1 fde5 	bl	8007718 <BSP_BC_GetState>
  switch(BC_State.Id) {
 8015b4e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8015b52:	ab05      	add	r3, sp, #20
 8015b54:	2a04      	cmp	r2, #4
 8015b56:	d817      	bhi.n	8015b88 <ExtConfigPowerStatusCommandCallback+0x6c>
 8015b58:	e8df f002 	tbb	[pc, r2]
 8015b5c:	12031610 	.word	0x12031610
 8015b60:	14          	.byte	0x14
 8015b61:	00          	.byte	0x00
      sprintf((char *)Status,"Low Battery");
 8015b62:	490b      	ldr	r1, [pc, #44]	; (8015b90 <ExtConfigPowerStatusCommandCallback+0x74>)
      sprintf((char *)Status,"Unknown");
 8015b64:	4618      	mov	r0, r3
 8015b66:	f007 f957 	bl	801ce18 <strcpy>
  sprintf((char *)Answer,"Battery Status:\n"
 8015b6a:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8015b6e:	9000      	str	r0, [sp, #0]
 8015b70:	4908      	ldr	r1, [pc, #32]	; (8015b94 <ExtConfigPowerStatusCommandCallback+0x78>)
 8015b72:	4620      	mov	r0, r4
 8015b74:	f007 f8e0 	bl	801cd38 <siprintf>
}
 8015b78:	b015      	add	sp, #84	; 0x54
 8015b7a:	bd30      	pop	{r4, r5, pc}
      sprintf((char *)Status,"Discharging");
 8015b7c:	4906      	ldr	r1, [pc, #24]	; (8015b98 <ExtConfigPowerStatusCommandCallback+0x7c>)
 8015b7e:	e7f1      	b.n	8015b64 <ExtConfigPowerStatusCommandCallback+0x48>
      sprintf((char *)Status,"Plugged Not Charging");
 8015b80:	4906      	ldr	r1, [pc, #24]	; (8015b9c <ExtConfigPowerStatusCommandCallback+0x80>)
 8015b82:	e7ef      	b.n	8015b64 <ExtConfigPowerStatusCommandCallback+0x48>
      sprintf((char *)Status,"Charging");
 8015b84:	4906      	ldr	r1, [pc, #24]	; (8015ba0 <ExtConfigPowerStatusCommandCallback+0x84>)
 8015b86:	e7ed      	b.n	8015b64 <ExtConfigPowerStatusCommandCallback+0x48>
      sprintf((char *)Status,"Unknown");
 8015b88:	4906      	ldr	r1, [pc, #24]	; (8015ba4 <ExtConfigPowerStatusCommandCallback+0x88>)
 8015b8a:	e7eb      	b.n	8015b64 <ExtConfigPowerStatusCommandCallback+0x48>
 8015b8c:	08021b74 	.word	0x08021b74
 8015b90:	080240e8 	.word	0x080240e8
 8015b94:	0802411d 	.word	0x0802411d
 8015b98:	080240f4 	.word	0x080240f4
 8015b9c:	08024100 	.word	0x08024100
 8015ba0:	0802410c 	.word	0x0802410c
 8015ba4:	08024115 	.word	0x08024115

08015ba8 <ExtConfigInfoCommandCallback>:
{
 8015ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bac:	b091      	sub	sp, #68	; 0x44
  getBlueNRG2_Version(&hwVersion, &fwVersion);
 8015bae:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
{
 8015bb2:	4680      	mov	r8, r0
  getBlueNRG2_Version(&hwVersion, &fwVersion);
 8015bb4:	f10d 003d 	add.w	r0, sp, #61	; 0x3d
 8015bb8:	f002 ff2e 	bl	8018a18 <getBlueNRG2_Version>
  sprintf((char *)Answer,"STMicroelectronics %s:\n"
 8015bbc:	f8bd 403e 	ldrh.w	r4, [sp, #62]	; 0x3e
 8015bc0:	f89d 903d 	ldrb.w	r9, [sp, #61]	; 0x3d
    HAL_GetHalVersion() >>24,
 8015bc4:	f7f2 fd34 	bl	8008630 <HAL_GetHalVersion>
 8015bc8:	4605      	mov	r5, r0
    (HAL_GetHalVersion() >>16)&0xFF,
 8015bca:	f7f2 fd31 	bl	8008630 <HAL_GetHalVersion>
 8015bce:	4606      	mov	r6, r0
    (HAL_GetHalVersion() >> 8)&0xFF,
 8015bd0:	f7f2 fd2e 	bl	8008630 <HAL_GetHalVersion>
 8015bd4:	4607      	mov	r7, r0
    HAL_GetHalVersion()      &0xFF,
 8015bd6:	f7f2 fd2b 	bl	8008630 <HAL_GetHalVersion>
  sprintf((char *)Answer,"STMicroelectronics %s:\n"
 8015bda:	4b16      	ldr	r3, [pc, #88]	; (8015c34 <ExtConfigInfoCommandCallback+0x8c>)
 8015bdc:	930d      	str	r3, [sp, #52]	; 0x34
 8015bde:	4b16      	ldr	r3, [pc, #88]	; (8015c38 <ExtConfigInfoCommandCallback+0x90>)
 8015be0:	930c      	str	r3, [sp, #48]	; 0x30
 8015be2:	f004 030f 	and.w	r3, r4, #15
 8015be6:	3361      	adds	r3, #97	; 0x61
 8015be8:	9307      	str	r3, [sp, #28]
 8015bea:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8015bee:	9306      	str	r3, [sp, #24]
 8015bf0:	f009 030f 	and.w	r3, r9, #15
 8015bf4:	9304      	str	r3, [sp, #16]
 8015bf6:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8015bfa:	9303      	str	r3, [sp, #12]
 8015bfc:	4b0f      	ldr	r3, [pc, #60]	; (8015c3c <ExtConfigInfoCommandCallback+0x94>)
 8015bfe:	9302      	str	r3, [sp, #8]
 8015c00:	b2c0      	uxtb	r0, r0
 8015c02:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8015c06:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8015c0a:	0e2d      	lsrs	r5, r5, #24
 8015c0c:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8015c10:	2334      	movs	r3, #52	; 0x34
 8015c12:	2230      	movs	r2, #48	; 0x30
 8015c14:	e9cd 3200 	strd	r3, r2, [sp]
 8015c18:	900b      	str	r0, [sp, #44]	; 0x2c
 8015c1a:	4a09      	ldr	r2, [pc, #36]	; (8015c40 <ExtConfigInfoCommandCallback+0x98>)
 8015c1c:	4909      	ldr	r1, [pc, #36]	; (8015c44 <ExtConfigInfoCommandCallback+0x9c>)
 8015c1e:	970a      	str	r7, [sp, #40]	; 0x28
 8015c20:	9609      	str	r6, [sp, #36]	; 0x24
 8015c22:	9508      	str	r5, [sp, #32]
 8015c24:	9405      	str	r4, [sp, #20]
 8015c26:	2332      	movs	r3, #50	; 0x32
 8015c28:	4640      	mov	r0, r8
 8015c2a:	f007 f885 	bl	801cd38 <siprintf>
}
 8015c2e:	b011      	add	sp, #68	; 0x44
 8015c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c34:	080241f7 	.word	0x080241f7
 8015c38:	08024200 	.word	0x08024200
 8015c3c:	0802420c 	.word	0x0802420c
 8015c40:	08023e35 	.word	0x08023e35
 8015c44:	08024165 	.word	0x08024165

08015c48 <DisconnectionCompletedFunction>:
{
 8015c48:	b570      	push	{r4, r5, r6, lr}
  if(EnvironmentalTimerEnabled) {
 8015c4a:	4d2b      	ldr	r5, [pc, #172]	; (8015cf8 <DisconnectionCompletedFunction+0xb0>)
  connected = FALSE;
 8015c4c:	4c2b      	ldr	r4, [pc, #172]	; (8015cfc <DisconnectionCompletedFunction+0xb4>)
  if(EnvironmentalTimerEnabled) {
 8015c4e:	782b      	ldrb	r3, [r5, #0]
  connected = FALSE;
 8015c50:	2100      	movs	r1, #0
{
 8015c52:	b0c0      	sub	sp, #256	; 0x100
  connected = FALSE;
 8015c54:	7021      	strb	r1, [r4, #0]
  if(EnvironmentalTimerEnabled) {
 8015c56:	b13b      	cbz	r3, 8015c68 <DisconnectionCompletedFunction+0x20>
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK){
 8015c58:	4829      	ldr	r0, [pc, #164]	; (8015d00 <DisconnectionCompletedFunction+0xb8>)
 8015c5a:	f7f7 fed3 	bl	800da04 <HAL_TIM_OC_Stop_IT>
 8015c5e:	b108      	cbz	r0, 8015c64 <DisconnectionCompletedFunction+0x1c>
      Error_Handler();
 8015c60:	f002 ffd1 	bl	8018c06 <Error_Handler>
    EnvironmentalTimerEnabled= 0;
 8015c64:	2300      	movs	r3, #0
 8015c66:	702b      	strb	r3, [r5, #0]
  if(AudioLevelTimerEnabled) {
 8015c68:	4d26      	ldr	r5, [pc, #152]	; (8015d04 <DisconnectionCompletedFunction+0xbc>)
 8015c6a:	782b      	ldrb	r3, [r5, #0]
 8015c6c:	b153      	cbz	r3, 8015c84 <DisconnectionCompletedFunction+0x3c>
    AudioLevelEnable= 0;
 8015c6e:	4b26      	ldr	r3, [pc, #152]	; (8015d08 <DisconnectionCompletedFunction+0xc0>)
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 8015c70:	4823      	ldr	r0, [pc, #140]	; (8015d00 <DisconnectionCompletedFunction+0xb8>)
    AudioLevelEnable= 0;
 8015c72:	2600      	movs	r6, #0
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 8015c74:	2104      	movs	r1, #4
    AudioLevelEnable= 0;
 8015c76:	701e      	strb	r6, [r3, #0]
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 8015c78:	f7f7 fec4 	bl	800da04 <HAL_TIM_OC_Stop_IT>
 8015c7c:	b108      	cbz	r0, 8015c82 <DisconnectionCompletedFunction+0x3a>
      Error_Handler();
 8015c7e:	f002 ffc2 	bl	8018c06 <Error_Handler>
    AudioLevelTimerEnabled= 0;
 8015c82:	702e      	strb	r6, [r5, #0]
  if(InertialTimerEnabled){
 8015c84:	4d21      	ldr	r5, [pc, #132]	; (8015d0c <DisconnectionCompletedFunction+0xc4>)
 8015c86:	782b      	ldrb	r3, [r5, #0]
 8015c88:	b143      	cbz	r3, 8015c9c <DisconnectionCompletedFunction+0x54>
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_3) != HAL_OK){
 8015c8a:	481d      	ldr	r0, [pc, #116]	; (8015d00 <DisconnectionCompletedFunction+0xb8>)
 8015c8c:	2108      	movs	r1, #8
 8015c8e:	f7f7 feb9 	bl	800da04 <HAL_TIM_OC_Stop_IT>
 8015c92:	b108      	cbz	r0, 8015c98 <DisconnectionCompletedFunction+0x50>
      Error_Handler();
 8015c94:	f002 ffb7 	bl	8018c06 <Error_Handler>
    InertialTimerEnabled= 0;
 8015c98:	2300      	movs	r3, #0
 8015c9a:	702b      	strb	r3, [r5, #0]
  if(BatteryTimerEnabled) {
 8015c9c:	4d1c      	ldr	r5, [pc, #112]	; (8015d10 <DisconnectionCompletedFunction+0xc8>)
 8015c9e:	782b      	ldrb	r3, [r5, #0]
 8015ca0:	b15b      	cbz	r3, 8015cba <DisconnectionCompletedFunction+0x72>
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8015ca2:	4817      	ldr	r0, [pc, #92]	; (8015d00 <DisconnectionCompletedFunction+0xb8>)
 8015ca4:	210c      	movs	r1, #12
 8015ca6:	f7f7 fead 	bl	800da04 <HAL_TIM_OC_Stop_IT>
 8015caa:	b108      	cbz	r0, 8015cb0 <DisconnectionCompletedFunction+0x68>
      Error_Handler();
 8015cac:	f002 ffab 	bl	8018c06 <Error_Handler>
    BatteryTimerEnabled= 0;
 8015cb0:	2300      	movs	r3, #0
    BSP_BC_CmdSend(BATMS_OFF);
 8015cb2:	2009      	movs	r0, #9
    BatteryTimerEnabled= 0;
 8015cb4:	702b      	strb	r3, [r5, #0]
    BSP_BC_CmdSend(BATMS_OFF);
 8015cb6:	f7f1 fb91 	bl	80073dc <BSP_BC_CmdSend>
    if(PredictiveMaintenance)
 8015cba:	4d16      	ldr	r5, [pc, #88]	; (8015d14 <DisconnectionCompletedFunction+0xcc>)
 8015cbc:	682b      	ldr	r3, [r5, #0]
 8015cbe:	b153      	cbz	r3, 8015cd6 <DisconnectionCompletedFunction+0x8e>
      disable_FIFO();
 8015cc0:	f001 fc3e 	bl	8017540 <disable_FIFO>
      EnableDisable_ACC_HP_Filter(0);
 8015cc4:	2000      	movs	r0, #0
 8015cc6:	f001 f809 	bl	8016cdc <EnableDisable_ACC_HP_Filter>
      FFT_Alarm= 0;
 8015cca:	4a13      	ldr	r2, [pc, #76]	; (8015d18 <DisconnectionCompletedFunction+0xd0>)
      PredictiveMaintenance= 0;
 8015ccc:	2300      	movs	r3, #0
 8015cce:	602b      	str	r3, [r5, #0]
      FFT_Alarm= 0;
 8015cd0:	6013      	str	r3, [r2, #0]
      MotionSP_Running = 0;
 8015cd2:	4a12      	ldr	r2, [pc, #72]	; (8015d1c <DisconnectionCompletedFunction+0xd4>)
 8015cd4:	7013      	strb	r3, [r2, #0]
  SizeOfUpdateBlueFW = 0;
 8015cd6:	2300      	movs	r3, #0
  BLE_MANAGER_PRINTF("Call to DisconnectionCompletedFunction\r\n");
 8015cd8:	4911      	ldr	r1, [pc, #68]	; (8015d20 <DisconnectionCompletedFunction+0xd8>)
  SizeOfUpdateBlueFW = 0;
 8015cda:	6063      	str	r3, [r4, #4]
  BLE_MANAGER_PRINTF("Call to DisconnectionCompletedFunction\r\n");
 8015cdc:	4668      	mov	r0, sp
 8015cde:	f007 f89b 	bl	801ce18 <strcpy>
 8015ce2:	2128      	movs	r1, #40	; 0x28
 8015ce4:	4668      	mov	r0, sp
 8015ce6:	f003 fe61 	bl	80199ac <CDC_Fill_Buffer>
  BLE_MANAGER_DELAY(100);
 8015cea:	2064      	movs	r0, #100	; 0x64
}
 8015cec:	b040      	add	sp, #256	; 0x100
 8015cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BLE_MANAGER_DELAY(100);
 8015cf2:	f002 bf79 	b.w	8018be8 <HAL_Delay>
 8015cf6:	bf00      	nop
 8015cf8:	200124be 	.word	0x200124be
 8015cfc:	200114d0 	.word	0x200114d0
 8015d00:	20012438 	.word	0x20012438
 8015d04:	200124bf 	.word	0x200124bf
 8015d08:	2001242c 	.word	0x2001242c
 8015d0c:	200124c8 	.word	0x200124c8
 8015d10:	200124c9 	.word	0x200124c9
 8015d14:	200124cc 	.word	0x200124cc
 8015d18:	20011cbc 	.word	0x20011cbc
 8015d1c:	20011cd0 	.word	0x20011cd0
 8015d20:	0802421e 	.word	0x0802421e

08015d24 <ConnectionCompletedFunction>:
{
 8015d24:	b500      	push	{lr}
  connected = TRUE;
 8015d26:	4b09      	ldr	r3, [pc, #36]	; (8015d4c <ConnectionCompletedFunction+0x28>)
  BLE_MANAGER_PRINTF("Call to ConnectionCompletedFunction\r\n");
 8015d28:	4909      	ldr	r1, [pc, #36]	; (8015d50 <ConnectionCompletedFunction+0x2c>)
  BLE_ConnectionHandle = ConnectionHandle;
 8015d2a:	8118      	strh	r0, [r3, #8]
{
 8015d2c:	b0c1      	sub	sp, #260	; 0x104
  connected = TRUE;
 8015d2e:	2201      	movs	r2, #1
  BLE_MANAGER_PRINTF("Call to ConnectionCompletedFunction\r\n");
 8015d30:	4668      	mov	r0, sp
  connected = TRUE;
 8015d32:	701a      	strb	r2, [r3, #0]
  BLE_MANAGER_PRINTF("Call to ConnectionCompletedFunction\r\n");
 8015d34:	f007 f870 	bl	801ce18 <strcpy>
 8015d38:	2125      	movs	r1, #37	; 0x25
 8015d3a:	4668      	mov	r0, sp
 8015d3c:	f003 fe36 	bl	80199ac <CDC_Fill_Buffer>
  BLE_MANAGER_DELAY(100);
 8015d40:	2064      	movs	r0, #100	; 0x64
}
 8015d42:	b041      	add	sp, #260	; 0x104
 8015d44:	f85d eb04 	ldr.w	lr, [sp], #4
  BLE_MANAGER_DELAY(100);
 8015d48:	f002 bf4e 	b.w	8018be8 <HAL_Delay>
 8015d4c:	200114d0 	.word	0x200114d0
 8015d50:	08024247 	.word	0x08024247

08015d54 <DebugConsoleParsing.part.0>:
static uint32_t DebugConsoleParsing(uint8_t * att_data, uint8_t data_length)
 8015d54:	b500      	push	{lr}
 8015d56:	460a      	mov	r2, r1
 8015d58:	b0c3      	sub	sp, #268	; 0x10c
    int8_t RetValue = UpdateFWBlueMS(&SizeOfUpdateBlueFW,att_data, data_length,1);
 8015d5a:	4601      	mov	r1, r0
 8015d5c:	2301      	movs	r3, #1
 8015d5e:	4811      	ldr	r0, [pc, #68]	; (8015da4 <DebugConsoleParsing.part.0+0x50>)
 8015d60:	f002 f862 	bl	8017e28 <UpdateFWBlueMS>
 8015d64:	f88d 0007 	strb.w	r0, [sp, #7]
    if(RetValue!=0) {
 8015d68:	b1b8      	cbz	r0, 8015d9a <DebugConsoleParsing.part.0+0x46>
      Term_Update((uint8_t *)&RetValue,1);
 8015d6a:	2101      	movs	r1, #1
 8015d6c:	f10d 0007 	add.w	r0, sp, #7
 8015d70:	f7fb fb04 	bl	801137c <Term_Update>
      if(RetValue==1) {
 8015d74:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8015d78:	2b01      	cmp	r3, #1
 8015d7a:	d10e      	bne.n	8015d9a <DebugConsoleParsing.part.0+0x46>
        PREDMNT1_PRINTF("%s will restart in 5 seconds\r\n",PREDMNT1_PACKAGENAME);
 8015d7c:	4a0a      	ldr	r2, [pc, #40]	; (8015da8 <DebugConsoleParsing.part.0+0x54>)
 8015d7e:	490b      	ldr	r1, [pc, #44]	; (8015dac <DebugConsoleParsing.part.0+0x58>)
 8015d80:	a802      	add	r0, sp, #8
 8015d82:	f006 ffd9 	bl	801cd38 <siprintf>
 8015d86:	212b      	movs	r1, #43	; 0x2b
 8015d88:	a802      	add	r0, sp, #8
 8015d8a:	f003 fe0f 	bl	80199ac <CDC_Fill_Buffer>
        HAL_Delay(5000);
 8015d8e:	f241 3088 	movw	r0, #5000	; 0x1388
 8015d92:	f002 ff29 	bl	8018be8 <HAL_Delay>
        HAL_NVIC_SystemReset();
 8015d96:	f7f3 fbc1 	bl	800951c <HAL_NVIC_SystemReset>
}
 8015d9a:	2000      	movs	r0, #0
 8015d9c:	b043      	add	sp, #268	; 0x10c
 8015d9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015da2:	bf00      	nop
 8015da4:	200114d4 	.word	0x200114d4
 8015da8:	08023e35 	.word	0x08023e35
 8015dac:	0802426d 	.word	0x0802426d

08015db0 <ConfigCommandParsing.constprop.0>:
static uint32_t ConfigCommandParsing(uint8_t * att_data, uint8_t data_length)
 8015db0:	b510      	push	{r4, lr}
 8015db2:	6803      	ldr	r3, [r0, #0]
  FeatureMask = (att_data[3]) | (att_data[2]<<8) | (att_data[1]<<16) | (att_data[0]<<24);
 8015db4:	492a      	ldr	r1, [pc, #168]	; (8015e60 <ConfigCommandParsing.constprop.0+0xb0>)
  uint8_t Command = att_data[4];
 8015db6:	7904      	ldrb	r4, [r0, #4]
 8015db8:	ba1b      	rev	r3, r3
  FeatureMask = (att_data[3]) | (att_data[2]<<8) | (att_data[1]<<16) | (att_data[0]<<24);
 8015dba:	60cb      	str	r3, [r1, #12]
  switch (FeatureMask) {
 8015dbc:	68ca      	ldr	r2, [r1, #12]
  uint8_t Data    = att_data[5];
 8015dbe:	7943      	ldrb	r3, [r0, #5]
  switch (FeatureMask) {
 8015dc0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
static uint32_t ConfigCommandParsing(uint8_t * att_data, uint8_t data_length)
 8015dc4:	b0c2      	sub	sp, #264	; 0x108
  switch (FeatureMask) {
 8015dc6:	d012      	beq.n	8015dee <ConfigCommandParsing.constprop.0+0x3e>
 8015dc8:	d818      	bhi.n	8015dfc <ConfigCommandParsing.constprop.0+0x4c>
 8015dca:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8015dce:	d01f      	beq.n	8015e10 <ConfigCommandParsing.constprop.0+0x60>
 8015dd0:	d807      	bhi.n	8015de2 <ConfigCommandParsing.constprop.0+0x32>
 8015dd2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8015dd6:	d01b      	beq.n	8015e10 <ConfigCommandParsing.constprop.0+0x60>
 8015dd8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8015ddc:	d018      	beq.n	8015e10 <ConfigCommandParsing.constprop.0+0x60>
  uint32_t SendItBack = 1;
 8015dde:	2001      	movs	r0, #1
  return SendItBack;
 8015de0:	e034      	b.n	8015e4c <ConfigCommandParsing.constprop.0+0x9c>
  switch (FeatureMask) {
 8015de2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8015de6:	d013      	beq.n	8015e10 <ConfigCommandParsing.constprop.0+0x60>
 8015de8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8015dec:	d1f7      	bne.n	8015dde <ConfigCommandParsing.constprop.0+0x2e>
      switch(Command) {
 8015dee:	2cff      	cmp	r4, #255	; 0xff
 8015df0:	d1f5      	bne.n	8015dde <ConfigCommandParsing.constprop.0+0x2e>
          if(Data!=0) {
 8015df2:	481c      	ldr	r0, [pc, #112]	; (8015e64 <ConfigCommandParsing.constprop.0+0xb4>)
          if(Data!=0) {
 8015df4:	b983      	cbnz	r3, 8015e18 <ConfigCommandParsing.constprop.0+0x68>
            uhCCR2_Val  = DEFAULT_uhCCR2_Val;
 8015df6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8015dfa:	e013      	b.n	8015e24 <ConfigCommandParsing.constprop.0+0x74>
  switch (FeatureMask) {
 8015dfc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8015e00:	d0f5      	beq.n	8015dee <ConfigCommandParsing.constprop.0+0x3e>
 8015e02:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8015e06:	d1ea      	bne.n	8015dde <ConfigCommandParsing.constprop.0+0x2e>
      switch(Command) {
 8015e08:	2cff      	cmp	r4, #255	; 0xff
 8015e0a:	d1e8      	bne.n	8015dde <ConfigCommandParsing.constprop.0+0x2e>
          if(Data!=0) {
 8015e0c:	4816      	ldr	r0, [pc, #88]	; (8015e68 <ConfigCommandParsing.constprop.0+0xb8>)
 8015e0e:	e7f1      	b.n	8015df4 <ConfigCommandParsing.constprop.0+0x44>
      switch(Command) {
 8015e10:	2cff      	cmp	r4, #255	; 0xff
 8015e12:	d1e4      	bne.n	8015dde <ConfigCommandParsing.constprop.0+0x2e>
          if(Data!=0) {
 8015e14:	4815      	ldr	r0, [pc, #84]	; (8015e6c <ConfigCommandParsing.constprop.0+0xbc>)
 8015e16:	b11b      	cbz	r3, 8015e20 <ConfigCommandParsing.constprop.0+0x70>
            uhCCR2_Val  = 1000*Data;
 8015e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015e1c:	435a      	muls	r2, r3
 8015e1e:	e001      	b.n	8015e24 <ConfigCommandParsing.constprop.0+0x74>
            uhCCR1_Val  = DEFAULT_uhCCR1_Val;
 8015e20:	f241 3288 	movw	r2, #5000	; 0x1388
            uhCCR2_Val  = DEFAULT_uhCCR2_Val;
 8015e24:	6002      	str	r2, [r0, #0]
    if(BLE_StdTerm_Service==BLE_SERV_ENABLE) {
 8015e26:	4a12      	ldr	r2, [pc, #72]	; (8015e70 <ConfigCommandParsing.constprop.0+0xc0>)
 8015e28:	7812      	ldrb	r2, [r2, #0]
 8015e2a:	2a01      	cmp	r2, #1
      BytesToWrite = sprintf((char *)BufferToWrite,"Conf Sig F=%lx C=%2x Data=%2x\n\r",FeatureMask,Command,Data);
 8015e2c:	68ca      	ldr	r2, [r1, #12]
 8015e2e:	9300      	str	r3, [sp, #0]
 8015e30:	4910      	ldr	r1, [pc, #64]	; (8015e74 <ConfigCommandParsing.constprop.0+0xc4>)
 8015e32:	f04f 03ff 	mov.w	r3, #255	; 0xff
    if(BLE_StdTerm_Service==BLE_SERV_ENABLE) {
 8015e36:	d10b      	bne.n	8015e50 <ConfigCommandParsing.constprop.0+0xa0>
      BytesToWrite = sprintf((char *)BufferToWrite,"Conf Sig F=%lx C=%2x Data=%2x\n\r",FeatureMask,Command,Data);
 8015e38:	480f      	ldr	r0, [pc, #60]	; (8015e78 <ConfigCommandParsing.constprop.0+0xc8>)
 8015e3a:	f006 ff7d 	bl	801cd38 <siprintf>
 8015e3e:	4b0f      	ldr	r3, [pc, #60]	; (8015e7c <ConfigCommandParsing.constprop.0+0xcc>)
 8015e40:	b2c1      	uxtb	r1, r0
      Term_Update(BufferToWrite,BytesToWrite);
 8015e42:	480d      	ldr	r0, [pc, #52]	; (8015e78 <ConfigCommandParsing.constprop.0+0xc8>)
      BytesToWrite = sprintf((char *)BufferToWrite,"Conf Sig F=%lx C=%2x Data=%2x\n\r",FeatureMask,Command,Data);
 8015e44:	7019      	strb	r1, [r3, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8015e46:	f7fb fa99 	bl	801137c <Term_Update>
 8015e4a:	2000      	movs	r0, #0
}
 8015e4c:	b042      	add	sp, #264	; 0x108
 8015e4e:	bd10      	pop	{r4, pc}
      PREDMNT1_PRINTF("Conf Sig F=%lx C=%2x Data=%2x\n\r",FeatureMask,Command,Data);
 8015e50:	a802      	add	r0, sp, #8
 8015e52:	f006 ff71 	bl	801cd38 <siprintf>
 8015e56:	4601      	mov	r1, r0
 8015e58:	a802      	add	r0, sp, #8
 8015e5a:	f003 fda7 	bl	80199ac <CDC_Fill_Buffer>
 8015e5e:	e7f4      	b.n	8015e4a <ConfigCommandParsing.constprop.0+0x9a>
 8015e60:	200114d0 	.word	0x200114d0
 8015e64:	20000518 	.word	0x20000518
 8015e68:	20000514 	.word	0x20000514
 8015e6c:	20000510 	.word	0x20000510
 8015e70:	20002975 	.word	0x20002975
 8015e74:	0802428c 	.word	0x0802428c
 8015e78:	20002b41 	.word	0x20002b41
 8015e7c:	20002c41 	.word	0x20002c41

08015e80 <DebugConsoleCommandParsing>:
{
 8015e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e84:	ed2d 8b02 	vpush	{d8}
 8015e88:	4606      	mov	r6, r0
 8015e8a:	b0d3      	sub	sp, #332	; 0x14c
 8015e8c:	460f      	mov	r7, r1
    if(!strncmp("help",(char *)(att_data),4)) {
 8015e8e:	2204      	movs	r2, #4
 8015e90:	4601      	mov	r1, r0
 8015e92:	48b9      	ldr	r0, [pc, #740]	; (8016178 <DebugConsoleCommandParsing+0x2f8>)
 8015e94:	f006 ffc8 	bl	801ce28 <strncmp>
 8015e98:	4605      	mov	r5, r0
 8015e9a:	2800      	cmp	r0, #0
 8015e9c:	f040 80da 	bne.w	8016054 <DebugConsoleCommandParsing+0x1d4>
      BytesToWrite =sprintf((char *)BufferToWrite,"Command:\r\n");
 8015ea0:	4cb6      	ldr	r4, [pc, #728]	; (801617c <DebugConsoleCommandParsing+0x2fc>)
 8015ea2:	49b7      	ldr	r1, [pc, #732]	; (8016180 <DebugConsoleCommandParsing+0x300>)
 8015ea4:	48b7      	ldr	r0, [pc, #732]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 8015ea6:	f006 ffb7 	bl	801ce18 <strcpy>
 8015eaa:	210a      	movs	r1, #10
      Term_Update(BufferToWrite,BytesToWrite);
 8015eac:	48b5      	ldr	r0, [pc, #724]	; (8016184 <DebugConsoleCommandParsing+0x304>)
      BytesToWrite =sprintf((char *)BufferToWrite,"Command:\r\n");
 8015eae:	7021      	strb	r1, [r4, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8015eb0:	f7fb fa64 	bl	801137c <Term_Update>
      HAL_Delay(20);
 8015eb4:	2014      	movs	r0, #20
 8015eb6:	f002 fe97 	bl	8018be8 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"info -> System Info\r\n");
 8015eba:	f04f 0a15 	mov.w	sl, #21
 8015ebe:	49b2      	ldr	r1, [pc, #712]	; (8016188 <DebugConsoleCommandParsing+0x308>)
 8015ec0:	48b0      	ldr	r0, [pc, #704]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 8015ec2:	f006 ffa9 	bl	801ce18 <strcpy>
      Term_Update(BufferToWrite,BytesToWrite);
 8015ec6:	4651      	mov	r1, sl
 8015ec8:	48ae      	ldr	r0, [pc, #696]	; (8016184 <DebugConsoleCommandParsing+0x304>)
      BytesToWrite =sprintf((char *)BufferToWrite,"info -> System Info\r\n");
 8015eca:	f884 a000 	strb.w	sl, [r4]
      Term_Update(BufferToWrite,BytesToWrite);
 8015ece:	f7fb fa55 	bl	801137c <Term_Update>
      HAL_Delay(20);
 8015ed2:	2014      	movs	r0, #20
 8015ed4:	f002 fe88 	bl	8018be8 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"versionFw  -> FW Version\r\n");
 8015ed8:	49ac      	ldr	r1, [pc, #688]	; (801618c <DebugConsoleCommandParsing+0x30c>)
 8015eda:	48aa      	ldr	r0, [pc, #680]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 8015edc:	f006 ff9c 	bl	801ce18 <strcpy>
 8015ee0:	211a      	movs	r1, #26
      Term_Update(BufferToWrite,BytesToWrite);
 8015ee2:	48a8      	ldr	r0, [pc, #672]	; (8016184 <DebugConsoleCommandParsing+0x304>)
      BytesToWrite =sprintf((char *)BufferToWrite,"versionFw  -> FW Version\r\n");
 8015ee4:	7021      	strb	r1, [r4, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8015ee6:	f7fb fa49 	bl	801137c <Term_Update>
      HAL_Delay(20);
 8015eea:	2014      	movs	r0, #20
 8015eec:	f002 fe7c 	bl	8018be8 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"getVibrParam  -> Read Vibration Parameters\r\n");
 8015ef0:	49a7      	ldr	r1, [pc, #668]	; (8016190 <DebugConsoleCommandParsing+0x310>)
 8015ef2:	48a4      	ldr	r0, [pc, #656]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 8015ef4:	f006 ff90 	bl	801ce18 <strcpy>
 8015ef8:	212c      	movs	r1, #44	; 0x2c
      Term_Update(BufferToWrite,BytesToWrite);
 8015efa:	48a2      	ldr	r0, [pc, #648]	; (8016184 <DebugConsoleCommandParsing+0x304>)
      BytesToWrite =sprintf((char *)BufferToWrite,"getVibrParam  -> Read Vibration Parameters\r\n");
 8015efc:	7021      	strb	r1, [r4, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8015efe:	f7fb fa3d 	bl	801137c <Term_Update>
      HAL_Delay(20);
 8015f02:	2014      	movs	r0, #20
 8015f04:	f002 fe70 	bl	8018be8 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"setVibrParam [-odr -fs -size -wind - tacq -subrng -ovl] -> Set Vibration Parameters");
 8015f08:	49a2      	ldr	r1, [pc, #648]	; (8016194 <DebugConsoleCommandParsing+0x314>)
 8015f0a:	489e      	ldr	r0, [pc, #632]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 8015f0c:	f006 ff84 	bl	801ce18 <strcpy>
 8015f10:	2153      	movs	r1, #83	; 0x53
      Term_Update(BufferToWrite,BytesToWrite);
 8015f12:	489c      	ldr	r0, [pc, #624]	; (8016184 <DebugConsoleCommandParsing+0x304>)
      BytesToWrite =sprintf((char *)BufferToWrite,"setVibrParam [-odr -fs -size -wind - tacq -subrng -ovl] -> Set Vibration Parameters");
 8015f14:	7021      	strb	r1, [r4, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8015f16:	f7fb fa31 	bl	801137c <Term_Update>
      HAL_Delay(20);
 8015f1a:	2014      	movs	r0, #20
 8015f1c:	f002 fe64 	bl	8018be8 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nodr= [13, 26, 52, 104, 208, 416, 833, 1660, 3330, 6660]");
 8015f20:	f04f 0839 	mov.w	r8, #57	; 0x39
 8015f24:	499c      	ldr	r1, [pc, #624]	; (8016198 <DebugConsoleCommandParsing+0x318>)
 8015f26:	4897      	ldr	r0, [pc, #604]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 8015f28:	f006 ff76 	bl	801ce18 <strcpy>
      Term_Update(BufferToWrite,BytesToWrite);
 8015f2c:	4641      	mov	r1, r8
 8015f2e:	4895      	ldr	r0, [pc, #596]	; (8016184 <DebugConsoleCommandParsing+0x304>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nodr= [13, 26, 52, 104, 208, 416, 833, 1660, 3330, 6660]");
 8015f30:	f884 8000 	strb.w	r8, [r4]
      Term_Update(BufferToWrite,BytesToWrite);
 8015f34:	f7fb fa22 	bl	801137c <Term_Update>
      HAL_Delay(20);
 8015f38:	2014      	movs	r0, #20
 8015f3a:	f002 fe55 	bl	8018be8 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nfs= [2, 4, 8, 16]");
 8015f3e:	f04f 0913 	mov.w	r9, #19
 8015f42:	4996      	ldr	r1, [pc, #600]	; (801619c <DebugConsoleCommandParsing+0x31c>)
 8015f44:	488f      	ldr	r0, [pc, #572]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 8015f46:	f006 ff67 	bl	801ce18 <strcpy>
      Term_Update(BufferToWrite,BytesToWrite);
 8015f4a:	4649      	mov	r1, r9
 8015f4c:	488d      	ldr	r0, [pc, #564]	; (8016184 <DebugConsoleCommandParsing+0x304>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nfs= [2, 4, 8, 16]");
 8015f4e:	f884 9000 	strb.w	r9, [r4]
      Term_Update(BufferToWrite,BytesToWrite);
 8015f52:	f7fb fa13 	bl	801137c <Term_Update>
      HAL_Delay(20);
 8015f56:	2014      	movs	r0, #20
 8015f58:	f002 fe46 	bl	8018be8 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nsize= [256, 512, 1024, 2048]");
 8015f5c:	4990      	ldr	r1, [pc, #576]	; (80161a0 <DebugConsoleCommandParsing+0x320>)
 8015f5e:	4889      	ldr	r0, [pc, #548]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 8015f60:	f006 ff5a 	bl	801ce18 <strcpy>
 8015f64:	211e      	movs	r1, #30
      Term_Update(BufferToWrite,BytesToWrite);
 8015f66:	4887      	ldr	r0, [pc, #540]	; (8016184 <DebugConsoleCommandParsing+0x304>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nsize= [256, 512, 1024, 2048]");
 8015f68:	7021      	strb	r1, [r4, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8015f6a:	f7fb fa07 	bl	801137c <Term_Update>
      HAL_Delay(20);
 8015f6e:	2014      	movs	r0, #20
 8015f70:	f002 fe3a 	bl	8018be8 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nwind= [RECTANGULAR= 0, HANNING= 1, HAMMING= 2, FLAT_TOP= 3]");
 8015f74:	498b      	ldr	r1, [pc, #556]	; (80161a4 <DebugConsoleCommandParsing+0x324>)
 8015f76:	4883      	ldr	r0, [pc, #524]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 8015f78:	f006 ff4e 	bl	801ce18 <strcpy>
 8015f7c:	213d      	movs	r1, #61	; 0x3d
      Term_Update(BufferToWrite,BytesToWrite);
 8015f7e:	4881      	ldr	r0, [pc, #516]	; (8016184 <DebugConsoleCommandParsing+0x304>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nwind= [RECTANGULAR= 0, HANNING= 1, HAMMING= 2, FLAT_TOP= 3]");
 8015f80:	7021      	strb	r1, [r4, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8015f82:	f7fb f9fb 	bl	801137c <Term_Update>
      HAL_Delay(20);
 8015f86:	2014      	movs	r0, #20
 8015f88:	f002 fe2e 	bl	8018be8 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\ntacq= [500 - 60000]");
 8015f8c:	4986      	ldr	r1, [pc, #536]	; (80161a8 <DebugConsoleCommandParsing+0x328>)
 8015f8e:	487d      	ldr	r0, [pc, #500]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 8015f90:	f006 ff42 	bl	801ce18 <strcpy>
      Term_Update(BufferToWrite,BytesToWrite);
 8015f94:	4651      	mov	r1, sl
 8015f96:	487b      	ldr	r0, [pc, #492]	; (8016184 <DebugConsoleCommandParsing+0x304>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\ntacq= [500 - 60000]");
 8015f98:	f884 a000 	strb.w	sl, [r4]
      Term_Update(BufferToWrite,BytesToWrite);
 8015f9c:	f7fb f9ee 	bl	801137c <Term_Update>
      HAL_Delay(20);
 8015fa0:	2014      	movs	r0, #20
 8015fa2:	f002 fe21 	bl	8018be8 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nsubrng= [8, 16, 32, 64]");
 8015fa6:	4981      	ldr	r1, [pc, #516]	; (80161ac <DebugConsoleCommandParsing+0x32c>)
 8015fa8:	4876      	ldr	r0, [pc, #472]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 8015faa:	f006 ff35 	bl	801ce18 <strcpy>
 8015fae:	2119      	movs	r1, #25
      Term_Update(BufferToWrite,BytesToWrite);
 8015fb0:	4874      	ldr	r0, [pc, #464]	; (8016184 <DebugConsoleCommandParsing+0x304>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nsubrng= [8, 16, 32, 64]");
 8015fb2:	7021      	strb	r1, [r4, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8015fb4:	f7fb f9e2 	bl	801137c <Term_Update>
      HAL_Delay(20);
 8015fb8:	2014      	movs	r0, #20
 8015fba:	f002 fe15 	bl	8018be8 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\novl= [5 - 95]\r\n\r\n");
 8015fbe:	497c      	ldr	r1, [pc, #496]	; (80161b0 <DebugConsoleCommandParsing+0x330>)
 8015fc0:	4870      	ldr	r0, [pc, #448]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 8015fc2:	f006 ff29 	bl	801ce18 <strcpy>
      Term_Update(BufferToWrite,BytesToWrite);
 8015fc6:	4649      	mov	r1, r9
 8015fc8:	486e      	ldr	r0, [pc, #440]	; (8016184 <DebugConsoleCommandParsing+0x304>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\novl= [5 - 95]\r\n\r\n");
 8015fca:	f884 9000 	strb.w	r9, [r4]
      Term_Update(BufferToWrite,BytesToWrite);
 8015fce:	f7fb f9d5 	bl	801137c <Term_Update>
      HAL_Delay(20);
 8015fd2:	2014      	movs	r0, #20
 8015fd4:	f002 fe08 	bl	8018be8 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"setName xxxxxxx -> Set the node name (Max 7 characters)\r\n");
 8015fd8:	4976      	ldr	r1, [pc, #472]	; (80161b4 <DebugConsoleCommandParsing+0x334>)
 8015fda:	486a      	ldr	r0, [pc, #424]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 8015fdc:	f006 ff1c 	bl	801ce18 <strcpy>
 8015fe0:	f884 8000 	strb.w	r8, [r4]
      Term_Update(BufferToWrite,BytesToWrite);
 8015fe4:	4641      	mov	r1, r8
    Term_Update(BufferToWrite,BytesToWrite);
 8015fe6:	4867      	ldr	r0, [pc, #412]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 8015fe8:	f7fb f9c8 	bl	801137c <Term_Update>
    }  if(!strncmp("upgradeFw",(char *)(att_data),9)) {
 8015fec:	4872      	ldr	r0, [pc, #456]	; (80161b8 <DebugConsoleCommandParsing+0x338>)
 8015fee:	2209      	movs	r2, #9
 8015ff0:	4631      	mov	r1, r6
 8015ff2:	f006 ff19 	bl	801ce28 <strncmp>
 8015ff6:	4680      	mov	r8, r0
 8015ff8:	2800      	cmp	r0, #0
 8015ffa:	f040 812d 	bne.w	8016258 <DebugConsoleCommandParsing+0x3d8>
      PointerByte[0]=att_data[ 9];
 8015ffe:	4c6f      	ldr	r4, [pc, #444]	; (80161bc <DebugConsoleCommandParsing+0x33c>)
      SizeOfUpdateBlueFW=atoi((char *)(att_data+9));
 8016000:	f106 0009 	add.w	r0, r6, #9
 8016004:	f005 fea8 	bl	801bd58 <atoi>
      PointerByte[0]=att_data[ 9];
 8016008:	7a73      	ldrb	r3, [r6, #9]
 801600a:	7123      	strb	r3, [r4, #4]
      PointerByte[1]=att_data[10];
 801600c:	7ab3      	ldrb	r3, [r6, #10]
 801600e:	7163      	strb	r3, [r4, #5]
      PointerByte[2]=att_data[11];
 8016010:	7af3      	ldrb	r3, [r6, #11]
 8016012:	71a3      	strb	r3, [r4, #6]
      PointerByte[3]=att_data[12];
 8016014:	7b33      	ldrb	r3, [r6, #12]
 8016016:	71e3      	strb	r3, [r4, #7]
      if(SizeOfUpdateBlueFW>OTA_MAX_PROG_SIZE) {
 8016018:	6863      	ldr	r3, [r4, #4]
 801601a:	4a69      	ldr	r2, [pc, #420]	; (80161c0 <DebugConsoleCommandParsing+0x340>)
 801601c:	4293      	cmp	r3, r2
 801601e:	d976      	bls.n	801610e <DebugConsoleCommandParsing+0x28e>
        PREDMNT1_PRINTF("OTA %s SIZE=%ld > %d Max Allowed\r\n",PREDMNT1_PACKAGENAME,SizeOfUpdateBlueFW, OTA_MAX_PROG_SIZE);
 8016020:	4968      	ldr	r1, [pc, #416]	; (80161c4 <DebugConsoleCommandParsing+0x344>)
 8016022:	9200      	str	r2, [sp, #0]
 8016024:	a812      	add	r0, sp, #72	; 0x48
 8016026:	4a68      	ldr	r2, [pc, #416]	; (80161c8 <DebugConsoleCommandParsing+0x348>)
 8016028:	f006 fe86 	bl	801cd38 <siprintf>
 801602c:	4601      	mov	r1, r0
 801602e:	a812      	add	r0, sp, #72	; 0x48
 8016030:	f003 fcbc 	bl	80199ac <CDC_Fill_Buffer>
        PointerByte[0]= att_data[13];
 8016034:	7b73      	ldrb	r3, [r6, #13]
 8016036:	7123      	strb	r3, [r4, #4]
        PointerByte[1]=(att_data[14]!=0) ? 0 : 1;/* In order to be sure to have a wrong CRC */
 8016038:	7bb3      	ldrb	r3, [r6, #14]
 801603a:	fab3 f383 	clz	r3, r3
 801603e:	095b      	lsrs	r3, r3, #5
 8016040:	7163      	strb	r3, [r4, #5]
        PointerByte[2]= att_data[15];
 8016042:	7bf3      	ldrb	r3, [r6, #15]
 8016044:	71a3      	strb	r3, [r4, #6]
        PointerByte[3]= att_data[16];
 8016046:	7c33      	ldrb	r3, [r6, #16]
 8016048:	71e3      	strb	r3, [r4, #7]
        BytesToWrite = 4;
 801604a:	2104      	movs	r1, #4
      BytesToWrite =sprintf((char *)BufferToWrite,"%s_v%d.%d.%c\r\n",
 801604c:	4b4b      	ldr	r3, [pc, #300]	; (801617c <DebugConsoleCommandParsing+0x2fc>)
 801604e:	7019      	strb	r1, [r3, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8016050:	484c      	ldr	r0, [pc, #304]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 8016052:	e0db      	b.n	801620c <DebugConsoleCommandParsing+0x38c>
    } else if(!strncmp("versionFw",(char *)(att_data),9)) {
 8016054:	485d      	ldr	r0, [pc, #372]	; (80161cc <DebugConsoleCommandParsing+0x34c>)
 8016056:	2209      	movs	r2, #9
 8016058:	4631      	mov	r1, r6
 801605a:	f006 fee5 	bl	801ce28 <strncmp>
 801605e:	4605      	mov	r5, r0
 8016060:	b978      	cbnz	r0, 8016082 <DebugConsoleCommandParsing+0x202>
      BytesToWrite =sprintf((char *)BufferToWrite,"%s_%s_%c.%c.%c\r\n",
 8016062:	2334      	movs	r3, #52	; 0x34
 8016064:	2430      	movs	r4, #48	; 0x30
 8016066:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801606a:	2332      	movs	r3, #50	; 0x32
 801606c:	4958      	ldr	r1, [pc, #352]	; (80161d0 <DebugConsoleCommandParsing+0x350>)
 801606e:	9300      	str	r3, [sp, #0]
 8016070:	4a58      	ldr	r2, [pc, #352]	; (80161d4 <DebugConsoleCommandParsing+0x354>)
 8016072:	4b55      	ldr	r3, [pc, #340]	; (80161c8 <DebugConsoleCommandParsing+0x348>)
 8016074:	4843      	ldr	r0, [pc, #268]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 8016076:	f006 fe5f 	bl	801cd38 <siprintf>
 801607a:	4b40      	ldr	r3, [pc, #256]	; (801617c <DebugConsoleCommandParsing+0x2fc>)
 801607c:	211c      	movs	r1, #28
 801607e:	7019      	strb	r1, [r3, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8016080:	e7b1      	b.n	8015fe6 <DebugConsoleCommandParsing+0x166>
    } else if(!strncmp("info",(char *)(att_data),4)) {
 8016082:	4855      	ldr	r0, [pc, #340]	; (80161d8 <DebugConsoleCommandParsing+0x358>)
 8016084:	2204      	movs	r2, #4
 8016086:	4631      	mov	r1, r6
 8016088:	f006 fece 	bl	801ce28 <strncmp>
 801608c:	4605      	mov	r5, r0
 801608e:	2800      	cmp	r0, #0
 8016090:	d13b      	bne.n	801610a <DebugConsoleCommandParsing+0x28a>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nSTMicroelectronics %s:\r\n"
 8016092:	2334      	movs	r3, #52	; 0x34
 8016094:	2030      	movs	r0, #48	; 0x30
 8016096:	4a4c      	ldr	r2, [pc, #304]	; (80161c8 <DebugConsoleCommandParsing+0x348>)
 8016098:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 801617c <DebugConsoleCommandParsing+0x2fc>
 801609c:	494f      	ldr	r1, [pc, #316]	; (80161dc <DebugConsoleCommandParsing+0x35c>)
 801609e:	e9cd 3000 	strd	r3, r0, [sp]
 80160a2:	2332      	movs	r3, #50	; 0x32
 80160a4:	4837      	ldr	r0, [pc, #220]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 80160a6:	f006 fe47 	bl	801cd38 <siprintf>
 80160aa:	2152      	movs	r1, #82	; 0x52
      Term_Update(BufferToWrite,BytesToWrite);
 80160ac:	4835      	ldr	r0, [pc, #212]	; (8016184 <DebugConsoleCommandParsing+0x304>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nSTMicroelectronics %s:\r\n"
 80160ae:	f888 1000 	strb.w	r1, [r8]
      Term_Update(BufferToWrite,BytesToWrite);
 80160b2:	f7fb f963 	bl	801137c <Term_Update>
          HAL_GetHalVersion() >>24,
 80160b6:	f7f2 fabb 	bl	8008630 <HAL_GetHalVersion>
 80160ba:	4681      	mov	r9, r0
          (HAL_GetHalVersion() >>16)&0xFF,
 80160bc:	f7f2 fab8 	bl	8008630 <HAL_GetHalVersion>
 80160c0:	4682      	mov	sl, r0
          (HAL_GetHalVersion() >> 8)&0xFF,
 80160c2:	f7f2 fab5 	bl	8008630 <HAL_GetHalVersion>
 80160c6:	4604      	mov	r4, r0
           HAL_GetHalVersion()      &0xFF,
 80160c8:	f7f2 fab2 	bl	8008630 <HAL_GetHalVersion>
      BytesToWrite =sprintf((char *)BufferToWrite,"\t(HAL %ld.%ld.%ld_%ld)\r\n"
 80160cc:	4b44      	ldr	r3, [pc, #272]	; (80161e0 <DebugConsoleCommandParsing+0x360>)
 80160ce:	9303      	str	r3, [sp, #12]
 80160d0:	b2c0      	uxtb	r0, r0
 80160d2:	4b44      	ldr	r3, [pc, #272]	; (80161e4 <DebugConsoleCommandParsing+0x364>)
 80160d4:	4944      	ldr	r1, [pc, #272]	; (80161e8 <DebugConsoleCommandParsing+0x368>)
 80160d6:	9302      	str	r3, [sp, #8]
 80160d8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80160dc:	f3ca 4307 	ubfx	r3, sl, #16, #8
 80160e0:	ea4f 6219 	mov.w	r2, r9, lsr #24
 80160e4:	9001      	str	r0, [sp, #4]
 80160e6:	9400      	str	r4, [sp, #0]
 80160e8:	4826      	ldr	r0, [pc, #152]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 80160ea:	f006 fe25 	bl	801cd38 <siprintf>
 80160ee:	b2c1      	uxtb	r1, r0
      Term_Update(BufferToWrite,BytesToWrite);
 80160f0:	4824      	ldr	r0, [pc, #144]	; (8016184 <DebugConsoleCommandParsing+0x304>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\t(HAL %ld.%ld.%ld_%ld)\r\n"
 80160f2:	f888 1000 	strb.w	r1, [r8]
      Term_Update(BufferToWrite,BytesToWrite);
 80160f6:	f7fb f941 	bl	801137c <Term_Update>
    BytesToWrite =sprintf((char *)BufferToWrite,"Code compiled for STWIN board\r\n");
 80160fa:	493c      	ldr	r1, [pc, #240]	; (80161ec <DebugConsoleCommandParsing+0x36c>)
 80160fc:	4821      	ldr	r0, [pc, #132]	; (8016184 <DebugConsoleCommandParsing+0x304>)
 80160fe:	f006 fe8b 	bl	801ce18 <strcpy>
 8016102:	211f      	movs	r1, #31
 8016104:	f888 1000 	strb.w	r1, [r8]
 8016108:	e76d      	b.n	8015fe6 <DebugConsoleCommandParsing+0x166>
  uint32_t SendBackData = 1;
 801610a:	2501      	movs	r5, #1
 801610c:	e76e      	b.n	8015fec <DebugConsoleCommandParsing+0x16c>
        PointerByte[0]=att_data[13];
 801610e:	f896 a00d 	ldrb.w	sl, [r6, #13]
        PointerByte[1]=att_data[14];
 8016112:	f896 900e 	ldrb.w	r9, [r6, #14]
        PointerByte[2]=att_data[15];
 8016116:	7bf7      	ldrb	r7, [r6, #15]
        PointerByte[3]=att_data[16];
 8016118:	7c35      	ldrb	r5, [r6, #16]
        PointerByte[0]=att_data[13];
 801611a:	f88d a044 	strb.w	sl, [sp, #68]	; 0x44
        PointerByte[1]=att_data[14];
 801611e:	f88d 9045 	strb.w	r9, [sp, #69]	; 0x45
        PointerByte[2]=att_data[15];
 8016122:	f88d 7046 	strb.w	r7, [sp, #70]	; 0x46
        PointerByte[3]=att_data[16];
 8016126:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
        PREDMNT1_PRINTF("OTA %s SIZE=%ld uwCRCValue=%lx\r\n",PREDMNT1_PACKAGENAME,SizeOfUpdateBlueFW,uwCRCValue);
 801612a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801612e:	4a26      	ldr	r2, [pc, #152]	; (80161c8 <DebugConsoleCommandParsing+0x348>)
 8016130:	492f      	ldr	r1, [pc, #188]	; (80161f0 <DebugConsoleCommandParsing+0x370>)
 8016132:	f8cd b000 	str.w	fp, [sp]
 8016136:	a812      	add	r0, sp, #72	; 0x48
 8016138:	f006 fdfe 	bl	801cd38 <siprintf>
 801613c:	4601      	mov	r1, r0
 801613e:	a812      	add	r0, sp, #72	; 0x48
 8016140:	f003 fc34 	bl	80199ac <CDC_Fill_Buffer>
        StartUpdateFWBlueMS(SizeOfUpdateBlueFW,uwCRCValue);
 8016144:	6860      	ldr	r0, [r4, #4]
 8016146:	4659      	mov	r1, fp
 8016148:	f001 ff40 	bl	8017fcc <StartUpdateFWBlueMS>
          int ret = aci_l2cap_connection_parameter_update_req(BLE_ConnectionHandle,
 801614c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8016150:	9300      	str	r3, [sp, #0]
 8016152:	220a      	movs	r2, #10
 8016154:	8920      	ldrh	r0, [r4, #8]
 8016156:	4643      	mov	r3, r8
 8016158:	4611      	mov	r1, r2
 801615a:	f7f8 fe2f 	bl	800edbc <aci_l2cap_connection_parameter_update_req>
          if (ret != BLE_STATUS_SUCCESS) {
 801615e:	2800      	cmp	r0, #0
 8016160:	d04a      	beq.n	80161f8 <DebugConsoleCommandParsing+0x378>
              PREDMNT1_PRINTF("Problem Changing the connection interval\r\n");
 8016162:	4c24      	ldr	r4, [pc, #144]	; (80161f4 <DebugConsoleCommandParsing+0x374>)
 8016164:	4621      	mov	r1, r4
 8016166:	a812      	add	r0, sp, #72	; 0x48
 8016168:	f006 fe56 	bl	801ce18 <strcpy>
 801616c:	212a      	movs	r1, #42	; 0x2a
 801616e:	a812      	add	r0, sp, #72	; 0x48
 8016170:	f003 fc1c 	bl	80199ac <CDC_Fill_Buffer>
            while (1) {
 8016174:	e7f6      	b.n	8016164 <DebugConsoleCommandParsing+0x2e4>
 8016176:	bf00      	nop
 8016178:	080242ac 	.word	0x080242ac
 801617c:	20002c41 	.word	0x20002c41
 8016180:	08023f05 	.word	0x08023f05
 8016184:	20002b41 	.word	0x20002b41
 8016188:	080242b1 	.word	0x080242b1
 801618c:	080242c7 	.word	0x080242c7
 8016190:	080242e2 	.word	0x080242e2
 8016194:	0802430f 	.word	0x0802430f
 8016198:	08024363 	.word	0x08024363
 801619c:	0802439d 	.word	0x0802439d
 80161a0:	080243b1 	.word	0x080243b1
 80161a4:	080243d0 	.word	0x080243d0
 80161a8:	0802440e 	.word	0x0802440e
 80161ac:	08024424 	.word	0x08024424
 80161b0:	0802443e 	.word	0x0802443e
 80161b4:	08024452 	.word	0x08024452
 80161b8:	0802454e 	.word	0x0802454e
 80161bc:	200114d0 	.word	0x200114d0
 80161c0:	000fbff0 	.word	0x000fbff0
 80161c4:	08024558 	.word	0x08024558
 80161c8:	08023e35 	.word	0x08023e35
 80161cc:	0802448c 	.word	0x0802448c
 80161d0:	08024496 	.word	0x08024496
 80161d4:	08023e45 	.word	0x08023e45
 80161d8:	080244a7 	.word	0x080244a7
 80161dc:	080244ac 	.word	0x080244ac
 80161e0:	080241f7 	.word	0x080241f7
 80161e4:	08024200 	.word	0x08024200
 80161e8:	080244f5 	.word	0x080244f5
 80161ec:	0802452e 	.word	0x0802452e
 80161f0:	0802457b 	.word	0x0802457b
 80161f4:	0802459c 	.word	0x0802459c
        BufferToWrite[0] = PointerByte[0];
 80161f8:	48a9      	ldr	r0, [pc, #676]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
        BytesToWrite = 4;
 80161fa:	4baa      	ldr	r3, [pc, #680]	; (80164a4 <DebugConsoleCommandParsing+0x624>)
        BufferToWrite[0] = PointerByte[0];
 80161fc:	f880 a000 	strb.w	sl, [r0]
        BytesToWrite = 4;
 8016200:	2104      	movs	r1, #4
        BufferToWrite[1] = PointerByte[1];
 8016202:	f880 9001 	strb.w	r9, [r0, #1]
        BufferToWrite[2] = PointerByte[2];
 8016206:	7087      	strb	r7, [r0, #2]
        BufferToWrite[3] = PointerByte[3];
 8016208:	70c5      	strb	r5, [r0, #3]
        BytesToWrite = 4;
 801620a:	7019      	strb	r1, [r3, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 801620c:	f7fb f8b6 	bl	801137c <Term_Update>
      SendBackData=0;      
 8016210:	2500      	movs	r5, #0
    if(SetVibrParam)
 8016212:	4ca5      	ldr	r4, [pc, #660]	; (80164a8 <DebugConsoleCommandParsing+0x628>)
 8016214:	7c23      	ldrb	r3, [r4, #16]
 8016216:	2b00      	cmp	r3, #0
 8016218:	f000 8303 	beq.w	8016822 <DebugConsoleCommandParsing+0x9a2>
        VibrParam[20*NumByte + Index]= att_data[Index];
 801621c:	7c67      	ldrb	r7, [r4, #17]
 801621e:	f894 c012 	ldrb.w	ip, [r4, #18]
 8016222:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 8016226:	2500      	movs	r5, #0
      uint8_t Index=0;
 8016228:	462b      	mov	r3, r5
        VibrParam[20*NumByte + Index]= att_data[Index];
 801622a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
      while( (att_data[Index] != '\n') && (att_data[Index] != '\0') )
 801622e:	5cf1      	ldrb	r1, [r6, r3]
 8016230:	eb03 000c 	add.w	r0, r3, ip
 8016234:	290a      	cmp	r1, #10
 8016236:	b2c0      	uxtb	r0, r0
 8016238:	f040 80f9 	bne.w	801642e <DebugConsoleCommandParsing+0x5ae>
 801623c:	b105      	cbz	r5, 8016240 <DebugConsoleCommandParsing+0x3c0>
 801623e:	74a0      	strb	r0, [r4, #18]
      NumByte++;
 8016240:	1c7b      	adds	r3, r7, #1
      if(att_data[Index] == '\n')
 8016242:	290a      	cmp	r1, #10
      NumByte++;
 8016244:	7463      	strb	r3, [r4, #17]
      if(att_data[Index] == '\n')
 8016246:	f000 80fb 	beq.w	8016440 <DebugConsoleCommandParsing+0x5c0>
      SendBackData= 0;
 801624a:	2500      	movs	r5, #0
}
 801624c:	4628      	mov	r0, r5
 801624e:	b053      	add	sp, #332	; 0x14c
 8016250:	ecbd 8b02 	vpop	{d8}
 8016254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if(!strncmp("versionBle",(char *)(att_data),10)) {
 8016258:	4894      	ldr	r0, [pc, #592]	; (80164ac <DebugConsoleCommandParsing+0x62c>)
 801625a:	220a      	movs	r2, #10
 801625c:	4631      	mov	r1, r6
 801625e:	f006 fde3 	bl	801ce28 <strncmp>
 8016262:	b9a8      	cbnz	r0, 8016290 <DebugConsoleCommandParsing+0x410>
      getBlueNRG2_Version(&hwVersion, &fwVersion);
 8016264:	a912      	add	r1, sp, #72	; 0x48
 8016266:	a811      	add	r0, sp, #68	; 0x44
 8016268:	f002 fbd6 	bl	8018a18 <getBlueNRG2_Version>
      BytesToWrite =sprintf((char *)BufferToWrite,"%s_v%d.%d.%c\r\n",
 801626c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016270:	498f      	ldr	r1, [pc, #572]	; (80164b0 <DebugConsoleCommandParsing+0x630>)
 8016272:	488b      	ldr	r0, [pc, #556]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
 8016274:	f003 020f 	and.w	r2, r3, #15
 8016278:	3261      	adds	r2, #97	; 0x61
 801627a:	9201      	str	r2, [sp, #4]
 801627c:	f3c3 1203 	ubfx	r2, r3, #4, #4
 8016280:	9200      	str	r2, [sp, #0]
 8016282:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8016286:	4a8b      	ldr	r2, [pc, #556]	; (80164b4 <DebugConsoleCommandParsing+0x634>)
 8016288:	f006 fd56 	bl	801cd38 <siprintf>
 801628c:	b2c1      	uxtb	r1, r0
 801628e:	e6dd      	b.n	801604c <DebugConsoleCommandParsing+0x1cc>
    } else if(!strncmp("getVibrParam",(char *)(att_data),12)) {
 8016290:	4889      	ldr	r0, [pc, #548]	; (80164b8 <DebugConsoleCommandParsing+0x638>)
 8016292:	220c      	movs	r2, #12
 8016294:	4631      	mov	r1, r6
 8016296:	f006 fdc7 	bl	801ce28 <strncmp>
 801629a:	2800      	cmp	r0, #0
 801629c:	d12e      	bne.n	80162fc <DebugConsoleCommandParsing+0x47c>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nAccelerometer parameters:\r\n");
 801629e:	4d81      	ldr	r5, [pc, #516]	; (80164a4 <DebugConsoleCommandParsing+0x624>)
 80162a0:	4986      	ldr	r1, [pc, #536]	; (80164bc <DebugConsoleCommandParsing+0x63c>)
 80162a2:	487f      	ldr	r0, [pc, #508]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
 80162a4:	f006 fdb8 	bl	801ce18 <strcpy>
 80162a8:	211d      	movs	r1, #29
      Term_Update(BufferToWrite,BytesToWrite);
 80162aa:	487d      	ldr	r0, [pc, #500]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nAccelerometer parameters:\r\n");
 80162ac:	7029      	strb	r1, [r5, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 80162ae:	f7fb f865 	bl	801137c <Term_Update>
                            AcceleroParams.fs);
 80162b2:	4a83      	ldr	r2, [pc, #524]	; (80164c0 <DebugConsoleCommandParsing+0x640>)
      BytesToWrite =sprintf((char *)BufferToWrite,"AccFifoBdr= %d fs= %d\r\n",
 80162b4:	4983      	ldr	r1, [pc, #524]	; (80164c4 <DebugConsoleCommandParsing+0x644>)
 80162b6:	8913      	ldrh	r3, [r2, #8]
 80162b8:	4879      	ldr	r0, [pc, #484]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
 80162ba:	8892      	ldrh	r2, [r2, #4]
 80162bc:	f006 fd3c 	bl	801cd38 <siprintf>
 80162c0:	b2c1      	uxtb	r1, r0
      Term_Update(BufferToWrite,BytesToWrite);
 80162c2:	4877      	ldr	r0, [pc, #476]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
      BytesToWrite =sprintf((char *)BufferToWrite,"AccFifoBdr= %d fs= %d\r\n",
 80162c4:	7029      	strb	r1, [r5, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 80162c6:	f7fb f859 	bl	801137c <Term_Update>
      BytesToWrite =sprintf((char *)BufferToWrite,"MotionSP parameters:\r\n");
 80162ca:	497f      	ldr	r1, [pc, #508]	; (80164c8 <DebugConsoleCommandParsing+0x648>)
 80162cc:	4874      	ldr	r0, [pc, #464]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
 80162ce:	f006 fda3 	bl	801ce18 <strcpy>
 80162d2:	2116      	movs	r1, #22
      Term_Update(BufferToWrite,BytesToWrite);
 80162d4:	4872      	ldr	r0, [pc, #456]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
      BytesToWrite =sprintf((char *)BufferToWrite,"MotionSP parameters:\r\n");
 80162d6:	7029      	strb	r1, [r5, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 80162d8:	f7fb f850 	bl	801137c <Term_Update>
                            MotionSP_Parameters.window,
 80162dc:	4a7b      	ldr	r2, [pc, #492]	; (80164cc <DebugConsoleCommandParsing+0x64c>)
      BytesToWrite =sprintf((char *)BufferToWrite,"size= %d wind= %d tacq= %d subrng= %d ovl= %d\r\n",
 80162de:	497c      	ldr	r1, [pc, #496]	; (80164d0 <DebugConsoleCommandParsing+0x650>)
 80162e0:	7a93      	ldrb	r3, [r2, #10]
 80162e2:	9302      	str	r3, [sp, #8]
 80162e4:	8993      	ldrh	r3, [r2, #12]
 80162e6:	9301      	str	r3, [sp, #4]
 80162e8:	8913      	ldrh	r3, [r2, #8]
 80162ea:	9300      	str	r3, [sp, #0]
 80162ec:	8893      	ldrh	r3, [r2, #4]
 80162ee:	486c      	ldr	r0, [pc, #432]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
 80162f0:	8812      	ldrh	r2, [r2, #0]
 80162f2:	f006 fd21 	bl	801cd38 <siprintf>
 80162f6:	b2c1      	uxtb	r1, r0
 80162f8:	7029      	strb	r1, [r5, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 80162fa:	e6a9      	b.n	8016050 <DebugConsoleCommandParsing+0x1d0>
    } else if(!strncmp("setVibrParam",(char *)(att_data),12)) {
 80162fc:	4875      	ldr	r0, [pc, #468]	; (80164d4 <DebugConsoleCommandParsing+0x654>)
 80162fe:	220c      	movs	r2, #12
 8016300:	4631      	mov	r1, r6
 8016302:	f006 fd91 	bl	801ce28 <strncmp>
 8016306:	b918      	cbnz	r0, 8016310 <DebugConsoleCommandParsing+0x490>
      SetVibrParam= 1;
 8016308:	4b67      	ldr	r3, [pc, #412]	; (80164a8 <DebugConsoleCommandParsing+0x628>)
 801630a:	2201      	movs	r2, #1
 801630c:	741a      	strb	r2, [r3, #16]
      SendBackData=0;
 801630e:	e77f      	b.n	8016210 <DebugConsoleCommandParsing+0x390>
    } else if((att_data[0]=='u') & (att_data[1]=='i') & (att_data[2]=='d')) {
 8016310:	7832      	ldrb	r2, [r6, #0]
 8016312:	7873      	ldrb	r3, [r6, #1]
 8016314:	2a75      	cmp	r2, #117	; 0x75
 8016316:	bf08      	it	eq
 8016318:	2b69      	cmpeq	r3, #105	; 0x69
 801631a:	d130      	bne.n	801637e <DebugConsoleCommandParsing+0x4fe>
 801631c:	78b3      	ldrb	r3, [r6, #2]
 801631e:	2b64      	cmp	r3, #100	; 0x64
 8016320:	d12d      	bne.n	801637e <DebugConsoleCommandParsing+0x4fe>
      uint32_t MCU_ID = STM32_MCU_ID[0]&0xFFF;
 8016322:	486d      	ldr	r0, [pc, #436]	; (80164d8 <DebugConsoleCommandParsing+0x658>)
                            uid[ 3],uid[ 2],uid[ 1],uid[ 0],
 8016324:	496d      	ldr	r1, [pc, #436]	; (80164dc <DebugConsoleCommandParsing+0x65c>)
      uint32_t MCU_ID = STM32_MCU_ID[0]&0xFFF;
 8016326:	6800      	ldr	r0, [r0, #0]
      BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8016328:	f891 3092 	ldrb.w	r3, [r1, #146]	; 0x92
 801632c:	f891 2093 	ldrb.w	r2, [r1, #147]	; 0x93
      uint32_t MCU_ID = STM32_MCU_ID[0]&0xFFF;
 8016330:	f3c0 000b 	ubfx	r0, r0, #0, #12
      BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8016334:	900a      	str	r0, [sp, #40]	; 0x28
 8016336:	f891 0098 	ldrb.w	r0, [r1, #152]	; 0x98
 801633a:	9009      	str	r0, [sp, #36]	; 0x24
 801633c:	f891 0099 	ldrb.w	r0, [r1, #153]	; 0x99
 8016340:	9008      	str	r0, [sp, #32]
 8016342:	f891 009a 	ldrb.w	r0, [r1, #154]	; 0x9a
 8016346:	9007      	str	r0, [sp, #28]
 8016348:	f891 009b 	ldrb.w	r0, [r1, #155]	; 0x9b
 801634c:	9006      	str	r0, [sp, #24]
 801634e:	f891 0094 	ldrb.w	r0, [r1, #148]	; 0x94
 8016352:	9005      	str	r0, [sp, #20]
 8016354:	f891 0095 	ldrb.w	r0, [r1, #149]	; 0x95
 8016358:	9004      	str	r0, [sp, #16]
 801635a:	f891 0096 	ldrb.w	r0, [r1, #150]	; 0x96
 801635e:	9003      	str	r0, [sp, #12]
 8016360:	f891 0097 	ldrb.w	r0, [r1, #151]	; 0x97
 8016364:	9002      	str	r0, [sp, #8]
 8016366:	f891 0090 	ldrb.w	r0, [r1, #144]	; 0x90
 801636a:	9001      	str	r0, [sp, #4]
 801636c:	f891 1091 	ldrb.w	r1, [r1, #145]	; 0x91
 8016370:	9100      	str	r1, [sp, #0]
 8016372:	484b      	ldr	r0, [pc, #300]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
 8016374:	495a      	ldr	r1, [pc, #360]	; (80164e0 <DebugConsoleCommandParsing+0x660>)
 8016376:	f006 fcdf 	bl	801cd38 <siprintf>
 801637a:	211e      	movs	r1, #30
 801637c:	e666      	b.n	801604c <DebugConsoleCommandParsing+0x1cc>
    } else if(!strncmp("setName ",(char *)(att_data),8)) {
 801637e:	4859      	ldr	r0, [pc, #356]	; (80164e4 <DebugConsoleCommandParsing+0x664>)
 8016380:	2208      	movs	r2, #8
 8016382:	4631      	mov	r1, r6
 8016384:	f006 fd50 	bl	801ce28 <strncmp>
 8016388:	4604      	mov	r4, r0
 801638a:	2800      	cmp	r0, #0
 801638c:	f47f af41 	bne.w	8016212 <DebugConsoleCommandParsing+0x392>
      int NameLength= data_length -1;
 8016390:	f107 38ff 	add.w	r8, r7, #4294967295
      if(NameLength > 8)
 8016394:	f1b8 0f08 	cmp.w	r8, #8
 8016398:	dd34      	ble.n	8016404 <DebugConsoleCommandParsing+0x584>
          NodeName[i]= atoi(" ");
 801639a:	f8df 9170 	ldr.w	r9, [pc, #368]	; 801650c <DebugConsoleCommandParsing+0x68c>
 801639e:	4d52      	ldr	r5, [pc, #328]	; (80164e8 <DebugConsoleCommandParsing+0x668>)
        for(int i=1;i<8;i++)
 80163a0:	2401      	movs	r4, #1
          NodeName[i]= atoi(" ");
 80163a2:	4648      	mov	r0, r9
 80163a4:	f005 fcd8 	bl	801bd58 <atoi>
 80163a8:	5528      	strb	r0, [r5, r4]
        for(int i=1;i<8;i++)
 80163aa:	3401      	adds	r4, #1
 80163ac:	2c08      	cmp	r4, #8
 80163ae:	d1f8      	bne.n	80163a2 <DebugConsoleCommandParsing+0x522>
        if((NameLength - 8) > 7)
 80163b0:	f1b8 0f0f 	cmp.w	r8, #15
        else NameLength= NameLength - 8;
 80163b4:	4a4d      	ldr	r2, [pc, #308]	; (80164ec <DebugConsoleCommandParsing+0x66c>)
 80163b6:	bfd4      	ite	le
 80163b8:	f1a7 0109 	suble.w	r1, r7, #9
          NameLength= 7;
 80163bc:	2107      	movgt	r1, #7
        for(int i=1;i<NameLength+1;i++)
 80163be:	1df0      	adds	r0, r6, #7
 80163c0:	2301      	movs	r3, #1
 80163c2:	4299      	cmp	r1, r3
 80163c4:	da17      	bge.n	80163f6 <DebugConsoleCommandParsing+0x576>
        MDM_SaveGMD(GMD_NODE_NAME,(void *)&NodeName);
 80163c6:	4948      	ldr	r1, [pc, #288]	; (80164e8 <DebugConsoleCommandParsing+0x668>)
        BytesToWrite =sprintf((char *)BufferToWrite,"\nThe node nome has been updated\r\n");
 80163c8:	4c36      	ldr	r4, [pc, #216]	; (80164a4 <DebugConsoleCommandParsing+0x624>)
        MDM_SaveGMD(GMD_NODE_NAME,(void *)&NodeName);
 80163ca:	2008      	movs	r0, #8
 80163cc:	f7f9 fd44 	bl	800fe58 <MDM_SaveGMD>
        NecessityToSaveMetaDataManager=1;
 80163d0:	4b47      	ldr	r3, [pc, #284]	; (80164f0 <DebugConsoleCommandParsing+0x670>)
        BytesToWrite =sprintf((char *)BufferToWrite,"\nThe node nome has been updated\r\n");
 80163d2:	4948      	ldr	r1, [pc, #288]	; (80164f4 <DebugConsoleCommandParsing+0x674>)
 80163d4:	4832      	ldr	r0, [pc, #200]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
        NecessityToSaveMetaDataManager=1;
 80163d6:	2201      	movs	r2, #1
 80163d8:	601a      	str	r2, [r3, #0]
        BytesToWrite =sprintf((char *)BufferToWrite,"\nThe node nome has been updated\r\n");
 80163da:	f006 fd1d 	bl	801ce18 <strcpy>
 80163de:	2121      	movs	r1, #33	; 0x21
        Term_Update(BufferToWrite,BytesToWrite);
 80163e0:	482f      	ldr	r0, [pc, #188]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
        BytesToWrite =sprintf((char *)BufferToWrite,"\nThe node nome has been updated\r\n");
 80163e2:	7021      	strb	r1, [r4, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 80163e4:	f7fa ffca 	bl	801137c <Term_Update>
        BytesToWrite =sprintf((char *)BufferToWrite,"Disconnecting and riconnecting to see the new node name\r\n");
 80163e8:	4943      	ldr	r1, [pc, #268]	; (80164f8 <DebugConsoleCommandParsing+0x678>)
 80163ea:	482d      	ldr	r0, [pc, #180]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
 80163ec:	f006 fd14 	bl	801ce18 <strcpy>
 80163f0:	2139      	movs	r1, #57	; 0x39
 80163f2:	7021      	strb	r1, [r4, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 80163f4:	e62c      	b.n	8016050 <DebugConsoleCommandParsing+0x1d0>
          NodeName[i]= att_data[i+7];
 80163f6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80163fa:	54ec      	strb	r4, [r5, r3]
          BlueNRG_StackValue.BoardName[i-1]= att_data[i+7];
 80163fc:	f802 4b01 	strb.w	r4, [r2], #1
        for(int i=1;i<NameLength+1;i++)
 8016400:	3301      	adds	r3, #1
 8016402:	e7de      	b.n	80163c2 <DebugConsoleCommandParsing+0x542>
        BytesToWrite =sprintf((char *)BufferToWrite,"\nInsert the node name\r\n");
 8016404:	4d27      	ldr	r5, [pc, #156]	; (80164a4 <DebugConsoleCommandParsing+0x624>)
 8016406:	493d      	ldr	r1, [pc, #244]	; (80164fc <DebugConsoleCommandParsing+0x67c>)
 8016408:	4825      	ldr	r0, [pc, #148]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
 801640a:	f006 fd05 	bl	801ce18 <strcpy>
 801640e:	2117      	movs	r1, #23
        Term_Update(BufferToWrite,BytesToWrite);
 8016410:	4823      	ldr	r0, [pc, #140]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
        BytesToWrite =sprintf((char *)BufferToWrite,"\nInsert the node name\r\n");
 8016412:	7029      	strb	r1, [r5, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8016414:	f7fa ffb2 	bl	801137c <Term_Update>
        BytesToWrite =sprintf((char *)BufferToWrite,"Use command: setName 'xxxxxxx'\r\n");
 8016418:	4939      	ldr	r1, [pc, #228]	; (8016500 <DebugConsoleCommandParsing+0x680>)
 801641a:	4821      	ldr	r0, [pc, #132]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
 801641c:	f006 fcfc 	bl	801ce18 <strcpy>
 8016420:	2120      	movs	r1, #32
        Term_Update(BufferToWrite,BytesToWrite);
 8016422:	481f      	ldr	r0, [pc, #124]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
        BytesToWrite =sprintf((char *)BufferToWrite,"Use command: setName 'xxxxxxx'\r\n");
 8016424:	7029      	strb	r1, [r5, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8016426:	f7fa ffa9 	bl	801137c <Term_Update>
      SendBackData=0;
 801642a:	4625      	mov	r5, r4
 801642c:	e6f1      	b.n	8016212 <DebugConsoleCommandParsing+0x392>
      while( (att_data[Index] != '\n') && (att_data[Index] != '\0') )
 801642e:	2900      	cmp	r1, #0
 8016430:	f43f af04 	beq.w	801623c <DebugConsoleCommandParsing+0x3bc>
        VibrParam[20*NumByte + Index]= att_data[Index];
 8016434:	18d0      	adds	r0, r2, r3
        Index++;
 8016436:	3301      	adds	r3, #1
        VibrParam[20*NumByte + Index]= att_data[Index];
 8016438:	74c1      	strb	r1, [r0, #19]
        Index++;
 801643a:	b2db      	uxtb	r3, r3
 801643c:	2501      	movs	r5, #1
 801643e:	e6f6      	b.n	801622e <DebugConsoleCommandParsing+0x3ae>
        if(VibrationParametersCommandParsing(CommandLenght))
 8016440:	7ca3      	ldrb	r3, [r4, #18]
 8016442:	930c      	str	r3, [sp, #48]	; 0x30
  if(Index >= CommandLenght)
 8016444:	2b0d      	cmp	r3, #13
 8016446:	d809      	bhi.n	801645c <DebugConsoleCommandParsing+0x5dc>
    BytesToWrite =sprintf((char *)BufferToWrite,"\r\nParameters not found\r\n");
 8016448:	492e      	ldr	r1, [pc, #184]	; (8016504 <DebugConsoleCommandParsing+0x684>)
 801644a:	4815      	ldr	r0, [pc, #84]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
 801644c:	f006 fce4 	bl	801ce18 <strcpy>
 8016450:	4b14      	ldr	r3, [pc, #80]	; (80164a4 <DebugConsoleCommandParsing+0x624>)
    Term_Update(BufferToWrite,BytesToWrite);
 8016452:	4813      	ldr	r0, [pc, #76]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
    BytesToWrite =sprintf((char *)BufferToWrite,"\r\nParameters not found\r\n");
 8016454:	2118      	movs	r1, #24
 8016456:	7019      	strb	r1, [r3, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 8016458:	f7fa ff90 	bl	801137c <Term_Update>
          Param[i]= Param[i] + ( (VibrParam[Index + DigitNumber - t - 1] & 0x0F) * ((uint32_t)pow(10.0,t)) );
 801645c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8016498 <DebugConsoleCommandParsing+0x618>
          UpdatedParameters= 1;
 8016460:	2700      	movs	r7, #0
 8016462:	230d      	movs	r3, #13
 8016464:	2507      	movs	r5, #7
 8016466:	463e      	mov	r6, r7
  while(Index < CommandLenght)
 8016468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801646a:	429a      	cmp	r2, r3
 801646c:	dc50      	bgt.n	8016510 <DebugConsoleCommandParsing+0x690>
  BytesToWrite =sprintf((char *)BufferToWrite,"\r\nOK\r\n");
 801646e:	4926      	ldr	r1, [pc, #152]	; (8016508 <DebugConsoleCommandParsing+0x688>)
 8016470:	480b      	ldr	r0, [pc, #44]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
 8016472:	f006 fcd1 	bl	801ce18 <strcpy>
 8016476:	4b0b      	ldr	r3, [pc, #44]	; (80164a4 <DebugConsoleCommandParsing+0x624>)
  Term_Update(BufferToWrite,BytesToWrite);  
 8016478:	4809      	ldr	r0, [pc, #36]	; (80164a0 <DebugConsoleCommandParsing+0x620>)
  BytesToWrite =sprintf((char *)BufferToWrite,"\r\nOK\r\n");
 801647a:	2106      	movs	r1, #6
 801647c:	7019      	strb	r1, [r3, #0]
  Term_Update(BufferToWrite,BytesToWrite);  
 801647e:	f7fa ff7d 	bl	801137c <Term_Update>
  if(UpdatedAccParameters)
 8016482:	b10f      	cbz	r7, 8016488 <DebugConsoleCommandParsing+0x608>
    MotionSP_AcceleroConfig();
 8016484:	f000 fb30 	bl	8016ae8 <MotionSP_AcceleroConfig>
        if(VibrationParametersCommandParsing(CommandLenght))
 8016488:	b10e      	cbz	r6, 801648e <DebugConsoleCommandParsing+0x60e>
          SaveVibrationParamToMemory();
 801648a:	f002 fbbd 	bl	8018c08 <SaveVibrationParamToMemory>
        NumByte= 0;
 801648e:	2000      	movs	r0, #0
 8016490:	7460      	strb	r0, [r4, #17]
        SetVibrParam=0;
 8016492:	7420      	strb	r0, [r4, #16]
        CommandLenght=0;
 8016494:	74a0      	strb	r0, [r4, #18]
 8016496:	e6d8      	b.n	801624a <DebugConsoleCommandParsing+0x3ca>
 8016498:	00000000 	.word	0x00000000
 801649c:	40240000 	.word	0x40240000
 80164a0:	20002b41 	.word	0x20002b41
 80164a4:	20002c41 	.word	0x20002c41
 80164a8:	200114d0 	.word	0x200114d0
 80164ac:	080245c7 	.word	0x080245c7
 80164b0:	080245db 	.word	0x080245db
 80164b4:	080245d2 	.word	0x080245d2
 80164b8:	080245ea 	.word	0x080245ea
 80164bc:	080245f7 	.word	0x080245f7
 80164c0:	20011538 	.word	0x20011538
 80164c4:	08024615 	.word	0x08024615
 80164c8:	080255c6 	.word	0x080255c6
 80164cc:	20002e14 	.word	0x20002e14
 80164d0:	0802462d 	.word	0x0802462d
 80164d4:	0802465d 	.word	0x0802465d
 80164d8:	e0042000 	.word	0xe0042000
 80164dc:	1fff7500 	.word	0x1fff7500
 80164e0:	0802466a 	.word	0x0802466a
 80164e4:	080246a3 	.word	0x080246a3
 80164e8:	200124b6 	.word	0x200124b6
 80164ec:	20002985 	.word	0x20002985
 80164f0:	20001798 	.word	0x20001798
 80164f4:	0802408c 	.word	0x0802408c
 80164f8:	080240ae 	.word	0x080240ae
 80164fc:	080246ac 	.word	0x080246ac
 8016500:	080246c4 	.word	0x080246c4
 8016504:	080246e5 	.word	0x080246e5
 8016508:	080247f1 	.word	0x080247f1
 801650c:	08023d17 	.word	0x08023d17
    Index++;
 8016510:	f103 0801 	add.w	r8, r3, #1
    if((VibrParam[Index]=='o') & (VibrParam[Index+1]=='d') & (VibrParam[Index+2]=='r'))
 8016514:	18e2      	adds	r2, r4, r3
 8016516:	eb04 0108 	add.w	r1, r4, r8
 801651a:	7d50      	ldrb	r0, [r2, #21]
 801651c:	7cc9      	ldrb	r1, [r1, #19]
 801651e:	2864      	cmp	r0, #100	; 0x64
 8016520:	bf08      	it	eq
 8016522:	296f      	cmpeq	r1, #111	; 0x6f
 8016524:	f040 80bc 	bne.w	80166a0 <DebugConsoleCommandParsing+0x820>
 8016528:	7d92      	ldrb	r2, [r2, #22]
 801652a:	2a72      	cmp	r2, #114	; 0x72
 801652c:	f040 80b8 	bne.w	80166a0 <DebugConsoleCommandParsing+0x820>
      Index+= 4;
 8016530:	f103 0805 	add.w	r8, r3, #5
      ParamFound= 1;
 8016534:	2201      	movs	r2, #1
      i=0;
 8016536:	2500      	movs	r5, #0
    if((VibrParam[Index]=='f') & (VibrParam[Index+1]=='s'))
 8016538:	eb04 0308 	add.w	r3, r4, r8
 801653c:	7d19      	ldrb	r1, [r3, #20]
 801653e:	2973      	cmp	r1, #115	; 0x73
 8016540:	d106      	bne.n	8016550 <DebugConsoleCommandParsing+0x6d0>
 8016542:	7cdb      	ldrb	r3, [r3, #19]
 8016544:	2b66      	cmp	r3, #102	; 0x66
      ParamFound= 1;
 8016546:	bf02      	ittt	eq
 8016548:	2201      	moveq	r2, #1
      Index+= 3;
 801654a:	f108 0803 	addeq.w	r8, r8, #3
      i=1;
 801654e:	4615      	moveq	r5, r2
    if((VibrParam[Index]=='s') & (VibrParam[Index+1]=='i') & (VibrParam[Index+2]=='z') & (VibrParam[Index+3]=='e'))
 8016550:	eb04 0108 	add.w	r1, r4, r8
 8016554:	7d0b      	ldrb	r3, [r1, #20]
 8016556:	7d48      	ldrb	r0, [r1, #21]
 8016558:	2b69      	cmp	r3, #105	; 0x69
 801655a:	bf08      	it	eq
 801655c:	287a      	cmpeq	r0, #122	; 0x7a
 801655e:	7cc8      	ldrb	r0, [r1, #19]
 8016560:	bf0c      	ite	eq
 8016562:	2301      	moveq	r3, #1
 8016564:	2300      	movne	r3, #0
 8016566:	2873      	cmp	r0, #115	; 0x73
 8016568:	bf14      	ite	ne
 801656a:	2300      	movne	r3, #0
 801656c:	f003 0301 	andeq.w	r3, r3, #1
 8016570:	b133      	cbz	r3, 8016580 <DebugConsoleCommandParsing+0x700>
 8016572:	7d8b      	ldrb	r3, [r1, #22]
 8016574:	2b65      	cmp	r3, #101	; 0x65
      Index+= 5;
 8016576:	bf02      	ittt	eq
 8016578:	f108 0805 	addeq.w	r8, r8, #5
      ParamFound= 1;
 801657c:	2201      	moveq	r2, #1
      i=2;
 801657e:	2502      	moveq	r5, #2
    if((VibrParam[Index]=='w') & (VibrParam[Index+1]=='i') & (VibrParam[Index+2]=='n') & (VibrParam[Index+3]=='d'))
 8016580:	eb04 0108 	add.w	r1, r4, r8
 8016584:	7d0b      	ldrb	r3, [r1, #20]
 8016586:	7d48      	ldrb	r0, [r1, #21]
 8016588:	2b69      	cmp	r3, #105	; 0x69
 801658a:	bf08      	it	eq
 801658c:	286e      	cmpeq	r0, #110	; 0x6e
 801658e:	7cc8      	ldrb	r0, [r1, #19]
 8016590:	bf0c      	ite	eq
 8016592:	2301      	moveq	r3, #1
 8016594:	2300      	movne	r3, #0
 8016596:	2877      	cmp	r0, #119	; 0x77
 8016598:	bf14      	ite	ne
 801659a:	2300      	movne	r3, #0
 801659c:	f003 0301 	andeq.w	r3, r3, #1
 80165a0:	b133      	cbz	r3, 80165b0 <DebugConsoleCommandParsing+0x730>
 80165a2:	7d8b      	ldrb	r3, [r1, #22]
 80165a4:	2b64      	cmp	r3, #100	; 0x64
      Index+= 5;
 80165a6:	bf02      	ittt	eq
 80165a8:	f108 0805 	addeq.w	r8, r8, #5
      ParamFound= 1;
 80165ac:	2201      	moveq	r2, #1
      i=3;
 80165ae:	2503      	moveq	r5, #3
    if((VibrParam[Index]=='t') & (VibrParam[Index+1]=='a') & (VibrParam[Index+2]=='c') & (VibrParam[Index+3]=='q'))
 80165b0:	eb04 0108 	add.w	r1, r4, r8
 80165b4:	7d0b      	ldrb	r3, [r1, #20]
 80165b6:	7d48      	ldrb	r0, [r1, #21]
 80165b8:	2b61      	cmp	r3, #97	; 0x61
 80165ba:	bf08      	it	eq
 80165bc:	2863      	cmpeq	r0, #99	; 0x63
 80165be:	7cc8      	ldrb	r0, [r1, #19]
 80165c0:	bf0c      	ite	eq
 80165c2:	2301      	moveq	r3, #1
 80165c4:	2300      	movne	r3, #0
 80165c6:	2874      	cmp	r0, #116	; 0x74
 80165c8:	bf14      	ite	ne
 80165ca:	2300      	movne	r3, #0
 80165cc:	f003 0301 	andeq.w	r3, r3, #1
 80165d0:	b133      	cbz	r3, 80165e0 <DebugConsoleCommandParsing+0x760>
 80165d2:	7d8b      	ldrb	r3, [r1, #22]
 80165d4:	2b71      	cmp	r3, #113	; 0x71
      Index+= 5;
 80165d6:	bf02      	ittt	eq
 80165d8:	f108 0805 	addeq.w	r8, r8, #5
      ParamFound= 1;
 80165dc:	2201      	moveq	r2, #1
      i=4;
 80165de:	2504      	moveq	r5, #4
    if((VibrParam[Index]=='o') & (VibrParam[Index+1]=='v') & (VibrParam[Index+2]=='l') )
 80165e0:	eb04 0308 	add.w	r3, r4, r8
 80165e4:	7d18      	ldrb	r0, [r3, #20]
 80165e6:	7d59      	ldrb	r1, [r3, #21]
 80165e8:	2876      	cmp	r0, #118	; 0x76
 80165ea:	bf08      	it	eq
 80165ec:	296c      	cmpeq	r1, #108	; 0x6c
 80165ee:	d106      	bne.n	80165fe <DebugConsoleCommandParsing+0x77e>
 80165f0:	7cdb      	ldrb	r3, [r3, #19]
 80165f2:	2b6f      	cmp	r3, #111	; 0x6f
      Index+= 4;
 80165f4:	bf02      	ittt	eq
 80165f6:	f108 0804 	addeq.w	r8, r8, #4
      ParamFound= 1;
 80165fa:	2201      	moveq	r2, #1
      i=5;
 80165fc:	2505      	moveq	r5, #5
    if((VibrParam[Index]=='s') & (VibrParam[Index+1]=='u') & (VibrParam[Index+2]=='b') & (VibrParam[Index+3]=='r') & (VibrParam[Index+4]=='n') & (VibrParam[Index+5]=='g'))
 80165fe:	eb04 0108 	add.w	r1, r4, r8
 8016602:	7d0b      	ldrb	r3, [r1, #20]
 8016604:	f891 c015 	ldrb.w	ip, [r1, #21]
 8016608:	7cc8      	ldrb	r0, [r1, #19]
 801660a:	2b75      	cmp	r3, #117	; 0x75
 801660c:	bf08      	it	eq
 801660e:	f1bc 0f62 	cmpeq.w	ip, #98	; 0x62
 8016612:	bf0c      	ite	eq
 8016614:	2301      	moveq	r3, #1
 8016616:	2300      	movne	r3, #0
 8016618:	f891 c016 	ldrb.w	ip, [r1, #22]
 801661c:	2873      	cmp	r0, #115	; 0x73
 801661e:	bf14      	ite	ne
 8016620:	2300      	movne	r3, #0
 8016622:	f003 0301 	andeq.w	r3, r3, #1
 8016626:	f1bc 0f72 	cmp.w	ip, #114	; 0x72
 801662a:	bf14      	ite	ne
 801662c:	2300      	movne	r3, #0
 801662e:	f003 0301 	andeq.w	r3, r3, #1
 8016632:	f891 c017 	ldrb.w	ip, [r1, #23]
 8016636:	f1bc 0f6e 	cmp.w	ip, #110	; 0x6e
 801663a:	bf14      	ite	ne
 801663c:	2300      	movne	r3, #0
 801663e:	f003 0301 	andeq.w	r3, r3, #1
 8016642:	b37b      	cbz	r3, 80166a4 <DebugConsoleCommandParsing+0x824>
 8016644:	7e0b      	ldrb	r3, [r1, #24]
 8016646:	2b67      	cmp	r3, #103	; 0x67
 8016648:	d12c      	bne.n	80166a4 <DebugConsoleCommandParsing+0x824>
      Index+= 7;
 801664a:	f108 0807 	add.w	r8, r8, #7
      i=6;
 801664e:	2506      	movs	r5, #6
 8016650:	2300      	movs	r3, #0
      while( (VibrParam[Index + DigitNumber] != ' ') &&
 8016652:	fa58 f983 	uxtab	r9, r8, r3
 8016656:	eb04 0109 	add.w	r1, r4, r9
 801665a:	b2da      	uxtb	r2, r3
 801665c:	7cc9      	ldrb	r1, [r1, #19]
 801665e:	290d      	cmp	r1, #13
 8016660:	d004      	beq.n	801666c <DebugConsoleCommandParsing+0x7ec>
             (VibrParam[Index + DigitNumber] != '\r') &&
 8016662:	f011 0fdf 	tst.w	r1, #223	; 0xdf
 8016666:	f103 0301 	add.w	r3, r3, #1
 801666a:	d1f2      	bne.n	8016652 <DebugConsoleCommandParsing+0x7d2>
      Param[i]= VibrParam[Index + DigitNumber - 1] & 0x0F;
 801666c:	eb04 0309 	add.w	r3, r4, r9
 8016670:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 8016674:	7c9b      	ldrb	r3, [r3, #18]
      if(DigitNumber > 1)
 8016676:	2a01      	cmp	r2, #1
      Param[i]= VibrParam[Index + DigitNumber - 1] & 0x0F;
 8016678:	f003 030f 	and.w	r3, r3, #15
 801667c:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
      if(DigitNumber > 1)
 8016680:	d906      	bls.n	8016690 <DebugConsoleCommandParsing+0x810>
 8016682:	4b87      	ldr	r3, [pc, #540]	; (80168a0 <DebugConsoleCommandParsing+0xa20>)
        for(int t=1; t<DigitNumber; t++)
 8016684:	f04f 0a01 	mov.w	sl, #1
 8016688:	eb09 0b03 	add.w	fp, r9, r3
 801668c:	4552      	cmp	r2, sl
 801668e:	dc18      	bgt.n	80166c2 <DebugConsoleCommandParsing+0x842>
      switch(i)
 8016690:	2d06      	cmp	r5, #6
 8016692:	d870      	bhi.n	8016776 <DebugConsoleCommandParsing+0x8f6>
 8016694:	e8df f005 	tbb	[pc, r5]
 8016698:	947e6439 	.word	0x947e6439
 801669c:	a89c      	.short	0xa89c
 801669e:	b1          	.byte	0xb1
 801669f:	00          	.byte	0x00
    ParamFound= 0;
 80166a0:	2200      	movs	r2, #0
 80166a2:	e749      	b.n	8016538 <DebugConsoleCommandParsing+0x6b8>
    if(ParamFound == 1)
 80166a4:	2a00      	cmp	r2, #0
 80166a6:	d1d3      	bne.n	8016650 <DebugConsoleCommandParsing+0x7d0>
      if(VibrParam[Index] != '-')
 80166a8:	282d      	cmp	r0, #45	; 0x2d
 80166aa:	d066      	beq.n	801677a <DebugConsoleCommandParsing+0x8fa>
        BytesToWrite =sprintf((char *)BufferToWrite,"\r\nParam not found\r\n");
 80166ac:	497d      	ldr	r1, [pc, #500]	; (80168a4 <DebugConsoleCommandParsing+0xa24>)
 80166ae:	487e      	ldr	r0, [pc, #504]	; (80168a8 <DebugConsoleCommandParsing+0xa28>)
 80166b0:	f006 fbb2 	bl	801ce18 <strcpy>
 80166b4:	4b7d      	ldr	r3, [pc, #500]	; (80168ac <DebugConsoleCommandParsing+0xa2c>)
        Term_Update(BufferToWrite,BytesToWrite);
 80166b6:	487c      	ldr	r0, [pc, #496]	; (80168a8 <DebugConsoleCommandParsing+0xa28>)
        BytesToWrite =sprintf((char *)BufferToWrite,"\r\nParam not found\r\n");
 80166b8:	2113      	movs	r1, #19
 80166ba:	7019      	strb	r1, [r3, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 80166bc:	f7fa fe5e 	bl	801137c <Term_Update>
 80166c0:	e05b      	b.n	801677a <DebugConsoleCommandParsing+0x8fa>
          Param[i]= Param[i] + ( (VibrParam[Index + DigitNumber - t - 1] & 0x0F) * ((uint32_t)pow(10.0,t)) );
 80166c2:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
 80166c6:	930d      	str	r3, [sp, #52]	; 0x34
 80166c8:	4650      	mov	r0, sl
 80166ca:	f81b 3901 	ldrb.w	r3, [fp], #-1
 80166ce:	920f      	str	r2, [sp, #60]	; 0x3c
 80166d0:	930e      	str	r3, [sp, #56]	; 0x38
 80166d2:	f7ed ffaf 	bl	8004634 <__aeabi_i2d>
 80166d6:	eeb0 0a48 	vmov.f32	s0, s16
 80166da:	eef0 0a68 	vmov.f32	s1, s17
 80166de:	ec41 0b11 	vmov	d1, r0, r1
 80166e2:	f009 fe5d 	bl	80203a0 <pow>
 80166e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80166e8:	ec51 0b10 	vmov	r0, r1, d0
 80166ec:	f003 030f 	and.w	r3, r3, #15
 80166f0:	930e      	str	r3, [sp, #56]	; 0x38
 80166f2:	f7ee fae1 	bl	8004cb8 <__aeabi_d2uiz>
 80166f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80166fa:	fb00 2003 	mla	r0, r0, r3, r2
 80166fe:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
        for(int t=1; t<DigitNumber; t++)
 8016702:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016704:	f10a 0a01 	add.w	sl, sl, #1
 8016708:	e7c0      	b.n	801668c <DebugConsoleCommandParsing+0x80c>
        if( (Param[i] == 13)   || (Param[i] == 26)   || (Param[i] == 52)   ||
 801670a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801670c:	2b0d      	cmp	r3, #13
 801670e:	d01a      	beq.n	8016746 <DebugConsoleCommandParsing+0x8c6>
 8016710:	2b1a      	cmp	r3, #26
 8016712:	d018      	beq.n	8016746 <DebugConsoleCommandParsing+0x8c6>
 8016714:	2b34      	cmp	r3, #52	; 0x34
 8016716:	d016      	beq.n	8016746 <DebugConsoleCommandParsing+0x8c6>
 8016718:	2b68      	cmp	r3, #104	; 0x68
 801671a:	d014      	beq.n	8016746 <DebugConsoleCommandParsing+0x8c6>
            (Param[i] == 104)  || (Param[i] == 208)  || (Param[i] == 416)  ||
 801671c:	2bd0      	cmp	r3, #208	; 0xd0
 801671e:	d012      	beq.n	8016746 <DebugConsoleCommandParsing+0x8c6>
 8016720:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8016724:	d00f      	beq.n	8016746 <DebugConsoleCommandParsing+0x8c6>
 8016726:	f240 3241 	movw	r2, #833	; 0x341
 801672a:	4293      	cmp	r3, r2
 801672c:	d00b      	beq.n	8016746 <DebugConsoleCommandParsing+0x8c6>
            (Param[i] == 833)  || (Param[i] == 1660) || (Param[i] == 3330) || (Param[i] == 6660)
 801672e:	f240 627c 	movw	r2, #1660	; 0x67c
 8016732:	4293      	cmp	r3, r2
 8016734:	d007      	beq.n	8016746 <DebugConsoleCommandParsing+0x8c6>
 8016736:	f640 5202 	movw	r2, #3330	; 0xd02
 801673a:	4293      	cmp	r3, r2
 801673c:	d003      	beq.n	8016746 <DebugConsoleCommandParsing+0x8c6>
 801673e:	f641 2204 	movw	r2, #6660	; 0x1a04
 8016742:	4293      	cmp	r3, r2
 8016744:	d106      	bne.n	8016754 <DebugConsoleCommandParsing+0x8d4>
          AcceleroParams.AccFifoBdr= Param[i];
 8016746:	4a5a      	ldr	r2, [pc, #360]	; (80168b0 <DebugConsoleCommandParsing+0xa30>)
 8016748:	b29b      	uxth	r3, r3
 801674a:	8093      	strh	r3, [r2, #4]
          AcceleroParams.AccOdr=  Param[i];
 801674c:	8013      	strh	r3, [r2, #0]
          UpdatedAccParameters= 1;
 801674e:	2701      	movs	r7, #1
          UpdatedParameters= 1;
 8016750:	2601      	movs	r6, #1
 8016752:	e010      	b.n	8016776 <DebugConsoleCommandParsing+0x8f6>
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for odr\r\n");
 8016754:	4957      	ldr	r1, [pc, #348]	; (80168b4 <DebugConsoleCommandParsing+0xa34>)
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for ovl\r\n");
 8016756:	4854      	ldr	r0, [pc, #336]	; (80168a8 <DebugConsoleCommandParsing+0xa28>)
 8016758:	f006 fb5e 	bl	801ce18 <strcpy>
 801675c:	211e      	movs	r1, #30
 801675e:	e013      	b.n	8016788 <DebugConsoleCommandParsing+0x908>
        if( (Param[i] == 2) || (Param[i] == 4) || (Param[i] == 8) || (Param[i] == 16) )
 8016760:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016762:	2b10      	cmp	r3, #16
 8016764:	d80b      	bhi.n	801677e <DebugConsoleCommandParsing+0x8fe>
 8016766:	4a54      	ldr	r2, [pc, #336]	; (80168b8 <DebugConsoleCommandParsing+0xa38>)
 8016768:	40da      	lsrs	r2, r3
 801676a:	07d1      	lsls	r1, r2, #31
 801676c:	d507      	bpl.n	801677e <DebugConsoleCommandParsing+0x8fe>
          AcceleroParams.fs= Param[i];
 801676e:	4a50      	ldr	r2, [pc, #320]	; (80168b0 <DebugConsoleCommandParsing+0xa30>)
          UpdatedAccParameters= 1;
 8016770:	462f      	mov	r7, r5
          AcceleroParams.fs= Param[i];
 8016772:	8113      	strh	r3, [r2, #8]
          UpdatedParameters= 1;
 8016774:	462e      	mov	r6, r5
      Index= Index + DigitNumber + 1;
 8016776:	f109 0801 	add.w	r8, r9, #1
          UpdatedParameters= 1;
 801677a:	4643      	mov	r3, r8
 801677c:	e674      	b.n	8016468 <DebugConsoleCommandParsing+0x5e8>
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for fs\r\n");
 801677e:	494f      	ldr	r1, [pc, #316]	; (80168bc <DebugConsoleCommandParsing+0xa3c>)
 8016780:	4849      	ldr	r0, [pc, #292]	; (80168a8 <DebugConsoleCommandParsing+0xa28>)
 8016782:	f006 fb49 	bl	801ce18 <strcpy>
 8016786:	211d      	movs	r1, #29
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for nsubrng\r\n");
 8016788:	4b48      	ldr	r3, [pc, #288]	; (80168ac <DebugConsoleCommandParsing+0xa2c>)
          Term_Update(BufferToWrite,BytesToWrite);
 801678a:	4847      	ldr	r0, [pc, #284]	; (80168a8 <DebugConsoleCommandParsing+0xa28>)
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for nsubrng\r\n");
 801678c:	7019      	strb	r1, [r3, #0]
          Term_Update(BufferToWrite,BytesToWrite);
 801678e:	f7fa fdf5 	bl	801137c <Term_Update>
 8016792:	e7f0      	b.n	8016776 <DebugConsoleCommandParsing+0x8f6>
        if( (Param[i] == 256) || (Param[i] == 512) || (Param[i] == 1024) || (Param[i] == 2048))
 8016794:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801679a:	d008      	beq.n	80167ae <DebugConsoleCommandParsing+0x92e>
 801679c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80167a0:	d005      	beq.n	80167ae <DebugConsoleCommandParsing+0x92e>
 80167a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80167a6:	d002      	beq.n	80167ae <DebugConsoleCommandParsing+0x92e>
 80167a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80167ac:	d102      	bne.n	80167b4 <DebugConsoleCommandParsing+0x934>
          MotionSP_Parameters.FftSize= Param[i];
 80167ae:	4a44      	ldr	r2, [pc, #272]	; (80168c0 <DebugConsoleCommandParsing+0xa40>)
 80167b0:	8013      	strh	r3, [r2, #0]
 80167b2:	e7cd      	b.n	8016750 <DebugConsoleCommandParsing+0x8d0>
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for size\r\n");
 80167b4:	4943      	ldr	r1, [pc, #268]	; (80168c4 <DebugConsoleCommandParsing+0xa44>)
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for tacq\r\n");
 80167b6:	483c      	ldr	r0, [pc, #240]	; (80168a8 <DebugConsoleCommandParsing+0xa28>)
 80167b8:	f006 fb2e 	bl	801ce18 <strcpy>
 80167bc:	211f      	movs	r1, #31
 80167be:	e7e3      	b.n	8016788 <DebugConsoleCommandParsing+0x908>
        if(Param[i] < 4)
 80167c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167c2:	2b03      	cmp	r3, #3
 80167c4:	d802      	bhi.n	80167cc <DebugConsoleCommandParsing+0x94c>
          MotionSP_Parameters.window= Param[i];
 80167c6:	4a3e      	ldr	r2, [pc, #248]	; (80168c0 <DebugConsoleCommandParsing+0xa40>)
 80167c8:	8093      	strh	r3, [r2, #4]
          UpdatedParameters= 1;
 80167ca:	e7c1      	b.n	8016750 <DebugConsoleCommandParsing+0x8d0>
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for wind\r\n");
 80167cc:	493e      	ldr	r1, [pc, #248]	; (80168c8 <DebugConsoleCommandParsing+0xa48>)
 80167ce:	e7f2      	b.n	80167b6 <DebugConsoleCommandParsing+0x936>
        if( (Param[i] >= 500) && (Param[i] <= 60000) )
 80167d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80167d2:	f64e 026c 	movw	r2, #59500	; 0xe86c
 80167d6:	f5a3 71fa 	sub.w	r1, r3, #500	; 0x1f4
 80167da:	4291      	cmp	r1, r2
 80167dc:	d802      	bhi.n	80167e4 <DebugConsoleCommandParsing+0x964>
          MotionSP_Parameters.tacq= Param[i];
 80167de:	4a38      	ldr	r2, [pc, #224]	; (80168c0 <DebugConsoleCommandParsing+0xa40>)
 80167e0:	8113      	strh	r3, [r2, #8]
          UpdatedParameters= 1;
 80167e2:	e7b5      	b.n	8016750 <DebugConsoleCommandParsing+0x8d0>
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for tacq\r\n");
 80167e4:	4939      	ldr	r1, [pc, #228]	; (80168cc <DebugConsoleCommandParsing+0xa4c>)
 80167e6:	e7e6      	b.n	80167b6 <DebugConsoleCommandParsing+0x936>
        if( (Param[i] >= 5) && (Param[i] <= 95) )
 80167e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80167ea:	1f5a      	subs	r2, r3, #5
 80167ec:	2a5a      	cmp	r2, #90	; 0x5a
 80167ee:	d802      	bhi.n	80167f6 <DebugConsoleCommandParsing+0x976>
          MotionSP_Parameters.FftOvl= Param[i];
 80167f0:	4a33      	ldr	r2, [pc, #204]	; (80168c0 <DebugConsoleCommandParsing+0xa40>)
 80167f2:	7293      	strb	r3, [r2, #10]
          UpdatedParameters= 1;
 80167f4:	e7ac      	b.n	8016750 <DebugConsoleCommandParsing+0x8d0>
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for ovl\r\n");
 80167f6:	4936      	ldr	r1, [pc, #216]	; (80168d0 <DebugConsoleCommandParsing+0xa50>)
 80167f8:	e7ad      	b.n	8016756 <DebugConsoleCommandParsing+0x8d6>
        if( (Param[i] == 8) || (Param[i] == 16) || (Param[i] == 32) || (Param[i] == 64) )
 80167fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80167fc:	f1a3 0108 	sub.w	r1, r3, #8
 8016800:	2918      	cmp	r1, #24
 8016802:	d907      	bls.n	8016814 <DebugConsoleCommandParsing+0x994>
 8016804:	2b40      	cmp	r3, #64	; 0x40
 8016806:	d009      	beq.n	801681c <DebugConsoleCommandParsing+0x99c>
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for nsubrng\r\n");
 8016808:	4932      	ldr	r1, [pc, #200]	; (80168d4 <DebugConsoleCommandParsing+0xa54>)
 801680a:	4827      	ldr	r0, [pc, #156]	; (80168a8 <DebugConsoleCommandParsing+0xa28>)
 801680c:	f006 fb04 	bl	801ce18 <strcpy>
 8016810:	2122      	movs	r1, #34	; 0x22
 8016812:	e7b9      	b.n	8016788 <DebugConsoleCommandParsing+0x908>
        if( (Param[i] == 8) || (Param[i] == 16) || (Param[i] == 32) || (Param[i] == 64) )
 8016814:	4a30      	ldr	r2, [pc, #192]	; (80168d8 <DebugConsoleCommandParsing+0xa58>)
 8016816:	40ca      	lsrs	r2, r1
 8016818:	07d2      	lsls	r2, r2, #31
 801681a:	d5f5      	bpl.n	8016808 <DebugConsoleCommandParsing+0x988>
          MotionSP_Parameters.subrange_num= Param[i];
 801681c:	4a28      	ldr	r2, [pc, #160]	; (80168c0 <DebugConsoleCommandParsing+0xa40>)
 801681e:	8193      	strh	r3, [r2, #12]
          UpdatedParameters= 1;
 8016820:	e796      	b.n	8016750 <DebugConsoleCommandParsing+0x8d0>
   if(SendBackData) {
 8016822:	2d00      	cmp	r5, #0
 8016824:	f43f ad11 	beq.w	801624a <DebugConsoleCommandParsing+0x3ca>
    if(att_data[0]=='@') {
 8016828:	7832      	ldrb	r2, [r6, #0]
 801682a:	2a40      	cmp	r2, #64	; 0x40
 801682c:	f47f ad0e 	bne.w	801624c <DebugConsoleCommandParsing+0x3cc>
      if(att_data[1]=='T') {
 8016830:	7872      	ldrb	r2, [r6, #1]
 8016832:	2a54      	cmp	r2, #84	; 0x54
 8016834:	d116      	bne.n	8016864 <DebugConsoleCommandParsing+0x9e4>
        loc_att_data[0] = (FEATURE_MASK_TEMP1>>24)&0xFF;
 8016836:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
        loc_att_data[1] = (FEATURE_MASK_TEMP1>>16)&0xFF;
 801683a:	2204      	movs	r2, #4
        loc_att_data[1] = (FEATURE_MASK_ACC>>16)&0xFF;
 801683c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
        loc_att_data[2] = (FEATURE_MASK_MIC>>8 )&0xFF;
 8016840:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
        loc_att_data[3] = (FEATURE_MASK_MIC    )&0xFF;
 8016844:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
        loc_att_data[4] = 255;
 8016848:	23ff      	movs	r3, #255	; 0xff
 801684a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
        switch(att_data[2]) {
 801684e:	78b3      	ldrb	r3, [r6, #2]
 8016850:	3b44      	subs	r3, #68	; 0x44
 8016852:	2b09      	cmp	r3, #9
 8016854:	d818      	bhi.n	8016888 <DebugConsoleCommandParsing+0xa08>
 8016856:	e8df f003 	tbb	[pc, r3]
 801685a:	1720      	.short	0x1720
 801685c:	171e1717 	.word	0x171e1717
 8016860:	1c141717 	.word	0x1c141717
      } else if(att_data[1]=='A') {
 8016864:	2a41      	cmp	r2, #65	; 0x41
 8016866:	d103      	bne.n	8016870 <DebugConsoleCommandParsing+0x9f0>
        loc_att_data[0] = (FEATURE_MASK_ACC>>24)&0xFF;
 8016868:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
        loc_att_data[1] = (FEATURE_MASK_ACC>>16)&0xFF;
 801686c:	2280      	movs	r2, #128	; 0x80
 801686e:	e7e5      	b.n	801683c <DebugConsoleCommandParsing+0x9bc>
      } else if(att_data[1]=='M') {
 8016870:	2a4d      	cmp	r2, #77	; 0x4d
 8016872:	f47f aceb 	bne.w	801624c <DebugConsoleCommandParsing+0x3cc>
        loc_att_data[0] = (FEATURE_MASK_MIC>>24)&0xFF;
 8016876:	2204      	movs	r2, #4
 8016878:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
        loc_att_data[1] = (FEATURE_MASK_MIC>>16)&0xFF;
 801687c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 8016880:	e7de      	b.n	8016840 <DebugConsoleCommandParsing+0x9c0>
            loc_att_data[5] = 50; /* @5S */
 8016882:	2332      	movs	r3, #50	; 0x32
            loc_att_data[5] = 0; /* Default */
 8016884:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
        SendBackData = ConfigCommandParsing(loc_att_data,loc_data_length);
 8016888:	a812      	add	r0, sp, #72	; 0x48
 801688a:	f7ff fa91 	bl	8015db0 <ConfigCommandParsing.constprop.0>
 801688e:	4605      	mov	r5, r0
  return SendBackData;
 8016890:	e4dc      	b.n	801624c <DebugConsoleCommandParsing+0x3cc>
            loc_att_data[5] = 10; /* @1S */
 8016892:	230a      	movs	r3, #10
 8016894:	e7f6      	b.n	8016884 <DebugConsoleCommandParsing+0xa04>
            loc_att_data[5] = 1; /* @100mS */
 8016896:	2301      	movs	r3, #1
 8016898:	e7f4      	b.n	8016884 <DebugConsoleCommandParsing+0xa04>
            loc_att_data[5] = 0; /* Default */
 801689a:	2300      	movs	r3, #0
 801689c:	e7f2      	b.n	8016884 <DebugConsoleCommandParsing+0xa04>
 801689e:	bf00      	nop
 80168a0:	200114e1 	.word	0x200114e1
 80168a4:	080247dd 	.word	0x080247dd
 80168a8:	20002b41 	.word	0x20002b41
 80168ac:	20002c41 	.word	0x20002c41
 80168b0:	20011538 	.word	0x20011538
 80168b4:	080246fe 	.word	0x080246fe
 80168b8:	00010114 	.word	0x00010114
 80168bc:	0802471d 	.word	0x0802471d
 80168c0:	20002e14 	.word	0x20002e14
 80168c4:	0802473b 	.word	0x0802473b
 80168c8:	0802475b 	.word	0x0802475b
 80168cc:	0802477b 	.word	0x0802477b
 80168d0:	0802479b 	.word	0x0802479b
 80168d4:	080247ba 	.word	0x080247ba
 80168d8:	01000101 	.word	0x01000101

080168dc <DebugConsoleParsing>:
  if(SizeOfUpdateBlueFW!=0) {
 80168dc:	4b03      	ldr	r3, [pc, #12]	; (80168ec <DebugConsoleParsing+0x10>)
 80168de:	685b      	ldr	r3, [r3, #4]
 80168e0:	b10b      	cbz	r3, 80168e6 <DebugConsoleParsing+0xa>
 80168e2:	f7ff ba37 	b.w	8015d54 <DebugConsoleParsing.part.0>
    SendBackData = DebugConsoleCommandParsing(att_data,data_length);
 80168e6:	f7ff bacb 	b.w	8015e80 <DebugConsoleCommandParsing>
 80168ea:	bf00      	nop
 80168ec:	200114d0 	.word	0x200114d0

080168f0 <BluetoothInit>:
  BlueNRG_StackValue.ConfigValueOffsets                   = CONFIG_DATA_PUBADDR_OFFSET;
 80168f0:	4b09      	ldr	r3, [pc, #36]	; (8016918 <BluetoothInit+0x28>)
 80168f2:	f44f 3283 	mov.w	r2, #67072	; 0x10600
 80168f6:	601a      	str	r2, [r3, #0]
  BlueNRG_StackValue.AuthenticationRequirements           = BONDING;
 80168f8:	f2a2 42ff 	subw	r2, r2, #1279	; 0x4ff
 80168fc:	605a      	str	r2, [r3, #4]
  BlueNRG_StackValue.EnableHighPowerMode= 1; /*  High Power */
 80168fe:	4a07      	ldr	r2, [pc, #28]	; (801691c <BluetoothInit+0x2c>)
 8016900:	609a      	str	r2, [r3, #8]
  BlueNRG_StackValue.EnableSecureConnection=0;
 8016902:	2100      	movs	r1, #0
  BlueNRG_StackValue.EnableExtConfig = 1;
 8016904:	2201      	movs	r2, #1
  BlueNRG_StackValue.EnableSecureConnection=0;
 8016906:	7559      	strb	r1, [r3, #21]
  BlueNRG_StackValue.EnableRandomSecurePIN = 1;
 8016908:	839a      	strh	r2, [r3, #28]
  BlueNRG_StackValue.SecurePIN=123456;
 801690a:	4905      	ldr	r1, [pc, #20]	; (8016920 <BluetoothInit+0x30>)
  BlueNRG_StackValue.EnableExtConfig = 1;
 801690c:	731a      	strb	r2, [r3, #12]
  BlueNRG_StackValue.SecurePIN=123456;
 801690e:	6199      	str	r1, [r3, #24]
    BlueNRG_StackValue.ForceRescan =1;
 8016910:	779a      	strb	r2, [r3, #30]
  InitBleManager();
 8016912:	f7fb b8ab 	b.w	8011a6c <InitBleManager>
 8016916:	bf00      	nop
 8016918:	20002978 	.word	0x20002978
 801691c:	01000401 	.word	0x01000401
 8016920:	0001e240 	.word	0x0001e240

08016924 <BLE_InitCustomService>:
void BLE_InitCustomService(void) {
 8016924:	b508      	push	{r3, lr}
  CustomDebugConsoleParsingCallback = &DebugConsoleParsing;
 8016926:	4b27      	ldr	r3, [pc, #156]	; (80169c4 <BLE_InitCustomService+0xa0>)
 8016928:	4a27      	ldr	r2, [pc, #156]	; (80169c8 <BLE_InitCustomService+0xa4>)
 801692a:	601a      	str	r2, [r3, #0]
  CustomConnectionCompleted = &ConnectionCompletedFunction;
 801692c:	4b27      	ldr	r3, [pc, #156]	; (80169cc <BLE_InitCustomService+0xa8>)
 801692e:	4a28      	ldr	r2, [pc, #160]	; (80169d0 <BLE_InitCustomService+0xac>)
 8016930:	601a      	str	r2, [r3, #0]
  CustomDisconnectionCompleted = &DisconnectionCompletedFunction;
 8016932:	4b28      	ldr	r3, [pc, #160]	; (80169d4 <BLE_InitCustomService+0xb0>)
 8016934:	4a28      	ldr	r2, [pc, #160]	; (80169d8 <BLE_InitCustomService+0xb4>)
 8016936:	601a      	str	r2, [r3, #0]
  CustomExtConfigUidCommandCallback  = &ExtExtConfigUidCommandCallback;
 8016938:	4b28      	ldr	r3, [pc, #160]	; (80169dc <BLE_InitCustomService+0xb8>)
 801693a:	4a29      	ldr	r2, [pc, #164]	; (80169e0 <BLE_InitCustomService+0xbc>)
 801693c:	601a      	str	r2, [r3, #0]
  CustomExtConfigInfoCommandCallback = &ExtConfigInfoCommandCallback;
 801693e:	4b29      	ldr	r3, [pc, #164]	; (80169e4 <BLE_InitCustomService+0xc0>)
 8016940:	4a29      	ldr	r2, [pc, #164]	; (80169e8 <BLE_InitCustomService+0xc4>)
 8016942:	601a      	str	r2, [r3, #0]
  CustomExtConfigHelpCommandCallback = &ExtConfigHelpCommandCallback;
 8016944:	4b29      	ldr	r3, [pc, #164]	; (80169ec <BLE_InitCustomService+0xc8>)
 8016946:	4a2a      	ldr	r2, [pc, #168]	; (80169f0 <BLE_InitCustomService+0xcc>)
 8016948:	601a      	str	r2, [r3, #0]
  CustomExtConfigVersionFwCommandCallback = &ExtConfigVersionFwCommandCallback;
 801694a:	4b2a      	ldr	r3, [pc, #168]	; (80169f4 <BLE_InitCustomService+0xd0>)
 801694c:	4a2a      	ldr	r2, [pc, #168]	; (80169f8 <BLE_InitCustomService+0xd4>)
 801694e:	601a      	str	r2, [r3, #0]
  CustomExtConfigPowerStatusCommandCallback = &ExtConfigPowerStatusCommandCallback;
 8016950:	4b2a      	ldr	r3, [pc, #168]	; (80169fc <BLE_InitCustomService+0xd8>)
 8016952:	4a2b      	ldr	r2, [pc, #172]	; (8016a00 <BLE_InitCustomService+0xdc>)
 8016954:	601a      	str	r2, [r3, #0]
  CustomExtConfigSetNameCommandCallback = &ExtConfigSetNameCommandCallback;
 8016956:	4b2b      	ldr	r3, [pc, #172]	; (8016a04 <BLE_InitCustomService+0xe0>)
 8016958:	4a2b      	ldr	r2, [pc, #172]	; (8016a08 <BLE_InitCustomService+0xe4>)
 801695a:	601a      	str	r2, [r3, #0]
  CustomExtConfigReadCustomCommandsCallback = &ExtConfigReadCustomCommandsCallback;
 801695c:	4b2b      	ldr	r3, [pc, #172]	; (8016a0c <BLE_InitCustomService+0xe8>)
 801695e:	4a2c      	ldr	r2, [pc, #176]	; (8016a10 <BLE_InitCustomService+0xec>)
 8016960:	601a      	str	r2, [r3, #0]
  CustomExtConfigCustomCommandCallback = &ExtConfigCustomCommandCallback;
 8016962:	4b2c      	ldr	r3, [pc, #176]	; (8016a14 <BLE_InitCustomService+0xf0>)
 8016964:	4a2c      	ldr	r2, [pc, #176]	; (8016a18 <BLE_InitCustomService+0xf4>)
 8016966:	601a      	str	r2, [r3, #0]
  BleManagerAddChar(BLE_InitEnvService(1, 1, 1));
 8016968:	2201      	movs	r2, #1
 801696a:	4611      	mov	r1, r2
 801696c:	4610      	mov	r0, r2
 801696e:	f7f9 fc15 	bl	801019c <BLE_InitEnvService>
 8016972:	f7fa fe0b 	bl	801158c <BleManagerAddChar>
  BleManagerAddChar(BLE_InitInertialService(1,1,1));
 8016976:	2201      	movs	r2, #1
 8016978:	4611      	mov	r1, r2
 801697a:	4610      	mov	r0, r2
 801697c:	f7fa f848 	bl	8010a10 <BLE_InitInertialService>
 8016980:	f7fa fe04 	bl	801158c <BleManagerAddChar>
  BleManagerAddChar(BLE_InitAudioLevelService(AUDIO_IN_CHANNELS));
 8016984:	2002      	movs	r0, #2
 8016986:	f7f9 fac3 	bl	800ff10 <BLE_InitAudioLevelService>
 801698a:	f7fa fdff 	bl	801158c <BleManagerAddChar>
  BleManagerAddChar(BLE_InitBatteryService());
 801698e:	f7f9 fb51 	bl	8010034 <BLE_InitBatteryService>
 8016992:	f7fa fdfb 	bl	801158c <BleManagerAddChar>
  BleManagerAddChar(BLE_InitFFTAmplitudeService());
 8016996:	f7f9 ffb1 	bl	80108fc <BLE_InitFFTAmplitudeService>
 801699a:	f7fa fdf7 	bl	801158c <BleManagerAddChar>
  BleManagerAddChar(BLE_InitTimeDomainService());
 801699e:	f7fc f8bf 	bl	8012b20 <BLE_InitTimeDomainService>
 80169a2:	f7fa fdf3 	bl	801158c <BleManagerAddChar>
  BleManagerAddChar(BLE_InitFFTAlarmSpeedStatusService());
 80169a6:	f7f9 fde7 	bl	8010578 <BLE_InitFFTAlarmSpeedStatusService>
 80169aa:	f7fa fdef 	bl	801158c <BleManagerAddChar>
  BleManagerAddChar(BLE_InitFFTAlarmAccPeakStatusService());
 80169ae:	f7f9 fd21 	bl	80103f4 <BLE_InitFFTAlarmAccPeakStatusService>
 80169b2:	f7fa fdeb 	bl	801158c <BleManagerAddChar>
  BleManagerAddChar(BLE_InitFFTAlarmSubrangeStatusService());
 80169b6:	f7f9 fea3 	bl	8010700 <BLE_InitFFTAlarmSubrangeStatusService>
}
 80169ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BleManagerAddChar(BLE_InitFFTAlarmSubrangeStatusService());
 80169be:	f7fa bde5 	b.w	801158c <BleManagerAddChar>
 80169c2:	bf00      	nop
 80169c4:	20002c44 	.word	0x20002c44
 80169c8:	080168dd 	.word	0x080168dd
 80169cc:	20002d2c 	.word	0x20002d2c
 80169d0:	08015d25 	.word	0x08015d25
 80169d4:	20002d30 	.word	0x20002d30
 80169d8:	08015c49 	.word	0x08015c49
 80169dc:	20002d54 	.word	0x20002d54
 80169e0:	08015685 	.word	0x08015685
 80169e4:	20002d58 	.word	0x20002d58
 80169e8:	08015ba9 	.word	0x08015ba9
 80169ec:	20002d5c 	.word	0x20002d5c
 80169f0:	080156bd 	.word	0x080156bd
 80169f4:	20002d64 	.word	0x20002d64
 80169f8:	08015691 	.word	0x08015691
 80169fc:	20002d60 	.word	0x20002d60
 8016a00:	08015b1d 	.word	0x08015b1d
 8016a04:	20002d3c 	.word	0x20002d3c
 8016a08:	08015aa1 	.word	0x08015aa1
 8016a0c:	20002d68 	.word	0x20002d68
 8016a10:	08015899 	.word	0x08015899
 8016a14:	20002d6c 	.word	0x20002d6c
 8016a18:	080156c9 	.word	0x080156c9

08016a1c <BLE_SetCustomAdvertizeData>:
  manuf_data[15] = BLE_MANAGER_USED_PLATFORM;
 8016a1c:	2308      	movs	r3, #8
{
 8016a1e:	b510      	push	{r4, lr}
 8016a20:	4604      	mov	r4, r0
  manuf_data[15] = BLE_MANAGER_USED_PLATFORM;
 8016a22:	73c3      	strb	r3, [r0, #15]
  BLE_SetEnvAdvertizeData(manuf_data);
 8016a24:	f7f9 fc44 	bl	80102b0 <BLE_SetEnvAdvertizeData>
  BLE_SetInertialAdvertizeData(manuf_data);
 8016a28:	4620      	mov	r0, r4
 8016a2a:	f7fa f863 	bl	8010af4 <BLE_SetInertialAdvertizeData>
  BLE_SetAudioLevelAdvertizeData(manuf_data);
 8016a2e:	4620      	mov	r0, r4
 8016a30:	f7f9 faa6 	bl	800ff80 <BLE_SetAudioLevelAdvertizeData>
  BLE_SetBatteryAdvertizeData(manuf_data);
 8016a34:	4620      	mov	r0, r4
 8016a36:	f7f9 fb31 	bl	801009c <BLE_SetBatteryAdvertizeData>
  BLE_SetFFTAmplitudeAdvertizeData(manuf_data);
 8016a3a:	4620      	mov	r0, r4
 8016a3c:	f7f9 ff94 	bl	8010968 <BLE_SetFFTAmplitudeAdvertizeData>
  BLE_SetTimeDomainAdvertizeData(manuf_data);
 8016a40:	4620      	mov	r0, r4
 8016a42:	f7fc f8a1 	bl	8012b88 <BLE_SetTimeDomainAdvertizeData>
  BLE_SetFFTAlarmSpeedStatusAdvertizeData(manuf_data);
 8016a46:	4620      	mov	r0, r4
 8016a48:	f7f9 fdcc 	bl	80105e4 <BLE_SetFFTAlarmSpeedStatusAdvertizeData>
  BLE_SetFFTAlarmAccPeakStatusAdvertizeData(manuf_data);
 8016a4c:	4620      	mov	r0, r4
 8016a4e:	f7f9 fd05 	bl	801045c <BLE_SetFFTAlarmAccPeakStatusAdvertizeData>
  BLE_SetFFTAlarmSubrangeStatusAdvertizeData(manuf_data);
 8016a52:	4620      	mov	r0, r4
 8016a54:	f7f9 fe88 	bl	8010768 <BLE_SetFFTAlarmSubrangeStatusAdvertizeData>
  manuf_data[20] = BlueNRG_StackValue.BleMacAddress[5];
 8016a58:	4b09      	ldr	r3, [pc, #36]	; (8016a80 <BLE_SetCustomAdvertizeData+0x64>)
 8016a5a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8016a5e:	7522      	strb	r2, [r4, #20]
  manuf_data[21] = BlueNRG_StackValue.BleMacAddress[4];
 8016a60:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8016a64:	7562      	strb	r2, [r4, #21]
  manuf_data[22] = BlueNRG_StackValue.BleMacAddress[3];
 8016a66:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8016a6a:	75a2      	strb	r2, [r4, #22]
  manuf_data[23] = BlueNRG_StackValue.BleMacAddress[2];
 8016a6c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8016a70:	75e2      	strb	r2, [r4, #23]
  manuf_data[24] = BlueNRG_StackValue.BleMacAddress[1];
 8016a72:	f893 2020 	ldrb.w	r2, [r3, #32]
 8016a76:	7622      	strb	r2, [r4, #24]
  manuf_data[25] = BlueNRG_StackValue.BleMacAddress[0];
 8016a78:	7fdb      	ldrb	r3, [r3, #31]
 8016a7a:	7663      	strb	r3, [r4, #25]
}
 8016a7c:	bd10      	pop	{r4, pc}
 8016a7e:	bf00      	nop
 8016a80:	20002978 	.word	0x20002978

08016a84 <MotionSP_SetDefaultVibrationParam>:
/**
  * @brief  Init the Accelerometer Settings and MotionSP Vibration parameters
  * @return None
  */   
void MotionSP_SetDefaultVibrationParam(void)
{
 8016a84:	b500      	push	{lr}
  memset((void *)&AcceleroParams, 0, sizeof(sAccPmtr_t));
 8016a86:	4b15      	ldr	r3, [pc, #84]	; (8016adc <MotionSP_SetDefaultVibrationParam+0x58>)
{
 8016a88:	b0c1      	sub	sp, #260	; 0x104
  memset((void *)&AcceleroParams, 0, sizeof(sAccPmtr_t));
 8016a8a:	2214      	movs	r2, #20
 8016a8c:	2100      	movs	r1, #0
 8016a8e:	4618      	mov	r0, r3
 8016a90:	f005 fbe8 	bl	801c264 <memset>
  
  /* Set default parameters for accelerometer */
  AcceleroParams.AccOdr         = ACCELERO_ODR_DEFAULT;
 8016a94:	f641 2204 	movw	r2, #6660	; 0x1a04
 8016a98:	8002      	strh	r2, [r0, #0]
  AcceleroParams.AccFifoBdr     = ACCELERO_FIFO_BDR_DEFAULT;
 8016a9a:	8082      	strh	r2, [r0, #4]
  AcceleroParams.fs             = ACCELERO_FS_DEFAULT;
 8016a9c:	2204      	movs	r2, #4
  AcceleroParams.HwFilter       = ACCELERO_HW_FILTER_DEFAULT;
  
  /* Set default parameters for MotionSP library */
  MotionSP_Parameters.FftSize       = FFT_SIZE_DEFAULT;
 8016a9e:	4b10      	ldr	r3, [pc, #64]	; (8016ae0 <MotionSP_SetDefaultVibrationParam+0x5c>)
  AcceleroParams.fs             = ACCELERO_FS_DEFAULT;
 8016aa0:	8102      	strh	r2, [r0, #8]
  AcceleroParams.HwFilter       = ACCELERO_HW_FILTER_DEFAULT;
 8016aa2:	2216      	movs	r2, #22
 8016aa4:	7282      	strb	r2, [r0, #10]
  MotionSP_Parameters.FftSize       = FFT_SIZE_DEFAULT;
 8016aa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016aaa:	801a      	strh	r2, [r3, #0]
  MotionSP_Parameters.tau           = TAU_DEFAULT;
 8016aac:	2232      	movs	r2, #50	; 0x32
 8016aae:	805a      	strh	r2, [r3, #2]
  MotionSP_Parameters.window        = WINDOW_DEFAULT;
 8016ab0:	2201      	movs	r2, #1
 8016ab2:	809a      	strh	r2, [r3, #4]
  MotionSP_Parameters.td_type       = TD_DEFAULT;
 8016ab4:	2200      	movs	r2, #0
 8016ab6:	80da      	strh	r2, [r3, #6]
  MotionSP_Parameters.tacq          = TACQ_DEFAULT;
 8016ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8016abc:	811a      	strh	r2, [r3, #8]
  MotionSP_Parameters.FftOvl        = FFT_OVL_DEFAULT;
 8016abe:	224b      	movs	r2, #75	; 0x4b
 8016ac0:	729a      	strb	r2, [r3, #10]
  MotionSP_Parameters.subrange_num  = SUBRANGE_DEFAULT;
  
  PREDMNT1_PRINTF("\r\nVibration parameters have been set as default values\r\n");
 8016ac2:	4908      	ldr	r1, [pc, #32]	; (8016ae4 <MotionSP_SetDefaultVibrationParam+0x60>)
  MotionSP_Parameters.subrange_num  = SUBRANGE_DEFAULT;
 8016ac4:	2208      	movs	r2, #8
  PREDMNT1_PRINTF("\r\nVibration parameters have been set as default values\r\n");
 8016ac6:	4668      	mov	r0, sp
  MotionSP_Parameters.subrange_num  = SUBRANGE_DEFAULT;
 8016ac8:	819a      	strh	r2, [r3, #12]
  PREDMNT1_PRINTF("\r\nVibration parameters have been set as default values\r\n");
 8016aca:	f006 f9a5 	bl	801ce18 <strcpy>
 8016ace:	2138      	movs	r1, #56	; 0x38
 8016ad0:	4668      	mov	r0, sp
 8016ad2:	f002 ff6b 	bl	80199ac <CDC_Fill_Buffer>
}
 8016ad6:	b041      	add	sp, #260	; 0x104
 8016ad8:	f85d fb04 	ldr.w	pc, [sp], #4
 8016adc:	20011538 	.word	0x20011538
 8016ae0:	20002e14 	.word	0x20002e14
 8016ae4:	080247f8 	.word	0x080247f8

08016ae8 <MotionSP_AcceleroConfig>:
/**
  * @brief  Set accelerometer parameters for MotionSP Vibration
  * @retval BSP status
  */   
int32_t MotionSP_AcceleroConfig(void)
{
 8016ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016aec:	b0c1      	sub	sp, #260	; 0x104
//#if LIMIT_FFT_RESULT == 1
//  float LpfCutFreq = 0.0;
//  uint16_t MagSizeForLpf;
//#endif
  
  PREDMNT1_PRINTF("Accelero Config:\r\n");
 8016aee:	496e      	ldr	r1, [pc, #440]	; (8016ca8 <MotionSP_AcceleroConfig+0x1c0>)

  /* Set FS value */
  if ((BSP_Error =  MOTION_SENSOR_SetFullScale(ACCELERO_INSTANCE, MOTION_ACCELERO, AcceleroParams.fs)) != BSP_ERROR_NONE)
 8016af0:	4f6e      	ldr	r7, [pc, #440]	; (8016cac <MotionSP_AcceleroConfig+0x1c4>)
  PREDMNT1_PRINTF("Accelero Config:\r\n");
 8016af2:	4668      	mov	r0, sp
 8016af4:	f006 f990 	bl	801ce18 <strcpy>
 8016af8:	2112      	movs	r1, #18
 8016afa:	4668      	mov	r0, sp
 8016afc:	f002 ff56 	bl	80199ac <CDC_Fill_Buffer>
  if ((BSP_Error =  MOTION_SENSOR_SetFullScale(ACCELERO_INSTANCE, MOTION_ACCELERO, AcceleroParams.fs)) != BSP_ERROR_NONE)
 8016b00:	893a      	ldrh	r2, [r7, #8]
 8016b02:	2102      	movs	r1, #2
 8016b04:	2001      	movs	r0, #1
 8016b06:	f7f1 fcff 	bl	8008508 <BSP_MOTION_SENSOR_SetFullScale>
 8016b0a:	4604      	mov	r4, r0
 8016b0c:	b160      	cbz	r0, 8016b28 <MotionSP_AcceleroConfig+0x40>
  {
    PREDMNT1_PRINTF("\tError on FullScale Setting(BSP_ERROR = %ld)\r\n", BSP_Error);
 8016b0e:	4968      	ldr	r1, [pc, #416]	; (8016cb0 <MotionSP_AcceleroConfig+0x1c8>)
 8016b10:	4602      	mov	r2, r0
  MOTION_SENSOR_GetSensitivity(ACCELERO_INSTANCE, MOTION_ACCELERO, &AcceleroParams.AccSens );
  
  /* Set ODR value */
  if ((BSP_Error = MOTION_SENSOR_SetOutputDataRate(ACCELERO_INSTANCE, MOTION_ACCELERO, AcceleroParams.AccOdr)) != BSP_ERROR_NONE)
  {
    PREDMNT1_PRINTF("\tError Set Output Data Rate (BSP_ERROR = %ld)\r\n", BSP_Error);
 8016b12:	4668      	mov	r0, sp
 8016b14:	f006 f910 	bl	801cd38 <siprintf>
  
  uint32_t IntPart, DecPart;
  MCR_BLUEMS_F2I_2D(AcceleroODR.Frequency, IntPart, DecPart);

  /* Send the parameters to terminal */
  PREDMNT1_PRINTF(" %ld.%.2ld Hz )\r\n", IntPart, DecPart);
 8016b18:	4601      	mov	r1, r0
    PREDMNT1_PRINTF("\tError measure and calculate ODR - Used parameter value (");
 8016b1a:	4668      	mov	r0, sp
 8016b1c:	f002 ff46 	bl	80199ac <CDC_Fill_Buffer>
//  /* Set the mag size to be used */
//  AccMagResults.MagSizeTBU = MagSizeForLpf;
//#endif /* LIMIT_FFT_RESULT */
  
  return BSP_Error;
}
 8016b20:	4620      	mov	r0, r4
 8016b22:	b041      	add	sp, #260	; 0x104
 8016b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PREDMNT1_PRINTF("\tOk FullScale Setting\r\n");
 8016b28:	4962      	ldr	r1, [pc, #392]	; (8016cb4 <MotionSP_AcceleroConfig+0x1cc>)
 8016b2a:	4668      	mov	r0, sp
 8016b2c:	f006 f974 	bl	801ce18 <strcpy>
 8016b30:	2117      	movs	r1, #23
 8016b32:	4668      	mov	r0, sp
 8016b34:	f002 ff3a 	bl	80199ac <CDC_Fill_Buffer>
  MOTION_SENSOR_GetSensitivity(ACCELERO_INSTANCE, MOTION_ACCELERO, &AcceleroParams.AccSens );
 8016b38:	f107 020c 	add.w	r2, r7, #12
 8016b3c:	2102      	movs	r1, #2
 8016b3e:	2001      	movs	r0, #1
 8016b40:	f7f1 fc98 	bl	8008474 <BSP_MOTION_SENSOR_GetSensitivity>
  if ((BSP_Error = MOTION_SENSOR_SetOutputDataRate(ACCELERO_INSTANCE, MOTION_ACCELERO, AcceleroParams.AccOdr)) != BSP_ERROR_NONE)
 8016b44:	883b      	ldrh	r3, [r7, #0]
 8016b46:	ee00 3a10 	vmov	s0, r3
 8016b4a:	2102      	movs	r1, #2
 8016b4c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8016b50:	2001      	movs	r0, #1
 8016b52:	f7f1 fcb5 	bl	80084c0 <BSP_MOTION_SENSOR_SetOutputDataRate>
 8016b56:	4604      	mov	r4, r0
 8016b58:	b110      	cbz	r0, 8016b60 <MotionSP_AcceleroConfig+0x78>
    PREDMNT1_PRINTF("\tError Set Output Data Rate (BSP_ERROR = %ld)\r\n", BSP_Error);
 8016b5a:	4957      	ldr	r1, [pc, #348]	; (8016cb8 <MotionSP_AcceleroConfig+0x1d0>)
 8016b5c:	4602      	mov	r2, r0
 8016b5e:	e7d8      	b.n	8016b12 <MotionSP_AcceleroConfig+0x2a>
    PREDMNT1_PRINTF("\tOk Set Output Data Rate\r\n");
 8016b60:	4956      	ldr	r1, [pc, #344]	; (8016cbc <MotionSP_AcceleroConfig+0x1d4>)
  memset((void *)&AcceleroODR, 0x00, sizeof(sAcceleroODR_t));
 8016b62:	4e57      	ldr	r6, [pc, #348]	; (8016cc0 <MotionSP_AcceleroConfig+0x1d8>)
    PREDMNT1_PRINTF("\tOk Set Output Data Rate\r\n");
 8016b64:	4668      	mov	r0, sp
 8016b66:	f006 f957 	bl	801ce18 <strcpy>
 8016b6a:	211a      	movs	r1, #26
 8016b6c:	4668      	mov	r0, sp
 8016b6e:	f002 ff1d 	bl	80199ac <CDC_Fill_Buffer>
  HAL_Delay(100);
 8016b72:	2064      	movs	r0, #100	; 0x64
 8016b74:	f002 f838 	bl	8018be8 <HAL_Delay>
  memset((void *)&AcceleroODR, 0x00, sizeof(sAcceleroODR_t));
 8016b78:	e9c6 4400 	strd	r4, r4, [r6]
 8016b7c:	60b4      	str	r4, [r6, #8]
 8016b7e:	f04f 0801 	mov.w	r8, #1
    (AcceleroParams.AccOdr * (100-TOLERANCE))/100,
 8016b82:	f04f 095f 	mov.w	r9, #95	; 0x5f
  if ((BSP_Error = MOTION_SENSOR_DRDY_Set_Mode(ACCELERO_INSTANCE, ACCELERO_DRDY_PULSED)) != BSP_ERROR_NONE)
 8016b86:	2101      	movs	r1, #1
 8016b88:	4608      	mov	r0, r1
    (AcceleroParams.AccOdr * (100-TOLERANCE))/100,
 8016b8a:	883d      	ldrh	r5, [r7, #0]
  if ((BSP_Error = MOTION_SENSOR_DRDY_Set_Mode(ACCELERO_INSTANCE, ACCELERO_DRDY_PULSED)) != BSP_ERROR_NONE)
 8016b8c:	f003 f8aa 	bl	8019ce4 <BSP_MOTION_SENSOR_DRDY_Set_Mode>
 8016b90:	4604      	mov	r4, r0
 8016b92:	2800      	cmp	r0, #0
 8016b94:	d179      	bne.n	8016c8a <MotionSP_AcceleroConfig+0x1a2>
  if ((BSP_Error = MOTION_SENSOR_Set_INT2_DRDY(ACCELERO_INSTANCE, ENABLE)) != BSP_ERROR_NONE)
 8016b96:	2101      	movs	r1, #1
 8016b98:	4608      	mov	r0, r1
 8016b9a:	f003 f891 	bl	8019cc0 <BSP_MOTION_SENSOR_Set_INT2_DRDY>
 8016b9e:	4604      	mov	r4, r0
 8016ba0:	2800      	cmp	r0, #0
 8016ba2:	d172      	bne.n	8016c8a <MotionSP_AcceleroConfig+0x1a2>
  AccDrdyNr = 0;
 8016ba4:	82b8      	strh	r0, [r7, #20]
  tkStart = BSP_GetTick();
 8016ba6:	f7f0 ff8d 	bl	8007ac4 <BSP_GetTick>
 8016baa:	4604      	mov	r4, r0
  while ( (BSP_GetTick() - tkStart) < ODRMEASURINGTIME);
 8016bac:	f7f0 ff8a 	bl	8007ac4 <BSP_GetTick>
 8016bb0:	1b03      	subs	r3, r0, r4
 8016bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016bb6:	d3f9      	bcc.n	8016bac <MotionSP_AcceleroConfig+0xc4>
  if ((BSP_Error = MOTION_SENSOR_Set_INT2_DRDY(ACCELERO_INSTANCE, DISABLE)) != BSP_ERROR_NONE)
 8016bb8:	2100      	movs	r1, #0
 8016bba:	2001      	movs	r0, #1
 8016bbc:	f003 f880 	bl	8019cc0 <BSP_MOTION_SENSOR_Set_INT2_DRDY>
 8016bc0:	4604      	mov	r4, r0
 8016bc2:	2800      	cmp	r0, #0
 8016bc4:	d161      	bne.n	8016c8a <MotionSP_AcceleroConfig+0x1a2>
  pAcceleroODR->Frequency = (AccDrdyNr * 1000) / ODRMEASURINGTIME;
 8016bc6:	8abb      	ldrh	r3, [r7, #20]
    (AcceleroParams.AccOdr * (100-TOLERANCE))/100,
 8016bc8:	2264      	movs	r2, #100	; 0x64
  pAcceleroODR->Frequency = (AccDrdyNr * 1000) / ODRMEASURINGTIME;
 8016bca:	ee07 3a10 	vmov	s14, r3
    (AcceleroParams.AccOdr * (100-TOLERANCE))/100,
 8016bce:	fb09 f305 	mul.w	r3, r9, r5
 8016bd2:	fbb3 f3f2 	udiv	r3, r3, r2
  if ( (pAcceleroODR->Frequency > OdrRange[0]) && (pAcceleroODR->Frequency < OdrRange[1]) )
 8016bd6:	ee07 3a90 	vmov	s15, r3
  pAcceleroODR->Frequency = (AccDrdyNr * 1000) / ODRMEASURINGTIME;
 8016bda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  if ( (pAcceleroODR->Frequency > OdrRange[0]) && (pAcceleroODR->Frequency < OdrRange[1]) )
 8016bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  pAcceleroODR->Frequency = (AccDrdyNr * 1000) / ODRMEASURINGTIME;
 8016be2:	ed86 7a00 	vstr	s14, [r6]
  if ( (pAcceleroODR->Frequency > OdrRange[0]) && (pAcceleroODR->Frequency < OdrRange[1]) )
 8016be6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bee:	dd4a      	ble.n	8016c86 <MotionSP_AcceleroConfig+0x19e>
    (AcceleroParams.AccOdr * (100+TOLERANCE))/100
 8016bf0:	2369      	movs	r3, #105	; 0x69
 8016bf2:	435d      	muls	r5, r3
 8016bf4:	fbb5 f5f2 	udiv	r5, r5, r2
  if ( (pAcceleroODR->Frequency > OdrRange[0]) && (pAcceleroODR->Frequency < OdrRange[1]) )
 8016bf8:	ee07 5a90 	vmov	s15, r5
 8016bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c08:	d53d      	bpl.n	8016c86 <MotionSP_AcceleroConfig+0x19e>
    pAcceleroODR->Period = 1.0f/(float)pAcceleroODR->Frequency;
 8016c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
    pAcceleroODR->Tau= exp(-(float)(1000.0f*pAcceleroODR->Period)/(float)MotionSP_Parameters.tau);
 8016c12:	4b2c      	ldr	r3, [pc, #176]	; (8016cc4 <MotionSP_AcceleroConfig+0x1dc>)
 8016c14:	885b      	ldrh	r3, [r3, #2]
 8016c16:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8016cc8 <MotionSP_AcceleroConfig+0x1e0>
    pAcceleroODR->Period = 1.0f/(float)pAcceleroODR->Frequency;
 8016c1a:	edc6 7a01 	vstr	s15, [r6, #4]
    pAcceleroODR->Tau= exp(-(float)(1000.0f*pAcceleroODR->Period)/(float)MotionSP_Parameters.tau);
 8016c1e:	ee27 7a67 	vnmul.f32	s14, s14, s15
 8016c22:	ee07 3a90 	vmov	s15, r3
 8016c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016c2a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8016c2e:	ee17 0a90 	vmov	r0, s15
 8016c32:	f7ed fd11 	bl	8004658 <__aeabi_f2d>
 8016c36:	ec41 0b10 	vmov	d0, r0, r1
 8016c3a:	f009 fb69 	bl	8020310 <exp>
 8016c3e:	ec51 0b10 	vmov	r0, r1, d0
 8016c42:	f7ee f859 	bl	8004cf8 <__aeabi_d2f>
    PREDMNT1_PRINTF("\tOk measure and calculate ODR (");
 8016c46:	4921      	ldr	r1, [pc, #132]	; (8016ccc <MotionSP_AcceleroConfig+0x1e4>)
    pAcceleroODR->Tau= exp(-(float)(1000.0f*pAcceleroODR->Period)/(float)MotionSP_Parameters.tau);
 8016c48:	60b0      	str	r0, [r6, #8]
    PREDMNT1_PRINTF("\tOk measure and calculate ODR (");
 8016c4a:	4668      	mov	r0, sp
 8016c4c:	f006 f8e4 	bl	801ce18 <strcpy>
 8016c50:	211f      	movs	r1, #31
 8016c52:	4668      	mov	r0, sp
 8016c54:	f002 feaa 	bl	80199ac <CDC_Fill_Buffer>
  MCR_BLUEMS_F2I_2D(AcceleroODR.Frequency, IntPart, DecPart);
 8016c58:	edd6 7a00 	vldr	s15, [r6]
  PREDMNT1_PRINTF(" %ld.%.2ld Hz )\r\n", IntPart, DecPart);
 8016c5c:	491c      	ldr	r1, [pc, #112]	; (8016cd0 <MotionSP_AcceleroConfig+0x1e8>)
  MCR_BLUEMS_F2I_2D(AcceleroODR.Frequency, IntPart, DecPart);
 8016c5e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  PREDMNT1_PRINTF(" %ld.%.2ld Hz )\r\n", IntPart, DecPart);
 8016c62:	4668      	mov	r0, sp
  MCR_BLUEMS_F2I_2D(AcceleroODR.Frequency, IntPart, DecPart);
 8016c64:	eef8 6a47 	vcvt.f32.u32	s13, s14
  PREDMNT1_PRINTF(" %ld.%.2ld Hz )\r\n", IntPart, DecPart);
 8016c68:	ee17 2a10 	vmov	r2, s14
  MCR_BLUEMS_F2I_2D(AcceleroODR.Frequency, IntPart, DecPart);
 8016c6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016c70:	eddf 6a18 	vldr	s13, [pc, #96]	; 8016cd4 <MotionSP_AcceleroConfig+0x1ec>
 8016c74:	ee67 7aa6 	vmul.f32	s15, s15, s13
  PREDMNT1_PRINTF(" %ld.%.2ld Hz )\r\n", IntPart, DecPart);
 8016c78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016c7c:	ee17 3a90 	vmov	r3, s15
 8016c80:	f006 f85a 	bl	801cd38 <siprintf>
 8016c84:	e748      	b.n	8016b18 <MotionSP_AcceleroConfig+0x30>
    BSP_Error = BSP_ERROR_COMPONENT_FAILURE;
 8016c86:	f06f 0404 	mvn.w	r4, #4
  } while( (BSP_Error != BSP_ERROR_NONE) && (iteration < 3) );
 8016c8a:	f108 0801 	add.w	r8, r8, #1
 8016c8e:	fa5f f888 	uxtb.w	r8, r8
 8016c92:	f1b8 0f04 	cmp.w	r8, #4
 8016c96:	f47f af76 	bne.w	8016b86 <MotionSP_AcceleroConfig+0x9e>
    PREDMNT1_PRINTF("\tError measure and calculate ODR - Used parameter value (");
 8016c9a:	490f      	ldr	r1, [pc, #60]	; (8016cd8 <MotionSP_AcceleroConfig+0x1f0>)
 8016c9c:	4668      	mov	r0, sp
 8016c9e:	f006 f8bb 	bl	801ce18 <strcpy>
 8016ca2:	2139      	movs	r1, #57	; 0x39
 8016ca4:	e739      	b.n	8016b1a <MotionSP_AcceleroConfig+0x32>
 8016ca6:	bf00      	nop
 8016ca8:	08024831 	.word	0x08024831
 8016cac:	20011538 	.word	0x20011538
 8016cb0:	08024844 	.word	0x08024844
 8016cb4:	08024873 	.word	0x08024873
 8016cb8:	0802488b 	.word	0x0802488b
 8016cbc:	080248bb 	.word	0x080248bb
 8016cc0:	20002e7c 	.word	0x20002e7c
 8016cc4:	20002e14 	.word	0x20002e14
 8016cc8:	447a0000 	.word	0x447a0000
 8016ccc:	080248d6 	.word	0x080248d6
 8016cd0:	080248f6 	.word	0x080248f6
 8016cd4:	42c80000 	.word	0x42c80000
 8016cd8:	08024908 	.word	0x08024908

08016cdc <EnableDisable_ACC_HP_Filter>:
  * @brief  Enable/Disable the accelerometer HP Filter
  * @param  Cutoff frequency
  * @retval 0 in case of success
  */
uint8_t EnableDisable_ACC_HP_Filter(uint8_t FilterIsEnabled)
{
 8016cdc:	b530      	push	{r4, r5, lr}
  int32_t BSP_Error = BSP_ERROR_NONE;
  
  if(FilterIsEnabled)
 8016cde:	4604      	mov	r4, r0
{
 8016ce0:	b0c1      	sub	sp, #260	; 0x104
  if(FilterIsEnabled)
 8016ce2:	b1e0      	cbz	r0, 8016d1e <EnableDisable_ACC_HP_Filter+0x42>
  {
    if ((BSP_Error = MOTION_SENSOR_Enable_HP_Filter(ACCELERO_INSTANCE, AcceleroParams.HwFilter)) != BSP_ERROR_NONE)
 8016ce4:	4b1a      	ldr	r3, [pc, #104]	; (8016d50 <EnableDisable_ACC_HP_Filter+0x74>)
 8016ce6:	2001      	movs	r0, #1
 8016ce8:	7a99      	ldrb	r1, [r3, #10]
 8016cea:	f002 ffd7 	bl	8019c9c <BSP_MOTION_SENSOR_Enable_HP_Filter>
 8016cee:	4604      	mov	r4, r0
 8016cf0:	b160      	cbz	r0, 8016d0c <EnableDisable_ACC_HP_Filter+0x30>
    {
      PREDMNT1_PRINTF("\r\nError Enable/Disable HP Filter (BSP_ERROR = %ld)\r\n", BSP_Error);
 8016cf2:	4602      	mov	r2, r0
 8016cf4:	4917      	ldr	r1, [pc, #92]	; (8016d54 <EnableDisable_ACC_HP_Filter+0x78>)
 8016cf6:	4668      	mov	r0, sp
 8016cf8:	f006 f81e 	bl	801cd38 <siprintf>
 8016cfc:	4601      	mov	r1, r0
 8016cfe:	4668      	mov	r0, sp
 8016d00:	f002 fe54 	bl	80199ac <CDC_Fill_Buffer>
      return BSP_Error;
 8016d04:	b2e4      	uxtb	r4, r4
      PREDMNT1_PRINTF("\r\nDisable HP Filter\r\n\t--> OK\r\n");
    }
  }
  
  return BSP_Error;
}
 8016d06:	4620      	mov	r0, r4
 8016d08:	b041      	add	sp, #260	; 0x104
 8016d0a:	bd30      	pop	{r4, r5, pc}
      PREDMNT1_PRINTF("\r\nEnable HP Filter\r\n\t--> OK\r\n");
 8016d0c:	4912      	ldr	r1, [pc, #72]	; (8016d58 <EnableDisable_ACC_HP_Filter+0x7c>)
 8016d0e:	4668      	mov	r0, sp
 8016d10:	f006 f882 	bl	801ce18 <strcpy>
 8016d14:	211d      	movs	r1, #29
      PREDMNT1_PRINTF("\r\nDisable HP Filter\r\n\t--> OK\r\n");
 8016d16:	4668      	mov	r0, sp
 8016d18:	f002 fe48 	bl	80199ac <CDC_Fill_Buffer>
 8016d1c:	e7f3      	b.n	8016d06 <EnableDisable_ACC_HP_Filter+0x2a>
    if( (BSP_Error = MOTION_SENSOR_Write_Register(ACCELERO_INSTANCE, ISM330DHCX_CTRL8_XL, 0x00)) != BSP_ERROR_NONE)
 8016d1e:	4602      	mov	r2, r0
 8016d20:	2117      	movs	r1, #23
 8016d22:	2001      	movs	r0, #1
 8016d24:	f003 f842 	bl	8019dac <BSP_MOTION_SENSOR_Write_Register>
 8016d28:	4605      	mov	r5, r0
 8016d2a:	b150      	cbz	r0, 8016d42 <EnableDisable_ACC_HP_Filter+0x66>
      PREDMNT1_PRINTF("\r\nError Disable HP Filter (BSP_ERROR = %ld)", BSP_Error);
 8016d2c:	4602      	mov	r2, r0
 8016d2e:	490b      	ldr	r1, [pc, #44]	; (8016d5c <EnableDisable_ACC_HP_Filter+0x80>)
 8016d30:	4668      	mov	r0, sp
 8016d32:	f006 f801 	bl	801cd38 <siprintf>
 8016d36:	4601      	mov	r1, r0
 8016d38:	4668      	mov	r0, sp
 8016d3a:	f002 fe37 	bl	80199ac <CDC_Fill_Buffer>
      return BSP_Error;
 8016d3e:	b2ec      	uxtb	r4, r5
 8016d40:	e7e1      	b.n	8016d06 <EnableDisable_ACC_HP_Filter+0x2a>
      PREDMNT1_PRINTF("\r\nDisable HP Filter\r\n\t--> OK\r\n");
 8016d42:	4907      	ldr	r1, [pc, #28]	; (8016d60 <EnableDisable_ACC_HP_Filter+0x84>)
 8016d44:	4668      	mov	r0, sp
 8016d46:	f006 f867 	bl	801ce18 <strcpy>
 8016d4a:	211e      	movs	r1, #30
 8016d4c:	e7e3      	b.n	8016d16 <EnableDisable_ACC_HP_Filter+0x3a>
 8016d4e:	bf00      	nop
 8016d50:	20011538 	.word	0x20011538
 8016d54:	08024942 	.word	0x08024942
 8016d58:	08024977 	.word	0x08024977
 8016d5c:	08024995 	.word	0x08024995
 8016d60:	080249c1 	.word	0x080249c1

08016d64 <MotionSP_TD_Threshold_Updating>:
  * @brief  MotionSP TD Threshold Updating
  * @param  dflt Force updating with default values
  * @retval Error codes
  */
void MotionSP_TD_Threshold_Updating(uint8_t dflt)
{
 8016d64:	b530      	push	{r4, r5, lr}
  if (dflt)
 8016d66:	b180      	cbz	r0, 8016d8a <MotionSP_TD_Threshold_Updating+0x26>
  {
    memcpy((void *)TDRmsThresh, (void *)&TDSpeedRMSThresh, sizeof(sTimeDomainThresh_t));
 8016d68:	4d09      	ldr	r5, [pc, #36]	; (8016d90 <MotionSP_TD_Threshold_Updating+0x2c>)
 8016d6a:	4c0a      	ldr	r4, [pc, #40]	; (8016d94 <MotionSP_TD_Threshold_Updating+0x30>)
 8016d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d70:	e895 0003 	ldmia.w	r5, {r0, r1}
    memcpy((void *)TDPkThresh, (void *)&TDAccPeakThresh, sizeof(sTimeDomainThresh_t));
 8016d74:	3508      	adds	r5, #8
    memcpy((void *)TDRmsThresh, (void *)&TDSpeedRMSThresh, sizeof(sTimeDomainThresh_t));
 8016d76:	e884 0003 	stmia.w	r4, {r0, r1}
    memcpy((void *)TDPkThresh, (void *)&TDAccPeakThresh, sizeof(sTimeDomainThresh_t));
 8016d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d7c:	3408      	adds	r4, #8
 8016d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016d84:	e884 0003 	stmia.w	r4, {r0, r1}
  }
  else
  {
    __NOP();
  }
}
 8016d88:	bd30      	pop	{r4, r5, pc}
    __NOP();
 8016d8a:	bf00      	nop
}
 8016d8c:	e7fc      	b.n	8016d88 <MotionSP_TD_Threshold_Updating+0x24>
 8016d8e:	bf00      	nop
 8016d90:	08021c0c 	.word	0x08021c0c
 8016d94:	20011550 	.word	0x20011550

08016d98 <MotionSP_FD_Threshold_Updating>:
  * @param  subrange_num Subrange number to be used
  * @param  dflt Force updating with default values
  * @retval Error codes
  */
void MotionSP_FD_Threshold_Updating(uint8_t subrange_num, uint8_t dflt)
{
 8016d98:	b513      	push	{r0, r1, r4, lr}
  
  uint16_t thr_array_size = 0;
  
  thr_array_size = 3 * subrange_num * sizeof(float);
  
  if (dflt)
 8016d9a:	b349      	cbz	r1, 8016df0 <MotionSP_FD_Threshold_Updating+0x58>
  {
    switch (subrange_num)
 8016d9c:	2820      	cmp	r0, #32
 8016d9e:	d01b      	beq.n	8016dd8 <MotionSP_FD_Threshold_Updating+0x40>
 8016da0:	d814      	bhi.n	8016dcc <MotionSP_FD_Threshold_Updating+0x34>
 8016da2:	2808      	cmp	r0, #8
 8016da4:	d01c      	beq.n	8016de0 <MotionSP_FD_Threshold_Updating+0x48>
 8016da6:	2810      	cmp	r0, #16
 8016da8:	d01e      	beq.n	8016de8 <MotionSP_FD_Threshold_Updating+0x50>
  float *pFDAlarmThresh_Sub= NULL;
 8016daa:	2400      	movs	r4, #0
  float *pFDWarnThresh_Sub = NULL;
 8016dac:	4621      	mov	r1, r4
  thr_array_size = 3 * subrange_num * sizeof(float);
 8016dae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
      pFDWarnThresh_Sub = (float *)FDWarnThresh_Sub64;
      pFDAlarmThresh_Sub = (float *)FDAlarmThresh_Sub64;
      break;
    }
    
    memcpy((void *)FDWarnThresh_Sub, (void *)pFDWarnThresh_Sub, thr_array_size);
 8016db2:	0082      	lsls	r2, r0, #2
 8016db4:	4810      	ldr	r0, [pc, #64]	; (8016df8 <MotionSP_FD_Threshold_Updating+0x60>)
 8016db6:	9201      	str	r2, [sp, #4]
 8016db8:	f005 fa2c 	bl	801c214 <memcpy>
    memcpy((void *)FDAlarmThresh_Sub, (void *)pFDAlarmThresh_Sub, thr_array_size);
 8016dbc:	9a01      	ldr	r2, [sp, #4]
 8016dbe:	480f      	ldr	r0, [pc, #60]	; (8016dfc <MotionSP_FD_Threshold_Updating+0x64>)
 8016dc0:	4621      	mov	r1, r4
  }
  else
  {
    __NOP();
  }
}
 8016dc2:	b002      	add	sp, #8
 8016dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memcpy((void *)FDAlarmThresh_Sub, (void *)pFDAlarmThresh_Sub, thr_array_size);
 8016dc8:	f005 ba24 	b.w	801c214 <memcpy>
    switch (subrange_num)
 8016dcc:	2840      	cmp	r0, #64	; 0x40
 8016dce:	d1ec      	bne.n	8016daa <MotionSP_FD_Threshold_Updating+0x12>
      pFDAlarmThresh_Sub = (float *)FDAlarmThresh_Sub64;
 8016dd0:	4c0b      	ldr	r4, [pc, #44]	; (8016e00 <MotionSP_FD_Threshold_Updating+0x68>)
      pFDWarnThresh_Sub = (float *)FDWarnThresh_Sub64;
 8016dd2:	f504 7140 	add.w	r1, r4, #768	; 0x300
 8016dd6:	e7ea      	b.n	8016dae <MotionSP_FD_Threshold_Updating+0x16>
      pFDAlarmThresh_Sub = (float *)FDAlarmThresh_Sub32;
 8016dd8:	4c0a      	ldr	r4, [pc, #40]	; (8016e04 <MotionSP_FD_Threshold_Updating+0x6c>)
      pFDWarnThresh_Sub = (float *)FDWarnThresh_Sub32;
 8016dda:	f504 71c0 	add.w	r1, r4, #384	; 0x180
 8016dde:	e7e6      	b.n	8016dae <MotionSP_FD_Threshold_Updating+0x16>
    switch (subrange_num)
 8016de0:	4c09      	ldr	r4, [pc, #36]	; (8016e08 <MotionSP_FD_Threshold_Updating+0x70>)
 8016de2:	f104 0160 	add.w	r1, r4, #96	; 0x60
 8016de6:	e7e2      	b.n	8016dae <MotionSP_FD_Threshold_Updating+0x16>
      pFDAlarmThresh_Sub = (float *)FDAlarmThresh_Sub16;
 8016de8:	4c08      	ldr	r4, [pc, #32]	; (8016e0c <MotionSP_FD_Threshold_Updating+0x74>)
      pFDWarnThresh_Sub = (float *)FDWarnThresh_Sub16;
 8016dea:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 8016dee:	e7de      	b.n	8016dae <MotionSP_FD_Threshold_Updating+0x16>
    __NOP();
 8016df0:	bf00      	nop
}
 8016df2:	b002      	add	sp, #8
 8016df4:	bd10      	pop	{r4, pc}
 8016df6:	bf00      	nop
 8016df8:	20011580 	.word	0x20011580
 8016dfc:	20011880 	.word	0x20011880
 8016e00:	08021dbc 	.word	0x08021dbc
 8016e04:	080223bc 	.word	0x080223bc
 8016e08:	080226bc 	.word	0x080226bc
 8016e0c:	08021c3c 	.word	0x08021c3c

08016e10 <MotionSP_DataReady_IRQ_Rtn>:
  * @brief 	Routine to be executed on IRQ about accelerometer data ready
  * @return None
  */    
void MotionSP_DataReady_IRQ_Rtn(void)
{
  AccDrdyNr++;
 8016e10:	4a02      	ldr	r2, [pc, #8]	; (8016e1c <MotionSP_DataReady_IRQ_Rtn+0xc>)
 8016e12:	8a93      	ldrh	r3, [r2, #20]
 8016e14:	3301      	adds	r3, #1
 8016e16:	8293      	strh	r3, [r2, #20]
}
 8016e18:	4770      	bx	lr
 8016e1a:	bf00      	nop
 8016e1c:	20011538 	.word	0x20011538

08016e20 <MotionSP_FifoFull_IRQ_Rtn>:
/**
  * @brief 	Routine to be executed on IRQ about accelerometer fifo full
  * @return None
  */    
void MotionSP_FifoFull_IRQ_Rtn(void)
{
 8016e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // Read all FIFO data
  MOTION_SENSOR_FIFO_Read(ACCELERO_INSTANCE, MotionSP_Data.FifoBfr, AcceleroParams.FifoWtm);
 8016e24:	4c30      	ldr	r4, [pc, #192]	; (8016ee8 <MotionSP_FifoFull_IRQ_Rtn+0xc8>)
 8016e26:	4e31      	ldr	r6, [pc, #196]	; (8016eec <MotionSP_FifoFull_IRQ_Rtn+0xcc>)
 8016e28:	6821      	ldr	r1, [r4, #0]
 8016e2a:	8a32      	ldrh	r2, [r6, #16]
 8016e2c:	2001      	movs	r0, #1
 8016e2e:	f002 ffe7 	bl	8019e00 <BSP_MOTION_SENSOR_FIFO_Read>
    pAccCircBuff->Array.Y[pAccCircBuff->IdPos] = mgAcc.AXIS_Y * G_CONV;
 8016e32:	e9d4 7c04 	ldrd	r7, ip, [r4, #16]
    pAccCircBuff->Array.Z[pAccCircBuff->IdPos] = mgAcc.AXIS_Z * G_CONV;
 8016e36:	2300      	movs	r3, #0
  
  // Create circular buffer from accelerometer FIFO
  FillAccCircBuffFromFifo(&MotionSP_Data.AccCircBuff, MotionSP_Data.FifoBfr, AcceleroParams.FifoWtm, AcceleroParams.AccSens, RestartFlag);
 8016e38:	8a30      	ldrh	r0, [r6, #16]
 8016e3a:	ed96 6a03 	vldr	s12, [r6, #12]
 8016e3e:	6825      	ldr	r5, [r4, #0]
    if (pAccCircBuff->IdPos == pAccCircBuff->Size)
 8016e40:	8926      	ldrh	r6, [r4, #8]
 8016e42:	7b21      	ldrb	r1, [r4, #12]
    pAccCircBuff->Array.Z[pAccCircBuff->IdPos] = mgAcc.AXIS_Z * G_CONV;
 8016e44:	f8d4 e018 	ldr.w	lr, [r4, #24]
    pAccCircBuff->Array.X[pAccCircBuff->IdPos] = mgAcc.AXIS_X * G_CONV;
 8016e48:	eddf 5a29 	vldr	s11, [pc, #164]	; 8016ef0 <MotionSP_FifoFull_IRQ_Rtn+0xd0>
    pAccCircBuff->Array.Z[pAccCircBuff->IdPos] = mgAcc.AXIS_Z * G_CONV;
 8016e4c:	461a      	mov	r2, r3
      pAccCircBuff->IdPos = 0;
 8016e4e:	4698      	mov	r8, r3
  for(i=0; i<FifoWtm; i++)
 8016e50:	fa1f f983 	uxth.w	r9, r3
 8016e54:	4548      	cmp	r0, r9
 8016e56:	d805      	bhi.n	8016e64 <MotionSP_FifoFull_IRQ_Rtn+0x44>
 8016e58:	b102      	cbz	r2, 8016e5c <MotionSP_FifoFull_IRQ_Rtn+0x3c>
 8016e5a:	7321      	strb	r1, [r4, #12]

  // Fifo has been read
  MotionSP_Data.FifoEmpty = 1;
 8016e5c:	2301      	movs	r3, #1
 8016e5e:	7123      	strb	r3, [r4, #4]
}
 8016e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pFifoData = pFifoBuff+(i*7);
 8016e64:	ebc3 09c3 	rsb	r9, r3, r3, lsl #3
 8016e68:	44a9      	add	r9, r5
    mgAcc.AXIS_X = (*(int16_t *)(pFifoData+1)) * AccSens;
 8016e6a:	3301      	adds	r3, #1
 8016e6c:	f9b9 a001 	ldrsh.w	sl, [r9, #1]
 8016e70:	ee06 aa90 	vmov	s13, sl
    mgAcc.AXIS_Y = (*(int16_t *)(pFifoData+3)) * AccSens;
 8016e74:	f9b9 a003 	ldrsh.w	sl, [r9, #3]
    mgAcc.AXIS_Z = (*(int16_t *)(pFifoData+5)) * AccSens;
 8016e78:	f9b9 9005 	ldrsh.w	r9, [r9, #5]
 8016e7c:	ee07 9a90 	vmov	s15, r9
    pAccCircBuff->IdPos += 1;
 8016e80:	f8b4 900a 	ldrh.w	r9, [r4, #10]
    mgAcc.AXIS_Y = (*(int16_t *)(pFifoData+3)) * AccSens;
 8016e84:	ee07 aa10 	vmov	s14, sl
    pAccCircBuff->IdPos += 1;
 8016e88:	f109 0901 	add.w	r9, r9, #1
 8016e8c:	fa1f f989 	uxth.w	r9, r9
    mgAcc.AXIS_X = (*(int16_t *)(pFifoData+1)) * AccSens;
 8016e90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    if (pAccCircBuff->IdPos == pAccCircBuff->Size)
 8016e94:	45b1      	cmp	r9, r6
    mgAcc.AXIS_Y = (*(int16_t *)(pFifoData+3)) * AccSens;
 8016e96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    mgAcc.AXIS_Z = (*(int16_t *)(pFifoData+5)) * AccSens;
 8016e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pAccCircBuff->IdPos += 1;
 8016e9e:	bf14      	ite	ne
 8016ea0:	f8a4 900a 	strhne.w	r9, [r4, #10]
      pAccCircBuff->IdPos = 0;
 8016ea4:	f8a4 800a 	strheq.w	r8, [r4, #10]
    mgAcc.AXIS_X = (*(int16_t *)(pFifoData+1)) * AccSens;
 8016ea8:	ee66 6a86 	vmul.f32	s13, s13, s12
    pAccCircBuff->Array.X[pAccCircBuff->IdPos] = mgAcc.AXIS_X * G_CONV;
 8016eac:	f8b4 900a 	ldrh.w	r9, [r4, #10]
    mgAcc.AXIS_Y = (*(int16_t *)(pFifoData+3)) * AccSens;
 8016eb0:	ee27 7a06 	vmul.f32	s14, s14, s12
    mgAcc.AXIS_Z = (*(int16_t *)(pFifoData+5)) * AccSens;
 8016eb4:	ee67 7a86 	vmul.f32	s15, s15, s12
    pAccCircBuff->Array.X[pAccCircBuff->IdPos] = mgAcc.AXIS_X * G_CONV;
 8016eb8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016ebc:	eb07 0a89 	add.w	sl, r7, r9, lsl #2
    pAccCircBuff->Array.Y[pAccCircBuff->IdPos] = mgAcc.AXIS_Y * G_CONV;
 8016ec0:	ee27 7a25 	vmul.f32	s14, s14, s11
    pAccCircBuff->Array.Z[pAccCircBuff->IdPos] = mgAcc.AXIS_Z * G_CONV;
 8016ec4:	ee67 7aa5 	vmul.f32	s15, s15, s11
    pAccCircBuff->Array.X[pAccCircBuff->IdPos] = mgAcc.AXIS_X * G_CONV;
 8016ec8:	edca 6a00 	vstr	s13, [sl]
      pAccCircBuff->IdPos = 0;
 8016ecc:	bf08      	it	eq
 8016ece:	2201      	moveq	r2, #1
    pAccCircBuff->Array.Y[pAccCircBuff->IdPos] = mgAcc.AXIS_Y * G_CONV;
 8016ed0:	eb0c 0a89 	add.w	sl, ip, r9, lsl #2
    pAccCircBuff->Array.Z[pAccCircBuff->IdPos] = mgAcc.AXIS_Z * G_CONV;
 8016ed4:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    pAccCircBuff->Array.Y[pAccCircBuff->IdPos] = mgAcc.AXIS_Y * G_CONV;
 8016ed8:	ed8a 7a00 	vstr	s14, [sl]
      pAccCircBuff->Ovf = 1;
 8016edc:	bf08      	it	eq
 8016ede:	4611      	moveq	r1, r2
    pAccCircBuff->Array.Z[pAccCircBuff->IdPos] = mgAcc.AXIS_Z * G_CONV;
 8016ee0:	edc9 7a00 	vstr	s15, [r9]
  for(i=0; i<FifoWtm; i++)
 8016ee4:	e7b4      	b.n	8016e50 <MotionSP_FifoFull_IRQ_Rtn+0x30>
 8016ee6:	bf00      	nop
 8016ee8:	20002df8 	.word	0x20002df8
 8016eec:	20011538 	.word	0x20011538
 8016ef0:	3c20ac12 	.word	0x3c20ac12

08016ef4 <MotionSP_TimeDomainAlarmInit>:
  */
void MotionSP_TimeDomainAlarmInit (sTimeDomainAlarm_t *pTdAlarm,
                                   sTimeDomainData_t *pTimeDomainVal,
                                   sTimeDomainThresh_t *pTdRmsThreshold,
                                   sTimeDomainThresh_t *pTdPkThreshold) 
{
 8016ef4:	b570      	push	{r4, r5, r6, lr}
 8016ef6:	4606      	mov	r6, r0
 8016ef8:	461d      	mov	r5, r3
  /* Reset status value for TimeDomain Alarms Result */
  memset(pTdAlarm, NONE, sizeof(sTimeDomainAlarm_t));
 8016efa:	f04f 3303 	mov.w	r3, #50529027	; 0x3030303
 8016efe:	6033      	str	r3, [r6, #0]
 8016f00:	80b3      	strh	r3, [r6, #4]
  
  /* Reset status value for TimeDomain Value Result */
  memset(pTimeDomainVal, 0, sizeof(sTimeDomainData_t));
  
  memcpy((void *)pTdRmsThreshold, (void *)TDRmsThresh, sizeof(sTimeDomainThresh_t));
 8016f02:	4e10      	ldr	r6, [pc, #64]	; (8016f44 <MotionSP_TimeDomainAlarmInit+0x50>)
{
 8016f04:	4614      	mov	r4, r2
 8016f06:	4608      	mov	r0, r1
  memset(pTimeDomainVal, 0, sizeof(sTimeDomainData_t));
 8016f08:	223c      	movs	r2, #60	; 0x3c
 8016f0a:	2100      	movs	r1, #0
 8016f0c:	f005 f9aa 	bl	801c264 <memset>
  memcpy((void *)pTdRmsThreshold, (void *)TDRmsThresh, sizeof(sTimeDomainThresh_t));
 8016f10:	4622      	mov	r2, r4
 8016f12:	f106 0418 	add.w	r4, r6, #24
 8016f16:	4633      	mov	r3, r6
 8016f18:	cb03      	ldmia	r3!, {r0, r1}
 8016f1a:	42a3      	cmp	r3, r4
 8016f1c:	6010      	str	r0, [r2, #0]
 8016f1e:	6051      	str	r1, [r2, #4]
 8016f20:	461e      	mov	r6, r3
 8016f22:	f102 0208 	add.w	r2, r2, #8
 8016f26:	d1f6      	bne.n	8016f16 <MotionSP_TimeDomainAlarmInit+0x22>
  memcpy((void *)pTdPkThreshold, (void *)TDPkThresh, sizeof(sTimeDomainThresh_t));
 8016f28:	4c07      	ldr	r4, [pc, #28]	; (8016f48 <MotionSP_TimeDomainAlarmInit+0x54>)
 8016f2a:	462b      	mov	r3, r5
 8016f2c:	f104 0518 	add.w	r5, r4, #24
 8016f30:	4622      	mov	r2, r4
 8016f32:	ca03      	ldmia	r2!, {r0, r1}
 8016f34:	42aa      	cmp	r2, r5
 8016f36:	6018      	str	r0, [r3, #0]
 8016f38:	6059      	str	r1, [r3, #4]
 8016f3a:	4614      	mov	r4, r2
 8016f3c:	f103 0308 	add.w	r3, r3, #8
 8016f40:	d1f6      	bne.n	8016f30 <MotionSP_TimeDomainAlarmInit+0x3c>
}
 8016f42:	bd70      	pop	{r4, r5, r6, pc}
 8016f44:	20011550 	.word	0x20011550
 8016f48:	20011568 	.word	0x20011568

08016f4c <MotionSP_TimeDomainAlarm>:
void MotionSP_TimeDomainAlarm (sTimeDomainAlarm_t *pTdAlarm,
                               sTimeDomainData_t *pTimeDomainVal,
                               sTimeDomainThresh_t *pTdRmsThreshold,
                               sTimeDomainThresh_t *pTdPkThreshold,
                               sTimeDomainData_t *pTimeDomain) 
{
 8016f4c:	b530      	push	{r4, r5, lr}
 8016f4e:	9c03      	ldr	r4, [sp, #12]
  /* Reset status value for Time Domain alarms */
  memset(pTdAlarm, GOOD, 3*2);
  
  pTimeDomainVal->SpeedRms.AXIS_X = pTimeDomain->SpeedRms.AXIS_X*1000;
 8016f50:	eddf 7a65 	vldr	s15, [pc, #404]	; 80170e8 <MotionSP_TimeDomainAlarm+0x19c>
  memset(pTdAlarm, GOOD, 3*2);
 8016f54:	2500      	movs	r5, #0
 8016f56:	6005      	str	r5, [r0, #0]
 8016f58:	8085      	strh	r5, [r0, #4]
  pTimeDomainVal->SpeedRms.AXIS_X = pTimeDomain->SpeedRms.AXIS_X*1000;
 8016f5a:	ed94 7a06 	vldr	s14, [r4, #24]
  pTimeDomainVal->SpeedRms.AXIS_Y = pTimeDomain->SpeedRms.AXIS_Y*1000;
  pTimeDomainVal->SpeedRms.AXIS_Z = pTimeDomain->SpeedRms.AXIS_Z*1000;
  
  /* Speed RMS comparison with thresholds */      
  if ((pTimeDomain->SpeedRms.AXIS_X*1000) > pTdRmsThreshold->THR_WARN_AXIS_X)
 8016f5e:	edd2 6a00 	vldr	s13, [r2]
  pTimeDomainVal->SpeedRms.AXIS_X = pTimeDomain->SpeedRms.AXIS_X*1000;
 8016f62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016f66:	ed81 7a06 	vstr	s14, [r1, #24]
  pTimeDomainVal->SpeedRms.AXIS_Y = pTimeDomain->SpeedRms.AXIS_Y*1000;
 8016f6a:	ed94 7a07 	vldr	s14, [r4, #28]
 8016f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016f72:	ed81 7a07 	vstr	s14, [r1, #28]
  pTimeDomainVal->SpeedRms.AXIS_Z = pTimeDomain->SpeedRms.AXIS_Z*1000;
 8016f76:	ed94 7a08 	vldr	s14, [r4, #32]
 8016f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016f7e:	ed81 7a08 	vstr	s14, [r1, #32]
  if ((pTimeDomain->SpeedRms.AXIS_X*1000) > pTdRmsThreshold->THR_WARN_AXIS_X)
 8016f82:	ed94 7a06 	vldr	s14, [r4, #24]
 8016f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016f8a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->RMS_STATUS_AXIS_X = WARNING;
 8016f92:	bfc2      	ittt	gt
 8016f94:	2501      	movgt	r5, #1
 8016f96:	7005      	strbgt	r5, [r0, #0]
    pTimeDomainVal->SpeedRms.AXIS_X = pTimeDomain->SpeedRms.AXIS_X*1000;
 8016f98:	ed81 7a06 	vstrgt	s14, [r1, #24]
  }
  if ((pTimeDomain->SpeedRms.AXIS_Y*1000) > pTdRmsThreshold->THR_WARN_AXIS_Y)
 8016f9c:	ed94 7a07 	vldr	s14, [r4, #28]
 8016fa0:	edd2 6a01 	vldr	s13, [r2, #4]
 8016fa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016fa8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->RMS_STATUS_AXIS_Y = WARNING;
 8016fb0:	bfc2      	ittt	gt
 8016fb2:	2501      	movgt	r5, #1
 8016fb4:	7045      	strbgt	r5, [r0, #1]
    pTimeDomainVal->SpeedRms.AXIS_Y = pTimeDomain->SpeedRms.AXIS_Y*1000;
 8016fb6:	ed81 7a07 	vstrgt	s14, [r1, #28]
  }
  if ((pTimeDomain->SpeedRms.AXIS_Z*1000) > pTdRmsThreshold->THR_WARN_AXIS_Z)
 8016fba:	ed94 7a08 	vldr	s14, [r4, #32]
 8016fbe:	edd2 6a02 	vldr	s13, [r2, #8]
 8016fc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016fc6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->RMS_STATUS_AXIS_Z = WARNING;
 8016fce:	bfc2      	ittt	gt
 8016fd0:	2501      	movgt	r5, #1
 8016fd2:	7085      	strbgt	r5, [r0, #2]
    pTimeDomainVal->SpeedRms.AXIS_Z = pTimeDomain->SpeedRms.AXIS_Z*1000;
 8016fd4:	ed81 7a08 	vstrgt	s14, [r1, #32]
  }
  if ((pTimeDomain->SpeedRms.AXIS_X*1000) > pTdRmsThreshold->THR_ALARM_AXIS_X)
 8016fd8:	ed94 7a06 	vldr	s14, [r4, #24]
 8016fdc:	edd2 6a03 	vldr	s13, [r2, #12]
 8016fe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016fe4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->RMS_STATUS_AXIS_X = ALARM;
 8016fec:	bfc2      	ittt	gt
 8016fee:	2502      	movgt	r5, #2
 8016ff0:	7005      	strbgt	r5, [r0, #0]
    pTimeDomainVal->SpeedRms.AXIS_X = pTimeDomain->SpeedRms.AXIS_X*1000;
 8016ff2:	ed81 7a06 	vstrgt	s14, [r1, #24]
  }
  if ((pTimeDomain->SpeedRms.AXIS_Y*1000) > pTdRmsThreshold->THR_ALARM_AXIS_Y)
 8016ff6:	ed94 7a07 	vldr	s14, [r4, #28]
 8016ffa:	edd2 6a04 	vldr	s13, [r2, #16]
 8016ffe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017002:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->RMS_STATUS_AXIS_Y = ALARM;
 801700a:	bfc2      	ittt	gt
 801700c:	2502      	movgt	r5, #2
 801700e:	7045      	strbgt	r5, [r0, #1]
    pTimeDomainVal->SpeedRms.AXIS_Y = pTimeDomain->SpeedRms.AXIS_Y*1000;
 8017010:	ed81 7a07 	vstrgt	s14, [r1, #28]
  }
  if ((pTimeDomain->SpeedRms.AXIS_Z*1000) > pTdRmsThreshold->THR_ALARM_AXIS_Z)
 8017014:	ed94 7a08 	vldr	s14, [r4, #32]
 8017018:	ee67 7a27 	vmul.f32	s15, s14, s15
 801701c:	ed92 7a05 	vldr	s14, [r2, #20]
 8017020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->RMS_STATUS_AXIS_Z = ALARM;
 8017028:	bfc4      	itt	gt
 801702a:	2202      	movgt	r2, #2
 801702c:	7082      	strbgt	r2, [r0, #2]
    pTimeDomainVal->SpeedRms.AXIS_Z = pTimeDomain->SpeedRms.AXIS_Z*1000;
  }
  
  pTimeDomainVal->AccPeak.AXIS_X = pTimeDomain->AccPeak.AXIS_X;
 801702e:	6822      	ldr	r2, [r4, #0]
 8017030:	600a      	str	r2, [r1, #0]
  pTimeDomainVal->AccPeak.AXIS_Y = pTimeDomain->AccPeak.AXIS_Y;
  pTimeDomainVal->AccPeak.AXIS_Z = pTimeDomain->AccPeak.AXIS_Z;
  
  /* Accelerometer Peak comparison with thresholds */      
  if ((pTimeDomain->AccPeak.AXIS_X) > pTdPkThreshold->THR_WARN_AXIS_X)
 8017032:	ed93 7a00 	vldr	s14, [r3]
    pTimeDomainVal->SpeedRms.AXIS_Z = pTimeDomain->SpeedRms.AXIS_Z*1000;
 8017036:	bfc8      	it	gt
 8017038:	edc1 7a08 	vstrgt	s15, [r1, #32]
  if ((pTimeDomain->AccPeak.AXIS_X) > pTdPkThreshold->THR_WARN_AXIS_X)
 801703c:	edd4 7a00 	vldr	s15, [r4]
  pTimeDomainVal->AccPeak.AXIS_Y = pTimeDomain->AccPeak.AXIS_Y;
 8017040:	6862      	ldr	r2, [r4, #4]
 8017042:	604a      	str	r2, [r1, #4]
  if ((pTimeDomain->AccPeak.AXIS_X) > pTdPkThreshold->THR_WARN_AXIS_X)
 8017044:	eef4 7ac7 	vcmpe.f32	s15, s14
  pTimeDomainVal->AccPeak.AXIS_Z = pTimeDomain->AccPeak.AXIS_Z;
 8017048:	68a2      	ldr	r2, [r4, #8]
 801704a:	608a      	str	r2, [r1, #8]
  if ((pTimeDomain->AccPeak.AXIS_X) > pTdPkThreshold->THR_WARN_AXIS_X)
 801704c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->PK_STATUS_AXIS_X = WARNING;
 8017050:	bfc4      	itt	gt
 8017052:	2201      	movgt	r2, #1
 8017054:	70c2      	strbgt	r2, [r0, #3]
    pTimeDomainVal->AccPeak.AXIS_X = pTimeDomain->AccPeak.AXIS_X;
  }
  if ((pTimeDomain->AccPeak.AXIS_Y) > pTdPkThreshold->THR_WARN_AXIS_Y)
 8017056:	ed93 7a01 	vldr	s14, [r3, #4]
    pTimeDomainVal->AccPeak.AXIS_X = pTimeDomain->AccPeak.AXIS_X;
 801705a:	bfc8      	it	gt
 801705c:	edc1 7a00 	vstrgt	s15, [r1]
  if ((pTimeDomain->AccPeak.AXIS_Y) > pTdPkThreshold->THR_WARN_AXIS_Y)
 8017060:	edd4 7a01 	vldr	s15, [r4, #4]
 8017064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->PK_STATUS_AXIS_Y = WARNING;
 801706c:	bfc4      	itt	gt
 801706e:	2201      	movgt	r2, #1
 8017070:	7102      	strbgt	r2, [r0, #4]
    pTimeDomainVal->AccPeak.AXIS_Y = pTimeDomain->AccPeak.AXIS_Y;
  }
  if ((pTimeDomain->AccPeak.AXIS_Z) > pTdPkThreshold->THR_WARN_AXIS_Z)
 8017072:	ed93 7a02 	vldr	s14, [r3, #8]
    pTimeDomainVal->AccPeak.AXIS_Y = pTimeDomain->AccPeak.AXIS_Y;
 8017076:	bfc8      	it	gt
 8017078:	edc1 7a01 	vstrgt	s15, [r1, #4]
  if ((pTimeDomain->AccPeak.AXIS_Z) > pTdPkThreshold->THR_WARN_AXIS_Z)
 801707c:	edd4 7a02 	vldr	s15, [r4, #8]
 8017080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->PK_STATUS_AXIS_Z = WARNING;
 8017088:	bfc4      	itt	gt
 801708a:	2201      	movgt	r2, #1
 801708c:	7142      	strbgt	r2, [r0, #5]
    pTimeDomainVal->AccPeak.AXIS_Z = pTimeDomain->AccPeak.AXIS_Z;
  }
  if ((pTimeDomain->AccPeak.AXIS_X) > pTdPkThreshold->THR_ALARM_AXIS_X)
 801708e:	ed93 7a03 	vldr	s14, [r3, #12]
    pTimeDomainVal->AccPeak.AXIS_Z = pTimeDomain->AccPeak.AXIS_Z;
 8017092:	bfc8      	it	gt
 8017094:	edc1 7a02 	vstrgt	s15, [r1, #8]
  if ((pTimeDomain->AccPeak.AXIS_X) > pTdPkThreshold->THR_ALARM_AXIS_X)
 8017098:	edd4 7a00 	vldr	s15, [r4]
 801709c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80170a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->PK_STATUS_AXIS_X = ALARM;
 80170a4:	bfc4      	itt	gt
 80170a6:	2202      	movgt	r2, #2
 80170a8:	70c2      	strbgt	r2, [r0, #3]
    pTimeDomainVal->AccPeak.AXIS_X = pTimeDomain->AccPeak.AXIS_X;
  }
  if ((pTimeDomain->AccPeak.AXIS_Y) > pTdPkThreshold->THR_ALARM_AXIS_Y)
 80170aa:	ed93 7a04 	vldr	s14, [r3, #16]
    pTimeDomainVal->AccPeak.AXIS_X = pTimeDomain->AccPeak.AXIS_X;
 80170ae:	bfc8      	it	gt
 80170b0:	edc1 7a00 	vstrgt	s15, [r1]
  if ((pTimeDomain->AccPeak.AXIS_Y) > pTdPkThreshold->THR_ALARM_AXIS_Y)
 80170b4:	edd4 7a01 	vldr	s15, [r4, #4]
 80170b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80170bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->PK_STATUS_AXIS_Y = ALARM;
 80170c0:	bfc4      	itt	gt
 80170c2:	2202      	movgt	r2, #2
 80170c4:	7102      	strbgt	r2, [r0, #4]
    pTimeDomainVal->AccPeak.AXIS_Y = pTimeDomain->AccPeak.AXIS_Y;
  }
  if ((pTimeDomain->AccPeak.AXIS_Z) > pTdPkThreshold->THR_ALARM_AXIS_Z)
 80170c6:	ed93 7a05 	vldr	s14, [r3, #20]
    pTimeDomainVal->AccPeak.AXIS_Y = pTimeDomain->AccPeak.AXIS_Y;
 80170ca:	bfc8      	it	gt
 80170cc:	edc1 7a01 	vstrgt	s15, [r1, #4]
  if ((pTimeDomain->AccPeak.AXIS_Z) > pTdPkThreshold->THR_ALARM_AXIS_Z)
 80170d0:	edd4 7a02 	vldr	s15, [r4, #8]
 80170d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80170d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->PK_STATUS_AXIS_Z = ALARM;
 80170dc:	bfc2      	ittt	gt
 80170de:	2302      	movgt	r3, #2
 80170e0:	7143      	strbgt	r3, [r0, #5]
    pTimeDomainVal->AccPeak.AXIS_Z = pTimeDomain->AccPeak.AXIS_Z;
 80170e2:	edc1 7a02 	vstrgt	s15, [r1, #8]
  }
}
 80170e6:	bd30      	pop	{r4, r5, pc}
 80170e8:	447a0000 	.word	0x447a0000

080170ec <MotionSP_FreqDomainAlarmInit>:
  */
int32_t MotionSP_FreqDomainAlarmInit (float **pWarnThresh,
                                   float **pAlarmThresh,
                                   sFreqDomainAlarm_t *pTHR_Fft_Alarms,
                                   uint8_t subrange_num) 
{
 80170ec:	b570      	push	{r4, r5, r6, lr}
 80170ee:	4606      	mov	r6, r0
 80170f0:	460d      	mov	r5, r1
 80170f2:	4610      	mov	r0, r2
  uint16_t thr_array_size = 0;
  
  thr_array_size = 3 * subrange_num * sizeof(float);
  
  /* Reset status value for FFT alarms */
  memset(pTHR_Fft_Alarms, NONE, sizeof(sFreqDomainAlarm_t));
 80170f4:	2103      	movs	r1, #3
 80170f6:	22c0      	movs	r2, #192	; 0xc0
{
 80170f8:	461c      	mov	r4, r3
  memset(pTHR_Fft_Alarms, NONE, sizeof(sFreqDomainAlarm_t));
 80170fa:	f005 f8b3 	bl	801c264 <memset>
  
  // Memory allocation for Warning Threshold array 
  if (*pWarnThresh == NULL)
 80170fe:	6830      	ldr	r0, [r6, #0]
  thr_array_size = 3 * subrange_num * sizeof(float);
 8017100:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    *pWarnThresh = (float *)malloc(thr_array_size);
 8017104:	00a4      	lsls	r4, r4, #2
  if (*pWarnThresh == NULL)
 8017106:	b940      	cbnz	r0, 801711a <MotionSP_FreqDomainAlarmInit+0x2e>
    *pWarnThresh = (float *)malloc(thr_array_size);
 8017108:	4620      	mov	r0, r4
 801710a:	f005 f873 	bl	801c1f4 <malloc>
  else
   *pWarnThresh = realloc(*pWarnThresh, thr_array_size);
 801710e:	6030      	str	r0, [r6, #0]
  if (*pWarnThresh == NULL)
 8017110:	6833      	ldr	r3, [r6, #0]
 8017112:	b933      	cbnz	r3, 8017122 <MotionSP_FreqDomainAlarmInit+0x36>
    return BSP_ERROR_MALLOC_FAILURE;
 8017114:	f06f 000b 	mvn.w	r0, #11

  memcpy((void *)*pWarnThresh, (void *)FDWarnThresh_Sub, thr_array_size);
  memcpy((void *)*pAlarmThresh, (void *)FDAlarmThresh_Sub, thr_array_size);
  
  return BSP_ERROR_NONE;
}
 8017118:	bd70      	pop	{r4, r5, r6, pc}
   *pWarnThresh = realloc(*pWarnThresh, thr_array_size);
 801711a:	4621      	mov	r1, r4
 801711c:	f005 fdf4 	bl	801cd08 <realloc>
 8017120:	e7f5      	b.n	801710e <MotionSP_FreqDomainAlarmInit+0x22>
  if (*pAlarmThresh == NULL)
 8017122:	6828      	ldr	r0, [r5, #0]
 8017124:	b990      	cbnz	r0, 801714c <MotionSP_FreqDomainAlarmInit+0x60>
    *pAlarmThresh = (float *)malloc(thr_array_size);
 8017126:	4620      	mov	r0, r4
 8017128:	f005 f864 	bl	801c1f4 <malloc>
   *pAlarmThresh = realloc(*pAlarmThresh, thr_array_size);
 801712c:	6028      	str	r0, [r5, #0]
  if (*pAlarmThresh == NULL)
 801712e:	682b      	ldr	r3, [r5, #0]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d0ef      	beq.n	8017114 <MotionSP_FreqDomainAlarmInit+0x28>
  memcpy((void *)*pWarnThresh, (void *)FDWarnThresh_Sub, thr_array_size);
 8017134:	4907      	ldr	r1, [pc, #28]	; (8017154 <MotionSP_FreqDomainAlarmInit+0x68>)
 8017136:	6830      	ldr	r0, [r6, #0]
 8017138:	4622      	mov	r2, r4
 801713a:	f005 f86b 	bl	801c214 <memcpy>
  memcpy((void *)*pAlarmThresh, (void *)FDAlarmThresh_Sub, thr_array_size);
 801713e:	4906      	ldr	r1, [pc, #24]	; (8017158 <MotionSP_FreqDomainAlarmInit+0x6c>)
 8017140:	6828      	ldr	r0, [r5, #0]
 8017142:	4622      	mov	r2, r4
 8017144:	f005 f866 	bl	801c214 <memcpy>
  return BSP_ERROR_NONE;
 8017148:	2000      	movs	r0, #0
 801714a:	e7e5      	b.n	8017118 <MotionSP_FreqDomainAlarmInit+0x2c>
   *pAlarmThresh = realloc(*pAlarmThresh, thr_array_size);
 801714c:	4621      	mov	r1, r4
 801714e:	f005 fddb 	bl	801cd08 <realloc>
 8017152:	e7eb      	b.n	801712c <MotionSP_FreqDomainAlarmInit+0x40>
 8017154:	20011580 	.word	0x20011580
 8017158:	20011880 	.word	0x20011880

0801715c <MotionSP_AlarmThreshold_Init>:
{
 801715c:	b508      	push	{r3, lr}
  MotionSP_TimeDomainAlarmInit(&sTdAlarm,
 801715e:	4b0c      	ldr	r3, [pc, #48]	; (8017190 <MotionSP_AlarmThreshold_Init+0x34>)
 8017160:	f103 0218 	add.w	r2, r3, #24
 8017164:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017168:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 801716c:	f7ff fec2 	bl	8016ef4 <MotionSP_TimeDomainAlarmInit>
  if (MotionSP_FreqDomainAlarmInit(&pFDWarnThresh,
 8017170:	4a08      	ldr	r2, [pc, #32]	; (8017194 <MotionSP_AlarmThreshold_Init+0x38>)
 8017172:	4b09      	ldr	r3, [pc, #36]	; (8017198 <MotionSP_AlarmThreshold_Init+0x3c>)
 8017174:	f102 01c2 	add.w	r1, r2, #194	; 0xc2
 8017178:	7b1b      	ldrb	r3, [r3, #12]
 801717a:	f102 00c6 	add.w	r0, r2, #198	; 0xc6
 801717e:	f7ff ffb5 	bl	80170ec <MotionSP_FreqDomainAlarmInit>
 8017182:	b118      	cbz	r0, 801718c <MotionSP_AlarmThreshold_Init+0x30>
}
 8017184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8017188:	f001 bd3d 	b.w	8018c06 <Error_Handler>
}
 801718c:	bd08      	pop	{r3, pc}
 801718e:	bf00      	nop
 8017190:	20011b80 	.word	0x20011b80
 8017194:	20011bf2 	.word	0x20011bf2
 8017198:	20002e14 	.word	0x20002e14

0801719c <MotionSP_VibrationAnalysisVariableInit>:
{
 801719c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801719e:	b0c1      	sub	sp, #260	; 0x104
  PREDMNT1_PRINTF("\r\nMotionSP Vibration Variable Initialization");
 80171a0:	4967      	ldr	r1, [pc, #412]	; (8017340 <MotionSP_VibrationAnalysisVariableInit+0x1a4>)
  switch (MotionSP_Parameters.FftSize)
 80171a2:	4d68      	ldr	r5, [pc, #416]	; (8017344 <MotionSP_VibrationAnalysisVariableInit+0x1a8>)
  PREDMNT1_PRINTF("\r\nMotionSP Vibration Variable Initialization");
 80171a4:	4668      	mov	r0, sp
 80171a6:	f005 fe37 	bl	801ce18 <strcpy>
 80171aa:	212c      	movs	r1, #44	; 0x2c
 80171ac:	4668      	mov	r0, sp
 80171ae:	f002 fbfd 	bl	80199ac <CDC_Fill_Buffer>
  switch (MotionSP_Parameters.FftSize)
 80171b2:	882b      	ldrh	r3, [r5, #0]
 80171b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80171b8:	d014      	beq.n	80171e4 <MotionSP_VibrationAnalysisVariableInit+0x48>
 80171ba:	d810      	bhi.n	80171de <MotionSP_VibrationAnalysisVariableInit+0x42>
 80171bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80171c0:	d010      	beq.n	80171e4 <MotionSP_VibrationAnalysisVariableInit+0x48>
 80171c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80171c6:	d00d      	beq.n	80171e4 <MotionSP_VibrationAnalysisVariableInit+0x48>
    PREDMNT1_PRINTF("\r\n\t--> FFT size is out of range.\r\n");
 80171c8:	495f      	ldr	r1, [pc, #380]	; (8017348 <MotionSP_VibrationAnalysisVariableInit+0x1ac>)
 80171ca:	4668      	mov	r0, sp
 80171cc:	f005 fe24 	bl	801ce18 <strcpy>
 80171d0:	2122      	movs	r1, #34	; 0x22
    PREDMNT1_PRINTF("\r\n\t--> Overlapping size is out of range.\r\n");
 80171d2:	4668      	mov	r0, sp
 80171d4:	f002 fbea 	bl	80199ac <CDC_Fill_Buffer>
    return BSP_ERROR_WRONG_PARAM;
 80171d8:	f06f 0001 	mvn.w	r0, #1
 80171dc:	e042      	b.n	8017264 <MotionSP_VibrationAnalysisVariableInit+0xc8>
  switch (MotionSP_Parameters.FftSize)
 80171de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80171e2:	e7f0      	b.n	80171c6 <MotionSP_VibrationAnalysisVariableInit+0x2a>
  if ( ((MotionSP_Parameters.FftOvl) >= FFT_OVL_MIN) && ((MotionSP_Parameters.FftOvl) <= FFT_OVL_MAX) )
 80171e4:	7aab      	ldrb	r3, [r5, #10]
 80171e6:	3b05      	subs	r3, #5
 80171e8:	2b46      	cmp	r3, #70	; 0x46
 80171ea:	f200 80a2 	bhi.w	8017332 <MotionSP_VibrationAnalysisVariableInit+0x196>
    MotionSP_TD_Threshold_Updating(TD_Th_DFLT);
 80171ee:	4f57      	ldr	r7, [pc, #348]	; (801734c <MotionSP_VibrationAnalysisVariableInit+0x1b0>)
    if(FFT_Alarm)
 80171f0:	4e57      	ldr	r6, [pc, #348]	; (8017350 <MotionSP_VibrationAnalysisVariableInit+0x1b4>)
    MotionSP_TD_Threshold_Updating(TD_Th_DFLT);
 80171f2:	7838      	ldrb	r0, [r7, #0]
 80171f4:	f7ff fdb6 	bl	8016d64 <MotionSP_TD_Threshold_Updating>
    TD_Th_DFLT = 0;
 80171f8:	2400      	movs	r4, #0
    MotionSP_FD_Threshold_Updating(MotionSP_Parameters.subrange_num, FD_Th_DFLT);
 80171fa:	7879      	ldrb	r1, [r7, #1]
 80171fc:	7b28      	ldrb	r0, [r5, #12]
    TD_Th_DFLT = 0;
 80171fe:	703c      	strb	r4, [r7, #0]
    MotionSP_FD_Threshold_Updating(MotionSP_Parameters.subrange_num, FD_Th_DFLT);
 8017200:	f7ff fdca 	bl	8016d98 <MotionSP_FD_Threshold_Updating>
    if(FFT_Alarm)
 8017204:	f8d6 3784 	ldr.w	r3, [r6, #1924]	; 0x784
    FD_Th_DFLT = 0;
 8017208:	707c      	strb	r4, [r7, #1]
    if(FFT_Alarm)
 801720a:	b10b      	cbz	r3, 8017210 <MotionSP_VibrationAnalysisVariableInit+0x74>
      MotionSP_AlarmThreshold_Init();
 801720c:	f7ff ffa6 	bl	801715c <MotionSP_AlarmThreshold_Init>
    memset((void *)&AccMagResults.Max, 0, 3 * sizeof(sMaxOnArray_t));
 8017210:	4b50      	ldr	r3, [pc, #320]	; (8017354 <MotionSP_VibrationAnalysisVariableInit+0x1b8>)
 8017212:	2218      	movs	r2, #24
 8017214:	2100      	movs	r1, #0
 8017216:	4618      	mov	r0, r3
 8017218:	f005 f824 	bl	801c264 <memset>
    AccMagResults.BinFreqStep = (AcceleroODR.Frequency / 2) / AccMagResults.MagSize;
 801721c:	4b4e      	ldr	r3, [pc, #312]	; (8017358 <MotionSP_VibrationAnalysisVariableInit+0x1bc>)
    AccMagResults.MagSize = MotionSP_Parameters.FftSize/2;
 801721e:	8829      	ldrh	r1, [r5, #0]
    AccMagResults.BinFreqStep = (AcceleroODR.Frequency / 2) / AccMagResults.MagSize;
 8017220:	edd3 7a00 	vldr	s15, [r3]
    AccMagResults.MagSize = MotionSP_Parameters.FftSize/2;
 8017224:	0849      	lsrs	r1, r1, #1
    AccMagResults.BinFreqStep = (AcceleroODR.Frequency / 2) / AccMagResults.MagSize;
 8017226:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801722a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801722e:	ee07 1a10 	vmov	s14, r1
 8017232:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    AccMagResults.MagSize = MotionSP_Parameters.FftSize/2;
 8017236:	f1a0 0414 	sub.w	r4, r0, #20
    AccMagResults.BinFreqStep = (AcceleroODR.Frequency / 2) / AccMagResults.MagSize;
 801723a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    memset((void *)&AccMagResults.FFT_Items, 0, 3 * sizeof(uint16_t));
 801723e:	2200      	movs	r2, #0
    AccMagResults.MagSize = MotionSP_Parameters.FftSize/2;
 8017240:	f820 1c14 	strh.w	r1, [r0, #-20]
    memset((void *)&AccMagResults.FFT_Items, 0, 3 * sizeof(uint16_t));
 8017244:	6182      	str	r2, [r0, #24]
 8017246:	8382      	strh	r2, [r0, #28]
    if (AccMagResults.Array.X == NULL)
 8017248:	68a0      	ldr	r0, [r4, #8]
    AccMagResults.MagSizeTBU = AccMagResults.MagSize;
 801724a:	8061      	strh	r1, [r4, #2]
      AccMagResults.Array.X = (float *) malloc(sizeof(float) * AccMagResults.MagSize);
 801724c:	0089      	lsls	r1, r1, #2
    AccMagResults.BinFreqStep = (AcceleroODR.Frequency / 2) / AccMagResults.MagSize;
 801724e:	ed84 7a01 	vstr	s14, [r4, #4]
    if (AccMagResults.Array.X == NULL)
 8017252:	b948      	cbnz	r0, 8017268 <MotionSP_VibrationAnalysisVariableInit+0xcc>
      AccMagResults.Array.X = (float *) malloc(sizeof(float) * AccMagResults.MagSize);
 8017254:	4608      	mov	r0, r1
 8017256:	f004 ffcd 	bl	801c1f4 <malloc>
      AccMagResults.Array.X = realloc(AccMagResults.Array.X, sizeof(float) * AccMagResults.MagSize);
 801725a:	60a0      	str	r0, [r4, #8]
    if (AccMagResults.Array.X == NULL)
 801725c:	68a3      	ldr	r3, [r4, #8]
 801725e:	b933      	cbnz	r3, 801726e <MotionSP_VibrationAnalysisVariableInit+0xd2>
      return BSP_ERROR_MALLOC_FAILURE;
 8017260:	f06f 000b 	mvn.w	r0, #11
}
 8017264:	b041      	add	sp, #260	; 0x104
 8017266:	bdf0      	pop	{r4, r5, r6, r7, pc}
      AccMagResults.Array.X = realloc(AccMagResults.Array.X, sizeof(float) * AccMagResults.MagSize);
 8017268:	f005 fd4e 	bl	801cd08 <realloc>
 801726c:	e7f5      	b.n	801725a <MotionSP_VibrationAnalysisVariableInit+0xbe>
      AccMagResults.Array.Y = (float *) malloc(sizeof(float) * AccMagResults.MagSize);
 801726e:	8821      	ldrh	r1, [r4, #0]
    if (AccMagResults.Array.Y == NULL)
 8017270:	68e0      	ldr	r0, [r4, #12]
      AccMagResults.Array.Y = (float *) malloc(sizeof(float) * AccMagResults.MagSize);
 8017272:	0089      	lsls	r1, r1, #2
    if (AccMagResults.Array.Y == NULL)
 8017274:	2800      	cmp	r0, #0
 8017276:	d156      	bne.n	8017326 <MotionSP_VibrationAnalysisVariableInit+0x18a>
      AccMagResults.Array.Y = (float *) malloc(sizeof(float) * AccMagResults.MagSize);
 8017278:	4608      	mov	r0, r1
 801727a:	f004 ffbb 	bl	801c1f4 <malloc>
      AccMagResults.Array.Y = realloc(AccMagResults.Array.Y, sizeof(float) * AccMagResults.MagSize);
 801727e:	60e0      	str	r0, [r4, #12]
    if (AccMagResults.Array.Y == NULL)
 8017280:	68e3      	ldr	r3, [r4, #12]
 8017282:	2b00      	cmp	r3, #0
 8017284:	d0ec      	beq.n	8017260 <MotionSP_VibrationAnalysisVariableInit+0xc4>
      AccMagResults.Array.Z = (float *) malloc(sizeof(float) * AccMagResults.MagSize);
 8017286:	8821      	ldrh	r1, [r4, #0]
    if (AccMagResults.Array.Z == NULL)
 8017288:	6920      	ldr	r0, [r4, #16]
      AccMagResults.Array.Z = (float *) malloc(sizeof(float) * AccMagResults.MagSize);
 801728a:	0089      	lsls	r1, r1, #2
    if (AccMagResults.Array.Z == NULL)
 801728c:	2800      	cmp	r0, #0
 801728e:	d14d      	bne.n	801732c <MotionSP_VibrationAnalysisVariableInit+0x190>
      AccMagResults.Array.Z = (float *) malloc(sizeof(float) * AccMagResults.MagSize);
 8017290:	4608      	mov	r0, r1
 8017292:	f004 ffaf 	bl	801c1f4 <malloc>
      AccMagResults.Array.Z = realloc(AccMagResults.Array.Z, sizeof(float) * AccMagResults.MagSize);
 8017296:	6120      	str	r0, [r4, #16]
    if (AccMagResults.Array.Z == NULL)
 8017298:	6923      	ldr	r3, [r4, #16]
 801729a:	2b00      	cmp	r3, #0
 801729c:	d0e0      	beq.n	8017260 <MotionSP_VibrationAnalysisVariableInit+0xc4>
    memset((void *)&TimeDomainData, 0x00, sizeof(sTimeDomainData_t));
 801729e:	223c      	movs	r2, #60	; 0x3c
 80172a0:	2100      	movs	r1, #0
 80172a2:	482e      	ldr	r0, [pc, #184]	; (801735c <MotionSP_VibrationAnalysisVariableInit+0x1c0>)
 80172a4:	f004 ffde 	bl	801c264 <memset>
    MotionSP_SetWindFiltArray(Filter_Params, MotionSP_Parameters.FftSize, (Filt_Type_t)MotionSP_Parameters.window);
 80172a8:	792a      	ldrb	r2, [r5, #4]
 80172aa:	8829      	ldrh	r1, [r5, #0]
 80172ac:	482c      	ldr	r0, [pc, #176]	; (8017360 <MotionSP_VibrationAnalysisVariableInit+0x1c4>)
 80172ae:	f7fb ffc9 	bl	8013244 <MotionSP_SetWindFiltArray>
    arm_rfft_fast_init_f32(&fftS, MotionSP_Parameters.FftSize);
 80172b2:	8829      	ldrh	r1, [r5, #0]
 80172b4:	482b      	ldr	r0, [pc, #172]	; (8017364 <MotionSP_VibrationAnalysisVariableInit+0x1c8>)
 80172b6:	f003 fc01 	bl	801aabc <arm_rfft_fast_init_f32>
    accCircBuffIndexForFft = MotionSP_Parameters.FftSize - 1;
 80172ba:	882b      	ldrh	r3, [r5, #0]
 80172bc:	4a2a      	ldr	r2, [pc, #168]	; (8017368 <MotionSP_VibrationAnalysisVariableInit+0x1cc>)
    accCircBuffIndexForFftDelta = (uint16_t)((float)(MotionSP_Parameters.FftSize)*((100.0f-(float)MotionSP_Parameters.FftOvl)/100.0f));
 80172be:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801736c <MotionSP_VibrationAnalysisVariableInit+0x1d0>
    accCircBuffIndexForFft = MotionSP_Parameters.FftSize - 1;
 80172c2:	1e59      	subs	r1, r3, #1
 80172c4:	8011      	strh	r1, [r2, #0]
    accCircBuffIndexForFftDelta = (uint16_t)((float)(MotionSP_Parameters.FftSize)*((100.0f-(float)MotionSP_Parameters.FftOvl)/100.0f));
 80172c6:	7aaa      	ldrb	r2, [r5, #10]
 80172c8:	ee06 2a90 	vmov	s13, r2
 80172cc:	eef8 6a66 	vcvt.f32.u32	s13, s13
    accCircBuffIndexForFftOvf = 0;
 80172d0:	2400      	movs	r4, #0
    accCircBuffIndexForFftDelta = (uint16_t)((float)(MotionSP_Parameters.FftSize)*((100.0f-(float)MotionSP_Parameters.FftOvl)/100.0f));
 80172d2:	ee77 6ae6 	vsub.f32	s13, s15, s13
    accCircBuffIndexForFftOvf = 0;
 80172d6:	f886 478a 	strb.w	r4, [r6, #1930]	; 0x78a
    accCircBuffIndexForFftDelta = (uint16_t)((float)(MotionSP_Parameters.FftSize)*((100.0f-(float)MotionSP_Parameters.FftOvl)/100.0f));
 80172da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80172de:	ee07 3a90 	vmov	s15, r3
 80172e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80172e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80172ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80172ee:	ee17 3a90 	vmov	r3, s15
 80172f2:	f8a6 3788 	strh.w	r3, [r6, #1928]	; 0x788
    if(MemoryIsAlloc)
 80172f6:	f896 378b 	ldrb.w	r3, [r6, #1931]	; 0x78b
 80172fa:	b12b      	cbz	r3, 8017308 <MotionSP_VibrationAnalysisVariableInit+0x16c>
      free(TotalBuffToSending);
 80172fc:	f8d6 078c 	ldr.w	r0, [r6, #1932]	; 0x78c
 8017300:	f004 ff80 	bl	801c204 <free>
      MemoryIsAlloc= 0;
 8017304:	f886 478b 	strb.w	r4, [r6, #1931]	; 0x78b
    RestartFlag = 1;
 8017308:	2301      	movs	r3, #1
    PREDMNT1_PRINTF("\r\n\t--> OK\r\n");
 801730a:	4919      	ldr	r1, [pc, #100]	; (8017370 <MotionSP_VibrationAnalysisVariableInit+0x1d4>)
    RestartFlag = 1;
 801730c:	70bb      	strb	r3, [r7, #2]
    SendingFFT= 0;
 801730e:	2400      	movs	r4, #0
    PREDMNT1_PRINTF("\r\n\t--> OK\r\n");
 8017310:	4668      	mov	r0, sp
    SendingFFT= 0;
 8017312:	f886 4790 	strb.w	r4, [r6, #1936]	; 0x790
    PREDMNT1_PRINTF("\r\n\t--> OK\r\n");
 8017316:	f005 fd7f 	bl	801ce18 <strcpy>
 801731a:	210b      	movs	r1, #11
 801731c:	4668      	mov	r0, sp
 801731e:	f002 fb45 	bl	80199ac <CDC_Fill_Buffer>
  return BSP_ERROR_NONE;
 8017322:	4620      	mov	r0, r4
 8017324:	e79e      	b.n	8017264 <MotionSP_VibrationAnalysisVariableInit+0xc8>
      AccMagResults.Array.Y = realloc(AccMagResults.Array.Y, sizeof(float) * AccMagResults.MagSize);
 8017326:	f005 fcef 	bl	801cd08 <realloc>
 801732a:	e7a8      	b.n	801727e <MotionSP_VibrationAnalysisVariableInit+0xe2>
      AccMagResults.Array.Z = realloc(AccMagResults.Array.Z, sizeof(float) * AccMagResults.MagSize);
 801732c:	f005 fcec 	bl	801cd08 <realloc>
 8017330:	e7b1      	b.n	8017296 <MotionSP_VibrationAnalysisVariableInit+0xfa>
    PREDMNT1_PRINTF("\r\n\t--> Overlapping size is out of range.\r\n");
 8017332:	4910      	ldr	r1, [pc, #64]	; (8017374 <MotionSP_VibrationAnalysisVariableInit+0x1d8>)
 8017334:	4668      	mov	r0, sp
 8017336:	f005 fd6f 	bl	801ce18 <strcpy>
 801733a:	212a      	movs	r1, #42	; 0x2a
 801733c:	e749      	b.n	80171d2 <MotionSP_VibrationAnalysisVariableInit+0x36>
 801733e:	bf00      	nop
 8017340:	080249e0 	.word	0x080249e0
 8017344:	20002e14 	.word	0x20002e14
 8017348:	08024a0d 	.word	0x08024a0d
 801734c:	20000504 	.word	0x20000504
 8017350:	20011538 	.word	0x20011538
 8017354:	20002e58 	.word	0x20002e58
 8017358:	20002e7c 	.word	0x20002e7c
 801735c:	20002e88 	.word	0x20002e88
 8017360:	2000f4c4 	.word	0x2000f4c4
 8017364:	20002e24 	.word	0x20002e24
 8017368:	20002e22 	.word	0x20002e22
 801736c:	42c80000 	.word	0x42c80000
 8017370:	08024989 	.word	0x08024989
 8017374:	08024a30 	.word	0x08024a30

08017378 <MotionSP_FreqDomainAlarm>:
                               float *pFDWarnThresh,
                               float *pFDAlarmThresh,
                               uint8_t subrange_num, 
                               sSubrange_t *pTHR_Check, 
                               sFreqDomainAlarm_t *pTHR_Fft_Alarms)
{
 8017378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801737c:	4604      	mov	r4, r0
 801737e:	4688      	mov	r8, r1
  float warn_thresholds;
  float alarm_thresholds;
  memset((void *)pTHR_Check, 0x00, 3*SUBRANGE_MAX * sizeof(float) );
 8017380:	980c      	ldr	r0, [sp, #48]	; 0x30
{
 8017382:	9301      	str	r3, [sp, #4]
 8017384:	4691      	mov	r9, r2
  memset((void *)pTHR_Check, 0x00, 3*SUBRANGE_MAX * sizeof(float) );
 8017386:	2100      	movs	r1, #0
 8017388:	f44f 7240 	mov.w	r2, #768	; 0x300
 801738c:	f004 ff6a 	bl	801c264 <memset>

  for(int i=0; i<subrange_num; i++)
 8017390:	4620      	mov	r0, r4
 8017392:	2200      	movs	r2, #0
 8017394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017396:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017398:	f04f 0b0c 	mov.w	fp, #12
        pTHR_Fft_Alarms->STATUS_AXIS_X[i] = ALARM;
      break;
      
    case 0x01:  /* Axis Y */
      pTHR_Check->AXIS_Y[i] = pSRAmplitude->AXIS_Y[i];
      pTHR_Fft_Alarms->STATUS_AXIS_Y[i] = GOOD;
 801739c:	4615      	mov	r5, r2
      if(pSRAmplitude->AXIS_Y[i] > warn_thresholds)
        pTHR_Fft_Alarms->STATUS_AXIS_Y[i] = WARNING;
      if(pSRAmplitude->AXIS_Y[i] > alarm_thresholds)
        pTHR_Fft_Alarms->STATUS_AXIS_Y[i] = ALARM;
 801739e:	f04f 0c02 	mov.w	ip, #2
      
    case 0x02:  /* Axis Z */
      pTHR_Check->AXIS_Z[i] = pSRAmplitude->AXIS_Z[i];
      pTHR_Fft_Alarms->STATUS_AXIS_Z[i] = GOOD;
      if(pSRAmplitude->AXIS_Z[i] > warn_thresholds)
        pTHR_Fft_Alarms->STATUS_AXIS_Z[i] = WARNING;
 80173a2:	f04f 0e01 	mov.w	lr, #1
  for(int i=0; i<subrange_num; i++)
 80173a6:	9901      	ldr	r1, [sp, #4]
 80173a8:	4291      	cmp	r1, r2
 80173aa:	dc02      	bgt.n	80173b2 <MotionSP_FreqDomainAlarm+0x3a>
      __NOP();
      break;    
    }
   } 
  }
}
 80173ac:	b003      	add	sp, #12
 80173ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173b2:	fb0b f102 	mul.w	r1, fp, r2
 80173b6:	eb08 0a01 	add.w	sl, r8, r1
   for(int j=0; j<3; j++) 
 80173ba:	2600      	movs	r6, #0
 80173bc:	4449      	add	r1, r9
    switch (j)
 80173be:	2e01      	cmp	r6, #1
    warn_thresholds = *(pFDWarnThresh+(i*3)+j);
 80173c0:	ecfa 7a01 	vldmia	sl!, {s15}
    alarm_thresholds = *(pFDAlarmThresh+(i*3)+j);
 80173c4:	ecb1 7a01 	vldmia	r1!, {s14}
    switch (j)
 80173c8:	d01f      	beq.n	801740a <MotionSP_FreqDomainAlarm+0x92>
 80173ca:	2e02      	cmp	r6, #2
 80173cc:	d035      	beq.n	801743a <MotionSP_FreqDomainAlarm+0xc2>
      pTHR_Check->AXIS_X[i] = pSRAmplitude->AXIS_X[i];
 80173ce:	edd0 6a00 	vldr	s13, [r0]
 80173d2:	edc4 6a00 	vstr	s13, [r4]
      pTHR_Fft_Alarms->STATUS_AXIS_X[i] = GOOD;       
 80173d6:	701d      	strb	r5, [r3, #0]
      if(pSRAmplitude->AXIS_X[i] > warn_thresholds)
 80173d8:	ed90 6a00 	vldr	s12, [r0]
        pTHR_Fft_Alarms->STATUS_AXIS_X[i] = WARNING;
 80173dc:	eeb4 6a67 	vcmp.f32	s12, s15
 80173e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if(pSRAmplitude->AXIS_X[i] > alarm_thresholds)
 80173e4:	eef4 6ac7 	vcmpe.f32	s13, s14
        pTHR_Fft_Alarms->STATUS_AXIS_X[i] = WARNING;
 80173e8:	bfd4      	ite	le
 80173ea:	462f      	movle	r7, r5
 80173ec:	4677      	movgt	r7, lr
      if(pSRAmplitude->AXIS_X[i] > alarm_thresholds)
 80173ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        pTHR_Fft_Alarms->STATUS_AXIS_X[i] = WARNING;
 80173f2:	701f      	strb	r7, [r3, #0]
      if(pSRAmplitude->AXIS_X[i] > alarm_thresholds)
 80173f4:	dd01      	ble.n	80173fa <MotionSP_FreqDomainAlarm+0x82>
        pTHR_Fft_Alarms->STATUS_AXIS_X[i] = ALARM;
 80173f6:	f883 c000 	strb.w	ip, [r3]
   for(int j=0; j<3; j++) 
 80173fa:	3601      	adds	r6, #1
 80173fc:	2e03      	cmp	r6, #3
 80173fe:	d1de      	bne.n	80173be <MotionSP_FreqDomainAlarm+0x46>
  for(int i=0; i<subrange_num; i++)
 8017400:	3201      	adds	r2, #1
 8017402:	3301      	adds	r3, #1
 8017404:	3004      	adds	r0, #4
 8017406:	3404      	adds	r4, #4
 8017408:	e7cd      	b.n	80173a6 <MotionSP_FreqDomainAlarm+0x2e>
      pTHR_Check->AXIS_Y[i] = pSRAmplitude->AXIS_Y[i];
 801740a:	edd0 6a40 	vldr	s13, [r0, #256]	; 0x100
 801740e:	edc4 6a40 	vstr	s13, [r4, #256]	; 0x100
      pTHR_Fft_Alarms->STATUS_AXIS_Y[i] = GOOD;
 8017412:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
      if(pSRAmplitude->AXIS_Y[i] > warn_thresholds)
 8017416:	ed90 6a40 	vldr	s12, [r0, #256]	; 0x100
        pTHR_Fft_Alarms->STATUS_AXIS_Y[i] = WARNING;
 801741a:	eeb4 6a67 	vcmp.f32	s12, s15
 801741e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        pTHR_Fft_Alarms->STATUS_AXIS_Y[i] = ALARM;
 8017422:	eef4 6a47 	vcmp.f32	s13, s14
        pTHR_Fft_Alarms->STATUS_AXIS_Y[i] = WARNING;
 8017426:	bfcc      	ite	gt
 8017428:	4637      	movgt	r7, r6
 801742a:	462f      	movle	r7, r5
        pTHR_Fft_Alarms->STATUS_AXIS_Y[i] = ALARM;
 801742c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017430:	bfc8      	it	gt
 8017432:	4667      	movgt	r7, ip
 8017434:	f883 7040 	strb.w	r7, [r3, #64]	; 0x40
 8017438:	e7df      	b.n	80173fa <MotionSP_FreqDomainAlarm+0x82>
      pTHR_Check->AXIS_Z[i] = pSRAmplitude->AXIS_Z[i];
 801743a:	edd0 6a80 	vldr	s13, [r0, #512]	; 0x200
 801743e:	edc4 6a80 	vstr	s13, [r4, #512]	; 0x200
      pTHR_Fft_Alarms->STATUS_AXIS_Z[i] = GOOD;
 8017442:	f883 5080 	strb.w	r5, [r3, #128]	; 0x80
      if(pSRAmplitude->AXIS_Z[i] > warn_thresholds)
 8017446:	ed90 6a80 	vldr	s12, [r0, #512]	; 0x200
        pTHR_Fft_Alarms->STATUS_AXIS_Z[i] = WARNING;
 801744a:	eeb4 6a67 	vcmp.f32	s12, s15
 801744e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if(pSRAmplitude->AXIS_Z[i] > alarm_thresholds)
 8017452:	eef4 6ac7 	vcmpe.f32	s13, s14
        pTHR_Fft_Alarms->STATUS_AXIS_Z[i] = WARNING;
 8017456:	bfd4      	ite	le
 8017458:	462f      	movle	r7, r5
 801745a:	4677      	movgt	r7, lr
      if(pSRAmplitude->AXIS_Z[i] > alarm_thresholds)
 801745c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        pTHR_Fft_Alarms->STATUS_AXIS_Z[i] = WARNING;
 8017460:	f883 7080 	strb.w	r7, [r3, #128]	; 0x80
        pTHR_Fft_Alarms->STATUS_AXIS_Z[i] = ALARM;
 8017464:	bfc8      	it	gt
 8017466:	f883 c080 	strbgt.w	ip, [r3, #128]	; 0x80
 801746a:	e7c6      	b.n	80173fa <MotionSP_FreqDomainAlarm+0x82>

0801746c <enable_FIFO>:
  * @brief  Enable FIFO measuring
  * @param  None
  * @retval BSP status
  */
int32_t enable_FIFO(void)
{
 801746c:	b530      	push	{r4, r5, lr}
 801746e:	b0c1      	sub	sp, #260	; 0x104
  int32_t BSP_Error= BSP_ERROR_NONE;
  
  PREDMNT1_PRINTF("\r\nEnable FIFO\r\n");
 8017470:	492a      	ldr	r1, [pc, #168]	; (801751c <enable_FIFO+0xb0>)
 8017472:	4668      	mov	r0, sp
 8017474:	f005 fcd0 	bl	801ce18 <strcpy>
 8017478:	210f      	movs	r1, #15
 801747a:	4668      	mov	r0, sp
 801747c:	f002 fa96 	bl	80199ac <CDC_Fill_Buffer>
  
  /* Set FIFO to STREAM Mode (Continuous) */
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_Mode(ACCELERO_INSTANCE, ACCELERO_FIFO_STREAM_MODE)) != BSP_ERROR_NONE)
 8017480:	2106      	movs	r1, #6
 8017482:	2001      	movs	r0, #1
 8017484:	f002 fcaa 	bl	8019ddc <BSP_MOTION_SENSOR_FIFO_Set_Mode>
 8017488:	4604      	mov	r4, r0
 801748a:	b158      	cbz	r0, 80174a4 <enable_FIFO+0x38>
  {
    PREDMNT1_PRINTF("\tError Set FIFO in Continuous Mode (BSP_ERROR = %ld)\r\n", BSP_Error);
 801748c:	4924      	ldr	r1, [pc, #144]	; (8017520 <enable_FIFO+0xb4>)
 801748e:	4602      	mov	r2, r0
  }

  /* ISM330DLC INT2_FIFO_FULL interrupt enable */
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full(ACCELERO_INSTANCE, ENABLE)) != BSP_ERROR_NONE)
  {
    PREDMNT1_PRINTF("\tError enable FIFO FULL INTP on INT2 path (BSP_ERROR = %ld)\r\n", BSP_Error);
 8017490:	4668      	mov	r0, sp
 8017492:	f005 fc51 	bl	801cd38 <siprintf>
 8017496:	4601      	mov	r1, r0
 8017498:	4668      	mov	r0, sp
 801749a:	f002 fa87 	bl	80199ac <CDC_Fill_Buffer>
  StartTick = BSP_GetTick();

  FifoEnabled = 1;
  
  return BSP_Error;
}
 801749e:	4620      	mov	r0, r4
 80174a0:	b041      	add	sp, #260	; 0x104
 80174a2:	bd30      	pop	{r4, r5, pc}
    PREDMNT1_PRINTF("\tOk Set FIFO in Continuous Mode\r\n");
 80174a4:	491f      	ldr	r1, [pc, #124]	; (8017524 <enable_FIFO+0xb8>)
 80174a6:	4668      	mov	r0, sp
 80174a8:	f005 fcb6 	bl	801ce18 <strcpy>
 80174ac:	2121      	movs	r1, #33	; 0x21
 80174ae:	4668      	mov	r0, sp
 80174b0:	f002 fa7c 	bl	80199ac <CDC_Fill_Buffer>
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full(ACCELERO_INSTANCE, ENABLE)) != BSP_ERROR_NONE)
 80174b4:	2101      	movs	r1, #1
 80174b6:	4608      	mov	r0, r1
 80174b8:	f002 fc42 	bl	8019d40 <BSP_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full>
 80174bc:	4604      	mov	r4, r0
 80174be:	b110      	cbz	r0, 80174c6 <enable_FIFO+0x5a>
    PREDMNT1_PRINTF("\tError enable FIFO FULL INTP on INT2 path (BSP_ERROR = %ld)\r\n", BSP_Error);
 80174c0:	4919      	ldr	r1, [pc, #100]	; (8017528 <enable_FIFO+0xbc>)
 80174c2:	4602      	mov	r2, r0
 80174c4:	e7e4      	b.n	8017490 <enable_FIFO+0x24>
    PREDMNT1_PRINTF("\tOk enable FIFO FULL INTP on INT2 path\r\n");
 80174c6:	4919      	ldr	r1, [pc, #100]	; (801752c <enable_FIFO+0xc0>)
                                              AcceleroParams.AccFifoBdr)) != BSP_ERROR_NONE)
 80174c8:	4d19      	ldr	r5, [pc, #100]	; (8017530 <enable_FIFO+0xc4>)
    PREDMNT1_PRINTF("\tOk enable FIFO FULL INTP on INT2 path\r\n");
 80174ca:	4668      	mov	r0, sp
 80174cc:	f005 fca4 	bl	801ce18 <strcpy>
 80174d0:	2128      	movs	r1, #40	; 0x28
 80174d2:	4668      	mov	r0, sp
 80174d4:	f002 fa6a 	bl	80199ac <CDC_Fill_Buffer>
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_BDR(ACCELERO_INSTANCE,
 80174d8:	88ab      	ldrh	r3, [r5, #4]
 80174da:	ee00 3a10 	vmov	s0, r3
 80174de:	2102      	movs	r1, #2
 80174e0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80174e4:	2001      	movs	r0, #1
 80174e6:	f002 fc0f 	bl	8019d08 <BSP_MOTION_SENSOR_FIFO_Set_BDR>
 80174ea:	4604      	mov	r4, r0
 80174ec:	b180      	cbz	r0, 8017510 <enable_FIFO+0xa4>
    PREDMNT1_PRINTF("\tError Set FIFO ODR Value (BSP_ERROR = %ld)\r\n", BSP_Error);
 80174ee:	4911      	ldr	r1, [pc, #68]	; (8017534 <enable_FIFO+0xc8>)
 80174f0:	4602      	mov	r2, r0
 80174f2:	4668      	mov	r0, sp
 80174f4:	f005 fc20 	bl	801cd38 <siprintf>
 80174f8:	4601      	mov	r1, r0
    PREDMNT1_PRINTF("\tOk Set FIFO ODR Value\r\n");
 80174fa:	4668      	mov	r0, sp
 80174fc:	f002 fa56 	bl	80199ac <CDC_Fill_Buffer>
  StartTick = BSP_GetTick();
 8017500:	f7f0 fae0 	bl	8007ac4 <BSP_GetTick>
  FifoEnabled = 1;
 8017504:	4b0c      	ldr	r3, [pc, #48]	; (8017538 <enable_FIFO+0xcc>)
  StartTick = BSP_GetTick();
 8017506:	f8c5 0794 	str.w	r0, [r5, #1940]	; 0x794
  FifoEnabled = 1;
 801750a:	2201      	movs	r2, #1
 801750c:	701a      	strb	r2, [r3, #0]
  return BSP_Error;
 801750e:	e7c6      	b.n	801749e <enable_FIFO+0x32>
    PREDMNT1_PRINTF("\tOk Set FIFO ODR Value\r\n");
 8017510:	490a      	ldr	r1, [pc, #40]	; (801753c <enable_FIFO+0xd0>)
 8017512:	4668      	mov	r0, sp
 8017514:	f005 fc80 	bl	801ce18 <strcpy>
 8017518:	2118      	movs	r1, #24
 801751a:	e7ee      	b.n	80174fa <enable_FIFO+0x8e>
 801751c:	08024a5b 	.word	0x08024a5b
 8017520:	08024a6b 	.word	0x08024a6b
 8017524:	08024aa2 	.word	0x08024aa2
 8017528:	08024ac4 	.word	0x08024ac4
 801752c:	08024b02 	.word	0x08024b02
 8017530:	20011538 	.word	0x20011538
 8017534:	08024b2b 	.word	0x08024b2b
 8017538:	20012494 	.word	0x20012494
 801753c:	08024b59 	.word	0x08024b59

08017540 <disable_FIFO>:
  * @brief  Disable FIFO measuring
  * @param  None
  * @retval BSP status
  */
int32_t disable_FIFO(void)
{
 8017540:	b510      	push	{r4, lr}
 8017542:	b0c0      	sub	sp, #256	; 0x100
  int32_t BSP_Error= BSP_ERROR_NONE;
  
  PREDMNT1_PRINTF("\r\nDisable FIFO\r\n");
 8017544:	4924      	ldr	r1, [pc, #144]	; (80175d8 <disable_FIFO+0x98>)
 8017546:	4668      	mov	r0, sp
 8017548:	f005 fc66 	bl	801ce18 <strcpy>
 801754c:	2110      	movs	r1, #16
 801754e:	4668      	mov	r0, sp
 8017550:	f002 fa2c 	bl	80199ac <CDC_Fill_Buffer>
  
  /* Switch from FIFO to BYPASS MODE */
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_Mode(ACCELERO_INSTANCE, ACCELERO_FIFO_BYPASS_MODE)) != BSP_ERROR_NONE)
 8017554:	2100      	movs	r1, #0
 8017556:	2001      	movs	r0, #1
 8017558:	f002 fc40 	bl	8019ddc <BSP_MOTION_SENSOR_FIFO_Set_Mode>
 801755c:	4604      	mov	r4, r0
 801755e:	b158      	cbz	r0, 8017578 <disable_FIFO+0x38>
  {
    PREDMNT1_PRINTF("\tError set FIFO in By-Pass Mode (BSP_ERROR = %ld)\r\n", BSP_Error);
 8017560:	491e      	ldr	r1, [pc, #120]	; (80175dc <disable_FIFO+0x9c>)
 8017562:	4602      	mov	r2, r0
  }
  
  /* Switch off the FIFO filling */
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_BDR(ACCELERO_INSTANCE, MOTION_ACCELERO, 0.0)) != BSP_ERROR_NONE)
  {
    PREDMNT1_PRINTF("\tError Set FIFO ODR Value (BSP_ERROR = %ld)\r\n", BSP_Error);
 8017564:	4668      	mov	r0, sp
 8017566:	f005 fbe7 	bl	801cd38 <siprintf>
 801756a:	4601      	mov	r1, r0
 801756c:	4668      	mov	r0, sp
 801756e:	f002 fa1d 	bl	80199ac <CDC_Fill_Buffer>
  } 

  FifoEnabled = 0;
  
  return BSP_Error;
}
 8017572:	4620      	mov	r0, r4
 8017574:	b040      	add	sp, #256	; 0x100
 8017576:	bd10      	pop	{r4, pc}
    PREDMNT1_PRINTF("\tOk set FIFO in By-Pass Mode\r\n");
 8017578:	4919      	ldr	r1, [pc, #100]	; (80175e0 <disable_FIFO+0xa0>)
 801757a:	4668      	mov	r0, sp
 801757c:	f005 fc4c 	bl	801ce18 <strcpy>
 8017580:	211e      	movs	r1, #30
 8017582:	4668      	mov	r0, sp
 8017584:	f002 fa12 	bl	80199ac <CDC_Fill_Buffer>
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full(ACCELERO_INSTANCE, DISABLE)) != BSP_ERROR_NONE)
 8017588:	4621      	mov	r1, r4
 801758a:	2001      	movs	r0, #1
 801758c:	f002 fbd8 	bl	8019d40 <BSP_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full>
 8017590:	4604      	mov	r4, r0
 8017592:	b110      	cbz	r0, 801759a <disable_FIFO+0x5a>
    PREDMNT1_PRINTF("\tError disable FIFO FULL INTP on INT2 path (BSP_ERROR = %ld)\r\n", BSP_Error);
 8017594:	4913      	ldr	r1, [pc, #76]	; (80175e4 <disable_FIFO+0xa4>)
 8017596:	4602      	mov	r2, r0
 8017598:	e7e4      	b.n	8017564 <disable_FIFO+0x24>
    PREDMNT1_PRINTF("\tOk disable FIFO FULL INTP on INT2 path\r\n");
 801759a:	4913      	ldr	r1, [pc, #76]	; (80175e8 <disable_FIFO+0xa8>)
 801759c:	4668      	mov	r0, sp
 801759e:	f005 fc3b 	bl	801ce18 <strcpy>
 80175a2:	2129      	movs	r1, #41	; 0x29
 80175a4:	4668      	mov	r0, sp
 80175a6:	f002 fa01 	bl	80199ac <CDC_Fill_Buffer>
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_BDR(ACCELERO_INSTANCE, MOTION_ACCELERO, 0.0)) != BSP_ERROR_NONE)
 80175aa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80175ec <disable_FIFO+0xac>
 80175ae:	2102      	movs	r1, #2
 80175b0:	2001      	movs	r0, #1
 80175b2:	f002 fba9 	bl	8019d08 <BSP_MOTION_SENSOR_FIFO_Set_BDR>
 80175b6:	4604      	mov	r4, r0
 80175b8:	b110      	cbz	r0, 80175c0 <disable_FIFO+0x80>
    PREDMNT1_PRINTF("\tError Set FIFO ODR Value (BSP_ERROR = %ld)\r\n", BSP_Error);
 80175ba:	490d      	ldr	r1, [pc, #52]	; (80175f0 <disable_FIFO+0xb0>)
 80175bc:	4602      	mov	r2, r0
 80175be:	e7d1      	b.n	8017564 <disable_FIFO+0x24>
    PREDMNT1_PRINTF("\tOk Set FIFO ODR Value\r\n");
 80175c0:	490c      	ldr	r1, [pc, #48]	; (80175f4 <disable_FIFO+0xb4>)
 80175c2:	4668      	mov	r0, sp
 80175c4:	f005 fc28 	bl	801ce18 <strcpy>
 80175c8:	2118      	movs	r1, #24
 80175ca:	4668      	mov	r0, sp
 80175cc:	f002 f9ee 	bl	80199ac <CDC_Fill_Buffer>
  FifoEnabled = 0;
 80175d0:	4b09      	ldr	r3, [pc, #36]	; (80175f8 <disable_FIFO+0xb8>)
 80175d2:	701c      	strb	r4, [r3, #0]
  return BSP_Error;
 80175d4:	e7cd      	b.n	8017572 <disable_FIFO+0x32>
 80175d6:	bf00      	nop
 80175d8:	08024b72 	.word	0x08024b72
 80175dc:	08024b83 	.word	0x08024b83
 80175e0:	08024bb7 	.word	0x08024bb7
 80175e4:	08024bd6 	.word	0x08024bd6
 80175e8:	08024c15 	.word	0x08024c15
 80175ec:	00000000 	.word	0x00000000
 80175f0:	08024b2b 	.word	0x08024b2b
 80175f4:	08024b59 	.word	0x08024b59
 80175f8:	20012494 	.word	0x20012494

080175fc <MotionSP_MainManager>:
{
 80175fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!MotionSP_Running)
 8017600:	4c7d      	ldr	r4, [pc, #500]	; (80177f8 <MotionSP_MainManager+0x1fc>)
 8017602:	f894 3798 	ldrb.w	r3, [r4, #1944]	; 0x798
{
 8017606:	b0d3      	sub	sp, #332	; 0x14c
  if (!MotionSP_Running)
 8017608:	2b00      	cmp	r3, #0
 801760a:	f040 8115 	bne.w	8017838 <MotionSP_MainManager+0x23c>
    if ((BSP_Error = MotionSP_VibrationAnalysisVariableInit()) != BSP_ERROR_NONE)
 801760e:	f7ff fdc5 	bl	801719c <MotionSP_VibrationAnalysisVariableInit>
 8017612:	4606      	mov	r6, r0
 8017614:	b928      	cbnz	r0, 8017622 <MotionSP_MainManager+0x26>
    if((EnableDisable_ACC_HP_Filter(AcceleroParams.HwFilter)) != BSP_ERROR_NONE)
 8017616:	7aa0      	ldrb	r0, [r4, #10]
 8017618:	f7ff fb60 	bl	8016cdc <EnableDisable_ACC_HP_Filter>
 801761c:	4606      	mov	r6, r0
 801761e:	b120      	cbz	r0, 801762a <MotionSP_MainManager+0x2e>
      return BSP_Error;
 8017620:	2600      	movs	r6, #0
}
 8017622:	4630      	mov	r0, r6
 8017624:	b053      	add	sp, #332	; 0x14c
 8017626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  PREDMNT1_PRINTF("\r\nAccelero FIFO config:\r\n");
 801762a:	4974      	ldr	r1, [pc, #464]	; (80177fc <MotionSP_MainManager+0x200>)
  MotionSP_Data.FifoEmpty = 0;
 801762c:	4d74      	ldr	r5, [pc, #464]	; (8017800 <MotionSP_MainManager+0x204>)
  if (MotionSP_Parameters.FftSize == 1024)
 801762e:	4f75      	ldr	r7, [pc, #468]	; (8017804 <MotionSP_MainManager+0x208>)
  PREDMNT1_PRINTF("\r\nAccelero FIFO config:\r\n");
 8017630:	a812      	add	r0, sp, #72	; 0x48
 8017632:	f005 fbf1 	bl	801ce18 <strcpy>
 8017636:	2119      	movs	r1, #25
 8017638:	a812      	add	r0, sp, #72	; 0x48
 801763a:	f002 f9b7 	bl	80199ac <CDC_Fill_Buffer>
  MotionSP_Data.AccCircBuff.Size = 0;
 801763e:	4b72      	ldr	r3, [pc, #456]	; (8017808 <MotionSP_MainManager+0x20c>)
 8017640:	60ab      	str	r3, [r5, #8]
  if (MotionSP_Parameters.FftSize == 1024)
 8017642:	883b      	ldrh	r3, [r7, #0]
 8017644:	7aba      	ldrb	r2, [r7, #10]
  MotionSP_Data.FifoEmpty = 0;
 8017646:	712e      	strb	r6, [r5, #4]
  if (MotionSP_Parameters.FftSize == 1024)
 8017648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  MotionSP_Data.AccCircBuff.Ovf = 0;
 801764c:	732e      	strb	r6, [r5, #12]
  if (MotionSP_Parameters.FftSize == 1024)
 801764e:	d13b      	bne.n	80176c8 <MotionSP_MainManager+0xcc>
      k = 0.66f;   
 8017650:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801780c <MotionSP_MainManager+0x210>
 8017654:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8017810 <MotionSP_MainManager+0x214>
 8017658:	2a13      	cmp	r2, #19
      k = 0.50f;
 801765a:	bf98      	it	ls
 801765c:	eef0 6a67 	vmovls.f32	s13, s15
  AcceleroParams.FifoWtm = (uint16_t)(((float)MotionSP_Parameters.FftSize*(1.0f-((float)MotionSP_Parameters.FftOvl/100.0f)))*k);
 8017660:	7aba      	ldrb	r2, [r7, #10]
 8017662:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8017814 <MotionSP_MainManager+0x218>
 8017666:	ee06 2a10 	vmov	s12, r2
 801766a:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 801766e:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8017672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017676:	ee37 7a67 	vsub.f32	s14, s14, s15
 801767a:	ee07 3a90 	vmov	s15, r3
 801767e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017686:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801768a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801768e:	ee17 3a90 	vmov	r3, s15
 8017692:	b299      	uxth	r1, r3
  if ( (uint16_t)((AcceleroParams.FifoWtm * FIFO_FRAME_SIZE) > MAX_FIFO_SIZE) )
 8017694:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8017698:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
  AcceleroParams.FifoWtm = (uint16_t)(((float)MotionSP_Parameters.FftSize*(1.0f-((float)MotionSP_Parameters.FftOvl/100.0f)))*k);
 801769c:	8221      	strh	r1, [r4, #16]
  if ( (uint16_t)((AcceleroParams.FifoWtm * FIFO_FRAME_SIZE) > MAX_FIFO_SIZE) )
 801769e:	dd23      	ble.n	80176e8 <MotionSP_MainManager+0xec>
  { PREDMNT1_PRINTF("\n FIFO size will be %i byte than exceed its maximum value, 3 kbyte.\n",
 80176a0:	b292      	uxth	r2, r2
 80176a2:	495d      	ldr	r1, [pc, #372]	; (8017818 <MotionSP_MainManager+0x21c>)
 80176a4:	a812      	add	r0, sp, #72	; 0x48
 80176a6:	f005 fb47 	bl	801cd38 <siprintf>
 80176aa:	4601      	mov	r1, r0
 80176ac:	a812      	add	r0, sp, #72	; 0x48
 80176ae:	f002 f97d 	bl	80199ac <CDC_Fill_Buffer>
    PREDMNT1_PRINTF(" Please, reduce the FFT_SIZE_DEFAULT or the FFT_OVL_DEFAULT. \n");
 80176b2:	495a      	ldr	r1, [pc, #360]	; (801781c <MotionSP_MainManager+0x220>)
 80176b4:	a812      	add	r0, sp, #72	; 0x48
 80176b6:	f005 fbaf 	bl	801ce18 <strcpy>
 80176ba:	213e      	movs	r1, #62	; 0x3e
 80176bc:	a812      	add	r0, sp, #72	; 0x48
 80176be:	f002 f975 	bl	80199ac <CDC_Fill_Buffer>
    return BSP_ERROR_WRONG_PARAM;
 80176c2:	f06f 0601 	mvn.w	r6, #1
 80176c6:	e7ac      	b.n	8017622 <MotionSP_MainManager+0x26>
    if (MotionSP_Parameters.FftOvl < 20)
 80176c8:	2a13      	cmp	r2, #19
 80176ca:	d907      	bls.n	80176dc <MotionSP_MainManager+0xe0>
    else if (MotionSP_Parameters.FftOvl < 40)
 80176cc:	2a27      	cmp	r2, #39	; 0x27
 80176ce:	d908      	bls.n	80176e2 <MotionSP_MainManager+0xe6>
      k = 0.50f;
 80176d0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801780c <MotionSP_MainManager+0x210>
 80176d4:	2a3b      	cmp	r2, #59	; 0x3b
 80176d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80176da:	e7be      	b.n	801765a <MotionSP_MainManager+0x5e>
      k = 0.33f;
 80176dc:	eddf 6a50 	vldr	s13, [pc, #320]	; 8017820 <MotionSP_MainManager+0x224>
 80176e0:	e7be      	b.n	8017660 <MotionSP_MainManager+0x64>
      k = 0.40f;
 80176e2:	eddf 6a50 	vldr	s13, [pc, #320]	; 8017824 <MotionSP_MainManager+0x228>
 80176e6:	e7bb      	b.n	8017660 <MotionSP_MainManager+0x64>
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_Watermark_Level(ACCELERO_INSTANCE, AcceleroParams.FifoWtm)) != BSP_ERROR_NONE)
 80176e8:	2001      	movs	r0, #1
 80176ea:	f002 fb3b 	bl	8019d64 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level>
 80176ee:	4606      	mov	r6, r0
 80176f0:	b148      	cbz	r0, 8017706 <MotionSP_MainManager+0x10a>
    PREDMNT1_PRINTF("\tError Set FIFO Watermark Level (BSP_ERROR = %ld)\r\n", BSP_Error);
 80176f2:	494d      	ldr	r1, [pc, #308]	; (8017828 <MotionSP_MainManager+0x22c>)
 80176f4:	4602      	mov	r2, r0
    PREDMNT1_PRINTF("\tError Set FIFO Stop On Fth (BSP_ERROR = %ld)\r\n", BSP_Error);
 80176f6:	a812      	add	r0, sp, #72	; 0x48
 80176f8:	f005 fb1e 	bl	801cd38 <siprintf>
 80176fc:	4601      	mov	r1, r0
 80176fe:	a812      	add	r0, sp, #72	; 0x48
 8017700:	f002 f954 	bl	80199ac <CDC_Fill_Buffer>
    return BSP_Error;
 8017704:	e78d      	b.n	8017622 <MotionSP_MainManager+0x26>
    PREDMNT1_PRINTF("\tOk Set FIFO Watermark Level\r\n");
 8017706:	4949      	ldr	r1, [pc, #292]	; (801782c <MotionSP_MainManager+0x230>)
 8017708:	a812      	add	r0, sp, #72	; 0x48
 801770a:	f005 fb85 	bl	801ce18 <strcpy>
 801770e:	211e      	movs	r1, #30
 8017710:	a812      	add	r0, sp, #72	; 0x48
 8017712:	f002 f94b 	bl	80199ac <CDC_Fill_Buffer>
  if (MotionSP_Data.FifoBfr == NULL)
 8017716:	6828      	ldr	r0, [r5, #0]
 8017718:	8a21      	ldrh	r1, [r4, #16]
 801771a:	b948      	cbnz	r0, 8017730 <MotionSP_MainManager+0x134>
    MotionSP_Data.FifoBfr = (uint8_t *) malloc(sizeof(uint8_t) * (AcceleroParams.FifoWtm * FIFO_FRAME_SIZE));
 801771c:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
 8017720:	f004 fd68 	bl	801c1f4 <malloc>
    MotionSP_Data.FifoBfr = realloc(MotionSP_Data.FifoBfr, sizeof(uint8_t) * (AcceleroParams.FifoWtm * FIFO_FRAME_SIZE));
 8017724:	6028      	str	r0, [r5, #0]
  if (MotionSP_Data.FifoBfr == NULL)
 8017726:	6828      	ldr	r0, [r5, #0]
 8017728:	b938      	cbnz	r0, 801773a <MotionSP_MainManager+0x13e>
    return BSP_ERROR_MALLOC_FAILURE;
 801772a:	f06f 060b 	mvn.w	r6, #11
 801772e:	e778      	b.n	8017622 <MotionSP_MainManager+0x26>
    MotionSP_Data.FifoBfr = realloc(MotionSP_Data.FifoBfr, sizeof(uint8_t) * (AcceleroParams.FifoWtm * FIFO_FRAME_SIZE));
 8017730:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8017734:	f005 fae8 	bl	801cd08 <realloc>
 8017738:	e7f4      	b.n	8017724 <MotionSP_MainManager+0x128>
  memset((void *)MotionSP_Data.FifoBfr, 0, sizeof(uint8_t) * (AcceleroParams.FifoWtm * FIFO_FRAME_SIZE));
 801773a:	8a22      	ldrh	r2, [r4, #16]
 801773c:	2100      	movs	r1, #0
 801773e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8017742:	f004 fd8f 	bl	801c264 <memset>
  MotionSP_Data.AccCircBuff.Size = (uint16_t)((MotionSP_Parameters.FftSize * CIRC_BUFFER_RATIO_NUM)/CIRC_BUFFER_RATIO_DEN);
 8017746:	8839      	ldrh	r1, [r7, #0]
 8017748:	200c      	movs	r0, #12
 801774a:	4341      	muls	r1, r0
 801774c:	200a      	movs	r0, #10
 801774e:	fbb1 f1f0 	udiv	r1, r1, r0
  if (MotionSP_Data.AccCircBuff.Array.X == NULL)
 8017752:	6928      	ldr	r0, [r5, #16]
  MotionSP_Data.AccCircBuff.Size = (uint16_t)((MotionSP_Parameters.FftSize * CIRC_BUFFER_RATIO_NUM)/CIRC_BUFFER_RATIO_DEN);
 8017754:	8129      	strh	r1, [r5, #8]
    MotionSP_Data.AccCircBuff.Array.X = (float *) malloc(sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 8017756:	b289      	uxth	r1, r1
 8017758:	0089      	lsls	r1, r1, #2
  if (MotionSP_Data.AccCircBuff.Array.X == NULL)
 801775a:	2800      	cmp	r0, #0
 801775c:	d132      	bne.n	80177c4 <MotionSP_MainManager+0x1c8>
    MotionSP_Data.AccCircBuff.Array.X = (float *) malloc(sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 801775e:	4608      	mov	r0, r1
 8017760:	f004 fd48 	bl	801c1f4 <malloc>
   MotionSP_Data.AccCircBuff.Array.X = realloc(MotionSP_Data.AccCircBuff.Array.X, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 8017764:	6128      	str	r0, [r5, #16]
  if(MotionSP_Data.AccCircBuff.Array.X == NULL)
 8017766:	6928      	ldr	r0, [r5, #16]
 8017768:	2800      	cmp	r0, #0
 801776a:	d0de      	beq.n	801772a <MotionSP_MainManager+0x12e>
  memset((void *)MotionSP_Data.AccCircBuff.Array.X, 0, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 801776c:	892a      	ldrh	r2, [r5, #8]
 801776e:	2100      	movs	r1, #0
 8017770:	0092      	lsls	r2, r2, #2
 8017772:	f004 fd77 	bl	801c264 <memset>
  if (MotionSP_Data.AccCircBuff.Array.Y == NULL)
 8017776:	6968      	ldr	r0, [r5, #20]
 8017778:	8929      	ldrh	r1, [r5, #8]
 801777a:	bb30      	cbnz	r0, 80177ca <MotionSP_MainManager+0x1ce>
    MotionSP_Data.AccCircBuff.Array.Y = (float *) malloc(sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 801777c:	0088      	lsls	r0, r1, #2
 801777e:	f004 fd39 	bl	801c1f4 <malloc>
   MotionSP_Data.AccCircBuff.Array.Y = realloc(MotionSP_Data.AccCircBuff.Array.Y, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 8017782:	6168      	str	r0, [r5, #20]
  if(MotionSP_Data.AccCircBuff.Array.Y == NULL)
 8017784:	6968      	ldr	r0, [r5, #20]
 8017786:	2800      	cmp	r0, #0
 8017788:	d0cf      	beq.n	801772a <MotionSP_MainManager+0x12e>
  memset((void *)MotionSP_Data.AccCircBuff.Array.Y, 0, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 801778a:	892a      	ldrh	r2, [r5, #8]
 801778c:	2100      	movs	r1, #0
 801778e:	0092      	lsls	r2, r2, #2
 8017790:	f004 fd68 	bl	801c264 <memset>
  if (MotionSP_Data.AccCircBuff.Array.Z == NULL)
 8017794:	69a8      	ldr	r0, [r5, #24]
 8017796:	8929      	ldrh	r1, [r5, #8]
 8017798:	b9d8      	cbnz	r0, 80177d2 <MotionSP_MainManager+0x1d6>
    MotionSP_Data.AccCircBuff.Array.Z = (float *) malloc(sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 801779a:	0088      	lsls	r0, r1, #2
 801779c:	f004 fd2a 	bl	801c1f4 <malloc>
   MotionSP_Data.AccCircBuff.Array.Z = realloc(MotionSP_Data.AccCircBuff.Array.Z, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 80177a0:	61a8      	str	r0, [r5, #24]
  if(MotionSP_Data.AccCircBuff.Array.Z == NULL)
 80177a2:	69a8      	ldr	r0, [r5, #24]
 80177a4:	2800      	cmp	r0, #0
 80177a6:	d0c0      	beq.n	801772a <MotionSP_MainManager+0x12e>
  memset((void *)MotionSP_Data.AccCircBuff.Array.Z, 0, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 80177a8:	892a      	ldrh	r2, [r5, #8]
 80177aa:	2100      	movs	r1, #0
 80177ac:	0092      	lsls	r2, r2, #2
 80177ae:	f004 fd59 	bl	801c264 <memset>
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_Stop_On_Fth(ACCELERO_INSTANCE, ENABLE)) != BSP_ERROR_NONE)
 80177b2:	2101      	movs	r1, #1
 80177b4:	4608      	mov	r0, r1
 80177b6:	f002 fae7 	bl	8019d88 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>
 80177ba:	4606      	mov	r6, r0
 80177bc:	b168      	cbz	r0, 80177da <MotionSP_MainManager+0x1de>
    PREDMNT1_PRINTF("\tError Set FIFO Stop On Fth (BSP_ERROR = %ld)\r\n", BSP_Error);
 80177be:	491c      	ldr	r1, [pc, #112]	; (8017830 <MotionSP_MainManager+0x234>)
 80177c0:	4602      	mov	r2, r0
 80177c2:	e798      	b.n	80176f6 <MotionSP_MainManager+0xfa>
   MotionSP_Data.AccCircBuff.Array.X = realloc(MotionSP_Data.AccCircBuff.Array.X, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 80177c4:	f005 faa0 	bl	801cd08 <realloc>
 80177c8:	e7cc      	b.n	8017764 <MotionSP_MainManager+0x168>
   MotionSP_Data.AccCircBuff.Array.Y = realloc(MotionSP_Data.AccCircBuff.Array.Y, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 80177ca:	0089      	lsls	r1, r1, #2
 80177cc:	f005 fa9c 	bl	801cd08 <realloc>
 80177d0:	e7d7      	b.n	8017782 <MotionSP_MainManager+0x186>
   MotionSP_Data.AccCircBuff.Array.Z = realloc(MotionSP_Data.AccCircBuff.Array.Z, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 80177d2:	0089      	lsls	r1, r1, #2
 80177d4:	f005 fa98 	bl	801cd08 <realloc>
 80177d8:	e7e2      	b.n	80177a0 <MotionSP_MainManager+0x1a4>
    PREDMNT1_PRINTF("\tOk Set FIFO Stop On Fth\r\n");
 80177da:	4916      	ldr	r1, [pc, #88]	; (8017834 <MotionSP_MainManager+0x238>)
 80177dc:	a812      	add	r0, sp, #72	; 0x48
 80177de:	f005 fb1b 	bl	801ce18 <strcpy>
 80177e2:	211a      	movs	r1, #26
 80177e4:	a812      	add	r0, sp, #72	; 0x48
 80177e6:	f002 f8e1 	bl	80199ac <CDC_Fill_Buffer>
    enable_FIFO();
 80177ea:	f7ff fe3f 	bl	801746c <enable_FIFO>
    MotionSP_Running = 1;
 80177ee:	2301      	movs	r3, #1
 80177f0:	f884 3798 	strb.w	r3, [r4, #1944]	; 0x798
 80177f4:	e715      	b.n	8017622 <MotionSP_MainManager+0x26>
 80177f6:	bf00      	nop
 80177f8:	20011538 	.word	0x20011538
 80177fc:	08024c3f 	.word	0x08024c3f
 8017800:	20002df8 	.word	0x20002df8
 8017804:	20002e14 	.word	0x20002e14
 8017808:	ffff0000 	.word	0xffff0000
 801780c:	3f4ccccd 	.word	0x3f4ccccd
 8017810:	3f28f5c3 	.word	0x3f28f5c3
 8017814:	42c80000 	.word	0x42c80000
 8017818:	08024c59 	.word	0x08024c59
 801781c:	08024c9e 	.word	0x08024c9e
 8017820:	3ea8f5c3 	.word	0x3ea8f5c3
 8017824:	3ecccccd 	.word	0x3ecccccd
 8017828:	08024cdd 	.word	0x08024cdd
 801782c:	08024d11 	.word	0x08024d11
 8017830:	08024d30 	.word	0x08024d30
 8017834:	08024d60 	.word	0x08024d60
    if(!SendingFFT)
 8017838:	f894 6790 	ldrb.w	r6, [r4, #1936]	; 0x790
 801783c:	2e00      	cmp	r6, #0
 801783e:	f040 822f 	bne.w	8017ca0 <MotionSP_MainManager+0x6a4>
  if(MotionSP_Data.FifoEmpty)
 8017842:	4dd0      	ldr	r5, [pc, #832]	; (8017b84 <MotionSP_MainManager+0x588>)
 8017844:	792f      	ldrb	r7, [r5, #4]
 8017846:	2f00      	cmp	r7, #0
 8017848:	d063      	beq.n	8017912 <MotionSP_MainManager+0x316>
    MotionSP_TimeDomainEvalFromCircBuff(&TimeDomainData,
 801784a:	f8df 9368 	ldr.w	r9, [pc, #872]	; 8017bb4 <MotionSP_MainManager+0x5b8>
 801784e:	4bce      	ldr	r3, [pc, #824]	; (8017b88 <MotionSP_MainManager+0x58c>)
 8017850:	f8df 8344 	ldr.w	r8, [pc, #836]	; 8017b98 <MotionSP_MainManager+0x59c>
 8017854:	f899 2002 	ldrb.w	r2, [r9, #2]
                                        (Td_Type_t)MotionSP_Parameters.td_type,
 8017858:	4fcc      	ldr	r7, [pc, #816]	; (8017b8c <MotionSP_MainManager+0x590>)
    MotionSP_Data.FifoEmpty = 0;
 801785a:	712e      	strb	r6, [r5, #4]
    MotionSP_TimeDomainEvalFromCircBuff(&TimeDomainData,
 801785c:	9200      	str	r2, [sp, #0]
 801785e:	4640      	mov	r0, r8
 8017860:	ed93 0a00 	vldr	s0, [r3]
 8017864:	edd3 0a01 	vldr	s1, [r3, #4]
 8017868:	ed93 1a02 	vldr	s2, [r3, #8]
 801786c:	8a22      	ldrh	r2, [r4, #16]
 801786e:	79bb      	ldrb	r3, [r7, #6]
 8017870:	f105 0108 	add.w	r1, r5, #8
 8017874:	f7fb fbbe 	bl	8012ff4 <MotionSP_TimeDomainEvalFromCircBuff>
    MotionSP_TimeDomainAlarm(&sTdAlarm,
 8017878:	f8cd 8000 	str.w	r8, [sp]
 801787c:	f504 63c9 	add.w	r3, r4, #1608	; 0x648
 8017880:	f504 62cc 	add.w	r2, r4, #1632	; 0x660
 8017884:	f504 61cf 	add.w	r1, r4, #1656	; 0x678
 8017888:	f204 60b4 	addw	r0, r4, #1716	; 0x6b4
 801788c:	f7ff fb5e 	bl	8016f4c <MotionSP_TimeDomainAlarm>
  accCircBuffIndexTmp = MotionSP_Data.AccCircBuff.IdPos + (MotionSP_Data.AccCircBuff.Ovf * MotionSP_Data.AccCircBuff.Size);
 8017890:	8929      	ldrh	r1, [r5, #8]
 8017892:	7b2a      	ldrb	r2, [r5, #12]
 8017894:	896b      	ldrh	r3, [r5, #10]
  accCircBuffIndexForFftTmp = accCircBuffIndexForFft + (accCircBuffIndexForFftOvf * MotionSP_Data.AccCircBuff.Size);
 8017896:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8017bb8 <MotionSP_MainManager+0x5bc>
  accCircBuffIndexTmp = MotionSP_Data.AccCircBuff.IdPos + (MotionSP_Data.AccCircBuff.Ovf * MotionSP_Data.AccCircBuff.Size);
 801789a:	fb12 f201 	smulbb	r2, r2, r1
 801789e:	441a      	add	r2, r3
  accCircBuffIndexForFftTmp = accCircBuffIndexForFft + (accCircBuffIndexForFftOvf * MotionSP_Data.AccCircBuff.Size);
 80178a0:	f894 378a 	ldrb.w	r3, [r4, #1930]	; 0x78a
 80178a4:	fb13 f301 	smulbb	r3, r3, r1
 80178a8:	f8b8 1000 	ldrh.w	r1, [r8]
 80178ac:	440b      	add	r3, r1
  if (accCircBuffIndexTmp >= accCircBuffIndexForFftTmp)
 80178ae:	b292      	uxth	r2, r2
 80178b0:	b29b      	uxth	r3, r3
 80178b2:	429a      	cmp	r2, r3
 80178b4:	f0c0 8163 	bcc.w	8017b7e <MotionSP_MainManager+0x582>
    if ((BSP_GetTick() - StartTick) > MotionSP_Parameters.tacq)
 80178b8:	f7f0 f904 	bl	8007ac4 <BSP_GetTick>
 80178bc:	f8d4 3794 	ldr.w	r3, [r4, #1940]	; 0x794
 80178c0:	1ac0      	subs	r0, r0, r3
 80178c2:	893b      	ldrh	r3, [r7, #8]
 80178c4:	4298      	cmp	r0, r3
 80178c6:	f240 8158 	bls.w	8017b7a <MotionSP_MainManager+0x57e>
      disable_FIFO();
 80178ca:	f7ff fe39 	bl	8017540 <disable_FIFO>
      FFT_avg = 1;
 80178ce:	2701      	movs	r7, #1
    MotionSP_fftExecution(FFT_avg);
 80178d0:	4638      	mov	r0, r7
 80178d2:	f7fb fdd1 	bl	8013478 <MotionSP_fftExecution>
    accCircBuffIndexForFftOvf = 0;
 80178d6:	2300      	movs	r3, #0
    accCircBuffIndexForFft += accCircBuffIndexForFftDelta;
 80178d8:	f8b4 2788 	ldrh.w	r2, [r4, #1928]	; 0x788
    accCircBuffIndexForFftOvf = 0;
 80178dc:	f884 378a 	strb.w	r3, [r4, #1930]	; 0x78a
    accCircBuffIndexForFft += accCircBuffIndexForFftDelta;
 80178e0:	f8b8 3000 	ldrh.w	r3, [r8]
 80178e4:	4413      	add	r3, r2
    if (accCircBuffIndexForFft >= MotionSP_Data.AccCircBuff.Size)
 80178e6:	892a      	ldrh	r2, [r5, #8]
    accCircBuffIndexForFft += accCircBuffIndexForFftDelta;
 80178e8:	b29b      	uxth	r3, r3
    if (accCircBuffIndexForFft >= MotionSP_Data.AccCircBuff.Size)
 80178ea:	4293      	cmp	r3, r2
    accCircBuffIndexForFft += accCircBuffIndexForFftDelta;
 80178ec:	f8a8 3000 	strh.w	r3, [r8]
    if (accCircBuffIndexForFft >= MotionSP_Data.AccCircBuff.Size)
 80178f0:	d307      	bcc.n	8017902 <MotionSP_MainManager+0x306>
      accCircBuffIndexForFft -= MotionSP_Data.AccCircBuff.Size;
 80178f2:	1a9b      	subs	r3, r3, r2
 80178f4:	f8a8 3000 	strh.w	r3, [r8]
      if (!MotionSP_Data.AccCircBuff.Ovf)
 80178f8:	7b2b      	ldrb	r3, [r5, #12]
 80178fa:	b913      	cbnz	r3, 8017902 <MotionSP_MainManager+0x306>
        accCircBuffIndexForFftOvf = 1;
 80178fc:	2301      	movs	r3, #1
 80178fe:	f884 378a 	strb.w	r3, [r4, #1930]	; 0x78a
    MotionSP_Data.AccCircBuff.Ovf = 0;
 8017902:	2300      	movs	r3, #0
 8017904:	732b      	strb	r3, [r5, #12]
    if (RestartFlag)
 8017906:	f899 3002 	ldrb.w	r3, [r9, #2]
 801790a:	b113      	cbz	r3, 8017912 <MotionSP_MainManager+0x316>
      RestartFlag = 0;
 801790c:	2300      	movs	r3, #0
 801790e:	f889 3002 	strb.w	r3, [r9, #2]
      if( (FFT_Amplitude) &&
 8017912:	f8d4 379c 	ldr.w	r3, [r4, #1948]	; 0x79c
 8017916:	2b00      	cmp	r3, #0
 8017918:	d06f      	beq.n	80179fa <MotionSP_MainManager+0x3fe>
 801791a:	2f00      	cmp	r7, #0
 801791c:	d06d      	beq.n	80179fa <MotionSP_MainManager+0x3fe>
        PrepareTotalBuffToSending(&AccMagResults, AccMagResults.MagSize);
 801791e:	4d9c      	ldr	r5, [pc, #624]	; (8017b90 <MotionSP_MainManager+0x594>)
 8017920:	f8b5 8000 	ldrh.w	r8, [r5]
  TotalSize= 2 /* nSample */ + 1 /* nComponents */ + 4 /*  Frequency Steps */ + ((3 * ActualMagSize) * 4) /* Samples */;
 8017924:	eb08 0048 	add.w	r0, r8, r8, lsl #1
 8017928:	0080      	lsls	r0, r0, #2
 801792a:	3007      	adds	r0, #7
  TotalBuffToSending=(uint8_t *)malloc(TotalSize);
 801792c:	b280      	uxth	r0, r0
 801792e:	f004 fc61 	bl	801c1f4 <malloc>
 8017932:	f8c4 078c 	str.w	r0, [r4, #1932]	; 0x78c
  if(TotalBuffToSending == NULL)
 8017936:	b908      	cbnz	r0, 801793c <MotionSP_MainManager+0x340>
    Error_Handler();
 8017938:	f001 f965 	bl	8018c06 <Error_Handler>
  MemoryIsAlloc= 1;
 801793c:	2301      	movs	r3, #1
 801793e:	f884 378b 	strb.w	r3, [r4, #1931]	; 0x78b
  STORE_LE_16(TotalBuffToSending  ,ActualMagSize);
 8017942:	f8d4 378c 	ldr.w	r3, [r4, #1932]	; 0x78c
 8017946:	f883 8000 	strb.w	r8, [r3]
 801794a:	f8d4 378c 	ldr.w	r3, [r4, #1932]	; 0x78c
 801794e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8017952:	705a      	strb	r2, [r3, #1]
  TotalBuffToSending[2]= 3;
 8017954:	f8d4 378c 	ldr.w	r3, [r4, #1932]	; 0x78c
 8017958:	2203      	movs	r2, #3
 801795a:	709a      	strb	r2, [r3, #2]
  STORE_LE_32(&TotalBuffToSending[BuffPos], *TempBuff);
 801795c:	f8d4 278c 	ldr.w	r2, [r4, #1932]	; 0x78c
 8017960:	686b      	ldr	r3, [r5, #4]
 8017962:	70d3      	strb	r3, [r2, #3]
 8017964:	f8d4 278c 	ldr.w	r2, [r4, #1932]	; 0x78c
 8017968:	0a19      	lsrs	r1, r3, #8
 801796a:	7111      	strb	r1, [r2, #4]
 801796c:	ea4f 0e88 	mov.w	lr, r8, lsl #2
 8017970:	0c19      	lsrs	r1, r3, #16
 8017972:	0e1b      	lsrs	r3, r3, #24
 8017974:	7193      	strb	r3, [r2, #6]
 8017976:	7151      	strb	r1, [r2, #5]
 8017978:	f10e 0c07 	add.w	ip, lr, #7
  BuffPos += 4;
 801797c:	2307      	movs	r3, #7
  for(int i=0; i<ActualMagSize; i++)
 801797e:	4563      	cmp	r3, ip
 8017980:	f040 811c 	bne.w	8017bbc <MotionSP_MainManager+0x5c0>
 8017984:	4660      	mov	r0, ip
  for(int i=0; i<ActualMagSize; i++)
 8017986:	2300      	movs	r3, #0
 8017988:	4598      	cmp	r8, r3
 801798a:	f300 8134 	bgt.w	8017bf6 <MotionSP_MainManager+0x5fa>
 801798e:	44f4      	add	ip, lr
  for(int i=0; i<ActualMagSize; i++)
 8017990:	2300      	movs	r3, #0
 8017992:	4598      	cmp	r8, r3
 8017994:	f300 8150 	bgt.w	8017c38 <MotionSP_MainManager+0x63c>
        PREDMNT1_PRINTF("\r\nSending Time Domain to ST BLE Sensor app\r\n");
 8017998:	497e      	ldr	r1, [pc, #504]	; (8017b94 <MotionSP_MainManager+0x598>)
 801799a:	a812      	add	r0, sp, #72	; 0x48
 801799c:	f005 fa3c 	bl	801ce18 <strcpy>
 80179a0:	212c      	movs	r1, #44	; 0x2c
 80179a2:	a812      	add	r0, sp, #72	; 0x48
 80179a4:	f002 f802 	bl	80199ac <CDC_Fill_Buffer>
        AccPeak.x= TimeDomainData.AccPeak.AXIS_X;
 80179a8:	4b7b      	ldr	r3, [pc, #492]	; (8017b98 <MotionSP_MainManager+0x59c>)
 80179aa:	ed93 0a00 	vldr	s0, [r3]
        AccPeak.y= TimeDomainData.AccPeak.AXIS_Y;
 80179ae:	edd3 0a01 	vldr	s1, [r3, #4]
        AccPeak.z= TimeDomainData.AccPeak.AXIS_Z;
 80179b2:	ed93 1a02 	vldr	s2, [r3, #8]
        SpeedRms.x= TimeDomainData.SpeedRms.AXIS_X;
 80179b6:	edd3 1a06 	vldr	s3, [r3, #24]
        SpeedRms.y= TimeDomainData.SpeedRms.AXIS_Y;
 80179ba:	ed93 2a07 	vldr	s4, [r3, #28]
        SpeedRms.z= TimeDomainData.SpeedRms.AXIS_Z;
 80179be:	edd3 2a08 	vldr	s5, [r3, #32]
        AccPeak.x= TimeDomainData.AccPeak.AXIS_X;
 80179c2:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
        AccPeak.y= TimeDomainData.AccPeak.AXIS_Y;
 80179c6:	edcd 0a0d 	vstr	s1, [sp, #52]	; 0x34
        AccPeak.z= TimeDomainData.AccPeak.AXIS_Z;
 80179ca:	ed8d 1a0e 	vstr	s2, [sp, #56]	; 0x38
        SpeedRms.x= TimeDomainData.SpeedRms.AXIS_X;
 80179ce:	edcd 1a0f 	vstr	s3, [sp, #60]	; 0x3c
        SpeedRms.y= TimeDomainData.SpeedRms.AXIS_Y;
 80179d2:	ed8d 2a10 	vstr	s4, [sp, #64]	; 0x40
        SpeedRms.z= TimeDomainData.SpeedRms.AXIS_Z;
 80179d6:	edcd 2a11 	vstr	s5, [sp, #68]	; 0x44
        BLE_TimeDomainUpdate(AccPeak, SpeedRms);
 80179da:	f7fb f8db 	bl	8012b94 <BLE_TimeDomainUpdate>
        PREDMNT1_PRINTF("Sending FFT Amplitude to ST BLE Sensor app\r\n");
 80179de:	496f      	ldr	r1, [pc, #444]	; (8017b9c <MotionSP_MainManager+0x5a0>)
 80179e0:	a812      	add	r0, sp, #72	; 0x48
 80179e2:	f005 fa19 	bl	801ce18 <strcpy>
 80179e6:	212c      	movs	r1, #44	; 0x2c
 80179e8:	a812      	add	r0, sp, #72	; 0x48
 80179ea:	f001 ffdf 	bl	80199ac <CDC_Fill_Buffer>
        SendingFFT= 1;
 80179ee:	2301      	movs	r3, #1
 80179f0:	f884 3790 	strb.w	r3, [r4, #1936]	; 0x790
        CountSendData= 0;
 80179f4:	2300      	movs	r3, #0
 80179f6:	f8a4 37a0 	strh.w	r3, [r4, #1952]	; 0x7a0
      if( (FFT_Alarm) &&
 80179fa:	f8d4 3784 	ldr.w	r3, [r4, #1924]	; 0x784
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	f000 815d 	beq.w	8017cbe <MotionSP_MainManager+0x6c2>
 8017a04:	2f00      	cmp	r7, #0
 8017a06:	f000 815a 	beq.w	8017cbe <MotionSP_MainManager+0x6c2>
        MotionSP_FreqDomainAlarm (&SRAmplitude,
 8017a0a:	4d65      	ldr	r5, [pc, #404]	; (8017ba0 <MotionSP_MainManager+0x5a4>)
                                  MotionSP_Parameters.subrange_num,
 8017a0c:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8017b8c <MotionSP_MainManager+0x590>
        MotionSP_FreqDomainAlarm (&SRAmplitude,
 8017a10:	9501      	str	r5, [sp, #4]
 8017a12:	f105 03ea 	add.w	r3, r5, #234	; 0xea
 8017a16:	9300      	str	r3, [sp, #0]
 8017a18:	f8d4 277c 	ldr.w	r2, [r4, #1916]	; 0x77c
 8017a1c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8017a20:	f8d4 1780 	ldr.w	r1, [r4, #1920]	; 0x780
 8017a24:	485f      	ldr	r0, [pc, #380]	; (8017ba4 <MotionSP_MainManager+0x5a8>)
 8017a26:	f7ff fca7 	bl	8017378 <MotionSP_FreqDomainAlarm>
  AlarmSpeedStatus.STATUS_AXIS_X= (BLE_Manager_FFTAlarmSpeedStatusAlarmType_t)sTdAlarm.RMS_STATUS_AXIS_X;
 8017a2a:	f894 36b4 	ldrb.w	r3, [r4, #1716]	; 0x6b4
 8017a2e:	f88d 300c 	strb.w	r3, [sp, #12]
  SpeedRmsValue.x= sTimeDomainVal.SpeedRms.AXIS_X;
 8017a32:	f1a5 0742 	sub.w	r7, r5, #66	; 0x42
  AlarmSpeedStatus.STATUS_AXIS_Y= (BLE_Manager_FFTAlarmSpeedStatusAlarmType_t)sTdAlarm.RMS_STATUS_AXIS_Y;
 8017a36:	f894 36b5 	ldrb.w	r3, [r4, #1717]	; 0x6b5
 8017a3a:	f88d 300d 	strb.w	r3, [sp, #13]
  AlarmSpeedStatus.STATUS_AXIS_Z= (BLE_Manager_FFTAlarmSpeedStatusAlarmType_t)sTdAlarm.RMS_STATUS_AXIS_Z;
 8017a3e:	f894 36b6 	ldrb.w	r3, [r4, #1718]	; 0x6b6
 8017a42:	f88d 300e 	strb.w	r3, [sp, #14]
  SpeedRmsValue.x= sTimeDomainVal.SpeedRms.AXIS_X;
 8017a46:	69bb      	ldr	r3, [r7, #24]
 8017a48:	9306      	str	r3, [sp, #24]
  SpeedRmsValue.y= sTimeDomainVal.SpeedRms.AXIS_Y;
 8017a4a:	69fb      	ldr	r3, [r7, #28]
  PREDMNT1_PRINTF("Sending Speed RMS value and status to ST BLE Sensor app\r\n");
 8017a4c:	4956      	ldr	r1, [pc, #344]	; (8017ba8 <MotionSP_MainManager+0x5ac>)
  SpeedRmsValue.y= sTimeDomainVal.SpeedRms.AXIS_Y;
 8017a4e:	9307      	str	r3, [sp, #28]
  PREDMNT1_PRINTF("Sending Speed RMS value and status to ST BLE Sensor app\r\n");
 8017a50:	a812      	add	r0, sp, #72	; 0x48
  SpeedRmsValue.z= sTimeDomainVal.SpeedRms.AXIS_Z;
 8017a52:	6a3b      	ldr	r3, [r7, #32]
 8017a54:	9308      	str	r3, [sp, #32]
  PREDMNT1_PRINTF("Sending Speed RMS value and status to ST BLE Sensor app\r\n");
 8017a56:	f005 f9df 	bl	801ce18 <strcpy>
 8017a5a:	2139      	movs	r1, #57	; 0x39
 8017a5c:	a812      	add	r0, sp, #72	; 0x48
 8017a5e:	f001 ffa5 	bl	80199ac <CDC_Fill_Buffer>
  BLE_FFTAlarmSpeedStatusUpdate(AlarmSpeedStatus, SpeedRmsValue);
 8017a62:	ed9d 0a06 	vldr	s0, [sp, #24]
 8017a66:	eddd 0a07 	vldr	s1, [sp, #28]
 8017a6a:	ed9d 1a08 	vldr	s2, [sp, #32]
 8017a6e:	9803      	ldr	r0, [sp, #12]
 8017a70:	f7f8 fdbe 	bl	80105f0 <BLE_FFTAlarmSpeedStatusUpdate>
  AlarmAccPeakStatus.STATUS_AXIS_X= (BLE_Manager_FFTAlarmAccPeakStatusAlarmType_t)sTdAlarm.PK_STATUS_AXIS_X;
 8017a74:	f894 36b7 	ldrb.w	r3, [r4, #1719]	; 0x6b7
 8017a78:	f88d 3010 	strb.w	r3, [sp, #16]
  AlarmAccPeakStatus.STATUS_AXIS_Y= (BLE_Manager_FFTAlarmAccPeakStatusAlarmType_t)sTdAlarm.PK_STATUS_AXIS_Y;
 8017a7c:	f894 36b8 	ldrb.w	r3, [r4, #1720]	; 0x6b8
 8017a80:	f88d 3011 	strb.w	r3, [sp, #17]
  AlarmAccPeakStatus.STATUS_AXIS_Z= (BLE_Manager_FFTAlarmAccPeakStatusAlarmType_t)sTdAlarm.PK_STATUS_AXIS_Z;
 8017a84:	f894 36b9 	ldrb.w	r3, [r4, #1721]	; 0x6b9
 8017a88:	f88d 3012 	strb.w	r3, [sp, #18]
  AccPeak.x= sTimeDomainVal.AccPeak.AXIS_X;
 8017a8c:	683b      	ldr	r3, [r7, #0]
 8017a8e:	9309      	str	r3, [sp, #36]	; 0x24
  AccPeak.y= sTimeDomainVal.AccPeak.AXIS_Y;
 8017a90:	687b      	ldr	r3, [r7, #4]
  PREDMNT1_PRINTF("Sending Acc Peak value and status to ST BLE Sensor app\r\n");
 8017a92:	4946      	ldr	r1, [pc, #280]	; (8017bac <MotionSP_MainManager+0x5b0>)
  AccPeak.y= sTimeDomainVal.AccPeak.AXIS_Y;
 8017a94:	930a      	str	r3, [sp, #40]	; 0x28
  PREDMNT1_PRINTF("Sending Acc Peak value and status to ST BLE Sensor app\r\n");
 8017a96:	a812      	add	r0, sp, #72	; 0x48
  AccPeak.z= sTimeDomainVal.AccPeak.AXIS_Z;
 8017a98:	68bb      	ldr	r3, [r7, #8]
 8017a9a:	930b      	str	r3, [sp, #44]	; 0x2c
  PREDMNT1_PRINTF("Sending Acc Peak value and status to ST BLE Sensor app\r\n");
 8017a9c:	f005 f9bc 	bl	801ce18 <strcpy>
 8017aa0:	2138      	movs	r1, #56	; 0x38
 8017aa2:	a812      	add	r0, sp, #72	; 0x48
 8017aa4:	f001 ff82 	bl	80199ac <CDC_Fill_Buffer>
  BLE_FFTAlarmAccPeakStatusUpdate(AlarmAccPeakStatus, AccPeak);
 8017aa8:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 8017aac:	eddd 0a0a 	vldr	s1, [sp, #40]	; 0x28
 8017ab0:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
 8017ab4:	9804      	ldr	r0, [sp, #16]
 8017ab6:	f7f8 fcd7 	bl	8010468 <BLE_FFTAlarmAccPeakStatusUpdate>
  Alarm_Type_t TempAlarm_Z= GOOD;
 8017aba:	2300      	movs	r3, #0
  for(int i=0; i<MotionSP_Parameters.subrange_num; i++)
 8017abc:	f8b8 000c 	ldrh.w	r0, [r8, #12]
  Alarm_Type_t TempAlarm_Y= GOOD;
 8017ac0:	461a      	mov	r2, r3
  for(int i=0; i<MotionSP_Parameters.subrange_num; i++)
 8017ac2:	4619      	mov	r1, r3
 8017ac4:	4281      	cmp	r1, r0
 8017ac6:	f2c0 80da 	blt.w	8017c7e <MotionSP_MainManager+0x682>
  AlarmSugrangeStatus.STATUS_AXIS_Z = (BLE_Manager_FFTAlarmSubrangeStatusAlarmType_t)TempAlarm_Z;
 8017aca:	f88d 3016 	strb.w	r3, [sp, #22]
  SendMaxValue.x= AccMagResults.Max.X.value;
 8017ace:	4b30      	ldr	r3, [pc, #192]	; (8017b90 <MotionSP_MainManager+0x594>)
  AlarmSugrangeStatus.STATUS_AXIS_Y = (BLE_Manager_FFTAlarmSubrangeStatusAlarmType_t)TempAlarm_Y;
 8017ad0:	f88d 2015 	strb.w	r2, [sp, #21]
  SendMaxValue.x= AccMagResults.Max.X.value;
 8017ad4:	695a      	ldr	r2, [r3, #20]
 8017ad6:	920c      	str	r2, [sp, #48]	; 0x30
  SendMaxValue.y= AccMagResults.Max.Y.value;
 8017ad8:	69da      	ldr	r2, [r3, #28]
 8017ada:	920d      	str	r2, [sp, #52]	; 0x34
  SendMaxValue.z= AccMagResults.Max.Z.value;
 8017adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017ade:	920e      	str	r2, [sp, #56]	; 0x38
  BinFreqStep = (AcceleroODR.Frequency /2 ) / AccMagResults.MagSize;
 8017ae0:	4a29      	ldr	r2, [pc, #164]	; (8017b88 <MotionSP_MainManager+0x58c>)
  PREDMNT1_PRINTF("Sending the frequency domain threshold status for max Subrange value to ST BLE Sensor app\r\n");
 8017ae2:	4933      	ldr	r1, [pc, #204]	; (8017bb0 <MotionSP_MainManager+0x5b4>)
  BinFreqStep = (AcceleroODR.Frequency /2 ) / AccMagResults.MagSize;
 8017ae4:	ed92 7a00 	vldr	s14, [r2]
 8017ae8:	881a      	ldrh	r2, [r3, #0]
  AlarmSugrangeStatus.STATUS_AXIS_X = (BLE_Manager_FFTAlarmSubrangeStatusAlarmType_t)TempAlarm_X;
 8017aea:	f88d 6014 	strb.w	r6, [sp, #20]
  BinFreqStep = (AcceleroODR.Frequency /2 ) / AccMagResults.MagSize;
 8017aee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017af2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017af6:	ee07 2a90 	vmov	s15, r2
 8017afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  PREDMNT1_PRINTF("Sending the frequency domain threshold status for max Subrange value to ST BLE Sensor app\r\n");
 8017afe:	a812      	add	r0, sp, #72	; 0x48
  BinFreqStep = (AcceleroODR.Frequency /2 ) / AccMagResults.MagSize;
 8017b00:	eec7 6a27 	vdiv.f32	s13, s14, s15
  SendFreqMaxValue.x= AccMagResults.Max.X.loc * BinFreqStep;
 8017b04:	edd3 7a06 	vldr	s15, [r3, #24]
 8017b08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  SendFreqMaxValue.y= AccMagResults.Max.Y.loc * BinFreqStep;
 8017b0c:	edd3 7a08 	vldr	s15, [r3, #32]
  SendFreqMaxValue.x= AccMagResults.Max.X.loc * BinFreqStep;
 8017b10:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017b14:	ed8d 7a0f 	vstr	s14, [sp, #60]	; 0x3c
  SendFreqMaxValue.y= AccMagResults.Max.Y.loc * BinFreqStep;
 8017b18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  SendFreqMaxValue.z= AccMagResults.Max.Z.loc * BinFreqStep;
 8017b1c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8017b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
  SendFreqMaxValue.y= AccMagResults.Max.Y.loc * BinFreqStep;
 8017b24:	ee27 7a26 	vmul.f32	s14, s14, s13
  SendFreqMaxValue.z= AccMagResults.Max.Z.loc * BinFreqStep;
 8017b28:	ee67 7aa6 	vmul.f32	s15, s15, s13
  SendFreqMaxValue.y= AccMagResults.Max.Y.loc * BinFreqStep;
 8017b2c:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
  SendFreqMaxValue.z= AccMagResults.Max.Z.loc * BinFreqStep;
 8017b30:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
  PREDMNT1_PRINTF("Sending the frequency domain threshold status for max Subrange value to ST BLE Sensor app\r\n");
 8017b34:	f005 f970 	bl	801ce18 <strcpy>
 8017b38:	215b      	movs	r1, #91	; 0x5b
 8017b3a:	a812      	add	r0, sp, #72	; 0x48
 8017b3c:	f001 ff36 	bl	80199ac <CDC_Fill_Buffer>
  BLE_FFTAlarmSubrangeStatusUpdate(AlarmSugrangeStatus, SendMaxValue, SendFreqMaxValue);
 8017b40:	eddd 1a0f 	vldr	s3, [sp, #60]	; 0x3c
 8017b44:	ed9d 2a10 	vldr	s4, [sp, #64]	; 0x40
 8017b48:	eddd 2a11 	vldr	s5, [sp, #68]	; 0x44
 8017b4c:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
 8017b50:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
 8017b54:	ed9d 1a0e 	vldr	s2, [sp, #56]	; 0x38
 8017b58:	9805      	ldr	r0, [sp, #20]
 8017b5a:	f7f8 fe0b 	bl	8010774 <BLE_FFTAlarmSubrangeStatusUpdate>
        Reset= 1;
 8017b5e:	2301      	movs	r3, #1
 8017b60:	f884 3aa4 	strb.w	r3, [r4, #2724]	; 0xaa4
      if ((BSP_Error = MotionSP_VibrationAnalysisVariableInit()) != BSP_ERROR_NONE)
 8017b64:	f7ff fb1a 	bl	801719c <MotionSP_VibrationAnalysisVariableInit>
 8017b68:	4606      	mov	r6, r0
 8017b6a:	2800      	cmp	r0, #0
 8017b6c:	f47f ad59 	bne.w	8017622 <MotionSP_MainManager+0x26>
      enable_FIFO();
 8017b70:	f7ff fc7c 	bl	801746c <enable_FIFO>
      Reset= 0;
 8017b74:	f884 6aa4 	strb.w	r6, [r4, #2724]	; 0xaa4
 8017b78:	e553      	b.n	8017622 <MotionSP_MainManager+0x26>
  uint8_t FFT_avg = 0;
 8017b7a:	4637      	mov	r7, r6
 8017b7c:	e6a8      	b.n	80178d0 <MotionSP_MainManager+0x2d4>
 8017b7e:	4637      	mov	r7, r6
 8017b80:	e6c1      	b.n	8017906 <MotionSP_MainManager+0x30a>
 8017b82:	bf00      	nop
 8017b84:	20002df8 	.word	0x20002df8
 8017b88:	20002e7c 	.word	0x20002e7c
 8017b8c:	20002e14 	.word	0x20002e14
 8017b90:	20002e44 	.word	0x20002e44
 8017b94:	08024d7b 	.word	0x08024d7b
 8017b98:	20002e88 	.word	0x20002e88
 8017b9c:	08024da8 	.word	0x08024da8
 8017ba0:	20011bf2 	.word	0x20011bf2
 8017ba4:	2000f1c4 	.word	0x2000f1c4
 8017ba8:	08024dd5 	.word	0x08024dd5
 8017bac:	08024e0f 	.word	0x08024e0f
 8017bb0:	08024e48 	.word	0x08024e48
 8017bb4:	20000504 	.word	0x20000504
 8017bb8:	20002e22 	.word	0x20002e22
    STORE_LE_32(&TotalBuffToSending[BuffPos], *(uint32_t *)&(AccMagResults.Array.X[i]));
 8017bbc:	68a9      	ldr	r1, [r5, #8]
 8017bbe:	f8d4 278c 	ldr.w	r2, [r4, #1932]	; 0x78c
 8017bc2:	1fd8      	subs	r0, r3, #7
 8017bc4:	5809      	ldr	r1, [r1, r0]
 8017bc6:	54d1      	strb	r1, [r2, r3]
 8017bc8:	68a9      	ldr	r1, [r5, #8]
 8017bca:	f8d4 278c 	ldr.w	r2, [r4, #1932]	; 0x78c
 8017bce:	5809      	ldr	r1, [r1, r0]
 8017bd0:	441a      	add	r2, r3
 8017bd2:	0a09      	lsrs	r1, r1, #8
 8017bd4:	7051      	strb	r1, [r2, #1]
 8017bd6:	68a9      	ldr	r1, [r5, #8]
 8017bd8:	f8d4 278c 	ldr.w	r2, [r4, #1932]	; 0x78c
 8017bdc:	5809      	ldr	r1, [r1, r0]
 8017bde:	441a      	add	r2, r3
 8017be0:	0c09      	lsrs	r1, r1, #16
 8017be2:	7091      	strb	r1, [r2, #2]
 8017be4:	68a9      	ldr	r1, [r5, #8]
 8017be6:	f8d4 278c 	ldr.w	r2, [r4, #1932]	; 0x78c
 8017bea:	5809      	ldr	r1, [r1, r0]
 8017bec:	441a      	add	r2, r3
 8017bee:	0e09      	lsrs	r1, r1, #24
 8017bf0:	70d1      	strb	r1, [r2, #3]
    BuffPos += 4;
 8017bf2:	3304      	adds	r3, #4
  for(int i=0; i<ActualMagSize; i++)
 8017bf4:	e6c3      	b.n	801797e <MotionSP_MainManager+0x382>
    STORE_LE_32(&TotalBuffToSending[BuffPos], *(uint32_t *)&(AccMagResults.Array.Y[i]));
 8017bf6:	68e9      	ldr	r1, [r5, #12]
 8017bf8:	f8d4 278c 	ldr.w	r2, [r4, #1932]	; 0x78c
 8017bfc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8017c00:	5411      	strb	r1, [r2, r0]
 8017c02:	68e9      	ldr	r1, [r5, #12]
 8017c04:	f8d4 278c 	ldr.w	r2, [r4, #1932]	; 0x78c
 8017c08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8017c0c:	4402      	add	r2, r0
 8017c0e:	0a09      	lsrs	r1, r1, #8
 8017c10:	7051      	strb	r1, [r2, #1]
 8017c12:	68e9      	ldr	r1, [r5, #12]
 8017c14:	f8d4 278c 	ldr.w	r2, [r4, #1932]	; 0x78c
 8017c18:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8017c1c:	4402      	add	r2, r0
 8017c1e:	0c09      	lsrs	r1, r1, #16
 8017c20:	7091      	strb	r1, [r2, #2]
 8017c22:	68e9      	ldr	r1, [r5, #12]
 8017c24:	f8d4 278c 	ldr.w	r2, [r4, #1932]	; 0x78c
 8017c28:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8017c2c:	4402      	add	r2, r0
 8017c2e:	0e09      	lsrs	r1, r1, #24
 8017c30:	70d1      	strb	r1, [r2, #3]
    BuffPos += 4;
 8017c32:	3004      	adds	r0, #4
  for(int i=0; i<ActualMagSize; i++)
 8017c34:	3301      	adds	r3, #1
 8017c36:	e6a7      	b.n	8017988 <MotionSP_MainManager+0x38c>
    STORE_LE_32(&TotalBuffToSending[BuffPos], *(uint32_t *)&(AccMagResults.Array.Z[i]));
 8017c38:	6929      	ldr	r1, [r5, #16]
 8017c3a:	f8d4 278c 	ldr.w	r2, [r4, #1932]	; 0x78c
 8017c3e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8017c42:	f802 100c 	strb.w	r1, [r2, ip]
 8017c46:	6929      	ldr	r1, [r5, #16]
 8017c48:	f8d4 278c 	ldr.w	r2, [r4, #1932]	; 0x78c
 8017c4c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8017c50:	4462      	add	r2, ip
 8017c52:	0a09      	lsrs	r1, r1, #8
 8017c54:	7051      	strb	r1, [r2, #1]
 8017c56:	6929      	ldr	r1, [r5, #16]
 8017c58:	f8d4 278c 	ldr.w	r2, [r4, #1932]	; 0x78c
 8017c5c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8017c60:	4462      	add	r2, ip
 8017c62:	0c09      	lsrs	r1, r1, #16
 8017c64:	7091      	strb	r1, [r2, #2]
 8017c66:	6929      	ldr	r1, [r5, #16]
 8017c68:	f8d4 278c 	ldr.w	r2, [r4, #1932]	; 0x78c
 8017c6c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8017c70:	4462      	add	r2, ip
 8017c72:	0e09      	lsrs	r1, r1, #24
 8017c74:	70d1      	strb	r1, [r2, #3]
    BuffPos += 4;
 8017c76:	f10c 0c04 	add.w	ip, ip, #4
  for(int i=0; i<ActualMagSize; i++)
 8017c7a:	3301      	adds	r3, #1
 8017c7c:	e689      	b.n	8017992 <MotionSP_MainManager+0x396>
    TempAlarm_X= ALARM_MAX(TempAlarm_X, THR_Fft_Alarms.STATUS_AXIS_X[i]);
 8017c7e:	f815 7b01 	ldrb.w	r7, [r5], #1
 8017c82:	42be      	cmp	r6, r7
 8017c84:	bf38      	it	cc
 8017c86:	463e      	movcc	r6, r7
    TempAlarm_Y= ALARM_MAX(TempAlarm_Y, THR_Fft_Alarms.STATUS_AXIS_Y[i]);
 8017c88:	f895 703f 	ldrb.w	r7, [r5, #63]	; 0x3f
 8017c8c:	42ba      	cmp	r2, r7
 8017c8e:	bf38      	it	cc
 8017c90:	463a      	movcc	r2, r7
    TempAlarm_Z= ALARM_MAX(TempAlarm_Z, THR_Fft_Alarms.STATUS_AXIS_Z[i]);
 8017c92:	f895 707f 	ldrb.w	r7, [r5, #127]	; 0x7f
 8017c96:	42bb      	cmp	r3, r7
 8017c98:	bf38      	it	cc
 8017c9a:	463b      	movcc	r3, r7
  for(int i=0; i<MotionSP_Parameters.subrange_num; i++)
 8017c9c:	3101      	adds	r1, #1
 8017c9e:	e711      	b.n	8017ac4 <MotionSP_MainManager+0x4c8>
      BLE_FFTAmplitudeUpdate(TotalBuffToSending, AccMagResults.MagSize, &SendingFFT, &CountSendData);
 8017ca0:	490a      	ldr	r1, [pc, #40]	; (8017ccc <MotionSP_MainManager+0x6d0>)
 8017ca2:	f8d4 078c 	ldr.w	r0, [r4, #1932]	; 0x78c
 8017ca6:	8809      	ldrh	r1, [r1, #0]
 8017ca8:	f504 63f4 	add.w	r3, r4, #1952	; 0x7a0
 8017cac:	f504 62f2 	add.w	r2, r4, #1936	; 0x790
 8017cb0:	f7f8 fe60 	bl	8010974 <BLE_FFTAmplitudeUpdate>
      if(!SendingFFT)
 8017cb4:	f894 3790 	ldrb.w	r3, [r4, #1936]	; 0x790
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	f43f af50 	beq.w	8017b5e <MotionSP_MainManager+0x562>
    if(Reset)
 8017cbe:	f894 3aa4 	ldrb.w	r3, [r4, #2724]	; 0xaa4
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	f43f acac 	beq.w	8017620 <MotionSP_MainManager+0x24>
 8017cc8:	e74c      	b.n	8017b64 <MotionSP_MainManager+0x568>
 8017cca:	bf00      	nop
 8017ccc:	20002e44 	.word	0x20002e44

08017cd0 <GetPage>:
  */
static uint32_t GetPage(uint32_t Addr)
{
  uint32_t page = 0;
  
  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE)) {
 8017cd0:	4b0b      	ldr	r3, [pc, #44]	; (8017d00 <GetPage+0x30>)
 8017cd2:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8017cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017cda:	b291      	uxth	r1, r2
 8017cdc:	4299      	cmp	r1, r3
 8017cde:	d009      	beq.n	8017cf4 <GetPage+0x24>
 8017ce0:	4b08      	ldr	r3, [pc, #32]	; (8017d04 <GetPage+0x34>)
 8017ce2:	ea03 2342 	and.w	r3, r3, r2, lsl #9
 8017ce6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8017cea:	4283      	cmp	r3, r0
 8017cec:	d805      	bhi.n	8017cfa <GetPage+0x2a>
    /* Bank 1 */
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
  } else {
    /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8017cee:	1ac0      	subs	r0, r0, r3
 8017cf0:	0b00      	lsrs	r0, r0, #12
 8017cf2:	4770      	bx	lr
  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE)) {
 8017cf4:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 8017cf8:	e7f9      	b.n	8017cee <GetPage+0x1e>
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8017cfa:	f44f 7080 	mov.w	r0, #256	; 0x100
  }
  
  return page;
}
 8017cfe:	4770      	bx	lr
 8017d00:	1fff7000 	.word	0x1fff7000
 8017d04:	01fffe00 	.word	0x01fffe00

08017d08 <CheckBootLoaderCompliance>:
{ 
 8017d08:	b530      	push	{r4, r5, lr}
 8017d0a:	b0c3      	sub	sp, #268	; 0x10c
  OTA_PRINTF("Testing BootLoaderCompliance:\r\n");
 8017d0c:	4938      	ldr	r1, [pc, #224]	; (8017df0 <CheckBootLoaderCompliance+0xe8>)
  OTA_PRINTF("\tVersion  %ld.%ld.%ld\r\n",
 8017d0e:	4d39      	ldr	r5, [pc, #228]	; (8017df4 <CheckBootLoaderCompliance+0xec>)
  OTA_PRINTF("Testing BootLoaderCompliance:\r\n");
 8017d10:	a802      	add	r0, sp, #8
 8017d12:	f005 f881 	bl	801ce18 <strcpy>
 8017d16:	211f      	movs	r1, #31
 8017d18:	a802      	add	r0, sp, #8
 8017d1a:	f001 fe47 	bl	80199ac <CDC_Fill_Buffer>
  OTA_PRINTF("\tVersion  %ld.%ld.%ld\r\n",
 8017d1e:	682a      	ldr	r2, [r5, #0]
 8017d20:	4935      	ldr	r1, [pc, #212]	; (8017df8 <CheckBootLoaderCompliance+0xf0>)
 8017d22:	b2d3      	uxtb	r3, r2
 8017d24:	9300      	str	r3, [sp, #0]
 8017d26:	a802      	add	r0, sp, #8
 8017d28:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8017d2c:	0c12      	lsrs	r2, r2, #16
 8017d2e:	f005 f803 	bl	801cd38 <siprintf>
 8017d32:	4601      	mov	r1, r0
 8017d34:	a802      	add	r0, sp, #8
 8017d36:	f001 fe39 	bl	80199ac <CDC_Fill_Buffer>
  if((( BootLoaderFeatures->Version>>16      )!=BL_VERSION_MAJOR) |
 8017d3a:	6828      	ldr	r0, [r5, #0]
      ((BootLoaderFeatures->Version     &0xFF)!=BL_VERSION_PATCH)) {
 8017d3c:	ea40 2310 	orr.w	r3, r0, r0, lsr #8
 8017d40:	b2db      	uxtb	r3, r3
  if((( BootLoaderFeatures->Version>>16      )!=BL_VERSION_MAJOR) |
 8017d42:	b923      	cbnz	r3, 8017d4e <CheckBootLoaderCompliance+0x46>
 8017d44:	0c00      	lsrs	r0, r0, #16
 8017d46:	1e84      	subs	r4, r0, #2
 8017d48:	bf18      	it	ne
 8017d4a:	2401      	movne	r4, #1
 8017d4c:	b15c      	cbz	r4, 8017d66 <CheckBootLoaderCompliance+0x5e>
    OTA_PRINTF("\tBL Version  Ko\r\n");
 8017d4e:	492b      	ldr	r1, [pc, #172]	; (8017dfc <CheckBootLoaderCompliance+0xf4>)
 8017d50:	a802      	add	r0, sp, #8
 8017d52:	f005 f861 	bl	801ce18 <strcpy>
 8017d56:	2111      	movs	r1, #17
 8017d58:	a802      	add	r0, sp, #8
 8017d5a:	f001 fe27 	bl	80199ac <CDC_Fill_Buffer>
    return 0;
 8017d5e:	2400      	movs	r4, #0
}
 8017d60:	4620      	mov	r0, r4
 8017d62:	b043      	add	sp, #268	; 0x10c
 8017d64:	bd30      	pop	{r4, r5, pc}
    OTA_PRINTF("\tBL Version  Ok\r\n");
 8017d66:	4926      	ldr	r1, [pc, #152]	; (8017e00 <CheckBootLoaderCompliance+0xf8>)
 8017d68:	a802      	add	r0, sp, #8
 8017d6a:	f005 f855 	bl	801ce18 <strcpy>
 8017d6e:	2111      	movs	r1, #17
 8017d70:	a802      	add	r0, sp, #8
 8017d72:	f001 fe1b 	bl	80199ac <CDC_Fill_Buffer>
  if(BootLoaderFeatures->MagicNum==OTA_MAGIC_NUM) {
 8017d76:	686a      	ldr	r2, [r5, #4]
 8017d78:	4b22      	ldr	r3, [pc, #136]	; (8017e04 <CheckBootLoaderCompliance+0xfc>)
 8017d7a:	429a      	cmp	r2, r3
 8017d7c:	d116      	bne.n	8017dac <CheckBootLoaderCompliance+0xa4>
    OTA_PRINTF("\tMagicNum    OK\r\n");
 8017d7e:	4922      	ldr	r1, [pc, #136]	; (8017e08 <CheckBootLoaderCompliance+0x100>)
 8017d80:	a802      	add	r0, sp, #8
 8017d82:	f005 f849 	bl	801ce18 <strcpy>
 8017d86:	2111      	movs	r1, #17
 8017d88:	a802      	add	r0, sp, #8
 8017d8a:	f001 fe0f 	bl	80199ac <CDC_Fill_Buffer>
  OTA_PRINTF("\tMaxSize  0x%lx\r\n",BootLoaderFeatures->OTAMaxSize);
 8017d8e:	692a      	ldr	r2, [r5, #16]
 8017d90:	491e      	ldr	r1, [pc, #120]	; (8017e0c <CheckBootLoaderCompliance+0x104>)
 8017d92:	a802      	add	r0, sp, #8
 8017d94:	f004 ffd0 	bl	801cd38 <siprintf>
 8017d98:	4601      	mov	r1, r0
 8017d9a:	a802      	add	r0, sp, #8
 8017d9c:	f001 fe06 	bl	80199ac <CDC_Fill_Buffer>
  if(BootLoaderFeatures->OTAStartAdd==(OTA_ADDRESS_START-16)) {
 8017da0:	68ab      	ldr	r3, [r5, #8]
 8017da2:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8017da6:	d00a      	beq.n	8017dbe <CheckBootLoaderCompliance+0xb6>
    OTA_PRINTF("\tOTAStartAdd KO\r\n");
 8017da8:	4919      	ldr	r1, [pc, #100]	; (8017e10 <CheckBootLoaderCompliance+0x108>)
 8017daa:	e000      	b.n	8017dae <CheckBootLoaderCompliance+0xa6>
    OTA_PRINTF("\tMagicNum    KO\r\n");
 8017dac:	4919      	ldr	r1, [pc, #100]	; (8017e14 <CheckBootLoaderCompliance+0x10c>)
    OTA_PRINTF("\tOTADoneAdd  KO\r\n");
 8017dae:	a802      	add	r0, sp, #8
 8017db0:	f005 f832 	bl	801ce18 <strcpy>
 8017db4:	2111      	movs	r1, #17
 8017db6:	a802      	add	r0, sp, #8
 8017db8:	f001 fdf8 	bl	80199ac <CDC_Fill_Buffer>
    return 0;
 8017dbc:	e7d0      	b.n	8017d60 <CheckBootLoaderCompliance+0x58>
    OTA_PRINTF("\tOTAStartAdd OK\r\n");
 8017dbe:	4916      	ldr	r1, [pc, #88]	; (8017e18 <CheckBootLoaderCompliance+0x110>)
 8017dc0:	a802      	add	r0, sp, #8
 8017dc2:	f005 f829 	bl	801ce18 <strcpy>
 8017dc6:	2111      	movs	r1, #17
 8017dc8:	a802      	add	r0, sp, #8
 8017dca:	f001 fdef 	bl	80199ac <CDC_Fill_Buffer>
  if(BootLoaderFeatures->OTADoneAdd==OTA_MAGIC_DONE_NUM_POS) {
 8017dce:	68ea      	ldr	r2, [r5, #12]
 8017dd0:	4b12      	ldr	r3, [pc, #72]	; (8017e1c <CheckBootLoaderCompliance+0x114>)
 8017dd2:	429a      	cmp	r2, r3
 8017dd4:	d001      	beq.n	8017dda <CheckBootLoaderCompliance+0xd2>
    OTA_PRINTF("\tOTADoneAdd  KO\r\n");
 8017dd6:	4912      	ldr	r1, [pc, #72]	; (8017e20 <CheckBootLoaderCompliance+0x118>)
 8017dd8:	e7e9      	b.n	8017dae <CheckBootLoaderCompliance+0xa6>
    OTA_PRINTF("\tOTADoneAdd  OK\r\n");
 8017dda:	4912      	ldr	r1, [pc, #72]	; (8017e24 <CheckBootLoaderCompliance+0x11c>)
 8017ddc:	a802      	add	r0, sp, #8
 8017dde:	f005 f81b 	bl	801ce18 <strcpy>
 8017de2:	2111      	movs	r1, #17
 8017de4:	a802      	add	r0, sp, #8
 8017de6:	f001 fde1 	bl	80199ac <CDC_Fill_Buffer>
  return 1;
 8017dea:	2401      	movs	r4, #1
 8017dec:	e7b8      	b.n	8017d60 <CheckBootLoaderCompliance+0x58>
 8017dee:	bf00      	nop
 8017df0:	08024ea4 	.word	0x08024ea4
 8017df4:	08003f00 	.word	0x08003f00
 8017df8:	08024ec4 	.word	0x08024ec4
 8017dfc:	08024edc 	.word	0x08024edc
 8017e00:	08024eee 	.word	0x08024eee
 8017e04:	deadbeef 	.word	0xdeadbeef
 8017e08:	08024f00 	.word	0x08024f00
 8017e0c:	08024f12 	.word	0x08024f12
 8017e10:	08024f48 	.word	0x08024f48
 8017e14:	08024f24 	.word	0x08024f24
 8017e18:	08024f36 	.word	0x08024f36
 8017e1c:	08100008 	.word	0x08100008
 8017e20:	08024f6c 	.word	0x08024f6c
 8017e24:	08024f5a 	.word	0x08024f5a

08017e28 <UpdateFWBlueMS>:
{
 8017e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(data_length>(SizeOfUpdateBlueFW)){
 8017e2c:	4c59      	ldr	r4, [pc, #356]	; (8017f94 <UpdateFWBlueMS+0x16c>)
{
 8017e2e:	4698      	mov	r8, r3
  if(data_length>(SizeOfUpdateBlueFW)){
 8017e30:	6823      	ldr	r3, [r4, #0]
 8017e32:	429a      	cmp	r2, r3
{
 8017e34:	b0cd      	sub	sp, #308	; 0x134
 8017e36:	4606      	mov	r6, r0
 8017e38:	4689      	mov	r9, r1
 8017e3a:	4615      	mov	r5, r2
  if(data_length>(SizeOfUpdateBlueFW)){
 8017e3c:	d90f      	bls.n	8017e5e <UpdateFWBlueMS+0x36>
    OTA_PRINTF("OTA something wrong data_length=%ld RemSizeOfUpdate=%ld....\r\nPlease Try again\r\n",data_length,(SizeOfUpdateBlueFW));
 8017e3e:	4956      	ldr	r1, [pc, #344]	; (8017f98 <UpdateFWBlueMS+0x170>)
 8017e40:	a80c      	add	r0, sp, #48	; 0x30
 8017e42:	f004 ff79 	bl	801cd38 <siprintf>
 8017e46:	4601      	mov	r1, r0
 8017e48:	a80c      	add	r0, sp, #48	; 0x30
 8017e4a:	f001 fdaf 	bl	80199ac <CDC_Fill_Buffer>
    *SizeOfUpdate=0;
 8017e4e:	2300      	movs	r3, #0
 8017e50:	6033      	str	r3, [r6, #0]
    ReturnValue = -1;
 8017e52:	f04f 34ff 	mov.w	r4, #4294967295
}
 8017e56:	4620      	mov	r0, r4
 8017e58:	b04d      	add	sp, #308	; 0x134
 8017e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    HAL_FLASH_Unlock();
 8017e5e:	f7f2 f957 	bl	800a110 <HAL_FLASH_Unlock>
      if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,ValueToWrite)==HAL_OK) {
 8017e62:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8017fb0 <UpdateFWBlueMS+0x188>
    for(Counter=0;Counter<data_length;Counter+=8) {
 8017e66:	2700      	movs	r7, #0
      memcpy((uint8_t*) &ValueToWrite,att_data+Counter,data_length-Counter+1);
 8017e68:	f105 0b01 	add.w	fp, r5, #1
    for(Counter=0;Counter<data_length;Counter+=8) {
 8017e6c:	42af      	cmp	r7, r5
 8017e6e:	db0a      	blt.n	8017e86 <UpdateFWBlueMS+0x5e>
    *SizeOfUpdate -= data_length;
 8017e70:	6833      	ldr	r3, [r6, #0]
    SizeOfUpdateBlueFW-=data_length;
 8017e72:	6821      	ldr	r1, [r4, #0]
    *SizeOfUpdate -= data_length;
 8017e74:	1b5b      	subs	r3, r3, r5
    SizeOfUpdateBlueFW-=data_length;
 8017e76:	1b4d      	subs	r5, r1, r5
    *SizeOfUpdate -= data_length;
 8017e78:	6033      	str	r3, [r6, #0]
    SizeOfUpdateBlueFW-=data_length;
 8017e7a:	6025      	str	r5, [r4, #0]
    if(SizeOfUpdateBlueFW==0) {
 8017e7c:	b1d5      	cbz	r5, 8017eb4 <UpdateFWBlueMS+0x8c>
  int8_t ReturnValue=0;
 8017e7e:	2400      	movs	r4, #0
    HAL_FLASH_Lock();
 8017e80:	f7f2 f958 	bl	800a134 <HAL_FLASH_Lock>
 8017e84:	e7e7      	b.n	8017e56 <UpdateFWBlueMS+0x2e>
      memcpy((uint8_t*) &ValueToWrite,att_data+Counter,data_length-Counter+1);
 8017e86:	ebab 0207 	sub.w	r2, fp, r7
 8017e8a:	eb09 0107 	add.w	r1, r9, r7
 8017e8e:	4668      	mov	r0, sp
 8017e90:	f004 f9c0 	bl	801c214 <memcpy>
      if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,ValueToWrite)==HAL_OK) {
 8017e94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017e98:	f8da 1000 	ldr.w	r1, [sl]
 8017e9c:	2000      	movs	r0, #0
 8017e9e:	f7f2 f97f 	bl	800a1a0 <HAL_FLASH_Program>
 8017ea2:	b930      	cbnz	r0, 8017eb2 <UpdateFWBlueMS+0x8a>
       Address+=8;
 8017ea4:	f8da 3000 	ldr.w	r3, [sl]
 8017ea8:	3308      	adds	r3, #8
 8017eaa:	f8ca 3000 	str.w	r3, [sl]
    for(Counter=0;Counter<data_length;Counter+=8) {
 8017eae:	3708      	adds	r7, #8
 8017eb0:	e7dc      	b.n	8017e6c <UpdateFWBlueMS+0x44>
        OTA_ERROR_FUNCTION();
 8017eb2:	e7fe      	b.n	8017eb2 <UpdateFWBlueMS+0x8a>
      OTA_PRINTF("OTA Update saved\r\n");
 8017eb4:	4939      	ldr	r1, [pc, #228]	; (8017f9c <UpdateFWBlueMS+0x174>)
 8017eb6:	a80c      	add	r0, sp, #48	; 0x30
 8017eb8:	f004 ffae 	bl	801ce18 <strcpy>
 8017ebc:	2112      	movs	r1, #18
 8017ebe:	a80c      	add	r0, sp, #48	; 0x30
 8017ec0:	f001 fd74 	bl	80199ac <CDC_Fill_Buffer>
      if(WriteMagicNum) {
 8017ec4:	f1b8 0f00 	cmp.w	r8, #0
 8017ec8:	d0d9      	beq.n	8017e7e <UpdateFWBlueMS+0x56>
        if(AspecteduwCRCValue) {
 8017eca:	68a3      	ldr	r3, [r4, #8]
 8017ecc:	b36b      	cbz	r3, 8017f2a <UpdateFWBlueMS+0x102>
          CrcHandle.Instance = CRC;
 8017ece:	4b34      	ldr	r3, [pc, #208]	; (8017fa0 <UpdateFWBlueMS+0x178>)
 8017ed0:	9303      	str	r3, [sp, #12]
          if(HAL_CRC_GetState(&CrcHandle) != HAL_CRC_STATE_RESET) {
 8017ed2:	a803      	add	r0, sp, #12
          CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_WORDS;
 8017ed4:	2303      	movs	r3, #3
          CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8017ed6:	e9cd 5508 	strd	r5, r5, [sp, #32]
          CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_ENABLE;
 8017eda:	f8ad 5010 	strh.w	r5, [sp, #16]
          CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_WORDS;
 8017ede:	930b      	str	r3, [sp, #44]	; 0x2c
          if(HAL_CRC_GetState(&CrcHandle) != HAL_CRC_STATE_RESET) {
 8017ee0:	f7f1 fc0b 	bl	80096fa <HAL_CRC_GetState>
 8017ee4:	b110      	cbz	r0, 8017eec <UpdateFWBlueMS+0xc4>
            HAL_CRC_DeInit(&CrcHandle);
 8017ee6:	a803      	add	r0, sp, #12
 8017ee8:	f7f1 fbca 	bl	8009680 <HAL_CRC_DeInit>
          if (HAL_CRC_Init(&CrcHandle) != HAL_OK) {
 8017eec:	a803      	add	r0, sp, #12
 8017eee:	f7f1 fb8d 	bl	800960c <HAL_CRC_Init>
 8017ef2:	b100      	cbz	r0, 8017ef6 <UpdateFWBlueMS+0xce>
            OTA_ERROR_FUNCTION();
 8017ef4:	e7fe      	b.n	8017ef4 <UpdateFWBlueMS+0xcc>
            OTA_PRINTF("CRC  Initialized\n\r");
 8017ef6:	492b      	ldr	r1, [pc, #172]	; (8017fa4 <UpdateFWBlueMS+0x17c>)
 8017ef8:	a80c      	add	r0, sp, #48	; 0x30
 8017efa:	f004 ff8d 	bl	801ce18 <strcpy>
 8017efe:	2112      	movs	r1, #18
 8017f00:	a80c      	add	r0, sp, #48	; 0x30
 8017f02:	f001 fd53 	bl	80199ac <CDC_Fill_Buffer>
          uwCRCValue = HAL_CRC_Calculate(&CrcHandle, (uint32_t *)OTA_ADDRESS_START, SizeOfUpdateBlueFWCopy>>2);
 8017f06:	6862      	ldr	r2, [r4, #4]
 8017f08:	4927      	ldr	r1, [pc, #156]	; (8017fa8 <UpdateFWBlueMS+0x180>)
 8017f0a:	0892      	lsrs	r2, r2, #2
 8017f0c:	a803      	add	r0, sp, #12
 8017f0e:	f7f1 fbd0 	bl	80096b2 <HAL_CRC_Calculate>
          if(uwCRCValue==AspecteduwCRCValue) {
 8017f12:	68a3      	ldr	r3, [r4, #8]
 8017f14:	4283      	cmp	r3, r0
          uwCRCValue = HAL_CRC_Calculate(&CrcHandle, (uint32_t *)OTA_ADDRESS_START, SizeOfUpdateBlueFWCopy>>2);
 8017f16:	4605      	mov	r5, r0
          if(uwCRCValue==AspecteduwCRCValue) {
 8017f18:	d113      	bne.n	8017f42 <UpdateFWBlueMS+0x11a>
            OTA_PRINTF("OTA CRC-checked\r\n");
 8017f1a:	4924      	ldr	r1, [pc, #144]	; (8017fac <UpdateFWBlueMS+0x184>)
 8017f1c:	a80c      	add	r0, sp, #48	; 0x30
 8017f1e:	f004 ff7b 	bl	801ce18 <strcpy>
 8017f22:	2111      	movs	r1, #17
 8017f24:	a80c      	add	r0, sp, #48	; 0x30
 8017f26:	f001 fd41 	bl	80199ac <CDC_Fill_Buffer>
          Address = OTA_MAGIC_NUM_POS;
 8017f2a:	4d21      	ldr	r5, [pc, #132]	; (8017fb0 <UpdateFWBlueMS+0x188>)
          if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,ValueToWrite)!=HAL_OK) {
 8017f2c:	4a21      	ldr	r2, [pc, #132]	; (8017fb4 <UpdateFWBlueMS+0x18c>)
 8017f2e:	6863      	ldr	r3, [r4, #4]
          Address = OTA_MAGIC_NUM_POS;
 8017f30:	f04f 6101 	mov.w	r1, #135266304	; 0x8100000
          if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,ValueToWrite)!=HAL_OK) {
 8017f34:	2000      	movs	r0, #0
          Address = OTA_MAGIC_NUM_POS;
 8017f36:	6029      	str	r1, [r5, #0]
          if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,ValueToWrite)!=HAL_OK) {
 8017f38:	f7f2 f932 	bl	800a1a0 <HAL_FLASH_Program>
 8017f3c:	4602      	mov	r2, r0
 8017f3e:	b168      	cbz	r0, 8017f5c <UpdateFWBlueMS+0x134>
            OTA_ERROR_FUNCTION();
 8017f40:	e7fe      	b.n	8017f40 <UpdateFWBlueMS+0x118>
            OTA_PRINTF("OTA Error CRC-checking\r\n");
 8017f42:	491d      	ldr	r1, [pc, #116]	; (8017fb8 <UpdateFWBlueMS+0x190>)
 8017f44:	a80c      	add	r0, sp, #48	; 0x30
 8017f46:	f004 ff67 	bl	801ce18 <strcpy>
 8017f4a:	2118      	movs	r1, #24
 8017f4c:	a80c      	add	r0, sp, #48	; 0x30
 8017f4e:	f001 fd2d 	bl	80199ac <CDC_Fill_Buffer>
          if(AspecteduwCRCValue) {
 8017f52:	68a3      	ldr	r3, [r4, #8]
 8017f54:	b9a3      	cbnz	r3, 8017f80 <UpdateFWBlueMS+0x158>
          ReturnValue=-1;
 8017f56:	f04f 34ff 	mov.w	r4, #4294967295
 8017f5a:	e791      	b.n	8017e80 <UpdateFWBlueMS+0x58>
            Address = OTA_MAGIC_NUM_POS+8;
 8017f5c:	4917      	ldr	r1, [pc, #92]	; (8017fbc <UpdateFWBlueMS+0x194>)
            if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,ValueToWrite)!=HAL_OK) {
 8017f5e:	4b18      	ldr	r3, [pc, #96]	; (8017fc0 <UpdateFWBlueMS+0x198>)
            Address = OTA_MAGIC_NUM_POS+8;
 8017f60:	6029      	str	r1, [r5, #0]
            if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,ValueToWrite)!=HAL_OK) {
 8017f62:	695b      	ldr	r3, [r3, #20]
 8017f64:	f7f2 f91c 	bl	800a1a0 <HAL_FLASH_Program>
 8017f68:	b100      	cbz	r0, 8017f6c <UpdateFWBlueMS+0x144>
              OTA_ERROR_FUNCTION();
 8017f6a:	e7fe      	b.n	8017f6a <UpdateFWBlueMS+0x142>
              OTA_PRINTF("OTA will be installed at next board reset\r\n");
 8017f6c:	4915      	ldr	r1, [pc, #84]	; (8017fc4 <UpdateFWBlueMS+0x19c>)
 8017f6e:	a80c      	add	r0, sp, #48	; 0x30
 8017f70:	f004 ff52 	bl	801ce18 <strcpy>
 8017f74:	212b      	movs	r1, #43	; 0x2b
 8017f76:	a80c      	add	r0, sp, #48	; 0x30
 8017f78:	f001 fd18 	bl	80199ac <CDC_Fill_Buffer>
 8017f7c:	2401      	movs	r4, #1
 8017f7e:	e77f      	b.n	8017e80 <UpdateFWBlueMS+0x58>
            OTA_PRINTF("Wrong CRC! Computed=%lx  aspected=%lx ... Try again\r\n",uwCRCValue,AspecteduwCRCValue);
 8017f80:	4911      	ldr	r1, [pc, #68]	; (8017fc8 <UpdateFWBlueMS+0x1a0>)
 8017f82:	462a      	mov	r2, r5
 8017f84:	a80c      	add	r0, sp, #48	; 0x30
 8017f86:	f004 fed7 	bl	801cd38 <siprintf>
 8017f8a:	4601      	mov	r1, r0
 8017f8c:	a80c      	add	r0, sp, #48	; 0x30
 8017f8e:	f001 fd0d 	bl	80199ac <CDC_Fill_Buffer>
 8017f92:	e7e0      	b.n	8017f56 <UpdateFWBlueMS+0x12e>
 8017f94:	20011fe0 	.word	0x20011fe0
 8017f98:	08024fa1 	.word	0x08024fa1
 8017f9c:	08024ff1 	.word	0x08024ff1
 8017fa0:	40023000 	.word	0x40023000
 8017fa4:	08025004 	.word	0x08025004
 8017fa8:	08100010 	.word	0x08100010
 8017fac:	08025017 	.word	0x08025017
 8017fb0:	20000508 	.word	0x20000508
 8017fb4:	deadbeef 	.word	0xdeadbeef
 8017fb8:	08025029 	.word	0x08025029
 8017fbc:	08100008 	.word	0x08100008
 8017fc0:	08003f00 	.word	0x08003f00
 8017fc4:	08025042 	.word	0x08025042
 8017fc8:	0802506e 	.word	0x0802506e

08017fcc <StartUpdateFWBlueMS>:
{
 8017fcc:	b570      	push	{r4, r5, r6, lr}
 8017fce:	b0c6      	sub	sp, #280	; 0x118
 8017fd0:	4604      	mov	r4, r0
 8017fd2:	460d      	mov	r5, r1
  uint32_t SectorError = 0;
 8017fd4:	2600      	movs	r6, #0
  OTA_PRINTF("Start FLASH Erase\r\n");
 8017fd6:	4931      	ldr	r1, [pc, #196]	; (801809c <StartUpdateFWBlueMS+0xd0>)
  uint32_t SectorError = 0;
 8017fd8:	9601      	str	r6, [sp, #4]
  OTA_PRINTF("Start FLASH Erase\r\n");
 8017fda:	a806      	add	r0, sp, #24
 8017fdc:	f004 ff1c 	bl	801ce18 <strcpy>
 8017fe0:	2113      	movs	r1, #19
 8017fe2:	a806      	add	r0, sp, #24
 8017fe4:	f001 fce2 	bl	80199ac <CDC_Fill_Buffer>
  SizeOfUpdateBlueFWCopy = SizeOfUpdateBlueFW = SizeOfUpdate;
 8017fe8:	4b2d      	ldr	r3, [pc, #180]	; (80180a0 <StartUpdateFWBlueMS+0xd4>)
  Address = OTA_ADDRESS_START;
 8017fea:	4a2e      	ldr	r2, [pc, #184]	; (80180a4 <StartUpdateFWBlueMS+0xd8>)
  AspecteduwCRCValue = uwCRCValue;
 8017fec:	609d      	str	r5, [r3, #8]
  SizeOfUpdateBlueFWCopy = SizeOfUpdateBlueFW = SizeOfUpdate;
 8017fee:	e9c3 4400 	strd	r4, r4, [r3]
  Address = OTA_ADDRESS_START;
 8017ff2:	4b2d      	ldr	r3, [pc, #180]	; (80180a8 <StartUpdateFWBlueMS+0xdc>)
  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8017ff4:	9602      	str	r6, [sp, #8]
  Address = OTA_ADDRESS_START;
 8017ff6:	601a      	str	r2, [r3, #0]
  */
static uint32_t GetBank(uint32_t Addr)
{
  uint32_t bank = 0;
  
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0) {
 8017ff8:	4b2c      	ldr	r3, [pc, #176]	; (80180ac <StartUpdateFWBlueMS+0xe0>)
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8018000:	4b2b      	ldr	r3, [pc, #172]	; (80180b0 <StartUpdateFWBlueMS+0xe4>)
    /* No Bank swap */
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE)) {
 8018002:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8018006:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801800a:	b293      	uxth	r3, r2
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0) {
 801800c:	d128      	bne.n	8018060 <StartUpdateFWBlueMS+0x94>
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE)) {
 801800e:	428b      	cmp	r3, r1
 8018010:	d033      	beq.n	801807a <StartUpdateFWBlueMS+0xae>
 8018012:	4b28      	ldr	r3, [pc, #160]	; (80180b4 <StartUpdateFWBlueMS+0xe8>)
 8018014:	ea03 2342 	and.w	r3, r3, r2, lsl #9
 8018018:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
  } else {
    /* Bank swap */
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE)){
      bank = FLASH_BANK_2;
    } else {
      bank = FLASH_BANK_1;
 801801c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8018020:	bf94      	ite	ls
 8018022:	2302      	movls	r3, #2
 8018024:	2301      	movhi	r3, #1
  EraseInitStruct.Page        = GetPage(OTA_MAGIC_NUM_POS);
 8018026:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
  EraseInitStruct.Banks       = GetBank(OTA_MAGIC_NUM_POS);
 801802a:	9303      	str	r3, [sp, #12]
  EraseInitStruct.NbPages     = (SizeOfUpdate+16+FLASH_PAGE_SIZE-1)/FLASH_PAGE_SIZE;
 801802c:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
  EraseInitStruct.Page        = GetPage(OTA_MAGIC_NUM_POS);
 8018030:	f7ff fe4e 	bl	8017cd0 <GetPage>
  EraseInitStruct.NbPages     = (SizeOfUpdate+16+FLASH_PAGE_SIZE-1)/FLASH_PAGE_SIZE;
 8018034:	340f      	adds	r4, #15
 8018036:	0b24      	lsrs	r4, r4, #12
  EraseInitStruct.Page        = GetPage(OTA_MAGIC_NUM_POS);
 8018038:	9004      	str	r0, [sp, #16]
  EraseInitStruct.NbPages     = (SizeOfUpdate+16+FLASH_PAGE_SIZE-1)/FLASH_PAGE_SIZE;
 801803a:	9405      	str	r4, [sp, #20]
  HAL_FLASH_Unlock();
 801803c:	f7f2 f868 	bl	800a110 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8018040:	4b1d      	ldr	r3, [pc, #116]	; (80180b8 <StartUpdateFWBlueMS+0xec>)
 8018042:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8018046:	611a      	str	r2, [r3, #16]
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PEMPTY) != 0) {
 8018048:	691a      	ldr	r2, [r3, #16]
 801804a:	0392      	lsls	r2, r2, #14
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PEMPTY);
 801804c:	bf44      	itt	mi
 801804e:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
 8018052:	611a      	strmi	r2, [r3, #16]
  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK){
 8018054:	a901      	add	r1, sp, #4
 8018056:	a802      	add	r0, sp, #8
 8018058:	f7f2 f962 	bl	800a320 <HAL_FLASHEx_Erase>
 801805c:	b188      	cbz	r0, 8018082 <StartUpdateFWBlueMS+0xb6>
    OTA_ERROR_FUNCTION();
 801805e:	e7fe      	b.n	801805e <StartUpdateFWBlueMS+0x92>
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE)){
 8018060:	428b      	cmp	r3, r1
 8018062:	d00c      	beq.n	801807e <StartUpdateFWBlueMS+0xb2>
 8018064:	4b13      	ldr	r3, [pc, #76]	; (80180b4 <StartUpdateFWBlueMS+0xe8>)
 8018066:	ea03 2342 	and.w	r3, r3, r2, lsl #9
 801806a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
      bank = FLASH_BANK_2;
 801806e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8018072:	bf94      	ite	ls
 8018074:	2301      	movls	r3, #1
 8018076:	2302      	movhi	r3, #2
 8018078:	e7d5      	b.n	8018026 <StartUpdateFWBlueMS+0x5a>
 801807a:	2302      	movs	r3, #2
 801807c:	e7d3      	b.n	8018026 <StartUpdateFWBlueMS+0x5a>
      bank = FLASH_BANK_1;
 801807e:	2301      	movs	r3, #1
 8018080:	e7d1      	b.n	8018026 <StartUpdateFWBlueMS+0x5a>
    OTA_PRINTF("End FLASH Erase %ld Pages of 2KB\r\n",EraseInitStruct.NbPages);
 8018082:	9a05      	ldr	r2, [sp, #20]
 8018084:	490d      	ldr	r1, [pc, #52]	; (80180bc <StartUpdateFWBlueMS+0xf0>)
 8018086:	a806      	add	r0, sp, #24
 8018088:	f004 fe56 	bl	801cd38 <siprintf>
 801808c:	4601      	mov	r1, r0
 801808e:	a806      	add	r0, sp, #24
 8018090:	f001 fc8c 	bl	80199ac <CDC_Fill_Buffer>
  HAL_FLASH_Lock();
 8018094:	f7f2 f84e 	bl	800a134 <HAL_FLASH_Lock>
}
 8018098:	b046      	add	sp, #280	; 0x118
 801809a:	bd70      	pop	{r4, r5, r6, pc}
 801809c:	080250a4 	.word	0x080250a4
 80180a0:	20011fe0 	.word	0x20011fe0
 80180a4:	08100010 	.word	0x08100010
 80180a8:	20000508 	.word	0x20000508
 80180ac:	40010000 	.word	0x40010000
 80180b0:	1fff7000 	.word	0x1fff7000
 80180b4:	01fffe00 	.word	0x01fffe00
 80180b8:	40022000 	.word	0x40022000
 80180bc:	080250b8 	.word	0x080250b8

080180c0 <Init_MEMS_Mics>:
/** @brief Initialize all the MEMS's Microphones
 * @param None
 * @retval None
 */
static void Init_MEMS_Mics(uint32_t AudioFreq, uint32_t AudioVolume)
{
 80180c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Initialize microphone acquisition */  
  MicParams.BitsPerSample = 16;
 80180c2:	4c1e      	ldr	r4, [pc, #120]	; (801813c <Init_MEMS_Mics+0x7c>)
  MicParams.ChannelsNbr = AUDIO_IN_CHANNELS;
 80180c4:	2310      	movs	r3, #16
 80180c6:	2702      	movs	r7, #2
 80180c8:	e9c4 3702 	strd	r3, r7, [r4, #8]
  MicParams.Device = ACTIVE_MICROPHONES_MASK;
 80180cc:	2303      	movs	r3, #3
  MicParams.SampleRate = AudioFreq;
 80180ce:	e9c4 3000 	strd	r3, r0, [r4]
{
 80180d2:	b0c1      	sub	sp, #260	; 0x104
 80180d4:	4606      	mov	r6, r0
 80180d6:	460d      	mov	r5, r1
  MicParams.Volume = AudioVolume;
 80180d8:	6121      	str	r1, [r4, #16]
  
  if( BSP_AUDIO_IN_Init(BSP_AUDIO_IN_INSTANCE, &MicParams) != BSP_ERROR_NONE )
 80180da:	2001      	movs	r0, #1
 80180dc:	4621      	mov	r1, r4
 80180de:	f7ef f86b 	bl	80071b8 <BSP_AUDIO_IN_Init>
 80180e2:	b140      	cbz	r0, 80180f6 <Init_MEMS_Mics+0x36>
  {
    PREDMNT1_PRINTF("\nError Audio Init\r\n");
 80180e4:	4916      	ldr	r1, [pc, #88]	; (8018140 <Init_MEMS_Mics+0x80>)
 80180e6:	4668      	mov	r0, sp
 80180e8:	f004 fe96 	bl	801ce18 <strcpy>
 80180ec:	2113      	movs	r1, #19
 80180ee:	4668      	mov	r0, sp
 80180f0:	f001 fc5c 	bl	80199ac <CDC_Fill_Buffer>
    
    while(1) {
 80180f4:	e7fe      	b.n	80180f4 <Init_MEMS_Mics+0x34>
      ;
    }
  }
  else
  {
    PREDMNT1_PRINTF("\nOK Audio Init\t(Audio Freq.= %ld)\r\n", AudioFreq);
 80180f6:	4913      	ldr	r1, [pc, #76]	; (8018144 <Init_MEMS_Mics+0x84>)
 80180f8:	4632      	mov	r2, r6
 80180fa:	4668      	mov	r0, sp
 80180fc:	f004 fe1c 	bl	801cd38 <siprintf>
 8018100:	4601      	mov	r1, r0
 8018102:	4668      	mov	r0, sp
 8018104:	f001 fc52 	bl	80199ac <CDC_Fill_Buffer>
  }
  
  /* Set the volume level */
  if( BSP_AUDIO_IN_SetVolume(BSP_AUDIO_IN_INSTANCE, AudioVolume) != BSP_ERROR_NONE )
 8018108:	4629      	mov	r1, r5
 801810a:	2001      	movs	r0, #1
 801810c:	f7ee fc90 	bl	8006a30 <BSP_AUDIO_IN_SetVolume>
 8018110:	b140      	cbz	r0, 8018124 <Init_MEMS_Mics+0x64>
  {
    PREDMNT1_PRINTF("Error Audio Volume\r\n\n");
 8018112:	490d      	ldr	r1, [pc, #52]	; (8018148 <Init_MEMS_Mics+0x88>)
 8018114:	4668      	mov	r0, sp
 8018116:	f004 fe7f 	bl	801ce18 <strcpy>
 801811a:	2115      	movs	r1, #21
 801811c:	4668      	mov	r0, sp
 801811e:	f001 fc45 	bl	80199ac <CDC_Fill_Buffer>
    
    while(1) {
 8018122:	e7fe      	b.n	8018122 <Init_MEMS_Mics+0x62>
      ;
    }
  }
  else
  {
    PREDMNT1_PRINTF("OK Audio Volume\t(Volume= %ld)\r\n", AudioVolume);
 8018124:	462a      	mov	r2, r5
 8018126:	4909      	ldr	r1, [pc, #36]	; (801814c <Init_MEMS_Mics+0x8c>)
 8018128:	4668      	mov	r0, sp
 801812a:	f004 fe05 	bl	801cd38 <siprintf>
 801812e:	4601      	mov	r1, r0
 8018130:	4668      	mov	r0, sp
 8018132:	f001 fc3b 	bl	80199ac <CDC_Fill_Buffer>
  }

  /* Number of Microphones */
  TargetBoardFeatures.NumMicSensors=AUDIO_IN_CHANNELS;
 8018136:	6227      	str	r7, [r4, #32]
}
 8018138:	b041      	add	sp, #260	; 0x104
 801813a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801813c:	20011fec 	.word	0x20011fec
 8018140:	080250db 	.word	0x080250db
 8018144:	080250ef 	.word	0x080250ef
 8018148:	08025113 	.word	0x08025113
 801814c:	08025129 	.word	0x08025129

08018150 <InitTargetPlatform>:
  * @brief  Initialize all the Target platform's Features
  * @param  None
  * @retval None
  */
void InitTargetPlatform(void)
{
 8018150:	b530      	push	{r4, r5, lr}
  /* enable USB power on Pwrctrl CR2 register */
  HAL_PWREx_EnableVddUSB();

  /* Configure the CDC */
  /* Init Device Library */
  USBD_Init(&USBD_Device, &VCP_Desc, 0);
 8018152:	4c71      	ldr	r4, [pc, #452]	; (8018318 <InitTargetPlatform+0x1c8>)
{
 8018154:	b0c7      	sub	sp, #284	; 0x11c
  HAL_PWREx_EnableVddUSB();
 8018156:	f7f3 fb41 	bl	800b7dc <HAL_PWREx_EnableVddUSB>
  USBD_Init(&USBD_Device, &VCP_Desc, 0);
 801815a:	2200      	movs	r2, #0
 801815c:	496f      	ldr	r1, [pc, #444]	; (801831c <InitTargetPlatform+0x1cc>)
 801815e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8018162:	f7fb fbdc 	bl	801391e <USBD_Init>
  /* Add Supported Class */
  USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);
 8018166:	496e      	ldr	r1, [pc, #440]	; (8018320 <InitTargetPlatform+0x1d0>)
 8018168:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801816c:	f7fb fbea 	bl	8013944 <USBD_RegisterClass>
  /* Add Interface callbacks for AUDIO and CDC Class */
  USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops);
 8018170:	496c      	ldr	r1, [pc, #432]	; (8018324 <InitTargetPlatform+0x1d4>)
 8018172:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8018176:	f7fb fb9f 	bl	80138b8 <USBD_CDC_RegisterInterface>
  /* Start Device Process */
  USBD_Start(&USBD_Device);
 801817a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801817e:	f7fb fbf7 	bl	8013970 <USBD_Start>
  /* 10 seconds ... for having time to open the Terminal
   * for looking the ALLMEMS1 Initialization phase */
  HAL_Delay(10000);
 8018182:	f242 7010 	movw	r0, #10000	; 0x2710
 8018186:	f000 fd2f 	bl	8018be8 <HAL_Delay>
#endif /* PREDMNT1_ENABLE_PRINTF */
  
  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 801818a:	2101      	movs	r1, #1
 801818c:	2000      	movs	r0, #0
 801818e:	f7ee fb1b 	bl	80067c8 <BSP_PB_Init>
  BSP_PB_PWR_Init();
 8018192:	f7ee faf1 	bl	8006778 <BSP_PB_PWR_Init>
  
  /* Initialize LED */
  BSP_LED_Init(LED1);  
 8018196:	2000      	movs	r0, #0
 8018198:	f7ee fb48 	bl	800682c <BSP_LED_Init>
  
  /* Initialize the Battery Charger */
  BSP_BC_Init();
 801819c:	f7ef fb4e 	bl	800783c <BSP_BC_Init>
  
  /* In order to be able to Read Battery Volt */
  BSP_BC_BatMS_Init();
 80181a0:	f7ef fba4 	bl	80078ec <BSP_BC_BatMS_Init>
  
  /* In order to Initialize the GPIO for having the battery Status */
  BSP_BC_Chrg_Init();
 80181a4:	f7ef fafe 	bl	80077a4 <BSP_BC_Chrg_Init>
  
  //BSP_BC_CmdSend(BATMS_ON);
  
  PREDMNT1_PRINTF("\r\nSTMicroelectronics %s:\r\n"
 80181a8:	2334      	movs	r3, #52	; 0x34
 80181aa:	2230      	movs	r2, #48	; 0x30
 80181ac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80181b0:	2332      	movs	r3, #50	; 0x32
 80181b2:	4a5d      	ldr	r2, [pc, #372]	; (8018328 <InitTargetPlatform+0x1d8>)
 80181b4:	495d      	ldr	r1, [pc, #372]	; (801832c <InitTargetPlatform+0x1dc>)
 80181b6:	9300      	str	r3, [sp, #0]
 80181b8:	a806      	add	r0, sp, #24
 80181ba:	4b5d      	ldr	r3, [pc, #372]	; (8018330 <InitTargetPlatform+0x1e0>)
 80181bc:	f004 fdbc 	bl	801cd38 <siprintf>
 80181c0:	2179      	movs	r1, #121	; 0x79
 80181c2:	a806      	add	r0, sp, #24
 80181c4:	f001 fbf2 	bl	80199ac <CDC_Fill_Buffer>
          PREDMNT1_PACKAGENAME,
          CONFIG_NAME,
          PREDMNT1_VERSION_MAJOR,PREDMNT1_VERSION_MINOR,PREDMNT1_VERSION_PATCH);

  /* Reset all the Target's Features */
  memset(&TargetBoardFeatures, 0, sizeof(TargetFeatures_t));
 80181c8:	2214      	movs	r2, #20
 80181ca:	2100      	movs	r1, #0
 80181cc:	18a0      	adds	r0, r4, r2
 80181ce:	f004 f849 	bl	801c264 <memset>
  M_INT2_O_GPIO_CLK_ENABLE();
 80181d2:	4b58      	ldr	r3, [pc, #352]	; (8018334 <InitTargetPlatform+0x1e4>)
  HAL_GPIO_Init(M_INT2_O_GPIO_PORT, &GPIO_InitStruct);
 80181d4:	4858      	ldr	r0, [pc, #352]	; (8018338 <InitTargetPlatform+0x1e8>)
  M_INT2_O_GPIO_CLK_ENABLE();
 80181d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80181d8:	f042 0220 	orr.w	r2, r2, #32
 80181dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80181de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80181e0:	f003 0320 	and.w	r3, r3, #32
 80181e4:	9305      	str	r3, [sp, #20]
 80181e6:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80181e8:	4b54      	ldr	r3, [pc, #336]	; (801833c <InitTargetPlatform+0x1ec>)
 80181ea:	2110      	movs	r1, #16
 80181ec:	e9cd 1306 	strd	r1, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80181f0:	2500      	movs	r5, #0
 80181f2:	2302      	movs	r3, #2
  HAL_GPIO_Init(M_INT2_O_GPIO_PORT, &GPIO_InitStruct);
 80181f4:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80181f6:	e9cd 5308 	strd	r5, r3, [sp, #32]
  HAL_GPIO_Init(M_INT2_O_GPIO_PORT, &GPIO_InitStruct);
 80181fa:	f7f2 f905 	bl	800a408 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(M_INT2_O_EXTI_IRQn, 0x00, 0x00);
 80181fe:	462a      	mov	r2, r5
 8018200:	4629      	mov	r1, r5
 8018202:	200a      	movs	r0, #10
 8018204:	f7f1 f936 	bl	8009474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(M_INT2_O_EXTI_IRQn);
 8018208:	200a      	movs	r0, #10
 801820a:	f7f1 f965 	bl	80094d8 <HAL_NVIC_EnableIRQ>
  PREDMNT1_PRINTF("\nCode compiled for STWIN board\n\r");
 801820e:	494c      	ldr	r1, [pc, #304]	; (8018340 <InitTargetPlatform+0x1f0>)
 8018210:	a806      	add	r0, sp, #24
 8018212:	f004 fe01 	bl	801ce18 <strcpy>
 8018216:	2120      	movs	r1, #32
 8018218:	a806      	add	r0, sp, #24
 801821a:	f001 fbc7 	bl	80199ac <CDC_Fill_Buffer>
  if(MOTION_SENSOR_Init(ACCELERO_INSTANCE, MOTION_ACCELERO | MOTION_GYRO)==BSP_ERROR_NONE)
 801821e:	2103      	movs	r1, #3
 8018220:	2001      	movs	r0, #1
 8018222:	f7ef ffd5 	bl	80081d0 <BSP_MOTION_SENSOR_Init>
 8018226:	2800      	cmp	r0, #0
 8018228:	d154      	bne.n	80182d4 <InitTargetPlatform+0x184>
    TargetBoardFeatures.AccSensorIsInit= 1;
 801822a:	f240 1301 	movw	r3, #257	; 0x101
    PREDMNT1_PRINTF("\tOK Accelero Sensor\n\r");
 801822e:	4945      	ldr	r1, [pc, #276]	; (8018344 <InitTargetPlatform+0x1f4>)
    TargetBoardFeatures.AccSensorIsInit= 1;
 8018230:	8323      	strh	r3, [r4, #24]
    PREDMNT1_PRINTF("\tOK Accelero Sensor\n\r");
 8018232:	a806      	add	r0, sp, #24
 8018234:	f004 fdf0 	bl	801ce18 <strcpy>
 8018238:	2115      	movs	r1, #21
 801823a:	a806      	add	r0, sp, #24
 801823c:	f001 fbb6 	bl	80199ac <CDC_Fill_Buffer>
    PREDMNT1_PRINTF("\tOK Gyroscope Sensor\n\r");
 8018240:	4941      	ldr	r1, [pc, #260]	; (8018348 <InitTargetPlatform+0x1f8>)
 8018242:	a806      	add	r0, sp, #24
 8018244:	f004 fde8 	bl	801ce18 <strcpy>
 8018248:	2116      	movs	r1, #22
    PREDMNT1_PRINTF("\tError Gyroscope Sensor\n\r");
 801824a:	a806      	add	r0, sp, #24
 801824c:	f001 fbae 	bl	80199ac <CDC_Fill_Buffer>
  if(MOTION_SENSOR_Init(MAGNETO_INSTANCE, MOTION_MAGNETO)==BSP_ERROR_NONE)
 8018250:	2104      	movs	r1, #4
 8018252:	2000      	movs	r0, #0
 8018254:	f7ef ffbc 	bl	80081d0 <BSP_MOTION_SENSOR_Init>
 8018258:	2800      	cmp	r0, #0
 801825a:	d14a      	bne.n	80182f2 <InitTargetPlatform+0x1a2>
    PREDMNT1_PRINTF("\tOK Magneto Sensor\n\r");
 801825c:	493b      	ldr	r1, [pc, #236]	; (801834c <InitTargetPlatform+0x1fc>)
    TargetBoardFeatures.MagSensorIsInit= 1;
 801825e:	2301      	movs	r3, #1
    PREDMNT1_PRINTF("\tOK Magneto Sensor\n\r");
 8018260:	a806      	add	r0, sp, #24
    TargetBoardFeatures.MagSensorIsInit= 1;
 8018262:	76a3      	strb	r3, [r4, #26]
    PREDMNT1_PRINTF("\tOK Magneto Sensor\n\r");
 8018264:	f004 fdd8 	bl	801ce18 <strcpy>
 8018268:	2114      	movs	r1, #20
    PREDMNT1_PRINTF("\tError Magneto Sensor\n\r");
 801826a:	a806      	add	r0, sp, #24
 801826c:	f001 fb9e 	bl	80199ac <CDC_Fill_Buffer>
  if(ENV_SENSOR_Init(HUMIDITY_INSTANCE,ENV_TEMPERATURE| ENV_HUMIDITY)==BSP_ERROR_NONE)
 8018270:	2105      	movs	r1, #5
 8018272:	2000      	movs	r0, #0
 8018274:	f7ef fda2 	bl	8007dbc <BSP_ENV_SENSOR_Init>
 8018278:	2800      	cmp	r0, #0
 801827a:	d140      	bne.n	80182fe <InitTargetPlatform+0x1ae>
    TargetBoardFeatures.TempSensorsIsInit[0]= 1;
 801827c:	2301      	movs	r3, #1
 801827e:	7523      	strb	r3, [r4, #20]
    TargetBoardFeatures.HumSensorIsInit= 1;
 8018280:	75e3      	strb	r3, [r4, #23]
    TargetBoardFeatures.NumTempSensors++;
 8018282:	69e3      	ldr	r3, [r4, #28]
    PREDMNT1_PRINTF("\tOK Temperature and Humidity (Sensor1)\n\r");
 8018284:	4932      	ldr	r1, [pc, #200]	; (8018350 <InitTargetPlatform+0x200>)
    TargetBoardFeatures.NumTempSensors++;
 8018286:	3301      	adds	r3, #1
    PREDMNT1_PRINTF("\tOK Temperature and Humidity (Sensor1)\n\r");
 8018288:	a806      	add	r0, sp, #24
    TargetBoardFeatures.NumTempSensors++;
 801828a:	61e3      	str	r3, [r4, #28]
    PREDMNT1_PRINTF("\tOK Temperature and Humidity (Sensor1)\n\r");
 801828c:	f004 fdc4 	bl	801ce18 <strcpy>
 8018290:	2128      	movs	r1, #40	; 0x28
    PREDMNT1_PRINTF("\tError Temperature and Humidity (Sensor1)\n\r");
 8018292:	a806      	add	r0, sp, #24
 8018294:	f001 fb8a 	bl	80199ac <CDC_Fill_Buffer>
  if(ENV_SENSOR_Init(PRESSURE_INSTANCE,ENV_TEMPERATURE| ENV_PRESSURE)==BSP_ERROR_NONE)
 8018298:	2103      	movs	r1, #3
 801829a:	2001      	movs	r0, #1
 801829c:	f7ef fd8e 	bl	8007dbc <BSP_ENV_SENSOR_Init>
 80182a0:	2800      	cmp	r0, #0
 80182a2:	d132      	bne.n	801830a <InitTargetPlatform+0x1ba>
    TargetBoardFeatures.TempSensorsIsInit[1]= 1;
 80182a4:	2301      	movs	r3, #1
 80182a6:	7563      	strb	r3, [r4, #21]
    TargetBoardFeatures.PressSensorIsInit= 1;
 80182a8:	75a3      	strb	r3, [r4, #22]
    TargetBoardFeatures.NumTempSensors++;
 80182aa:	69e3      	ldr	r3, [r4, #28]
    PREDMNT1_PRINTF("\tOK Temperature and Pressure (Sensor2)\n\r");
 80182ac:	4929      	ldr	r1, [pc, #164]	; (8018354 <InitTargetPlatform+0x204>)
    TargetBoardFeatures.NumTempSensors++;
 80182ae:	3301      	adds	r3, #1
    PREDMNT1_PRINTF("\tOK Temperature and Pressure (Sensor2)\n\r");
 80182b0:	a806      	add	r0, sp, #24
    TargetBoardFeatures.NumTempSensors++;
 80182b2:	61e3      	str	r3, [r4, #28]
    PREDMNT1_PRINTF("\tOK Temperature and Pressure (Sensor2)\n\r");
 80182b4:	f004 fdb0 	bl	801ce18 <strcpy>
 80182b8:	2128      	movs	r1, #40	; 0x28
    PREDMNT1_PRINTF("\tError Temperature and Pressure (Sensor2)\n\r");
 80182ba:	a806      	add	r0, sp, #24
 80182bc:	f001 fb76 	bl	80199ac <CDC_Fill_Buffer>
  
  ISM330DHC_GPIO_Init();
  
  Init_MEMS_Sensors();
  
  PREDMNT1_PRINTF("\n\r");
 80182c0:	4925      	ldr	r1, [pc, #148]	; (8018358 <InitTargetPlatform+0x208>)
 80182c2:	a806      	add	r0, sp, #24
 80182c4:	f004 fda8 	bl	801ce18 <strcpy>
 80182c8:	2102      	movs	r1, #2
 80182ca:	a806      	add	r0, sp, #24
 80182cc:	f001 fb6e 	bl	80199ac <CDC_Fill_Buffer>
}
 80182d0:	b047      	add	sp, #284	; 0x11c
 80182d2:	bd30      	pop	{r4, r5, pc}
    PREDMNT1_PRINTF("\tError Accelero Sensor\n\r");
 80182d4:	4921      	ldr	r1, [pc, #132]	; (801835c <InitTargetPlatform+0x20c>)
 80182d6:	a806      	add	r0, sp, #24
 80182d8:	f004 fd9e 	bl	801ce18 <strcpy>
 80182dc:	2118      	movs	r1, #24
 80182de:	eb0d 0001 	add.w	r0, sp, r1
 80182e2:	f001 fb63 	bl	80199ac <CDC_Fill_Buffer>
    PREDMNT1_PRINTF("\tError Gyroscope Sensor\n\r");
 80182e6:	491e      	ldr	r1, [pc, #120]	; (8018360 <InitTargetPlatform+0x210>)
 80182e8:	a806      	add	r0, sp, #24
 80182ea:	f004 fd95 	bl	801ce18 <strcpy>
 80182ee:	2119      	movs	r1, #25
 80182f0:	e7ab      	b.n	801824a <InitTargetPlatform+0xfa>
    PREDMNT1_PRINTF("\tError Magneto Sensor\n\r");
 80182f2:	491c      	ldr	r1, [pc, #112]	; (8018364 <InitTargetPlatform+0x214>)
 80182f4:	a806      	add	r0, sp, #24
 80182f6:	f004 fd8f 	bl	801ce18 <strcpy>
 80182fa:	2117      	movs	r1, #23
 80182fc:	e7b5      	b.n	801826a <InitTargetPlatform+0x11a>
    PREDMNT1_PRINTF("\tError Temperature and Humidity (Sensor1)\n\r");
 80182fe:	491a      	ldr	r1, [pc, #104]	; (8018368 <InitTargetPlatform+0x218>)
 8018300:	a806      	add	r0, sp, #24
 8018302:	f004 fd89 	bl	801ce18 <strcpy>
 8018306:	212b      	movs	r1, #43	; 0x2b
 8018308:	e7c3      	b.n	8018292 <InitTargetPlatform+0x142>
    PREDMNT1_PRINTF("\tError Temperature and Pressure (Sensor2)\n\r");
 801830a:	4918      	ldr	r1, [pc, #96]	; (801836c <InitTargetPlatform+0x21c>)
 801830c:	a806      	add	r0, sp, #24
 801830e:	f004 fd83 	bl	801ce18 <strcpy>
 8018312:	212b      	movs	r1, #43	; 0x2b
 8018314:	e7d1      	b.n	80182ba <InitTargetPlatform+0x16a>
 8018316:	bf00      	nop
 8018318:	20011fec 	.word	0x20011fec
 801831c:	20000588 	.word	0x20000588
 8018320:	200004c0 	.word	0x200004c0
 8018324:	20000540 	.word	0x20000540
 8018328:	08023e35 	.word	0x08023e35
 801832c:	0802516e 	.word	0x0802516e
 8018330:	08025149 	.word	0x08025149
 8018334:	40021000 	.word	0x40021000
 8018338:	48001400 	.word	0x48001400
 801833c:	10110000 	.word	0x10110000
 8018340:	080251bc 	.word	0x080251bc
 8018344:	080251dd 	.word	0x080251dd
 8018348:	080251f3 	.word	0x080251f3
 801834c:	0802523d 	.word	0x0802523d
 8018350:	0802526a 	.word	0x0802526a
 8018354:	080252bf 	.word	0x080252bf
 8018358:	08025290 	.word	0x08025290
 801835c:	0802520a 	.word	0x0802520a
 8018360:	08025223 	.word	0x08025223
 8018364:	08025252 	.word	0x08025252
 8018368:	08025293 	.word	0x08025293
 801836c:	080252e8 	.word	0x080252e8

08018370 <InitMics>:
/** @brief Initialize all the MEMS's Microphones
 * @param None
 * @retval None
 */
void InitMics(uint32_t AudioFreq, uint32_t AudioVolume)
{
 8018370:	b508      	push	{r3, lr}
  Init_MEMS_Mics(AudioFreq, AudioVolume);
 8018372:	f7ff fea5 	bl	80180c0 <Init_MEMS_Mics>
   
  BSP_AUDIO_IN_Record(BSP_AUDIO_IN_INSTANCE, (uint8_t *) PCM_Buffer, DEFAULT_AUDIO_IN_BUFFER_SIZE);
}
 8018376:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_AUDIO_IN_Record(BSP_AUDIO_IN_INSTANCE, (uint8_t *) PCM_Buffer, DEFAULT_AUDIO_IN_BUFFER_SIZE);
 801837a:	4902      	ldr	r1, [pc, #8]	; (8018384 <InitMics+0x14>)
 801837c:	2220      	movs	r2, #32
 801837e:	2001      	movs	r0, #1
 8018380:	f7ee baee 	b.w	8006960 <BSP_AUDIO_IN_Record>
 8018384:	200122e4 	.word	0x200122e4

08018388 <DeInitMics>:
/** @brief DeInitialize all the MEMS's Microphones
 * @param None
 * @retval None
 */
void DeInitMics(void)
{
 8018388:	b500      	push	{lr}
  if( BSP_AUDIO_IN_Stop(BSP_AUDIO_IN_INSTANCE) != BSP_ERROR_NONE )
 801838a:	2001      	movs	r0, #1
{
 801838c:	b0c1      	sub	sp, #260	; 0x104
  if( BSP_AUDIO_IN_Stop(BSP_AUDIO_IN_INSTANCE) != BSP_ERROR_NONE )
 801838e:	f7ee fb1f 	bl	80069d0 <BSP_AUDIO_IN_Stop>
 8018392:	b140      	cbz	r0, 80183a6 <DeInitMics+0x1e>
  {
    PREDMNT1_PRINTF("Error Audio Stop\r\n");
 8018394:	4914      	ldr	r1, [pc, #80]	; (80183e8 <DeInitMics+0x60>)
 8018396:	4668      	mov	r0, sp
 8018398:	f004 fd3e 	bl	801ce18 <strcpy>
 801839c:	2112      	movs	r1, #18
 801839e:	4668      	mov	r0, sp
 80183a0:	f001 fb04 	bl	80199ac <CDC_Fill_Buffer>
    
    while(1) {
 80183a4:	e7fe      	b.n	80183a4 <DeInitMics+0x1c>
      ;
    }
  }
  else
    PREDMNT1_PRINTF("OK Audio Stop\r\n");
 80183a6:	4911      	ldr	r1, [pc, #68]	; (80183ec <DeInitMics+0x64>)
 80183a8:	4668      	mov	r0, sp
 80183aa:	f004 fd35 	bl	801ce18 <strcpy>
 80183ae:	210f      	movs	r1, #15
 80183b0:	4668      	mov	r0, sp
 80183b2:	f001 fafb 	bl	80199ac <CDC_Fill_Buffer>
  
  
  if( BSP_AUDIO_IN_DeInit(BSP_AUDIO_IN_INSTANCE) != BSP_ERROR_NONE )
 80183b6:	2001      	movs	r0, #1
 80183b8:	f7ee fa82 	bl	80068c0 <BSP_AUDIO_IN_DeInit>
 80183bc:	b140      	cbz	r0, 80183d0 <DeInitMics+0x48>
  {
    PREDMNT1_PRINTF("Error Audio DeInit\r\n");
 80183be:	490c      	ldr	r1, [pc, #48]	; (80183f0 <DeInitMics+0x68>)
 80183c0:	4668      	mov	r0, sp
 80183c2:	f004 fd29 	bl	801ce18 <strcpy>
 80183c6:	2114      	movs	r1, #20
 80183c8:	4668      	mov	r0, sp
 80183ca:	f001 faef 	bl	80199ac <CDC_Fill_Buffer>
    
    while(1) {
 80183ce:	e7fe      	b.n	80183ce <DeInitMics+0x46>
      ;
    }
  }
  else
    PREDMNT1_PRINTF("OK Audio DeInit\r\n");
 80183d0:	4908      	ldr	r1, [pc, #32]	; (80183f4 <DeInitMics+0x6c>)
 80183d2:	4668      	mov	r0, sp
 80183d4:	f004 fd20 	bl	801ce18 <strcpy>
 80183d8:	2111      	movs	r1, #17
 80183da:	4668      	mov	r0, sp
 80183dc:	f001 fae6 	bl	80199ac <CDC_Fill_Buffer>
}
 80183e0:	b041      	add	sp, #260	; 0x104
 80183e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80183e6:	bf00      	nop
 80183e8:	08025314 	.word	0x08025314
 80183ec:	08025327 	.word	0x08025327
 80183f0:	08025337 	.word	0x08025337
 80183f4:	0802534c 	.word	0x0802534c

080183f8 <LedOnTargetPlatform>:
  * @brief  This function switches on the LED
  * @param  None
  * @retval None
  */
void LedOnTargetPlatform(void)
{
 80183f8:	b508      	push	{r3, lr}
  BSP_LED_On(LED1);
 80183fa:	2000      	movs	r0, #0
 80183fc:	f7ee fa44 	bl	8006888 <BSP_LED_On>
  TargetBoardFeatures.LedStatus=1;
 8018400:	4b02      	ldr	r3, [pc, #8]	; (801840c <LedOnTargetPlatform+0x14>)
 8018402:	2201      	movs	r2, #1
 8018404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8018408:	bd08      	pop	{r3, pc}
 801840a:	bf00      	nop
 801840c:	20011fec 	.word	0x20011fec

08018410 <LedOffTargetPlatform>:
  * @brief  This function switches off the LED
  * @param  None
  * @retval None
  */
void LedOffTargetPlatform(void)
{
 8018410:	b508      	push	{r3, lr}
  BSP_LED_Off(LED1);
 8018412:	2000      	movs	r0, #0
 8018414:	f7ee fa46 	bl	80068a4 <BSP_LED_Off>
  TargetBoardFeatures.LedStatus=0;
 8018418:	4b02      	ldr	r3, [pc, #8]	; (8018424 <LedOffTargetPlatform+0x14>)
 801841a:	2200      	movs	r2, #0
 801841c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8018420:	bd08      	pop	{r3, pc}
 8018422:	bf00      	nop
 8018424:	20011fec 	.word	0x20011fec

08018428 <UserFunctionForErasingFlash>:
/**
 * @brief User function for Erasing the MDM on Flash
 * @param None
 * @retval uint32_t Success/NotSuccess [1/0]
 */
uint32_t UserFunctionForErasingFlash(void) {
 8018428:	b510      	push	{r4, lr}
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t SectorError = 0;
 801842a:	2300      	movs	r3, #0
uint32_t UserFunctionForErasingFlash(void) {
 801842c:	b086      	sub	sp, #24
  uint32_t Success=1;

  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 801842e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0)
 8018432:	4b31      	ldr	r3, [pc, #196]	; (80184f8 <UserFunctionForErasingFlash+0xd0>)
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	f413 7f80 	tst.w	r3, #256	; 0x100
 801843a:	4b30      	ldr	r3, [pc, #192]	; (80184fc <UserFunctionForErasingFlash+0xd4>)
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 801843c:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8018440:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018444:	b293      	uxth	r3, r2
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0)
 8018446:	d13d      	bne.n	80184c4 <UserFunctionForErasingFlash+0x9c>
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8018448:	428b      	cmp	r3, r1
 801844a:	d048      	beq.n	80184de <UserFunctionForErasingFlash+0xb6>
 801844c:	4b2c      	ldr	r3, [pc, #176]	; (8018500 <UserFunctionForErasingFlash+0xd8>)
 801844e:	ea03 2342 	and.w	r3, r3, r2, lsl #9
      bank = FLASH_BANK_1;
 8018452:	4a2c      	ldr	r2, [pc, #176]	; (8018504 <UserFunctionForErasingFlash+0xdc>)
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8018454:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
      bank = FLASH_BANK_1;
 8018458:	4293      	cmp	r3, r2
 801845a:	bf94      	ite	ls
 801845c:	2302      	movls	r3, #2
 801845e:	2301      	movhi	r3, #1
  EraseInitStruct.Banks       = GetBank(MDM_FLASH_ADD);
 8018460:	9303      	str	r3, [sp, #12]
  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8018462:	4b26      	ldr	r3, [pc, #152]	; (80184fc <UserFunctionForErasingFlash+0xd4>)
 8018464:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8018468:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801846c:	b291      	uxth	r1, r2
 801846e:	4299      	cmp	r1, r3
 8018470:	d039      	beq.n	80184e6 <UserFunctionForErasingFlash+0xbe>
 8018472:	4b23      	ldr	r3, [pc, #140]	; (8018500 <UserFunctionForErasingFlash+0xd8>)
 8018474:	ea03 2342 	and.w	r3, r3, r2, lsl #9
 8018478:	4a22      	ldr	r2, [pc, #136]	; (8018504 <UserFunctionForErasingFlash+0xdc>)
 801847a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801847e:	4293      	cmp	r3, r2
 8018480:	d834      	bhi.n	80184ec <UserFunctionForErasingFlash+0xc4>
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8018482:	f1c3 6301 	rsb	r3, r3, #135266304	; 0x8100000
 8018486:	f503 237f 	add.w	r3, r3, #1044480	; 0xff000
 801848a:	0b1b      	lsrs	r3, r3, #12
  EraseInitStruct.Page        = GetPage(MDM_FLASH_ADD);
 801848c:	9304      	str	r3, [sp, #16]
#ifndef STM32L4R9xx
  EraseInitStruct.NbPages     = 2; /* Each page is 2K */
#else /* STM32L4R9xx */
  EraseInitStruct.NbPages     = 1; /* Each page is 4k */
 801848e:	2301      	movs	r3, #1
 8018490:	9305      	str	r3, [sp, #20]
#endif /* STM32L4R9xx */

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8018492:	f7f1 fe3d 	bl	800a110 <HAL_FLASH_Unlock>
  
#ifdef STM32L4R9xx
   /* Clear OPTVERR bit set on virgin samples */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8018496:	4b1c      	ldr	r3, [pc, #112]	; (8018508 <UserFunctionForErasingFlash+0xe0>)
 8018498:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801849c:	611a      	str	r2, [r3, #16]
  /* Clear PEMPTY bit set (as the code is executed from Flash which is not empty) */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PEMPTY) != 0) {
 801849e:	691a      	ldr	r2, [r3, #16]
 80184a0:	0392      	lsls	r2, r2, #14
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PEMPTY);
 80184a2:	bf44      	itt	mi
 80184a4:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
 80184a8:	611a      	strmi	r2, [r3, #16]
  }
#endif /* STM32L4R9xx */

  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK){
 80184aa:	a901      	add	r1, sp, #4
 80184ac:	a802      	add	r0, sp, #8
 80184ae:	f7f1 ff37 	bl	800a320 <HAL_FLASHEx_Erase>
 80184b2:	b1f0      	cbz	r0, 80184f2 <UserFunctionForErasingFlash+0xca>
      User can add here some code to deal with this error. 
      SectorError will contain the faulty sector and then to know the code error on this sector,
      user can call function 'HAL_FLASH_GetError()'
      FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError(); */
    Success=0;
    Error_Handler();
 80184b4:	f000 fba7 	bl	8018c06 <Error_Handler>
    Success=0;
 80184b8:	2400      	movs	r4, #0
  }

  /* Lock the Flash to disable the flash control register access (recommended
  to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 80184ba:	f7f1 fe3b 	bl	800a134 <HAL_FLASH_Lock>

  return Success;
}
 80184be:	4620      	mov	r0, r4
 80184c0:	b006      	add	sp, #24
 80184c2:	bd10      	pop	{r4, pc}
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80184c4:	428b      	cmp	r3, r1
 80184c6:	d00c      	beq.n	80184e2 <UserFunctionForErasingFlash+0xba>
 80184c8:	4b0d      	ldr	r3, [pc, #52]	; (8018500 <UserFunctionForErasingFlash+0xd8>)
 80184ca:	ea03 2342 	and.w	r3, r3, r2, lsl #9
      bank = FLASH_BANK_2;
 80184ce:	4a0d      	ldr	r2, [pc, #52]	; (8018504 <UserFunctionForErasingFlash+0xdc>)
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80184d0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
      bank = FLASH_BANK_2;
 80184d4:	4293      	cmp	r3, r2
 80184d6:	bf94      	ite	ls
 80184d8:	2301      	movls	r3, #1
 80184da:	2302      	movhi	r3, #2
 80184dc:	e7c0      	b.n	8018460 <UserFunctionForErasingFlash+0x38>
 80184de:	2302      	movs	r3, #2
 80184e0:	e7be      	b.n	8018460 <UserFunctionForErasingFlash+0x38>
      bank = FLASH_BANK_1;
 80184e2:	2301      	movs	r3, #1
 80184e4:	e7bc      	b.n	8018460 <UserFunctionForErasingFlash+0x38>
  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80184e6:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 80184ea:	e7ca      	b.n	8018482 <UserFunctionForErasingFlash+0x5a>
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 80184ec:	f240 13ff 	movw	r3, #511	; 0x1ff
 80184f0:	e7cc      	b.n	801848c <UserFunctionForErasingFlash+0x64>
  uint32_t Success=1;
 80184f2:	2401      	movs	r4, #1
 80184f4:	e7e1      	b.n	80184ba <UserFunctionForErasingFlash+0x92>
 80184f6:	bf00      	nop
 80184f8:	40010000 	.word	0x40010000
 80184fc:	1fff7000 	.word	0x1fff7000
 8018500:	01fffe00 	.word	0x01fffe00
 8018504:	081ff000 	.word	0x081ff000
 8018508:	40022000 	.word	0x40022000

0801850c <UserFunctionForSavingFlash>:
 * @param void *InitMetaDataVector Pointer to the MDM beginning
 * @param void *EndMetaDataVector Pointer to the MDM end
 * @retval uint32_t Success/NotSuccess [1/0]
 */
uint32_t UserFunctionForSavingFlash(void *InitMetaDataVector,void *EndMetaDataVector)
{
 801850c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801850e:	4604      	mov	r4, r0
 8018510:	460d      	mov	r5, r1
  /* Store in Flash Memory */
  uint32_t Address = MDM_FLASH_ADD;
  uint64_t *WriteIndex;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8018512:	f7f1 fdfd 	bl	800a110 <HAL_FLASH_Unlock>
  uint32_t Address = MDM_FLASH_ADD;
 8018516:	4e0b      	ldr	r6, [pc, #44]	; (8018544 <UserFunctionForSavingFlash+0x38>)
  uint32_t Success=1;
 8018518:	2701      	movs	r7, #1
  for(WriteIndex =((uint64_t *) InitMetaDataVector); WriteIndex<((uint64_t *) EndMetaDataVector); WriteIndex++) {
 801851a:	42a5      	cmp	r5, r4
 801851c:	4623      	mov	r3, r4
 801851e:	d803      	bhi.n	8018528 <UserFunctionForSavingFlash+0x1c>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
   to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8018520:	f7f1 fe08 	bl	800a134 <HAL_FLASH_Lock>
 
  return Success;
}
 8018524:	4638      	mov	r0, r7
 8018526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,*WriteIndex) == HAL_OK){
 8018528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801852c:	4631      	mov	r1, r6
 801852e:	2000      	movs	r0, #0
 8018530:	3408      	adds	r4, #8
 8018532:	f7f1 fe35 	bl	800a1a0 <HAL_FLASH_Program>
 8018536:	b908      	cbnz	r0, 801853c <UserFunctionForSavingFlash+0x30>
      Address = Address + 8;
 8018538:	3608      	adds	r6, #8
 801853a:	e7ee      	b.n	801851a <UserFunctionForSavingFlash+0xe>
      Error_Handler();
 801853c:	f000 fb63 	bl	8018c06 <Error_Handler>
      Success =0;
 8018540:	2700      	movs	r7, #0
  for(WriteIndex =((uint64_t *) InitMetaDataVector); WriteIndex<((uint64_t *) EndMetaDataVector); WriteIndex++) {
 8018542:	e7ea      	b.n	801851a <UserFunctionForSavingFlash+0xe>
 8018544:	081ff000 	.word	0x081ff000

08018548 <HCI_TL_SPI_Init>:
int32_t HCI_TL_SPI_Init(void* pConf)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable GPIO Ports Clock */  
  __GPIOA_CLK_ENABLE();
 8018548:	4b32      	ldr	r3, [pc, #200]	; (8018614 <HCI_TL_SPI_Init+0xcc>)
{
 801854a:	b570      	push	{r4, r5, r6, lr}
  __GPIOA_CLK_ENABLE();
 801854c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 801854e:	4d32      	ldr	r5, [pc, #200]	; (8018618 <HCI_TL_SPI_Init+0xd0>)
  __GPIOA_CLK_ENABLE();
 8018550:	f042 0201 	orr.w	r2, r2, #1
 8018554:	64da      	str	r2, [r3, #76]	; 0x4c
 8018556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 8018558:	b08c      	sub	sp, #48	; 0x30
  __GPIOA_CLK_ENABLE();
 801855a:	f002 0201 	and.w	r2, r2, #1
 801855e:	9201      	str	r2, [sp, #4]
 8018560:	9a01      	ldr	r2, [sp, #4]
  __GPIOD_CLK_ENABLE();
 8018562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018564:	f042 0208 	orr.w	r2, r2, #8
 8018568:	64da      	str	r2, [r3, #76]	; 0x4c
 801856a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801856c:	f002 0208 	and.w	r2, r2, #8
 8018570:	9202      	str	r2, [sp, #8]
 8018572:	9a02      	ldr	r2, [sp, #8]
  __GPIOC_CLK_ENABLE();
 8018574:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018576:	f042 0204 	orr.w	r2, r2, #4
 801857a:	64da      	str	r2, [r3, #76]	; 0x4c
 801857c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801857e:	f002 0204 	and.w	r2, r2, #4
 8018582:	9203      	str	r2, [sp, #12]
 8018584:	9a03      	ldr	r2, [sp, #12]
  __GPIOG_CLK_ENABLE();
 8018586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801858c:	64da      	str	r2, [r3, #76]	; 0x4c
 801858e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018590:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8018594:	9204      	str	r2, [sp, #16]
 8018596:	9a04      	ldr	r2, [sp, #16]
  __SPI2_CLK_ENABLE();  
 8018598:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801859a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801859e:	659a      	str	r2, [r3, #88]	; 0x58
 80185a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80185a2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80185a6:	9205      	str	r2, [sp, #20]
 80185a8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 80185aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80185ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80185b0:	659a      	str	r2, [r3, #88]	; 0x58
 80185b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80185b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80185b8:	9306      	str	r3, [sp, #24]
 80185ba:	9b06      	ldr	r3, [sp, #24]
  HAL_PWREx_EnableVddUSB();  
 80185bc:	f7f3 f90e 	bl	800b7dc <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 80185c0:	f7f3 f914 	bl	800b7ec <HAL_PWREx_EnableVddIO2>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80185c4:	4b15      	ldr	r3, [pc, #84]	; (801861c <HCI_TL_SPI_Init+0xd4>)
 80185c6:	2202      	movs	r2, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80185c8:	2400      	movs	r4, #0
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80185ca:	a907      	add	r1, sp, #28
 80185cc:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80185ce:	e9cd 2307 	strd	r2, r3, [sp, #28]
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80185d2:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80185d4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80185d6:	f7f1 ff17 	bl	800a408 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80185da:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80185de:	a907      	add	r1, sp, #28
 80185e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80185e4:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80185e8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80185ec:	f7f1 ff0c 	bl	800a408 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80185f0:	4632      	mov	r2, r6
 80185f2:	4628      	mov	r0, r5
 80185f4:	2120      	movs	r1, #32
 80185f6:	f7f2 f879 	bl	800a6ec <HAL_GPIO_WritePin>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80185fa:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80185fc:	a907      	add	r1, sp, #28
 80185fe:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018600:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018604:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8018608:	f7f1 fefe 	bl	800a408 <HAL_GPIO_Init>
    
  return BSP_SPI2_Init();
 801860c:	f7ef fa80 	bl	8007b10 <BSP_SPI2_Init>
}
 8018610:	b00c      	add	sp, #48	; 0x30
 8018612:	bd70      	pop	{r4, r5, r6, pc}
 8018614:	40021000 	.word	0x40021000
 8018618:	48001800 	.word	0x48001800
 801861c:	10110000 	.word	0x10110000

08018620 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8018620:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 8018622:	4808      	ldr	r0, [pc, #32]	; (8018644 <HCI_TL_SPI_DeInit+0x24>)
 8018624:	2102      	movs	r1, #2
 8018626:	f7f1 ffc9 	bl	800a5bc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 801862a:	4806      	ldr	r0, [pc, #24]	; (8018644 <HCI_TL_SPI_DeInit+0x24>)
 801862c:	2120      	movs	r1, #32
 801862e:	f7f1 ffc5 	bl	800a5bc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 8018632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801863a:	f7f1 ffbf 	bl	800a5bc <HAL_GPIO_DeInit>
  return 0;
}
 801863e:	2000      	movs	r0, #0
 8018640:	bd08      	pop	{r3, pc}
 8018642:	bf00      	nop
 8018644:	48001800 	.word	0x48001800

08018648 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8018648:	b508      	push	{r3, lr}
  /* Deselect CS PIN for BlueNRG to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 801864a:	480d      	ldr	r0, [pc, #52]	; (8018680 <HCI_TL_SPI_Reset+0x38>)
 801864c:	2201      	movs	r2, #1
 801864e:	2120      	movs	r1, #32
 8018650:	f7f2 f84c 	bl	800a6ec <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8018654:	2200      	movs	r2, #0
 8018656:	f44f 7180 	mov.w	r1, #256	; 0x100
 801865a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801865e:	f7f2 f845 	bl	800a6ec <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8018662:	2005      	movs	r0, #5
 8018664:	f000 fac0 	bl	8018be8 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8018668:	2201      	movs	r2, #1
 801866a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801866e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018672:	f7f2 f83b 	bl	800a6ec <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 8018676:	2005      	movs	r0, #5
 8018678:	f000 fab6 	bl	8018be8 <HAL_Delay>
  
  return 0;
}  
 801867c:	2000      	movs	r0, #0
 801867e:	bd08      	pop	{r3, pc}
 8018680:	48001800 	.word	0x48001800

08018684 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8018684:	b510      	push	{r4, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8018686:	4c08      	ldr	r4, [pc, #32]	; (80186a8 <hci_tl_lowlevel_isr+0x24>)
 8018688:	2102      	movs	r1, #2
 801868a:	4620      	mov	r0, r4
 801868c:	f7f2 f828 	bl	800a6e0 <HAL_GPIO_ReadPin>
  /* Call hci_notify_asynch_evt() */
#ifdef HCI_TL
  while(IsDataAvailable())
 8018690:	2801      	cmp	r0, #1
 8018692:	d003      	beq.n	801869c <hci_tl_lowlevel_isr+0x18>
    }
  }
#endif /* HCI_TL */

  /* USER CODE BEGIN hci_tl_lowlevel_isr */
  HCI_ProcessEvent=1;
 8018694:	4b05      	ldr	r3, [pc, #20]	; (80186ac <hci_tl_lowlevel_isr+0x28>)
 8018696:	2201      	movs	r2, #1
 8018698:	601a      	str	r2, [r3, #0]
 801869a:	e004      	b.n	80186a6 <hci_tl_lowlevel_isr+0x22>
    if(hci_notify_asynch_evt(NULL)) {
 801869c:	2000      	movs	r0, #0
 801869e:	f7f7 f873 	bl	800f788 <hci_notify_asynch_evt>
 80186a2:	2800      	cmp	r0, #0
 80186a4:	d0f0      	beq.n	8018688 <hci_tl_lowlevel_isr+0x4>
  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 80186a6:	bd10      	pop	{r4, pc}
 80186a8:	48001800 	.word	0x48001800
 80186ac:	200124d0 	.word	0x200124d0

080186b0 <HCI_TL_SPI_Send>:
{  
 80186b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80186b4:	4b2f      	ldr	r3, [pc, #188]	; (8018774 <HCI_TL_SPI_Send+0xc4>)
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80186b6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8018778 <HCI_TL_SPI_Send+0xc8>
      BSP_SPI2_SendRecv(buffer, read_char_buf, size);
 80186ba:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 801877c <HCI_TL_SPI_Send+0xcc>
{  
 80186be:	b085      	sub	sp, #20
 80186c0:	4607      	mov	r7, r0
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80186c2:	6818      	ldr	r0, [r3, #0]
 80186c4:	791b      	ldrb	r3, [r3, #4]
 80186c6:	f88d 3004 	strb.w	r3, [sp, #4]
{  
 80186ca:	460d      	mov	r5, r1
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80186cc:	9000      	str	r0, [sp, #0]
  uint32_t tickstart = HAL_GetTick();
 80186ce:	f7ef ffa9 	bl	8008624 <HAL_GetTick>
 80186d2:	4606      	mov	r6, r0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80186d4:	2007      	movs	r0, #7
 80186d6:	f7f0 ff0d 	bl	80094f4 <HAL_NVIC_DisableIRQ>
    uint32_t tickstart_data_available = HAL_GetTick();
 80186da:	f7ef ffa3 	bl	8008624 <HAL_GetTick>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80186de:	2200      	movs	r2, #0
    uint32_t tickstart_data_available = HAL_GetTick();
 80186e0:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80186e2:	2120      	movs	r1, #32
 80186e4:	4640      	mov	r0, r8
 80186e6:	f7f2 f801 	bl	800a6ec <HAL_GPIO_WritePin>
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80186ea:	2102      	movs	r1, #2
 80186ec:	4640      	mov	r0, r8
 80186ee:	f7f1 fff7 	bl	800a6e0 <HAL_GPIO_ReadPin>
    while(!IsDataAvailable())
 80186f2:	2801      	cmp	r0, #1
 80186f4:	d10b      	bne.n	801870e <HCI_TL_SPI_Send+0x5e>
    BSP_SPI2_SendRecv(header_master, header_slave, HEADER_SIZE);
 80186f6:	2205      	movs	r2, #5
 80186f8:	a902      	add	r1, sp, #8
 80186fa:	4668      	mov	r0, sp
 80186fc:	f7ef f990 	bl	8007a20 <BSP_SPI2_SendRecv>
    if(rx_bytes >= size)
 8018700:	f8bd 3009 	ldrh.w	r3, [sp, #9]
 8018704:	42ab      	cmp	r3, r5
 8018706:	d219      	bcs.n	801873c <HCI_TL_SPI_Send+0x8c>
      result = -2;
 8018708:	f06f 0401 	mvn.w	r4, #1
 801870c:	e01c      	b.n	8018748 <HCI_TL_SPI_Send+0x98>
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 801870e:	f7ef ff89 	bl	8008624 <HAL_GetTick>
 8018712:	1b00      	subs	r0, r0, r4
 8018714:	280f      	cmp	r0, #15
 8018716:	d9e8      	bls.n	80186ea <HCI_TL_SPI_Send+0x3a>
      result = -2;
 8018718:	f06f 0402 	mvn.w	r4, #2
  tickstart = HAL_GetTick();
 801871c:	f7ef ff82 	bl	8008624 <HAL_GetTick>
  while(((HCI_TL_SPI_EXTI_PORT->IDR & HCI_TL_SPI_EXTI_PIN) != 0x00u) && result != -4)
 8018720:	4e15      	ldr	r6, [pc, #84]	; (8018778 <HCI_TL_SPI_Send+0xc8>)
  tickstart = HAL_GetTick();
 8018722:	4605      	mov	r5, r0
  while(((HCI_TL_SPI_EXTI_PORT->IDR & HCI_TL_SPI_EXTI_PIN) != 0x00u) && result != -4)
 8018724:	6933      	ldr	r3, [r6, #16]
 8018726:	079a      	lsls	r2, r3, #30
 8018728:	d501      	bpl.n	801872e <HCI_TL_SPI_Send+0x7e>
 801872a:	1d23      	adds	r3, r4, #4
 801872c:	d119      	bne.n	8018762 <HCI_TL_SPI_Send+0xb2>
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);  
 801872e:	2007      	movs	r0, #7
 8018730:	f7f0 fed2 	bl	80094d8 <HAL_NVIC_EnableIRQ>
}
 8018734:	4620      	mov	r0, r4
 8018736:	b005      	add	sp, #20
 8018738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      BSP_SPI2_SendRecv(buffer, read_char_buf, size);
 801873c:	462a      	mov	r2, r5
 801873e:	4649      	mov	r1, r9
 8018740:	4638      	mov	r0, r7
 8018742:	f7ef f96d 	bl	8007a20 <BSP_SPI2_SendRecv>
    result = 0;
 8018746:	2400      	movs	r4, #0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8018748:	2201      	movs	r2, #1
 801874a:	2120      	movs	r1, #32
 801874c:	4640      	mov	r0, r8
 801874e:	f7f1 ffcd 	bl	800a6ec <HAL_GPIO_WritePin>
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8018752:	f7ef ff67 	bl	8008624 <HAL_GetTick>
 8018756:	1b80      	subs	r0, r0, r6
 8018758:	280f      	cmp	r0, #15
 801875a:	d8dd      	bhi.n	8018718 <HCI_TL_SPI_Send+0x68>
  } while(result < 0);
 801875c:	2c00      	cmp	r4, #0
 801875e:	d1bc      	bne.n	80186da <HCI_TL_SPI_Send+0x2a>
 8018760:	e7dc      	b.n	801871c <HCI_TL_SPI_Send+0x6c>
    if((HAL_GetTick() - tickstart) > TIMEOUT_IRQ_HIGH)
 8018762:	f7ef ff5f 	bl	8008624 <HAL_GetTick>
 8018766:	1b40      	subs	r0, r0, r5
      result = -4;
 8018768:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801876c:	bf88      	it	hi
 801876e:	f06f 0403 	mvnhi.w	r4, #3
 8018772:	e7d7      	b.n	8018724 <HCI_TL_SPI_Send+0x74>
 8018774:	0802277c 	.word	0x0802277c
 8018778:	48001800 	.word	0x48001800
 801877c:	20012324 	.word	0x20012324

08018780 <HCI_TL_SPI_Receive>:
{
 8018780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018782:	b087      	sub	sp, #28
  uint8_t char_ff = 0xff;
 8018784:	23ff      	movs	r3, #255	; 0xff
 8018786:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 801878a:	4b25      	ldr	r3, [pc, #148]	; (8018820 <HCI_TL_SPI_Receive+0xa0>)
{
 801878c:	4606      	mov	r6, r0
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 801878e:	f8d3 0005 	ldr.w	r0, [r3, #5]
 8018792:	9002      	str	r0, [sp, #8]
 8018794:	7a5b      	ldrb	r3, [r3, #9]
 8018796:	f88d 300c 	strb.w	r3, [sp, #12]
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 801879a:	2007      	movs	r0, #7
{
 801879c:	460c      	mov	r4, r1
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 801879e:	f7f0 fea9 	bl	80094f4 <HAL_NVIC_DisableIRQ>
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80187a2:	4820      	ldr	r0, [pc, #128]	; (8018824 <HCI_TL_SPI_Receive+0xa4>)
 80187a4:	2200      	movs	r2, #0
 80187a6:	2120      	movs	r1, #32
 80187a8:	f7f1 ffa0 	bl	800a6ec <HAL_GPIO_WritePin>
  BSP_SPI2_SendRecv(header_master, header_slave, HEADER_SIZE);
 80187ac:	2205      	movs	r2, #5
 80187ae:	a904      	add	r1, sp, #16
 80187b0:	a802      	add	r0, sp, #8
 80187b2:	f7ef f935 	bl	8007a20 <BSP_SPI2_SendRecv>
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80187b6:	f8bd 5013 	ldrh.w	r5, [sp, #19]
  if(byte_count > 0)
 80187ba:	b145      	cbz	r5, 80187ce <HCI_TL_SPI_Receive+0x4e>
    if (byte_count > size)
 80187bc:	42ac      	cmp	r4, r5
 80187be:	bf28      	it	cs
 80187c0:	462c      	movcs	r4, r5
    for(len = 0; len < byte_count; len++)
 80187c2:	2300      	movs	r3, #0
 80187c4:	b2dd      	uxtb	r5, r3
 80187c6:	42ac      	cmp	r4, r5
 80187c8:	f103 0701 	add.w	r7, r3, #1
 80187cc:	d813      	bhi.n	80187f6 <HCI_TL_SPI_Receive+0x76>
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80187ce:	4815      	ldr	r0, [pc, #84]	; (8018824 <HCI_TL_SPI_Receive+0xa4>)
  while(((HCI_TL_SPI_EXTI_PORT->IDR & HCI_TL_SPI_EXTI_PIN) != 0x00u) && timeout != 1)
 80187d0:	4e14      	ldr	r6, [pc, #80]	; (8018824 <HCI_TL_SPI_Receive+0xa4>)
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80187d2:	2201      	movs	r2, #1
 80187d4:	2120      	movs	r1, #32
 80187d6:	f7f1 ff89 	bl	800a6ec <HAL_GPIO_WritePin>
  uint32_t tickstart = HAL_GetTick();
 80187da:	f7ef ff23 	bl	8008624 <HAL_GetTick>
  int32_t timeout = 0;
 80187de:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 80187e0:	4604      	mov	r4, r0
  while(((HCI_TL_SPI_EXTI_PORT->IDR & HCI_TL_SPI_EXTI_PIN) != 0x00u) && timeout != 1)
 80187e2:	6932      	ldr	r2, [r6, #16]
 80187e4:	0792      	lsls	r2, r2, #30
 80187e6:	d500      	bpl.n	80187ea <HCI_TL_SPI_Receive+0x6a>
 80187e8:	b18b      	cbz	r3, 801880e <HCI_TL_SPI_Receive+0x8e>
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);  
 80187ea:	2007      	movs	r0, #7
 80187ec:	f7f0 fe74 	bl	80094d8 <HAL_NVIC_EnableIRQ>
}
 80187f0:	4628      	mov	r0, r5
 80187f2:	b007      	add	sp, #28
 80187f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      BSP_SPI2_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80187f6:	2201      	movs	r2, #1
 80187f8:	f10d 0107 	add.w	r1, sp, #7
 80187fc:	f10d 0006 	add.w	r0, sp, #6
 8018800:	f7ef f90e 	bl	8007a20 <BSP_SPI2_SendRecv>
      buffer[len] = read_char;
 8018804:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018808:	5573      	strb	r3, [r6, r5]
 801880a:	463b      	mov	r3, r7
 801880c:	e7da      	b.n	80187c4 <HCI_TL_SPI_Receive+0x44>
    if((HAL_GetTick() - tickstart) > TIMEOUT_IRQ_HIGH)
 801880e:	f7ef ff09 	bl	8008624 <HAL_GetTick>
 8018812:	1b03      	subs	r3, r0, r4
 8018814:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018818:	bf94      	ite	ls
 801881a:	2300      	movls	r3, #0
 801881c:	2301      	movhi	r3, #1
 801881e:	e7e0      	b.n	80187e2 <HCI_TL_SPI_Receive+0x62>
 8018820:	0802277c 	.word	0x0802277c
 8018824:	48001800 	.word	0x48001800

08018828 <hci_tl_lowlevel_init>:
{
 8018828:	b510      	push	{r4, lr}
 801882a:	b088      	sub	sp, #32
  fops.Init    = HCI_TL_SPI_Init;
 801882c:	4b11      	ldr	r3, [pc, #68]	; (8018874 <hci_tl_lowlevel_init+0x4c>)
 801882e:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8018830:	4b11      	ldr	r3, [pc, #68]	; (8018878 <hci_tl_lowlevel_init+0x50>)
 8018832:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8018834:	4b11      	ldr	r3, [pc, #68]	; (801887c <hci_tl_lowlevel_init+0x54>)
 8018836:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8018838:	4b11      	ldr	r3, [pc, #68]	; (8018880 <hci_tl_lowlevel_init+0x58>)
  HAL_EXTI_GetHandle(&hexti1, EXTI_LINE_1);
 801883a:	4c12      	ldr	r4, [pc, #72]	; (8018884 <hci_tl_lowlevel_init+0x5c>)
  fops.Receive = HCI_TL_SPI_Receive;
 801883c:	9304      	str	r3, [sp, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 801883e:	4b12      	ldr	r3, [pc, #72]	; (8018888 <hci_tl_lowlevel_init+0x60>)
 8018840:	9303      	str	r3, [sp, #12]
  hci_register_io_bus (&fops);
 8018842:	a801      	add	r0, sp, #4
  fops.GetTick = BSP_GetTick;
 8018844:	4b11      	ldr	r3, [pc, #68]	; (801888c <hci_tl_lowlevel_init+0x64>)
 8018846:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 8018848:	f7f6 feb6 	bl	800f5b8 <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti1, EXTI_LINE_1);
 801884c:	4910      	ldr	r1, [pc, #64]	; (8018890 <hci_tl_lowlevel_init+0x68>)
 801884e:	4620      	mov	r0, r4
 8018850:	f7f1 fc2a 	bl	800a0a8 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti1, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8018854:	4a0f      	ldr	r2, [pc, #60]	; (8018894 <hci_tl_lowlevel_init+0x6c>)
 8018856:	2100      	movs	r1, #0
 8018858:	4620      	mov	r0, r4
 801885a:	f7f1 fc1f 	bl	800a09c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0x03, 0x00);
 801885e:	2200      	movs	r2, #0
 8018860:	2103      	movs	r1, #3
 8018862:	2007      	movs	r0, #7
 8018864:	f7f0 fe06 	bl	8009474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8018868:	2007      	movs	r0, #7
 801886a:	f7f0 fe35 	bl	80094d8 <HAL_NVIC_EnableIRQ>
}
 801886e:	b008      	add	sp, #32
 8018870:	bd10      	pop	{r4, pc}
 8018872:	bf00      	nop
 8018874:	08018549 	.word	0x08018549
 8018878:	08018621 	.word	0x08018621
 801887c:	080186b1 	.word	0x080186b1
 8018880:	08018781 	.word	0x08018781
 8018884:	20012424 	.word	0x20012424
 8018888:	08018649 	.word	0x08018649
 801888c:	08007ac5 	.word	0x08007ac5
 8018890:	16000001 	.word	0x16000001
 8018894:	08018685 	.word	0x08018685

08018898 <AudioProcess_DB_Noise>:
* @brief  User function that is called when 1 ms of PDM data is available.
* @param  none
* @retval None
*/
static void AudioProcess_DB_Noise(void)
{
 8018898:	b510      	push	{r4, lr}
  int32_t i;
  int32_t NumberMic;
  
  if(AudioLevelEnable) {
 801889a:	4a16      	ldr	r2, [pc, #88]	; (80188f4 <AudioProcess_DB_Noise+0x5c>)
 801889c:	7813      	ldrb	r3, [r2, #0]
 801889e:	b33b      	cbz	r3, 80188f0 <AudioProcess_DB_Noise+0x58>
    for(i = 0; i < (NumSample/2); i++){
 80188a0:	4b15      	ldr	r3, [pc, #84]	; (80188f8 <AudioProcess_DB_Noise+0x60>)
 80188a2:	edd2 6a01 	vldr	s13, [r2, #4]
 80188a6:	681c      	ldr	r4, [r3, #0]
 80188a8:	ed92 7a02 	vldr	s14, [r2, #8]
 80188ac:	4913      	ldr	r1, [pc, #76]	; (80188fc <AudioProcess_DB_Noise+0x64>)
 80188ae:	2300      	movs	r3, #0
 80188b0:	0864      	lsrs	r4, r4, #1
 80188b2:	4618      	mov	r0, r3
 80188b4:	42a0      	cmp	r0, r4
 80188b6:	f101 0104 	add.w	r1, r1, #4
 80188ba:	d014      	beq.n	80188e6 <AudioProcess_DB_Noise+0x4e>
      for(NumberMic=0;NumberMic<AUDIO_IN_CHANNELS;NumberMic++) {
        RMS_Ch[NumberMic] += (float)((int16_t)PCM_Buffer[i*AUDIO_IN_CHANNELS+NumberMic] * ((int16_t)PCM_Buffer[i*AUDIO_IN_CHANNELS+NumberMic]));
 80188bc:	f931 3c04 	ldrsh.w	r3, [r1, #-4]
 80188c0:	435b      	muls	r3, r3
 80188c2:	ee07 3a90 	vmov	s15, r3
 80188c6:	f931 3c02 	ldrsh.w	r3, [r1, #-2]
 80188ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80188ce:	435b      	muls	r3, r3
 80188d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80188d4:	ee07 3a90 	vmov	s15, r3
 80188d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for(i = 0; i < (NumSample/2); i++){
 80188dc:	3001      	adds	r0, #1
        RMS_Ch[NumberMic] += (float)((int16_t)PCM_Buffer[i*AUDIO_IN_CHANNELS+NumberMic] * ((int16_t)PCM_Buffer[i*AUDIO_IN_CHANNELS+NumberMic]));
 80188de:	ee37 7a27 	vadd.f32	s14, s14, s15
    for(i = 0; i < (NumSample/2); i++){
 80188e2:	2301      	movs	r3, #1
 80188e4:	e7e6      	b.n	80188b4 <AudioProcess_DB_Noise+0x1c>
 80188e6:	b11b      	cbz	r3, 80188f0 <AudioProcess_DB_Noise+0x58>
 80188e8:	edc2 6a01 	vstr	s13, [r2, #4]
 80188ec:	ed82 7a02 	vstr	s14, [r2, #8]
      }
    }
  }
}
 80188f0:	bd10      	pop	{r4, pc}
 80188f2:	bf00      	nop
 80188f4:	2001242c 	.word	0x2001242c
 80188f8:	2000050c 	.word	0x2000050c
 80188fc:	200122e4 	.word	0x200122e4

08018900 <ReadEnvironmentalData>:
  * @param  int16_t *Temp1ToSend
  * @param  int16_t *Temp2ToSend
  * @retval None
  */
void ReadEnvironmentalData(int32_t *PressToSend,uint16_t *HumToSend,int16_t *Temp1ToSend,int16_t *Temp2ToSend)
{
 8018900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018904:	4607      	mov	r7, r0
  *PressToSend=0;
  *HumToSend=0;
  *Temp2ToSend=0,*Temp1ToSend=0;

  /* Read Humidity */
  if(TargetBoardFeatures.HumSensorIsInit) {
 8018906:	4e42      	ldr	r6, [pc, #264]	; (8018a10 <ReadEnvironmentalData+0x110>)
  *PressToSend=0;
 8018908:	2000      	movs	r0, #0
 801890a:	6038      	str	r0, [r7, #0]
  *HumToSend=0;
 801890c:	8008      	strh	r0, [r1, #0]
  *Temp2ToSend=0,*Temp1ToSend=0;
 801890e:	8018      	strh	r0, [r3, #0]
 8018910:	8010      	strh	r0, [r2, #0]
{
 8018912:	461d      	mov	r5, r3
  if(TargetBoardFeatures.HumSensorIsInit) {
 8018914:	78f3      	ldrb	r3, [r6, #3]
{
 8018916:	4689      	mov	r9, r1
 8018918:	4690      	mov	r8, r2
  if(TargetBoardFeatures.HumSensorIsInit) {
 801891a:	b1db      	cbz	r3, 8018954 <ReadEnvironmentalData+0x54>
    ENV_SENSOR_GetValue(HUMIDITY_INSTANCE,ENV_HUMIDITY,&SensorValue);
 801891c:	aa01      	add	r2, sp, #4
 801891e:	2104      	movs	r1, #4
 8018920:	f7ef fb74 	bl	800800c <BSP_ENV_SENSOR_GetValue>
    MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8018924:	eddd 7a01 	vldr	s15, [sp, #4]
 8018928:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801892c:	ee17 4a10 	vmov	r4, s14
 8018930:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    *HumToSend = intPart*10+decPart;
 8018934:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8018938:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801893c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8018940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    *HumToSend = intPart*10+decPart;
 8018948:	ee17 3a90 	vmov	r3, s15
 801894c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8018950:	f8a9 4000 	strh.w	r4, [r9]
  }

  /* Read Temperature for sensor 1 */
  if(TargetBoardFeatures.TempSensorsIsInit[0]){
 8018954:	7833      	ldrb	r3, [r6, #0]
 8018956:	b1e3      	cbz	r3, 8018992 <ReadEnvironmentalData+0x92>
    ENV_SENSOR_GetValue(TEMPERATURE_INSTANCE_1,ENV_TEMPERATURE,&SensorValue);
 8018958:	2101      	movs	r1, #1
 801895a:	aa01      	add	r2, sp, #4
 801895c:	2000      	movs	r0, #0
 801895e:	f7ef fb55 	bl	800800c <BSP_ENV_SENSOR_GetValue>
    MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8018962:	eddd 7a01 	vldr	s15, [sp, #4]
 8018966:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801896a:	ee17 1a10 	vmov	r1, s14
 801896e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    *Temp1ToSend = intPart*10+decPart;
 8018972:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8018976:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801897a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801897e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    *Temp1ToSend = intPart*10+decPart;
 8018986:	ee17 3a90 	vmov	r3, s15
 801898a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 801898e:	f8a8 1000 	strh.w	r1, [r8]
  }
  
  /* Read Pressure */
  if(TargetBoardFeatures.PressSensorIsInit){
 8018992:	78b3      	ldrb	r3, [r6, #2]
 8018994:	b1d3      	cbz	r3, 80189cc <ReadEnvironmentalData+0xcc>
    ENV_SENSOR_GetValue(PRESSURE_INSTANCE,ENV_PRESSURE,&SensorValue);
 8018996:	aa01      	add	r2, sp, #4
 8018998:	2102      	movs	r1, #2
 801899a:	2001      	movs	r0, #1
 801899c:	f7ef fb36 	bl	800800c <BSP_ENV_SENSOR_GetValue>
    MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 80189a0:	eddd 7a01 	vldr	s15, [sp, #4]
 80189a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    *PressToSend=intPart*100+decPart;
 80189a8:	2264      	movs	r2, #100	; 0x64
    MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 80189aa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    *PressToSend=intPart*100+decPart;
 80189ae:	ee17 1a10 	vmov	r1, s14
    MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 80189b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80189b6:	eddf 6a17 	vldr	s13, [pc, #92]	; 8018a14 <ReadEnvironmentalData+0x114>
 80189ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80189be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    *PressToSend=intPart*100+decPart;
 80189c2:	ee17 3a90 	vmov	r3, s15
 80189c6:	fb02 3201 	mla	r2, r2, r1, r3
 80189ca:	603a      	str	r2, [r7, #0]
  }

  /* Read Temperature for sensor 2 */
  if(TargetBoardFeatures.TempSensorsIsInit[1]) {
 80189cc:	7873      	ldrb	r3, [r6, #1]
 80189ce:	b1db      	cbz	r3, 8018a08 <ReadEnvironmentalData+0x108>
    ENV_SENSOR_GetValue(TEMPERATURE_INSTANCE_2,ENV_TEMPERATURE,&SensorValue);
 80189d0:	2101      	movs	r1, #1
 80189d2:	aa01      	add	r2, sp, #4
 80189d4:	4608      	mov	r0, r1
 80189d6:	f7ef fb19 	bl	800800c <BSP_ENV_SENSOR_GetValue>
    MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 80189da:	eddd 7a01 	vldr	s15, [sp, #4]
 80189de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80189e2:	ee17 2a10 	vmov	r2, s14
 80189e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    *Temp2ToSend = intPart*10+decPart;
 80189ea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 80189ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80189f2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80189f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80189fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    *Temp2ToSend = intPart*10+decPart;
 80189fe:	ee17 3a90 	vmov	r3, s15
 8018a02:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8018a06:	802a      	strh	r2, [r5, #0]
  }
}
 8018a08:	b003      	add	sp, #12
 8018a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a0e:	bf00      	nop
 8018a10:	20012000 	.word	0x20012000
 8018a14:	42c80000 	.word	0x42c80000

08018a18 <getBlueNRG2_Version>:
 * @param  Hardware version
 * @param  Firmware version
 * @retval Status
 */
uint8_t getBlueNRG2_Version(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8018a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a1c:	b0ce      	sub	sp, #312	; 0x138
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;
  uint8_t DTM_version_major, DTM_version_minor, DTM_version_patch, DTM_variant, BTLE_Stack_version_major, BTLE_Stack_version_minor, BTLE_Stack_version_patch, BTLE_Stack_development;
  uint16_t DTM_Build_Number, BTLE_Stack_variant, BTLE_Stack_Build_Number;


  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version, 
 8018a1e:	ab0c      	add	r3, sp, #48	; 0x30
 8018a20:	9300      	str	r3, [sp, #0]
 8018a22:	f10d 0223 	add.w	r2, sp, #35	; 0x23
{
 8018a26:	4604      	mov	r4, r0
 8018a28:	460d      	mov	r5, r1
  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version, 
 8018a2a:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8018a2e:	a90b      	add	r1, sp, #44	; 0x2c
 8018a30:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8018a34:	f7f6 fcf6 	bl	800f424 <hci_read_local_version_information>
				                              &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8018a38:	4602      	mov	r2, r0
 8018a3a:	bb90      	cbnz	r0, 8018aa2 <getBlueNRG2_Version+0x8a>
    *hwVersion = hci_revision >> 8;
 8018a3c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8018a40:	0a1b      	lsrs	r3, r3, #8
 8018a42:	7023      	strb	r3, [r4, #0]
  else {
    PREDMNT1_PRINTF("Error= %x \r\n", status);
  }
  
  
  status = aci_hal_get_firmware_details(&DTM_version_major,
 8018a44:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8018a48:	9306      	str	r3, [sp, #24]
 8018a4a:	ab0d      	add	r3, sp, #52	; 0x34
 8018a4c:	9305      	str	r3, [sp, #20]
 8018a4e:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 8018a52:	9304      	str	r3, [sp, #16]
 8018a54:	f10d 062a 	add.w	r6, sp, #42	; 0x2a
 8018a58:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8018a5c:	f10d 0729 	add.w	r7, sp, #41	; 0x29
 8018a60:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8018a64:	9300      	str	r3, [sp, #0]
 8018a66:	9603      	str	r6, [sp, #12]
 8018a68:	9702      	str	r7, [sp, #8]
 8018a6a:	f8cd 8004 	str.w	r8, [sp, #4]
 8018a6e:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 8018a72:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8018a76:	f10d 0125 	add.w	r1, sp, #37	; 0x25
 8018a7a:	a809      	add	r0, sp, #36	; 0x24
 8018a7c:	f7f6 f8c8 	bl	800ec10 <aci_hal_get_firmware_details>
                                        &BTLE_Stack_version_patch,
                                        &BTLE_Stack_development,
                                        &BTLE_Stack_variant,
                                        &BTLE_Stack_Build_Number);
  
  if (status == BLE_STATUS_SUCCESS) {
 8018a80:	4604      	mov	r4, r0
 8018a82:	b9b8      	cbnz	r0, 8018ab4 <getBlueNRG2_Version+0x9c>
    *fwVersion = BTLE_Stack_version_major  << 8;  // Major Version Number
    *fwVersion |= BTLE_Stack_version_minor << 4;  // Minor Version Number
 8018a84:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    *fwVersion = BTLE_Stack_version_major  << 8;  // Major Version Number
 8018a88:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    *fwVersion |= BTLE_Stack_version_minor << 4;  // Minor Version Number
 8018a8c:	011b      	lsls	r3, r3, #4
 8018a8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    *fwVersion |= BTLE_Stack_version_patch;       // Patch Version Number
 8018a92:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8018a96:	4313      	orrs	r3, r2
 8018a98:	802b      	strh	r3, [r5, #0]
    PREDMNT1_PRINTF("Error= %x \r\n", status);
  }
  
    
  return status;
}
 8018a9a:	4620      	mov	r0, r4
 8018a9c:	b04e      	add	sp, #312	; 0x138
 8018a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PREDMNT1_PRINTF("Error= %x \r\n", status);
 8018aa2:	4909      	ldr	r1, [pc, #36]	; (8018ac8 <getBlueNRG2_Version+0xb0>)
 8018aa4:	a80e      	add	r0, sp, #56	; 0x38
 8018aa6:	f004 f947 	bl	801cd38 <siprintf>
 8018aaa:	4601      	mov	r1, r0
 8018aac:	a80e      	add	r0, sp, #56	; 0x38
 8018aae:	f000 ff7d 	bl	80199ac <CDC_Fill_Buffer>
 8018ab2:	e7c7      	b.n	8018a44 <getBlueNRG2_Version+0x2c>
    PREDMNT1_PRINTF("Error= %x \r\n", status);
 8018ab4:	4602      	mov	r2, r0
 8018ab6:	4904      	ldr	r1, [pc, #16]	; (8018ac8 <getBlueNRG2_Version+0xb0>)
 8018ab8:	a80e      	add	r0, sp, #56	; 0x38
 8018aba:	f004 f93d 	bl	801cd38 <siprintf>
 8018abe:	4601      	mov	r1, r0
 8018ac0:	a80e      	add	r0, sp, #56	; 0x38
 8018ac2:	f000 ff73 	bl	80199ac <CDC_Fill_Buffer>
 8018ac6:	e7e8      	b.n	8018a9a <getBlueNRG2_Version+0x82>
 8018ac8:	0802535e 	.word	0x0802535e

08018acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8018acc:	b538      	push	{r3, r4, r5, lr}
  uint32_t uhCapture=0;

  /* TIM1_CH1 toggling with frequency = 2 Hz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8018ace:	7f05      	ldrb	r5, [r0, #28]
 8018ad0:	2d01      	cmp	r5, #1
{
 8018ad2:	4604      	mov	r4, r0
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8018ad4:	d109      	bne.n	8018aea <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
     uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8018ad6:	2100      	movs	r1, #0
 8018ad8:	f7f4 fbf6 	bl	800d2c8 <HAL_TIM_ReadCapturedValue>
    /* Set the Capture Compare Register value (for environmental sensor) */
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 8018adc:	491a      	ldr	r1, [pc, #104]	; (8018b48 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8018ade:	4b1b      	ldr	r3, [pc, #108]	; (8018b4c <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8018ae0:	6849      	ldr	r1, [r1, #4]
 8018ae2:	68da      	ldr	r2, [r3, #12]
 8018ae4:	4408      	add	r0, r1
 8018ae6:	6350      	str	r0, [r2, #52]	; 0x34
    SendEnv=1;
 8018ae8:	659d      	str	r5, [r3, #88]	; 0x58
  }
 
  /* TIM1_CH2 toggling with frequency = 20 Hz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8018aea:	7f23      	ldrb	r3, [r4, #28]
 8018aec:	2b02      	cmp	r3, #2
 8018aee:	d10b      	bne.n	8018b08 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
  {
     uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8018af0:	2104      	movs	r1, #4
 8018af2:	4620      	mov	r0, r4
 8018af4:	f7f4 fbe8 	bl	800d2c8 <HAL_TIM_ReadCapturedValue>
    /* Set the Capture Compare Register value (for mic audio level) */
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_2, (uhCapture + uhCCR2_Val));
 8018af8:	4913      	ldr	r1, [pc, #76]	; (8018b48 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8018afa:	4b14      	ldr	r3, [pc, #80]	; (8018b4c <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8018afc:	6889      	ldr	r1, [r1, #8]
 8018afe:	68da      	ldr	r2, [r3, #12]
 8018b00:	4408      	add	r0, r1
 8018b02:	6390      	str	r0, [r2, #56]	; 0x38
    SendAudioLevel=1;
 8018b04:	2201      	movs	r2, #1
 8018b06:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* TIM1_CH3 toggling with frequency = 20 Hz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8018b08:	7f23      	ldrb	r3, [r4, #28]
 8018b0a:	2b04      	cmp	r3, #4
 8018b0c:	d10b      	bne.n	8018b26 <HAL_TIM_OC_DelayElapsedCallback+0x5a>
  {
     uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8018b0e:	2108      	movs	r1, #8
 8018b10:	4620      	mov	r0, r4
 8018b12:	f7f4 fbd9 	bl	800d2c8 <HAL_TIM_ReadCapturedValue>
    /* Set the Capture Compare Register value (for Acc/Gyro/Mag sensor) */
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_3, (uhCapture + uhCCR3_Val));
 8018b16:	490c      	ldr	r1, [pc, #48]	; (8018b48 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8018b18:	4b0c      	ldr	r3, [pc, #48]	; (8018b4c <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8018b1a:	68c9      	ldr	r1, [r1, #12]
 8018b1c:	68da      	ldr	r2, [r3, #12]
 8018b1e:	4408      	add	r0, r1
 8018b20:	63d0      	str	r0, [r2, #60]	; 0x3c
    SendAccGyroMag=1;
 8018b22:	2201      	movs	r2, #1
 8018b24:	661a      	str	r2, [r3, #96]	; 0x60
  }
  
  /* TIM1_CH4 toggling with frequency = 20 Hz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8018b26:	7f23      	ldrb	r3, [r4, #28]
 8018b28:	2b08      	cmp	r3, #8
 8018b2a:	d10b      	bne.n	8018b44 <HAL_TIM_OC_DelayElapsedCallback+0x78>
  {
     uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8018b2c:	210c      	movs	r1, #12
 8018b2e:	4620      	mov	r0, r4
 8018b30:	f7f4 fbca 	bl	800d2c8 <HAL_TIM_ReadCapturedValue>
    /* Set the Capture Compare Register value (for battery info) */
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
 8018b34:	4904      	ldr	r1, [pc, #16]	; (8018b48 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8018b36:	4b05      	ldr	r3, [pc, #20]	; (8018b4c <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8018b38:	6909      	ldr	r1, [r1, #16]
 8018b3a:	68da      	ldr	r2, [r3, #12]
 8018b3c:	4408      	add	r0, r1
 8018b3e:	6410      	str	r0, [r2, #64]	; 0x40
    SendBatteryInfo=1;
 8018b40:	2201      	movs	r2, #1
 8018b42:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 8018b44:	bd38      	pop	{r3, r4, r5, pc}
 8018b46:	bf00      	nop
 8018b48:	2000050c 	.word	0x2000050c
 8018b4c:	2001242c 	.word	0x2001242c

08018b50 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == STBC02_USED_TIM) {
 8018b50:	6801      	ldr	r1, [r0, #0]
 8018b52:	4a05      	ldr	r2, [pc, #20]	; (8018b68 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8018b54:	4291      	cmp	r1, r2
 8018b56:	d101      	bne.n	8018b5c <HAL_TIM_PeriodElapsedCallback+0xc>
    BC_CmdMng();
 8018b58:	f7ee bd14 	b.w	8007584 <BC_CmdMng>
#ifdef PREDMNT1_ENABLE_PRINTF
    } else if(htim == (&TimHandle)) {
 8018b5c:	4a03      	ldr	r2, [pc, #12]	; (8018b6c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8018b5e:	4290      	cmp	r0, r2
 8018b60:	d101      	bne.n	8018b66 <HAL_TIM_PeriodElapsedCallback+0x16>
      CDC_TIM_PeriodElapsedCallback(htim);
 8018b62:	f000 bf3f 	b.w	80199e4 <CDC_TIM_PeriodElapsedCallback>
#endif /* PREDMNT1_ENABLE_PRINTF */
  }
}
 8018b66:	4770      	bx	lr
 8018b68:	40001400 	.word	0x40001400
 8018b6c:	200124d8 	.word	0x200124d8

08018b70 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim : hadc handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8018b70:	7f03      	ldrb	r3, [r0, #28]
 8018b72:	2b04      	cmp	r3, #4
 8018b74:	d101      	bne.n	8018b7a <HAL_TIM_IC_CaptureCallback+0xa>
  {
    BSP_BC_ChgPinHasToggled();
 8018b76:	f7ee bd85 	b.w	8007684 <BSP_BC_ChgPinHasToggled>
  }
}
 8018b7a:	4770      	bx	lr

08018b7c <BSP_AUDIO_IN_HalfTransfer_CallBack>:
 8018b7c:	4b02      	ldr	r3, [pc, #8]	; (8018b88 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xc>)
 8018b7e:	781b      	ldrb	r3, [r3, #0]
 8018b80:	b10b      	cbz	r3, 8018b86 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa>
 8018b82:	f7ff be89 	b.w	8018898 <AudioProcess_DB_Noise>
 8018b86:	4770      	bx	lr
 8018b88:	2001242c 	.word	0x2001242c

08018b8c <BSP_AUDIO_IN_TransferComplete_CallBack>:
  if(AudioLevelEnable)
 8018b8c:	4b02      	ldr	r3, [pc, #8]	; (8018b98 <BSP_AUDIO_IN_TransferComplete_CallBack+0xc>)
 8018b8e:	781b      	ldrb	r3, [r3, #0]
 8018b90:	b10b      	cbz	r3, 8018b96 <BSP_AUDIO_IN_TransferComplete_CallBack+0xa>
    AudioProcess_DB_Noise();
 8018b92:	f7ff be81 	b.w	8018898 <AudioProcess_DB_Noise>
* @retval None
*/
void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
  AudioProcess();
}
 8018b96:	4770      	bx	lr
 8018b98:	2001242c 	.word	0x2001242c

08018b9c <HAL_GPIO_EXTI_Callback>:
 * @param  uint16_t GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{  
  switch(GPIO_Pin){
 8018b9c:	2810      	cmp	r0, #16
{  
 8018b9e:	b508      	push	{r3, lr}
  switch(GPIO_Pin){
 8018ba0:	d007      	beq.n	8018bb2 <HAL_GPIO_EXTI_Callback+0x16>
 8018ba2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8018ba6:	d010      	beq.n	8018bca <HAL_GPIO_EXTI_Callback+0x2e>
 8018ba8:	2801      	cmp	r0, #1
 8018baa:	d101      	bne.n	8018bb0 <HAL_GPIO_EXTI_Callback+0x14>
    else
      MotionSP_DataReady_IRQ_Rtn();
    break;
    
  case USER_BUTTON_PIN:
    ButtonPressed = 1;
 8018bac:	4b0d      	ldr	r3, [pc, #52]	; (8018be4 <HAL_GPIO_EXTI_Callback+0x48>)
 8018bae:	66d8      	str	r0, [r3, #108]	; 0x6c
    {
      BSP_BC_CmdSend(SHIPPING_MODE_ON);
    }
    break;
  }
}
 8018bb0:	bd08      	pop	{r3, pc}
    if(FifoEnabled)
 8018bb2:	4b0c      	ldr	r3, [pc, #48]	; (8018be4 <HAL_GPIO_EXTI_Callback+0x48>)
 8018bb4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8018bb8:	b11b      	cbz	r3, 8018bc2 <HAL_GPIO_EXTI_Callback+0x26>
}
 8018bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      MotionSP_FifoFull_IRQ_Rtn();
 8018bbe:	f7fe b92f 	b.w	8016e20 <MotionSP_FifoFull_IRQ_Rtn>
}
 8018bc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      MotionSP_DataReady_IRQ_Rtn();
 8018bc6:	f7fe b923 	b.w	8016e10 <MotionSP_DataReady_IRQ_Rtn>
    if(HAL_GetTick() - t_stwin > 4000)
 8018bca:	f7ef fd2b 	bl	8008624 <HAL_GetTick>
 8018bce:	4b05      	ldr	r3, [pc, #20]	; (8018be4 <HAL_GPIO_EXTI_Callback+0x48>)
 8018bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018bd2:	1ac0      	subs	r0, r0, r3
 8018bd4:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 8018bd8:	d9ea      	bls.n	8018bb0 <HAL_GPIO_EXTI_Callback+0x14>
}
 8018bda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      BSP_BC_CmdSend(SHIPPING_MODE_ON);
 8018bde:	2017      	movs	r0, #23
 8018be0:	f7ee bbfc 	b.w	80073dc <BSP_BC_CmdSend>
 8018be4:	2001242c 	.word	0x2001242c

08018be8 <HAL_Delay>:
  * @note This is a user implementation using WFI state
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8018be8:	b513      	push	{r0, r1, r4, lr}
 8018bea:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8018bec:	f7ef fd1a 	bl	8008624 <HAL_GetTick>
 8018bf0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay){
 8018bf2:	f7ef fd17 	bl	8008624 <HAL_GetTick>
 8018bf6:	9a01      	ldr	r2, [sp, #4]
 8018bf8:	1b03      	subs	r3, r0, r4
 8018bfa:	4293      	cmp	r3, r2
 8018bfc:	d301      	bcc.n	8018c02 <HAL_Delay+0x1a>
    __WFI();
  }
}
 8018bfe:	b002      	add	sp, #8
 8018c00:	bd10      	pop	{r4, pc}
    __WFI();
 8018c02:	bf30      	wfi
 8018c04:	e7f5      	b.n	8018bf2 <HAL_Delay+0xa>

08018c06 <Error_Handler>:
  * @retval None
  */
void Error_Handler(void)
{
  /* User may add here some code to deal with this error */
  while(1){
 8018c06:	e7fe      	b.n	8018c06 <Error_Handler>

08018c08 <SaveVibrationParamToMemory>:
 * @param pAccelerometer_Parameters Pointer to Accelerometer parameter structure
 * @param pMotionSP_Parameters Pointer to Board parameter structure
 * @retval unsigned char Success/Not Success
 */
unsigned char SaveVibrationParamToMemory(void)
{
 8018c08:	b510      	push	{r4, lr}
  /* ReLoad the Vibration Parameters Values from RAM */
  unsigned char Success=0;

  VibrationParam[0]= CHECK_VIBRATION_PARAM;
 8018c0a:	4c1c      	ldr	r4, [pc, #112]	; (8018c7c <SaveVibrationParamToMemory+0x74>)
  VibrationParam[7]=  (uint16_t)MotionSP_Parameters.td_type;
  VibrationParam[8]=  (uint16_t)MotionSP_Parameters.tacq;
  VibrationParam[9]=  (uint16_t)MotionSP_Parameters.FftOvl;
  VibrationParam[10]= (uint16_t)MotionSP_Parameters.subrange_num;
  
  PREDMNT1_PRINTF("Vibration parameters values will be saved in FLASH\r\n");
 8018c0c:	491c      	ldr	r1, [pc, #112]	; (8018c80 <SaveVibrationParamToMemory+0x78>)
  VibrationParam[0]= CHECK_VIBRATION_PARAM;
 8018c0e:	f241 2334 	movw	r3, #4660	; 0x1234
 8018c12:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
  VibrationParam[1]=  (uint16_t)AcceleroParams.AccOdr;
 8018c16:	4b1b      	ldr	r3, [pc, #108]	; (8018c84 <SaveVibrationParamToMemory+0x7c>)
 8018c18:	881a      	ldrh	r2, [r3, #0]
 8018c1a:	f8a4 2076 	strh.w	r2, [r4, #118]	; 0x76
  VibrationParam[2]=  (uint16_t)AcceleroParams.AccFifoBdr;
 8018c1e:	889a      	ldrh	r2, [r3, #4]
  VibrationParam[3]=  (uint16_t)AcceleroParams.fs;
 8018c20:	891b      	ldrh	r3, [r3, #8]
 8018c22:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
  VibrationParam[4]=  (uint16_t)MotionSP_Parameters.FftSize;
 8018c26:	4b18      	ldr	r3, [pc, #96]	; (8018c88 <SaveVibrationParamToMemory+0x80>)
  VibrationParam[2]=  (uint16_t)AcceleroParams.AccFifoBdr;
 8018c28:	f8a4 2078 	strh.w	r2, [r4, #120]	; 0x78
  VibrationParam[4]=  (uint16_t)MotionSP_Parameters.FftSize;
 8018c2c:	881a      	ldrh	r2, [r3, #0]
 8018c2e:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
  VibrationParam[5]=  (uint16_t)MotionSP_Parameters.tau;
 8018c32:	885a      	ldrh	r2, [r3, #2]
 8018c34:	f8a4 207e 	strh.w	r2, [r4, #126]	; 0x7e
  VibrationParam[6]=  (uint16_t)MotionSP_Parameters.window;
 8018c38:	889a      	ldrh	r2, [r3, #4]
 8018c3a:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
  VibrationParam[7]=  (uint16_t)MotionSP_Parameters.td_type;
 8018c3e:	88da      	ldrh	r2, [r3, #6]
 8018c40:	f8a4 2082 	strh.w	r2, [r4, #130]	; 0x82
{
 8018c44:	b0c0      	sub	sp, #256	; 0x100
  VibrationParam[8]=  (uint16_t)MotionSP_Parameters.tacq;
 8018c46:	891a      	ldrh	r2, [r3, #8]
 8018c48:	f8a4 2084 	strh.w	r2, [r4, #132]	; 0x84
  PREDMNT1_PRINTF("Vibration parameters values will be saved in FLASH\r\n");
 8018c4c:	4668      	mov	r0, sp
  VibrationParam[9]=  (uint16_t)MotionSP_Parameters.FftOvl;
 8018c4e:	7a9a      	ldrb	r2, [r3, #10]
  VibrationParam[10]= (uint16_t)MotionSP_Parameters.subrange_num;
 8018c50:	899b      	ldrh	r3, [r3, #12]
  VibrationParam[9]=  (uint16_t)MotionSP_Parameters.FftOvl;
 8018c52:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
  VibrationParam[10]= (uint16_t)MotionSP_Parameters.subrange_num;
 8018c56:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
  PREDMNT1_PRINTF("Vibration parameters values will be saved in FLASH\r\n");
 8018c5a:	f004 f8dd 	bl	801ce18 <strcpy>
 8018c5e:	2134      	movs	r1, #52	; 0x34
 8018c60:	4668      	mov	r0, sp
 8018c62:	f000 fea3 	bl	80199ac <CDC_Fill_Buffer>
  MDM_SaveGMD(GMD_VIBRATION_PARAM,(void *)VibrationParam);
 8018c66:	f104 0174 	add.w	r1, r4, #116	; 0x74
 8018c6a:	200c      	movs	r0, #12
 8018c6c:	f7f7 f8f4 	bl	800fe58 <MDM_SaveGMD>
  NecessityToSaveMetaDataManager=1;
 8018c70:	4b06      	ldr	r3, [pc, #24]	; (8018c8c <SaveVibrationParamToMemory+0x84>)
 8018c72:	2201      	movs	r2, #1

  return Success;
}
 8018c74:	2000      	movs	r0, #0
  NecessityToSaveMetaDataManager=1;
 8018c76:	601a      	str	r2, [r3, #0]
}
 8018c78:	b040      	add	sp, #256	; 0x100
 8018c7a:	bd10      	pop	{r4, pc}
 8018c7c:	2001242c 	.word	0x2001242c
 8018c80:	0802536b 	.word	0x0802536b
 8018c84:	20011538 	.word	0x20011538
 8018c88:	20002e14 	.word	0x20002e14
 8018c8c:	20001798 	.word	0x20001798

08018c90 <main>:
{
 8018c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c94:	ed2d 8b02 	vpush	{d8}
 8018c98:	b0eb      	sub	sp, #428	; 0x1ac
  HAL_Init();
 8018c9a:	f7ef fca7 	bl	80085ec <HAL_Init>
    HAL_PWREx_EnableVddIO2();
 8018c9e:	f7f2 fda5 	bl	800b7ec <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_PWR_CLK_ENABLE();
 8018ca2:	4b97      	ldr	r3, [pc, #604]	; (8018f00 <main+0x270>)
 8018ca4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018ca6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8018caa:	659a      	str	r2, [r3, #88]	; 0x58
 8018cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8018cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_PWREx_EnableVddUSB();
 8018cb6:	f7f2 fd91 	bl	800b7dc <HAL_PWREx_EnableVddUSB>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8018cba:	2000      	movs	r0, #0
 8018cbc:	f7f2 fd34 	bl	800b728 <HAL_PWREx_ControlVoltageScaling>
 8018cc0:	b100      	cbz	r0, 8018cc4 <main+0x34>
  while(1){
 8018cc2:	e7fe      	b.n	8018cc2 <main+0x32>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8018cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8018cc8:	f04f 0821 	mov.w	r8, #33	; 0x21
 8018ccc:	e9cd 8319 	strd	r8, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8018cd0:	2601      	movs	r6, #1
 8018cd2:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8018cd4:	2503      	movs	r5, #3
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5; //RCC_PLLP_DIV2;
 8018cd6:	221e      	movs	r2, #30
 8018cd8:	2405      	movs	r4, #5
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8018cda:	a819      	add	r0, sp, #100	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8018cdc:	e9cd 6322 	strd	r6, r3, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = 2;
 8018ce0:	e9cd 5324 	strd	r5, r3, [sp, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5; //RCC_PLLP_DIV2;
 8018ce4:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8018ce8:	e9cd 3328 	strd	r3, r3, [sp, #160]	; 0xa0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8018cec:	f7f2 fe0c 	bl	800b908 <HAL_RCC_OscConfig>
 8018cf0:	b100      	cbz	r0, 8018cf4 <main+0x64>
  while(1){
 8018cf2:	e7fe      	b.n	8018cf2 <main+0x62>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8018cf4:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8018cf8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8018cfa:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8018cfc:	4621      	mov	r1, r4
 8018cfe:	a814      	add	r0, sp, #80	; 0x50
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8018d00:	e9cd 3514 	strd	r3, r5, [sp, #80]	; 0x50
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8018d04:	f7f3 f8ae 	bl	800be64 <HAL_RCC_ClockConfig>
 8018d08:	b100      	cbz	r0, 8018d0c <main+0x7c>
  while(1){
 8018d0a:	e7fe      	b.n	8018d0a <main+0x7a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC
 8018d0c:	4b7d      	ldr	r3, [pc, #500]	; (8018f04 <main+0x274>)
 8018d0e:	932a      	str	r3, [sp, #168]	; 0xa8
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8018d10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK2; //RCC_DFSDM1CLKSOURCE_PCLK;
 8018d14:	e9cd 304a 	strd	r3, r0, [sp, #296]	; 0x128
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8018d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018d1c:	9350      	str	r3, [sp, #320]	; 0x140
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8018d1e:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8018d22:	2319      	movs	r3, #25
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8018d24:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8018d28:	e9cd e32d 	strd	lr, r3, [sp, #180]	; 0xb4
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8018d2c:	9045      	str	r0, [sp, #276]	; 0x114
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK|RCC_PLLSAI1_SAI1CLK;
 8018d2e:	4b76      	ldr	r3, [pc, #472]	; (8018f08 <main+0x278>)
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8018d30:	9040      	str	r0, [sp, #256]	; 0x100
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8018d32:	9047      	str	r0, [sp, #284]	; 0x11c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8018d34:	2404      	movs	r4, #4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8018d36:	a82a      	add	r0, sp, #168	; 0xa8
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8018d38:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK|RCC_PLLSAI1_SAI1CLK;
 8018d3c:	9331      	str	r3, [sp, #196]	; 0xc4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8018d3e:	f7f3 faa3 	bl	800c288 <HAL_RCCEx_PeriphCLKConfig>
 8018d42:	b100      	cbz	r0, 8018d46 <main+0xb6>
  while(1){
 8018d44:	e7fe      	b.n	8018d44 <main+0xb4>
 8018d46:	9009      	str	r0, [sp, #36]	; 0x24
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8018d48:	f7f3 f982 	bl	800c050 <HAL_RCC_GetHCLKFreq>
 8018d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018d50:	fbb0 f0f3 	udiv	r0, r0, r3
 8018d54:	f7f0 fbf4 	bl	8009540 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8018d58:	4620      	mov	r0, r4
 8018d5a:	f7f0 fc05 	bl	8009568 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8018d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  t_stwin = HAL_GetTick();
 8018d60:	4c6a      	ldr	r4, [pc, #424]	; (8018f0c <main+0x27c>)
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8018d62:	4611      	mov	r1, r2
 8018d64:	f04f 30ff 	mov.w	r0, #4294967295
 8018d68:	f7f0 fb84 	bl	8009474 <HAL_NVIC_SetPriority>
  InitTargetPlatform();
 8018d6c:	f7ff f9f0 	bl	8018150 <InitTargetPlatform>
  t_stwin = HAL_GetTick();
 8018d70:	f7ef fc58 	bl	8008624 <HAL_GetTick>
  InitMetaDataManager((void *)&known_MetaData,MDM_DATA_TYPE_GMD,NULL); 
 8018d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
  t_stwin = HAL_GetTick();
 8018d76:	6720      	str	r0, [r4, #112]	; 0x70
  InitMetaDataManager((void *)&known_MetaData,MDM_DATA_TYPE_GMD,NULL); 
 8018d78:	4631      	mov	r1, r6
 8018d7a:	4865      	ldr	r0, [pc, #404]	; (8018f10 <main+0x280>)
 8018d7c:	f7f6 fdfa 	bl	800f974 <InitMetaDataManager>
  PREDMNT1_PRINTF("\n\t(HAL %ld.%ld.%ld_%ld)\r\n"
 8018d80:	f7ef fc56 	bl	8008630 <HAL_GetHalVersion>
 8018d84:	4680      	mov	r8, r0
 8018d86:	f7ef fc53 	bl	8008630 <HAL_GetHalVersion>
 8018d8a:	4681      	mov	r9, r0
 8018d8c:	f7ef fc50 	bl	8008630 <HAL_GetHalVersion>
 8018d90:	4605      	mov	r5, r0
 8018d92:	f7ef fc4d 	bl	8008630 <HAL_GetHalVersion>
 8018d96:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8018d9a:	9304      	str	r3, [sp, #16]
 8018d9c:	4b5d      	ldr	r3, [pc, #372]	; (8018f14 <main+0x284>)
 8018d9e:	9303      	str	r3, [sp, #12]
 8018da0:	2732      	movs	r7, #50	; 0x32
 8018da2:	4b5d      	ldr	r3, [pc, #372]	; (8018f18 <main+0x288>)
 8018da4:	495d      	ldr	r1, [pc, #372]	; (8018f1c <main+0x28c>)
 8018da6:	9302      	str	r3, [sp, #8]
 8018da8:	b2c0      	uxtb	r0, r0
 8018daa:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8018dae:	f3c9 4307 	ubfx	r3, r9, #16, #8
 8018db2:	ea4f 6218 	mov.w	r2, r8, lsr #24
 8018db6:	9001      	str	r0, [sp, #4]
 8018db8:	9500      	str	r5, [sp, #0]
 8018dba:	e9cd 7705 	strd	r7, r7, [sp, #20]
 8018dbe:	a82a      	add	r0, sp, #168	; 0xa8
 8018dc0:	f003 ffba 	bl	801cd38 <siprintf>
 8018dc4:	4601      	mov	r1, r0
 8018dc6:	a82a      	add	r0, sp, #168	; 0xa8
 8018dc8:	f000 fdf0 	bl	80199ac <CDC_Fill_Buffer>
  PREDMNT1_PRINTF("Debug Connection         Enabled\r\n");
 8018dcc:	4954      	ldr	r1, [pc, #336]	; (8018f20 <main+0x290>)
  sprintf(BlueNRG_StackValue.BoardName,"%s%c%c%c","PM1V",
 8018dce:	4d55      	ldr	r5, [pc, #340]	; (8018f24 <main+0x294>)
  PREDMNT1_PRINTF("Debug Connection         Enabled\r\n");
 8018dd0:	a82a      	add	r0, sp, #168	; 0xa8
 8018dd2:	f004 f821 	bl	801ce18 <strcpy>
 8018dd6:	2122      	movs	r1, #34	; 0x22
 8018dd8:	a82a      	add	r0, sp, #168	; 0xa8
 8018dda:	f000 fde7 	bl	80199ac <CDC_Fill_Buffer>
  PREDMNT1_PRINTF("Debug Notify Trasmission Enabled\r\n\n");
 8018dde:	4952      	ldr	r1, [pc, #328]	; (8018f28 <main+0x298>)
 8018de0:	a82a      	add	r0, sp, #168	; 0xa8
 8018de2:	f004 f819 	bl	801ce18 <strcpy>
 8018de6:	2123      	movs	r1, #35	; 0x23
 8018de8:	a82a      	add	r0, sp, #168	; 0xa8
 8018dea:	f000 fddf 	bl	80199ac <CDC_Fill_Buffer>
  sprintf(BlueNRG_StackValue.BoardName,"%s%c%c%c","PM1V",
 8018dee:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8018df2:	2334      	movs	r3, #52	; 0x34
 8018df4:	e9cd 3c00 	strd	r3, ip, [sp]
 8018df8:	4a4c      	ldr	r2, [pc, #304]	; (8018f2c <main+0x29c>)
 8018dfa:	494d      	ldr	r1, [pc, #308]	; (8018f30 <main+0x2a0>)
 8018dfc:	463b      	mov	r3, r7
 8018dfe:	4628      	mov	r0, r5
 8018e00:	f003 ff9a 	bl	801cd38 <siprintf>
  MDM_ReCallGMD(GMD_NODE_NAME,(void *)&NodeName);
 8018e04:	f104 018a 	add.w	r1, r4, #138	; 0x8a
 8018e08:	2008      	movs	r0, #8
 8018e0a:	f7f7 f851 	bl	800feb0 <MDM_ReCallGMD>
  if(NodeName[0] != 0x12)
 8018e0e:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
 8018e12:	2b12      	cmp	r3, #18
 8018e14:	f104 018b 	add.w	r1, r4, #139	; 0x8b
 8018e18:	d03c      	beq.n	8018e94 <main+0x204>
    NodeName[0]= 0x12;
 8018e1a:	2312      	movs	r3, #18
 8018e1c:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
      NodeName[i+1]= BlueNRG_StackValue.BoardName[i];
 8018e20:	682b      	ldr	r3, [r5, #0]
 8018e22:	f8c4 308b 	str.w	r3, [r4, #139]	; 0x8b
 8018e26:	88ab      	ldrh	r3, [r5, #4]
 8018e28:	808b      	strh	r3, [r1, #4]
 8018e2a:	79ab      	ldrb	r3, [r5, #6]
 8018e2c:	718b      	strb	r3, [r1, #6]
    MDM_SaveGMD(GMD_NODE_NAME,(void *)&NodeName);
 8018e2e:	2008      	movs	r0, #8
 8018e30:	3901      	subs	r1, #1
 8018e32:	f7f7 f811 	bl	800fe58 <MDM_SaveGMD>
    NecessityToSaveMetaDataManager=1;
 8018e36:	4b3f      	ldr	r3, [pc, #252]	; (8018f34 <main+0x2a4>)
 8018e38:	601e      	str	r6, [r3, #0]
  HCI_TL_SPI_Reset();
 8018e3a:	f7ff fc05 	bl	8018648 <HCI_TL_SPI_Reset>
  BluetoothInit();
 8018e3e:	f7fd fd57 	bl	80168f0 <BluetoothInit>
  PREDMNT1_PRINTF("\r\n");
 8018e42:	493d      	ldr	r1, [pc, #244]	; (8018f38 <main+0x2a8>)
 8018e44:	a82a      	add	r0, sp, #168	; 0xa8
 8018e46:	f003 ffe7 	bl	801ce18 <strcpy>
 8018e4a:	2102      	movs	r1, #2
 8018e4c:	a82a      	add	r0, sp, #168	; 0xa8
 8018e4e:	f000 fdad 	bl	80199ac <CDC_Fill_Buffer>
  if(CheckBootLoaderCompliance()) {
 8018e52:	f7fe ff59 	bl	8017d08 <CheckBootLoaderCompliance>
 8018e56:	b328      	cbz	r0, 8018ea4 <main+0x214>
    PREDMNT1_PRINTF("BootLoader Compliant with FOTA procedure\r\n\n");
 8018e58:	4938      	ldr	r1, [pc, #224]	; (8018f3c <main+0x2ac>)
 8018e5a:	a82a      	add	r0, sp, #168	; 0xa8
 8018e5c:	f003 ffdc 	bl	801ce18 <strcpy>
 8018e60:	212b      	movs	r1, #43	; 0x2b
    PREDMNT1_PRINTF("ERROR: BootLoader NOT Compliant with FOTA procedure\r\n\n");
 8018e62:	a82a      	add	r0, sp, #168	; 0xa8
 8018e64:	f000 fda2 	bl	80199ac <CDC_Fill_Buffer>
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1); 
 8018e68:	4b35      	ldr	r3, [pc, #212]	; (8018f40 <main+0x2b0>)
  if(HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK)
 8018e6a:	4836      	ldr	r0, [pc, #216]	; (8018f44 <main+0x2b4>)
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1); 
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8018e72:	fbb3 f3f2 	udiv	r3, r3, r2
  TimCCHandle.Instance = TIM1;  
 8018e76:	4a34      	ldr	r2, [pc, #208]	; (8018f48 <main+0x2b8>)
 8018e78:	60e2      	str	r2, [r4, #12]
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1); 
 8018e7a:	3b01      	subs	r3, #1
  TimCCHandle.Init.Period        = 65535;
 8018e7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TimCCHandle.Init.Prescaler     = uwPrescalerValue;
 8018e80:	6123      	str	r3, [r4, #16]
  TimCCHandle.Init.ClockDivision = 0;
 8018e82:	2300      	movs	r3, #0
  TimCCHandle.Init.Period        = 65535;
 8018e84:	61a2      	str	r2, [r4, #24]
  TimCCHandle.Init.ClockDivision = 0;
 8018e86:	61e3      	str	r3, [r4, #28]
  TimCCHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8018e88:	6163      	str	r3, [r4, #20]
  if(HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK)
 8018e8a:	f7f4 fb7b 	bl	800d584 <HAL_TIM_OC_Init>
 8018e8e:	4602      	mov	r2, r0
 8018e90:	b170      	cbz	r0, 8018eb0 <main+0x220>
  while(1){
 8018e92:	e7fe      	b.n	8018e92 <main+0x202>
      BlueNRG_StackValue.BoardName[i]= NodeName[i+1];
 8018e94:	f8d4 308b 	ldr.w	r3, [r4, #139]	; 0x8b
 8018e98:	602b      	str	r3, [r5, #0]
 8018e9a:	888b      	ldrh	r3, [r1, #4]
 8018e9c:	80ab      	strh	r3, [r5, #4]
 8018e9e:	798b      	ldrb	r3, [r1, #6]
 8018ea0:	71ab      	strb	r3, [r5, #6]
 8018ea2:	e7ca      	b.n	8018e3a <main+0x1aa>
    PREDMNT1_PRINTF("ERROR: BootLoader NOT Compliant with FOTA procedure\r\n\n");
 8018ea4:	4929      	ldr	r1, [pc, #164]	; (8018f4c <main+0x2bc>)
 8018ea6:	a82a      	add	r0, sp, #168	; 0xa8
 8018ea8:	f003 ffb6 	bl	801ce18 <strcpy>
 8018eac:	2136      	movs	r1, #54	; 0x36
 8018eae:	e7d8      	b.n	8018e62 <main+0x1d2>
  sConfig.OCMode     = TIM_OCMODE_TOGGLE;
 8018eb0:	2330      	movs	r3, #48	; 0x30
 8018eb2:	932a      	str	r3, [sp, #168]	; 0xa8
  sConfig.Pulse = DEFAULT_uhCCR1_Val;
 8018eb4:	f241 3588 	movw	r5, #5000	; 0x1388
 8018eb8:	2302      	movs	r3, #2
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 8018eba:	4822      	ldr	r0, [pc, #136]	; (8018f44 <main+0x2b4>)
 8018ebc:	a92a      	add	r1, sp, #168	; 0xa8
  sConfig.Pulse = DEFAULT_uhCCR1_Val;
 8018ebe:	e9cd 532b 	strd	r5, r3, [sp, #172]	; 0xac
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 8018ec2:	f7f4 fc05 	bl	800d6d0 <HAL_TIM_OC_ConfigChannel>
 8018ec6:	b100      	cbz	r0, 8018eca <main+0x23a>
  while(1){
 8018ec8:	e7fe      	b.n	8018ec8 <main+0x238>
  sConfig.Pulse = DEFAULT_uhCCR2_Val;
 8018eca:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_2) != HAL_OK)
 8018ece:	481d      	ldr	r0, [pc, #116]	; (8018f44 <main+0x2b4>)
  sConfig.Pulse = DEFAULT_uhCCR2_Val;
 8018ed0:	962b      	str	r6, [sp, #172]	; 0xac
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_2) != HAL_OK)
 8018ed2:	2204      	movs	r2, #4
 8018ed4:	a92a      	add	r1, sp, #168	; 0xa8
 8018ed6:	f7f4 fbfb 	bl	800d6d0 <HAL_TIM_OC_ConfigChannel>
 8018eda:	b100      	cbz	r0, 8018ede <main+0x24e>
  while(1){
 8018edc:	e7fe      	b.n	8018edc <main+0x24c>
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_3) != HAL_OK)
 8018ede:	4819      	ldr	r0, [pc, #100]	; (8018f44 <main+0x2b4>)
  sConfig.Pulse = DEFAULT_uhCCR3_Val;
 8018ee0:	962b      	str	r6, [sp, #172]	; 0xac
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_3) != HAL_OK)
 8018ee2:	2208      	movs	r2, #8
 8018ee4:	a92a      	add	r1, sp, #168	; 0xa8
 8018ee6:	f7f4 fbf3 	bl	800d6d0 <HAL_TIM_OC_ConfigChannel>
 8018eea:	b100      	cbz	r0, 8018eee <main+0x25e>
  while(1){
 8018eec:	e7fe      	b.n	8018eec <main+0x25c>
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_4) != HAL_OK)
 8018eee:	4815      	ldr	r0, [pc, #84]	; (8018f44 <main+0x2b4>)
  sConfig.Pulse = DEFAULT_uhCCR4_Val;
 8018ef0:	952b      	str	r5, [sp, #172]	; 0xac
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_4) != HAL_OK)
 8018ef2:	220c      	movs	r2, #12
 8018ef4:	a92a      	add	r1, sp, #168	; 0xa8
 8018ef6:	f7f4 fbeb 	bl	800d6d0 <HAL_TIM_OC_ConfigChannel>
 8018efa:	4607      	mov	r7, r0
 8018efc:	b340      	cbz	r0, 8018f50 <main+0x2c0>
  while(1){
 8018efe:	e7fe      	b.n	8018efe <main+0x26e>
 8018f00:	40021000 	.word	0x40021000
 8018f04:	00036880 	.word	0x00036880
 8018f08:	01010000 	.word	0x01010000
 8018f0c:	2001242c 	.word	0x2001242c
 8018f10:	20000520 	.word	0x20000520
 8018f14:	0802544c 	.word	0x0802544c
 8018f18:	08024200 	.word	0x08024200
 8018f1c:	080253a0 	.word	0x080253a0
 8018f20:	08025455 	.word	0x08025455
 8018f24:	20002985 	.word	0x20002985
 8018f28:	08025478 	.word	0x08025478
 8018f2c:	0802549c 	.word	0x0802549c
 8018f30:	080254a1 	.word	0x080254a1
 8018f34:	20001798 	.word	0x20001798
 8018f38:	08025660 	.word	0x08025660
 8018f3c:	080254aa 	.word	0x080254aa
 8018f40:	200000a4 	.word	0x200000a4
 8018f44:	20012438 	.word	0x20012438
 8018f48:	40012c00 	.word	0x40012c00
 8018f4c:	080254d6 	.word	0x080254d6
  MotionSP_SetDefaultVibrationParam();
 8018f50:	f7fd fd98 	bl	8016a84 <MotionSP_SetDefaultVibrationParam>
  PREDMNT1_PRINTF("Recall the vibration parameter values from FLASH\r\n");
 8018f54:	49a8      	ldr	r1, [pc, #672]	; (80191f8 <main+0x568>)
 8018f56:	4ea9      	ldr	r6, [pc, #676]	; (80191fc <main+0x56c>)
 8018f58:	4da9      	ldr	r5, [pc, #676]	; (8019200 <main+0x570>)
 8018f5a:	a82a      	add	r0, sp, #168	; 0xa8
 8018f5c:	f003 ff5c 	bl	801ce18 <strcpy>
 8018f60:	2132      	movs	r1, #50	; 0x32
 8018f62:	a82a      	add	r0, sp, #168	; 0xa8
 8018f64:	f000 fd22 	bl	80199ac <CDC_Fill_Buffer>
  MDM_ReCallGMD(GMD_VIBRATION_PARAM,(void *)VibrationParam);
 8018f68:	49a6      	ldr	r1, [pc, #664]	; (8019204 <main+0x574>)
 8018f6a:	200c      	movs	r0, #12
 8018f6c:	f7f6 ffa0 	bl	800feb0 <MDM_ReCallGMD>
  if(VibrationParam[0] == CHECK_VIBRATION_PARAM)
 8018f70:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
 8018f74:	f241 2334 	movw	r3, #4660	; 0x1234
 8018f78:	429a      	cmp	r2, r3
 8018f7a:	f040 80d3 	bne.w	8019124 <main+0x494>
    AcceleroParams.AccOdr=              VibrationParam[1];
 8018f7e:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
 8018f82:	8033      	strh	r3, [r6, #0]
    AcceleroParams.AccFifoBdr=          VibrationParam[2];
 8018f84:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
 8018f88:	80b3      	strh	r3, [r6, #4]
    AcceleroParams.fs=                  VibrationParam[3];
 8018f8a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
 8018f8e:	8133      	strh	r3, [r6, #8]
    MotionSP_Parameters.FftSize=        VibrationParam[4];
 8018f90:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8018f94:	802b      	strh	r3, [r5, #0]
    MotionSP_Parameters.tau=            VibrationParam[5];
 8018f96:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 8018f9a:	806b      	strh	r3, [r5, #2]
    MotionSP_Parameters.window=         VibrationParam[6];
 8018f9c:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 8018fa0:	80ab      	strh	r3, [r5, #4]
    MotionSP_Parameters.td_type=        VibrationParam[7];
 8018fa2:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
 8018fa6:	80eb      	strh	r3, [r5, #6]
    MotionSP_Parameters.tacq=           VibrationParam[8];
 8018fa8:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8018fac:	812b      	strh	r3, [r5, #8]
    MotionSP_Parameters.FftOvl=         VibrationParam[9];
 8018fae:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
    PREDMNT1_PRINTF("Vibration parameter values read from FLASH\r\n");
 8018fb2:	4995      	ldr	r1, [pc, #596]	; (8019208 <main+0x578>)
    MotionSP_Parameters.FftOvl=         VibrationParam[9];
 8018fb4:	72ab      	strb	r3, [r5, #10]
    PREDMNT1_PRINTF("Vibration parameter values read from FLASH\r\n");
 8018fb6:	a82a      	add	r0, sp, #168	; 0xa8
    MotionSP_Parameters.subrange_num=   VibrationParam[10];
 8018fb8:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 8018fbc:	81ab      	strh	r3, [r5, #12]
    PREDMNT1_PRINTF("Vibration parameter values read from FLASH\r\n");
 8018fbe:	f003 ff2b 	bl	801ce18 <strcpy>
 8018fc2:	212c      	movs	r1, #44	; 0x2c
 8018fc4:	a82a      	add	r0, sp, #168	; 0xa8
 8018fc6:	f000 fcf1 	bl	80199ac <CDC_Fill_Buffer>
    NecessityToSaveMetaDataManager=0;
 8018fca:	4b90      	ldr	r3, [pc, #576]	; (801920c <main+0x57c>)
 8018fcc:	601f      	str	r7, [r3, #0]
  PREDMNT1_PRINTF("\r\nAccelerometer parameters:\r\n");
 8018fce:	4990      	ldr	r1, [pc, #576]	; (8019210 <main+0x580>)
 8018fd0:	a82a      	add	r0, sp, #168	; 0xa8
 8018fd2:	f003 ff21 	bl	801ce18 <strcpy>
 8018fd6:	211d      	movs	r1, #29
 8018fd8:	a82a      	add	r0, sp, #168	; 0xa8
 8018fda:	f000 fce7 	bl	80199ac <CDC_Fill_Buffer>
  PREDMNT1_PRINTF("AccOdr= %d\t", AcceleroParams.AccOdr);
 8018fde:	8832      	ldrh	r2, [r6, #0]
 8018fe0:	498c      	ldr	r1, [pc, #560]	; (8019214 <main+0x584>)
 8018fe2:	a82a      	add	r0, sp, #168	; 0xa8
 8018fe4:	f003 fea8 	bl	801cd38 <siprintf>
 8018fe8:	4601      	mov	r1, r0
 8018fea:	a82a      	add	r0, sp, #168	; 0xa8
 8018fec:	f000 fcde 	bl	80199ac <CDC_Fill_Buffer>
  PREDMNT1_PRINTF("AccFifoBdr= %d\t", AcceleroParams.AccFifoBdr);   
 8018ff0:	88b2      	ldrh	r2, [r6, #4]
 8018ff2:	4989      	ldr	r1, [pc, #548]	; (8019218 <main+0x588>)
 8018ff4:	a82a      	add	r0, sp, #168	; 0xa8
 8018ff6:	f003 fe9f 	bl	801cd38 <siprintf>
 8018ffa:	4601      	mov	r1, r0
 8018ffc:	a82a      	add	r0, sp, #168	; 0xa8
 8018ffe:	f000 fcd5 	bl	80199ac <CDC_Fill_Buffer>
  PREDMNT1_PRINTF("fs= %d\t", AcceleroParams.fs);   
 8019002:	8932      	ldrh	r2, [r6, #8]
 8019004:	4985      	ldr	r1, [pc, #532]	; (801921c <main+0x58c>)
 8019006:	a82a      	add	r0, sp, #168	; 0xa8
 8019008:	f003 fe96 	bl	801cd38 <siprintf>
 801900c:	4601      	mov	r1, r0
 801900e:	a82a      	add	r0, sp, #168	; 0xa8
 8019010:	f000 fccc 	bl	80199ac <CDC_Fill_Buffer>
  PREDMNT1_PRINTF("\r\n");
 8019014:	4982      	ldr	r1, [pc, #520]	; (8019220 <main+0x590>)
 8019016:	a82a      	add	r0, sp, #168	; 0xa8
 8019018:	f003 fefe 	bl	801ce18 <strcpy>
 801901c:	2102      	movs	r1, #2
 801901e:	a82a      	add	r0, sp, #168	; 0xa8
 8019020:	f000 fcc4 	bl	80199ac <CDC_Fill_Buffer>
  PREDMNT1_PRINTF("\r\nMotionSP parameters:\r\n");
 8019024:	497f      	ldr	r1, [pc, #508]	; (8019224 <main+0x594>)
 8019026:	a82a      	add	r0, sp, #168	; 0xa8
 8019028:	f003 fef6 	bl	801ce18 <strcpy>
 801902c:	2118      	movs	r1, #24
 801902e:	a82a      	add	r0, sp, #168	; 0xa8
 8019030:	f000 fcbc 	bl	80199ac <CDC_Fill_Buffer>
  PREDMNT1_PRINTF("size= %d\t", MotionSP_Parameters.FftSize); 
 8019034:	882a      	ldrh	r2, [r5, #0]
 8019036:	497c      	ldr	r1, [pc, #496]	; (8019228 <main+0x598>)
 8019038:	a82a      	add	r0, sp, #168	; 0xa8
 801903a:	f003 fe7d 	bl	801cd38 <siprintf>
 801903e:	4601      	mov	r1, r0
 8019040:	a82a      	add	r0, sp, #168	; 0xa8
 8019042:	f000 fcb3 	bl	80199ac <CDC_Fill_Buffer>
  PREDMNT1_PRINTF("wind= %d\t", MotionSP_Parameters.window);  
 8019046:	88aa      	ldrh	r2, [r5, #4]
 8019048:	4978      	ldr	r1, [pc, #480]	; (801922c <main+0x59c>)
 801904a:	a82a      	add	r0, sp, #168	; 0xa8
 801904c:	f003 fe74 	bl	801cd38 <siprintf>
 8019050:	4601      	mov	r1, r0
 8019052:	a82a      	add	r0, sp, #168	; 0xa8
 8019054:	f000 fcaa 	bl	80199ac <CDC_Fill_Buffer>
  PREDMNT1_PRINTF("tacq= %d\t", MotionSP_Parameters.tacq);
 8019058:	892a      	ldrh	r2, [r5, #8]
 801905a:	4975      	ldr	r1, [pc, #468]	; (8019230 <main+0x5a0>)
 801905c:	a82a      	add	r0, sp, #168	; 0xa8
 801905e:	f003 fe6b 	bl	801cd38 <siprintf>
 8019062:	4601      	mov	r1, r0
 8019064:	a82a      	add	r0, sp, #168	; 0xa8
 8019066:	f000 fca1 	bl	80199ac <CDC_Fill_Buffer>
  PREDMNT1_PRINTF("ovl= %d\t", MotionSP_Parameters.FftOvl);
 801906a:	7aaa      	ldrb	r2, [r5, #10]
 801906c:	4971      	ldr	r1, [pc, #452]	; (8019234 <main+0x5a4>)
 801906e:	a82a      	add	r0, sp, #168	; 0xa8
 8019070:	f003 fe62 	bl	801cd38 <siprintf>
 8019074:	4601      	mov	r1, r0
 8019076:	a82a      	add	r0, sp, #168	; 0xa8
 8019078:	f000 fc98 	bl	80199ac <CDC_Fill_Buffer>
  PREDMNT1_PRINTF("subrange_num= %d\t", MotionSP_Parameters.subrange_num);
 801907c:	89aa      	ldrh	r2, [r5, #12]
 801907e:	496e      	ldr	r1, [pc, #440]	; (8019238 <main+0x5a8>)
 8019080:	a82a      	add	r0, sp, #168	; 0xa8
 8019082:	f003 fe59 	bl	801cd38 <siprintf>
 8019086:	4601      	mov	r1, r0
 8019088:	a82a      	add	r0, sp, #168	; 0xa8
 801908a:	f000 fc8f 	bl	80199ac <CDC_Fill_Buffer>
  PREDMNT1_PRINTF("\r\n\n");
 801908e:	496b      	ldr	r1, [pc, #428]	; (801923c <main+0x5ac>)
 8019090:	a82a      	add	r0, sp, #168	; 0xa8
 8019092:	f003 fec1 	bl	801ce18 <strcpy>
 8019096:	2103      	movs	r1, #3
 8019098:	a82a      	add	r0, sp, #168	; 0xa8
 801909a:	f000 fc87 	bl	80199ac <CDC_Fill_Buffer>
  PREDMNT1_PRINTF("************************************************************************\r\n\r\n");
 801909e:	4968      	ldr	r1, [pc, #416]	; (8019240 <main+0x5b0>)
 80190a0:	a82a      	add	r0, sp, #168	; 0xa8
 80190a2:	f003 feb9 	bl	801ce18 <strcpy>
 80190a6:	214c      	movs	r1, #76	; 0x4c
 80190a8:	a82a      	add	r0, sp, #168	; 0xa8
 80190aa:	f000 fc7f 	bl	80199ac <CDC_Fill_Buffer>
  if(MotionSP_AcceleroConfig()) {
 80190ae:	f7fd fd1b 	bl	8016ae8 <MotionSP_AcceleroConfig>
 80190b2:	2800      	cmp	r0, #0
 80190b4:	d041      	beq.n	801913a <main+0x4aa>
    PREDMNT1_PRINTF("\tFailed Set Accelerometer Parameters\r\n\n");
 80190b6:	4963      	ldr	r1, [pc, #396]	; (8019244 <main+0x5b4>)
 80190b8:	a82a      	add	r0, sp, #168	; 0xa8
 80190ba:	f003 fead 	bl	801ce18 <strcpy>
 80190be:	2127      	movs	r1, #39	; 0x27
    PREDMNT1_PRINTF("\tOK Set Accelerometer Parameters\r\n\n");
 80190c0:	a82a      	add	r0, sp, #168	; 0xa8
 80190c2:	f000 fc73 	bl	80199ac <CDC_Fill_Buffer>
    if(!connected)
 80190c6:	4e60      	ldr	r6, [pc, #384]	; (8019248 <main+0x5b8>)
    if(set_connectable){     
 80190c8:	4d60      	ldr	r5, [pc, #384]	; (801924c <main+0x5bc>)
    if(!connected)
 80190ca:	7833      	ldrb	r3, [r6, #0]
 80190cc:	b953      	cbnz	r3, 80190e4 <main+0x454>
      if(!TargetBoardFeatures.LedStatus) {
 80190ce:	4b60      	ldr	r3, [pc, #384]	; (8019250 <main+0x5c0>)
 80190d0:	7c1b      	ldrb	r3, [r3, #16]
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d137      	bne.n	8019146 <main+0x4b6>
        if(!(HAL_GetTick()&0x3FF)) {
 80190d6:	f7ef faa5 	bl	8008624 <HAL_GetTick>
 80190da:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80190de:	b908      	cbnz	r0, 80190e4 <main+0x454>
          LedOnTargetPlatform();
 80190e0:	f7ff f98a 	bl	80183f8 <LedOnTargetPlatform>
    if(set_connectable){     
 80190e4:	782b      	ldrb	r3, [r5, #0]
 80190e6:	b15b      	cbz	r3, 8019100 <main+0x470>
      if(NecessityToSaveMetaDataManager) {
 80190e8:	4b48      	ldr	r3, [pc, #288]	; (801920c <main+0x57c>)
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	b123      	cbz	r3, 80190f8 <main+0x468>
        uint32_t Success = EraseMetaDataManager();
 80190ee:	f7f6 fc0d 	bl	800f90c <EraseMetaDataManager>
        if(Success) {
 80190f2:	b108      	cbz	r0, 80190f8 <main+0x468>
          SaveMetaDataManager();
 80190f4:	f7f6 fc1e 	bl	800f934 <SaveMetaDataManager>
      setConnectable();
 80190f8:	f7f8 f99a 	bl	8011430 <setConnectable>
      set_connectable = FALSE;
 80190fc:	2300      	movs	r3, #0
 80190fe:	702b      	strb	r3, [r5, #0]
    if(BLE_Env_NotifyEvent != BLE_NOTIFY_NOTHING)
 8019100:	4f54      	ldr	r7, [pc, #336]	; (8019254 <main+0x5c4>)
 8019102:	f897 8000 	ldrb.w	r8, [r7]
 8019106:	f1b8 0f00 	cmp.w	r8, #0
 801910a:	d03b      	beq.n	8019184 <main+0x4f4>
  if( (BLE_Env_NotifyEvent == BLE_NOTIFY_SUB) &&
 801910c:	f1b8 0f01 	cmp.w	r8, #1
 8019110:	d128      	bne.n	8019164 <main+0x4d4>
 8019112:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
 8019116:	2900      	cmp	r1, #0
 8019118:	d132      	bne.n	8019180 <main+0x4f0>
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK){
 801911a:	484f      	ldr	r0, [pc, #316]	; (8019258 <main+0x5c8>)
 801911c:	f7f4 fbd6 	bl	800d8cc <HAL_TIM_OC_Start_IT>
 8019120:	b1c0      	cbz	r0, 8019154 <main+0x4c4>
  while(1){
 8019122:	e7fe      	b.n	8019122 <main+0x492>
    PREDMNT1_PRINTF("Vibration parameters values not present in FLASH\r\n");
 8019124:	494d      	ldr	r1, [pc, #308]	; (801925c <main+0x5cc>)
 8019126:	a82a      	add	r0, sp, #168	; 0xa8
 8019128:	f003 fe76 	bl	801ce18 <strcpy>
 801912c:	2132      	movs	r1, #50	; 0x32
 801912e:	a82a      	add	r0, sp, #168	; 0xa8
 8019130:	f000 fc3c 	bl	80199ac <CDC_Fill_Buffer>
    SaveVibrationParamToMemory();
 8019134:	f7ff fd68 	bl	8018c08 <SaveVibrationParamToMemory>
 8019138:	e749      	b.n	8018fce <main+0x33e>
    PREDMNT1_PRINTF("\tOK Set Accelerometer Parameters\r\n\n");
 801913a:	4949      	ldr	r1, [pc, #292]	; (8019260 <main+0x5d0>)
 801913c:	a82a      	add	r0, sp, #168	; 0xa8
 801913e:	f003 fe6b 	bl	801ce18 <strcpy>
 8019142:	2123      	movs	r1, #35	; 0x23
 8019144:	e7bc      	b.n	80190c0 <main+0x430>
        if(!(HAL_GetTick()&0x3F)) {
 8019146:	f7ef fa6d 	bl	8008624 <HAL_GetTick>
 801914a:	0683      	lsls	r3, r0, #26
 801914c:	d1ca      	bne.n	80190e4 <main+0x454>
          LedOffTargetPlatform();
 801914e:	f7ff f95f 	bl	8018410 <LedOffTargetPlatform>
 8019152:	e7c7      	b.n	80190e4 <main+0x454>
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 8019154:	68e2      	ldr	r2, [r4, #12]
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 8019156:	4943      	ldr	r1, [pc, #268]	; (8019264 <main+0x5d4>)
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 8019158:	6a53      	ldr	r3, [r2, #36]	; 0x24
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 801915a:	6849      	ldr	r1, [r1, #4]
    EnvironmentalTimerEnabled= 1;
 801915c:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 8019160:	440b      	add	r3, r1
 8019162:	6353      	str	r3, [r2, #52]	; 0x34
  if( (BLE_Env_NotifyEvent == BLE_NOTIFY_UNSUB) &&
 8019164:	783b      	ldrb	r3, [r7, #0]
 8019166:	2b02      	cmp	r3, #2
 8019168:	d10a      	bne.n	8019180 <main+0x4f0>
 801916a:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 801916e:	b13b      	cbz	r3, 8019180 <main+0x4f0>
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK){
 8019170:	4839      	ldr	r0, [pc, #228]	; (8019258 <main+0x5c8>)
 8019172:	2100      	movs	r1, #0
 8019174:	f7f4 fc46 	bl	800da04 <HAL_TIM_OC_Stop_IT>
 8019178:	b100      	cbz	r0, 801917c <main+0x4ec>
  while(1){
 801917a:	e7fe      	b.n	801917a <main+0x4ea>
    EnvironmentalTimerEnabled= 0;
 801917c:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
      BLE_Env_NotifyEvent = BLE_NOTIFY_NOTHING;
 8019180:	2300      	movs	r3, #0
 8019182:	703b      	strb	r3, [r7, #0]
    if(BLE_AudioLevel_NotifyEvent != BLE_NOTIFY_NOTHING)
 8019184:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8019268 <main+0x5d8>
 8019188:	f898 7000 	ldrb.w	r7, [r8]
 801918c:	2f00      	cmp	r7, #0
 801918e:	d072      	beq.n	8019276 <main+0x5e6>
  if( (BLE_AudioLevel_NotifyEvent == BLE_NOTIFY_SUB) &&
 8019190:	2f01      	cmp	r7, #1
 8019192:	d11e      	bne.n	80191d2 <main+0x542>
 8019194:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
 8019198:	2b00      	cmp	r3, #0
 801919a:	d169      	bne.n	8019270 <main+0x5e0>
    InitMics(AUDIO_IN_SAMPLING_FREQUENCY, AUDIO_VOLUME_INPUT);
 801919c:	2140      	movs	r1, #64	; 0x40
 801919e:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80191a2:	f7ff f8e5 	bl	8018370 <InitMics>
      RMS_Ch[Count]=0;
 80191a6:	2300      	movs	r3, #0
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 80191a8:	482b      	ldr	r0, [pc, #172]	; (8019258 <main+0x5c8>)
      RMS_Ch[Count]=0;
 80191aa:	6063      	str	r3, [r4, #4]
      DBNOISE_Value_Old_Ch[Count] =0;
 80191ac:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      RMS_Ch[Count]=0;
 80191b0:	60a3      	str	r3, [r4, #8]
      DBNOISE_Value_Old_Ch[Count] =0;
 80191b2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 80191b6:	2104      	movs	r1, #4
    AudioLevelEnable= 1;
 80191b8:	7027      	strb	r7, [r4, #0]
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 80191ba:	f7f4 fb87 	bl	800d8cc <HAL_TIM_OC_Start_IT>
 80191be:	b100      	cbz	r0, 80191c2 <main+0x532>
  while(1){
 80191c0:	e7fe      	b.n	80191c0 <main+0x530>
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 80191c2:	68e2      	ldr	r2, [r4, #12]
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_2, (uhCapture + uhCCR2_Val));
 80191c4:	4927      	ldr	r1, [pc, #156]	; (8019264 <main+0x5d4>)
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 80191c6:	6a53      	ldr	r3, [r2, #36]	; 0x24
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_2, (uhCapture + uhCCR2_Val));
 80191c8:	6889      	ldr	r1, [r1, #8]
    AudioLevelTimerEnabled= 1;
 80191ca:	f884 7093 	strb.w	r7, [r4, #147]	; 0x93
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_2, (uhCapture + uhCCR2_Val));
 80191ce:	440b      	add	r3, r1
 80191d0:	6393      	str	r3, [r2, #56]	; 0x38
  if( (BLE_AudioLevel_NotifyEvent == BLE_NOTIFY_UNSUB) &&
 80191d2:	f898 3000 	ldrb.w	r3, [r8]
 80191d6:	2b02      	cmp	r3, #2
 80191d8:	d14a      	bne.n	8019270 <main+0x5e0>
 80191da:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d046      	beq.n	8019270 <main+0x5e0>
    DeInitMics();
 80191e2:	f7ff f8d1 	bl	8018388 <DeInitMics>
    AudioLevelEnable= 0;
 80191e6:	2300      	movs	r3, #0
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 80191e8:	481b      	ldr	r0, [pc, #108]	; (8019258 <main+0x5c8>)
    AudioLevelEnable= 0;
 80191ea:	7023      	strb	r3, [r4, #0]
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 80191ec:	2104      	movs	r1, #4
 80191ee:	f7f4 fc09 	bl	800da04 <HAL_TIM_OC_Stop_IT>
 80191f2:	b3d8      	cbz	r0, 801926c <main+0x5dc>
  while(1){
 80191f4:	e7fe      	b.n	80191f4 <main+0x564>
 80191f6:	bf00      	nop
 80191f8:	0802550d 	.word	0x0802550d
 80191fc:	20011538 	.word	0x20011538
 8019200:	20002e14 	.word	0x20002e14
 8019204:	200124a0 	.word	0x200124a0
 8019208:	08025540 	.word	0x08025540
 801920c:	20001798 	.word	0x20001798
 8019210:	080245f7 	.word	0x080245f7
 8019214:	080255a0 	.word	0x080255a0
 8019218:	080255ac 	.word	0x080255ac
 801921c:	080255bc 	.word	0x080255bc
 8019220:	08025660 	.word	0x08025660
 8019224:	080255c4 	.word	0x080255c4
 8019228:	080255dd 	.word	0x080255dd
 801922c:	080255e7 	.word	0x080255e7
 8019230:	080255f1 	.word	0x080255f1
 8019234:	080255fb 	.word	0x080255fb
 8019238:	08025604 	.word	0x08025604
 801923c:	08024f9d 	.word	0x08024f9d
 8019240:	08025616 	.word	0x08025616
 8019244:	08025663 	.word	0x08025663
 8019248:	200114d0 	.word	0x200114d0
 801924c:	20002d2a 	.word	0x20002d2a
 8019250:	20012000 	.word	0x20012000
 8019254:	20002840 	.word	0x20002840
 8019258:	20012438 	.word	0x20012438
 801925c:	0802556d 	.word	0x0802556d
 8019260:	0802568b 	.word	0x0802568b
 8019264:	2000050c 	.word	0x2000050c
 8019268:	200027e0 	.word	0x200027e0
    AudioLevelTimerEnabled= 0;
 801926c:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
      BLE_AudioLevel_NotifyEvent = BLE_NOTIFY_NOTHING;
 8019270:	2300      	movs	r3, #0
 8019272:	f888 3000 	strb.w	r3, [r8]
    if(BLE_Inertial_NotifyEvent != BLE_NOTIFY_NOTHING)
 8019276:	4f76      	ldr	r7, [pc, #472]	; (8019450 <main+0x7c0>)
 8019278:	f897 8000 	ldrb.w	r8, [r7]
 801927c:	f1b8 0f00 	cmp.w	r8, #0
 8019280:	d023      	beq.n	80192ca <main+0x63a>
  if( (BLE_Inertial_NotifyEvent == BLE_NOTIFY_SUB) &&
 8019282:	f1b8 0f01 	cmp.w	r8, #1
 8019286:	d110      	bne.n	80192aa <main+0x61a>
 8019288:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 801928c:	b9db      	cbnz	r3, 80192c6 <main+0x636>
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_3) != HAL_OK){
 801928e:	4871      	ldr	r0, [pc, #452]	; (8019454 <main+0x7c4>)
 8019290:	2108      	movs	r1, #8
 8019292:	f7f4 fb1b 	bl	800d8cc <HAL_TIM_OC_Start_IT>
 8019296:	b100      	cbz	r0, 801929a <main+0x60a>
  while(1){
 8019298:	e7fe      	b.n	8019298 <main+0x608>
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 801929a:	68e2      	ldr	r2, [r4, #12]
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_3, (uhCapture + uhCCR3_Val));
 801929c:	496e      	ldr	r1, [pc, #440]	; (8019458 <main+0x7c8>)
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 801929e:	6a53      	ldr	r3, [r2, #36]	; 0x24
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_3, (uhCapture + uhCCR3_Val));
 80192a0:	68c9      	ldr	r1, [r1, #12]
    InertialTimerEnabled= 1;
 80192a2:	f884 809c 	strb.w	r8, [r4, #156]	; 0x9c
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_3, (uhCapture + uhCCR3_Val));
 80192a6:	440b      	add	r3, r1
 80192a8:	63d3      	str	r3, [r2, #60]	; 0x3c
  if( (BLE_Inertial_NotifyEvent == BLE_NOTIFY_UNSUB) &&
 80192aa:	783b      	ldrb	r3, [r7, #0]
 80192ac:	2b02      	cmp	r3, #2
 80192ae:	d10a      	bne.n	80192c6 <main+0x636>
 80192b0:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 80192b4:	b13b      	cbz	r3, 80192c6 <main+0x636>
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_3) != HAL_OK){
 80192b6:	4867      	ldr	r0, [pc, #412]	; (8019454 <main+0x7c4>)
 80192b8:	2108      	movs	r1, #8
 80192ba:	f7f4 fba3 	bl	800da04 <HAL_TIM_OC_Stop_IT>
 80192be:	b100      	cbz	r0, 80192c2 <main+0x632>
  while(1){
 80192c0:	e7fe      	b.n	80192c0 <main+0x630>
    InertialTimerEnabled= 0;
 80192c2:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
      BLE_Inertial_NotifyEvent = BLE_NOTIFY_NOTHING;
 80192c6:	2300      	movs	r3, #0
 80192c8:	703b      	strb	r3, [r7, #0]
    if(BLE_Battery_NotifyEvent != BLE_NOTIFY_NOTHING)
 80192ca:	4f64      	ldr	r7, [pc, #400]	; (801945c <main+0x7cc>)
 80192cc:	f897 8000 	ldrb.w	r8, [r7]
 80192d0:	f1b8 0f00 	cmp.w	r8, #0
 80192d4:	d029      	beq.n	801932a <main+0x69a>
  if( (BLE_Battery_NotifyEvent == BLE_NOTIFY_SUB) && 
 80192d6:	f1b8 0f01 	cmp.w	r8, #1
 80192da:	d113      	bne.n	8019304 <main+0x674>
 80192dc:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 80192e0:	bb0b      	cbnz	r3, 8019326 <main+0x696>
    BSP_BC_CmdSend(BATMS_ON);
 80192e2:	200a      	movs	r0, #10
 80192e4:	f7ee f87a 	bl	80073dc <BSP_BC_CmdSend>
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 80192e8:	485a      	ldr	r0, [pc, #360]	; (8019454 <main+0x7c4>)
 80192ea:	210c      	movs	r1, #12
 80192ec:	f7f4 faee 	bl	800d8cc <HAL_TIM_OC_Start_IT>
 80192f0:	b100      	cbz	r0, 80192f4 <main+0x664>
  while(1){
 80192f2:	e7fe      	b.n	80192f2 <main+0x662>
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 80192f4:	68e2      	ldr	r2, [r4, #12]
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
 80192f6:	4958      	ldr	r1, [pc, #352]	; (8019458 <main+0x7c8>)
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 80192f8:	6a53      	ldr	r3, [r2, #36]	; 0x24
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
 80192fa:	6909      	ldr	r1, [r1, #16]
    BatteryTimerEnabled= 1;
 80192fc:	f884 809d 	strb.w	r8, [r4, #157]	; 0x9d
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
 8019300:	440b      	add	r3, r1
 8019302:	6413      	str	r3, [r2, #64]	; 0x40
  if( (BLE_Battery_NotifyEvent == BLE_NOTIFY_UNSUB) &&
 8019304:	783b      	ldrb	r3, [r7, #0]
 8019306:	2b02      	cmp	r3, #2
 8019308:	d10d      	bne.n	8019326 <main+0x696>
 801930a:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 801930e:	b153      	cbz	r3, 8019326 <main+0x696>
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8019310:	4850      	ldr	r0, [pc, #320]	; (8019454 <main+0x7c4>)
 8019312:	210c      	movs	r1, #12
 8019314:	f7f4 fb76 	bl	800da04 <HAL_TIM_OC_Stop_IT>
 8019318:	b100      	cbz	r0, 801931c <main+0x68c>
  while(1){
 801931a:	e7fe      	b.n	801931a <main+0x68a>
    BatteryTimerEnabled= 0;
 801931c:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    BSP_BC_CmdSend(BATMS_OFF);
 8019320:	2009      	movs	r0, #9
 8019322:	f7ee f85b 	bl	80073dc <BSP_BC_CmdSend>
      BLE_Battery_NotifyEvent = BLE_NOTIFY_NOTHING;
 8019326:	2300      	movs	r3, #0
 8019328:	703b      	strb	r3, [r7, #0]
    if(BLE_FFT_Amplitude_NotifyEvent != BLE_NOTIFY_NOTHING)
 801932a:	4f4d      	ldr	r7, [pc, #308]	; (8019460 <main+0x7d0>)
 801932c:	783b      	ldrb	r3, [r7, #0]
 801932e:	b13b      	cbz	r3, 8019340 <main+0x6b0>
  if(BLE_FFT_Amplitude_NotifyEvent == BLE_NOTIFY_SUB) {
 8019330:	2b01      	cmp	r3, #1
 8019332:	d144      	bne.n	80193be <main+0x72e>
    FFT_Amplitude= 1;
 8019334:	4a4b      	ldr	r2, [pc, #300]	; (8019464 <main+0x7d4>)
    PredictiveMaintenance= 1;
 8019336:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    FFT_Amplitude= 1;
 801933a:	6013      	str	r3, [r2, #0]
      BLE_FFT_Amplitude_NotifyEvent = BLE_NOTIFY_NOTHING;
 801933c:	2300      	movs	r3, #0
 801933e:	703b      	strb	r3, [r7, #0]
    if(BLE_FFTAlarmSpeedStatus_NotifyEvent != BLE_NOTIFY_NOTHING)
 8019340:	4f49      	ldr	r7, [pc, #292]	; (8019468 <main+0x7d8>)
 8019342:	783b      	ldrb	r3, [r7, #0]
 8019344:	b153      	cbz	r3, 801935c <main+0x6cc>
  if(BLE_FFTAlarmSpeedStatus_NotifyEvent == BLE_NOTIFY_SUB) {
 8019346:	2b01      	cmp	r3, #1
 8019348:	d148      	bne.n	80193dc <main+0x74c>
    if(!PredictiveMaintenance)
 801934a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801934e:	b91a      	cbnz	r2, 8019358 <main+0x6c8>
      FFT_Alarm= 1;
 8019350:	4a46      	ldr	r2, [pc, #280]	; (801946c <main+0x7dc>)
      PredictiveMaintenance= 1;
 8019352:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
      FFT_Alarm= 1;
 8019356:	6013      	str	r3, [r2, #0]
      BLE_FFTAlarmSpeedStatus_NotifyEvent= BLE_NOTIFY_NOTHING;
 8019358:	2300      	movs	r3, #0
 801935a:	703b      	strb	r3, [r7, #0]
    if(BLE_FFTAlarmAccPeakStatus_NotifyEvent != BLE_NOTIFY_NOTHING)
 801935c:	4f44      	ldr	r7, [pc, #272]	; (8019470 <main+0x7e0>)
 801935e:	783b      	ldrb	r3, [r7, #0]
 8019360:	b153      	cbz	r3, 8019378 <main+0x6e8>
  if(BLE_FFTAlarmAccPeakStatus_NotifyEvent == BLE_NOTIFY_SUB) {
 8019362:	2b01      	cmp	r3, #1
 8019364:	d14d      	bne.n	8019402 <main+0x772>
    if(!PredictiveMaintenance)
 8019366:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801936a:	b91a      	cbnz	r2, 8019374 <main+0x6e4>
      FFT_Alarm= 1;
 801936c:	4a3f      	ldr	r2, [pc, #252]	; (801946c <main+0x7dc>)
      PredictiveMaintenance= 1;
 801936e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
      FFT_Alarm= 1;
 8019372:	6013      	str	r3, [r2, #0]
      BLE_FFTAlarmAccPeakStatus_NotifyEvent= BLE_NOTIFY_NOTHING;
 8019374:	2300      	movs	r3, #0
 8019376:	703b      	strb	r3, [r7, #0]
    if(BLE_FFTAlarmSubrangeStatus_NotifyEvent != BLE_NOTIFY_NOTHING)
 8019378:	4f3e      	ldr	r7, [pc, #248]	; (8019474 <main+0x7e4>)
 801937a:	783b      	ldrb	r3, [r7, #0]
 801937c:	b153      	cbz	r3, 8019394 <main+0x704>
  if(BLE_FFTAlarmSubrangeStatus_NotifyEvent == BLE_NOTIFY_SUB) {
 801937e:	2b01      	cmp	r3, #1
 8019380:	d152      	bne.n	8019428 <main+0x798>
    if(!PredictiveMaintenance)
 8019382:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8019386:	b91a      	cbnz	r2, 8019390 <main+0x700>
      FFT_Alarm= 1;
 8019388:	4a38      	ldr	r2, [pc, #224]	; (801946c <main+0x7dc>)
      PredictiveMaintenance= 1;
 801938a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
      FFT_Alarm= 1;
 801938e:	6013      	str	r3, [r2, #0]
      BLE_FFTAlarmSubrangeStatus_NotifyEvent= BLE_NOTIFY_NOTHING;     
 8019390:	2300      	movs	r3, #0
 8019392:	703b      	strb	r3, [r7, #0]
    if(ButtonPressed) {
 8019394:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019396:	b14b      	cbz	r3, 80193ac <main+0x71c>
  PREDMNT1_PRINTF("\r\nUser Button Pressed\r\n\r\n");
 8019398:	4937      	ldr	r1, [pc, #220]	; (8019478 <main+0x7e8>)
 801939a:	a82a      	add	r0, sp, #168	; 0xa8
 801939c:	f003 fd3c 	bl	801ce18 <strcpy>
 80193a0:	2119      	movs	r1, #25
 80193a2:	a82a      	add	r0, sp, #168	; 0xa8
 80193a4:	f000 fb02 	bl	80199ac <CDC_Fill_Buffer>
      ButtonPressed=0;       
 80193a8:	2300      	movs	r3, #0
 80193aa:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(PredictiveMaintenance){
 80193ac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d065      	beq.n	8019480 <main+0x7f0>
      if (MotionSP_MainManager() != BSP_ERROR_NONE)
 80193b4:	f7fe f922 	bl	80175fc <MotionSP_MainManager>
 80193b8:	2800      	cmp	r0, #0
 80193ba:	d061      	beq.n	8019480 <main+0x7f0>
  while(1){
 80193bc:	e7fe      	b.n	80193bc <main+0x72c>
  if(BLE_FFT_Amplitude_NotifyEvent == BLE_NOTIFY_UNSUB) {
 80193be:	2b02      	cmp	r3, #2
 80193c0:	d1bc      	bne.n	801933c <main+0x6ac>
    disable_FIFO();
 80193c2:	f7fe f8bd 	bl	8017540 <disable_FIFO>
    EnableDisable_ACC_HP_Filter(0);
 80193c6:	2000      	movs	r0, #0
 80193c8:	f7fd fc88 	bl	8016cdc <EnableDisable_ACC_HP_Filter>
    FFT_Amplitude= 0;
 80193cc:	4a25      	ldr	r2, [pc, #148]	; (8019464 <main+0x7d4>)
    PredictiveMaintenance= 0;
 80193ce:	2300      	movs	r3, #0
 80193d0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    FFT_Amplitude= 0;
 80193d4:	6013      	str	r3, [r2, #0]
    MotionSP_Running = 0;
 80193d6:	4a29      	ldr	r2, [pc, #164]	; (801947c <main+0x7ec>)
 80193d8:	7013      	strb	r3, [r2, #0]
 80193da:	e7af      	b.n	801933c <main+0x6ac>
  if(BLE_FFTAlarmSpeedStatus_NotifyEvent == BLE_NOTIFY_UNSUB) {
 80193dc:	2b02      	cmp	r3, #2
 80193de:	d1bb      	bne.n	8019358 <main+0x6c8>
    if(PredictiveMaintenance)
 80193e0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d0b7      	beq.n	8019358 <main+0x6c8>
      disable_FIFO();
 80193e8:	f7fe f8aa 	bl	8017540 <disable_FIFO>
      EnableDisable_ACC_HP_Filter(0);
 80193ec:	2000      	movs	r0, #0
 80193ee:	f7fd fc75 	bl	8016cdc <EnableDisable_ACC_HP_Filter>
      FFT_Alarm= 0;
 80193f2:	4a1e      	ldr	r2, [pc, #120]	; (801946c <main+0x7dc>)
      PredictiveMaintenance= 0;
 80193f4:	2300      	movs	r3, #0
 80193f6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
      FFT_Alarm= 0;
 80193fa:	6013      	str	r3, [r2, #0]
      MotionSP_Running = 0;
 80193fc:	4a1f      	ldr	r2, [pc, #124]	; (801947c <main+0x7ec>)
 80193fe:	7013      	strb	r3, [r2, #0]
 8019400:	e7aa      	b.n	8019358 <main+0x6c8>
  if(BLE_FFTAlarmAccPeakStatus_NotifyEvent == BLE_NOTIFY_UNSUB ){
 8019402:	2b02      	cmp	r3, #2
 8019404:	d1b6      	bne.n	8019374 <main+0x6e4>
    if(PredictiveMaintenance)
 8019406:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801940a:	2b00      	cmp	r3, #0
 801940c:	d0b2      	beq.n	8019374 <main+0x6e4>
      disable_FIFO();
 801940e:	f7fe f897 	bl	8017540 <disable_FIFO>
      EnableDisable_ACC_HP_Filter(0);
 8019412:	2000      	movs	r0, #0
 8019414:	f7fd fc62 	bl	8016cdc <EnableDisable_ACC_HP_Filter>
      FFT_Alarm= 0;
 8019418:	4a14      	ldr	r2, [pc, #80]	; (801946c <main+0x7dc>)
      PredictiveMaintenance= 0;
 801941a:	2300      	movs	r3, #0
 801941c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
      FFT_Alarm= 0;
 8019420:	6013      	str	r3, [r2, #0]
      MotionSP_Running = 0;
 8019422:	4a16      	ldr	r2, [pc, #88]	; (801947c <main+0x7ec>)
 8019424:	7013      	strb	r3, [r2, #0]
 8019426:	e7a5      	b.n	8019374 <main+0x6e4>
  if(BLE_FFTAlarmSubrangeStatus_NotifyEvent == BLE_NOTIFY_UNSUB) {
 8019428:	2b02      	cmp	r3, #2
 801942a:	d1b1      	bne.n	8019390 <main+0x700>
    if(PredictiveMaintenance)
 801942c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8019430:	2b00      	cmp	r3, #0
 8019432:	d0ad      	beq.n	8019390 <main+0x700>
      disable_FIFO();
 8019434:	f7fe f884 	bl	8017540 <disable_FIFO>
      EnableDisable_ACC_HP_Filter(0);
 8019438:	2000      	movs	r0, #0
 801943a:	f7fd fc4f 	bl	8016cdc <EnableDisable_ACC_HP_Filter>
      FFT_Alarm= 0;
 801943e:	4a0b      	ldr	r2, [pc, #44]	; (801946c <main+0x7dc>)
      PredictiveMaintenance= 0;
 8019440:	2300      	movs	r3, #0
 8019442:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
      FFT_Alarm= 0;
 8019446:	6013      	str	r3, [r2, #0]
      MotionSP_Running = 0;
 8019448:	4a0c      	ldr	r2, [pc, #48]	; (801947c <main+0x7ec>)
 801944a:	7013      	strb	r3, [r2, #0]
 801944c:	e7a0      	b.n	8019390 <main+0x700>
 801944e:	bf00      	nop
 8019450:	20002938 	.word	0x20002938
 8019454:	20012438 	.word	0x20012438
 8019458:	2000050c 	.word	0x2000050c
 801945c:	20002810 	.word	0x20002810
 8019460:	20002908 	.word	0x20002908
 8019464:	20011cd4 	.word	0x20011cd4
 8019468:	200028a8 	.word	0x200028a8
 801946c:	20011cbc 	.word	0x20011cbc
 8019470:	20002878 	.word	0x20002878
 8019474:	200028d8 	.word	0x200028d8
 8019478:	080256af 	.word	0x080256af
 801947c:	20011cd0 	.word	0x20011cd0
    if(HCI_ProcessEvent) {
 8019480:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8019484:	b123      	cbz	r3, 8019490 <main+0x800>
      HCI_ProcessEvent=0;
 8019486:	2300      	movs	r3, #0
 8019488:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
      hci_user_evt_proc();
 801948c:	f7f6 f960 	bl	800f750 <hci_user_evt_proc>
    if(SendEnv) {
 8019490:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019492:	b343      	cbz	r3, 80194e6 <main+0x856>
      SendEnv=0;
 8019494:	2300      	movs	r3, #0
 8019496:	65a3      	str	r3, [r4, #88]	; 0x58
    ReadEnvironmentalData(&PressToSend,&HumToSend, &Temp1ToSend,&Temp2ToSend);
 8019498:	aa14      	add	r2, sp, #80	; 0x50
 801949a:	ab11      	add	r3, sp, #68	; 0x44
 801949c:	a90e      	add	r1, sp, #56	; 0x38
 801949e:	a819      	add	r0, sp, #100	; 0x64
 80194a0:	f7ff fa2e 	bl	8018900 <ReadEnvironmentalData>
    if(BLE_StdTerm_Service==BLE_SERV_ENABLE) {
 80194a4:	4b8a      	ldr	r3, [pc, #552]	; (80196d0 <main+0xa40>)
 80194a6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80194aa:	781b      	ldrb	r3, [r3, #0]
 80194ac:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
 80194b0:	2b01      	cmp	r3, #1
      BytesToWrite = sprintf((char *)BufferToWrite,"Sending: Press=%ld Hum=%d Temp1=%d Temp2=%d \r\n", PressToSend, HumToSend, Temp1ToSend, Temp2ToSend);
 80194b2:	e9cd 2100 	strd	r2, r1, [sp]
 80194b6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80194ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80194bc:	4985      	ldr	r1, [pc, #532]	; (80196d4 <main+0xa44>)
    if(BLE_StdTerm_Service==BLE_SERV_ENABLE) {
 80194be:	f040 80e6 	bne.w	801968e <main+0x9fe>
      BytesToWrite = sprintf((char *)BufferToWrite,"Sending: Press=%ld Hum=%d Temp1=%d Temp2=%d \r\n", PressToSend, HumToSend, Temp1ToSend, Temp2ToSend);
 80194c2:	4885      	ldr	r0, [pc, #532]	; (80196d8 <main+0xa48>)
 80194c4:	f003 fc38 	bl	801cd38 <siprintf>
 80194c8:	4b84      	ldr	r3, [pc, #528]	; (80196dc <main+0xa4c>)
 80194ca:	b2c1      	uxtb	r1, r0
      Term_Update(BufferToWrite,BytesToWrite);
 80194cc:	4882      	ldr	r0, [pc, #520]	; (80196d8 <main+0xa48>)
      BytesToWrite = sprintf((char *)BufferToWrite,"Sending: Press=%ld Hum=%d Temp1=%d Temp2=%d \r\n", PressToSend, HumToSend, Temp1ToSend, Temp2ToSend);
 80194ce:	7019      	strb	r1, [r3, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 80194d0:	f7f7 ff54 	bl	801137c <Term_Update>
    BLE_EnvironmentalUpdate(PressToSend,HumToSend,Temp2ToSend,Temp1ToSend);
 80194d4:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 80194d8:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 80194dc:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80194e0:	9819      	ldr	r0, [sp, #100]	; 0x64
 80194e2:	f7f6 ff07 	bl	80102f4 <BLE_EnvironmentalUpdate>
    if (SendAudioLevel) {
 80194e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d04b      	beq.n	8019584 <main+0x8f4>
      SendAudioLevel = 0;
 80194ec:	4f7c      	ldr	r7, [pc, #496]	; (80196e0 <main+0xa50>)
    RMS_Ch[NumberMic] /= ((float)(NumSample/AUDIO_IN_CHANNELS)*ALGO_PERIOD_AUDIO_LEVEL);
 80194ee:	f8df b218 	ldr.w	fp, [pc, #536]	; 8019708 <main+0xa78>
 80194f2:	eddf 8a7c 	vldr	s17, [pc, #496]	; 80196e4 <main+0xa54>
    DBNOISE_Value_Ch[NumberMic] = (uint16_t)((120.0f - 20 * log10f(32768 * (1 + 0.25f * (AUDIO_VOLUME_INPUT /*AudioInVolume*/ - 4))) + 10.0f * log10f(RMS_Ch[NumberMic])) * 0.3f + DBNOISE_Value_Old_Ch[NumberMic] * 0.7f);
 80194f6:	ed9f 8a7c 	vldr	s16, [pc, #496]	; 80196e8 <main+0xa58>
      SendAudioLevel = 0;
 80194fa:	2300      	movs	r3, #0
 80194fc:	65e3      	str	r3, [r4, #92]	; 0x5c
  for(NumberMic=0;NumberMic<(AUDIO_IN_CHANNELS);NumberMic++) {
 80194fe:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 8019502:	f107 0890 	add.w	r8, r7, #144	; 0x90
      SendAudioLevel = 0;
 8019506:	f04f 0a02 	mov.w	sl, #2
    DBNOISE_Value_Ch[NumberMic] = 0;
 801950a:	2300      	movs	r3, #0
 801950c:	f8a9 3000 	strh.w	r3, [r9]
    RMS_Ch[NumberMic] /= ((float)(NumSample/AUDIO_IN_CHANNELS)*ALGO_PERIOD_AUDIO_LEVEL);
 8019510:	f8db 3000 	ldr.w	r3, [fp]
 8019514:	ed97 7a00 	vldr	s14, [r7]
 8019518:	085b      	lsrs	r3, r3, #1
 801951a:	ee07 3a90 	vmov	s15, r3
 801951e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019522:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8019526:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801952a:	eca7 0a01 	vstmia	r7!, {s0}
    DBNOISE_Value_Ch[NumberMic] = (uint16_t)((120.0f - 20 * log10f(32768 * (1 + 0.25f * (AUDIO_VOLUME_INPUT /*AudioInVolume*/ - 4))) + 10.0f * log10f(RMS_Ch[NumberMic])) * 0.3f + DBNOISE_Value_Old_Ch[NumberMic] * 0.7f);
 801952e:	f006 ffa7 	bl	8020480 <log10f>
 8019532:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8019536:	eef0 6a48 	vmov.f32	s13, s16
 801953a:	eee0 6a27 	vfma.f32	s13, s0, s15
  for(NumberMic=0;NumberMic<(AUDIO_IN_CHANNELS);NumberMic++) {
 801953e:	f1ba 0f01 	cmp.w	sl, #1
    DBNOISE_Value_Ch[NumberMic] = (uint16_t)((120.0f - 20 * log10f(32768 * (1 + 0.25f * (AUDIO_VOLUME_INPUT /*AudioInVolume*/ - 4))) + 10.0f * log10f(RMS_Ch[NumberMic])) * 0.3f + DBNOISE_Value_Old_Ch[NumberMic] * 0.7f);
 8019542:	edd8 7a00 	vldr	s15, [r8]
 8019546:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80196ec <main+0xa5c>
 801954a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801954e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80196f0 <main+0xa60>
 8019552:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801955a:	ee17 3a90 	vmov	r3, s15
 801955e:	b29b      	uxth	r3, r3
    DBNOISE_Value_Old_Ch[NumberMic] = DBNOISE_Value_Ch[NumberMic];
 8019560:	ee07 3a90 	vmov	s15, r3
 8019564:	eef8 7a67 	vcvt.f32.u32	s15, s15
    DBNOISE_Value_Ch[NumberMic] = (uint16_t)((120.0f - 20 * log10f(32768 * (1 + 0.25f * (AUDIO_VOLUME_INPUT /*AudioInVolume*/ - 4))) + 10.0f * log10f(RMS_Ch[NumberMic])) * 0.3f + DBNOISE_Value_Old_Ch[NumberMic] * 0.7f);
 8019568:	f829 3b02 	strh.w	r3, [r9], #2
    RMS_Ch[NumberMic] = 0.0f;
 801956c:	f04f 0300 	mov.w	r3, #0
    DBNOISE_Value_Old_Ch[NumberMic] = DBNOISE_Value_Ch[NumberMic];
 8019570:	ece8 7a01 	vstmia	r8!, {s15}
    RMS_Ch[NumberMic] = 0.0f;
 8019574:	f847 3c04 	str.w	r3, [r7, #-4]
  for(NumberMic=0;NumberMic<(AUDIO_IN_CHANNELS);NumberMic++) {
 8019578:	f040 8091 	bne.w	801969e <main+0xa0e>
  BLE_AudioLevelUpdate(DBNOISE_Value_Ch, AUDIO_IN_CHANNELS);
 801957c:	2102      	movs	r1, #2
 801957e:	a82a      	add	r0, sp, #168	; 0xa8
 8019580:	f7f6 fd04 	bl	800ff8c <BLE_AudioLevelUpdate>
    if(SendAccGyroMag) {
 8019584:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8019586:	2b00      	cmp	r3, #0
 8019588:	d037      	beq.n	80195fa <main+0x96a>
  if(TargetBoardFeatures.AccSensorIsInit)
 801958a:	4f5a      	ldr	r7, [pc, #360]	; (80196f4 <main+0xa64>)
      SendAccGyroMag=0;
 801958c:	2300      	movs	r3, #0
  ACC_Value.x = ACC_Value.y = ACC_Value.z =0;
 801958e:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  GYR_Value.x = GYR_Value.y = GYR_Value.z =0;
 8019592:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  MAG_Value.x = MAG_Value.y = MAG_Value.z =0;
 8019596:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
      SendAccGyroMag=0;
 801959a:	6623      	str	r3, [r4, #96]	; 0x60
  ACC_Value.x = ACC_Value.y = ACC_Value.z =0;
 801959c:	930b      	str	r3, [sp, #44]	; 0x2c
  GYR_Value.x = GYR_Value.y = GYR_Value.z =0;
 801959e:	930e      	str	r3, [sp, #56]	; 0x38
  MAG_Value.x = MAG_Value.y = MAG_Value.z =0;
 80195a0:	9311      	str	r3, [sp, #68]	; 0x44
  if(TargetBoardFeatures.AccSensorIsInit)
 80195a2:	793b      	ldrb	r3, [r7, #4]
 80195a4:	b123      	cbz	r3, 80195b0 <main+0x920>
    MOTION_SENSOR_GetAxes(ACCELERO_INSTANCE, MOTION_ACCELERO, &ACC_Value);
 80195a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80195a8:	2102      	movs	r1, #2
 80195aa:	2001      	movs	r0, #1
 80195ac:	f7ee ff3c 	bl	8008428 <BSP_MOTION_SENSOR_GetAxes>
  if(TargetBoardFeatures.GyroSensorIsInit)
 80195b0:	797b      	ldrb	r3, [r7, #5]
 80195b2:	b123      	cbz	r3, 80195be <main+0x92e>
    MOTION_SENSOR_GetAxes(GYRO_INSTANCE,MOTION_GYRO, &GYR_Value);
 80195b4:	2101      	movs	r1, #1
 80195b6:	aa0e      	add	r2, sp, #56	; 0x38
 80195b8:	4608      	mov	r0, r1
 80195ba:	f7ee ff35 	bl	8008428 <BSP_MOTION_SENSOR_GetAxes>
  if(TargetBoardFeatures.MagSensorIsInit)
 80195be:	79bb      	ldrb	r3, [r7, #6]
 80195c0:	b123      	cbz	r3, 80195cc <main+0x93c>
    MOTION_SENSOR_GetAxes(MAGNETO_INSTANCE, MOTION_MAGNETO, &MAG_Value);
 80195c2:	aa11      	add	r2, sp, #68	; 0x44
 80195c4:	2104      	movs	r1, #4
 80195c6:	2000      	movs	r0, #0
 80195c8:	f7ee ff2e 	bl	8008428 <BSP_MOTION_SENSOR_GetAxes>
  ACC_SensorValue.x= ACC_Value.x;
 80195cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80195ce:	9314      	str	r3, [sp, #80]	; 0x50
  ACC_SensorValue.y= ACC_Value.y;
 80195d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80195d2:	9315      	str	r3, [sp, #84]	; 0x54
  ACC_SensorValue.z= ACC_Value.z;
 80195d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80195d6:	9316      	str	r3, [sp, #88]	; 0x58
  GYR_SensorValue.x= GYR_Value.x;
 80195d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80195da:	9319      	str	r3, [sp, #100]	; 0x64
  GYR_SensorValue.y= GYR_Value.y;
 80195dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80195de:	931a      	str	r3, [sp, #104]	; 0x68
  GYR_SensorValue.z= GYR_Value.z;
 80195e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80195e2:	931b      	str	r3, [sp, #108]	; 0x6c
  MAG_SensorValue.x= MAG_Value.x;
 80195e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80195e6:	932a      	str	r3, [sp, #168]	; 0xa8
  MAG_SensorValue.y= MAG_Value.y;
 80195e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80195ea:	932b      	str	r3, [sp, #172]	; 0xac
  BLE_AccGyroMagUpdate(&ACC_SensorValue,&GYR_SensorValue,&MAG_SensorValue);
 80195ec:	aa2a      	add	r2, sp, #168	; 0xa8
  MAG_SensorValue.z= MAG_Value.z;
 80195ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80195f0:	932c      	str	r3, [sp, #176]	; 0xb0
  BLE_AccGyroMagUpdate(&ACC_SensorValue,&GYR_SensorValue,&MAG_SensorValue);
 80195f2:	a919      	add	r1, sp, #100	; 0x64
 80195f4:	a814      	add	r0, sp, #80	; 0x50
 80195f6:	f7f7 fa99 	bl	8010b2c <BLE_AccGyroMagUpdate>
    if(SendBatteryInfo){
 80195fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d044      	beq.n	801968a <main+0x9fa>
  stbc02_State_TypeDef BC_State = {(stbc02_ChgState_TypeDef)0, ""};
 8019600:	4f3d      	ldr	r7, [pc, #244]	; (80196f8 <main+0xa68>)
      SendBatteryInfo=0;
 8019602:	f04f 0800 	mov.w	r8, #0
  stbc02_State_TypeDef BC_State = {(stbc02_ChgState_TypeDef)0, ""};
 8019606:	783b      	ldrb	r3, [r7, #0]
 8019608:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
 801960c:	221f      	movs	r2, #31
 801960e:	4641      	mov	r1, r8
 8019610:	f10d 0066 	add.w	r0, sp, #102	; 0x66
      SendBatteryInfo=0;
 8019614:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
  stbc02_State_TypeDef BC_State = {(stbc02_ChgState_TypeDef)0, ""};
 8019618:	f88d 8064 	strb.w	r8, [sp, #100]	; 0x64
 801961c:	f002 fe22 	bl	801c264 <memset>
  BSP_BC_GetVoltageAndLevel(&Voltage,&BatteryLevel);
 8019620:	a911      	add	r1, sp, #68	; 0x44
 8019622:	a814      	add	r0, sp, #80	; 0x50
  uint32_t BatteryLevel= 0;
 8019624:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  BSP_BC_GetVoltageAndLevel(&Voltage,&BatteryLevel);
 8019628:	f7ed ff3e 	bl	80074a8 <BSP_BC_GetVoltageAndLevel>
  BSP_BC_GetState(&BC_State);
 801962c:	a819      	add	r0, sp, #100	; 0x64
 801962e:	f7ee f873 	bl	8007718 <BSP_BC_GetState>
  switch(BC_State.Id) {
 8019632:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
  BLE_BatteryUpdate(BatteryLevel, Voltage, 0x8000, Status);
 8019636:	9914      	ldr	r1, [sp, #80]	; 0x50
 8019638:	9811      	ldr	r0, [sp, #68]	; 0x44
 801963a:	3b01      	subs	r3, #1
 801963c:	b2db      	uxtb	r3, r3
 801963e:	2b03      	cmp	r3, #3
 8019640:	bf96      	itet	ls
 8019642:	19db      	addls	r3, r3, r7
  switch(BC_State.Id) {
 8019644:	2304      	movhi	r3, #4
 8019646:	f893 3020 	ldrbls.w	r3, [r3, #32]
  BLE_BatteryUpdate(BatteryLevel, Voltage, 0x8000, Status);
 801964a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801964e:	f7f6 fd2b 	bl	80100a8 <BLE_BatteryUpdate>
  if(BLE_StdTerm_Service==BLE_SERV_ENABLE) {
 8019652:	4b1f      	ldr	r3, [pc, #124]	; (80196d0 <main+0xa40>)
 8019654:	781b      	ldrb	r3, [r3, #0]
 8019656:	2b01      	cmp	r3, #1
 8019658:	d124      	bne.n	80196a4 <main+0xa14>
     BytesToWrite = sprintf((char *)BufferToWrite,"Battery Report: \r\n");
 801965a:	4928      	ldr	r1, [pc, #160]	; (80196fc <main+0xa6c>)
 801965c:	4f1f      	ldr	r7, [pc, #124]	; (80196dc <main+0xa4c>)
 801965e:	481e      	ldr	r0, [pc, #120]	; (80196d8 <main+0xa48>)
 8019660:	f003 fbda 	bl	801ce18 <strcpy>
 8019664:	2112      	movs	r1, #18
     Term_Update(BufferToWrite,BytesToWrite);
 8019666:	481c      	ldr	r0, [pc, #112]	; (80196d8 <main+0xa48>)
     BytesToWrite = sprintf((char *)BufferToWrite,"Battery Report: \r\n");
 8019668:	7039      	strb	r1, [r7, #0]
     Term_Update(BufferToWrite,BytesToWrite);
 801966a:	f7f7 fe87 	bl	801137c <Term_Update>
     BytesToWrite = sprintf((char *)BufferToWrite,"Charge= %ld%% Voltage=%ld mV BC_State= %d\r\n", BatteryLevel, Voltage, BC_State.Id);
 801966e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8019672:	4923      	ldr	r1, [pc, #140]	; (8019700 <main+0xa70>)
 8019674:	9300      	str	r3, [sp, #0]
 8019676:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019678:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801967a:	4817      	ldr	r0, [pc, #92]	; (80196d8 <main+0xa48>)
 801967c:	f003 fb5c 	bl	801cd38 <siprintf>
 8019680:	b2c1      	uxtb	r1, r0
     Term_Update(BufferToWrite,BytesToWrite);
 8019682:	4815      	ldr	r0, [pc, #84]	; (80196d8 <main+0xa48>)
     BytesToWrite = sprintf((char *)BufferToWrite,"Charge= %ld%% Voltage=%ld mV BC_State= %d\r\n", BatteryLevel, Voltage, BC_State.Id);
 8019684:	7039      	strb	r1, [r7, #0]
     Term_Update(BufferToWrite,BytesToWrite);
 8019686:	f7f7 fe79 	bl	801137c <Term_Update>
    __WFI();
 801968a:	bf30      	wfi
    if(!connected)
 801968c:	e51d      	b.n	80190ca <main+0x43a>
      PREDMNT1_PRINTF("Sending: Press=%ld Hum=%d Temp1=%d Temp2=%d \r\n", PressToSend, HumToSend, Temp1ToSend, Temp2ToSend);
 801968e:	a82a      	add	r0, sp, #168	; 0xa8
 8019690:	f003 fb52 	bl	801cd38 <siprintf>
 8019694:	4601      	mov	r1, r0
 8019696:	a82a      	add	r0, sp, #168	; 0xa8
 8019698:	f000 f988 	bl	80199ac <CDC_Fill_Buffer>
 801969c:	e71a      	b.n	80194d4 <main+0x844>
 801969e:	f04f 0a01 	mov.w	sl, #1
 80196a2:	e732      	b.n	801950a <main+0x87a>
    PREDMNT1_PRINTF("Battery Report: ");
 80196a4:	4917      	ldr	r1, [pc, #92]	; (8019704 <main+0xa74>)
 80196a6:	a82a      	add	r0, sp, #168	; 0xa8
 80196a8:	f003 fbb6 	bl	801ce18 <strcpy>
 80196ac:	2110      	movs	r1, #16
 80196ae:	a82a      	add	r0, sp, #168	; 0xa8
 80196b0:	f000 f97c 	bl	80199ac <CDC_Fill_Buffer>
    PREDMNT1_PRINTF("Charge= %ld%% Voltage=%ld mV BC_State= %d\r\n", BatteryLevel, Voltage, BC_State.Id);
 80196b4:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80196b8:	9300      	str	r3, [sp, #0]
 80196ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80196bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80196be:	4910      	ldr	r1, [pc, #64]	; (8019700 <main+0xa70>)
 80196c0:	a82a      	add	r0, sp, #168	; 0xa8
 80196c2:	f003 fb39 	bl	801cd38 <siprintf>
 80196c6:	4601      	mov	r1, r0
 80196c8:	a82a      	add	r0, sp, #168	; 0xa8
 80196ca:	f000 f96f 	bl	80199ac <CDC_Fill_Buffer>
}
 80196ce:	e7dc      	b.n	801968a <main+0x9fa>
 80196d0:	20002975 	.word	0x20002975
 80196d4:	080256c9 	.word	0x080256c9
 80196d8:	20002b41 	.word	0x20002b41
 80196dc:	20002c41 	.word	0x20002c41
 80196e0:	20012430 	.word	0x20012430
 80196e4:	42480000 	.word	0x42480000
 80196e8:	40b379b0 	.word	0x40b379b0
 80196ec:	3f333333 	.word	0x3f333333
 80196f0:	3e99999a 	.word	0x3e99999a
 80196f4:	20012000 	.word	0x20012000
 80196f8:	08022786 	.word	0x08022786
 80196fc:	080256f8 	.word	0x080256f8
 8019700:	0802570b 	.word	0x0802570b
 8019704:	08025737 	.word	0x08025737
 8019708:	2000050c 	.word	0x2000050c

0801970c <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 801970c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801970e:	4c17      	ldr	r4, [pc, #92]	; (801976c <HAL_PCD_MspInit+0x60>)
 8019710:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8019712:	f043 0301 	orr.w	r3, r3, #1
 8019716:	64e3      	str	r3, [r4, #76]	; 0x4c
 8019718:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 801971a:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801971c:	f003 0301 	and.w	r3, r3, #1
 8019720:	9301      	str	r3, [sp, #4]
 8019722:	9b01      	ldr	r3, [sp, #4]

  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019724:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8019728:	2302      	movs	r3, #2
 801972a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801972e:	2500      	movs	r5, #0
 8019730:	2303      	movs	r3, #3
 8019732:	e9cd 5305 	strd	r5, r3, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019736:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019738:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801973a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801973e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019740:	f7f0 fe62 	bl	800a408 <HAL_GPIO_Init>

  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019744:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8019746:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801974a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801974c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801974e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019752:	9302      	str	r3, [sp, #8]

  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8019754:	462a      	mov	r2, r5
 8019756:	2106      	movs	r1, #6
 8019758:	2043      	movs	r0, #67	; 0x43
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801975a:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801975c:	f7ef fe8a 	bl	8009474 <HAL_NVIC_SetPriority>

  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019760:	2043      	movs	r0, #67	; 0x43
 8019762:	f7ef feb9 	bl	80094d8 <HAL_NVIC_EnableIRQ>
}
 8019766:	b009      	add	sp, #36	; 0x24
 8019768:	bd30      	pop	{r4, r5, pc}
 801976a:	bf00      	nop
 801976c:	40021000 	.word	0x40021000

08019770 <HAL_TIM_Base_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8019770:	b507      	push	{r0, r1, r2, lr}
  if(htim->Instance == TIM4) {
 8019772:	6803      	ldr	r3, [r0, #0]
 8019774:	4a17      	ldr	r2, [pc, #92]	; (80197d4 <HAL_TIM_Base_MspInit+0x64>)
 8019776:	4293      	cmp	r3, r2
 8019778:	d114      	bne.n	80197a4 <HAL_TIM_Base_MspInit+0x34>
    /* TIMx Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 801977a:	4b17      	ldr	r3, [pc, #92]	; (80197d8 <HAL_TIM_Base_MspInit+0x68>)
 801977c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801977e:	f042 0204 	orr.w	r2, r2, #4
 8019782:	659a      	str	r2, [r3, #88]	; 0x58
 8019784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019786:	f003 0304 	and.w	r3, r3, #4
 801978a:	9300      	str	r3, [sp, #0]

    /* Set Interrupt Group Priority */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0xF, 0);
 801978c:	201e      	movs	r0, #30
 801978e:	2200      	movs	r2, #0
 8019790:	210f      	movs	r1, #15
    __HAL_RCC_TIM4_CLK_ENABLE();
 8019792:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0xF, 0);
 8019794:	f7ef fe6e 	bl	8009474 <HAL_NVIC_SetPriority>

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8019798:	201e      	movs	r0, #30
    HAL_NVIC_SetPriority(TIM5_IRQn, 0xF, 0);

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  }
}
 801979a:	b003      	add	sp, #12
 801979c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80197a0:	f7ef be9a 	b.w	80094d8 <HAL_NVIC_EnableIRQ>
  } else if (htim->Instance == TIM5) {
 80197a4:	4a0d      	ldr	r2, [pc, #52]	; (80197dc <HAL_TIM_Base_MspInit+0x6c>)
 80197a6:	4293      	cmp	r3, r2
 80197a8:	d110      	bne.n	80197cc <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80197aa:	4b0b      	ldr	r3, [pc, #44]	; (80197d8 <HAL_TIM_Base_MspInit+0x68>)
 80197ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80197ae:	f042 0208 	orr.w	r2, r2, #8
 80197b2:	659a      	str	r2, [r3, #88]	; 0x58
 80197b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80197b6:	f003 0308 	and.w	r3, r3, #8
 80197ba:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0xF, 0);
 80197bc:	2032      	movs	r0, #50	; 0x32
 80197be:	2200      	movs	r2, #0
 80197c0:	210f      	movs	r1, #15
    __HAL_RCC_TIM5_CLK_ENABLE();
 80197c2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0xF, 0);
 80197c4:	f7ef fe56 	bl	8009474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80197c8:	2032      	movs	r0, #50	; 0x32
 80197ca:	e7e6      	b.n	801979a <HAL_TIM_Base_MspInit+0x2a>
}
 80197cc:	b003      	add	sp, #12
 80197ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80197d2:	bf00      	nop
 80197d4:	40000800 	.word	0x40000800
 80197d8:	40021000 	.word	0x40021000
 80197dc:	40000c00 	.word	0x40000c00

080197e0 <HAL_TIM_OC_MspInit>:
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{ 
  /* TIM1 Peripheral clock enable */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80197e0:	4b0a      	ldr	r3, [pc, #40]	; (801980c <HAL_TIM_OC_MspInit+0x2c>)
{ 
 80197e2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 80197e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80197e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80197ea:	661a      	str	r2, [r3, #96]	; 0x60
 80197ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80197ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80197f2:	9301      	str	r3, [sp, #4]

  /* Enable TIM1 global Interrupt & set priority  */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x8, 0);
 80197f4:	2200      	movs	r2, #0
 80197f6:	2108      	movs	r1, #8
 80197f8:	201b      	movs	r0, #27
  __HAL_RCC_TIM1_CLK_ENABLE();
 80197fa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x8, 0);
 80197fc:	f7ef fe3a 	bl	8009474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8019800:	201b      	movs	r0, #27
}
 8019802:	b003      	add	sp, #12
 8019804:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8019808:	f7ef be66 	b.w	80094d8 <HAL_NVIC_EnableIRQ>
 801980c:	40021000 	.word	0x40021000

08019810 <HAL_CRC_MspInit>:
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef *hcrc)
{
  /* CRC Peripheral clock enable */
  __HAL_RCC_CRC_CLK_ENABLE();
 8019810:	4b06      	ldr	r3, [pc, #24]	; (801982c <HAL_CRC_MspInit+0x1c>)
 8019812:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8019814:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8019818:	649a      	str	r2, [r3, #72]	; 0x48
 801981a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
{
 801981c:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
 801981e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019822:	9301      	str	r3, [sp, #4]
 8019824:	9b01      	ldr	r3, [sp, #4]
}
 8019826:	b002      	add	sp, #8
 8019828:	4770      	bx	lr
 801982a:	bf00      	nop
 801982c:	40021000 	.word	0x40021000

08019830 <HAL_CRC_MspDeInit>:
  * @retval None
  */
void HAL_CRC_MspDeInit(CRC_HandleTypeDef *hcrc)
{
  /* Enable CRC reset state */
  __HAL_RCC_CRC_FORCE_RESET();
 8019830:	4b04      	ldr	r3, [pc, #16]	; (8019844 <HAL_CRC_MspDeInit+0x14>)
 8019832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019834:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8019838:	629a      	str	r2, [r3, #40]	; 0x28

  /* Release CRC from reset state */
  __HAL_RCC_CRC_RELEASE_RESET();
 801983a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801983c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8019840:	629a      	str	r2, [r3, #40]	; 0x28
}
 8019842:	4770      	bx	lr
 8019844:	40021000 	.word	0x40021000

08019848 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8019848:	4770      	bx	lr

0801984a <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 801984a:	e7fe      	b.n	801984a <HardFault_Handler>

0801984c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 801984c:	e7fe      	b.n	801984c <MemManage_Handler>

0801984e <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 801984e:	e7fe      	b.n	801984e <BusFault_Handler>

08019850 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8019850:	e7fe      	b.n	8019850 <UsageFault_Handler>

08019852 <SVC_Handler>:
 8019852:	4770      	bx	lr

08019854 <DebugMon_Handler>:
 8019854:	4770      	bx	lr

08019856 <PendSV_Handler>:
 8019856:	4770      	bx	lr

08019858 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8019858:	f7ee bed8 	b.w	800860c <HAL_IncTick>

0801985c <DMA1_Channel1_IRQHandler>:
/*  file (startup_stm32l4xxxx.s).                                             */
/******************************************************************************/

void DMA1_Channel1_IRQHandler(void)
{
  HAL_DMA_IRQHandler(ADC1_Handle.DMA_Handle);
 801985c:	4b01      	ldr	r3, [pc, #4]	; (8019864 <DMA1_Channel1_IRQHandler+0x8>)
 801985e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8019860:	f7f0 bbd2 	b.w	800a008 <HAL_DMA_IRQHandler>
 8019864:	200007f0 	.word	0x200007f0

08019868 <DMA1_Channel4_IRQHandler>:
}

void DMA1_Channel4_IRQHandler(void)
{
  HAL_DMA_IRQHandler(AMic_OnBoard_DfsdmFilter.hdmaReg);
 8019868:	4b01      	ldr	r3, [pc, #4]	; (8019870 <DMA1_Channel4_IRQHandler+0x8>)
 801986a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801986c:	f7f0 bbcc 	b.w	800a008 <HAL_DMA_IRQHandler>
 8019870:	20000a10 	.word	0x20000a10

08019874 <DMA1_Channel7_IRQHandler>:
}

void DMA1_Channel7_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&DMic_OnBoard_Dma);
 8019874:	4801      	ldr	r0, [pc, #4]	; (801987c <DMA1_Channel7_IRQHandler+0x8>)
 8019876:	f7f0 bbc7 	b.w	800a008 <HAL_DMA_IRQHandler>
 801987a:	bf00      	nop
 801987c:	20000bfc 	.word	0x20000bfc

08019880 <DFSDM1_FLT0_IRQHandler>:
  
}

void DFSDM1_FLT0_IRQHandler(void)
{
  HAL_DFSDM_IRQHandler(&DMic_OnBoard_DfsdmFilter);
 8019880:	4801      	ldr	r0, [pc, #4]	; (8019888 <DFSDM1_FLT0_IRQHandler+0x8>)
 8019882:	f7f0 b985 	b.w	8009b90 <HAL_DFSDM_IRQHandler>
 8019886:	bf00      	nop
 8019888:	20000984 	.word	0x20000984

0801988c <DFSDM1_FLT1_IRQHandler>:
}

void DFSDM1_FLT1_IRQHandler(void)
{
  HAL_DFSDM_IRQHandler(&AMic_OnBoard_DfsdmFilter);
 801988c:	4801      	ldr	r0, [pc, #4]	; (8019894 <DFSDM1_FLT1_IRQHandler+0x8>)
 801988e:	f7f0 b97f 	b.w	8009b90 <HAL_DFSDM_IRQHandler>
 8019892:	bf00      	nop
 8019894:	20000a10 	.word	0x20000a10

08019898 <TIM1_CC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM1_CC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimCCHandle);
 8019898:	4801      	ldr	r0, [pc, #4]	; (80198a0 <TIM1_CC_IRQHandler+0x8>)
 801989a:	f7f3 bd2d 	b.w	800d2f8 <HAL_TIM_IRQHandler>
 801989e:	bf00      	nop
 80198a0:	20012438 	.word	0x20012438

080198a4 <EXTI4_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(M_INT2_O_PIN);
 80198a4:	2010      	movs	r0, #16
 80198a6:	f7f0 bf2f 	b.w	800a708 <HAL_GPIO_EXTI_IRQHandler>
	...

080198ac <EXTI1_IRQHandler>:
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI1_IRQHandler(void)
{
  //HAL_GPIO_EXTI_IRQHandler(HCI_TL_SPI_EXTI_PIN);
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 80198ac:	4801      	ldr	r0, [pc, #4]	; (80198b4 <EXTI1_IRQHandler+0x8>)
 80198ae:	f7f0 bc01 	b.w	800a0b4 <HAL_EXTI_IRQHandler>
 80198b2:	bf00      	nop
 80198b4:	20012424 	.word	0x20012424

080198b8 <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
    HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 80198b8:	2001      	movs	r0, #1
 80198ba:	f7f0 bf25 	b.w	800a708 <HAL_GPIO_EXTI_IRQHandler>
	...

080198c0 <OTG_FS_IRQHandler>:
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
  HAL_PCD_IRQHandler(&hpcd);
 80198c0:	4801      	ldr	r0, [pc, #4]	; (80198c8 <OTG_FS_IRQHandler+0x8>)
 80198c2:	f7f1 bb49 	b.w	800af58 <HAL_PCD_IRQHandler>
 80198c6:	bf00      	nop
 80198c8:	20013d34 	.word	0x20013d34

080198cc <TIM2_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM2_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 80198cc:	4801      	ldr	r0, [pc, #4]	; (80198d4 <TIM2_IRQHandler+0x8>)
 80198ce:	f7f3 bd13 	b.w	800d2f8 <HAL_TIM_IRQHandler>
 80198d2:	bf00      	nop
 80198d4:	200124d8 	.word	0x200124d8

080198d8 <CDC_Itf_DeInit>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
  return (USBD_OK);
}
 80198d8:	2000      	movs	r0, #0
 80198da:	4770      	bx	lr

080198dc <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 80198dc:	2820      	cmp	r0, #32
 80198de:	d003      	beq.n	80198e8 <CDC_Itf_Control+0xc>
 80198e0:	2821      	cmp	r0, #33	; 0x21
 80198e2:	d00b      	beq.n	80198fc <CDC_Itf_Control+0x20>
  default:
    break;
  }
  
  return (USBD_OK);
}
 80198e4:	2000      	movs	r0, #0
 80198e6:	4770      	bx	lr
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80198e8:	4b0d      	ldr	r3, [pc, #52]	; (8019920 <CDC_Itf_Control+0x44>)
 80198ea:	680a      	ldr	r2, [r1, #0]
 80198ec:	601a      	str	r2, [r3, #0]
    LineCoding.format     = pbuf[4];
 80198ee:	790a      	ldrb	r2, [r1, #4]
 80198f0:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 80198f2:	794a      	ldrb	r2, [r1, #5]
 80198f4:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 80198f6:	798a      	ldrb	r2, [r1, #6]
 80198f8:	719a      	strb	r2, [r3, #6]
    break;
 80198fa:	e7f3      	b.n	80198e4 <CDC_Itf_Control+0x8>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80198fc:	4b08      	ldr	r3, [pc, #32]	; (8019920 <CDC_Itf_Control+0x44>)
 80198fe:	681a      	ldr	r2, [r3, #0]
 8019900:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8019902:	681a      	ldr	r2, [r3, #0]
 8019904:	0a12      	lsrs	r2, r2, #8
 8019906:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8019908:	885a      	ldrh	r2, [r3, #2]
 801990a:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 801990c:	78da      	ldrb	r2, [r3, #3]
 801990e:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 8019910:	791a      	ldrb	r2, [r3, #4]
 8019912:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 8019914:	795a      	ldrb	r2, [r3, #5]
 8019916:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 8019918:	799b      	ldrb	r3, [r3, #6]
 801991a:	718b      	strb	r3, [r1, #6]
    break;
 801991c:	e7e2      	b.n	80198e4 <CDC_Itf_Control+0x8>
 801991e:	bf00      	nop
 8019920:	20000538 	.word	0x20000538

08019924 <CDC_Itf_Receive>:
//  }
//  
//  /* Initiate next USB packet transfer */
//  USBD_CDC_ReceivePacket(&USBD_Device);
  return (USBD_OK);
}
 8019924:	2000      	movs	r0, #0
 8019926:	4770      	bx	lr

08019928 <CDC_Itf_Init>:
  TIMx_CLK_ENABLE();
 8019928:	4b1b      	ldr	r3, [pc, #108]	; (8019998 <CDC_Itf_Init+0x70>)
{
 801992a:	b507      	push	{r0, r1, r2, lr}
  TIMx_CLK_ENABLE();
 801992c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801992e:	f042 0201 	orr.w	r2, r2, #1
 8019932:	659a      	str	r2, [r3, #88]	; 0x58
 8019934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019936:	f003 0301 	and.w	r3, r3, #1
 801993a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIMx_IRQn, 0x6, 0);
 801993c:	2200      	movs	r2, #0
 801993e:	2106      	movs	r1, #6
 8019940:	201c      	movs	r0, #28
  TIMx_CLK_ENABLE();
 8019942:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIMx_IRQn, 0x6, 0);
 8019944:	f7ef fd96 	bl	8009474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 8019948:	201c      	movs	r0, #28
 801994a:	f7ef fdc5 	bl	80094d8 <HAL_NVIC_EnableIRQ>
  * @retval None.
  */
static void CDC_TIM_Config(void)
{  
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 801994e:	4813      	ldr	r0, [pc, #76]	; (801999c <CDC_Itf_Init+0x74>)
 8019950:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019954:	6003      	str	r3, [r0, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 8019956:	f241 3387 	movw	r3, #4999	; 0x1387
 801995a:	60c3      	str	r3, [r0, #12]
  TimHandle.Init.Prescaler = 80-1;
 801995c:	234f      	movs	r3, #79	; 0x4f
 801995e:	6043      	str	r3, [r0, #4]
  TimHandle.Init.ClockDivision = 0;
 8019960:	2300      	movs	r3, #0
 8019962:	6103      	str	r3, [r0, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8019964:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8019966:	f7f3 fddd 	bl	800d524 <HAL_TIM_Base_Init>
 801996a:	b108      	cbz	r0, 8019970 <CDC_Itf_Init+0x48>
  {
    /* Initialization Error */
    Error_Handler();
 801996c:	f7ff f94b 	bl	8018c06 <Error_Handler>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8019970:	480a      	ldr	r0, [pc, #40]	; (801999c <CDC_Itf_Init+0x74>)
 8019972:	f7f3 fc57 	bl	800d224 <HAL_TIM_Base_Start_IT>
 8019976:	b108      	cbz	r0, 801997c <CDC_Itf_Init+0x54>
    Error_Handler();
 8019978:	f7ff f945 	bl	8018c06 <Error_Handler>
  USBD_CDC_SetTxBuffer(&USBD_Device, UserTxBuffer, 0);
 801997c:	2200      	movs	r2, #0
 801997e:	4908      	ldr	r1, [pc, #32]	; (80199a0 <CDC_Itf_Init+0x78>)
 8019980:	4808      	ldr	r0, [pc, #32]	; (80199a4 <CDC_Itf_Init+0x7c>)
 8019982:	f7f9 ffa0 	bl	80138c6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&USBD_Device, UserRxBuffer);
 8019986:	4908      	ldr	r1, [pc, #32]	; (80199a8 <CDC_Itf_Init+0x80>)
 8019988:	4806      	ldr	r0, [pc, #24]	; (80199a4 <CDC_Itf_Init+0x7c>)
 801998a:	f7f9 ffa7 	bl	80138dc <USBD_CDC_SetRxBuffer>
}
 801998e:	2000      	movs	r0, #0
 8019990:	b003      	add	sp, #12
 8019992:	f85d fb04 	ldr.w	pc, [sp], #4
 8019996:	bf00      	nop
 8019998:	40021000 	.word	0x40021000
 801999c:	200124d8 	.word	0x200124d8
 80199a0:	20012524 	.word	0x20012524
 80199a4:	20012014 	.word	0x20012014
 80199a8:	20012d24 	.word	0x20012d24

080199ac <CDC_Fill_Buffer>:
{
 80199ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 80199ae:	4d0b      	ldr	r5, [pc, #44]	; (80199dc <CDC_Fill_Buffer+0x30>)
 80199b0:	4e0b      	ldr	r6, [pc, #44]	; (80199e0 <CDC_Fill_Buffer+0x34>)
  for (i = 0; i < TotalLen; i++)
 80199b2:	2200      	movs	r2, #0
 80199b4:	b294      	uxth	r4, r2
 80199b6:	42a1      	cmp	r1, r4
 80199b8:	f102 0201 	add.w	r2, r2, #1
 80199bc:	d801      	bhi.n	80199c2 <CDC_Fill_Buffer+0x16>
}
 80199be:	2000      	movs	r0, #0
 80199c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 80199c2:	f855 3cac 	ldr.w	r3, [r5, #-172]
 80199c6:	5d07      	ldrb	r7, [r0, r4]
 80199c8:	18f4      	adds	r4, r6, r3
    UserTxBufPtrIn = (UserTxBufPtrIn + 1) % APP_RX_DATA_SIZE;
 80199ca:	3301      	adds	r3, #1
 80199cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 80199d0:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
    UserTxBufPtrIn = (UserTxBufPtrIn + 1) % APP_RX_DATA_SIZE;
 80199d4:	f845 3cac 	str.w	r3, [r5, #-172]
  for (i = 0; i < TotalLen; i++)
 80199d8:	e7ec      	b.n	80199b4 <CDC_Fill_Buffer+0x8>
 80199da:	bf00      	nop
 80199dc:	200135d0 	.word	0x200135d0
 80199e0:	200124d8 	.word	0x200124d8

080199e4 <CDC_TIM_PeriodElapsedCallback>:
{
 80199e4:	b538      	push	{r3, r4, r5, lr}
  if(UserTxBufPtrOut != UserTxBufPtrIn)
 80199e6:	4d0e      	ldr	r5, [pc, #56]	; (8019a20 <CDC_TIM_PeriodElapsedCallback+0x3c>)
 80199e8:	e955 432b 	ldrd	r4, r3, [r5, #-172]	; 0xac
 80199ec:	42a3      	cmp	r3, r4
 80199ee:	d016      	beq.n	8019a1e <CDC_TIM_PeriodElapsedCallback+0x3a>
    USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 80199f0:	490c      	ldr	r1, [pc, #48]	; (8019a24 <CDC_TIM_PeriodElapsedCallback+0x40>)
 80199f2:	480d      	ldr	r0, [pc, #52]	; (8019a28 <CDC_TIM_PeriodElapsedCallback+0x44>)
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 80199f4:	bf8c      	ite	hi
 80199f6:	f5c3 6400 	rsbhi	r4, r3, #2048	; 0x800
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 80199fa:	1ae4      	subls	r4, r4, r3
    USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 80199fc:	4622      	mov	r2, r4
 80199fe:	4419      	add	r1, r3
 8019a00:	f7f9 ff61 	bl	80138c6 <USBD_CDC_SetTxBuffer>
    if(USBD_CDC_TransmitPacket(&USBD_Device) == USBD_OK)
 8019a04:	4808      	ldr	r0, [pc, #32]	; (8019a28 <CDC_TIM_PeriodElapsedCallback+0x44>)
 8019a06:	f7f9 ff72 	bl	80138ee <USBD_CDC_TransmitPacket>
 8019a0a:	b940      	cbnz	r0, 8019a1e <CDC_TIM_PeriodElapsedCallback+0x3a>
      UserTxBufPtrOut += buffsize;
 8019a0c:	f855 2ca8 	ldr.w	r2, [r5, #-168]
 8019a10:	4414      	add	r4, r2
 8019a12:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8019a16:	bf18      	it	ne
 8019a18:	4620      	movne	r0, r4
 8019a1a:	f845 0ca8 	str.w	r0, [r5, #-168]
}
 8019a1e:	bd38      	pop	{r3, r4, r5, pc}
 8019a20:	200135d0 	.word	0x200135d0
 8019a24:	20012524 	.word	0x20012524
 8019a28:	20012014 	.word	0x20012014

08019a2c <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8019a2c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8019a30:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8019a34:	f7f9 bfad 	b.w	8013992 <USBD_LL_SetupStage>

08019a38 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019a38:	231c      	movs	r3, #28
 8019a3a:	fb03 0301 	mla	r3, r3, r1, r0
 8019a3e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8019a42:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8019a46:	f7f9 bfd4 	b.w	80139f2 <USBD_LL_DataOutStage>

08019a4a <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019a4a:	231c      	movs	r3, #28
 8019a4c:	fb03 0301 	mla	r3, r3, r1, r0
 8019a50:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8019a54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8019a56:	f7f9 bffc 	b.w	8013a52 <USBD_LL_DataInStage>

08019a5a <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 8019a5a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8019a5e:	f7fa b88e 	b.w	8013b7e <USBD_LL_SOF>

08019a62 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8019a62:	b510      	push	{r4, lr}
 8019a64:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8019a66:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8019a6a:	f7fa f844 	bl	8013af6 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8019a6e:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8019a72:	2101      	movs	r1, #1
}
 8019a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8019a78:	f7fa b869 	b.w	8013b4e <USBD_LL_SetSpeed>

08019a7c <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_LL_Suspend(hpcd->pData);
 8019a7c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8019a80:	f7fa b868 	b.w	8013b54 <USBD_LL_Suspend>

08019a84 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 8019a84:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8019a88:	f7fa b86e 	b.w	8013b68 <USBD_LL_Resume>

08019a8c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8019a8c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8019a90:	f7fa b897 	b.w	8013bc2 <USBD_LL_IsoOUTIncomplete>

08019a94 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8019a94:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8019a98:	f7fa b882 	b.w	8013ba0 <USBD_LL_IsoINIncomplete>

08019a9c <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 8019a9c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8019aa0:	f7fa b8a0 	b.w	8013be4 <USBD_LL_DevConnected>

08019aa4 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 8019aa4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8019aa8:	f7fa b89e 	b.w	8013be8 <USBD_LL_DevDisconnected>

08019aac <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019aac:	b570      	push	{r4, r5, r6, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 8019aae:	4c15      	ldr	r4, [pc, #84]	; (8019b04 <USBD_LL_Init+0x58>)
  hpcd.Init.dev_endpoints = 5;
 8019ab0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019ab4:	2305      	movs	r3, #5
  hpcd.Init.use_dedicated_ep1 = 0;
 8019ab6:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 5;
 8019ab8:	e9c4 2300 	strd	r2, r3, [r4]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd.Init.Sof_enable = 0;
  hpcd.Init.speed = PCD_SPEED_FULL;
  hpcd.Init.vbus_sensing_enable = 0;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8019abc:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019ac0:	2302      	movs	r3, #2
  hpcd.Init.ep0_mps = 0x40;
 8019ac2:	2640      	movs	r6, #64	; 0x40
  pdev->pData = &hpcd;
 8019ac4:	f8c0 42c4 	str.w	r4, [r0, #708]	; 0x2c4
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 8019ac8:	4620      	mov	r0, r4
  hpcd.Init.Sof_enable = 0;
 8019aca:	e9c4 3506 	strd	r3, r5, [r4, #24]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8019ace:	60e3      	str	r3, [r4, #12]
  hpcd.Init.dma_enable = 0;
 8019ad0:	e9c4 5604 	strd	r5, r6, [r4, #16]
  hpcd.Init.lpm_enable = 0;
 8019ad4:	e9c4 5508 	strd	r5, r5, [r4, #32]
  hpcd.Init.use_dedicated_ep1 = 0;
 8019ad8:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.battery_charging_enable = 0;
 8019ada:	62a5      	str	r5, [r4, #40]	; 0x28
  hpcd.Init.vbus_sensing_enable = 0;
 8019adc:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_PCD_Init(&hpcd);
 8019ade:	f7f1 f993 	bl	800ae08 <HAL_PCD_Init>
  
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 8019ae2:	2180      	movs	r1, #128	; 0x80
 8019ae4:	4620      	mov	r0, r4
 8019ae6:	f7f1 fdf4 	bl	800b6d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 8019aea:	4632      	mov	r2, r6
 8019aec:	4629      	mov	r1, r5
 8019aee:	4620      	mov	r0, r4
 8019af0:	f7f1 fdcf 	bl	800b692 <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 8019af4:	2280      	movs	r2, #128	; 0x80
 8019af6:	2101      	movs	r1, #1
 8019af8:	4620      	mov	r0, r4
 8019afa:	f7f1 fdca 	bl	800b692 <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
}
 8019afe:	4628      	mov	r0, r5
 8019b00:	bd70      	pop	{r4, r5, r6, pc}
 8019b02:	bf00      	nop
 8019b04:	20013d34 	.word	0x20013d34

08019b08 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019b08:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8019b0a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8019b0e:	f7f1 fa06 	bl	800af1e <HAL_PCD_Start>
  return USBD_OK;
}
 8019b12:	2000      	movs	r0, #0
 8019b14:	bd08      	pop	{r3, pc}

08019b16 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8019b16:	b510      	push	{r4, lr}
 8019b18:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 8019b1a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8019b1e:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 8019b20:	4623      	mov	r3, r4
 8019b22:	f7f1 fca1 	bl	800b468 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 8019b26:	2000      	movs	r0, #0
 8019b28:	bd10      	pop	{r4, pc}

08019b2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b2a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019b2c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8019b30:	f7f1 fcd2 	bl	800b4d8 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 8019b34:	2000      	movs	r0, #0
 8019b36:	bd08      	pop	{r3, pc}

08019b38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b38:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019b3a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8019b3e:	f7f1 fd3b 	bl	800b5b8 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8019b42:	2000      	movs	r0, #0
 8019b44:	bd08      	pop	{r3, pc}

08019b46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b46:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019b48:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8019b4c:	f7f1 fd6b 	bl	800b626 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8019b50:	2000      	movs	r0, #0
 8019b52:	bd08      	pop	{r3, pc}

08019b54 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8019b54:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8019b58:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8019b5c:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019b60:	bf1b      	ittet	ne
 8019b62:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8019b66:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019b6a:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019b6e:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019b72:	bf08      	it	eq
 8019b74:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 8019b78:	4770      	bx	lr

08019b7a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019b7a:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019b7c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8019b80:	f7f1 fc5e 	bl	800b440 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8019b84:	2000      	movs	r0, #0
 8019b86:	bd08      	pop	{r3, pc}

08019b88 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint32_t size)
{
 8019b88:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019b8a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8019b8e:	f7f1 fcf8 	bl	800b582 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8019b92:	2000      	movs	r0, #0
 8019b94:	bd08      	pop	{r3, pc}

08019b96 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint32_t size)
{
 8019b96:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019b98:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8019b9c:	f7f1 fccb 	bl	800b536 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8019ba0:	2000      	movs	r0, #0
 8019ba2:	bd08      	pop	{r3, pc}

08019ba4 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8019ba4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8019ba8:	f7f1 bce3 	b.w	800b572 <HAL_PCD_EP_GetRxCount>

08019bac <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8019bac:	2312      	movs	r3, #18
  return (uint8_t*)USBD_DeviceDesc;
}
 8019bae:	4801      	ldr	r0, [pc, #4]	; (8019bb4 <USBD_VCP_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_DeviceDesc);
 8019bb0:	800b      	strh	r3, [r1, #0]
}
 8019bb2:	4770      	bx	lr
 8019bb4:	20000554 	.word	0x20000554

08019bb8 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8019bb8:	2304      	movs	r3, #4
  return (uint8_t*)USBD_LangIDDesc;
}
 8019bba:	4801      	ldr	r0, [pc, #4]	; (8019bc0 <USBD_VCP_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);  
 8019bbc:	800b      	strh	r3, [r1, #0]
}
 8019bbe:	4770      	bx	lr
 8019bc0:	20000568 	.word	0x20000568

08019bc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8019bc4:	2300      	movs	r3, #0
 8019bc6:	b570      	push	{r4, r5, r6, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8019bc8:	1c4d      	adds	r5, r1, #1
 8019bca:	461e      	mov	r6, r3
      pbuf[ 2* idx] = (value >> 28) + '0';
 8019bcc:	0f04      	lsrs	r4, r0, #28
    if( ((value >> 28)) < 0xA )
 8019bce:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[ 2* idx] = (value >> 28) + '0';
 8019bd2:	bf34      	ite	cc
 8019bd4:	3430      	addcc	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8019bd6:	3437      	addcs	r4, #55	; 0x37
 8019bd8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 8019bdc:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for( idx = 0 ; idx < len ; idx ++)
 8019be0:	3301      	adds	r3, #1
 8019be2:	b2dc      	uxtb	r4, r3
 8019be4:	42a2      	cmp	r2, r4
    value = value << 4;
 8019be6:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for( idx = 0 ; idx < len ; idx ++)
 8019bea:	d8ef      	bhi.n	8019bcc <IntToUnicode+0x8>
  }
}
 8019bec:	bd70      	pop	{r4, r5, r6, pc}
	...

08019bf0 <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8019bf0:	231a      	movs	r3, #26
{
 8019bf2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8019bf4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8019bf6:	4b0a      	ldr	r3, [pc, #40]	; (8019c20 <USBD_VCP_SerialStrDescriptor+0x30>)
 8019bf8:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	; 0xa10
  deviceserial0 += deviceserial2;
 8019bfc:	f8d3 2a18 	ldr.w	r2, [r3, #2584]	; 0xa18
  if (deviceserial0 != 0)
 8019c00:	1880      	adds	r0, r0, r2
 8019c02:	d00a      	beq.n	8019c1a <USBD_VCP_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8019c04:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	; 0xa14
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8019c08:	4906      	ldr	r1, [pc, #24]	; (8019c24 <USBD_VCP_SerialStrDescriptor+0x34>)
 8019c0a:	2208      	movs	r2, #8
 8019c0c:	f7ff ffda 	bl	8019bc4 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 8019c10:	2204      	movs	r2, #4
 8019c12:	3110      	adds	r1, #16
 8019c14:	4620      	mov	r0, r4
 8019c16:	f7ff ffd5 	bl	8019bc4 <IntToUnicode>
}
 8019c1a:	4803      	ldr	r0, [pc, #12]	; (8019c28 <USBD_VCP_SerialStrDescriptor+0x38>)
 8019c1c:	bd10      	pop	{r4, pc}
 8019c1e:	bf00      	nop
 8019c20:	1fff7000 	.word	0x1fff7000
 8019c24:	2000056e 	.word	0x2000056e
 8019c28:	2000056c 	.word	0x2000056c

08019c2c <USBD_VCP_ProductStrDescriptor>:
{  
 8019c2c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8019c2e:	4c04      	ldr	r4, [pc, #16]	; (8019c40 <USBD_VCP_ProductStrDescriptor+0x14>)
 8019c30:	4804      	ldr	r0, [pc, #16]	; (8019c44 <USBD_VCP_ProductStrDescriptor+0x18>)
{  
 8019c32:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8019c34:	4621      	mov	r1, r4
 8019c36:	f7fa f9ff 	bl	8014038 <USBD_GetString>
}
 8019c3a:	4620      	mov	r0, r4
 8019c3c:	bd10      	pop	{r4, pc}
 8019c3e:	bf00      	nop
 8019c40:	2001413c 	.word	0x2001413c
 8019c44:	08025748 	.word	0x08025748

08019c48 <USBD_VCP_ManufacturerStrDescriptor>:
{
 8019c48:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019c4a:	4c04      	ldr	r4, [pc, #16]	; (8019c5c <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8019c4c:	4804      	ldr	r0, [pc, #16]	; (8019c60 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
{
 8019c4e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019c50:	4621      	mov	r1, r4
 8019c52:	f7fa f9f1 	bl	8014038 <USBD_GetString>
}
 8019c56:	4620      	mov	r0, r4
 8019c58:	bd10      	pop	{r4, pc}
 8019c5a:	bf00      	nop
 8019c5c:	2001413c 	.word	0x2001413c
 8019c60:	08025769 	.word	0x08025769

08019c64 <USBD_VCP_ConfigStrDescriptor>:
{ 
 8019c64:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8019c66:	4c04      	ldr	r4, [pc, #16]	; (8019c78 <USBD_VCP_ConfigStrDescriptor+0x14>)
 8019c68:	4804      	ldr	r0, [pc, #16]	; (8019c7c <USBD_VCP_ConfigStrDescriptor+0x18>)
{ 
 8019c6a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8019c6c:	4621      	mov	r1, r4
 8019c6e:	f7fa f9e3 	bl	8014038 <USBD_GetString>
}
 8019c72:	4620      	mov	r0, r4
 8019c74:	bd10      	pop	{r4, pc}
 8019c76:	bf00      	nop
 8019c78:	2001413c 	.word	0x2001413c
 8019c7c:	0802577c 	.word	0x0802577c

08019c80 <USBD_VCP_InterfaceStrDescriptor>:
{
 8019c80:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8019c82:	4c04      	ldr	r4, [pc, #16]	; (8019c94 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8019c84:	4804      	ldr	r0, [pc, #16]	; (8019c98 <USBD_VCP_InterfaceStrDescriptor+0x18>)
{
 8019c86:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8019c88:	4621      	mov	r1, r4
 8019c8a:	f7fa f9d5 	bl	8014038 <USBD_GetString>
}
 8019c8e:	4620      	mov	r0, r4
 8019c90:	bd10      	pop	{r4, pc}
 8019c92:	bf00      	nop
 8019c94:	2001413c 	.word	0x2001413c
 8019c98:	08025787 	.word	0x08025787

08019c9c <BSP_MOTION_SENSOR_Enable_HP_Filter>:
 */
int32_t BSP_MOTION_SENSOR_Enable_HP_Filter(uint32_t Instance, uint8_t CutOff)
{
  int32_t ret;
  
  switch (Instance)
 8019c9c:	2801      	cmp	r0, #1
{
 8019c9e:	b508      	push	{r3, lr}
  switch (Instance)
 8019ca0:	d108      	bne.n	8019cb4 <BSP_MOTION_SENSOR_Enable_HP_Filter+0x18>
    break;
#endif
    
#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if (ISM330DHCX_ACC_Enable_HP_Filter(MotionCompObj[Instance], (ism330dhcx_hp_slope_xl_en_t)CutOff) != BSP_ERROR_NONE)
 8019ca2:	4b06      	ldr	r3, [pc, #24]	; (8019cbc <BSP_MOTION_SENSOR_Enable_HP_Filter+0x20>)
 8019ca4:	6858      	ldr	r0, [r3, #4]
 8019ca6:	f000 fd54 	bl	801a752 <ISM330DHCX_ACC_Enable_HP_Filter>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8019caa:	2800      	cmp	r0, #0
 8019cac:	bf18      	it	ne
 8019cae:	f06f 0004 	mvnne.w	r0, #4
    ret = BSP_ERROR_WRONG_PARAM;
    break;
  }
  
  return ret;
}
 8019cb2:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8019cb4:	f06f 0001 	mvn.w	r0, #1
 8019cb8:	e7fb      	b.n	8019cb2 <BSP_MOTION_SENSOR_Enable_HP_Filter+0x16>
 8019cba:	bf00      	nop
 8019cbc:	2000116c 	.word	0x2000116c

08019cc0 <BSP_MOTION_SENSOR_Set_INT2_DRDY>:
 */
int32_t BSP_MOTION_SENSOR_Set_INT2_DRDY(uint32_t Instance, uint8_t Status)
{
  int32_t ret;
 
  switch (Instance)
 8019cc0:	2801      	cmp	r0, #1
{
 8019cc2:	b508      	push	{r3, lr}
  switch (Instance)
 8019cc4:	d108      	bne.n	8019cd8 <BSP_MOTION_SENSOR_Set_INT2_DRDY+0x18>
      break;
#endif      

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if (ISM330DHCX_Set_INT2_Drdy(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 8019cc6:	4b06      	ldr	r3, [pc, #24]	; (8019ce0 <BSP_MOTION_SENSOR_Set_INT2_DRDY+0x20>)
 8019cc8:	6858      	ldr	r0, [r3, #4]
 8019cca:	f000 fe6f 	bl	801a9ac <ISM330DHCX_Set_INT2_Drdy>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8019cce:	2800      	cmp	r0, #0
 8019cd0:	bf18      	it	ne
 8019cd2:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8019cd6:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 8019cd8:	f06f 0001 	mvn.w	r0, #1
 8019cdc:	e7fb      	b.n	8019cd6 <BSP_MOTION_SENSOR_Set_INT2_DRDY+0x16>
 8019cde:	bf00      	nop
 8019ce0:	2000116c 	.word	0x2000116c

08019ce4 <BSP_MOTION_SENSOR_DRDY_Set_Mode>:
 */
int32_t BSP_MOTION_SENSOR_DRDY_Set_Mode(uint32_t Instance, uint8_t mode)
{
  int32_t ret;
 
  switch (Instance)
 8019ce4:	2801      	cmp	r0, #1
{
 8019ce6:	b508      	push	{r3, lr}
  switch (Instance)
 8019ce8:	d108      	bne.n	8019cfc <BSP_MOTION_SENSOR_DRDY_Set_Mode+0x18>
      break;
#endif      

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if (ISM330DHCX_Set_Drdy_Mode(MotionCompObj[Instance], mode) != BSP_ERROR_NONE)
 8019cea:	4b06      	ldr	r3, [pc, #24]	; (8019d04 <BSP_MOTION_SENSOR_DRDY_Set_Mode+0x20>)
 8019cec:	6858      	ldr	r0, [r3, #4]
 8019cee:	f000 fd27 	bl	801a740 <ISM330DHCX_Set_Drdy_Mode>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8019cf2:	2800      	cmp	r0, #0
 8019cf4:	bf18      	it	ne
 8019cf6:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8019cfa:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 8019cfc:	f06f 0001 	mvn.w	r0, #1
 8019d00:	e7fb      	b.n	8019cfa <BSP_MOTION_SENSOR_DRDY_Set_Mode+0x16>
 8019d02:	bf00      	nop
 8019d04:	2000116c 	.word	0x2000116c

08019d08 <BSP_MOTION_SENSOR_FIFO_Set_BDR>:
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_BDR(uint32_t Instance, uint32_t Function, float Bdr)
{
  int32_t ret;
      
  switch (Instance)
 8019d08:	2801      	cmp	r0, #1
{
 8019d0a:	b508      	push	{r3, lr}
  switch (Instance)
 8019d0c:	d112      	bne.n	8019d34 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x2c>
    break;
#endif 
    
#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
  case ISM330DHCX_0:
    if ((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 8019d0e:	078a      	lsls	r2, r1, #30
 8019d10:	d509      	bpl.n	8019d26 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x1e>
    {
      if (ISM330DHCX_FIFO_ACC_Set_BDR(MotionCompObj[Instance], Bdr) != BSP_ERROR_NONE)
 8019d12:	4b0a      	ldr	r3, [pc, #40]	; (8019d3c <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x34>)
 8019d14:	6858      	ldr	r0, [r3, #4]
 8019d16:	f000 fd25 	bl	801a764 <ISM330DHCX_FIFO_ACC_Set_BDR>
 8019d1a:	b110      	cbz	r0, 8019d22 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x1a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8019d1c:	f06f 0004 	mvn.w	r0, #4
    ret = BSP_ERROR_WRONG_PARAM;
    break;
  }
  
  return ret;
}
 8019d20:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_NONE;
 8019d22:	2000      	movs	r0, #0
 8019d24:	e7fc      	b.n	8019d20 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x18>
    else if ((Function & MOTION_GYRO) == MOTION_GYRO)
 8019d26:	07cb      	lsls	r3, r1, #31
 8019d28:	d504      	bpl.n	8019d34 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x2c>
      if (ISM330DHCX_FIFO_GYRO_Set_BDR(MotionCompObj[Instance], Bdr) != BSP_ERROR_NONE)
 8019d2a:	4b04      	ldr	r3, [pc, #16]	; (8019d3c <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x34>)
 8019d2c:	6858      	ldr	r0, [r3, #4]
 8019d2e:	f000 fd81 	bl	801a834 <ISM330DHCX_FIFO_GYRO_Set_BDR>
 8019d32:	e7f2      	b.n	8019d1a <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8019d34:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8019d38:	e7f2      	b.n	8019d20 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x18>
 8019d3a:	bf00      	nop
 8019d3c:	2000116c 	.word	0x2000116c

08019d40 <BSP_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full>:
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full(uint32_t Instance, uint8_t Status)
{
  int32_t ret;

  switch (Instance)
 8019d40:	2801      	cmp	r0, #1
{
 8019d42:	b508      	push	{r3, lr}
  switch (Instance)
 8019d44:	d108      	bne.n	8019d58 <BSP_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0x18>
      break;
#endif      

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if (ISM330DHCX_FIFO_Set_INT2_FIFO_Full(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 8019d46:	4b06      	ldr	r3, [pc, #24]	; (8019d60 <BSP_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0x20>)
 8019d48:	6858      	ldr	r0, [r3, #4]
 8019d4a:	f000 fddb 	bl	801a904 <ISM330DHCX_FIFO_Set_INT2_FIFO_Full>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8019d4e:	2800      	cmp	r0, #0
 8019d50:	bf18      	it	ne
 8019d52:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8019d56:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 8019d58:	f06f 0001 	mvn.w	r0, #1
 8019d5c:	e7fb      	b.n	8019d56 <BSP_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0x16>
 8019d5e:	bf00      	nop
 8019d60:	2000116c 	.word	0x2000116c

08019d64 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level>:
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level(uint32_t Instance, uint16_t Watermark)
{
  int32_t ret;

  switch (Instance)
 8019d64:	2801      	cmp	r0, #1
{
 8019d66:	b508      	push	{r3, lr}
  switch (Instance)
 8019d68:	d108      	bne.n	8019d7c <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x18>
      break;
#endif 

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if (ISM330DHCX_FIFO_Set_Watermark_Level(MotionCompObj[Instance], Watermark) != BSP_ERROR_NONE)
 8019d6a:	4b06      	ldr	r3, [pc, #24]	; (8019d84 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x20>)
 8019d6c:	6858      	ldr	r0, [r3, #4]
 8019d6e:	f000 fde9 	bl	801a944 <ISM330DHCX_FIFO_Set_Watermark_Level>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8019d72:	2800      	cmp	r0, #0
 8019d74:	bf18      	it	ne
 8019d76:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8019d7a:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 8019d7c:	f06f 0001 	mvn.w	r0, #1
 8019d80:	e7fb      	b.n	8019d7a <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x16>
 8019d82:	bf00      	nop
 8019d84:	2000116c 	.word	0x2000116c

08019d88 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>:
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(uint32_t Instance, uint8_t Status)
{
  int32_t ret;

  switch (Instance)
 8019d88:	2801      	cmp	r0, #1
{
 8019d8a:	b508      	push	{r3, lr}
  switch (Instance)
 8019d8c:	d108      	bne.n	8019da0 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x18>
      break;
#endif      
      
#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if (ISM330DHCX_FIFO_Set_Stop_On_Fth(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 8019d8e:	4b06      	ldr	r3, [pc, #24]	; (8019da8 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x20>)
 8019d90:	6858      	ldr	r0, [r3, #4]
 8019d92:	f000 fde0 	bl	801a956 <ISM330DHCX_FIFO_Set_Stop_On_Fth>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8019d96:	2800      	cmp	r0, #0
 8019d98:	bf18      	it	ne
 8019d9a:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8019d9e:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 8019da0:	f06f 0001 	mvn.w	r0, #1
 8019da4:	e7fb      	b.n	8019d9e <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x16>
 8019da6:	bf00      	nop
 8019da8:	2000116c 	.word	0x2000116c

08019dac <BSP_MOTION_SENSOR_Write_Register>:
 * @param  Reg address to be read
 * @param  Data value to be written
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_Write_Register(uint32_t Instance, uint8_t Reg, uint8_t Data)
{
 8019dac:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 8019dae:	b120      	cbz	r0, 8019dba <BSP_MOTION_SENSOR_Write_Register+0xe>
 8019db0:	2801      	cmp	r0, #1
 8019db2:	d00c      	beq.n	8019dce <BSP_MOTION_SENSOR_Write_Register+0x22>
 8019db4:	f06f 0001 	mvn.w	r0, #1
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8019db8:	bd08      	pop	{r3, pc}
      if (IIS2MDC_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8019dba:	4b07      	ldr	r3, [pc, #28]	; (8019dd8 <BSP_MOTION_SENSOR_Write_Register+0x2c>)
 8019dbc:	6818      	ldr	r0, [r3, #0]
 8019dbe:	f7eb fc62 	bl	8005686 <IIS2MDC_Write_Reg>
 8019dc2:	b110      	cbz	r0, 8019dca <BSP_MOTION_SENSOR_Write_Register+0x1e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8019dc4:	f06f 0004 	mvn.w	r0, #4
 8019dc8:	e7f6      	b.n	8019db8 <BSP_MOTION_SENSOR_Write_Register+0xc>
        ret = BSP_ERROR_NONE;
 8019dca:	2000      	movs	r0, #0
 8019dcc:	e7f4      	b.n	8019db8 <BSP_MOTION_SENSOR_Write_Register+0xc>
      if (ISM330DHCX_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8019dce:	4b02      	ldr	r3, [pc, #8]	; (8019dd8 <BSP_MOTION_SENSOR_Write_Register+0x2c>)
 8019dd0:	6858      	ldr	r0, [r3, #4]
 8019dd2:	f000 fc71 	bl	801a6b8 <ISM330DHCX_Write_Reg>
 8019dd6:	e7f4      	b.n	8019dc2 <BSP_MOTION_SENSOR_Write_Register+0x16>
 8019dd8:	2000116c 	.word	0x2000116c

08019ddc <BSP_MOTION_SENSOR_FIFO_Set_Mode>:
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_Mode(uint32_t Instance, uint8_t Mode)
{
  int32_t ret;

  switch (Instance)
 8019ddc:	2801      	cmp	r0, #1
{
 8019dde:	b508      	push	{r3, lr}
  switch (Instance)
 8019de0:	d108      	bne.n	8019df4 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x18>
      break;
#endif   

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if (ISM330DHCX_FIFO_Set_Mode(MotionCompObj[Instance], Mode) != BSP_ERROR_NONE)
 8019de2:	4b06      	ldr	r3, [pc, #24]	; (8019dfc <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x20>)
 8019de4:	6858      	ldr	r0, [r3, #4]
 8019de6:	f000 fdbf 	bl	801a968 <ISM330DHCX_FIFO_Set_Mode>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8019dea:	2800      	cmp	r0, #0
 8019dec:	bf18      	it	ne
 8019dee:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8019df2:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 8019df4:	f06f 0001 	mvn.w	r0, #1
 8019df8:	e7fb      	b.n	8019df2 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x16>
 8019dfa:	bf00      	nop
 8019dfc:	2000116c 	.word	0x2000116c

08019e00 <BSP_MOTION_SENSOR_FIFO_Read>:
 */
int32_t BSP_MOTION_SENSOR_FIFO_Read(uint32_t Instance, uint8_t *pBuff, uint16_t Watermark)
{
  int32_t ret;

  switch (Instance)
 8019e00:	2801      	cmp	r0, #1
{
 8019e02:	b508      	push	{r3, lr}
  switch (Instance)
 8019e04:	d10a      	bne.n	8019e1c <BSP_MOTION_SENSOR_FIFO_Read+0x1c>
      break;
#endif
      
#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if (ISM330DHCX_FIFO_Read(MotionCompObj[Instance], pBuff, Watermark*2) != BSP_ERROR_NONE)
 8019e06:	4b07      	ldr	r3, [pc, #28]	; (8019e24 <BSP_MOTION_SENSOR_FIFO_Read+0x24>)
 8019e08:	0052      	lsls	r2, r2, #1
 8019e0a:	6858      	ldr	r0, [r3, #4]
 8019e0c:	b292      	uxth	r2, r2
 8019e0e:	f000 fdbf 	bl	801a990 <ISM330DHCX_FIFO_Read>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8019e12:	2800      	cmp	r0, #0
 8019e14:	bf18      	it	ne
 8019e16:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8019e1a:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 8019e1c:	f06f 0001 	mvn.w	r0, #1
 8019e20:	e7fb      	b.n	8019e1a <BSP_MOTION_SENSOR_FIFO_Read+0x1a>
 8019e22:	bf00      	nop
 8019e24:	2000116c 	.word	0x2000116c

08019e28 <ISM330DHCX_GetCapabilities>:

  Capabilities->Acc          = 1;
  Capabilities->Gyro         = 1;
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 2000;
 8019e28:	f240 1201 	movw	r2, #257	; 0x101
 8019e2c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8019e30:	e9c1 2300 	strd	r2, r3, [r1]
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
 8019e34:	2000      	movs	r0, #0
 8019e36:	2310      	movs	r3, #16
 8019e38:	e9c1 3002 	strd	r3, r0, [r1, #8]
  Capabilities->GyroMaxOdr   = 6667.0f;
 8019e3c:	4b02      	ldr	r3, [pc, #8]	; (8019e48 <ISM330DHCX_GetCapabilities+0x20>)
 8019e3e:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8019e40:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8019e42:	2300      	movs	r3, #0
 8019e44:	618b      	str	r3, [r1, #24]
  return ISM330DHCX_OK;
}
 8019e46:	4770      	bx	lr
 8019e48:	45d05800 	.word	0x45d05800

08019e4c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8019e4c:	b410      	push	{r4}
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8019e4e:	6944      	ldr	r4, [r0, #20]
 8019e50:	7b00      	ldrb	r0, [r0, #12]
 8019e52:	46a4      	mov	ip, r4
}
 8019e54:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8019e58:	4760      	bx	ip

08019e5a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8019e5a:	b410      	push	{r4}
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8019e5c:	6904      	ldr	r4, [r0, #16]
 8019e5e:	7b00      	ldrb	r0, [r0, #12]
 8019e60:	46a4      	mov	ip, r4
}
 8019e62:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8019e66:	4760      	bx	ip

08019e68 <ISM330DHCX_ACC_SetOutputDataRate>:
{
 8019e68:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 8019e6a:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
 8019e6e:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8019e72:	2901      	cmp	r1, #1
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8019e74:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->acc_is_enabled == 1U)
 8019e78:	d152      	bne.n	8019f20 <ISM330DHCX_ACC_SetOutputDataRate+0xb8>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8019e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e7e:	d939      	bls.n	8019ef4 <ISM330DHCX_ACC_SetOutputDataRate+0x8c>
 8019e80:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8019e84:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e8c:	d93a      	bls.n	8019f04 <ISM330DHCX_ACC_SetOutputDataRate+0x9c>
 8019e8e:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8019fc4 <ISM330DHCX_ACC_SetOutputDataRate+0x15c>
 8019e92:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e9a:	d935      	bls.n	8019f08 <ISM330DHCX_ACC_SetOutputDataRate+0xa0>
 8019e9c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8019fc8 <ISM330DHCX_ACC_SetOutputDataRate+0x160>
 8019ea0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ea8:	d930      	bls.n	8019f0c <ISM330DHCX_ACC_SetOutputDataRate+0xa4>
 8019eaa:	eddf 7a48 	vldr	s15, [pc, #288]	; 8019fcc <ISM330DHCX_ACC_SetOutputDataRate+0x164>
 8019eae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019eb6:	d92b      	bls.n	8019f10 <ISM330DHCX_ACC_SetOutputDataRate+0xa8>
 8019eb8:	eddf 7a45 	vldr	s15, [pc, #276]	; 8019fd0 <ISM330DHCX_ACC_SetOutputDataRate+0x168>
 8019ebc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ec4:	d926      	bls.n	8019f14 <ISM330DHCX_ACC_SetOutputDataRate+0xac>
 8019ec6:	eddf 7a43 	vldr	s15, [pc, #268]	; 8019fd4 <ISM330DHCX_ACC_SetOutputDataRate+0x16c>
 8019eca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ed2:	d921      	bls.n	8019f18 <ISM330DHCX_ACC_SetOutputDataRate+0xb0>
 8019ed4:	eddf 7a40 	vldr	s15, [pc, #256]	; 8019fd8 <ISM330DHCX_ACC_SetOutputDataRate+0x170>
 8019ed8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ee0:	d91c      	bls.n	8019f1c <ISM330DHCX_ACC_SetOutputDataRate+0xb4>
 8019ee2:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8019fdc <ISM330DHCX_ACC_SetOutputDataRate+0x174>
 8019ee6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019eee:	bf94      	ite	ls
 8019ef0:	2109      	movls	r1, #9
 8019ef2:	210a      	movhi	r1, #10
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8019ef4:	301c      	adds	r0, #28
 8019ef6:	f7eb ff69 	bl	8005dcc <ism330dhcx_xl_data_rate_set>
 8019efa:	3800      	subs	r0, #0
 8019efc:	bf18      	it	ne
 8019efe:	2001      	movne	r0, #1
 8019f00:	4240      	negs	r0, r0
}
 8019f02:	bd08      	pop	{r3, pc}
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8019f04:	2102      	movs	r1, #2
 8019f06:	e7f5      	b.n	8019ef4 <ISM330DHCX_ACC_SetOutputDataRate+0x8c>
 8019f08:	2103      	movs	r1, #3
 8019f0a:	e7f3      	b.n	8019ef4 <ISM330DHCX_ACC_SetOutputDataRate+0x8c>
 8019f0c:	2104      	movs	r1, #4
 8019f0e:	e7f1      	b.n	8019ef4 <ISM330DHCX_ACC_SetOutputDataRate+0x8c>
 8019f10:	2105      	movs	r1, #5
 8019f12:	e7ef      	b.n	8019ef4 <ISM330DHCX_ACC_SetOutputDataRate+0x8c>
 8019f14:	2106      	movs	r1, #6
 8019f16:	e7ed      	b.n	8019ef4 <ISM330DHCX_ACC_SetOutputDataRate+0x8c>
 8019f18:	2107      	movs	r1, #7
 8019f1a:	e7eb      	b.n	8019ef4 <ISM330DHCX_ACC_SetOutputDataRate+0x8c>
 8019f1c:	2108      	movs	r1, #8
 8019f1e:	e7e9      	b.n	8019ef4 <ISM330DHCX_ACC_SetOutputDataRate+0x8c>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8019f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f24:	d93d      	bls.n	8019fa2 <ISM330DHCX_ACC_SetOutputDataRate+0x13a>
 8019f26:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8019f2a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f32:	d938      	bls.n	8019fa6 <ISM330DHCX_ACC_SetOutputDataRate+0x13e>
 8019f34:	eddf 7a23 	vldr	s15, [pc, #140]	; 8019fc4 <ISM330DHCX_ACC_SetOutputDataRate+0x15c>
 8019f38:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f40:	d933      	bls.n	8019faa <ISM330DHCX_ACC_SetOutputDataRate+0x142>
 8019f42:	eddf 7a21 	vldr	s15, [pc, #132]	; 8019fc8 <ISM330DHCX_ACC_SetOutputDataRate+0x160>
 8019f46:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f4e:	d92e      	bls.n	8019fae <ISM330DHCX_ACC_SetOutputDataRate+0x146>
 8019f50:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8019fcc <ISM330DHCX_ACC_SetOutputDataRate+0x164>
 8019f54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f5c:	d929      	bls.n	8019fb2 <ISM330DHCX_ACC_SetOutputDataRate+0x14a>
 8019f5e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8019fd0 <ISM330DHCX_ACC_SetOutputDataRate+0x168>
 8019f62:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f6a:	d924      	bls.n	8019fb6 <ISM330DHCX_ACC_SetOutputDataRate+0x14e>
 8019f6c:	eddf 7a19 	vldr	s15, [pc, #100]	; 8019fd4 <ISM330DHCX_ACC_SetOutputDataRate+0x16c>
 8019f70:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f78:	d91f      	bls.n	8019fba <ISM330DHCX_ACC_SetOutputDataRate+0x152>
 8019f7a:	eddf 7a17 	vldr	s15, [pc, #92]	; 8019fd8 <ISM330DHCX_ACC_SetOutputDataRate+0x170>
 8019f7e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f86:	d91a      	bls.n	8019fbe <ISM330DHCX_ACC_SetOutputDataRate+0x156>
 8019f88:	eddf 7a14 	vldr	s15, [pc, #80]	; 8019fdc <ISM330DHCX_ACC_SetOutputDataRate+0x174>
 8019f8c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f94:	bf94      	ite	ls
 8019f96:	2309      	movls	r3, #9
 8019f98:	230a      	movhi	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8019f9a:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8019f9e:	2000      	movs	r0, #0
 8019fa0:	e7af      	b.n	8019f02 <ISM330DHCX_ACC_SetOutputDataRate+0x9a>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8019fa2:	2301      	movs	r3, #1
 8019fa4:	e7f9      	b.n	8019f9a <ISM330DHCX_ACC_SetOutputDataRate+0x132>
 8019fa6:	2302      	movs	r3, #2
 8019fa8:	e7f7      	b.n	8019f9a <ISM330DHCX_ACC_SetOutputDataRate+0x132>
 8019faa:	2303      	movs	r3, #3
 8019fac:	e7f5      	b.n	8019f9a <ISM330DHCX_ACC_SetOutputDataRate+0x132>
 8019fae:	2304      	movs	r3, #4
 8019fb0:	e7f3      	b.n	8019f9a <ISM330DHCX_ACC_SetOutputDataRate+0x132>
 8019fb2:	2305      	movs	r3, #5
 8019fb4:	e7f1      	b.n	8019f9a <ISM330DHCX_ACC_SetOutputDataRate+0x132>
 8019fb6:	2306      	movs	r3, #6
 8019fb8:	e7ef      	b.n	8019f9a <ISM330DHCX_ACC_SetOutputDataRate+0x132>
 8019fba:	2307      	movs	r3, #7
 8019fbc:	e7ed      	b.n	8019f9a <ISM330DHCX_ACC_SetOutputDataRate+0x132>
 8019fbe:	2308      	movs	r3, #8
 8019fc0:	e7eb      	b.n	8019f9a <ISM330DHCX_ACC_SetOutputDataRate+0x132>
 8019fc2:	bf00      	nop
 8019fc4:	42500000 	.word	0x42500000
 8019fc8:	42d00000 	.word	0x42d00000
 8019fcc:	43500000 	.word	0x43500000
 8019fd0:	43d08000 	.word	0x43d08000
 8019fd4:	44504000 	.word	0x44504000
 8019fd8:	44d06000 	.word	0x44d06000
 8019fdc:	45505000 	.word	0x45505000

08019fe0 <ISM330DHCX_ACC_SetFullScale>:
           : (FullScale <= 4) ? ISM330DHCX_4g
 8019fe0:	2902      	cmp	r1, #2
{
 8019fe2:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? ISM330DHCX_4g
 8019fe4:	dd0d      	ble.n	801a002 <ISM330DHCX_ACC_SetFullScale+0x22>
 8019fe6:	2904      	cmp	r1, #4
 8019fe8:	dd0d      	ble.n	801a006 <ISM330DHCX_ACC_SetFullScale+0x26>
 8019fea:	2909      	cmp	r1, #9
 8019fec:	bfb4      	ite	lt
 8019fee:	2103      	movlt	r1, #3
 8019ff0:	2101      	movge	r1, #1
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8019ff2:	301c      	adds	r0, #28
 8019ff4:	f7eb fc5d 	bl	80058b2 <ism330dhcx_xl_full_scale_set>
 8019ff8:	3800      	subs	r0, #0
 8019ffa:	bf18      	it	ne
 8019ffc:	2001      	movne	r0, #1
}
 8019ffe:	4240      	negs	r0, r0
 801a000:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? ISM330DHCX_4g
 801a002:	2100      	movs	r1, #0
 801a004:	e7f5      	b.n	8019ff2 <ISM330DHCX_ACC_SetFullScale+0x12>
 801a006:	2102      	movs	r1, #2
 801a008:	e7f3      	b.n	8019ff2 <ISM330DHCX_ACC_SetFullScale+0x12>
	...

0801a00c <ISM330DHCX_GYRO_SetOutputDataRate>:
{
 801a00c:	b508      	push	{r3, lr}
  if (pObj->gyro_is_enabled == 1U)
 801a00e:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
 801a012:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 801a016:	2901      	cmp	r1, #1
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 801a018:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->gyro_is_enabled == 1U)
 801a01c:	d152      	bne.n	801a0c4 <ISM330DHCX_GYRO_SetOutputDataRate+0xb8>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 801a01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a022:	d939      	bls.n	801a098 <ISM330DHCX_GYRO_SetOutputDataRate+0x8c>
 801a024:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 801a028:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a030:	d93a      	bls.n	801a0a8 <ISM330DHCX_GYRO_SetOutputDataRate+0x9c>
 801a032:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801a168 <ISM330DHCX_GYRO_SetOutputDataRate+0x15c>
 801a036:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a03e:	d935      	bls.n	801a0ac <ISM330DHCX_GYRO_SetOutputDataRate+0xa0>
 801a040:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801a16c <ISM330DHCX_GYRO_SetOutputDataRate+0x160>
 801a044:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a04c:	d930      	bls.n	801a0b0 <ISM330DHCX_GYRO_SetOutputDataRate+0xa4>
 801a04e:	eddf 7a48 	vldr	s15, [pc, #288]	; 801a170 <ISM330DHCX_GYRO_SetOutputDataRate+0x164>
 801a052:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a05a:	d92b      	bls.n	801a0b4 <ISM330DHCX_GYRO_SetOutputDataRate+0xa8>
 801a05c:	eddf 7a45 	vldr	s15, [pc, #276]	; 801a174 <ISM330DHCX_GYRO_SetOutputDataRate+0x168>
 801a060:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a068:	d926      	bls.n	801a0b8 <ISM330DHCX_GYRO_SetOutputDataRate+0xac>
 801a06a:	eddf 7a43 	vldr	s15, [pc, #268]	; 801a178 <ISM330DHCX_GYRO_SetOutputDataRate+0x16c>
 801a06e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a076:	d921      	bls.n	801a0bc <ISM330DHCX_GYRO_SetOutputDataRate+0xb0>
 801a078:	eddf 7a40 	vldr	s15, [pc, #256]	; 801a17c <ISM330DHCX_GYRO_SetOutputDataRate+0x170>
 801a07c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a084:	d91c      	bls.n	801a0c0 <ISM330DHCX_GYRO_SetOutputDataRate+0xb4>
 801a086:	eddf 7a3e 	vldr	s15, [pc, #248]	; 801a180 <ISM330DHCX_GYRO_SetOutputDataRate+0x174>
 801a08a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a092:	bf94      	ite	ls
 801a094:	2109      	movls	r1, #9
 801a096:	210a      	movhi	r1, #10
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 801a098:	301c      	adds	r0, #28
 801a09a:	f7eb ff38 	bl	8005f0e <ism330dhcx_gy_data_rate_set>
 801a09e:	3800      	subs	r0, #0
 801a0a0:	bf18      	it	ne
 801a0a2:	2001      	movne	r0, #1
 801a0a4:	4240      	negs	r0, r0
}
 801a0a6:	bd08      	pop	{r3, pc}
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 801a0a8:	2102      	movs	r1, #2
 801a0aa:	e7f5      	b.n	801a098 <ISM330DHCX_GYRO_SetOutputDataRate+0x8c>
 801a0ac:	2103      	movs	r1, #3
 801a0ae:	e7f3      	b.n	801a098 <ISM330DHCX_GYRO_SetOutputDataRate+0x8c>
 801a0b0:	2104      	movs	r1, #4
 801a0b2:	e7f1      	b.n	801a098 <ISM330DHCX_GYRO_SetOutputDataRate+0x8c>
 801a0b4:	2105      	movs	r1, #5
 801a0b6:	e7ef      	b.n	801a098 <ISM330DHCX_GYRO_SetOutputDataRate+0x8c>
 801a0b8:	2106      	movs	r1, #6
 801a0ba:	e7ed      	b.n	801a098 <ISM330DHCX_GYRO_SetOutputDataRate+0x8c>
 801a0bc:	2107      	movs	r1, #7
 801a0be:	e7eb      	b.n	801a098 <ISM330DHCX_GYRO_SetOutputDataRate+0x8c>
 801a0c0:	2108      	movs	r1, #8
 801a0c2:	e7e9      	b.n	801a098 <ISM330DHCX_GYRO_SetOutputDataRate+0x8c>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 801a0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0c8:	d93d      	bls.n	801a146 <ISM330DHCX_GYRO_SetOutputDataRate+0x13a>
 801a0ca:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 801a0ce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0d6:	d938      	bls.n	801a14a <ISM330DHCX_GYRO_SetOutputDataRate+0x13e>
 801a0d8:	eddf 7a23 	vldr	s15, [pc, #140]	; 801a168 <ISM330DHCX_GYRO_SetOutputDataRate+0x15c>
 801a0dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0e4:	d933      	bls.n	801a14e <ISM330DHCX_GYRO_SetOutputDataRate+0x142>
 801a0e6:	eddf 7a21 	vldr	s15, [pc, #132]	; 801a16c <ISM330DHCX_GYRO_SetOutputDataRate+0x160>
 801a0ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0f2:	d92e      	bls.n	801a152 <ISM330DHCX_GYRO_SetOutputDataRate+0x146>
 801a0f4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801a170 <ISM330DHCX_GYRO_SetOutputDataRate+0x164>
 801a0f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a100:	d929      	bls.n	801a156 <ISM330DHCX_GYRO_SetOutputDataRate+0x14a>
 801a102:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801a174 <ISM330DHCX_GYRO_SetOutputDataRate+0x168>
 801a106:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a10e:	d924      	bls.n	801a15a <ISM330DHCX_GYRO_SetOutputDataRate+0x14e>
 801a110:	eddf 7a19 	vldr	s15, [pc, #100]	; 801a178 <ISM330DHCX_GYRO_SetOutputDataRate+0x16c>
 801a114:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a11c:	d91f      	bls.n	801a15e <ISM330DHCX_GYRO_SetOutputDataRate+0x152>
 801a11e:	eddf 7a17 	vldr	s15, [pc, #92]	; 801a17c <ISM330DHCX_GYRO_SetOutputDataRate+0x170>
 801a122:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a12a:	d91a      	bls.n	801a162 <ISM330DHCX_GYRO_SetOutputDataRate+0x156>
 801a12c:	eddf 7a14 	vldr	s15, [pc, #80]	; 801a180 <ISM330DHCX_GYRO_SetOutputDataRate+0x174>
 801a130:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a138:	bf94      	ite	ls
 801a13a:	2309      	movls	r3, #9
 801a13c:	230a      	movhi	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 801a13e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 801a142:	2000      	movs	r0, #0
 801a144:	e7af      	b.n	801a0a6 <ISM330DHCX_GYRO_SetOutputDataRate+0x9a>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 801a146:	2301      	movs	r3, #1
 801a148:	e7f9      	b.n	801a13e <ISM330DHCX_GYRO_SetOutputDataRate+0x132>
 801a14a:	2302      	movs	r3, #2
 801a14c:	e7f7      	b.n	801a13e <ISM330DHCX_GYRO_SetOutputDataRate+0x132>
 801a14e:	2303      	movs	r3, #3
 801a150:	e7f5      	b.n	801a13e <ISM330DHCX_GYRO_SetOutputDataRate+0x132>
 801a152:	2304      	movs	r3, #4
 801a154:	e7f3      	b.n	801a13e <ISM330DHCX_GYRO_SetOutputDataRate+0x132>
 801a156:	2305      	movs	r3, #5
 801a158:	e7f1      	b.n	801a13e <ISM330DHCX_GYRO_SetOutputDataRate+0x132>
 801a15a:	2306      	movs	r3, #6
 801a15c:	e7ef      	b.n	801a13e <ISM330DHCX_GYRO_SetOutputDataRate+0x132>
 801a15e:	2307      	movs	r3, #7
 801a160:	e7ed      	b.n	801a13e <ISM330DHCX_GYRO_SetOutputDataRate+0x132>
 801a162:	2308      	movs	r3, #8
 801a164:	e7eb      	b.n	801a13e <ISM330DHCX_GYRO_SetOutputDataRate+0x132>
 801a166:	bf00      	nop
 801a168:	42500000 	.word	0x42500000
 801a16c:	42d00000 	.word	0x42d00000
 801a170:	43500000 	.word	0x43500000
 801a174:	43d08000 	.word	0x43d08000
 801a178:	44504000 	.word	0x44504000
 801a17c:	44d06000 	.word	0x44d06000
 801a180:	45505000 	.word	0x45505000

0801a184 <ISM330DHCX_Init>:
{
 801a184:	b570      	push	{r4, r5, r6, lr}
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 801a186:	f100 041c 	add.w	r4, r0, #28
{
 801a18a:	4605      	mov	r5, r0
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 801a18c:	2101      	movs	r1, #1
 801a18e:	4620      	mov	r0, r4
 801a190:	f7eb fcef 	bl	8005b72 <ism330dhcx_auto_increment_set>
 801a194:	b110      	cbz	r0, 801a19c <ISM330DHCX_Init+0x18>
    return ISM330DHCX_ERROR;
 801a196:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a19a:	bd70      	pop	{r4, r5, r6, pc}
  if ( ism330dhcx_reset_set( &(pObj->Ctx), PROPERTY_ENABLE)!= ISM330DHCX_OK)
 801a19c:	2101      	movs	r1, #1
 801a19e:	4620      	mov	r0, r4
 801a1a0:	f7eb fcd0 	bl	8005b44 <ism330dhcx_reset_set>
 801a1a4:	2800      	cmp	r0, #0
 801a1a6:	d1f6      	bne.n	801a196 <ISM330DHCX_Init+0x12>
  if ( ism330dhcx_auto_increment_set( &(pObj->Ctx), PROPERTY_ENABLE ) != ISM330DHCX_OK)
 801a1a8:	2101      	movs	r1, #1
 801a1aa:	4620      	mov	r0, r4
 801a1ac:	f7eb fce1 	bl	8005b72 <ism330dhcx_auto_increment_set>
 801a1b0:	2800      	cmp	r0, #0
 801a1b2:	d1f0      	bne.n	801a196 <ISM330DHCX_Init+0x12>
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 801a1b4:	2101      	movs	r1, #1
 801a1b6:	4620      	mov	r0, r4
 801a1b8:	f7eb fc3e 	bl	8005a38 <ism330dhcx_block_data_update_set>
 801a1bc:	4601      	mov	r1, r0
 801a1be:	2800      	cmp	r0, #0
 801a1c0:	d1e9      	bne.n	801a196 <ISM330DHCX_Init+0x12>
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 801a1c2:	4620      	mov	r0, r4
 801a1c4:	f7eb fd73 	bl	8005cae <ism330dhcx_fifo_mode_set>
 801a1c8:	4601      	mov	r1, r0
 801a1ca:	2800      	cmp	r0, #0
 801a1cc:	d1e3      	bne.n	801a196 <ISM330DHCX_Init+0x12>
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 801a1ce:	2604      	movs	r6, #4
 801a1d0:	f885 602b 	strb.w	r6, [r5, #43]	; 0x2b
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 801a1d4:	4620      	mov	r0, r4
 801a1d6:	f7eb fdf9 	bl	8005dcc <ism330dhcx_xl_data_rate_set>
 801a1da:	4601      	mov	r1, r0
 801a1dc:	2800      	cmp	r0, #0
 801a1de:	d1da      	bne.n	801a196 <ISM330DHCX_Init+0x12>
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 801a1e0:	4620      	mov	r0, r4
 801a1e2:	f7eb fb66 	bl	80058b2 <ism330dhcx_xl_full_scale_set>
 801a1e6:	4601      	mov	r1, r0
 801a1e8:	2800      	cmp	r0, #0
 801a1ea:	d1d4      	bne.n	801a196 <ISM330DHCX_Init+0x12>
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 801a1ec:	f885 602c 	strb.w	r6, [r5, #44]	; 0x2c
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 801a1f0:	4620      	mov	r0, r4
 801a1f2:	f7eb fe8c 	bl	8005f0e <ism330dhcx_gy_data_rate_set>
 801a1f6:	2800      	cmp	r0, #0
 801a1f8:	d1cd      	bne.n	801a196 <ISM330DHCX_Init+0x12>
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 801a1fa:	210c      	movs	r1, #12
 801a1fc:	4620      	mov	r0, r4
 801a1fe:	f7eb fbb4 	bl	800596a <ism330dhcx_gy_full_scale_set>
 801a202:	2800      	cmp	r0, #0
 801a204:	d1c7      	bne.n	801a196 <ISM330DHCX_Init+0x12>
  pObj->is_initialized = 1;
 801a206:	2301      	movs	r3, #1
 801a208:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
  return ISM330DHCX_OK;
 801a20c:	e7c5      	b.n	801a19a <ISM330DHCX_Init+0x16>

0801a20e <ISM330DHCX_GYRO_SetFullScale>:
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 801a20e:	297d      	cmp	r1, #125	; 0x7d
{
 801a210:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 801a212:	dd11      	ble.n	801a238 <ISM330DHCX_GYRO_SetFullScale+0x2a>
 801a214:	29fa      	cmp	r1, #250	; 0xfa
 801a216:	dd11      	ble.n	801a23c <ISM330DHCX_GYRO_SetFullScale+0x2e>
 801a218:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 801a21c:	dd10      	ble.n	801a240 <ISM330DHCX_GYRO_SetFullScale+0x32>
 801a21e:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 801a222:	bfd4      	ite	le
 801a224:	2108      	movle	r1, #8
 801a226:	210c      	movgt	r1, #12
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 801a228:	301c      	adds	r0, #28
 801a22a:	f7eb fb9e 	bl	800596a <ism330dhcx_gy_full_scale_set>
 801a22e:	3800      	subs	r0, #0
 801a230:	bf18      	it	ne
 801a232:	2001      	movne	r0, #1
}
 801a234:	4240      	negs	r0, r0
 801a236:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 801a238:	2102      	movs	r1, #2
 801a23a:	e7f5      	b.n	801a228 <ISM330DHCX_GYRO_SetFullScale+0x1a>
 801a23c:	2100      	movs	r1, #0
 801a23e:	e7f3      	b.n	801a228 <ISM330DHCX_GYRO_SetFullScale+0x1a>
 801a240:	2104      	movs	r1, #4
 801a242:	e7f1      	b.n	801a228 <ISM330DHCX_GYRO_SetFullScale+0x1a>

0801a244 <ISM330DHCX_ReadID>:
{
 801a244:	b508      	push	{r3, lr}
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 801a246:	301c      	adds	r0, #28
 801a248:	f7eb fc77 	bl	8005b3a <ism330dhcx_device_id_get>
 801a24c:	3800      	subs	r0, #0
 801a24e:	bf18      	it	ne
 801a250:	2001      	movne	r0, #1
}
 801a252:	4240      	negs	r0, r0
 801a254:	bd08      	pop	{r3, pc}
	...

0801a258 <ISM330DHCX_ACC_GetOutputDataRate>:
{
 801a258:	b513      	push	{r0, r1, r4, lr}
 801a25a:	460c      	mov	r4, r1
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 801a25c:	301c      	adds	r0, #28
 801a25e:	f10d 0107 	add.w	r1, sp, #7
 801a262:	f7eb fb54 	bl	800590e <ism330dhcx_xl_data_rate_get>
 801a266:	bb18      	cbnz	r0, 801a2b0 <ISM330DHCX_ACC_GetOutputDataRate+0x58>
  switch (odr_low_level)
 801a268:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a26c:	2b0a      	cmp	r3, #10
 801a26e:	d81f      	bhi.n	801a2b0 <ISM330DHCX_ACC_GetOutputDataRate+0x58>
 801a270:	e8df f003 	tbb	[pc, r3]
 801a274:	0e0c0a06 	.word	0x0e0c0a06
 801a278:	16141210 	.word	0x16141210
 801a27c:	1a18      	.short	0x1a18
 801a27e:	1c          	.byte	0x1c
 801a27f:	00          	.byte	0x00
      *Odr = 0.0f;
 801a280:	2300      	movs	r3, #0
      *Odr = 6667.0f;
 801a282:	6023      	str	r3, [r4, #0]
}
 801a284:	b002      	add	sp, #8
 801a286:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 801a288:	4b0b      	ldr	r3, [pc, #44]	; (801a2b8 <ISM330DHCX_ACC_GetOutputDataRate+0x60>)
 801a28a:	e7fa      	b.n	801a282 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
      *Odr = 26.0f;
 801a28c:	4b0b      	ldr	r3, [pc, #44]	; (801a2bc <ISM330DHCX_ACC_GetOutputDataRate+0x64>)
 801a28e:	e7f8      	b.n	801a282 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
      *Odr = 52.0f;
 801a290:	4b0b      	ldr	r3, [pc, #44]	; (801a2c0 <ISM330DHCX_ACC_GetOutputDataRate+0x68>)
 801a292:	e7f6      	b.n	801a282 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
      *Odr = 104.0f;
 801a294:	4b0b      	ldr	r3, [pc, #44]	; (801a2c4 <ISM330DHCX_ACC_GetOutputDataRate+0x6c>)
 801a296:	e7f4      	b.n	801a282 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
      *Odr = 208.0f;
 801a298:	4b0b      	ldr	r3, [pc, #44]	; (801a2c8 <ISM330DHCX_ACC_GetOutputDataRate+0x70>)
 801a29a:	e7f2      	b.n	801a282 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
      *Odr = 417.0f;
 801a29c:	4b0b      	ldr	r3, [pc, #44]	; (801a2cc <ISM330DHCX_ACC_GetOutputDataRate+0x74>)
 801a29e:	e7f0      	b.n	801a282 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
      *Odr = 833.0f;
 801a2a0:	4b0b      	ldr	r3, [pc, #44]	; (801a2d0 <ISM330DHCX_ACC_GetOutputDataRate+0x78>)
 801a2a2:	e7ee      	b.n	801a282 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
      *Odr = 1667.0f;
 801a2a4:	4b0b      	ldr	r3, [pc, #44]	; (801a2d4 <ISM330DHCX_ACC_GetOutputDataRate+0x7c>)
 801a2a6:	e7ec      	b.n	801a282 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
      *Odr = 3333.0f;
 801a2a8:	4b0b      	ldr	r3, [pc, #44]	; (801a2d8 <ISM330DHCX_ACC_GetOutputDataRate+0x80>)
 801a2aa:	e7ea      	b.n	801a282 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
      *Odr = 6667.0f;
 801a2ac:	4b0b      	ldr	r3, [pc, #44]	; (801a2dc <ISM330DHCX_ACC_GetOutputDataRate+0x84>)
 801a2ae:	e7e8      	b.n	801a282 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  switch (odr_low_level)
 801a2b0:	f04f 30ff 	mov.w	r0, #4294967295
 801a2b4:	e7e6      	b.n	801a284 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
 801a2b6:	bf00      	nop
 801a2b8:	41480000 	.word	0x41480000
 801a2bc:	41d00000 	.word	0x41d00000
 801a2c0:	42500000 	.word	0x42500000
 801a2c4:	42d00000 	.word	0x42d00000
 801a2c8:	43500000 	.word	0x43500000
 801a2cc:	43d08000 	.word	0x43d08000
 801a2d0:	44504000 	.word	0x44504000
 801a2d4:	44d06000 	.word	0x44d06000
 801a2d8:	45505000 	.word	0x45505000
 801a2dc:	45d05800 	.word	0x45d05800

0801a2e0 <ISM330DHCX_ACC_GetSensitivity>:
{
 801a2e0:	b513      	push	{r0, r1, r4, lr}
 801a2e2:	460c      	mov	r4, r1
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 801a2e4:	301c      	adds	r0, #28
 801a2e6:	f10d 0107 	add.w	r1, sp, #7
 801a2ea:	f7eb faf9 	bl	80058e0 <ism330dhcx_xl_full_scale_get>
 801a2ee:	b988      	cbnz	r0, 801a314 <ISM330DHCX_ACC_GetSensitivity+0x34>
  switch (full_scale)
 801a2f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a2f4:	2b03      	cmp	r3, #3
 801a2f6:	d80d      	bhi.n	801a314 <ISM330DHCX_ACC_GetSensitivity+0x34>
 801a2f8:	e8df f003 	tbb	[pc, r3]
 801a2fc:	08060a02 	.word	0x08060a02
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 801a300:	4b06      	ldr	r3, [pc, #24]	; (801a31c <ISM330DHCX_ACC_GetSensitivity+0x3c>)
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 801a302:	6023      	str	r3, [r4, #0]
}
 801a304:	b002      	add	sp, #8
 801a306:	bd10      	pop	{r4, pc}
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 801a308:	4b05      	ldr	r3, [pc, #20]	; (801a320 <ISM330DHCX_ACC_GetSensitivity+0x40>)
 801a30a:	e7fa      	b.n	801a302 <ISM330DHCX_ACC_GetSensitivity+0x22>
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 801a30c:	4b05      	ldr	r3, [pc, #20]	; (801a324 <ISM330DHCX_ACC_GetSensitivity+0x44>)
 801a30e:	e7f8      	b.n	801a302 <ISM330DHCX_ACC_GetSensitivity+0x22>
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 801a310:	4b05      	ldr	r3, [pc, #20]	; (801a328 <ISM330DHCX_ACC_GetSensitivity+0x48>)
 801a312:	e7f6      	b.n	801a302 <ISM330DHCX_ACC_GetSensitivity+0x22>
  switch (full_scale)
 801a314:	f04f 30ff 	mov.w	r0, #4294967295
 801a318:	e7f4      	b.n	801a304 <ISM330DHCX_ACC_GetSensitivity+0x24>
 801a31a:	bf00      	nop
 801a31c:	3d79db23 	.word	0x3d79db23
 801a320:	3df9db23 	.word	0x3df9db23
 801a324:	3e79db23 	.word	0x3e79db23
 801a328:	3ef9db23 	.word	0x3ef9db23

0801a32c <ISM330DHCX_ACC_GetFullScale>:
{
 801a32c:	b513      	push	{r0, r1, r4, lr}
 801a32e:	460c      	mov	r4, r1
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 801a330:	301c      	adds	r0, #28
 801a332:	f10d 0107 	add.w	r1, sp, #7
 801a336:	f7eb fad3 	bl	80058e0 <ism330dhcx_xl_full_scale_get>
 801a33a:	b988      	cbnz	r0, 801a360 <ISM330DHCX_ACC_GetFullScale+0x34>
  switch (fs_low_level)
 801a33c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a340:	2b03      	cmp	r3, #3
 801a342:	d80d      	bhi.n	801a360 <ISM330DHCX_ACC_GetFullScale+0x34>
 801a344:	e8df f003 	tbb	[pc, r3]
 801a348:	08060a02 	.word	0x08060a02
      *FullScale =  2;
 801a34c:	2302      	movs	r3, #2
      *FullScale = 16;
 801a34e:	6023      	str	r3, [r4, #0]
}
 801a350:	b002      	add	sp, #8
 801a352:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 801a354:	2304      	movs	r3, #4
 801a356:	e7fa      	b.n	801a34e <ISM330DHCX_ACC_GetFullScale+0x22>
      *FullScale =  8;
 801a358:	2308      	movs	r3, #8
 801a35a:	e7f8      	b.n	801a34e <ISM330DHCX_ACC_GetFullScale+0x22>
      *FullScale = 16;
 801a35c:	2310      	movs	r3, #16
 801a35e:	e7f6      	b.n	801a34e <ISM330DHCX_ACC_GetFullScale+0x22>
  switch (fs_low_level)
 801a360:	f04f 30ff 	mov.w	r0, #4294967295
 801a364:	e7f4      	b.n	801a350 <ISM330DHCX_ACC_GetFullScale+0x24>

0801a366 <ISM330DHCX_ACC_GetAxesRaw>:
{
 801a366:	b513      	push	{r0, r1, r4, lr}
 801a368:	460c      	mov	r4, r1
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 801a36a:	301c      	adds	r0, #28
 801a36c:	4669      	mov	r1, sp
 801a36e:	f7eb fb98 	bl	8005aa2 <ism330dhcx_acceleration_raw_get>
 801a372:	b950      	cbnz	r0, 801a38a <ISM330DHCX_ACC_GetAxesRaw+0x24>
  Value->x = data_raw.i16bit[0];
 801a374:	f8bd 3000 	ldrh.w	r3, [sp]
 801a378:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 801a37a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a37e:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 801a380:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a384:	80a3      	strh	r3, [r4, #4]
}
 801a386:	b002      	add	sp, #8
 801a388:	bd10      	pop	{r4, pc}
    return ISM330DHCX_ERROR;
 801a38a:	f04f 30ff 	mov.w	r0, #4294967295
 801a38e:	e7fa      	b.n	801a386 <ISM330DHCX_ACC_GetAxesRaw+0x20>

0801a390 <ISM330DHCX_ACC_GetAxes>:
{
 801a390:	b530      	push	{r4, r5, lr}
 801a392:	b085      	sub	sp, #20
 801a394:	4605      	mov	r5, r0
 801a396:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 801a398:	2300      	movs	r3, #0
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 801a39a:	a902      	add	r1, sp, #8
 801a39c:	301c      	adds	r0, #28
  float sensitivity = 0.0f;
 801a39e:	9301      	str	r3, [sp, #4]
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 801a3a0:	f7eb fb7f 	bl	8005aa2 <ism330dhcx_acceleration_raw_get>
 801a3a4:	b118      	cbz	r0, 801a3ae <ISM330DHCX_ACC_GetAxes+0x1e>
    return ISM330DHCX_ERROR;
 801a3a6:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a3aa:	b005      	add	sp, #20
 801a3ac:	bd30      	pop	{r4, r5, pc}
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 801a3ae:	a901      	add	r1, sp, #4
 801a3b0:	4628      	mov	r0, r5
 801a3b2:	f7ff ff95 	bl	801a2e0 <ISM330DHCX_ACC_GetSensitivity>
 801a3b6:	2800      	cmp	r0, #0
 801a3b8:	d1f5      	bne.n	801a3a6 <ISM330DHCX_ACC_GetAxes+0x16>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 801a3ba:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801a3be:	eddd 6a01 	vldr	s13, [sp, #4]
 801a3c2:	ee07 3a10 	vmov	s14, r3
 801a3c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 801a3ca:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 801a3ce:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a3d2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801a3d6:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 801a3da:	ee07 3a10 	vmov	s14, r3
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 801a3de:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a3e2:	ee07 3a90 	vmov	s15, r3
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 801a3e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 801a3ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 801a3ee:	ee27 7a26 	vmul.f32	s14, s14, s13
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 801a3f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 801a3f6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 801a3fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 801a3fe:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 801a402:	edc4 7a02 	vstr	s15, [r4, #8]
  return ISM330DHCX_OK;
 801a406:	e7d0      	b.n	801a3aa <ISM330DHCX_ACC_GetAxes+0x1a>

0801a408 <ISM330DHCX_GYRO_GetOutputDataRate>:
{
 801a408:	b513      	push	{r0, r1, r4, lr}
 801a40a:	460c      	mov	r4, r1
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 801a40c:	301c      	adds	r0, #28
 801a40e:	f10d 0107 	add.w	r1, sp, #7
 801a412:	f7eb fae5 	bl	80059e0 <ism330dhcx_gy_data_rate_get>
 801a416:	bb18      	cbnz	r0, 801a460 <ISM330DHCX_GYRO_GetOutputDataRate+0x58>
  switch (odr_low_level)
 801a418:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a41c:	2b0a      	cmp	r3, #10
 801a41e:	d81f      	bhi.n	801a460 <ISM330DHCX_GYRO_GetOutputDataRate+0x58>
 801a420:	e8df f003 	tbb	[pc, r3]
 801a424:	0e0c0a06 	.word	0x0e0c0a06
 801a428:	16141210 	.word	0x16141210
 801a42c:	1a18      	.short	0x1a18
 801a42e:	1c          	.byte	0x1c
 801a42f:	00          	.byte	0x00
      *Odr = 0.0f;
 801a430:	2300      	movs	r3, #0
      *Odr =  6667.0f;
 801a432:	6023      	str	r3, [r4, #0]
}
 801a434:	b002      	add	sp, #8
 801a436:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 801a438:	4b0b      	ldr	r3, [pc, #44]	; (801a468 <ISM330DHCX_GYRO_GetOutputDataRate+0x60>)
 801a43a:	e7fa      	b.n	801a432 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
      *Odr = 26.0f;
 801a43c:	4b0b      	ldr	r3, [pc, #44]	; (801a46c <ISM330DHCX_GYRO_GetOutputDataRate+0x64>)
 801a43e:	e7f8      	b.n	801a432 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
      *Odr = 52.0f;
 801a440:	4b0b      	ldr	r3, [pc, #44]	; (801a470 <ISM330DHCX_GYRO_GetOutputDataRate+0x68>)
 801a442:	e7f6      	b.n	801a432 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
      *Odr = 104.0f;
 801a444:	4b0b      	ldr	r3, [pc, #44]	; (801a474 <ISM330DHCX_GYRO_GetOutputDataRate+0x6c>)
 801a446:	e7f4      	b.n	801a432 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
      *Odr = 208.0f;
 801a448:	4b0b      	ldr	r3, [pc, #44]	; (801a478 <ISM330DHCX_GYRO_GetOutputDataRate+0x70>)
 801a44a:	e7f2      	b.n	801a432 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
      *Odr = 417.0f;
 801a44c:	4b0b      	ldr	r3, [pc, #44]	; (801a47c <ISM330DHCX_GYRO_GetOutputDataRate+0x74>)
 801a44e:	e7f0      	b.n	801a432 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
      *Odr = 833.0f;
 801a450:	4b0b      	ldr	r3, [pc, #44]	; (801a480 <ISM330DHCX_GYRO_GetOutputDataRate+0x78>)
 801a452:	e7ee      	b.n	801a432 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
      *Odr =  1667.0f;
 801a454:	4b0b      	ldr	r3, [pc, #44]	; (801a484 <ISM330DHCX_GYRO_GetOutputDataRate+0x7c>)
 801a456:	e7ec      	b.n	801a432 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
      *Odr =  3333.0f;
 801a458:	4b0b      	ldr	r3, [pc, #44]	; (801a488 <ISM330DHCX_GYRO_GetOutputDataRate+0x80>)
 801a45a:	e7ea      	b.n	801a432 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
      *Odr =  6667.0f;
 801a45c:	4b0b      	ldr	r3, [pc, #44]	; (801a48c <ISM330DHCX_GYRO_GetOutputDataRate+0x84>)
 801a45e:	e7e8      	b.n	801a432 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  switch (odr_low_level)
 801a460:	f04f 30ff 	mov.w	r0, #4294967295
 801a464:	e7e6      	b.n	801a434 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
 801a466:	bf00      	nop
 801a468:	41480000 	.word	0x41480000
 801a46c:	41d00000 	.word	0x41d00000
 801a470:	42500000 	.word	0x42500000
 801a474:	42d00000 	.word	0x42d00000
 801a478:	43500000 	.word	0x43500000
 801a47c:	43d08000 	.word	0x43d08000
 801a480:	44504000 	.word	0x44504000
 801a484:	44d06000 	.word	0x44d06000
 801a488:	45505000 	.word	0x45505000
 801a48c:	45d05800 	.word	0x45d05800

0801a490 <ISM330DHCX_GYRO_GetSensitivity>:
{
 801a490:	b513      	push	{r0, r1, r4, lr}
 801a492:	460c      	mov	r4, r1
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 801a494:	301c      	adds	r0, #28
 801a496:	f10d 0107 	add.w	r1, sp, #7
 801a49a:	f7eb fa7d 	bl	8005998 <ism330dhcx_gy_full_scale_get>
 801a49e:	b9c0      	cbnz	r0, 801a4d2 <ISM330DHCX_GYRO_GetSensitivity+0x42>
  switch (full_scale)
 801a4a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a4a4:	2b0c      	cmp	r3, #12
 801a4a6:	d814      	bhi.n	801a4d2 <ISM330DHCX_GYRO_GetSensitivity+0x42>
 801a4a8:	e8df f003 	tbb	[pc, r3]
 801a4ac:	1307130b 	.word	0x1307130b
 801a4b0:	1313130d 	.word	0x1313130d
 801a4b4:	1313130f 	.word	0x1313130f
 801a4b8:	11          	.byte	0x11
 801a4b9:	00          	.byte	0x00
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 801a4ba:	4b07      	ldr	r3, [pc, #28]	; (801a4d8 <ISM330DHCX_GYRO_GetSensitivity+0x48>)
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 801a4bc:	6023      	str	r3, [r4, #0]
}
 801a4be:	b002      	add	sp, #8
 801a4c0:	bd10      	pop	{r4, pc}
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 801a4c2:	4b06      	ldr	r3, [pc, #24]	; (801a4dc <ISM330DHCX_GYRO_GetSensitivity+0x4c>)
 801a4c4:	e7fa      	b.n	801a4bc <ISM330DHCX_GYRO_GetSensitivity+0x2c>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 801a4c6:	4b06      	ldr	r3, [pc, #24]	; (801a4e0 <ISM330DHCX_GYRO_GetSensitivity+0x50>)
 801a4c8:	e7f8      	b.n	801a4bc <ISM330DHCX_GYRO_GetSensitivity+0x2c>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 801a4ca:	4b06      	ldr	r3, [pc, #24]	; (801a4e4 <ISM330DHCX_GYRO_GetSensitivity+0x54>)
 801a4cc:	e7f6      	b.n	801a4bc <ISM330DHCX_GYRO_GetSensitivity+0x2c>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 801a4ce:	4b06      	ldr	r3, [pc, #24]	; (801a4e8 <ISM330DHCX_GYRO_GetSensitivity+0x58>)
 801a4d0:	e7f4      	b.n	801a4bc <ISM330DHCX_GYRO_GetSensitivity+0x2c>
  switch (full_scale)
 801a4d2:	f04f 30ff 	mov.w	r0, #4294967295
 801a4d6:	e7f2      	b.n	801a4be <ISM330DHCX_GYRO_GetSensitivity+0x2e>
 801a4d8:	408c0000 	.word	0x408c0000
 801a4dc:	410c0000 	.word	0x410c0000
 801a4e0:	418c0000 	.word	0x418c0000
 801a4e4:	420c0000 	.word	0x420c0000
 801a4e8:	428c0000 	.word	0x428c0000

0801a4ec <ISM330DHCX_GYRO_GetFullScale>:
{
 801a4ec:	b513      	push	{r0, r1, r4, lr}
 801a4ee:	460c      	mov	r4, r1
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 801a4f0:	301c      	adds	r0, #28
 801a4f2:	f10d 0107 	add.w	r1, sp, #7
 801a4f6:	f7eb fa4f 	bl	8005998 <ism330dhcx_gy_full_scale_get>
 801a4fa:	b9d8      	cbnz	r0, 801a534 <ISM330DHCX_GYRO_GetFullScale+0x48>
  switch (fs_low_level)
 801a4fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a500:	2b0c      	cmp	r3, #12
 801a502:	d817      	bhi.n	801a534 <ISM330DHCX_GYRO_GetFullScale+0x48>
 801a504:	e8df f003 	tbb	[pc, r3]
 801a508:	1607160b 	.word	0x1607160b
 801a50c:	1616160d 	.word	0x1616160d
 801a510:	16161610 	.word	0x16161610
 801a514:	13          	.byte	0x13
 801a515:	00          	.byte	0x00
      *FullScale =  125;
 801a516:	237d      	movs	r3, #125	; 0x7d
      *FullScale = 2000;
 801a518:	6023      	str	r3, [r4, #0]
}
 801a51a:	b002      	add	sp, #8
 801a51c:	bd10      	pop	{r4, pc}
      *FullScale =  250;
 801a51e:	23fa      	movs	r3, #250	; 0xfa
 801a520:	e7fa      	b.n	801a518 <ISM330DHCX_GYRO_GetFullScale+0x2c>
      *FullScale =  500;
 801a522:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801a526:	e7f7      	b.n	801a518 <ISM330DHCX_GYRO_GetFullScale+0x2c>
      *FullScale = 1000;
 801a528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a52c:	e7f4      	b.n	801a518 <ISM330DHCX_GYRO_GetFullScale+0x2c>
      *FullScale = 2000;
 801a52e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801a532:	e7f1      	b.n	801a518 <ISM330DHCX_GYRO_GetFullScale+0x2c>
  switch (fs_low_level)
 801a534:	f04f 30ff 	mov.w	r0, #4294967295
 801a538:	e7ef      	b.n	801a51a <ISM330DHCX_GYRO_GetFullScale+0x2e>

0801a53a <ISM330DHCX_GYRO_GetAxesRaw>:
{
 801a53a:	b513      	push	{r0, r1, r4, lr}
 801a53c:	460c      	mov	r4, r1
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 801a53e:	301c      	adds	r0, #28
 801a540:	4669      	mov	r1, sp
 801a542:	f7eb fa90 	bl	8005a66 <ism330dhcx_angular_rate_raw_get>
 801a546:	b950      	cbnz	r0, 801a55e <ISM330DHCX_GYRO_GetAxesRaw+0x24>
  Value->x = data_raw.i16bit[0];
 801a548:	f8bd 3000 	ldrh.w	r3, [sp]
 801a54c:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 801a54e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a552:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 801a554:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a558:	80a3      	strh	r3, [r4, #4]
}
 801a55a:	b002      	add	sp, #8
 801a55c:	bd10      	pop	{r4, pc}
    return ISM330DHCX_ERROR;
 801a55e:	f04f 30ff 	mov.w	r0, #4294967295
 801a562:	e7fa      	b.n	801a55a <ISM330DHCX_GYRO_GetAxesRaw+0x20>

0801a564 <ISM330DHCX_GYRO_GetAxes>:
{
 801a564:	b530      	push	{r4, r5, lr}
 801a566:	b085      	sub	sp, #20
 801a568:	4605      	mov	r5, r0
 801a56a:	460c      	mov	r4, r1
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 801a56c:	301c      	adds	r0, #28
 801a56e:	a902      	add	r1, sp, #8
 801a570:	f7eb fa79 	bl	8005a66 <ism330dhcx_angular_rate_raw_get>
 801a574:	b118      	cbz	r0, 801a57e <ISM330DHCX_GYRO_GetAxes+0x1a>
    return ISM330DHCX_ERROR;
 801a576:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a57a:	b005      	add	sp, #20
 801a57c:	bd30      	pop	{r4, r5, pc}
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 801a57e:	a901      	add	r1, sp, #4
 801a580:	4628      	mov	r0, r5
 801a582:	f7ff ff85 	bl	801a490 <ISM330DHCX_GYRO_GetSensitivity>
 801a586:	2800      	cmp	r0, #0
 801a588:	d1f5      	bne.n	801a576 <ISM330DHCX_GYRO_GetAxes+0x12>
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 801a58a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801a58e:	eddd 6a01 	vldr	s13, [sp, #4]
 801a592:	ee07 3a10 	vmov	s14, r3
 801a596:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 801a59a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 801a59e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a5a2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801a5a6:	ed84 7a00 	vstr	s14, [r4]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 801a5aa:	ee07 3a10 	vmov	s14, r3
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 801a5ae:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a5b2:	ee07 3a90 	vmov	s15, r3
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 801a5b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 801a5ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 801a5be:	ee27 7a26 	vmul.f32	s14, s14, s13
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 801a5c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 801a5c6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 801a5ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 801a5ce:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 801a5d2:	edc4 7a02 	vstr	s15, [r4, #8]
  return ISM330DHCX_OK;
 801a5d6:	e7d0      	b.n	801a57a <ISM330DHCX_GYRO_GetAxes+0x16>

0801a5d8 <ISM330DHCX_ACC_Enable>:
{
 801a5d8:	b510      	push	{r4, lr}
  if (pObj->acc_is_enabled == 1U)
 801a5da:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 801a5de:	2b01      	cmp	r3, #1
{
 801a5e0:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 1U)
 801a5e2:	d009      	beq.n	801a5f8 <ISM330DHCX_ACC_Enable+0x20>
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 801a5e4:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 801a5e8:	301c      	adds	r0, #28
 801a5ea:	f7eb fbef 	bl	8005dcc <ism330dhcx_xl_data_rate_set>
 801a5ee:	b928      	cbnz	r0, 801a5fc <ISM330DHCX_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 801a5f0:	2301      	movs	r3, #1
 801a5f2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 801a5f6:	bd10      	pop	{r4, pc}
    return ISM330DHCX_OK;
 801a5f8:	2000      	movs	r0, #0
 801a5fa:	e7fc      	b.n	801a5f6 <ISM330DHCX_ACC_Enable+0x1e>
    return ISM330DHCX_ERROR;
 801a5fc:	f04f 30ff 	mov.w	r0, #4294967295
 801a600:	e7f9      	b.n	801a5f6 <ISM330DHCX_ACC_Enable+0x1e>

0801a602 <ISM330DHCX_GYRO_Enable>:
{
 801a602:	b510      	push	{r4, lr}
  if (pObj->gyro_is_enabled == 1U)
 801a604:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 801a608:	2b01      	cmp	r3, #1
{
 801a60a:	4604      	mov	r4, r0
  if (pObj->gyro_is_enabled == 1U)
 801a60c:	d009      	beq.n	801a622 <ISM330DHCX_GYRO_Enable+0x20>
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 801a60e:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 801a612:	301c      	adds	r0, #28
 801a614:	f7eb fc7b 	bl	8005f0e <ism330dhcx_gy_data_rate_set>
 801a618:	b928      	cbnz	r0, 801a626 <ISM330DHCX_GYRO_Enable+0x24>
  pObj->gyro_is_enabled = 1;
 801a61a:	2301      	movs	r3, #1
 801a61c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
}
 801a620:	bd10      	pop	{r4, pc}
    return ISM330DHCX_OK;
 801a622:	2000      	movs	r0, #0
 801a624:	e7fc      	b.n	801a620 <ISM330DHCX_GYRO_Enable+0x1e>
    return ISM330DHCX_ERROR;
 801a626:	f04f 30ff 	mov.w	r0, #4294967295
 801a62a:	e7f9      	b.n	801a620 <ISM330DHCX_GYRO_Enable+0x1e>

0801a62c <ISM330DHCX_ACC_Disable>:
{
 801a62c:	b538      	push	{r3, r4, r5, lr}
 801a62e:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 801a630:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 801a634:	b150      	cbz	r0, 801a64c <ISM330DHCX_ACC_Disable+0x20>
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 801a636:	f104 051c 	add.w	r5, r4, #28
 801a63a:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 801a63e:	4628      	mov	r0, r5
 801a640:	f7eb f965 	bl	800590e <ism330dhcx_xl_data_rate_get>
 801a644:	4601      	mov	r1, r0
 801a646:	b110      	cbz	r0, 801a64e <ISM330DHCX_ACC_Disable+0x22>
    return ISM330DHCX_ERROR;
 801a648:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a64c:	bd38      	pop	{r3, r4, r5, pc}
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 801a64e:	4628      	mov	r0, r5
 801a650:	f7eb fbbc 	bl	8005dcc <ism330dhcx_xl_data_rate_set>
 801a654:	2800      	cmp	r0, #0
 801a656:	d1f7      	bne.n	801a648 <ISM330DHCX_ACC_Disable+0x1c>
  pObj->acc_is_enabled = 0;
 801a658:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
  return ISM330DHCX_OK;
 801a65c:	e7f6      	b.n	801a64c <ISM330DHCX_ACC_Disable+0x20>

0801a65e <ISM330DHCX_GYRO_Disable>:
{
 801a65e:	b538      	push	{r3, r4, r5, lr}
 801a660:	4604      	mov	r4, r0
  if (pObj->gyro_is_enabled == 0U)
 801a662:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 801a666:	b150      	cbz	r0, 801a67e <ISM330DHCX_GYRO_Disable+0x20>
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 801a668:	f104 051c 	add.w	r5, r4, #28
 801a66c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 801a670:	4628      	mov	r0, r5
 801a672:	f7eb f9b5 	bl	80059e0 <ism330dhcx_gy_data_rate_get>
 801a676:	4601      	mov	r1, r0
 801a678:	b110      	cbz	r0, 801a680 <ISM330DHCX_GYRO_Disable+0x22>
    return ISM330DHCX_ERROR;
 801a67a:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a67e:	bd38      	pop	{r3, r4, r5, pc}
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 801a680:	4628      	mov	r0, r5
 801a682:	f7eb fc44 	bl	8005f0e <ism330dhcx_gy_data_rate_set>
 801a686:	2800      	cmp	r0, #0
 801a688:	d1f7      	bne.n	801a67a <ISM330DHCX_GYRO_Disable+0x1c>
  pObj->gyro_is_enabled = 0;
 801a68a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  return ISM330DHCX_OK;
 801a68e:	e7f6      	b.n	801a67e <ISM330DHCX_GYRO_Disable+0x20>

0801a690 <ISM330DHCX_DeInit>:
{
 801a690:	b510      	push	{r4, lr}
 801a692:	4604      	mov	r4, r0
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 801a694:	f7ff ffca 	bl	801a62c <ISM330DHCX_ACC_Disable>
 801a698:	b110      	cbz	r0, 801a6a0 <ISM330DHCX_DeInit+0x10>
    return ISM330DHCX_ERROR;
 801a69a:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a69e:	bd10      	pop	{r4, pc}
  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 801a6a0:	4620      	mov	r0, r4
 801a6a2:	f7ff ffdc 	bl	801a65e <ISM330DHCX_GYRO_Disable>
 801a6a6:	2800      	cmp	r0, #0
 801a6a8:	d1f7      	bne.n	801a69a <ISM330DHCX_DeInit+0xa>
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 801a6aa:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 801a6ae:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
  pObj->is_initialized = 0;
 801a6b2:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  return ISM330DHCX_OK;
 801a6b6:	e7f2      	b.n	801a69e <ISM330DHCX_DeInit+0xe>

0801a6b8 <ISM330DHCX_Write_Reg>:
{
 801a6b8:	b507      	push	{r0, r1, r2, lr}
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 801a6ba:	2301      	movs	r3, #1
{
 801a6bc:	f88d 2007 	strb.w	r2, [sp, #7]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 801a6c0:	301c      	adds	r0, #28
 801a6c2:	f10d 0207 	add.w	r2, sp, #7
 801a6c6:	f7eb f8ed 	bl	80058a4 <ism330dhcx_write_reg>
 801a6ca:	3800      	subs	r0, #0
 801a6cc:	bf18      	it	ne
 801a6ce:	2001      	movne	r0, #1
}
 801a6d0:	4240      	negs	r0, r0
 801a6d2:	b003      	add	sp, #12
 801a6d4:	f85d fb04 	ldr.w	pc, [sp], #4

0801a6d8 <ISM330DHCX_RegisterBusIO>:
{
 801a6d8:	b510      	push	{r4, lr}
  if (pObj == NULL)
 801a6da:	4604      	mov	r4, r0
 801a6dc:	b910      	cbnz	r0, 801a6e4 <ISM330DHCX_RegisterBusIO+0xc>
    ret = ISM330DHCX_ERROR;
 801a6de:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a6e2:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit    = pIO->DeInit;
 801a6e4:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 801a6e6:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 801a6e8:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 801a6ea:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 801a6ec:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 801a6ee:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 801a6f0:	7b0a      	ldrb	r2, [r1, #12]
 801a6f2:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 801a6f4:	690a      	ldr	r2, [r1, #16]
 801a6f6:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 801a6f8:	694a      	ldr	r2, [r1, #20]
 801a6fa:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 801a6fc:	698a      	ldr	r2, [r1, #24]
 801a6fe:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 801a700:	4a0d      	ldr	r2, [pc, #52]	; (801a738 <ISM330DHCX_RegisterBusIO+0x60>)
 801a702:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 801a704:	4a0d      	ldr	r2, [pc, #52]	; (801a73c <ISM330DHCX_RegisterBusIO+0x64>)
 801a706:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle   = pObj;
 801a708:	6240      	str	r0, [r0, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d0e7      	beq.n	801a6de <ISM330DHCX_RegisterBusIO+0x6>
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 801a70e:	4798      	blx	r3
 801a710:	2800      	cmp	r0, #0
 801a712:	d1e4      	bne.n	801a6de <ISM330DHCX_RegisterBusIO+0x6>
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 801a714:	68a3      	ldr	r3, [r4, #8]
 801a716:	2b02      	cmp	r3, #2
 801a718:	d1e3      	bne.n	801a6e2 <ISM330DHCX_RegisterBusIO+0xa>
        if (pObj->is_initialized == 0U)
 801a71a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d1df      	bne.n	801a6e2 <ISM330DHCX_RegisterBusIO+0xa>
          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 801a722:	220c      	movs	r2, #12
 801a724:	2112      	movs	r1, #18
 801a726:	4620      	mov	r0, r4
 801a728:	f7ff ffc6 	bl	801a6b8 <ISM330DHCX_Write_Reg>
 801a72c:	3800      	subs	r0, #0
 801a72e:	bf18      	it	ne
 801a730:	2001      	movne	r0, #1
 801a732:	4240      	negs	r0, r0
  return ret;
 801a734:	e7d5      	b.n	801a6e2 <ISM330DHCX_RegisterBusIO+0xa>
 801a736:	bf00      	nop
 801a738:	08019e4d 	.word	0x08019e4d
 801a73c:	08019e5b 	.word	0x08019e5b

0801a740 <ISM330DHCX_Set_Drdy_Mode>:
{
 801a740:	b508      	push	{r3, lr}
  if (ism330dhcx_data_ready_mode_set(&(pObj->Ctx),(ism330dhcx_dataready_pulsed_t)Status) != ISM330DHCX_OK)
 801a742:	301c      	adds	r0, #28
 801a744:	f7eb f9e2 	bl	8005b0c <ism330dhcx_data_ready_mode_set>
 801a748:	3800      	subs	r0, #0
 801a74a:	bf18      	it	ne
 801a74c:	2001      	movne	r0, #1
}
 801a74e:	4240      	negs	r0, r0
 801a750:	bd08      	pop	{r3, pc}

0801a752 <ISM330DHCX_ACC_Enable_HP_Filter>:
{
 801a752:	b508      	push	{r3, lr}
  if (ism330dhcx_xl_hp_path_on_out_set(&(pObj->Ctx), CutOff) != ISM330DHCX_OK)
 801a754:	301c      	adds	r0, #28
 801a756:	f7eb fa23 	bl	8005ba0 <ism330dhcx_xl_hp_path_on_out_set>
 801a75a:	3800      	subs	r0, #0
 801a75c:	bf18      	it	ne
 801a75e:	2001      	movne	r0, #1
}
 801a760:	4240      	negs	r0, r0
 801a762:	bd08      	pop	{r3, pc}

0801a764 <ISM330DHCX_FIFO_ACC_Set_BDR>:
            : (Bdr <=   26.0f) ? ISM330DHCX_XL_BATCHED_AT_26Hz
 801a764:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 801a768:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 801a770:	b508      	push	{r3, lr}
            : (Bdr <=   26.0f) ? ISM330DHCX_XL_BATCHED_AT_26Hz
 801a772:	d941      	bls.n	801a7f8 <ISM330DHCX_FIFO_ACC_Set_BDR+0x94>
 801a774:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 801a778:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a780:	d93c      	bls.n	801a7fc <ISM330DHCX_FIFO_ACC_Set_BDR+0x98>
 801a782:	eddf 7a25 	vldr	s15, [pc, #148]	; 801a818 <ISM330DHCX_FIFO_ACC_Set_BDR+0xb4>
 801a786:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a78e:	d937      	bls.n	801a800 <ISM330DHCX_FIFO_ACC_Set_BDR+0x9c>
 801a790:	eddf 7a22 	vldr	s15, [pc, #136]	; 801a81c <ISM330DHCX_FIFO_ACC_Set_BDR+0xb8>
 801a794:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a79c:	d932      	bls.n	801a804 <ISM330DHCX_FIFO_ACC_Set_BDR+0xa0>
 801a79e:	eddf 7a20 	vldr	s15, [pc, #128]	; 801a820 <ISM330DHCX_FIFO_ACC_Set_BDR+0xbc>
 801a7a2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7aa:	d92d      	bls.n	801a808 <ISM330DHCX_FIFO_ACC_Set_BDR+0xa4>
 801a7ac:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801a824 <ISM330DHCX_FIFO_ACC_Set_BDR+0xc0>
 801a7b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7b8:	d928      	bls.n	801a80c <ISM330DHCX_FIFO_ACC_Set_BDR+0xa8>
 801a7ba:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801a828 <ISM330DHCX_FIFO_ACC_Set_BDR+0xc4>
 801a7be:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7c6:	d923      	bls.n	801a810 <ISM330DHCX_FIFO_ACC_Set_BDR+0xac>
 801a7c8:	eddf 7a18 	vldr	s15, [pc, #96]	; 801a82c <ISM330DHCX_FIFO_ACC_Set_BDR+0xc8>
 801a7cc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7d4:	d91e      	bls.n	801a814 <ISM330DHCX_FIFO_ACC_Set_BDR+0xb0>
 801a7d6:	eddf 7a16 	vldr	s15, [pc, #88]	; 801a830 <ISM330DHCX_FIFO_ACC_Set_BDR+0xcc>
 801a7da:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7e2:	bf94      	ite	ls
 801a7e4:	2109      	movls	r1, #9
 801a7e6:	210a      	movhi	r1, #10
  if (ism330dhcx_fifo_xl_batch_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 801a7e8:	301c      	adds	r0, #28
 801a7ea:	f7eb fa32 	bl	8005c52 <ism330dhcx_fifo_xl_batch_set>
 801a7ee:	3800      	subs	r0, #0
 801a7f0:	bf18      	it	ne
 801a7f2:	2001      	movne	r0, #1
}
 801a7f4:	4240      	negs	r0, r0
 801a7f6:	bd08      	pop	{r3, pc}
            : (Bdr <=   26.0f) ? ISM330DHCX_XL_BATCHED_AT_26Hz
 801a7f8:	2101      	movs	r1, #1
 801a7fa:	e7f5      	b.n	801a7e8 <ISM330DHCX_FIFO_ACC_Set_BDR+0x84>
 801a7fc:	2102      	movs	r1, #2
 801a7fe:	e7f3      	b.n	801a7e8 <ISM330DHCX_FIFO_ACC_Set_BDR+0x84>
 801a800:	2103      	movs	r1, #3
 801a802:	e7f1      	b.n	801a7e8 <ISM330DHCX_FIFO_ACC_Set_BDR+0x84>
 801a804:	2104      	movs	r1, #4
 801a806:	e7ef      	b.n	801a7e8 <ISM330DHCX_FIFO_ACC_Set_BDR+0x84>
 801a808:	2105      	movs	r1, #5
 801a80a:	e7ed      	b.n	801a7e8 <ISM330DHCX_FIFO_ACC_Set_BDR+0x84>
 801a80c:	2106      	movs	r1, #6
 801a80e:	e7eb      	b.n	801a7e8 <ISM330DHCX_FIFO_ACC_Set_BDR+0x84>
 801a810:	2107      	movs	r1, #7
 801a812:	e7e9      	b.n	801a7e8 <ISM330DHCX_FIFO_ACC_Set_BDR+0x84>
 801a814:	2108      	movs	r1, #8
 801a816:	e7e7      	b.n	801a7e8 <ISM330DHCX_FIFO_ACC_Set_BDR+0x84>
 801a818:	42500000 	.word	0x42500000
 801a81c:	42d00000 	.word	0x42d00000
 801a820:	43500000 	.word	0x43500000
 801a824:	43d08000 	.word	0x43d08000
 801a828:	44504000 	.word	0x44504000
 801a82c:	44d06000 	.word	0x44d06000
 801a830:	45505000 	.word	0x45505000

0801a834 <ISM330DHCX_FIFO_GYRO_Set_BDR>:
            : (Bdr <=   26.0f) ? ISM330DHCX_GY_BATCHED_AT_26Hz
 801a834:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 801a838:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 801a840:	b508      	push	{r3, lr}
            : (Bdr <=   26.0f) ? ISM330DHCX_GY_BATCHED_AT_26Hz
 801a842:	d941      	bls.n	801a8c8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x94>
 801a844:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 801a848:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a850:	d93c      	bls.n	801a8cc <ISM330DHCX_FIFO_GYRO_Set_BDR+0x98>
 801a852:	eddf 7a25 	vldr	s15, [pc, #148]	; 801a8e8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xb4>
 801a856:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a85e:	d937      	bls.n	801a8d0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x9c>
 801a860:	eddf 7a22 	vldr	s15, [pc, #136]	; 801a8ec <ISM330DHCX_FIFO_GYRO_Set_BDR+0xb8>
 801a864:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a86c:	d932      	bls.n	801a8d4 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xa0>
 801a86e:	eddf 7a20 	vldr	s15, [pc, #128]	; 801a8f0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xbc>
 801a872:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a87a:	d92d      	bls.n	801a8d8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xa4>
 801a87c:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801a8f4 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xc0>
 801a880:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a888:	d928      	bls.n	801a8dc <ISM330DHCX_FIFO_GYRO_Set_BDR+0xa8>
 801a88a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801a8f8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xc4>
 801a88e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a896:	d923      	bls.n	801a8e0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xac>
 801a898:	eddf 7a18 	vldr	s15, [pc, #96]	; 801a8fc <ISM330DHCX_FIFO_GYRO_Set_BDR+0xc8>
 801a89c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8a4:	d91e      	bls.n	801a8e4 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xb0>
 801a8a6:	eddf 7a16 	vldr	s15, [pc, #88]	; 801a900 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xcc>
 801a8aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8b2:	bf94      	ite	ls
 801a8b4:	2109      	movls	r1, #9
 801a8b6:	210a      	movhi	r1, #10
  if (ism330dhcx_fifo_gy_batch_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 801a8b8:	301c      	adds	r0, #28
 801a8ba:	f7eb f9e1 	bl	8005c80 <ism330dhcx_fifo_gy_batch_set>
 801a8be:	3800      	subs	r0, #0
 801a8c0:	bf18      	it	ne
 801a8c2:	2001      	movne	r0, #1
}
 801a8c4:	4240      	negs	r0, r0
 801a8c6:	bd08      	pop	{r3, pc}
            : (Bdr <=   26.0f) ? ISM330DHCX_GY_BATCHED_AT_26Hz
 801a8c8:	2101      	movs	r1, #1
 801a8ca:	e7f5      	b.n	801a8b8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x84>
 801a8cc:	2102      	movs	r1, #2
 801a8ce:	e7f3      	b.n	801a8b8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x84>
 801a8d0:	2103      	movs	r1, #3
 801a8d2:	e7f1      	b.n	801a8b8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x84>
 801a8d4:	2104      	movs	r1, #4
 801a8d6:	e7ef      	b.n	801a8b8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x84>
 801a8d8:	2105      	movs	r1, #5
 801a8da:	e7ed      	b.n	801a8b8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x84>
 801a8dc:	2106      	movs	r1, #6
 801a8de:	e7eb      	b.n	801a8b8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x84>
 801a8e0:	2107      	movs	r1, #7
 801a8e2:	e7e9      	b.n	801a8b8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x84>
 801a8e4:	2108      	movs	r1, #8
 801a8e6:	e7e7      	b.n	801a8b8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x84>
 801a8e8:	42500000 	.word	0x42500000
 801a8ec:	42d00000 	.word	0x42d00000
 801a8f0:	43500000 	.word	0x43500000
 801a8f4:	43d08000 	.word	0x43d08000
 801a8f8:	44504000 	.word	0x44504000
 801a8fc:	44d06000 	.word	0x44d06000
 801a900:	45505000 	.word	0x45505000

0801a904 <ISM330DHCX_FIFO_Set_INT2_FIFO_Full>:
{
 801a904:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (ism330dhcx_read_reg(&(pObj->Ctx), ISM330DHCX_INT2_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 801a906:	f100 041c 	add.w	r4, r0, #28
{
 801a90a:	460d      	mov	r5, r1
  if (ism330dhcx_read_reg(&(pObj->Ctx), ISM330DHCX_INT2_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 801a90c:	2301      	movs	r3, #1
 801a90e:	aa01      	add	r2, sp, #4
 801a910:	210e      	movs	r1, #14
 801a912:	4620      	mov	r0, r4
 801a914:	f7ea ffbf 	bl	8005896 <ism330dhcx_read_reg>
 801a918:	b988      	cbnz	r0, 801a93e <ISM330DHCX_FIFO_Set_INT2_FIFO_Full+0x3a>
  reg.int2_ctrl.int2_fifo_full = Status;
 801a91a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801a91e:	f365 1345 	bfi	r3, r5, #5, #1
 801a922:	f88d 3004 	strb.w	r3, [sp, #4]
  if (ism330dhcx_write_reg(&(pObj->Ctx), ISM330DHCX_INT2_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 801a926:	aa01      	add	r2, sp, #4
 801a928:	2301      	movs	r3, #1
 801a92a:	210e      	movs	r1, #14
 801a92c:	4620      	mov	r0, r4
 801a92e:	f7ea ffb9 	bl	80058a4 <ism330dhcx_write_reg>
 801a932:	3800      	subs	r0, #0
 801a934:	bf18      	it	ne
 801a936:	2001      	movne	r0, #1
 801a938:	4240      	negs	r0, r0
}
 801a93a:	b003      	add	sp, #12
 801a93c:	bd30      	pop	{r4, r5, pc}
    return ISM330DHCX_ERROR;
 801a93e:	f04f 30ff 	mov.w	r0, #4294967295
 801a942:	e7fa      	b.n	801a93a <ISM330DHCX_FIFO_Set_INT2_FIFO_Full+0x36>

0801a944 <ISM330DHCX_FIFO_Set_Watermark_Level>:
{
 801a944:	b508      	push	{r3, lr}
  if (ism330dhcx_fifo_watermark_set(&(pObj->Ctx), Watermark) != ISM330DHCX_OK)
 801a946:	301c      	adds	r0, #28
 801a948:	f7eb f94b 	bl	8005be2 <ism330dhcx_fifo_watermark_set>
 801a94c:	3800      	subs	r0, #0
 801a94e:	bf18      	it	ne
 801a950:	2001      	movne	r0, #1
}
 801a952:	4240      	negs	r0, r0
 801a954:	bd08      	pop	{r3, pc}

0801a956 <ISM330DHCX_FIFO_Set_Stop_On_Fth>:
{
 801a956:	b508      	push	{r3, lr}
  if (ism330dhcx_fifo_stop_on_wtm_set(&(pObj->Ctx), Status) != ISM330DHCX_OK)
 801a958:	301c      	adds	r0, #28
 801a95a:	f7eb f963 	bl	8005c24 <ism330dhcx_fifo_stop_on_wtm_set>
 801a95e:	3800      	subs	r0, #0
 801a960:	bf18      	it	ne
 801a962:	2001      	movne	r0, #1
}
 801a964:	4240      	negs	r0, r0
 801a966:	bd08      	pop	{r3, pc}

0801a968 <ISM330DHCX_FIFO_Set_Mode>:
  switch ((ism330dhcx_fifo_mode_t)Mode)
 801a968:	2906      	cmp	r1, #6
{
 801a96a:	b508      	push	{r3, lr}
 801a96c:	d80d      	bhi.n	801a98a <ISM330DHCX_FIFO_Set_Mode+0x22>
 801a96e:	2201      	movs	r2, #1
 801a970:	fa02 f301 	lsl.w	r3, r2, r1
 801a974:	f013 0f5b 	tst.w	r3, #91	; 0x5b
 801a978:	d007      	beq.n	801a98a <ISM330DHCX_FIFO_Set_Mode+0x22>
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), (ism330dhcx_fifo_mode_t)Mode) != ISM330DHCX_OK)
 801a97a:	301c      	adds	r0, #28
 801a97c:	f7eb f997 	bl	8005cae <ism330dhcx_fifo_mode_set>
 801a980:	3800      	subs	r0, #0
 801a982:	bf18      	it	ne
 801a984:	2001      	movne	r0, #1
 801a986:	4240      	negs	r0, r0
}
 801a988:	bd08      	pop	{r3, pc}
{
 801a98a:	f04f 30ff 	mov.w	r0, #4294967295
 801a98e:	e7fb      	b.n	801a988 <ISM330DHCX_FIFO_Set_Mode+0x20>

0801a990 <ISM330DHCX_FIFO_Read>:
  if (ism330dhcx_read_reg(&(pObj->Ctx), ISM330DHCX_FIFO_DATA_OUT_TAG, pBuff, (Watermark * 3)) != ISM330DHCX_OK)
 801a990:	eb02 0242 	add.w	r2, r2, r2, lsl #1
{
 801a994:	b508      	push	{r3, lr}
  if (ism330dhcx_read_reg(&(pObj->Ctx), ISM330DHCX_FIFO_DATA_OUT_TAG, pBuff, (Watermark * 3)) != ISM330DHCX_OK)
 801a996:	301c      	adds	r0, #28
 801a998:	b293      	uxth	r3, r2
 801a99a:	460a      	mov	r2, r1
 801a99c:	2178      	movs	r1, #120	; 0x78
 801a99e:	f7ea ff7a 	bl	8005896 <ism330dhcx_read_reg>
 801a9a2:	3800      	subs	r0, #0
 801a9a4:	bf18      	it	ne
 801a9a6:	2001      	movne	r0, #1
}
 801a9a8:	4240      	negs	r0, r0
 801a9aa:	bd08      	pop	{r3, pc}

0801a9ac <ISM330DHCX_Set_INT2_Drdy>:
{
 801a9ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (ism330dhcx_read_reg(&(pObj->Ctx), ISM330DHCX_INT2_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 801a9ae:	f100 041c 	add.w	r4, r0, #28
{
 801a9b2:	460d      	mov	r5, r1
  if (ism330dhcx_read_reg(&(pObj->Ctx), ISM330DHCX_INT2_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 801a9b4:	2301      	movs	r3, #1
 801a9b6:	aa01      	add	r2, sp, #4
 801a9b8:	210e      	movs	r1, #14
 801a9ba:	4620      	mov	r0, r4
 801a9bc:	f7ea ff6b 	bl	8005896 <ism330dhcx_read_reg>
 801a9c0:	b988      	cbnz	r0, 801a9e6 <ISM330DHCX_Set_INT2_Drdy+0x3a>
  reg.int2_ctrl.int2_drdy_xl = Status;
 801a9c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801a9c6:	f365 0300 	bfi	r3, r5, #0, #1
 801a9ca:	f88d 3004 	strb.w	r3, [sp, #4]
  if (ism330dhcx_write_reg(&(pObj->Ctx), ISM330DHCX_INT2_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 801a9ce:	aa01      	add	r2, sp, #4
 801a9d0:	2301      	movs	r3, #1
 801a9d2:	210e      	movs	r1, #14
 801a9d4:	4620      	mov	r0, r4
 801a9d6:	f7ea ff65 	bl	80058a4 <ism330dhcx_write_reg>
 801a9da:	3800      	subs	r0, #0
 801a9dc:	bf18      	it	ne
 801a9de:	2001      	movne	r0, #1
 801a9e0:	4240      	negs	r0, r0
}
 801a9e2:	b003      	add	sp, #12
 801a9e4:	bd30      	pop	{r4, r5, pc}
    return ISM330DHCX_ERROR;
 801a9e6:	f04f 30ff 	mov.w	r0, #4294967295
 801a9ea:	e7fa      	b.n	801a9e2 <ISM330DHCX_Set_INT2_Drdy+0x36>

0801a9ec <arm_max_f32>:
 801a9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9f0:	1e4f      	subs	r7, r1, #1
 801a9f2:	ea5f 0897 	movs.w	r8, r7, lsr #2
 801a9f6:	f100 0e04 	add.w	lr, r0, #4
 801a9fa:	edd0 7a00 	vldr	s15, [r0]
 801a9fe:	d058      	beq.n	801aab2 <arm_max_f32+0xc6>
 801aa00:	3014      	adds	r0, #20
 801aa02:	46c4      	mov	ip, r8
 801aa04:	2604      	movs	r6, #4
 801aa06:	2400      	movs	r4, #0
 801aa08:	ed10 6a04 	vldr	s12, [r0, #-16]
 801aa0c:	ed50 6a03 	vldr	s13, [r0, #-12]
 801aa10:	ed10 7a02 	vldr	s14, [r0, #-8]
 801aa14:	ed50 5a01 	vldr	s11, [r0, #-4]
 801aa18:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801aa1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa20:	bfc8      	it	gt
 801aa22:	eef0 7a46 	vmovgt.f32	s15, s12
 801aa26:	f1a6 0503 	sub.w	r5, r6, #3
 801aa2a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801aa2e:	bfc8      	it	gt
 801aa30:	462c      	movgt	r4, r5
 801aa32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa36:	bf48      	it	mi
 801aa38:	eef0 7a66 	vmovmi.f32	s15, s13
 801aa3c:	f1a6 0502 	sub.w	r5, r6, #2
 801aa40:	eef4 7ac7 	vcmpe.f32	s15, s14
 801aa44:	bf48      	it	mi
 801aa46:	462c      	movmi	r4, r5
 801aa48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa4c:	bf48      	it	mi
 801aa4e:	eef0 7a47 	vmovmi.f32	s15, s14
 801aa52:	f106 35ff 	add.w	r5, r6, #4294967295
 801aa56:	eef4 7ae5 	vcmpe.f32	s15, s11
 801aa5a:	bf48      	it	mi
 801aa5c:	462c      	movmi	r4, r5
 801aa5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa62:	bf48      	it	mi
 801aa64:	4634      	movmi	r4, r6
 801aa66:	bf48      	it	mi
 801aa68:	eef0 7a65 	vmovmi.f32	s15, s11
 801aa6c:	f1bc 0c01 	subs.w	ip, ip, #1
 801aa70:	f100 0010 	add.w	r0, r0, #16
 801aa74:	f106 0604 	add.w	r6, r6, #4
 801aa78:	d1c6      	bne.n	801aa08 <arm_max_f32+0x1c>
 801aa7a:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 801aa7e:	f017 0003 	ands.w	r0, r7, #3
 801aa82:	d018      	beq.n	801aab6 <arm_max_f32+0xca>
 801aa84:	1a08      	subs	r0, r1, r0
 801aa86:	ecbe 7a01 	vldmia	lr!, {s14}
 801aa8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aa8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa92:	bfc8      	it	gt
 801aa94:	4604      	movgt	r4, r0
 801aa96:	f100 0001 	add.w	r0, r0, #1
 801aa9a:	bfd8      	it	le
 801aa9c:	eeb0 7a67 	vmovle.f32	s14, s15
 801aaa0:	4281      	cmp	r1, r0
 801aaa2:	eef0 7a47 	vmov.f32	s15, s14
 801aaa6:	d1ee      	bne.n	801aa86 <arm_max_f32+0x9a>
 801aaa8:	ed82 7a00 	vstr	s14, [r2]
 801aaac:	601c      	str	r4, [r3, #0]
 801aaae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aab2:	4644      	mov	r4, r8
 801aab4:	e7e3      	b.n	801aa7e <arm_max_f32+0x92>
 801aab6:	eeb0 7a67 	vmov.f32	s14, s15
 801aaba:	e7f5      	b.n	801aaa8 <arm_max_f32+0xbc>

0801aabc <arm_rfft_fast_init_f32>:
 801aabc:	084b      	lsrs	r3, r1, #1
 801aabe:	2b80      	cmp	r3, #128	; 0x80
 801aac0:	b410      	push	{r4}
 801aac2:	8201      	strh	r1, [r0, #16]
 801aac4:	8003      	strh	r3, [r0, #0]
 801aac6:	d046      	beq.n	801ab56 <arm_rfft_fast_init_f32+0x9a>
 801aac8:	d916      	bls.n	801aaf8 <arm_rfft_fast_init_f32+0x3c>
 801aaca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801aace:	d03c      	beq.n	801ab4a <arm_rfft_fast_init_f32+0x8e>
 801aad0:	d928      	bls.n	801ab24 <arm_rfft_fast_init_f32+0x68>
 801aad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801aad6:	d01f      	beq.n	801ab18 <arm_rfft_fast_init_f32+0x5c>
 801aad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801aadc:	d112      	bne.n	801ab04 <arm_rfft_fast_init_f32+0x48>
 801aade:	4920      	ldr	r1, [pc, #128]	; (801ab60 <arm_rfft_fast_init_f32+0xa4>)
 801aae0:	4a20      	ldr	r2, [pc, #128]	; (801ab64 <arm_rfft_fast_init_f32+0xa8>)
 801aae2:	4b21      	ldr	r3, [pc, #132]	; (801ab68 <arm_rfft_fast_init_f32+0xac>)
 801aae4:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 801aae8:	8184      	strh	r4, [r0, #12]
 801aaea:	6081      	str	r1, [r0, #8]
 801aaec:	6042      	str	r2, [r0, #4]
 801aaee:	6143      	str	r3, [r0, #20]
 801aaf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aaf4:	2000      	movs	r0, #0
 801aaf6:	4770      	bx	lr
 801aaf8:	2b20      	cmp	r3, #32
 801aafa:	d01c      	beq.n	801ab36 <arm_rfft_fast_init_f32+0x7a>
 801aafc:	2b40      	cmp	r3, #64	; 0x40
 801aafe:	d006      	beq.n	801ab0e <arm_rfft_fast_init_f32+0x52>
 801ab00:	2b10      	cmp	r3, #16
 801ab02:	d01d      	beq.n	801ab40 <arm_rfft_fast_init_f32+0x84>
 801ab04:	f04f 30ff 	mov.w	r0, #4294967295
 801ab08:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab0c:	4770      	bx	lr
 801ab0e:	2438      	movs	r4, #56	; 0x38
 801ab10:	4916      	ldr	r1, [pc, #88]	; (801ab6c <arm_rfft_fast_init_f32+0xb0>)
 801ab12:	4a17      	ldr	r2, [pc, #92]	; (801ab70 <arm_rfft_fast_init_f32+0xb4>)
 801ab14:	4b17      	ldr	r3, [pc, #92]	; (801ab74 <arm_rfft_fast_init_f32+0xb8>)
 801ab16:	e7e7      	b.n	801aae8 <arm_rfft_fast_init_f32+0x2c>
 801ab18:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 801ab1c:	4916      	ldr	r1, [pc, #88]	; (801ab78 <arm_rfft_fast_init_f32+0xbc>)
 801ab1e:	4a17      	ldr	r2, [pc, #92]	; (801ab7c <arm_rfft_fast_init_f32+0xc0>)
 801ab20:	4b17      	ldr	r3, [pc, #92]	; (801ab80 <arm_rfft_fast_init_f32+0xc4>)
 801ab22:	e7e1      	b.n	801aae8 <arm_rfft_fast_init_f32+0x2c>
 801ab24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ab28:	d1ec      	bne.n	801ab04 <arm_rfft_fast_init_f32+0x48>
 801ab2a:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 801ab2e:	4915      	ldr	r1, [pc, #84]	; (801ab84 <arm_rfft_fast_init_f32+0xc8>)
 801ab30:	4a15      	ldr	r2, [pc, #84]	; (801ab88 <arm_rfft_fast_init_f32+0xcc>)
 801ab32:	4b16      	ldr	r3, [pc, #88]	; (801ab8c <arm_rfft_fast_init_f32+0xd0>)
 801ab34:	e7d8      	b.n	801aae8 <arm_rfft_fast_init_f32+0x2c>
 801ab36:	2430      	movs	r4, #48	; 0x30
 801ab38:	4915      	ldr	r1, [pc, #84]	; (801ab90 <arm_rfft_fast_init_f32+0xd4>)
 801ab3a:	4a16      	ldr	r2, [pc, #88]	; (801ab94 <arm_rfft_fast_init_f32+0xd8>)
 801ab3c:	4b16      	ldr	r3, [pc, #88]	; (801ab98 <arm_rfft_fast_init_f32+0xdc>)
 801ab3e:	e7d3      	b.n	801aae8 <arm_rfft_fast_init_f32+0x2c>
 801ab40:	2414      	movs	r4, #20
 801ab42:	4916      	ldr	r1, [pc, #88]	; (801ab9c <arm_rfft_fast_init_f32+0xe0>)
 801ab44:	4a16      	ldr	r2, [pc, #88]	; (801aba0 <arm_rfft_fast_init_f32+0xe4>)
 801ab46:	4b17      	ldr	r3, [pc, #92]	; (801aba4 <arm_rfft_fast_init_f32+0xe8>)
 801ab48:	e7ce      	b.n	801aae8 <arm_rfft_fast_init_f32+0x2c>
 801ab4a:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 801ab4e:	4916      	ldr	r1, [pc, #88]	; (801aba8 <arm_rfft_fast_init_f32+0xec>)
 801ab50:	4a16      	ldr	r2, [pc, #88]	; (801abac <arm_rfft_fast_init_f32+0xf0>)
 801ab52:	4b17      	ldr	r3, [pc, #92]	; (801abb0 <arm_rfft_fast_init_f32+0xf4>)
 801ab54:	e7c8      	b.n	801aae8 <arm_rfft_fast_init_f32+0x2c>
 801ab56:	24d0      	movs	r4, #208	; 0xd0
 801ab58:	4916      	ldr	r1, [pc, #88]	; (801abb4 <arm_rfft_fast_init_f32+0xf8>)
 801ab5a:	4a17      	ldr	r2, [pc, #92]	; (801abb8 <arm_rfft_fast_init_f32+0xfc>)
 801ab5c:	4b17      	ldr	r3, [pc, #92]	; (801abbc <arm_rfft_fast_init_f32+0x100>)
 801ab5e:	e7c3      	b.n	801aae8 <arm_rfft_fast_init_f32+0x2c>
 801ab60:	08034da4 	.word	0x08034da4
 801ab64:	08025798 	.word	0x08025798
 801ab68:	0802b908 	.word	0x0802b908
 801ab6c:	08029898 	.word	0x08029898
 801ab70:	08036b64 	.word	0x08036b64
 801ab74:	08039054 	.word	0x08039054
 801ab78:	08032288 	.word	0x08032288
 801ab7c:	08030188 	.word	0x08030188
 801ab80:	08029908 	.word	0x08029908
 801ab84:	08038ce4 	.word	0x08038ce4
 801ab88:	0802f908 	.word	0x0802f908
 801ab8c:	08036d64 	.word	0x08036d64
 801ab90:	08033140 	.word	0x08033140
 801ab94:	08032188 	.word	0x08032188
 801ab98:	08029798 	.word	0x08029798
 801ab9c:	08033098 	.word	0x08033098
 801aba0:	08030108 	.word	0x08030108
 801aba4:	080330c0 	.word	0x080330c0
 801aba8:	08037564 	.word	0x08037564
 801abac:	08033da4 	.word	0x08033da4
 801abb0:	080378e4 	.word	0x080378e4
 801abb4:	08039254 	.word	0x08039254
 801abb8:	080339a4 	.word	0x080339a4
 801abbc:	080388e4 	.word	0x080388e4

0801abc0 <arm_rfft_fast_f32>:
 801abc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abc4:	8a06      	ldrh	r6, [r0, #16]
 801abc6:	0876      	lsrs	r6, r6, #1
 801abc8:	4607      	mov	r7, r0
 801abca:	4615      	mov	r5, r2
 801abcc:	8006      	strh	r6, [r0, #0]
 801abce:	460c      	mov	r4, r1
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	d15c      	bne.n	801ac8e <arm_rfft_fast_f32+0xce>
 801abd4:	461a      	mov	r2, r3
 801abd6:	2301      	movs	r3, #1
 801abd8:	f000 fbe4 	bl	801b3a4 <arm_cfft_f32>
 801abdc:	edd4 7a00 	vldr	s15, [r4]
 801abe0:	ed94 7a01 	vldr	s14, [r4, #4]
 801abe4:	883e      	ldrh	r6, [r7, #0]
 801abe6:	6978      	ldr	r0, [r7, #20]
 801abe8:	ee37 7a07 	vadd.f32	s14, s14, s14
 801abec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801abf0:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 801abf4:	ee77 6a87 	vadd.f32	s13, s15, s14
 801abf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801abfc:	3e01      	subs	r6, #1
 801abfe:	ee26 7a83 	vmul.f32	s14, s13, s6
 801ac02:	ee67 7a83 	vmul.f32	s15, s15, s6
 801ac06:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ac0a:	ed85 7a00 	vstr	s14, [r5]
 801ac0e:	edc5 7a01 	vstr	s15, [r5, #4]
 801ac12:	3010      	adds	r0, #16
 801ac14:	f105 0210 	add.w	r2, r5, #16
 801ac18:	3b08      	subs	r3, #8
 801ac1a:	f104 0110 	add.w	r1, r4, #16
 801ac1e:	ed93 7a02 	vldr	s14, [r3, #8]
 801ac22:	ed51 6a02 	vldr	s13, [r1, #-8]
 801ac26:	ed10 6a02 	vldr	s12, [r0, #-8]
 801ac2a:	edd3 3a03 	vldr	s7, [r3, #12]
 801ac2e:	ed11 5a01 	vldr	s10, [r1, #-4]
 801ac32:	ed50 5a01 	vldr	s11, [r0, #-4]
 801ac36:	ee77 7a66 	vsub.f32	s15, s14, s13
 801ac3a:	ee77 4a26 	vadd.f32	s9, s14, s13
 801ac3e:	ee33 4a85 	vadd.f32	s8, s7, s10
 801ac42:	ee66 6a27 	vmul.f32	s13, s12, s15
 801ac46:	ee25 7aa7 	vmul.f32	s14, s11, s15
 801ac4a:	ee35 5a63 	vsub.f32	s10, s10, s7
 801ac4e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801ac52:	ee77 7a05 	vadd.f32	s15, s14, s10
 801ac56:	ee26 6a04 	vmul.f32	s12, s12, s8
 801ac5a:	ee65 5a84 	vmul.f32	s11, s11, s8
 801ac5e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801ac62:	ee36 7aa5 	vadd.f32	s14, s13, s11
 801ac66:	ee67 7a83 	vmul.f32	s15, s15, s6
 801ac6a:	ee27 7a03 	vmul.f32	s14, s14, s6
 801ac6e:	3e01      	subs	r6, #1
 801ac70:	ed02 7a02 	vstr	s14, [r2, #-8]
 801ac74:	ed42 7a01 	vstr	s15, [r2, #-4]
 801ac78:	f1a3 0308 	sub.w	r3, r3, #8
 801ac7c:	f101 0108 	add.w	r1, r1, #8
 801ac80:	f100 0008 	add.w	r0, r0, #8
 801ac84:	f102 0208 	add.w	r2, r2, #8
 801ac88:	d1c9      	bne.n	801ac1e <arm_rfft_fast_f32+0x5e>
 801ac8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac8e:	edd1 7a00 	vldr	s15, [r1]
 801ac92:	edd1 6a01 	vldr	s13, [r1, #4]
 801ac96:	6941      	ldr	r1, [r0, #20]
 801ac98:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ac9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801aca0:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 801aca4:	ee27 7a23 	vmul.f32	s14, s14, s7
 801aca8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801acac:	3e01      	subs	r6, #1
 801acae:	ed82 7a00 	vstr	s14, [r2]
 801acb2:	edc2 7a01 	vstr	s15, [r2, #4]
 801acb6:	00f0      	lsls	r0, r6, #3
 801acb8:	b3ee      	cbz	r6, 801ad36 <arm_rfft_fast_f32+0x176>
 801acba:	3808      	subs	r0, #8
 801acbc:	f101 0e10 	add.w	lr, r1, #16
 801acc0:	4420      	add	r0, r4
 801acc2:	f104 0110 	add.w	r1, r4, #16
 801acc6:	f102 0c10 	add.w	ip, r2, #16
 801acca:	ed90 7a02 	vldr	s14, [r0, #8]
 801acce:	ed51 6a02 	vldr	s13, [r1, #-8]
 801acd2:	ed1e 6a02 	vldr	s12, [lr, #-8]
 801acd6:	ed90 4a03 	vldr	s8, [r0, #12]
 801acda:	ed11 5a01 	vldr	s10, [r1, #-4]
 801acde:	ed5e 5a01 	vldr	s11, [lr, #-4]
 801ace2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 801ace6:	ee74 4a05 	vadd.f32	s9, s8, s10
 801acea:	ee26 3a27 	vmul.f32	s6, s12, s15
 801acee:	ee77 6a26 	vadd.f32	s13, s14, s13
 801acf2:	ee35 5a44 	vsub.f32	s10, s10, s8
 801acf6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 801acfa:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801acfe:	ee77 7a05 	vadd.f32	s15, s14, s10
 801ad02:	ee26 6a24 	vmul.f32	s12, s12, s9
 801ad06:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801ad0a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801ad0e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 801ad12:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801ad16:	ee27 7a23 	vmul.f32	s14, s14, s7
 801ad1a:	3e01      	subs	r6, #1
 801ad1c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 801ad20:	ed4c 7a01 	vstr	s15, [ip, #-4]
 801ad24:	f1a0 0008 	sub.w	r0, r0, #8
 801ad28:	f101 0108 	add.w	r1, r1, #8
 801ad2c:	f10e 0e08 	add.w	lr, lr, #8
 801ad30:	f10c 0c08 	add.w	ip, ip, #8
 801ad34:	d1c9      	bne.n	801acca <arm_rfft_fast_f32+0x10a>
 801ad36:	461a      	mov	r2, r3
 801ad38:	4629      	mov	r1, r5
 801ad3a:	4638      	mov	r0, r7
 801ad3c:	2301      	movs	r3, #1
 801ad3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad42:	f000 bb2f 	b.w	801b3a4 <arm_cfft_f32>
 801ad46:	bf00      	nop

0801ad48 <arm_cfft_radix8by2_f32>:
 801ad48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad4c:	ed2d 8b08 	vpush	{d8-d11}
 801ad50:	4607      	mov	r7, r0
 801ad52:	4608      	mov	r0, r1
 801ad54:	f8b7 e000 	ldrh.w	lr, [r7]
 801ad58:	687a      	ldr	r2, [r7, #4]
 801ad5a:	ea4f 015e 	mov.w	r1, lr, lsr #1
 801ad5e:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 801ad62:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 801ad66:	f000 80b0 	beq.w	801aeca <arm_cfft_radix8by2_f32+0x182>
 801ad6a:	008b      	lsls	r3, r1, #2
 801ad6c:	3310      	adds	r3, #16
 801ad6e:	18c6      	adds	r6, r0, r3
 801ad70:	3210      	adds	r2, #16
 801ad72:	4443      	add	r3, r8
 801ad74:	f100 0510 	add.w	r5, r0, #16
 801ad78:	f108 0410 	add.w	r4, r8, #16
 801ad7c:	ed54 1a04 	vldr	s3, [r4, #-16]
 801ad80:	ed54 6a03 	vldr	s13, [r4, #-12]
 801ad84:	ed13 4a04 	vldr	s8, [r3, #-16]
 801ad88:	ed53 3a03 	vldr	s7, [r3, #-12]
 801ad8c:	ed53 5a02 	vldr	s11, [r3, #-8]
 801ad90:	ed13 5a01 	vldr	s10, [r3, #-4]
 801ad94:	ed14 0a02 	vldr	s0, [r4, #-8]
 801ad98:	ed54 7a01 	vldr	s15, [r4, #-4]
 801ad9c:	ed16 2a04 	vldr	s4, [r6, #-16]
 801ada0:	ed56 2a03 	vldr	s5, [r6, #-12]
 801ada4:	ed15 6a03 	vldr	s12, [r5, #-12]
 801ada8:	ed15 7a01 	vldr	s14, [r5, #-4]
 801adac:	ed15 3a04 	vldr	s6, [r5, #-16]
 801adb0:	ed56 0a02 	vldr	s1, [r6, #-8]
 801adb4:	ed16 1a01 	vldr	s2, [r6, #-4]
 801adb8:	ed55 4a02 	vldr	s9, [r5, #-8]
 801adbc:	ee73 ba21 	vadd.f32	s23, s6, s3
 801adc0:	ee36 ba26 	vadd.f32	s22, s12, s13
 801adc4:	ee37 aa27 	vadd.f32	s20, s14, s15
 801adc8:	ee72 9a04 	vadd.f32	s19, s4, s8
 801adcc:	ee32 9aa3 	vadd.f32	s18, s5, s7
 801add0:	ee31 8a05 	vadd.f32	s16, s2, s10
 801add4:	ee74 aa80 	vadd.f32	s21, s9, s0
 801add8:	ee70 8aa5 	vadd.f32	s17, s1, s11
 801addc:	ed45 ba04 	vstr	s23, [r5, #-16]
 801ade0:	ed05 ba03 	vstr	s22, [r5, #-12]
 801ade4:	ed45 aa02 	vstr	s21, [r5, #-8]
 801ade8:	ed05 aa01 	vstr	s20, [r5, #-4]
 801adec:	ed06 8a01 	vstr	s16, [r6, #-4]
 801adf0:	ed46 9a04 	vstr	s19, [r6, #-16]
 801adf4:	ed06 9a03 	vstr	s18, [r6, #-12]
 801adf8:	ed46 8a02 	vstr	s17, [r6, #-8]
 801adfc:	ee76 6a66 	vsub.f32	s13, s12, s13
 801ae00:	ee73 3ae2 	vsub.f32	s7, s7, s5
 801ae04:	ed12 6a03 	vldr	s12, [r2, #-12]
 801ae08:	ed52 2a04 	vldr	s5, [r2, #-16]
 801ae0c:	ee33 3a61 	vsub.f32	s6, s6, s3
 801ae10:	ee34 4a42 	vsub.f32	s8, s8, s4
 801ae14:	ee26 8a86 	vmul.f32	s16, s13, s12
 801ae18:	ee24 2a06 	vmul.f32	s4, s8, s12
 801ae1c:	ee63 1a22 	vmul.f32	s3, s6, s5
 801ae20:	ee24 4a22 	vmul.f32	s8, s8, s5
 801ae24:	ee23 3a06 	vmul.f32	s6, s6, s12
 801ae28:	ee66 6aa2 	vmul.f32	s13, s13, s5
 801ae2c:	ee23 6a86 	vmul.f32	s12, s7, s12
 801ae30:	ee63 3aa2 	vmul.f32	s7, s7, s5
 801ae34:	ee36 6a04 	vadd.f32	s12, s12, s8
 801ae38:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801ae3c:	ee72 3a63 	vsub.f32	s7, s4, s7
 801ae40:	ee71 2a88 	vadd.f32	s5, s3, s16
 801ae44:	ed44 6a03 	vstr	s13, [r4, #-12]
 801ae48:	ed44 2a04 	vstr	s5, [r4, #-16]
 801ae4c:	ed43 3a04 	vstr	s7, [r3, #-16]
 801ae50:	ed03 6a03 	vstr	s12, [r3, #-12]
 801ae54:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ae58:	ee75 6ae0 	vsub.f32	s13, s11, s1
 801ae5c:	ed12 7a01 	vldr	s14, [r2, #-4]
 801ae60:	ed52 5a02 	vldr	s11, [r2, #-8]
 801ae64:	ee35 6a41 	vsub.f32	s12, s10, s2
 801ae68:	ee74 4ac0 	vsub.f32	s9, s9, s0
 801ae6c:	ee67 3a87 	vmul.f32	s7, s15, s14
 801ae70:	ee26 5a87 	vmul.f32	s10, s13, s14
 801ae74:	ee24 4aa5 	vmul.f32	s8, s9, s11
 801ae78:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801ae7c:	ee64 4a87 	vmul.f32	s9, s9, s14
 801ae80:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801ae84:	ee26 7a07 	vmul.f32	s14, s12, s14
 801ae88:	ee26 6a25 	vmul.f32	s12, s12, s11
 801ae8c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 801ae90:	ee74 5a23 	vadd.f32	s11, s8, s7
 801ae94:	ee35 6a46 	vsub.f32	s12, s10, s12
 801ae98:	ee37 7a26 	vadd.f32	s14, s14, s13
 801ae9c:	f1be 0e01 	subs.w	lr, lr, #1
 801aea0:	ed44 5a02 	vstr	s11, [r4, #-8]
 801aea4:	f105 0510 	add.w	r5, r5, #16
 801aea8:	ed44 7a01 	vstr	s15, [r4, #-4]
 801aeac:	f106 0610 	add.w	r6, r6, #16
 801aeb0:	ed03 6a02 	vstr	s12, [r3, #-8]
 801aeb4:	ed03 7a01 	vstr	s14, [r3, #-4]
 801aeb8:	f102 0210 	add.w	r2, r2, #16
 801aebc:	f104 0410 	add.w	r4, r4, #16
 801aec0:	f103 0310 	add.w	r3, r3, #16
 801aec4:	f47f af5a 	bne.w	801ad7c <arm_cfft_radix8by2_f32+0x34>
 801aec8:	687a      	ldr	r2, [r7, #4]
 801aeca:	b28c      	uxth	r4, r1
 801aecc:	4621      	mov	r1, r4
 801aece:	2302      	movs	r3, #2
 801aed0:	f000 fc50 	bl	801b774 <arm_radix8_butterfly_f32>
 801aed4:	ecbd 8b08 	vpop	{d8-d11}
 801aed8:	4621      	mov	r1, r4
 801aeda:	687a      	ldr	r2, [r7, #4]
 801aedc:	4640      	mov	r0, r8
 801aede:	2302      	movs	r3, #2
 801aee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aee4:	f000 bc46 	b.w	801b774 <arm_radix8_butterfly_f32>

0801aee8 <arm_cfft_radix8by4_f32>:
 801aee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aeec:	ed2d 8b0a 	vpush	{d8-d12}
 801aef0:	8802      	ldrh	r2, [r0, #0]
 801aef2:	ed91 6a00 	vldr	s12, [r1]
 801aef6:	b08f      	sub	sp, #60	; 0x3c
 801aef8:	460f      	mov	r7, r1
 801aefa:	0852      	lsrs	r2, r2, #1
 801aefc:	6841      	ldr	r1, [r0, #4]
 801aefe:	900c      	str	r0, [sp, #48]	; 0x30
 801af00:	0093      	lsls	r3, r2, #2
 801af02:	4638      	mov	r0, r7
 801af04:	4418      	add	r0, r3
 801af06:	4606      	mov	r6, r0
 801af08:	9009      	str	r0, [sp, #36]	; 0x24
 801af0a:	4418      	add	r0, r3
 801af0c:	edd0 6a00 	vldr	s13, [r0]
 801af10:	ed96 4a00 	vldr	s8, [r6]
 801af14:	edd6 2a01 	vldr	s5, [r6, #4]
 801af18:	edd0 7a01 	vldr	s15, [r0, #4]
 801af1c:	900a      	str	r0, [sp, #40]	; 0x28
 801af1e:	ee76 5a26 	vadd.f32	s11, s12, s13
 801af22:	4604      	mov	r4, r0
 801af24:	4625      	mov	r5, r4
 801af26:	441c      	add	r4, r3
 801af28:	edd4 4a00 	vldr	s9, [r4]
 801af2c:	ed97 7a01 	vldr	s14, [r7, #4]
 801af30:	ed94 3a01 	vldr	s6, [r4, #4]
 801af34:	9401      	str	r4, [sp, #4]
 801af36:	ee35 5a84 	vadd.f32	s10, s11, s8
 801af3a:	4630      	mov	r0, r6
 801af3c:	ee35 5a24 	vadd.f32	s10, s10, s9
 801af40:	463e      	mov	r6, r7
 801af42:	ee15 ea10 	vmov	lr, s10
 801af46:	ee76 6a66 	vsub.f32	s13, s12, s13
 801af4a:	f846 eb08 	str.w	lr, [r6], #8
 801af4e:	ee37 6a27 	vadd.f32	s12, s14, s15
 801af52:	ed90 5a01 	vldr	s10, [r0, #4]
 801af56:	9605      	str	r6, [sp, #20]
 801af58:	ee77 7a67 	vsub.f32	s15, s14, s15
 801af5c:	9e01      	ldr	r6, [sp, #4]
 801af5e:	9707      	str	r7, [sp, #28]
 801af60:	ee76 3aa2 	vadd.f32	s7, s13, s5
 801af64:	ed96 2a01 	vldr	s4, [r6, #4]
 801af68:	ee36 7a05 	vadd.f32	s14, s12, s10
 801af6c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 801af70:	ee37 5ac4 	vsub.f32	s10, s15, s8
 801af74:	ee77 7a84 	vadd.f32	s15, s15, s8
 801af78:	ee33 4ac3 	vsub.f32	s8, s7, s6
 801af7c:	4604      	mov	r4, r0
 801af7e:	46a3      	mov	fp, r4
 801af80:	ee37 7a02 	vadd.f32	s14, s14, s4
 801af84:	ee35 5a24 	vadd.f32	s10, s10, s9
 801af88:	ee14 8a10 	vmov	r8, s8
 801af8c:	46a4      	mov	ip, r4
 801af8e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 801af92:	ed87 7a01 	vstr	s14, [r7, #4]
 801af96:	f84b 8b08 	str.w	r8, [fp], #8
 801af9a:	f1ac 0704 	sub.w	r7, ip, #4
 801af9e:	ed8c 5a01 	vstr	s10, [ip, #4]
 801afa2:	f101 0c08 	add.w	ip, r1, #8
 801afa6:	462c      	mov	r4, r5
 801afa8:	f8cd c010 	str.w	ip, [sp, #16]
 801afac:	ee15 ca90 	vmov	ip, s11
 801afb0:	ee36 6a62 	vsub.f32	s12, s12, s5
 801afb4:	f844 cb08 	str.w	ip, [r4], #8
 801afb8:	ee76 6ae2 	vsub.f32	s13, s13, s5
 801afbc:	ee36 6a43 	vsub.f32	s12, s12, s6
 801afc0:	9406      	str	r4, [sp, #24]
 801afc2:	ee76 6a83 	vadd.f32	s13, s13, s6
 801afc6:	f101 0410 	add.w	r4, r1, #16
 801afca:	0852      	lsrs	r2, r2, #1
 801afcc:	9402      	str	r4, [sp, #8]
 801afce:	ed85 6a01 	vstr	s12, [r5, #4]
 801afd2:	462c      	mov	r4, r5
 801afd4:	f101 0518 	add.w	r5, r1, #24
 801afd8:	920b      	str	r2, [sp, #44]	; 0x2c
 801afda:	46b2      	mov	sl, r6
 801afdc:	9503      	str	r5, [sp, #12]
 801afde:	ee77 7ae4 	vsub.f32	s15, s15, s9
 801afe2:	3a02      	subs	r2, #2
 801afe4:	ee16 5a90 	vmov	r5, s13
 801afe8:	46b6      	mov	lr, r6
 801afea:	4630      	mov	r0, r6
 801afec:	0852      	lsrs	r2, r2, #1
 801afee:	f84a 5b08 	str.w	r5, [sl], #8
 801aff2:	f1a0 0604 	sub.w	r6, r0, #4
 801aff6:	edce 7a01 	vstr	s15, [lr, #4]
 801affa:	9208      	str	r2, [sp, #32]
 801affc:	f000 8130 	beq.w	801b260 <arm_cfft_radix8by4_f32+0x378>
 801b000:	4691      	mov	r9, r2
 801b002:	9a07      	ldr	r2, [sp, #28]
 801b004:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801b008:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801b00c:	3b08      	subs	r3, #8
 801b00e:	f102 0510 	add.w	r5, r2, #16
 801b012:	f101 0c20 	add.w	ip, r1, #32
 801b016:	f1a4 020c 	sub.w	r2, r4, #12
 801b01a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 801b01e:	4433      	add	r3, r6
 801b020:	3410      	adds	r4, #16
 801b022:	4650      	mov	r0, sl
 801b024:	4659      	mov	r1, fp
 801b026:	ed55 3a02 	vldr	s7, [r5, #-8]
 801b02a:	ed14 5a02 	vldr	s10, [r4, #-8]
 801b02e:	ed91 7a00 	vldr	s14, [r1]
 801b032:	edd0 7a00 	vldr	s15, [r0]
 801b036:	ed54 5a01 	vldr	s11, [r4, #-4]
 801b03a:	ed15 4a01 	vldr	s8, [r5, #-4]
 801b03e:	edd0 6a01 	vldr	s13, [r0, #4]
 801b042:	ed91 6a01 	vldr	s12, [r1, #4]
 801b046:	ee33 8a85 	vadd.f32	s16, s7, s10
 801b04a:	ee34 0a25 	vadd.f32	s0, s8, s11
 801b04e:	ee78 4a07 	vadd.f32	s9, s16, s14
 801b052:	ee74 5a65 	vsub.f32	s11, s8, s11
 801b056:	ee74 4aa7 	vadd.f32	s9, s9, s15
 801b05a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 801b05e:	ed45 4a02 	vstr	s9, [r5, #-8]
 801b062:	edd1 4a01 	vldr	s9, [r1, #4]
 801b066:	ed90 4a01 	vldr	s8, [r0, #4]
 801b06a:	ee70 4a24 	vadd.f32	s9, s0, s9
 801b06e:	ee75 aa06 	vadd.f32	s21, s10, s12
 801b072:	ee74 4a84 	vadd.f32	s9, s9, s8
 801b076:	ee35 aac7 	vsub.f32	s20, s11, s14
 801b07a:	ed45 4a01 	vstr	s9, [r5, #-4]
 801b07e:	edd6 1a00 	vldr	s3, [r6]
 801b082:	edd7 0a00 	vldr	s1, [r7]
 801b086:	ed92 4a02 	vldr	s8, [r2, #8]
 801b08a:	edd3 3a02 	vldr	s7, [r3, #8]
 801b08e:	ed93 2a01 	vldr	s4, [r3, #4]
 801b092:	ed16 1a01 	vldr	s2, [r6, #-4]
 801b096:	edd2 2a01 	vldr	s5, [r2, #4]
 801b09a:	ed57 9a01 	vldr	s19, [r7, #-4]
 801b09e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 801b0a2:	ee39 3a81 	vadd.f32	s6, s19, s2
 801b0a6:	ee74 8a84 	vadd.f32	s17, s9, s8
 801b0aa:	ee70 1ae1 	vsub.f32	s3, s1, s3
 801b0ae:	ee78 8aa3 	vadd.f32	s17, s17, s7
 801b0b2:	ee7a aae6 	vsub.f32	s21, s21, s13
 801b0b6:	ee18 aa90 	vmov	sl, s17
 801b0ba:	f847 a908 	str.w	sl, [r7], #-8
 801b0be:	edd2 8a01 	vldr	s17, [r2, #4]
 801b0c2:	ed93 9a01 	vldr	s18, [r3, #4]
 801b0c6:	ee73 8a28 	vadd.f32	s17, s6, s17
 801b0ca:	ee3a aa27 	vadd.f32	s20, s20, s15
 801b0ce:	ee78 8a89 	vadd.f32	s17, s17, s18
 801b0d2:	ee74 0a63 	vsub.f32	s1, s8, s7
 801b0d6:	edc7 8a01 	vstr	s17, [r7, #4]
 801b0da:	ed18 ba02 	vldr	s22, [r8, #-8]
 801b0de:	ed58 8a01 	vldr	s17, [r8, #-4]
 801b0e2:	ee39 1ac1 	vsub.f32	s2, s19, s2
 801b0e6:	ee6a ba28 	vmul.f32	s23, s20, s17
 801b0ea:	ee2a ca8b 	vmul.f32	s24, s21, s22
 801b0ee:	ee71 9ae2 	vsub.f32	s19, s3, s5
 801b0f2:	ee31 9a20 	vadd.f32	s18, s2, s1
 801b0f6:	ee79 9a82 	vadd.f32	s19, s19, s4
 801b0fa:	ee3c ca2b 	vadd.f32	s24, s24, s23
 801b0fe:	ee6a aaa8 	vmul.f32	s21, s21, s17
 801b102:	ee69 baa8 	vmul.f32	s23, s19, s17
 801b106:	ee2a aa0b 	vmul.f32	s20, s20, s22
 801b10a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 801b10e:	ee69 8a28 	vmul.f32	s17, s18, s17
 801b112:	ee29 ba0b 	vmul.f32	s22, s18, s22
 801b116:	ee1c aa10 	vmov	sl, s24
 801b11a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 801b11e:	f841 ab08 	str.w	sl, [r1], #8
 801b122:	ee3a aa6a 	vsub.f32	s20, s20, s21
 801b126:	ee3b bacb 	vsub.f32	s22, s23, s22
 801b12a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 801b12e:	ee33 3a62 	vsub.f32	s6, s6, s5
 801b132:	ed01 aa01 	vstr	s20, [r1, #-4]
 801b136:	edc2 8a01 	vstr	s17, [r2, #4]
 801b13a:	ed82 ba02 	vstr	s22, [r2, #8]
 801b13e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 801b142:	ee74 3a63 	vsub.f32	s7, s8, s7
 801b146:	ee38 8a47 	vsub.f32	s16, s16, s14
 801b14a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 801b14e:	ee30 0a46 	vsub.f32	s0, s0, s12
 801b152:	ee33 3a42 	vsub.f32	s6, s6, s4
 801b156:	ee38 8a67 	vsub.f32	s16, s16, s15
 801b15a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801b15e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 801b162:	ee63 8a04 	vmul.f32	s17, s6, s8
 801b166:	ee28 aa24 	vmul.f32	s20, s16, s9
 801b16a:	ee60 9a04 	vmul.f32	s19, s0, s8
 801b16e:	ee28 8a04 	vmul.f32	s16, s16, s8
 801b172:	ee20 0a24 	vmul.f32	s0, s0, s9
 801b176:	ee63 3a84 	vmul.f32	s7, s7, s8
 801b17a:	ee39 4a68 	vsub.f32	s8, s18, s17
 801b17e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 801b182:	ee14 aa10 	vmov	sl, s8
 801b186:	ee30 0a48 	vsub.f32	s0, s0, s16
 801b18a:	ee63 4a24 	vmul.f32	s9, s6, s9
 801b18e:	ed44 9a02 	vstr	s19, [r4, #-8]
 801b192:	ee73 3ae4 	vsub.f32	s7, s7, s9
 801b196:	ed04 0a01 	vstr	s0, [r4, #-4]
 801b19a:	f846 a908 	str.w	sl, [r6], #-8
 801b19e:	ee35 6a46 	vsub.f32	s12, s10, s12
 801b1a2:	ee35 7a87 	vadd.f32	s14, s11, s14
 801b1a6:	edc6 3a01 	vstr	s7, [r6, #4]
 801b1aa:	ee76 6a26 	vadd.f32	s13, s12, s13
 801b1ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b1b2:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 801b1b6:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 801b1ba:	ee67 5a86 	vmul.f32	s11, s15, s12
 801b1be:	ee26 5a87 	vmul.f32	s10, s13, s14
 801b1c2:	ee72 2a62 	vsub.f32	s5, s4, s5
 801b1c6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 801b1ca:	ee72 2ae1 	vsub.f32	s5, s5, s3
 801b1ce:	ee75 5a25 	vadd.f32	s11, s10, s11
 801b1d2:	ee62 0a86 	vmul.f32	s1, s5, s12
 801b1d6:	ee66 6a86 	vmul.f32	s13, s13, s12
 801b1da:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b1de:	ee21 6a06 	vmul.f32	s12, s2, s12
 801b1e2:	ee62 2a87 	vmul.f32	s5, s5, s14
 801b1e6:	ee21 1a07 	vmul.f32	s2, s2, s14
 801b1ea:	ee15 aa90 	vmov	sl, s11
 801b1ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b1f2:	f840 ab08 	str.w	sl, [r0], #8
 801b1f6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 801b1fa:	ee76 2a22 	vadd.f32	s5, s12, s5
 801b1fe:	f1b9 0901 	subs.w	r9, r9, #1
 801b202:	ed40 7a01 	vstr	s15, [r0, #-4]
 801b206:	f105 0508 	add.w	r5, r5, #8
 801b20a:	ed83 1a02 	vstr	s2, [r3, #8]
 801b20e:	edc3 2a01 	vstr	s5, [r3, #4]
 801b212:	f108 0808 	add.w	r8, r8, #8
 801b216:	f1a2 0208 	sub.w	r2, r2, #8
 801b21a:	f10c 0c10 	add.w	ip, ip, #16
 801b21e:	f104 0408 	add.w	r4, r4, #8
 801b222:	f10e 0e18 	add.w	lr, lr, #24
 801b226:	f1a3 0308 	sub.w	r3, r3, #8
 801b22a:	f47f aefc 	bne.w	801b026 <arm_cfft_radix8by4_f32+0x13e>
 801b22e:	9908      	ldr	r1, [sp, #32]
 801b230:	9802      	ldr	r0, [sp, #8]
 801b232:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 801b236:	00cb      	lsls	r3, r1, #3
 801b238:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 801b23c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 801b240:	9102      	str	r1, [sp, #8]
 801b242:	9905      	ldr	r1, [sp, #20]
 801b244:	4419      	add	r1, r3
 801b246:	9105      	str	r1, [sp, #20]
 801b248:	9904      	ldr	r1, [sp, #16]
 801b24a:	4419      	add	r1, r3
 801b24c:	9104      	str	r1, [sp, #16]
 801b24e:	9906      	ldr	r1, [sp, #24]
 801b250:	449b      	add	fp, r3
 801b252:	4419      	add	r1, r3
 801b254:	449a      	add	sl, r3
 801b256:	9b03      	ldr	r3, [sp, #12]
 801b258:	9106      	str	r1, [sp, #24]
 801b25a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b25e:	9303      	str	r3, [sp, #12]
 801b260:	9a05      	ldr	r2, [sp, #20]
 801b262:	9806      	ldr	r0, [sp, #24]
 801b264:	ed92 4a00 	vldr	s8, [r2]
 801b268:	ed90 7a00 	vldr	s14, [r0]
 801b26c:	ed9b 3a00 	vldr	s6, [fp]
 801b270:	edda 3a00 	vldr	s7, [sl]
 801b274:	edd2 4a01 	vldr	s9, [r2, #4]
 801b278:	edd0 6a01 	vldr	s13, [r0, #4]
 801b27c:	ed9a 2a01 	vldr	s4, [sl, #4]
 801b280:	eddb 7a01 	vldr	s15, [fp, #4]
 801b284:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801b288:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b28a:	ee34 6a07 	vadd.f32	s12, s8, s14
 801b28e:	ee74 5aa6 	vadd.f32	s11, s9, s13
 801b292:	ee36 5a03 	vadd.f32	s10, s12, s6
 801b296:	ee74 6ae6 	vsub.f32	s13, s9, s13
 801b29a:	ee35 5a23 	vadd.f32	s10, s10, s7
 801b29e:	ee34 7a47 	vsub.f32	s14, s8, s14
 801b2a2:	ed82 5a00 	vstr	s10, [r2]
 801b2a6:	ed9b 5a01 	vldr	s10, [fp, #4]
 801b2aa:	edda 4a01 	vldr	s9, [sl, #4]
 801b2ae:	ee35 5a85 	vadd.f32	s10, s11, s10
 801b2b2:	ee37 4a27 	vadd.f32	s8, s14, s15
 801b2b6:	ee35 5a24 	vadd.f32	s10, s10, s9
 801b2ba:	ee76 4ac3 	vsub.f32	s9, s13, s6
 801b2be:	ed82 5a01 	vstr	s10, [r2, #4]
 801b2c2:	9a04      	ldr	r2, [sp, #16]
 801b2c4:	ee34 5aa3 	vadd.f32	s10, s9, s7
 801b2c8:	edd2 1a00 	vldr	s3, [r2]
 801b2cc:	edd2 2a01 	vldr	s5, [r2, #4]
 801b2d0:	9a02      	ldr	r2, [sp, #8]
 801b2d2:	ee34 4a42 	vsub.f32	s8, s8, s4
 801b2d6:	ee36 6a43 	vsub.f32	s12, s12, s6
 801b2da:	ee64 4a21 	vmul.f32	s9, s8, s3
 801b2de:	ee24 4a22 	vmul.f32	s8, s8, s5
 801b2e2:	ee65 2a22 	vmul.f32	s5, s10, s5
 801b2e6:	ee25 5a21 	vmul.f32	s10, s10, s3
 801b2ea:	ee74 2aa2 	vadd.f32	s5, s9, s5
 801b2ee:	ee35 5a44 	vsub.f32	s10, s10, s8
 801b2f2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801b2f6:	edcb 2a00 	vstr	s5, [fp]
 801b2fa:	ed8b 5a01 	vstr	s10, [fp, #4]
 801b2fe:	ed92 4a01 	vldr	s8, [r2, #4]
 801b302:	ed92 5a00 	vldr	s10, [r2]
 801b306:	9a03      	ldr	r2, [sp, #12]
 801b308:	ee36 6a63 	vsub.f32	s12, s12, s7
 801b30c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 801b310:	ee66 4a05 	vmul.f32	s9, s12, s10
 801b314:	ee25 5a85 	vmul.f32	s10, s11, s10
 801b318:	ee26 6a04 	vmul.f32	s12, s12, s8
 801b31c:	ee65 5a84 	vmul.f32	s11, s11, s8
 801b320:	ee35 6a46 	vsub.f32	s12, s10, s12
 801b324:	ee74 5aa5 	vadd.f32	s11, s9, s11
 801b328:	ee76 6a83 	vadd.f32	s13, s13, s6
 801b32c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b330:	ed80 6a01 	vstr	s12, [r0, #4]
 801b334:	edc0 5a00 	vstr	s11, [r0]
 801b338:	edd2 5a01 	vldr	s11, [r2, #4]
 801b33c:	9807      	ldr	r0, [sp, #28]
 801b33e:	ee77 7a02 	vadd.f32	s15, s14, s4
 801b342:	ee36 7ae3 	vsub.f32	s14, s13, s7
 801b346:	edd2 6a00 	vldr	s13, [r2]
 801b34a:	ee27 6aa6 	vmul.f32	s12, s15, s13
 801b34e:	ee67 6a26 	vmul.f32	s13, s14, s13
 801b352:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b356:	ee27 7a25 	vmul.f32	s14, s14, s11
 801b35a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b35e:	ee36 7a07 	vadd.f32	s14, s12, s14
 801b362:	edca 7a01 	vstr	s15, [sl, #4]
 801b366:	ed8a 7a00 	vstr	s14, [sl]
 801b36a:	6872      	ldr	r2, [r6, #4]
 801b36c:	4621      	mov	r1, r4
 801b36e:	2304      	movs	r3, #4
 801b370:	f000 fa00 	bl	801b774 <arm_radix8_butterfly_f32>
 801b374:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b376:	6872      	ldr	r2, [r6, #4]
 801b378:	4621      	mov	r1, r4
 801b37a:	2304      	movs	r3, #4
 801b37c:	f000 f9fa 	bl	801b774 <arm_radix8_butterfly_f32>
 801b380:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b382:	6872      	ldr	r2, [r6, #4]
 801b384:	4621      	mov	r1, r4
 801b386:	2304      	movs	r3, #4
 801b388:	f000 f9f4 	bl	801b774 <arm_radix8_butterfly_f32>
 801b38c:	6872      	ldr	r2, [r6, #4]
 801b38e:	9801      	ldr	r0, [sp, #4]
 801b390:	4621      	mov	r1, r4
 801b392:	2304      	movs	r3, #4
 801b394:	b00f      	add	sp, #60	; 0x3c
 801b396:	ecbd 8b0a 	vpop	{d8-d12}
 801b39a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b39e:	f000 b9e9 	b.w	801b774 <arm_radix8_butterfly_f32>
 801b3a2:	bf00      	nop

0801b3a4 <arm_cfft_f32>:
 801b3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3a8:	2a01      	cmp	r2, #1
 801b3aa:	4606      	mov	r6, r0
 801b3ac:	4617      	mov	r7, r2
 801b3ae:	460c      	mov	r4, r1
 801b3b0:	4698      	mov	r8, r3
 801b3b2:	8805      	ldrh	r5, [r0, #0]
 801b3b4:	d054      	beq.n	801b460 <arm_cfft_f32+0xbc>
 801b3b6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801b3ba:	d04c      	beq.n	801b456 <arm_cfft_f32+0xb2>
 801b3bc:	d916      	bls.n	801b3ec <arm_cfft_f32+0x48>
 801b3be:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801b3c2:	d01a      	beq.n	801b3fa <arm_cfft_f32+0x56>
 801b3c4:	d95c      	bls.n	801b480 <arm_cfft_f32+0xdc>
 801b3c6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801b3ca:	d044      	beq.n	801b456 <arm_cfft_f32+0xb2>
 801b3cc:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 801b3d0:	d105      	bne.n	801b3de <arm_cfft_f32+0x3a>
 801b3d2:	2301      	movs	r3, #1
 801b3d4:	6872      	ldr	r2, [r6, #4]
 801b3d6:	4629      	mov	r1, r5
 801b3d8:	4620      	mov	r0, r4
 801b3da:	f000 f9cb 	bl	801b774 <arm_radix8_butterfly_f32>
 801b3de:	f1b8 0f00 	cmp.w	r8, #0
 801b3e2:	d111      	bne.n	801b408 <arm_cfft_f32+0x64>
 801b3e4:	2f01      	cmp	r7, #1
 801b3e6:	d016      	beq.n	801b416 <arm_cfft_f32+0x72>
 801b3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3ec:	2d20      	cmp	r5, #32
 801b3ee:	d032      	beq.n	801b456 <arm_cfft_f32+0xb2>
 801b3f0:	d94a      	bls.n	801b488 <arm_cfft_f32+0xe4>
 801b3f2:	2d40      	cmp	r5, #64	; 0x40
 801b3f4:	d0ed      	beq.n	801b3d2 <arm_cfft_f32+0x2e>
 801b3f6:	2d80      	cmp	r5, #128	; 0x80
 801b3f8:	d1f1      	bne.n	801b3de <arm_cfft_f32+0x3a>
 801b3fa:	4621      	mov	r1, r4
 801b3fc:	4630      	mov	r0, r6
 801b3fe:	f7ff fca3 	bl	801ad48 <arm_cfft_radix8by2_f32>
 801b402:	f1b8 0f00 	cmp.w	r8, #0
 801b406:	d0ed      	beq.n	801b3e4 <arm_cfft_f32+0x40>
 801b408:	68b2      	ldr	r2, [r6, #8]
 801b40a:	89b1      	ldrh	r1, [r6, #12]
 801b40c:	4620      	mov	r0, r4
 801b40e:	f7e8 fef7 	bl	8004200 <arm_bitreversal_32>
 801b412:	2f01      	cmp	r7, #1
 801b414:	d1e8      	bne.n	801b3e8 <arm_cfft_f32+0x44>
 801b416:	ee07 5a90 	vmov	s15, r5
 801b41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b41e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b422:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b426:	2d00      	cmp	r5, #0
 801b428:	d0de      	beq.n	801b3e8 <arm_cfft_f32+0x44>
 801b42a:	f104 0108 	add.w	r1, r4, #8
 801b42e:	2300      	movs	r3, #0
 801b430:	3301      	adds	r3, #1
 801b432:	429d      	cmp	r5, r3
 801b434:	f101 0108 	add.w	r1, r1, #8
 801b438:	ed11 7a04 	vldr	s14, [r1, #-16]
 801b43c:	ed51 7a03 	vldr	s15, [r1, #-12]
 801b440:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b444:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801b448:	ed01 7a04 	vstr	s14, [r1, #-16]
 801b44c:	ed41 7a03 	vstr	s15, [r1, #-12]
 801b450:	d1ee      	bne.n	801b430 <arm_cfft_f32+0x8c>
 801b452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b456:	4621      	mov	r1, r4
 801b458:	4630      	mov	r0, r6
 801b45a:	f7ff fd45 	bl	801aee8 <arm_cfft_radix8by4_f32>
 801b45e:	e7be      	b.n	801b3de <arm_cfft_f32+0x3a>
 801b460:	b1ad      	cbz	r5, 801b48e <arm_cfft_f32+0xea>
 801b462:	f101 030c 	add.w	r3, r1, #12
 801b466:	2200      	movs	r2, #0
 801b468:	ed53 7a02 	vldr	s15, [r3, #-8]
 801b46c:	3201      	adds	r2, #1
 801b46e:	eef1 7a67 	vneg.f32	s15, s15
 801b472:	4295      	cmp	r5, r2
 801b474:	ed43 7a02 	vstr	s15, [r3, #-8]
 801b478:	f103 0308 	add.w	r3, r3, #8
 801b47c:	d1f4      	bne.n	801b468 <arm_cfft_f32+0xc4>
 801b47e:	e79a      	b.n	801b3b6 <arm_cfft_f32+0x12>
 801b480:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 801b484:	d0a5      	beq.n	801b3d2 <arm_cfft_f32+0x2e>
 801b486:	e7aa      	b.n	801b3de <arm_cfft_f32+0x3a>
 801b488:	2d10      	cmp	r5, #16
 801b48a:	d0b6      	beq.n	801b3fa <arm_cfft_f32+0x56>
 801b48c:	e7a7      	b.n	801b3de <arm_cfft_f32+0x3a>
 801b48e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801b492:	d894      	bhi.n	801b3be <arm_cfft_f32+0x1a>
 801b494:	e7aa      	b.n	801b3ec <arm_cfft_f32+0x48>
 801b496:	bf00      	nop

0801b498 <arm_cmplx_mag_f32>:
 801b498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b49c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 801b4a0:	b084      	sub	sp, #16
 801b4a2:	d07f      	beq.n	801b5a4 <arm_cmplx_mag_f32+0x10c>
 801b4a4:	2700      	movs	r7, #0
 801b4a6:	f100 0420 	add.w	r4, r0, #32
 801b4aa:	f101 0510 	add.w	r5, r1, #16
 801b4ae:	4646      	mov	r6, r8
 801b4b0:	e05a      	b.n	801b568 <arm_cmplx_mag_f32+0xd0>
 801b4b2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801b4b6:	eeb4 0a40 	vcmp.f32	s0, s0
 801b4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4be:	f040 80a4 	bne.w	801b60a <arm_cmplx_mag_f32+0x172>
 801b4c2:	ed05 0a04 	vstr	s0, [r5, #-16]
 801b4c6:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 801b4ca:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 801b4ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b4d2:	ee20 0a00 	vmul.f32	s0, s0, s0
 801b4d6:	ee77 7a80 	vadd.f32	s15, s15, s0
 801b4da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4e2:	f2c0 808f 	blt.w	801b604 <arm_cmplx_mag_f32+0x16c>
 801b4e6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801b4ea:	eeb4 0a40 	vcmp.f32	s0, s0
 801b4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4f2:	f040 80af 	bne.w	801b654 <arm_cmplx_mag_f32+0x1bc>
 801b4f6:	ed05 0a03 	vstr	s0, [r5, #-12]
 801b4fa:	ed54 7a04 	vldr	s15, [r4, #-16]
 801b4fe:	ed14 0a03 	vldr	s0, [r4, #-12]
 801b502:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b506:	ee20 0a00 	vmul.f32	s0, s0, s0
 801b50a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801b50e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b516:	db72      	blt.n	801b5fe <arm_cmplx_mag_f32+0x166>
 801b518:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801b51c:	eeb4 0a40 	vcmp.f32	s0, s0
 801b520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b524:	f040 808c 	bne.w	801b640 <arm_cmplx_mag_f32+0x1a8>
 801b528:	ed05 0a02 	vstr	s0, [r5, #-8]
 801b52c:	ed54 7a02 	vldr	s15, [r4, #-8]
 801b530:	ed14 0a01 	vldr	s0, [r4, #-4]
 801b534:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b538:	ee20 0a00 	vmul.f32	s0, s0, s0
 801b53c:	ee77 7a80 	vadd.f32	s15, s15, s0
 801b540:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b548:	db20      	blt.n	801b58c <arm_cmplx_mag_f32+0xf4>
 801b54a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801b54e:	eeb4 0a40 	vcmp.f32	s0, s0
 801b552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b556:	d169      	bne.n	801b62c <arm_cmplx_mag_f32+0x194>
 801b558:	3e01      	subs	r6, #1
 801b55a:	ed05 0a01 	vstr	s0, [r5, #-4]
 801b55e:	f104 0420 	add.w	r4, r4, #32
 801b562:	f105 0510 	add.w	r5, r5, #16
 801b566:	d019      	beq.n	801b59c <arm_cmplx_mag_f32+0x104>
 801b568:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 801b56c:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 801b570:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b574:	ee20 0a00 	vmul.f32	s0, s0, s0
 801b578:	ee77 7a80 	vadd.f32	s15, s15, s0
 801b57c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b584:	da95      	bge.n	801b4b2 <arm_cmplx_mag_f32+0x1a>
 801b586:	f845 7c10 	str.w	r7, [r5, #-16]
 801b58a:	e79c      	b.n	801b4c6 <arm_cmplx_mag_f32+0x2e>
 801b58c:	3e01      	subs	r6, #1
 801b58e:	f845 7c04 	str.w	r7, [r5, #-4]
 801b592:	f104 0420 	add.w	r4, r4, #32
 801b596:	f105 0510 	add.w	r5, r5, #16
 801b59a:	d1e5      	bne.n	801b568 <arm_cmplx_mag_f32+0xd0>
 801b59c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 801b5a0:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 801b5a4:	f012 0503 	ands.w	r5, r2, #3
 801b5a8:	d026      	beq.n	801b5f8 <arm_cmplx_mag_f32+0x160>
 801b5aa:	2600      	movs	r6, #0
 801b5ac:	f100 0408 	add.w	r4, r0, #8
 801b5b0:	e00c      	b.n	801b5cc <arm_cmplx_mag_f32+0x134>
 801b5b2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801b5b6:	eeb4 0a40 	vcmp.f32	s0, s0
 801b5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5be:	d12e      	bne.n	801b61e <arm_cmplx_mag_f32+0x186>
 801b5c0:	3d01      	subs	r5, #1
 801b5c2:	ed01 0a01 	vstr	s0, [r1, #-4]
 801b5c6:	f104 0408 	add.w	r4, r4, #8
 801b5ca:	d015      	beq.n	801b5f8 <arm_cmplx_mag_f32+0x160>
 801b5cc:	ed54 7a02 	vldr	s15, [r4, #-8]
 801b5d0:	ed14 0a01 	vldr	s0, [r4, #-4]
 801b5d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b5d8:	ee20 0a00 	vmul.f32	s0, s0, s0
 801b5dc:	3104      	adds	r1, #4
 801b5de:	ee77 7a80 	vadd.f32	s15, s15, s0
 801b5e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5ea:	dae2      	bge.n	801b5b2 <arm_cmplx_mag_f32+0x11a>
 801b5ec:	3d01      	subs	r5, #1
 801b5ee:	f841 6c04 	str.w	r6, [r1, #-4]
 801b5f2:	f104 0408 	add.w	r4, r4, #8
 801b5f6:	d1e9      	bne.n	801b5cc <arm_cmplx_mag_f32+0x134>
 801b5f8:	b004      	add	sp, #16
 801b5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5fe:	f845 7c08 	str.w	r7, [r5, #-8]
 801b602:	e793      	b.n	801b52c <arm_cmplx_mag_f32+0x94>
 801b604:	f845 7c0c 	str.w	r7, [r5, #-12]
 801b608:	e777      	b.n	801b4fa <arm_cmplx_mag_f32+0x62>
 801b60a:	eeb0 0a67 	vmov.f32	s0, s15
 801b60e:	9203      	str	r2, [sp, #12]
 801b610:	9102      	str	r1, [sp, #8]
 801b612:	9001      	str	r0, [sp, #4]
 801b614:	f004 ff62 	bl	80204dc <sqrtf>
 801b618:	a801      	add	r0, sp, #4
 801b61a:	c807      	ldmia	r0, {r0, r1, r2}
 801b61c:	e751      	b.n	801b4c2 <arm_cmplx_mag_f32+0x2a>
 801b61e:	eeb0 0a67 	vmov.f32	s0, s15
 801b622:	9101      	str	r1, [sp, #4]
 801b624:	f004 ff5a 	bl	80204dc <sqrtf>
 801b628:	9901      	ldr	r1, [sp, #4]
 801b62a:	e7c9      	b.n	801b5c0 <arm_cmplx_mag_f32+0x128>
 801b62c:	eeb0 0a67 	vmov.f32	s0, s15
 801b630:	9203      	str	r2, [sp, #12]
 801b632:	9102      	str	r1, [sp, #8]
 801b634:	9001      	str	r0, [sp, #4]
 801b636:	f004 ff51 	bl	80204dc <sqrtf>
 801b63a:	a801      	add	r0, sp, #4
 801b63c:	c807      	ldmia	r0, {r0, r1, r2}
 801b63e:	e78b      	b.n	801b558 <arm_cmplx_mag_f32+0xc0>
 801b640:	eeb0 0a67 	vmov.f32	s0, s15
 801b644:	9203      	str	r2, [sp, #12]
 801b646:	9102      	str	r1, [sp, #8]
 801b648:	9001      	str	r0, [sp, #4]
 801b64a:	f004 ff47 	bl	80204dc <sqrtf>
 801b64e:	a801      	add	r0, sp, #4
 801b650:	c807      	ldmia	r0, {r0, r1, r2}
 801b652:	e769      	b.n	801b528 <arm_cmplx_mag_f32+0x90>
 801b654:	eeb0 0a67 	vmov.f32	s0, s15
 801b658:	9203      	str	r2, [sp, #12]
 801b65a:	9102      	str	r1, [sp, #8]
 801b65c:	9001      	str	r0, [sp, #4]
 801b65e:	f004 ff3d 	bl	80204dc <sqrtf>
 801b662:	a801      	add	r0, sp, #4
 801b664:	c807      	ldmia	r0, {r0, r1, r2}
 801b666:	e746      	b.n	801b4f6 <arm_cmplx_mag_f32+0x5e>

0801b668 <arm_cos_f32>:
 801b668:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801b6dc <arm_cos_f32+0x74>
 801b66c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b670:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801b674:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b678:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b680:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801b684:	d504      	bpl.n	801b690 <arm_cos_f32+0x28>
 801b686:	ee17 3a90 	vmov	r3, s15
 801b68a:	3b01      	subs	r3, #1
 801b68c:	ee07 3a90 	vmov	s15, r3
 801b690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b694:	eddf 6a12 	vldr	s13, [pc, #72]	; 801b6e0 <arm_cos_f32+0x78>
 801b698:	4a12      	ldr	r2, [pc, #72]	; (801b6e4 <arm_cos_f32+0x7c>)
 801b69a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b69e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b6a2:	ee20 0a26 	vmul.f32	s0, s0, s13
 801b6a6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801b6aa:	ee17 3a90 	vmov	r3, s15
 801b6ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b6b2:	ee07 3a90 	vmov	s15, r3
 801b6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b6ba:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801b6be:	ee70 7a67 	vsub.f32	s15, s0, s15
 801b6c2:	edd1 6a01 	vldr	s13, [r1, #4]
 801b6c6:	ed91 0a00 	vldr	s0, [r1]
 801b6ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b6ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b6d2:	ee27 0a00 	vmul.f32	s0, s14, s0
 801b6d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b6da:	4770      	bx	lr
 801b6dc:	3e22f983 	.word	0x3e22f983
 801b6e0:	44000000 	.word	0x44000000
 801b6e4:	080331a0 	.word	0x080331a0

0801b6e8 <arm_mult_f32>:
 801b6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6ea:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 801b6ee:	d033      	beq.n	801b758 <arm_mult_f32+0x70>
 801b6f0:	f100 0610 	add.w	r6, r0, #16
 801b6f4:	f101 0510 	add.w	r5, r1, #16
 801b6f8:	f102 0410 	add.w	r4, r2, #16
 801b6fc:	4677      	mov	r7, lr
 801b6fe:	ed16 6a04 	vldr	s12, [r6, #-16]
 801b702:	ed55 4a04 	vldr	s9, [r5, #-16]
 801b706:	ed56 6a02 	vldr	s13, [r6, #-8]
 801b70a:	ed15 5a02 	vldr	s10, [r5, #-8]
 801b70e:	ed16 7a03 	vldr	s14, [r6, #-12]
 801b712:	ed55 5a03 	vldr	s11, [r5, #-12]
 801b716:	ed56 7a01 	vldr	s15, [r6, #-4]
 801b71a:	ee26 6a24 	vmul.f32	s12, s12, s9
 801b71e:	ee66 6a85 	vmul.f32	s13, s13, s10
 801b722:	ed04 6a04 	vstr	s12, [r4, #-16]
 801b726:	ed15 6a01 	vldr	s12, [r5, #-4]
 801b72a:	ed44 6a02 	vstr	s13, [r4, #-8]
 801b72e:	ee27 7a25 	vmul.f32	s14, s14, s11
 801b732:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b736:	3f01      	subs	r7, #1
 801b738:	ed04 7a03 	vstr	s14, [r4, #-12]
 801b73c:	ed44 7a01 	vstr	s15, [r4, #-4]
 801b740:	f106 0610 	add.w	r6, r6, #16
 801b744:	f105 0510 	add.w	r5, r5, #16
 801b748:	f104 0410 	add.w	r4, r4, #16
 801b74c:	d1d7      	bne.n	801b6fe <arm_mult_f32+0x16>
 801b74e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 801b752:	4420      	add	r0, r4
 801b754:	4421      	add	r1, r4
 801b756:	4422      	add	r2, r4
 801b758:	f013 0303 	ands.w	r3, r3, #3
 801b75c:	d009      	beq.n	801b772 <arm_mult_f32+0x8a>
 801b75e:	ecf0 7a01 	vldmia	r0!, {s15}
 801b762:	ecb1 7a01 	vldmia	r1!, {s14}
 801b766:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b76a:	3b01      	subs	r3, #1
 801b76c:	ece2 7a01 	vstmia	r2!, {s15}
 801b770:	d1f5      	bne.n	801b75e <arm_mult_f32+0x76>
 801b772:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b774 <arm_radix8_butterfly_f32>:
 801b774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b778:	ed2d 8b10 	vpush	{d8-d15}
 801b77c:	461c      	mov	r4, r3
 801b77e:	b09d      	sub	sp, #116	; 0x74
 801b780:	4603      	mov	r3, r0
 801b782:	3304      	adds	r3, #4
 801b784:	ed9f bac4 	vldr	s22, [pc, #784]	; 801ba98 <arm_radix8_butterfly_f32+0x324>
 801b788:	9019      	str	r0, [sp, #100]	; 0x64
 801b78a:	921a      	str	r2, [sp, #104]	; 0x68
 801b78c:	468b      	mov	fp, r1
 801b78e:	931b      	str	r3, [sp, #108]	; 0x6c
 801b790:	468a      	mov	sl, r1
 801b792:	46a1      	mov	r9, r4
 801b794:	4607      	mov	r7, r0
 801b796:	ea4f 03db 	mov.w	r3, fp, lsr #3
 801b79a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 801b79e:	eb03 0508 	add.w	r5, r3, r8
 801b7a2:	195c      	adds	r4, r3, r5
 801b7a4:	00de      	lsls	r6, r3, #3
 801b7a6:	191a      	adds	r2, r3, r4
 801b7a8:	9600      	str	r6, [sp, #0]
 801b7aa:	1898      	adds	r0, r3, r2
 801b7ac:	4619      	mov	r1, r3
 801b7ae:	9e00      	ldr	r6, [sp, #0]
 801b7b0:	9311      	str	r3, [sp, #68]	; 0x44
 801b7b2:	4401      	add	r1, r0
 801b7b4:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 801b7b8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 801b7bc:	19be      	adds	r6, r7, r6
 801b7be:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 801b7c2:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 801b7c6:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 801b7ca:	9f00      	ldr	r7, [sp, #0]
 801b7cc:	011b      	lsls	r3, r3, #4
 801b7ce:	eb06 0e07 	add.w	lr, r6, r7
 801b7d2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801b7d4:	9302      	str	r3, [sp, #8]
 801b7d6:	3204      	adds	r2, #4
 801b7d8:	3104      	adds	r1, #4
 801b7da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801b7de:	f04f 0c00 	mov.w	ip, #0
 801b7e2:	edde 7a00 	vldr	s15, [lr]
 801b7e6:	edd6 6a00 	vldr	s13, [r6]
 801b7ea:	ed95 2a00 	vldr	s4, [r5]
 801b7ee:	ed17 aa01 	vldr	s20, [r7, #-4]
 801b7f2:	edd4 4a00 	vldr	s9, [r4]
 801b7f6:	ed90 5a00 	vldr	s10, [r0]
 801b7fa:	ed12 7a01 	vldr	s14, [r2, #-4]
 801b7fe:	ed51 0a01 	vldr	s1, [r1, #-4]
 801b802:	ee77 8a85 	vadd.f32	s17, s15, s10
 801b806:	ee76 3a87 	vadd.f32	s7, s13, s14
 801b80a:	ee32 4a20 	vadd.f32	s8, s4, s1
 801b80e:	ee3a 3a24 	vadd.f32	s6, s20, s9
 801b812:	ee33 6a84 	vadd.f32	s12, s7, s8
 801b816:	ee73 5a28 	vadd.f32	s11, s6, s17
 801b81a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801b81e:	ee75 6a86 	vadd.f32	s13, s11, s12
 801b822:	ee75 5ac6 	vsub.f32	s11, s11, s12
 801b826:	ed47 6a01 	vstr	s13, [r7, #-4]
 801b82a:	edc4 5a00 	vstr	s11, [r4]
 801b82e:	ed92 9a00 	vldr	s18, [r2]
 801b832:	ed95 1a01 	vldr	s2, [r5, #4]
 801b836:	edd6 5a01 	vldr	s11, [r6, #4]
 801b83a:	ed91 6a00 	vldr	s12, [r1]
 801b83e:	edd7 2a00 	vldr	s5, [r7]
 801b842:	edd4 1a01 	vldr	s3, [r4, #4]
 801b846:	edde 6a01 	vldr	s13, [lr, #4]
 801b84a:	edd0 9a01 	vldr	s19, [r0, #4]
 801b84e:	ee72 0a60 	vsub.f32	s1, s4, s1
 801b852:	ee71 aa46 	vsub.f32	s21, s2, s12
 801b856:	ee35 2ac9 	vsub.f32	s4, s11, s18
 801b85a:	ee37 0a60 	vsub.f32	s0, s14, s1
 801b85e:	ee32 8a2a 	vadd.f32	s16, s4, s21
 801b862:	ee37 7a20 	vadd.f32	s14, s14, s1
 801b866:	ee32 2a6a 	vsub.f32	s4, s4, s21
 801b86a:	ee37 5ac5 	vsub.f32	s10, s15, s10
 801b86e:	ee75 5a89 	vadd.f32	s11, s11, s18
 801b872:	ee60 0a0b 	vmul.f32	s1, s0, s22
 801b876:	ee7a 4a64 	vsub.f32	s9, s20, s9
 801b87a:	ee31 6a06 	vadd.f32	s12, s2, s12
 801b87e:	ee36 9aa9 	vadd.f32	s18, s13, s19
 801b882:	ee32 1aa1 	vadd.f32	s2, s5, s3
 801b886:	ee76 6ae9 	vsub.f32	s13, s13, s19
 801b88a:	ee72 1ae1 	vsub.f32	s3, s5, s3
 801b88e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 801b892:	ee62 2a0b 	vmul.f32	s5, s4, s22
 801b896:	ee67 7a0b 	vmul.f32	s15, s14, s22
 801b89a:	ee33 3a68 	vsub.f32	s6, s6, s17
 801b89e:	ee36 0a88 	vadd.f32	s0, s13, s16
 801b8a2:	ee75 8a86 	vadd.f32	s17, s11, s12
 801b8a6:	ee36 7ac8 	vsub.f32	s14, s13, s16
 801b8aa:	ee33 4ac4 	vsub.f32	s8, s7, s8
 801b8ae:	ee74 6ae0 	vsub.f32	s13, s9, s1
 801b8b2:	ee74 3aa0 	vadd.f32	s7, s9, s1
 801b8b6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801b8ba:	ee75 4a27 	vadd.f32	s9, s10, s15
 801b8be:	ee71 5a49 	vsub.f32	s11, s2, s18
 801b8c2:	ee31 2a09 	vadd.f32	s4, s2, s18
 801b8c6:	ee75 7a67 	vsub.f32	s15, s10, s15
 801b8ca:	ee31 1aa2 	vadd.f32	s2, s3, s5
 801b8ce:	ee71 2ae2 	vsub.f32	s5, s3, s5
 801b8d2:	ee73 0a06 	vadd.f32	s1, s6, s12
 801b8d6:	ee75 1ac4 	vsub.f32	s3, s11, s8
 801b8da:	ee36 5a87 	vadd.f32	s10, s13, s14
 801b8de:	ee32 8a28 	vadd.f32	s16, s4, s17
 801b8e2:	ee33 6a46 	vsub.f32	s12, s6, s12
 801b8e6:	ee34 4a25 	vadd.f32	s8, s8, s11
 801b8ea:	ee33 3a80 	vadd.f32	s6, s7, s0
 801b8ee:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801b8f2:	ee71 5a64 	vsub.f32	s11, s2, s9
 801b8f6:	ee72 6ae7 	vsub.f32	s13, s5, s15
 801b8fa:	ee32 2a68 	vsub.f32	s4, s4, s17
 801b8fe:	ee73 3ac0 	vsub.f32	s7, s7, s0
 801b902:	ee74 4a81 	vadd.f32	s9, s9, s2
 801b906:	ee77 7aa2 	vadd.f32	s15, s15, s5
 801b90a:	44dc      	add	ip, fp
 801b90c:	45e2      	cmp	sl, ip
 801b90e:	ed87 8a00 	vstr	s16, [r7]
 801b912:	ed84 2a01 	vstr	s4, [r4, #4]
 801b916:	441f      	add	r7, r3
 801b918:	edce 0a00 	vstr	s1, [lr]
 801b91c:	441c      	add	r4, r3
 801b91e:	ed80 6a00 	vstr	s12, [r0]
 801b922:	edce 1a01 	vstr	s3, [lr, #4]
 801b926:	ed80 4a01 	vstr	s8, [r0, #4]
 801b92a:	449e      	add	lr, r3
 801b92c:	ed86 3a00 	vstr	s6, [r6]
 801b930:	4418      	add	r0, r3
 801b932:	ed41 3a01 	vstr	s7, [r1, #-4]
 801b936:	ed02 5a01 	vstr	s10, [r2, #-4]
 801b93a:	ed85 7a00 	vstr	s14, [r5]
 801b93e:	edc6 5a01 	vstr	s11, [r6, #4]
 801b942:	edc1 4a00 	vstr	s9, [r1]
 801b946:	441e      	add	r6, r3
 801b948:	edc2 6a00 	vstr	s13, [r2]
 801b94c:	4419      	add	r1, r3
 801b94e:	edc5 7a01 	vstr	s15, [r5, #4]
 801b952:	441a      	add	r2, r3
 801b954:	441d      	add	r5, r3
 801b956:	f63f af44 	bhi.w	801b7e2 <arm_radix8_butterfly_f32+0x6e>
 801b95a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b95c:	2a07      	cmp	r2, #7
 801b95e:	f240 81f5 	bls.w	801bd4c <arm_radix8_butterfly_f32+0x5d8>
 801b962:	f108 0101 	add.w	r1, r8, #1
 801b966:	188f      	adds	r7, r1, r2
 801b968:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 801b96c:	19d6      	adds	r6, r2, r7
 801b96e:	eb08 0c09 	add.w	ip, r8, r9
 801b972:	1994      	adds	r4, r2, r6
 801b974:	eb0c 0e09 	add.w	lr, ip, r9
 801b978:	4610      	mov	r0, r2
 801b97a:	9701      	str	r7, [sp, #4]
 801b97c:	4420      	add	r0, r4
 801b97e:	eb0e 0709 	add.w	r7, lr, r9
 801b982:	1815      	adds	r5, r2, r0
 801b984:	eb07 0209 	add.w	r2, r7, r9
 801b988:	9203      	str	r2, [sp, #12]
 801b98a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b98c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801b990:	9117      	str	r1, [sp, #92]	; 0x5c
 801b992:	440a      	add	r2, r1
 801b994:	9900      	ldr	r1, [sp, #0]
 801b996:	3108      	adds	r1, #8
 801b998:	9100      	str	r1, [sp, #0]
 801b99a:	9902      	ldr	r1, [sp, #8]
 801b99c:	3108      	adds	r1, #8
 801b99e:	9102      	str	r1, [sp, #8]
 801b9a0:	9919      	ldr	r1, [sp, #100]	; 0x64
 801b9a2:	00ff      	lsls	r7, r7, #3
 801b9a4:	9715      	str	r7, [sp, #84]	; 0x54
 801b9a6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801b9aa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801b9ae:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801b9b2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801b9b4:	9903      	ldr	r1, [sp, #12]
 801b9b6:	19d7      	adds	r7, r2, r7
 801b9b8:	00c9      	lsls	r1, r1, #3
 801b9ba:	9114      	str	r1, [sp, #80]	; 0x50
 801b9bc:	9710      	str	r7, [sp, #64]	; 0x40
 801b9be:	9919      	ldr	r1, [sp, #100]	; 0x64
 801b9c0:	9f00      	ldr	r7, [sp, #0]
 801b9c2:	19cf      	adds	r7, r1, r7
 801b9c4:	970d      	str	r7, [sp, #52]	; 0x34
 801b9c6:	9f02      	ldr	r7, [sp, #8]
 801b9c8:	19cf      	adds	r7, r1, r7
 801b9ca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b9ce:	970c      	str	r7, [sp, #48]	; 0x30
 801b9d0:	9f01      	ldr	r7, [sp, #4]
 801b9d2:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 801b9d6:	3504      	adds	r5, #4
 801b9d8:	3004      	adds	r0, #4
 801b9da:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 801b9de:	9508      	str	r5, [sp, #32]
 801b9e0:	9009      	str	r0, [sp, #36]	; 0x24
 801b9e2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801b9e4:	981a      	ldr	r0, [sp, #104]	; 0x68
 801b9e6:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 801b9ea:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b9ee:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 801b9f2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801b9f4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 801b9f8:	1945      	adds	r5, r0, r5
 801b9fa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b9fe:	460f      	mov	r7, r1
 801ba00:	3404      	adds	r4, #4
 801ba02:	4641      	mov	r1, r8
 801ba04:	1841      	adds	r1, r0, r1
 801ba06:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 801ba0a:	940a      	str	r4, [sp, #40]	; 0x28
 801ba0c:	eb00 0c06 	add.w	ip, r0, r6
 801ba10:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801ba14:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801ba16:	9506      	str	r5, [sp, #24]
 801ba18:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ba1a:	9105      	str	r1, [sp, #20]
 801ba1c:	4639      	mov	r1, r7
 801ba1e:	1905      	adds	r5, r0, r4
 801ba20:	3108      	adds	r1, #8
 801ba22:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ba24:	9507      	str	r5, [sp, #28]
 801ba26:	910f      	str	r1, [sp, #60]	; 0x3c
 801ba28:	ea4f 1509 	mov.w	r5, r9, lsl #4
 801ba2c:	2101      	movs	r1, #1
 801ba2e:	eb00 0e06 	add.w	lr, r0, r6
 801ba32:	9518      	str	r5, [sp, #96]	; 0x60
 801ba34:	9404      	str	r4, [sp, #16]
 801ba36:	9103      	str	r1, [sp, #12]
 801ba38:	4620      	mov	r0, r4
 801ba3a:	4689      	mov	r9, r1
 801ba3c:	9e06      	ldr	r6, [sp, #24]
 801ba3e:	ed90 fa00 	vldr	s30, [r0]
 801ba42:	edd6 7a01 	vldr	s15, [r6, #4]
 801ba46:	edd0 ba01 	vldr	s23, [r0, #4]
 801ba4a:	edcd 7a00 	vstr	s15, [sp]
 801ba4e:	a80d      	add	r0, sp, #52	; 0x34
 801ba50:	edde 7a01 	vldr	s15, [lr, #4]
 801ba54:	9c05      	ldr	r4, [sp, #20]
 801ba56:	9d07      	ldr	r5, [sp, #28]
 801ba58:	edd2 fa00 	vldr	s31, [r2]
 801ba5c:	ed92 ca01 	vldr	s24, [r2, #4]
 801ba60:	edcd 7a01 	vstr	s15, [sp, #4]
 801ba64:	c807      	ldmia	r0, {r0, r1, r2}
 801ba66:	eddc 7a01 	vldr	s15, [ip, #4]
 801ba6a:	edd4 ea00 	vldr	s29, [r4]
 801ba6e:	ed95 ea00 	vldr	s28, [r5]
 801ba72:	edd6 da00 	vldr	s27, [r6]
 801ba76:	edd4 aa01 	vldr	s21, [r4, #4]
 801ba7a:	ed95 aa01 	vldr	s20, [r5, #4]
 801ba7e:	ed9e da00 	vldr	s26, [lr]
 801ba82:	eddc ca00 	vldr	s25, [ip]
 801ba86:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ba8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ba8c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801ba8e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801ba90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ba92:	edcd 7a02 	vstr	s15, [sp, #8]
 801ba96:	e001      	b.n	801ba9c <arm_radix8_butterfly_f32+0x328>
 801ba98:	3f3504f3 	.word	0x3f3504f3
 801ba9c:	ed16 6a01 	vldr	s12, [r6, #-4]
 801baa0:	ed91 5a00 	vldr	s10, [r1]
 801baa4:	ed57 9a01 	vldr	s19, [r7, #-4]
 801baa8:	edd5 7a00 	vldr	s15, [r5]
 801baac:	ed18 7a01 	vldr	s14, [r8, #-4]
 801bab0:	edd2 3a00 	vldr	s7, [r2]
 801bab4:	ed94 3a00 	vldr	s6, [r4]
 801bab8:	ed90 2a00 	vldr	s4, [r0]
 801babc:	ed92 0a01 	vldr	s0, [r2, #4]
 801bac0:	ee33 8a85 	vadd.f32	s16, s7, s10
 801bac4:	ee32 1a06 	vadd.f32	s2, s4, s12
 801bac8:	ee33 4a29 	vadd.f32	s8, s6, s19
 801bacc:	ee77 4a87 	vadd.f32	s9, s15, s14
 801bad0:	ee78 1a04 	vadd.f32	s3, s16, s8
 801bad4:	ee71 6a24 	vadd.f32	s13, s2, s9
 801bad8:	ee32 2a46 	vsub.f32	s4, s4, s12
 801badc:	ee31 6aa6 	vadd.f32	s12, s3, s13
 801bae0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bae4:	ed82 6a00 	vstr	s12, [r2]
 801bae8:	edd5 8a01 	vldr	s17, [r5, #4]
 801baec:	ed90 9a01 	vldr	s18, [r0, #4]
 801baf0:	edd6 2a00 	vldr	s5, [r6]
 801baf4:	ed98 7a00 	vldr	s14, [r8]
 801baf8:	edd4 0a01 	vldr	s1, [r4, #4]
 801bafc:	ed91 6a01 	vldr	s12, [r1, #4]
 801bb00:	edd7 5a00 	vldr	s11, [r7]
 801bb04:	ee73 3ac5 	vsub.f32	s7, s7, s10
 801bb08:	ee33 3a69 	vsub.f32	s6, s6, s19
 801bb0c:	ee39 5a62 	vsub.f32	s10, s18, s5
 801bb10:	ee78 9ac7 	vsub.f32	s19, s17, s14
 801bb14:	ee38 4a44 	vsub.f32	s8, s16, s8
 801bb18:	ee38 7a87 	vadd.f32	s14, s17, s14
 801bb1c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 801bb20:	ee79 2a22 	vadd.f32	s5, s18, s5
 801bb24:	ee75 8a69 	vsub.f32	s17, s10, s19
 801bb28:	ee32 9a27 	vadd.f32	s18, s4, s15
 801bb2c:	ee35 5a29 	vadd.f32	s10, s10, s19
 801bb30:	ee72 7a67 	vsub.f32	s15, s4, s15
 801bb34:	ee30 2a06 	vadd.f32	s4, s0, s12
 801bb38:	ee69 9a0b 	vmul.f32	s19, s18, s22
 801bb3c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 801bb40:	ee32 9a08 	vadd.f32	s18, s4, s16
 801bb44:	ee68 8a8b 	vmul.f32	s17, s17, s22
 801bb48:	ee32 2a48 	vsub.f32	s4, s4, s16
 801bb4c:	ee71 4a64 	vsub.f32	s9, s2, s9
 801bb50:	ee25 5a0b 	vmul.f32	s10, s10, s22
 801bb54:	ee32 1a87 	vadd.f32	s2, s5, s14
 801bb58:	ee67 7a8b 	vmul.f32	s15, s15, s22
 801bb5c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 801bb60:	ee30 6a46 	vsub.f32	s12, s0, s12
 801bb64:	ee73 0a29 	vadd.f32	s1, s6, s19
 801bb68:	ee36 0a28 	vadd.f32	s0, s12, s17
 801bb6c:	ee33 3a69 	vsub.f32	s6, s6, s19
 801bb70:	ee32 7a64 	vsub.f32	s14, s4, s9
 801bb74:	ee73 9aa7 	vadd.f32	s19, s7, s15
 801bb78:	ee36 6a68 	vsub.f32	s12, s12, s17
 801bb7c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 801bb80:	ee75 8a85 	vadd.f32	s17, s11, s10
 801bb84:	ee74 3a22 	vadd.f32	s7, s8, s5
 801bb88:	ee35 5ac5 	vsub.f32	s10, s11, s10
 801bb8c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 801bb90:	ee79 1a41 	vsub.f32	s3, s18, s2
 801bb94:	ee39 8aa8 	vadd.f32	s16, s19, s17
 801bb98:	ee76 5a43 	vsub.f32	s11, s12, s6
 801bb9c:	ee74 2a62 	vsub.f32	s5, s8, s5
 801bba0:	ee74 4a82 	vadd.f32	s9, s9, s4
 801bba4:	ee30 4a60 	vsub.f32	s8, s0, s1
 801bba8:	ee79 8ae8 	vsub.f32	s17, s19, s17
 801bbac:	ee30 0a80 	vadd.f32	s0, s1, s0
 801bbb0:	ee77 9a85 	vadd.f32	s19, s15, s10
 801bbb4:	ee33 6a06 	vadd.f32	s12, s6, s12
 801bbb8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801bbbc:	ee2e 2a21 	vmul.f32	s4, s28, s3
 801bbc0:	ee2e 5a26 	vmul.f32	s10, s28, s13
 801bbc4:	ee6f 0a23 	vmul.f32	s1, s30, s7
 801bbc8:	ee2a 3a21 	vmul.f32	s6, s20, s3
 801bbcc:	ee39 1a01 	vadd.f32	s2, s18, s2
 801bbd0:	ee6a 6a26 	vmul.f32	s13, s20, s13
 801bbd4:	ee2b 9a87 	vmul.f32	s18, s23, s14
 801bbd8:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 801bbdc:	ee2f 7a07 	vmul.f32	s14, s30, s14
 801bbe0:	ee6f 1a84 	vmul.f32	s3, s31, s8
 801bbe4:	ee35 3a03 	vadd.f32	s6, s10, s6
 801bbe8:	ee72 6a66 	vsub.f32	s13, s4, s13
 801bbec:	ee2c 5a04 	vmul.f32	s10, s24, s8
 801bbf0:	ee2f 2a88 	vmul.f32	s4, s31, s16
 801bbf4:	ed9d 4a02 	vldr	s8, [sp, #8]
 801bbf8:	ed82 1a01 	vstr	s2, [r2, #4]
 801bbfc:	ee77 3a63 	vsub.f32	s7, s14, s7
 801bc00:	ee2c 8a08 	vmul.f32	s16, s24, s16
 801bc04:	ed9d 7a01 	vldr	s14, [sp, #4]
 801bc08:	ed81 3a00 	vstr	s6, [r1]
 801bc0c:	ee30 9a89 	vadd.f32	s18, s1, s18
 801bc10:	ee32 2a05 	vadd.f32	s4, s4, s10
 801bc14:	ee6d 0a22 	vmul.f32	s1, s26, s5
 801bc18:	ee31 8ac8 	vsub.f32	s16, s3, s16
 801bc1c:	ee67 2a22 	vmul.f32	s5, s14, s5
 801bc20:	ee64 1a00 	vmul.f32	s3, s8, s0
 801bc24:	ee27 7a24 	vmul.f32	s14, s14, s9
 801bc28:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 801bc2c:	ee6d 4a24 	vmul.f32	s9, s26, s9
 801bc30:	ee64 8a28 	vmul.f32	s17, s8, s17
 801bc34:	ed9d 4a00 	vldr	s8, [sp]
 801bc38:	edc1 6a01 	vstr	s13, [r1, #4]
 801bc3c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 801bc40:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 801bc44:	ee64 9a29 	vmul.f32	s19, s8, s19
 801bc48:	ee24 4a25 	vmul.f32	s8, s8, s11
 801bc4c:	ee30 7a87 	vadd.f32	s14, s1, s14
 801bc50:	ee74 4a84 	vadd.f32	s9, s9, s8
 801bc54:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 801bc58:	ee2a 4a86 	vmul.f32	s8, s21, s12
 801bc5c:	ee2c 0a80 	vmul.f32	s0, s25, s0
 801bc60:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 801bc64:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 801bc68:	ee2e 6a86 	vmul.f32	s12, s29, s12
 801bc6c:	ee75 1a21 	vadd.f32	s3, s10, s3
 801bc70:	ee30 0a68 	vsub.f32	s0, s0, s17
 801bc74:	ee75 9ae9 	vsub.f32	s19, s11, s19
 801bc78:	ee70 0a84 	vadd.f32	s1, s1, s8
 801bc7c:	ee36 6a67 	vsub.f32	s12, s12, s15
 801bc80:	44d9      	add	r9, fp
 801bc82:	45ca      	cmp	sl, r9
 801bc84:	ed84 9a00 	vstr	s18, [r4]
 801bc88:	edc4 3a01 	vstr	s7, [r4, #4]
 801bc8c:	441a      	add	r2, r3
 801bc8e:	ed07 7a01 	vstr	s14, [r7, #-4]
 801bc92:	edc7 2a00 	vstr	s5, [r7]
 801bc96:	4419      	add	r1, r3
 801bc98:	ed80 2a00 	vstr	s4, [r0]
 801bc9c:	ed80 8a01 	vstr	s16, [r0, #4]
 801bca0:	441c      	add	r4, r3
 801bca2:	ed48 1a01 	vstr	s3, [r8, #-4]
 801bca6:	ed88 0a00 	vstr	s0, [r8]
 801bcaa:	441f      	add	r7, r3
 801bcac:	ed46 4a01 	vstr	s9, [r6, #-4]
 801bcb0:	4418      	add	r0, r3
 801bcb2:	edc6 9a00 	vstr	s19, [r6]
 801bcb6:	4498      	add	r8, r3
 801bcb8:	edc5 0a00 	vstr	s1, [r5]
 801bcbc:	ed85 6a01 	vstr	s12, [r5, #4]
 801bcc0:	441e      	add	r6, r3
 801bcc2:	441d      	add	r5, r3
 801bcc4:	f63f aeea 	bhi.w	801ba9c <arm_radix8_butterfly_f32+0x328>
 801bcc8:	9a03      	ldr	r2, [sp, #12]
 801bcca:	9818      	ldr	r0, [sp, #96]	; 0x60
 801bccc:	3201      	adds	r2, #1
 801bcce:	4611      	mov	r1, r2
 801bcd0:	9203      	str	r2, [sp, #12]
 801bcd2:	9a04      	ldr	r2, [sp, #16]
 801bcd4:	4402      	add	r2, r0
 801bcd6:	9204      	str	r2, [sp, #16]
 801bcd8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bcda:	9a05      	ldr	r2, [sp, #20]
 801bcdc:	4402      	add	r2, r0
 801bcde:	9205      	str	r2, [sp, #20]
 801bce0:	9812      	ldr	r0, [sp, #72]	; 0x48
 801bce2:	9a07      	ldr	r2, [sp, #28]
 801bce4:	4402      	add	r2, r0
 801bce6:	9207      	str	r2, [sp, #28]
 801bce8:	9816      	ldr	r0, [sp, #88]	; 0x58
 801bcea:	9a06      	ldr	r2, [sp, #24]
 801bcec:	4402      	add	r2, r0
 801bcee:	9206      	str	r2, [sp, #24]
 801bcf0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801bcf2:	4496      	add	lr, r2
 801bcf4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bcf6:	4494      	add	ip, r2
 801bcf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bcfa:	3208      	adds	r2, #8
 801bcfc:	920f      	str	r2, [sp, #60]	; 0x3c
 801bcfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bd00:	3208      	adds	r2, #8
 801bd02:	920e      	str	r2, [sp, #56]	; 0x38
 801bd04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bd06:	3208      	adds	r2, #8
 801bd08:	920d      	str	r2, [sp, #52]	; 0x34
 801bd0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bd0c:	3208      	adds	r2, #8
 801bd0e:	920c      	str	r2, [sp, #48]	; 0x30
 801bd10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bd12:	3208      	adds	r2, #8
 801bd14:	920b      	str	r2, [sp, #44]	; 0x2c
 801bd16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bd18:	3208      	adds	r2, #8
 801bd1a:	920a      	str	r2, [sp, #40]	; 0x28
 801bd1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd1e:	3208      	adds	r2, #8
 801bd20:	9209      	str	r2, [sp, #36]	; 0x24
 801bd22:	9a08      	ldr	r2, [sp, #32]
 801bd24:	3208      	adds	r2, #8
 801bd26:	9208      	str	r2, [sp, #32]
 801bd28:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801bd2a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bd2c:	4288      	cmp	r0, r1
 801bd2e:	4622      	mov	r2, r4
 801bd30:	d007      	beq.n	801bd42 <arm_radix8_butterfly_f32+0x5ce>
 801bd32:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801bd34:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801bd38:	4621      	mov	r1, r4
 801bd3a:	4401      	add	r1, r0
 801bd3c:	9110      	str	r1, [sp, #64]	; 0x40
 801bd3e:	9804      	ldr	r0, [sp, #16]
 801bd40:	e67c      	b.n	801ba3c <arm_radix8_butterfly_f32+0x2c8>
 801bd42:	4683      	mov	fp, r0
 801bd44:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 801bd48:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801bd4a:	e524      	b.n	801b796 <arm_radix8_butterfly_f32+0x22>
 801bd4c:	b01d      	add	sp, #116	; 0x74
 801bd4e:	ecbd 8b10 	vpop	{d8-d15}
 801bd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd56:	bf00      	nop

0801bd58 <atoi>:
 801bd58:	220a      	movs	r2, #10
 801bd5a:	2100      	movs	r1, #0
 801bd5c:	f001 bf3c 	b.w	801dbd8 <strtol>

0801bd60 <__errno>:
 801bd60:	4b01      	ldr	r3, [pc, #4]	; (801bd68 <__errno+0x8>)
 801bd62:	6818      	ldr	r0, [r3, #0]
 801bd64:	4770      	bx	lr
 801bd66:	bf00      	nop
 801bd68:	200005fc 	.word	0x200005fc

0801bd6c <__sflush_r>:
 801bd6c:	898a      	ldrh	r2, [r1, #12]
 801bd6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd72:	4605      	mov	r5, r0
 801bd74:	0710      	lsls	r0, r2, #28
 801bd76:	460c      	mov	r4, r1
 801bd78:	d458      	bmi.n	801be2c <__sflush_r+0xc0>
 801bd7a:	684b      	ldr	r3, [r1, #4]
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	dc05      	bgt.n	801bd8c <__sflush_r+0x20>
 801bd80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	dc02      	bgt.n	801bd8c <__sflush_r+0x20>
 801bd86:	2000      	movs	r0, #0
 801bd88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bd8e:	2e00      	cmp	r6, #0
 801bd90:	d0f9      	beq.n	801bd86 <__sflush_r+0x1a>
 801bd92:	2300      	movs	r3, #0
 801bd94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bd98:	682f      	ldr	r7, [r5, #0]
 801bd9a:	602b      	str	r3, [r5, #0]
 801bd9c:	d032      	beq.n	801be04 <__sflush_r+0x98>
 801bd9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bda0:	89a3      	ldrh	r3, [r4, #12]
 801bda2:	075a      	lsls	r2, r3, #29
 801bda4:	d505      	bpl.n	801bdb2 <__sflush_r+0x46>
 801bda6:	6863      	ldr	r3, [r4, #4]
 801bda8:	1ac0      	subs	r0, r0, r3
 801bdaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bdac:	b10b      	cbz	r3, 801bdb2 <__sflush_r+0x46>
 801bdae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bdb0:	1ac0      	subs	r0, r0, r3
 801bdb2:	2300      	movs	r3, #0
 801bdb4:	4602      	mov	r2, r0
 801bdb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bdb8:	6a21      	ldr	r1, [r4, #32]
 801bdba:	4628      	mov	r0, r5
 801bdbc:	47b0      	blx	r6
 801bdbe:	1c43      	adds	r3, r0, #1
 801bdc0:	89a3      	ldrh	r3, [r4, #12]
 801bdc2:	d106      	bne.n	801bdd2 <__sflush_r+0x66>
 801bdc4:	6829      	ldr	r1, [r5, #0]
 801bdc6:	291d      	cmp	r1, #29
 801bdc8:	d82c      	bhi.n	801be24 <__sflush_r+0xb8>
 801bdca:	4a2a      	ldr	r2, [pc, #168]	; (801be74 <__sflush_r+0x108>)
 801bdcc:	40ca      	lsrs	r2, r1
 801bdce:	07d6      	lsls	r6, r2, #31
 801bdd0:	d528      	bpl.n	801be24 <__sflush_r+0xb8>
 801bdd2:	2200      	movs	r2, #0
 801bdd4:	6062      	str	r2, [r4, #4]
 801bdd6:	04d9      	lsls	r1, r3, #19
 801bdd8:	6922      	ldr	r2, [r4, #16]
 801bdda:	6022      	str	r2, [r4, #0]
 801bddc:	d504      	bpl.n	801bde8 <__sflush_r+0x7c>
 801bdde:	1c42      	adds	r2, r0, #1
 801bde0:	d101      	bne.n	801bde6 <__sflush_r+0x7a>
 801bde2:	682b      	ldr	r3, [r5, #0]
 801bde4:	b903      	cbnz	r3, 801bde8 <__sflush_r+0x7c>
 801bde6:	6560      	str	r0, [r4, #84]	; 0x54
 801bde8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bdea:	602f      	str	r7, [r5, #0]
 801bdec:	2900      	cmp	r1, #0
 801bdee:	d0ca      	beq.n	801bd86 <__sflush_r+0x1a>
 801bdf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bdf4:	4299      	cmp	r1, r3
 801bdf6:	d002      	beq.n	801bdfe <__sflush_r+0x92>
 801bdf8:	4628      	mov	r0, r5
 801bdfa:	f000 fa3b 	bl	801c274 <_free_r>
 801bdfe:	2000      	movs	r0, #0
 801be00:	6360      	str	r0, [r4, #52]	; 0x34
 801be02:	e7c1      	b.n	801bd88 <__sflush_r+0x1c>
 801be04:	6a21      	ldr	r1, [r4, #32]
 801be06:	2301      	movs	r3, #1
 801be08:	4628      	mov	r0, r5
 801be0a:	47b0      	blx	r6
 801be0c:	1c41      	adds	r1, r0, #1
 801be0e:	d1c7      	bne.n	801bda0 <__sflush_r+0x34>
 801be10:	682b      	ldr	r3, [r5, #0]
 801be12:	2b00      	cmp	r3, #0
 801be14:	d0c4      	beq.n	801bda0 <__sflush_r+0x34>
 801be16:	2b1d      	cmp	r3, #29
 801be18:	d001      	beq.n	801be1e <__sflush_r+0xb2>
 801be1a:	2b16      	cmp	r3, #22
 801be1c:	d101      	bne.n	801be22 <__sflush_r+0xb6>
 801be1e:	602f      	str	r7, [r5, #0]
 801be20:	e7b1      	b.n	801bd86 <__sflush_r+0x1a>
 801be22:	89a3      	ldrh	r3, [r4, #12]
 801be24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801be28:	81a3      	strh	r3, [r4, #12]
 801be2a:	e7ad      	b.n	801bd88 <__sflush_r+0x1c>
 801be2c:	690f      	ldr	r7, [r1, #16]
 801be2e:	2f00      	cmp	r7, #0
 801be30:	d0a9      	beq.n	801bd86 <__sflush_r+0x1a>
 801be32:	0793      	lsls	r3, r2, #30
 801be34:	680e      	ldr	r6, [r1, #0]
 801be36:	bf08      	it	eq
 801be38:	694b      	ldreq	r3, [r1, #20]
 801be3a:	600f      	str	r7, [r1, #0]
 801be3c:	bf18      	it	ne
 801be3e:	2300      	movne	r3, #0
 801be40:	eba6 0807 	sub.w	r8, r6, r7
 801be44:	608b      	str	r3, [r1, #8]
 801be46:	f1b8 0f00 	cmp.w	r8, #0
 801be4a:	dd9c      	ble.n	801bd86 <__sflush_r+0x1a>
 801be4c:	6a21      	ldr	r1, [r4, #32]
 801be4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801be50:	4643      	mov	r3, r8
 801be52:	463a      	mov	r2, r7
 801be54:	4628      	mov	r0, r5
 801be56:	47b0      	blx	r6
 801be58:	2800      	cmp	r0, #0
 801be5a:	dc06      	bgt.n	801be6a <__sflush_r+0xfe>
 801be5c:	89a3      	ldrh	r3, [r4, #12]
 801be5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801be62:	81a3      	strh	r3, [r4, #12]
 801be64:	f04f 30ff 	mov.w	r0, #4294967295
 801be68:	e78e      	b.n	801bd88 <__sflush_r+0x1c>
 801be6a:	4407      	add	r7, r0
 801be6c:	eba8 0800 	sub.w	r8, r8, r0
 801be70:	e7e9      	b.n	801be46 <__sflush_r+0xda>
 801be72:	bf00      	nop
 801be74:	20400001 	.word	0x20400001

0801be78 <_fflush_r>:
 801be78:	b538      	push	{r3, r4, r5, lr}
 801be7a:	690b      	ldr	r3, [r1, #16]
 801be7c:	4605      	mov	r5, r0
 801be7e:	460c      	mov	r4, r1
 801be80:	b913      	cbnz	r3, 801be88 <_fflush_r+0x10>
 801be82:	2500      	movs	r5, #0
 801be84:	4628      	mov	r0, r5
 801be86:	bd38      	pop	{r3, r4, r5, pc}
 801be88:	b118      	cbz	r0, 801be92 <_fflush_r+0x1a>
 801be8a:	6983      	ldr	r3, [r0, #24]
 801be8c:	b90b      	cbnz	r3, 801be92 <_fflush_r+0x1a>
 801be8e:	f000 f887 	bl	801bfa0 <__sinit>
 801be92:	4b14      	ldr	r3, [pc, #80]	; (801bee4 <_fflush_r+0x6c>)
 801be94:	429c      	cmp	r4, r3
 801be96:	d11b      	bne.n	801bed0 <_fflush_r+0x58>
 801be98:	686c      	ldr	r4, [r5, #4]
 801be9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d0ef      	beq.n	801be82 <_fflush_r+0xa>
 801bea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bea4:	07d0      	lsls	r0, r2, #31
 801bea6:	d404      	bmi.n	801beb2 <_fflush_r+0x3a>
 801bea8:	0599      	lsls	r1, r3, #22
 801beaa:	d402      	bmi.n	801beb2 <_fflush_r+0x3a>
 801beac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801beae:	f000 f93a 	bl	801c126 <__retarget_lock_acquire_recursive>
 801beb2:	4628      	mov	r0, r5
 801beb4:	4621      	mov	r1, r4
 801beb6:	f7ff ff59 	bl	801bd6c <__sflush_r>
 801beba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bebc:	07da      	lsls	r2, r3, #31
 801bebe:	4605      	mov	r5, r0
 801bec0:	d4e0      	bmi.n	801be84 <_fflush_r+0xc>
 801bec2:	89a3      	ldrh	r3, [r4, #12]
 801bec4:	059b      	lsls	r3, r3, #22
 801bec6:	d4dd      	bmi.n	801be84 <_fflush_r+0xc>
 801bec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801beca:	f000 f92d 	bl	801c128 <__retarget_lock_release_recursive>
 801bece:	e7d9      	b.n	801be84 <_fflush_r+0xc>
 801bed0:	4b05      	ldr	r3, [pc, #20]	; (801bee8 <_fflush_r+0x70>)
 801bed2:	429c      	cmp	r4, r3
 801bed4:	d101      	bne.n	801beda <_fflush_r+0x62>
 801bed6:	68ac      	ldr	r4, [r5, #8]
 801bed8:	e7df      	b.n	801be9a <_fflush_r+0x22>
 801beda:	4b04      	ldr	r3, [pc, #16]	; (801beec <_fflush_r+0x74>)
 801bedc:	429c      	cmp	r4, r3
 801bede:	bf08      	it	eq
 801bee0:	68ec      	ldreq	r4, [r5, #12]
 801bee2:	e7da      	b.n	801be9a <_fflush_r+0x22>
 801bee4:	08039518 	.word	0x08039518
 801bee8:	08039538 	.word	0x08039538
 801beec:	080394f8 	.word	0x080394f8

0801bef0 <std>:
 801bef0:	2300      	movs	r3, #0
 801bef2:	b510      	push	{r4, lr}
 801bef4:	4604      	mov	r4, r0
 801bef6:	e9c0 3300 	strd	r3, r3, [r0]
 801befa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801befe:	6083      	str	r3, [r0, #8]
 801bf00:	8181      	strh	r1, [r0, #12]
 801bf02:	6643      	str	r3, [r0, #100]	; 0x64
 801bf04:	81c2      	strh	r2, [r0, #14]
 801bf06:	6183      	str	r3, [r0, #24]
 801bf08:	4619      	mov	r1, r3
 801bf0a:	2208      	movs	r2, #8
 801bf0c:	305c      	adds	r0, #92	; 0x5c
 801bf0e:	f000 f9a9 	bl	801c264 <memset>
 801bf12:	4b05      	ldr	r3, [pc, #20]	; (801bf28 <std+0x38>)
 801bf14:	6263      	str	r3, [r4, #36]	; 0x24
 801bf16:	4b05      	ldr	r3, [pc, #20]	; (801bf2c <std+0x3c>)
 801bf18:	62a3      	str	r3, [r4, #40]	; 0x28
 801bf1a:	4b05      	ldr	r3, [pc, #20]	; (801bf30 <std+0x40>)
 801bf1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bf1e:	4b05      	ldr	r3, [pc, #20]	; (801bf34 <std+0x44>)
 801bf20:	6224      	str	r4, [r4, #32]
 801bf22:	6323      	str	r3, [r4, #48]	; 0x30
 801bf24:	bd10      	pop	{r4, pc}
 801bf26:	bf00      	nop
 801bf28:	0801cd79 	.word	0x0801cd79
 801bf2c:	0801cd9b 	.word	0x0801cd9b
 801bf30:	0801cdd3 	.word	0x0801cdd3
 801bf34:	0801cdf7 	.word	0x0801cdf7

0801bf38 <_cleanup_r>:
 801bf38:	4901      	ldr	r1, [pc, #4]	; (801bf40 <_cleanup_r+0x8>)
 801bf3a:	f000 b8af 	b.w	801c09c <_fwalk_reent>
 801bf3e:	bf00      	nop
 801bf40:	0801be79 	.word	0x0801be79

0801bf44 <__sfmoreglue>:
 801bf44:	b570      	push	{r4, r5, r6, lr}
 801bf46:	2268      	movs	r2, #104	; 0x68
 801bf48:	1e4d      	subs	r5, r1, #1
 801bf4a:	4355      	muls	r5, r2
 801bf4c:	460e      	mov	r6, r1
 801bf4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801bf52:	f000 f9fb 	bl	801c34c <_malloc_r>
 801bf56:	4604      	mov	r4, r0
 801bf58:	b140      	cbz	r0, 801bf6c <__sfmoreglue+0x28>
 801bf5a:	2100      	movs	r1, #0
 801bf5c:	e9c0 1600 	strd	r1, r6, [r0]
 801bf60:	300c      	adds	r0, #12
 801bf62:	60a0      	str	r0, [r4, #8]
 801bf64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801bf68:	f000 f97c 	bl	801c264 <memset>
 801bf6c:	4620      	mov	r0, r4
 801bf6e:	bd70      	pop	{r4, r5, r6, pc}

0801bf70 <__sfp_lock_acquire>:
 801bf70:	4801      	ldr	r0, [pc, #4]	; (801bf78 <__sfp_lock_acquire+0x8>)
 801bf72:	f000 b8d8 	b.w	801c126 <__retarget_lock_acquire_recursive>
 801bf76:	bf00      	nop
 801bf78:	2001423d 	.word	0x2001423d

0801bf7c <__sfp_lock_release>:
 801bf7c:	4801      	ldr	r0, [pc, #4]	; (801bf84 <__sfp_lock_release+0x8>)
 801bf7e:	f000 b8d3 	b.w	801c128 <__retarget_lock_release_recursive>
 801bf82:	bf00      	nop
 801bf84:	2001423d 	.word	0x2001423d

0801bf88 <__sinit_lock_acquire>:
 801bf88:	4801      	ldr	r0, [pc, #4]	; (801bf90 <__sinit_lock_acquire+0x8>)
 801bf8a:	f000 b8cc 	b.w	801c126 <__retarget_lock_acquire_recursive>
 801bf8e:	bf00      	nop
 801bf90:	2001423e 	.word	0x2001423e

0801bf94 <__sinit_lock_release>:
 801bf94:	4801      	ldr	r0, [pc, #4]	; (801bf9c <__sinit_lock_release+0x8>)
 801bf96:	f000 b8c7 	b.w	801c128 <__retarget_lock_release_recursive>
 801bf9a:	bf00      	nop
 801bf9c:	2001423e 	.word	0x2001423e

0801bfa0 <__sinit>:
 801bfa0:	b510      	push	{r4, lr}
 801bfa2:	4604      	mov	r4, r0
 801bfa4:	f7ff fff0 	bl	801bf88 <__sinit_lock_acquire>
 801bfa8:	69a3      	ldr	r3, [r4, #24]
 801bfaa:	b11b      	cbz	r3, 801bfb4 <__sinit+0x14>
 801bfac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bfb0:	f7ff bff0 	b.w	801bf94 <__sinit_lock_release>
 801bfb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801bfb8:	6523      	str	r3, [r4, #80]	; 0x50
 801bfba:	4b13      	ldr	r3, [pc, #76]	; (801c008 <__sinit+0x68>)
 801bfbc:	4a13      	ldr	r2, [pc, #76]	; (801c00c <__sinit+0x6c>)
 801bfbe:	681b      	ldr	r3, [r3, #0]
 801bfc0:	62a2      	str	r2, [r4, #40]	; 0x28
 801bfc2:	42a3      	cmp	r3, r4
 801bfc4:	bf04      	itt	eq
 801bfc6:	2301      	moveq	r3, #1
 801bfc8:	61a3      	streq	r3, [r4, #24]
 801bfca:	4620      	mov	r0, r4
 801bfcc:	f000 f820 	bl	801c010 <__sfp>
 801bfd0:	6060      	str	r0, [r4, #4]
 801bfd2:	4620      	mov	r0, r4
 801bfd4:	f000 f81c 	bl	801c010 <__sfp>
 801bfd8:	60a0      	str	r0, [r4, #8]
 801bfda:	4620      	mov	r0, r4
 801bfdc:	f000 f818 	bl	801c010 <__sfp>
 801bfe0:	2200      	movs	r2, #0
 801bfe2:	60e0      	str	r0, [r4, #12]
 801bfe4:	2104      	movs	r1, #4
 801bfe6:	6860      	ldr	r0, [r4, #4]
 801bfe8:	f7ff ff82 	bl	801bef0 <std>
 801bfec:	68a0      	ldr	r0, [r4, #8]
 801bfee:	2201      	movs	r2, #1
 801bff0:	2109      	movs	r1, #9
 801bff2:	f7ff ff7d 	bl	801bef0 <std>
 801bff6:	68e0      	ldr	r0, [r4, #12]
 801bff8:	2202      	movs	r2, #2
 801bffa:	2112      	movs	r1, #18
 801bffc:	f7ff ff78 	bl	801bef0 <std>
 801c000:	2301      	movs	r3, #1
 801c002:	61a3      	str	r3, [r4, #24]
 801c004:	e7d2      	b.n	801bfac <__sinit+0xc>
 801c006:	bf00      	nop
 801c008:	08039558 	.word	0x08039558
 801c00c:	0801bf39 	.word	0x0801bf39

0801c010 <__sfp>:
 801c010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c012:	4607      	mov	r7, r0
 801c014:	f7ff ffac 	bl	801bf70 <__sfp_lock_acquire>
 801c018:	4b1e      	ldr	r3, [pc, #120]	; (801c094 <__sfp+0x84>)
 801c01a:	681e      	ldr	r6, [r3, #0]
 801c01c:	69b3      	ldr	r3, [r6, #24]
 801c01e:	b913      	cbnz	r3, 801c026 <__sfp+0x16>
 801c020:	4630      	mov	r0, r6
 801c022:	f7ff ffbd 	bl	801bfa0 <__sinit>
 801c026:	3648      	adds	r6, #72	; 0x48
 801c028:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c02c:	3b01      	subs	r3, #1
 801c02e:	d503      	bpl.n	801c038 <__sfp+0x28>
 801c030:	6833      	ldr	r3, [r6, #0]
 801c032:	b30b      	cbz	r3, 801c078 <__sfp+0x68>
 801c034:	6836      	ldr	r6, [r6, #0]
 801c036:	e7f7      	b.n	801c028 <__sfp+0x18>
 801c038:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c03c:	b9d5      	cbnz	r5, 801c074 <__sfp+0x64>
 801c03e:	4b16      	ldr	r3, [pc, #88]	; (801c098 <__sfp+0x88>)
 801c040:	60e3      	str	r3, [r4, #12]
 801c042:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c046:	6665      	str	r5, [r4, #100]	; 0x64
 801c048:	f000 f86c 	bl	801c124 <__retarget_lock_init_recursive>
 801c04c:	f7ff ff96 	bl	801bf7c <__sfp_lock_release>
 801c050:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c054:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c058:	6025      	str	r5, [r4, #0]
 801c05a:	61a5      	str	r5, [r4, #24]
 801c05c:	2208      	movs	r2, #8
 801c05e:	4629      	mov	r1, r5
 801c060:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c064:	f000 f8fe 	bl	801c264 <memset>
 801c068:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c06c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c070:	4620      	mov	r0, r4
 801c072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c074:	3468      	adds	r4, #104	; 0x68
 801c076:	e7d9      	b.n	801c02c <__sfp+0x1c>
 801c078:	2104      	movs	r1, #4
 801c07a:	4638      	mov	r0, r7
 801c07c:	f7ff ff62 	bl	801bf44 <__sfmoreglue>
 801c080:	4604      	mov	r4, r0
 801c082:	6030      	str	r0, [r6, #0]
 801c084:	2800      	cmp	r0, #0
 801c086:	d1d5      	bne.n	801c034 <__sfp+0x24>
 801c088:	f7ff ff78 	bl	801bf7c <__sfp_lock_release>
 801c08c:	230c      	movs	r3, #12
 801c08e:	603b      	str	r3, [r7, #0]
 801c090:	e7ee      	b.n	801c070 <__sfp+0x60>
 801c092:	bf00      	nop
 801c094:	08039558 	.word	0x08039558
 801c098:	ffff0001 	.word	0xffff0001

0801c09c <_fwalk_reent>:
 801c09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c0a0:	4606      	mov	r6, r0
 801c0a2:	4688      	mov	r8, r1
 801c0a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c0a8:	2700      	movs	r7, #0
 801c0aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c0ae:	f1b9 0901 	subs.w	r9, r9, #1
 801c0b2:	d505      	bpl.n	801c0c0 <_fwalk_reent+0x24>
 801c0b4:	6824      	ldr	r4, [r4, #0]
 801c0b6:	2c00      	cmp	r4, #0
 801c0b8:	d1f7      	bne.n	801c0aa <_fwalk_reent+0xe>
 801c0ba:	4638      	mov	r0, r7
 801c0bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c0c0:	89ab      	ldrh	r3, [r5, #12]
 801c0c2:	2b01      	cmp	r3, #1
 801c0c4:	d907      	bls.n	801c0d6 <_fwalk_reent+0x3a>
 801c0c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c0ca:	3301      	adds	r3, #1
 801c0cc:	d003      	beq.n	801c0d6 <_fwalk_reent+0x3a>
 801c0ce:	4629      	mov	r1, r5
 801c0d0:	4630      	mov	r0, r6
 801c0d2:	47c0      	blx	r8
 801c0d4:	4307      	orrs	r7, r0
 801c0d6:	3568      	adds	r5, #104	; 0x68
 801c0d8:	e7e9      	b.n	801c0ae <_fwalk_reent+0x12>
	...

0801c0dc <__libc_init_array>:
 801c0dc:	b570      	push	{r4, r5, r6, lr}
 801c0de:	4d0d      	ldr	r5, [pc, #52]	; (801c114 <__libc_init_array+0x38>)
 801c0e0:	4c0d      	ldr	r4, [pc, #52]	; (801c118 <__libc_init_array+0x3c>)
 801c0e2:	1b64      	subs	r4, r4, r5
 801c0e4:	10a4      	asrs	r4, r4, #2
 801c0e6:	2600      	movs	r6, #0
 801c0e8:	42a6      	cmp	r6, r4
 801c0ea:	d109      	bne.n	801c100 <__libc_init_array+0x24>
 801c0ec:	4d0b      	ldr	r5, [pc, #44]	; (801c11c <__libc_init_array+0x40>)
 801c0ee:	4c0c      	ldr	r4, [pc, #48]	; (801c120 <__libc_init_array+0x44>)
 801c0f0:	f005 fb8c 	bl	802180c <_init>
 801c0f4:	1b64      	subs	r4, r4, r5
 801c0f6:	10a4      	asrs	r4, r4, #2
 801c0f8:	2600      	movs	r6, #0
 801c0fa:	42a6      	cmp	r6, r4
 801c0fc:	d105      	bne.n	801c10a <__libc_init_array+0x2e>
 801c0fe:	bd70      	pop	{r4, r5, r6, pc}
 801c100:	f855 3b04 	ldr.w	r3, [r5], #4
 801c104:	4798      	blx	r3
 801c106:	3601      	adds	r6, #1
 801c108:	e7ee      	b.n	801c0e8 <__libc_init_array+0xc>
 801c10a:	f855 3b04 	ldr.w	r3, [r5], #4
 801c10e:	4798      	blx	r3
 801c110:	3601      	adds	r6, #1
 801c112:	e7f2      	b.n	801c0fa <__libc_init_array+0x1e>
 801c114:	080398f8 	.word	0x080398f8
 801c118:	080398f8 	.word	0x080398f8
 801c11c:	080398f8 	.word	0x080398f8
 801c120:	080398fc 	.word	0x080398fc

0801c124 <__retarget_lock_init_recursive>:
 801c124:	4770      	bx	lr

0801c126 <__retarget_lock_acquire_recursive>:
 801c126:	4770      	bx	lr

0801c128 <__retarget_lock_release_recursive>:
 801c128:	4770      	bx	lr

0801c12a <__swhatbuf_r>:
 801c12a:	b570      	push	{r4, r5, r6, lr}
 801c12c:	460e      	mov	r6, r1
 801c12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c132:	2900      	cmp	r1, #0
 801c134:	b096      	sub	sp, #88	; 0x58
 801c136:	4614      	mov	r4, r2
 801c138:	461d      	mov	r5, r3
 801c13a:	da08      	bge.n	801c14e <__swhatbuf_r+0x24>
 801c13c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c140:	2200      	movs	r2, #0
 801c142:	602a      	str	r2, [r5, #0]
 801c144:	061a      	lsls	r2, r3, #24
 801c146:	d410      	bmi.n	801c16a <__swhatbuf_r+0x40>
 801c148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c14c:	e00e      	b.n	801c16c <__swhatbuf_r+0x42>
 801c14e:	466a      	mov	r2, sp
 801c150:	f002 fca8 	bl	801eaa4 <_fstat_r>
 801c154:	2800      	cmp	r0, #0
 801c156:	dbf1      	blt.n	801c13c <__swhatbuf_r+0x12>
 801c158:	9a01      	ldr	r2, [sp, #4]
 801c15a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c15e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c162:	425a      	negs	r2, r3
 801c164:	415a      	adcs	r2, r3
 801c166:	602a      	str	r2, [r5, #0]
 801c168:	e7ee      	b.n	801c148 <__swhatbuf_r+0x1e>
 801c16a:	2340      	movs	r3, #64	; 0x40
 801c16c:	2000      	movs	r0, #0
 801c16e:	6023      	str	r3, [r4, #0]
 801c170:	b016      	add	sp, #88	; 0x58
 801c172:	bd70      	pop	{r4, r5, r6, pc}

0801c174 <__smakebuf_r>:
 801c174:	898b      	ldrh	r3, [r1, #12]
 801c176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c178:	079d      	lsls	r5, r3, #30
 801c17a:	4606      	mov	r6, r0
 801c17c:	460c      	mov	r4, r1
 801c17e:	d507      	bpl.n	801c190 <__smakebuf_r+0x1c>
 801c180:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c184:	6023      	str	r3, [r4, #0]
 801c186:	6123      	str	r3, [r4, #16]
 801c188:	2301      	movs	r3, #1
 801c18a:	6163      	str	r3, [r4, #20]
 801c18c:	b002      	add	sp, #8
 801c18e:	bd70      	pop	{r4, r5, r6, pc}
 801c190:	ab01      	add	r3, sp, #4
 801c192:	466a      	mov	r2, sp
 801c194:	f7ff ffc9 	bl	801c12a <__swhatbuf_r>
 801c198:	9900      	ldr	r1, [sp, #0]
 801c19a:	4605      	mov	r5, r0
 801c19c:	4630      	mov	r0, r6
 801c19e:	f000 f8d5 	bl	801c34c <_malloc_r>
 801c1a2:	b948      	cbnz	r0, 801c1b8 <__smakebuf_r+0x44>
 801c1a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c1a8:	059a      	lsls	r2, r3, #22
 801c1aa:	d4ef      	bmi.n	801c18c <__smakebuf_r+0x18>
 801c1ac:	f023 0303 	bic.w	r3, r3, #3
 801c1b0:	f043 0302 	orr.w	r3, r3, #2
 801c1b4:	81a3      	strh	r3, [r4, #12]
 801c1b6:	e7e3      	b.n	801c180 <__smakebuf_r+0xc>
 801c1b8:	4b0d      	ldr	r3, [pc, #52]	; (801c1f0 <__smakebuf_r+0x7c>)
 801c1ba:	62b3      	str	r3, [r6, #40]	; 0x28
 801c1bc:	89a3      	ldrh	r3, [r4, #12]
 801c1be:	6020      	str	r0, [r4, #0]
 801c1c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c1c4:	81a3      	strh	r3, [r4, #12]
 801c1c6:	9b00      	ldr	r3, [sp, #0]
 801c1c8:	6163      	str	r3, [r4, #20]
 801c1ca:	9b01      	ldr	r3, [sp, #4]
 801c1cc:	6120      	str	r0, [r4, #16]
 801c1ce:	b15b      	cbz	r3, 801c1e8 <__smakebuf_r+0x74>
 801c1d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c1d4:	4630      	mov	r0, r6
 801c1d6:	f002 ffe7 	bl	801f1a8 <_isatty_r>
 801c1da:	b128      	cbz	r0, 801c1e8 <__smakebuf_r+0x74>
 801c1dc:	89a3      	ldrh	r3, [r4, #12]
 801c1de:	f023 0303 	bic.w	r3, r3, #3
 801c1e2:	f043 0301 	orr.w	r3, r3, #1
 801c1e6:	81a3      	strh	r3, [r4, #12]
 801c1e8:	89a0      	ldrh	r0, [r4, #12]
 801c1ea:	4305      	orrs	r5, r0
 801c1ec:	81a5      	strh	r5, [r4, #12]
 801c1ee:	e7cd      	b.n	801c18c <__smakebuf_r+0x18>
 801c1f0:	0801bf39 	.word	0x0801bf39

0801c1f4 <malloc>:
 801c1f4:	4b02      	ldr	r3, [pc, #8]	; (801c200 <malloc+0xc>)
 801c1f6:	4601      	mov	r1, r0
 801c1f8:	6818      	ldr	r0, [r3, #0]
 801c1fa:	f000 b8a7 	b.w	801c34c <_malloc_r>
 801c1fe:	bf00      	nop
 801c200:	200005fc 	.word	0x200005fc

0801c204 <free>:
 801c204:	4b02      	ldr	r3, [pc, #8]	; (801c210 <free+0xc>)
 801c206:	4601      	mov	r1, r0
 801c208:	6818      	ldr	r0, [r3, #0]
 801c20a:	f000 b833 	b.w	801c274 <_free_r>
 801c20e:	bf00      	nop
 801c210:	200005fc 	.word	0x200005fc

0801c214 <memcpy>:
 801c214:	440a      	add	r2, r1
 801c216:	4291      	cmp	r1, r2
 801c218:	f100 33ff 	add.w	r3, r0, #4294967295
 801c21c:	d100      	bne.n	801c220 <memcpy+0xc>
 801c21e:	4770      	bx	lr
 801c220:	b510      	push	{r4, lr}
 801c222:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c226:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c22a:	4291      	cmp	r1, r2
 801c22c:	d1f9      	bne.n	801c222 <memcpy+0xe>
 801c22e:	bd10      	pop	{r4, pc}

0801c230 <memmove>:
 801c230:	4288      	cmp	r0, r1
 801c232:	b510      	push	{r4, lr}
 801c234:	eb01 0402 	add.w	r4, r1, r2
 801c238:	d902      	bls.n	801c240 <memmove+0x10>
 801c23a:	4284      	cmp	r4, r0
 801c23c:	4623      	mov	r3, r4
 801c23e:	d807      	bhi.n	801c250 <memmove+0x20>
 801c240:	1e43      	subs	r3, r0, #1
 801c242:	42a1      	cmp	r1, r4
 801c244:	d008      	beq.n	801c258 <memmove+0x28>
 801c246:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c24a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c24e:	e7f8      	b.n	801c242 <memmove+0x12>
 801c250:	4402      	add	r2, r0
 801c252:	4601      	mov	r1, r0
 801c254:	428a      	cmp	r2, r1
 801c256:	d100      	bne.n	801c25a <memmove+0x2a>
 801c258:	bd10      	pop	{r4, pc}
 801c25a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c25e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c262:	e7f7      	b.n	801c254 <memmove+0x24>

0801c264 <memset>:
 801c264:	4402      	add	r2, r0
 801c266:	4603      	mov	r3, r0
 801c268:	4293      	cmp	r3, r2
 801c26a:	d100      	bne.n	801c26e <memset+0xa>
 801c26c:	4770      	bx	lr
 801c26e:	f803 1b01 	strb.w	r1, [r3], #1
 801c272:	e7f9      	b.n	801c268 <memset+0x4>

0801c274 <_free_r>:
 801c274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c276:	2900      	cmp	r1, #0
 801c278:	d044      	beq.n	801c304 <_free_r+0x90>
 801c27a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c27e:	9001      	str	r0, [sp, #4]
 801c280:	2b00      	cmp	r3, #0
 801c282:	f1a1 0404 	sub.w	r4, r1, #4
 801c286:	bfb8      	it	lt
 801c288:	18e4      	addlt	r4, r4, r3
 801c28a:	f002 ffc5 	bl	801f218 <__malloc_lock>
 801c28e:	4a1e      	ldr	r2, [pc, #120]	; (801c308 <_free_r+0x94>)
 801c290:	9801      	ldr	r0, [sp, #4]
 801c292:	6813      	ldr	r3, [r2, #0]
 801c294:	b933      	cbnz	r3, 801c2a4 <_free_r+0x30>
 801c296:	6063      	str	r3, [r4, #4]
 801c298:	6014      	str	r4, [r2, #0]
 801c29a:	b003      	add	sp, #12
 801c29c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c2a0:	f002 bfc0 	b.w	801f224 <__malloc_unlock>
 801c2a4:	42a3      	cmp	r3, r4
 801c2a6:	d908      	bls.n	801c2ba <_free_r+0x46>
 801c2a8:	6825      	ldr	r5, [r4, #0]
 801c2aa:	1961      	adds	r1, r4, r5
 801c2ac:	428b      	cmp	r3, r1
 801c2ae:	bf01      	itttt	eq
 801c2b0:	6819      	ldreq	r1, [r3, #0]
 801c2b2:	685b      	ldreq	r3, [r3, #4]
 801c2b4:	1949      	addeq	r1, r1, r5
 801c2b6:	6021      	streq	r1, [r4, #0]
 801c2b8:	e7ed      	b.n	801c296 <_free_r+0x22>
 801c2ba:	461a      	mov	r2, r3
 801c2bc:	685b      	ldr	r3, [r3, #4]
 801c2be:	b10b      	cbz	r3, 801c2c4 <_free_r+0x50>
 801c2c0:	42a3      	cmp	r3, r4
 801c2c2:	d9fa      	bls.n	801c2ba <_free_r+0x46>
 801c2c4:	6811      	ldr	r1, [r2, #0]
 801c2c6:	1855      	adds	r5, r2, r1
 801c2c8:	42a5      	cmp	r5, r4
 801c2ca:	d10b      	bne.n	801c2e4 <_free_r+0x70>
 801c2cc:	6824      	ldr	r4, [r4, #0]
 801c2ce:	4421      	add	r1, r4
 801c2d0:	1854      	adds	r4, r2, r1
 801c2d2:	42a3      	cmp	r3, r4
 801c2d4:	6011      	str	r1, [r2, #0]
 801c2d6:	d1e0      	bne.n	801c29a <_free_r+0x26>
 801c2d8:	681c      	ldr	r4, [r3, #0]
 801c2da:	685b      	ldr	r3, [r3, #4]
 801c2dc:	6053      	str	r3, [r2, #4]
 801c2de:	4421      	add	r1, r4
 801c2e0:	6011      	str	r1, [r2, #0]
 801c2e2:	e7da      	b.n	801c29a <_free_r+0x26>
 801c2e4:	d902      	bls.n	801c2ec <_free_r+0x78>
 801c2e6:	230c      	movs	r3, #12
 801c2e8:	6003      	str	r3, [r0, #0]
 801c2ea:	e7d6      	b.n	801c29a <_free_r+0x26>
 801c2ec:	6825      	ldr	r5, [r4, #0]
 801c2ee:	1961      	adds	r1, r4, r5
 801c2f0:	428b      	cmp	r3, r1
 801c2f2:	bf04      	itt	eq
 801c2f4:	6819      	ldreq	r1, [r3, #0]
 801c2f6:	685b      	ldreq	r3, [r3, #4]
 801c2f8:	6063      	str	r3, [r4, #4]
 801c2fa:	bf04      	itt	eq
 801c2fc:	1949      	addeq	r1, r1, r5
 801c2fe:	6021      	streq	r1, [r4, #0]
 801c300:	6054      	str	r4, [r2, #4]
 801c302:	e7ca      	b.n	801c29a <_free_r+0x26>
 801c304:	b003      	add	sp, #12
 801c306:	bd30      	pop	{r4, r5, pc}
 801c308:	20014240 	.word	0x20014240

0801c30c <sbrk_aligned>:
 801c30c:	b570      	push	{r4, r5, r6, lr}
 801c30e:	4e0e      	ldr	r6, [pc, #56]	; (801c348 <sbrk_aligned+0x3c>)
 801c310:	460c      	mov	r4, r1
 801c312:	6831      	ldr	r1, [r6, #0]
 801c314:	4605      	mov	r5, r0
 801c316:	b911      	cbnz	r1, 801c31e <sbrk_aligned+0x12>
 801c318:	f000 fcfe 	bl	801cd18 <_sbrk_r>
 801c31c:	6030      	str	r0, [r6, #0]
 801c31e:	4621      	mov	r1, r4
 801c320:	4628      	mov	r0, r5
 801c322:	f000 fcf9 	bl	801cd18 <_sbrk_r>
 801c326:	1c43      	adds	r3, r0, #1
 801c328:	d00a      	beq.n	801c340 <sbrk_aligned+0x34>
 801c32a:	1cc4      	adds	r4, r0, #3
 801c32c:	f024 0403 	bic.w	r4, r4, #3
 801c330:	42a0      	cmp	r0, r4
 801c332:	d007      	beq.n	801c344 <sbrk_aligned+0x38>
 801c334:	1a21      	subs	r1, r4, r0
 801c336:	4628      	mov	r0, r5
 801c338:	f000 fcee 	bl	801cd18 <_sbrk_r>
 801c33c:	3001      	adds	r0, #1
 801c33e:	d101      	bne.n	801c344 <sbrk_aligned+0x38>
 801c340:	f04f 34ff 	mov.w	r4, #4294967295
 801c344:	4620      	mov	r0, r4
 801c346:	bd70      	pop	{r4, r5, r6, pc}
 801c348:	20014244 	.word	0x20014244

0801c34c <_malloc_r>:
 801c34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c350:	1ccd      	adds	r5, r1, #3
 801c352:	f025 0503 	bic.w	r5, r5, #3
 801c356:	3508      	adds	r5, #8
 801c358:	2d0c      	cmp	r5, #12
 801c35a:	bf38      	it	cc
 801c35c:	250c      	movcc	r5, #12
 801c35e:	2d00      	cmp	r5, #0
 801c360:	4607      	mov	r7, r0
 801c362:	db01      	blt.n	801c368 <_malloc_r+0x1c>
 801c364:	42a9      	cmp	r1, r5
 801c366:	d905      	bls.n	801c374 <_malloc_r+0x28>
 801c368:	230c      	movs	r3, #12
 801c36a:	603b      	str	r3, [r7, #0]
 801c36c:	2600      	movs	r6, #0
 801c36e:	4630      	mov	r0, r6
 801c370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c374:	4e2e      	ldr	r6, [pc, #184]	; (801c430 <_malloc_r+0xe4>)
 801c376:	f002 ff4f 	bl	801f218 <__malloc_lock>
 801c37a:	6833      	ldr	r3, [r6, #0]
 801c37c:	461c      	mov	r4, r3
 801c37e:	bb34      	cbnz	r4, 801c3ce <_malloc_r+0x82>
 801c380:	4629      	mov	r1, r5
 801c382:	4638      	mov	r0, r7
 801c384:	f7ff ffc2 	bl	801c30c <sbrk_aligned>
 801c388:	1c43      	adds	r3, r0, #1
 801c38a:	4604      	mov	r4, r0
 801c38c:	d14d      	bne.n	801c42a <_malloc_r+0xde>
 801c38e:	6834      	ldr	r4, [r6, #0]
 801c390:	4626      	mov	r6, r4
 801c392:	2e00      	cmp	r6, #0
 801c394:	d140      	bne.n	801c418 <_malloc_r+0xcc>
 801c396:	6823      	ldr	r3, [r4, #0]
 801c398:	4631      	mov	r1, r6
 801c39a:	4638      	mov	r0, r7
 801c39c:	eb04 0803 	add.w	r8, r4, r3
 801c3a0:	f000 fcba 	bl	801cd18 <_sbrk_r>
 801c3a4:	4580      	cmp	r8, r0
 801c3a6:	d13a      	bne.n	801c41e <_malloc_r+0xd2>
 801c3a8:	6821      	ldr	r1, [r4, #0]
 801c3aa:	3503      	adds	r5, #3
 801c3ac:	1a6d      	subs	r5, r5, r1
 801c3ae:	f025 0503 	bic.w	r5, r5, #3
 801c3b2:	3508      	adds	r5, #8
 801c3b4:	2d0c      	cmp	r5, #12
 801c3b6:	bf38      	it	cc
 801c3b8:	250c      	movcc	r5, #12
 801c3ba:	4629      	mov	r1, r5
 801c3bc:	4638      	mov	r0, r7
 801c3be:	f7ff ffa5 	bl	801c30c <sbrk_aligned>
 801c3c2:	3001      	adds	r0, #1
 801c3c4:	d02b      	beq.n	801c41e <_malloc_r+0xd2>
 801c3c6:	6823      	ldr	r3, [r4, #0]
 801c3c8:	442b      	add	r3, r5
 801c3ca:	6023      	str	r3, [r4, #0]
 801c3cc:	e00e      	b.n	801c3ec <_malloc_r+0xa0>
 801c3ce:	6822      	ldr	r2, [r4, #0]
 801c3d0:	1b52      	subs	r2, r2, r5
 801c3d2:	d41e      	bmi.n	801c412 <_malloc_r+0xc6>
 801c3d4:	2a0b      	cmp	r2, #11
 801c3d6:	d916      	bls.n	801c406 <_malloc_r+0xba>
 801c3d8:	1961      	adds	r1, r4, r5
 801c3da:	42a3      	cmp	r3, r4
 801c3dc:	6025      	str	r5, [r4, #0]
 801c3de:	bf18      	it	ne
 801c3e0:	6059      	strne	r1, [r3, #4]
 801c3e2:	6863      	ldr	r3, [r4, #4]
 801c3e4:	bf08      	it	eq
 801c3e6:	6031      	streq	r1, [r6, #0]
 801c3e8:	5162      	str	r2, [r4, r5]
 801c3ea:	604b      	str	r3, [r1, #4]
 801c3ec:	4638      	mov	r0, r7
 801c3ee:	f104 060b 	add.w	r6, r4, #11
 801c3f2:	f002 ff17 	bl	801f224 <__malloc_unlock>
 801c3f6:	f026 0607 	bic.w	r6, r6, #7
 801c3fa:	1d23      	adds	r3, r4, #4
 801c3fc:	1af2      	subs	r2, r6, r3
 801c3fe:	d0b6      	beq.n	801c36e <_malloc_r+0x22>
 801c400:	1b9b      	subs	r3, r3, r6
 801c402:	50a3      	str	r3, [r4, r2]
 801c404:	e7b3      	b.n	801c36e <_malloc_r+0x22>
 801c406:	6862      	ldr	r2, [r4, #4]
 801c408:	42a3      	cmp	r3, r4
 801c40a:	bf0c      	ite	eq
 801c40c:	6032      	streq	r2, [r6, #0]
 801c40e:	605a      	strne	r2, [r3, #4]
 801c410:	e7ec      	b.n	801c3ec <_malloc_r+0xa0>
 801c412:	4623      	mov	r3, r4
 801c414:	6864      	ldr	r4, [r4, #4]
 801c416:	e7b2      	b.n	801c37e <_malloc_r+0x32>
 801c418:	4634      	mov	r4, r6
 801c41a:	6876      	ldr	r6, [r6, #4]
 801c41c:	e7b9      	b.n	801c392 <_malloc_r+0x46>
 801c41e:	230c      	movs	r3, #12
 801c420:	603b      	str	r3, [r7, #0]
 801c422:	4638      	mov	r0, r7
 801c424:	f002 fefe 	bl	801f224 <__malloc_unlock>
 801c428:	e7a1      	b.n	801c36e <_malloc_r+0x22>
 801c42a:	6025      	str	r5, [r4, #0]
 801c42c:	e7de      	b.n	801c3ec <_malloc_r+0xa0>
 801c42e:	bf00      	nop
 801c430:	20014240 	.word	0x20014240

0801c434 <__cvt>:
 801c434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c438:	ec55 4b10 	vmov	r4, r5, d0
 801c43c:	2d00      	cmp	r5, #0
 801c43e:	460e      	mov	r6, r1
 801c440:	4619      	mov	r1, r3
 801c442:	462b      	mov	r3, r5
 801c444:	bfbb      	ittet	lt
 801c446:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801c44a:	461d      	movlt	r5, r3
 801c44c:	2300      	movge	r3, #0
 801c44e:	232d      	movlt	r3, #45	; 0x2d
 801c450:	700b      	strb	r3, [r1, #0]
 801c452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c454:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801c458:	4691      	mov	r9, r2
 801c45a:	f023 0820 	bic.w	r8, r3, #32
 801c45e:	bfbc      	itt	lt
 801c460:	4622      	movlt	r2, r4
 801c462:	4614      	movlt	r4, r2
 801c464:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c468:	d005      	beq.n	801c476 <__cvt+0x42>
 801c46a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801c46e:	d100      	bne.n	801c472 <__cvt+0x3e>
 801c470:	3601      	adds	r6, #1
 801c472:	2102      	movs	r1, #2
 801c474:	e000      	b.n	801c478 <__cvt+0x44>
 801c476:	2103      	movs	r1, #3
 801c478:	ab03      	add	r3, sp, #12
 801c47a:	9301      	str	r3, [sp, #4]
 801c47c:	ab02      	add	r3, sp, #8
 801c47e:	9300      	str	r3, [sp, #0]
 801c480:	ec45 4b10 	vmov	d0, r4, r5
 801c484:	4653      	mov	r3, sl
 801c486:	4632      	mov	r2, r6
 801c488:	f001 fd1e 	bl	801dec8 <_dtoa_r>
 801c48c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801c490:	4607      	mov	r7, r0
 801c492:	d102      	bne.n	801c49a <__cvt+0x66>
 801c494:	f019 0f01 	tst.w	r9, #1
 801c498:	d022      	beq.n	801c4e0 <__cvt+0xac>
 801c49a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c49e:	eb07 0906 	add.w	r9, r7, r6
 801c4a2:	d110      	bne.n	801c4c6 <__cvt+0x92>
 801c4a4:	783b      	ldrb	r3, [r7, #0]
 801c4a6:	2b30      	cmp	r3, #48	; 0x30
 801c4a8:	d10a      	bne.n	801c4c0 <__cvt+0x8c>
 801c4aa:	2200      	movs	r2, #0
 801c4ac:	2300      	movs	r3, #0
 801c4ae:	4620      	mov	r0, r4
 801c4b0:	4629      	mov	r1, r5
 801c4b2:	f7e8 fb91 	bl	8004bd8 <__aeabi_dcmpeq>
 801c4b6:	b918      	cbnz	r0, 801c4c0 <__cvt+0x8c>
 801c4b8:	f1c6 0601 	rsb	r6, r6, #1
 801c4bc:	f8ca 6000 	str.w	r6, [sl]
 801c4c0:	f8da 3000 	ldr.w	r3, [sl]
 801c4c4:	4499      	add	r9, r3
 801c4c6:	2200      	movs	r2, #0
 801c4c8:	2300      	movs	r3, #0
 801c4ca:	4620      	mov	r0, r4
 801c4cc:	4629      	mov	r1, r5
 801c4ce:	f7e8 fb83 	bl	8004bd8 <__aeabi_dcmpeq>
 801c4d2:	b108      	cbz	r0, 801c4d8 <__cvt+0xa4>
 801c4d4:	f8cd 900c 	str.w	r9, [sp, #12]
 801c4d8:	2230      	movs	r2, #48	; 0x30
 801c4da:	9b03      	ldr	r3, [sp, #12]
 801c4dc:	454b      	cmp	r3, r9
 801c4de:	d307      	bcc.n	801c4f0 <__cvt+0xbc>
 801c4e0:	9b03      	ldr	r3, [sp, #12]
 801c4e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c4e4:	1bdb      	subs	r3, r3, r7
 801c4e6:	4638      	mov	r0, r7
 801c4e8:	6013      	str	r3, [r2, #0]
 801c4ea:	b004      	add	sp, #16
 801c4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4f0:	1c59      	adds	r1, r3, #1
 801c4f2:	9103      	str	r1, [sp, #12]
 801c4f4:	701a      	strb	r2, [r3, #0]
 801c4f6:	e7f0      	b.n	801c4da <__cvt+0xa6>

0801c4f8 <__exponent>:
 801c4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c4fa:	4603      	mov	r3, r0
 801c4fc:	2900      	cmp	r1, #0
 801c4fe:	bfb8      	it	lt
 801c500:	4249      	neglt	r1, r1
 801c502:	f803 2b02 	strb.w	r2, [r3], #2
 801c506:	bfb4      	ite	lt
 801c508:	222d      	movlt	r2, #45	; 0x2d
 801c50a:	222b      	movge	r2, #43	; 0x2b
 801c50c:	2909      	cmp	r1, #9
 801c50e:	7042      	strb	r2, [r0, #1]
 801c510:	dd2a      	ble.n	801c568 <__exponent+0x70>
 801c512:	f10d 0407 	add.w	r4, sp, #7
 801c516:	46a4      	mov	ip, r4
 801c518:	270a      	movs	r7, #10
 801c51a:	46a6      	mov	lr, r4
 801c51c:	460a      	mov	r2, r1
 801c51e:	fb91 f6f7 	sdiv	r6, r1, r7
 801c522:	fb07 1516 	mls	r5, r7, r6, r1
 801c526:	3530      	adds	r5, #48	; 0x30
 801c528:	2a63      	cmp	r2, #99	; 0x63
 801c52a:	f104 34ff 	add.w	r4, r4, #4294967295
 801c52e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801c532:	4631      	mov	r1, r6
 801c534:	dcf1      	bgt.n	801c51a <__exponent+0x22>
 801c536:	3130      	adds	r1, #48	; 0x30
 801c538:	f1ae 0502 	sub.w	r5, lr, #2
 801c53c:	f804 1c01 	strb.w	r1, [r4, #-1]
 801c540:	1c44      	adds	r4, r0, #1
 801c542:	4629      	mov	r1, r5
 801c544:	4561      	cmp	r1, ip
 801c546:	d30a      	bcc.n	801c55e <__exponent+0x66>
 801c548:	f10d 0209 	add.w	r2, sp, #9
 801c54c:	eba2 020e 	sub.w	r2, r2, lr
 801c550:	4565      	cmp	r5, ip
 801c552:	bf88      	it	hi
 801c554:	2200      	movhi	r2, #0
 801c556:	4413      	add	r3, r2
 801c558:	1a18      	subs	r0, r3, r0
 801c55a:	b003      	add	sp, #12
 801c55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c55e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c562:	f804 2f01 	strb.w	r2, [r4, #1]!
 801c566:	e7ed      	b.n	801c544 <__exponent+0x4c>
 801c568:	2330      	movs	r3, #48	; 0x30
 801c56a:	3130      	adds	r1, #48	; 0x30
 801c56c:	7083      	strb	r3, [r0, #2]
 801c56e:	70c1      	strb	r1, [r0, #3]
 801c570:	1d03      	adds	r3, r0, #4
 801c572:	e7f1      	b.n	801c558 <__exponent+0x60>

0801c574 <_printf_float>:
 801c574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c578:	ed2d 8b02 	vpush	{d8}
 801c57c:	b08d      	sub	sp, #52	; 0x34
 801c57e:	460c      	mov	r4, r1
 801c580:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801c584:	4616      	mov	r6, r2
 801c586:	461f      	mov	r7, r3
 801c588:	4605      	mov	r5, r0
 801c58a:	f002 fe1d 	bl	801f1c8 <_localeconv_r>
 801c58e:	f8d0 a000 	ldr.w	sl, [r0]
 801c592:	4650      	mov	r0, sl
 801c594:	f7e7 fe9e 	bl	80042d4 <strlen>
 801c598:	2300      	movs	r3, #0
 801c59a:	930a      	str	r3, [sp, #40]	; 0x28
 801c59c:	6823      	ldr	r3, [r4, #0]
 801c59e:	9305      	str	r3, [sp, #20]
 801c5a0:	f8d8 3000 	ldr.w	r3, [r8]
 801c5a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 801c5a8:	3307      	adds	r3, #7
 801c5aa:	f023 0307 	bic.w	r3, r3, #7
 801c5ae:	f103 0208 	add.w	r2, r3, #8
 801c5b2:	f8c8 2000 	str.w	r2, [r8]
 801c5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801c5be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801c5c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c5c6:	9307      	str	r3, [sp, #28]
 801c5c8:	f8cd 8018 	str.w	r8, [sp, #24]
 801c5cc:	ee08 0a10 	vmov	s16, r0
 801c5d0:	4b9f      	ldr	r3, [pc, #636]	; (801c850 <_printf_float+0x2dc>)
 801c5d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c5d6:	f04f 32ff 	mov.w	r2, #4294967295
 801c5da:	f7e8 fb2f 	bl	8004c3c <__aeabi_dcmpun>
 801c5de:	bb88      	cbnz	r0, 801c644 <_printf_float+0xd0>
 801c5e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c5e4:	4b9a      	ldr	r3, [pc, #616]	; (801c850 <_printf_float+0x2dc>)
 801c5e6:	f04f 32ff 	mov.w	r2, #4294967295
 801c5ea:	f7e8 fb09 	bl	8004c00 <__aeabi_dcmple>
 801c5ee:	bb48      	cbnz	r0, 801c644 <_printf_float+0xd0>
 801c5f0:	2200      	movs	r2, #0
 801c5f2:	2300      	movs	r3, #0
 801c5f4:	4640      	mov	r0, r8
 801c5f6:	4649      	mov	r1, r9
 801c5f8:	f7e8 faf8 	bl	8004bec <__aeabi_dcmplt>
 801c5fc:	b110      	cbz	r0, 801c604 <_printf_float+0x90>
 801c5fe:	232d      	movs	r3, #45	; 0x2d
 801c600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c604:	4b93      	ldr	r3, [pc, #588]	; (801c854 <_printf_float+0x2e0>)
 801c606:	4894      	ldr	r0, [pc, #592]	; (801c858 <_printf_float+0x2e4>)
 801c608:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801c60c:	bf94      	ite	ls
 801c60e:	4698      	movls	r8, r3
 801c610:	4680      	movhi	r8, r0
 801c612:	2303      	movs	r3, #3
 801c614:	6123      	str	r3, [r4, #16]
 801c616:	9b05      	ldr	r3, [sp, #20]
 801c618:	f023 0204 	bic.w	r2, r3, #4
 801c61c:	6022      	str	r2, [r4, #0]
 801c61e:	f04f 0900 	mov.w	r9, #0
 801c622:	9700      	str	r7, [sp, #0]
 801c624:	4633      	mov	r3, r6
 801c626:	aa0b      	add	r2, sp, #44	; 0x2c
 801c628:	4621      	mov	r1, r4
 801c62a:	4628      	mov	r0, r5
 801c62c:	f000 f9d8 	bl	801c9e0 <_printf_common>
 801c630:	3001      	adds	r0, #1
 801c632:	f040 8090 	bne.w	801c756 <_printf_float+0x1e2>
 801c636:	f04f 30ff 	mov.w	r0, #4294967295
 801c63a:	b00d      	add	sp, #52	; 0x34
 801c63c:	ecbd 8b02 	vpop	{d8}
 801c640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c644:	4642      	mov	r2, r8
 801c646:	464b      	mov	r3, r9
 801c648:	4640      	mov	r0, r8
 801c64a:	4649      	mov	r1, r9
 801c64c:	f7e8 faf6 	bl	8004c3c <__aeabi_dcmpun>
 801c650:	b140      	cbz	r0, 801c664 <_printf_float+0xf0>
 801c652:	464b      	mov	r3, r9
 801c654:	2b00      	cmp	r3, #0
 801c656:	bfbc      	itt	lt
 801c658:	232d      	movlt	r3, #45	; 0x2d
 801c65a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801c65e:	487f      	ldr	r0, [pc, #508]	; (801c85c <_printf_float+0x2e8>)
 801c660:	4b7f      	ldr	r3, [pc, #508]	; (801c860 <_printf_float+0x2ec>)
 801c662:	e7d1      	b.n	801c608 <_printf_float+0x94>
 801c664:	6863      	ldr	r3, [r4, #4]
 801c666:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801c66a:	9206      	str	r2, [sp, #24]
 801c66c:	1c5a      	adds	r2, r3, #1
 801c66e:	d13f      	bne.n	801c6f0 <_printf_float+0x17c>
 801c670:	2306      	movs	r3, #6
 801c672:	6063      	str	r3, [r4, #4]
 801c674:	9b05      	ldr	r3, [sp, #20]
 801c676:	6861      	ldr	r1, [r4, #4]
 801c678:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801c67c:	2300      	movs	r3, #0
 801c67e:	9303      	str	r3, [sp, #12]
 801c680:	ab0a      	add	r3, sp, #40	; 0x28
 801c682:	e9cd b301 	strd	fp, r3, [sp, #4]
 801c686:	ab09      	add	r3, sp, #36	; 0x24
 801c688:	ec49 8b10 	vmov	d0, r8, r9
 801c68c:	9300      	str	r3, [sp, #0]
 801c68e:	6022      	str	r2, [r4, #0]
 801c690:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801c694:	4628      	mov	r0, r5
 801c696:	f7ff fecd 	bl	801c434 <__cvt>
 801c69a:	9b06      	ldr	r3, [sp, #24]
 801c69c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c69e:	2b47      	cmp	r3, #71	; 0x47
 801c6a0:	4680      	mov	r8, r0
 801c6a2:	d108      	bne.n	801c6b6 <_printf_float+0x142>
 801c6a4:	1cc8      	adds	r0, r1, #3
 801c6a6:	db02      	blt.n	801c6ae <_printf_float+0x13a>
 801c6a8:	6863      	ldr	r3, [r4, #4]
 801c6aa:	4299      	cmp	r1, r3
 801c6ac:	dd41      	ble.n	801c732 <_printf_float+0x1be>
 801c6ae:	f1ab 0b02 	sub.w	fp, fp, #2
 801c6b2:	fa5f fb8b 	uxtb.w	fp, fp
 801c6b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c6ba:	d820      	bhi.n	801c6fe <_printf_float+0x18a>
 801c6bc:	3901      	subs	r1, #1
 801c6be:	465a      	mov	r2, fp
 801c6c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801c6c4:	9109      	str	r1, [sp, #36]	; 0x24
 801c6c6:	f7ff ff17 	bl	801c4f8 <__exponent>
 801c6ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c6cc:	1813      	adds	r3, r2, r0
 801c6ce:	2a01      	cmp	r2, #1
 801c6d0:	4681      	mov	r9, r0
 801c6d2:	6123      	str	r3, [r4, #16]
 801c6d4:	dc02      	bgt.n	801c6dc <_printf_float+0x168>
 801c6d6:	6822      	ldr	r2, [r4, #0]
 801c6d8:	07d2      	lsls	r2, r2, #31
 801c6da:	d501      	bpl.n	801c6e0 <_printf_float+0x16c>
 801c6dc:	3301      	adds	r3, #1
 801c6de:	6123      	str	r3, [r4, #16]
 801c6e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d09c      	beq.n	801c622 <_printf_float+0xae>
 801c6e8:	232d      	movs	r3, #45	; 0x2d
 801c6ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c6ee:	e798      	b.n	801c622 <_printf_float+0xae>
 801c6f0:	9a06      	ldr	r2, [sp, #24]
 801c6f2:	2a47      	cmp	r2, #71	; 0x47
 801c6f4:	d1be      	bne.n	801c674 <_printf_float+0x100>
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d1bc      	bne.n	801c674 <_printf_float+0x100>
 801c6fa:	2301      	movs	r3, #1
 801c6fc:	e7b9      	b.n	801c672 <_printf_float+0xfe>
 801c6fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801c702:	d118      	bne.n	801c736 <_printf_float+0x1c2>
 801c704:	2900      	cmp	r1, #0
 801c706:	6863      	ldr	r3, [r4, #4]
 801c708:	dd0b      	ble.n	801c722 <_printf_float+0x1ae>
 801c70a:	6121      	str	r1, [r4, #16]
 801c70c:	b913      	cbnz	r3, 801c714 <_printf_float+0x1a0>
 801c70e:	6822      	ldr	r2, [r4, #0]
 801c710:	07d0      	lsls	r0, r2, #31
 801c712:	d502      	bpl.n	801c71a <_printf_float+0x1a6>
 801c714:	3301      	adds	r3, #1
 801c716:	440b      	add	r3, r1
 801c718:	6123      	str	r3, [r4, #16]
 801c71a:	65a1      	str	r1, [r4, #88]	; 0x58
 801c71c:	f04f 0900 	mov.w	r9, #0
 801c720:	e7de      	b.n	801c6e0 <_printf_float+0x16c>
 801c722:	b913      	cbnz	r3, 801c72a <_printf_float+0x1b6>
 801c724:	6822      	ldr	r2, [r4, #0]
 801c726:	07d2      	lsls	r2, r2, #31
 801c728:	d501      	bpl.n	801c72e <_printf_float+0x1ba>
 801c72a:	3302      	adds	r3, #2
 801c72c:	e7f4      	b.n	801c718 <_printf_float+0x1a4>
 801c72e:	2301      	movs	r3, #1
 801c730:	e7f2      	b.n	801c718 <_printf_float+0x1a4>
 801c732:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801c736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c738:	4299      	cmp	r1, r3
 801c73a:	db05      	blt.n	801c748 <_printf_float+0x1d4>
 801c73c:	6823      	ldr	r3, [r4, #0]
 801c73e:	6121      	str	r1, [r4, #16]
 801c740:	07d8      	lsls	r0, r3, #31
 801c742:	d5ea      	bpl.n	801c71a <_printf_float+0x1a6>
 801c744:	1c4b      	adds	r3, r1, #1
 801c746:	e7e7      	b.n	801c718 <_printf_float+0x1a4>
 801c748:	2900      	cmp	r1, #0
 801c74a:	bfd4      	ite	le
 801c74c:	f1c1 0202 	rsble	r2, r1, #2
 801c750:	2201      	movgt	r2, #1
 801c752:	4413      	add	r3, r2
 801c754:	e7e0      	b.n	801c718 <_printf_float+0x1a4>
 801c756:	6823      	ldr	r3, [r4, #0]
 801c758:	055a      	lsls	r2, r3, #21
 801c75a:	d407      	bmi.n	801c76c <_printf_float+0x1f8>
 801c75c:	6923      	ldr	r3, [r4, #16]
 801c75e:	4642      	mov	r2, r8
 801c760:	4631      	mov	r1, r6
 801c762:	4628      	mov	r0, r5
 801c764:	47b8      	blx	r7
 801c766:	3001      	adds	r0, #1
 801c768:	d12c      	bne.n	801c7c4 <_printf_float+0x250>
 801c76a:	e764      	b.n	801c636 <_printf_float+0xc2>
 801c76c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c770:	f240 80e0 	bls.w	801c934 <_printf_float+0x3c0>
 801c774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c778:	2200      	movs	r2, #0
 801c77a:	2300      	movs	r3, #0
 801c77c:	f7e8 fa2c 	bl	8004bd8 <__aeabi_dcmpeq>
 801c780:	2800      	cmp	r0, #0
 801c782:	d034      	beq.n	801c7ee <_printf_float+0x27a>
 801c784:	4a37      	ldr	r2, [pc, #220]	; (801c864 <_printf_float+0x2f0>)
 801c786:	2301      	movs	r3, #1
 801c788:	4631      	mov	r1, r6
 801c78a:	4628      	mov	r0, r5
 801c78c:	47b8      	blx	r7
 801c78e:	3001      	adds	r0, #1
 801c790:	f43f af51 	beq.w	801c636 <_printf_float+0xc2>
 801c794:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c798:	429a      	cmp	r2, r3
 801c79a:	db02      	blt.n	801c7a2 <_printf_float+0x22e>
 801c79c:	6823      	ldr	r3, [r4, #0]
 801c79e:	07d8      	lsls	r0, r3, #31
 801c7a0:	d510      	bpl.n	801c7c4 <_printf_float+0x250>
 801c7a2:	ee18 3a10 	vmov	r3, s16
 801c7a6:	4652      	mov	r2, sl
 801c7a8:	4631      	mov	r1, r6
 801c7aa:	4628      	mov	r0, r5
 801c7ac:	47b8      	blx	r7
 801c7ae:	3001      	adds	r0, #1
 801c7b0:	f43f af41 	beq.w	801c636 <_printf_float+0xc2>
 801c7b4:	f04f 0800 	mov.w	r8, #0
 801c7b8:	f104 091a 	add.w	r9, r4, #26
 801c7bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c7be:	3b01      	subs	r3, #1
 801c7c0:	4543      	cmp	r3, r8
 801c7c2:	dc09      	bgt.n	801c7d8 <_printf_float+0x264>
 801c7c4:	6823      	ldr	r3, [r4, #0]
 801c7c6:	079b      	lsls	r3, r3, #30
 801c7c8:	f100 8105 	bmi.w	801c9d6 <_printf_float+0x462>
 801c7cc:	68e0      	ldr	r0, [r4, #12]
 801c7ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c7d0:	4298      	cmp	r0, r3
 801c7d2:	bfb8      	it	lt
 801c7d4:	4618      	movlt	r0, r3
 801c7d6:	e730      	b.n	801c63a <_printf_float+0xc6>
 801c7d8:	2301      	movs	r3, #1
 801c7da:	464a      	mov	r2, r9
 801c7dc:	4631      	mov	r1, r6
 801c7de:	4628      	mov	r0, r5
 801c7e0:	47b8      	blx	r7
 801c7e2:	3001      	adds	r0, #1
 801c7e4:	f43f af27 	beq.w	801c636 <_printf_float+0xc2>
 801c7e8:	f108 0801 	add.w	r8, r8, #1
 801c7ec:	e7e6      	b.n	801c7bc <_printf_float+0x248>
 801c7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	dc39      	bgt.n	801c868 <_printf_float+0x2f4>
 801c7f4:	4a1b      	ldr	r2, [pc, #108]	; (801c864 <_printf_float+0x2f0>)
 801c7f6:	2301      	movs	r3, #1
 801c7f8:	4631      	mov	r1, r6
 801c7fa:	4628      	mov	r0, r5
 801c7fc:	47b8      	blx	r7
 801c7fe:	3001      	adds	r0, #1
 801c800:	f43f af19 	beq.w	801c636 <_printf_float+0xc2>
 801c804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c808:	4313      	orrs	r3, r2
 801c80a:	d102      	bne.n	801c812 <_printf_float+0x29e>
 801c80c:	6823      	ldr	r3, [r4, #0]
 801c80e:	07d9      	lsls	r1, r3, #31
 801c810:	d5d8      	bpl.n	801c7c4 <_printf_float+0x250>
 801c812:	ee18 3a10 	vmov	r3, s16
 801c816:	4652      	mov	r2, sl
 801c818:	4631      	mov	r1, r6
 801c81a:	4628      	mov	r0, r5
 801c81c:	47b8      	blx	r7
 801c81e:	3001      	adds	r0, #1
 801c820:	f43f af09 	beq.w	801c636 <_printf_float+0xc2>
 801c824:	f04f 0900 	mov.w	r9, #0
 801c828:	f104 0a1a 	add.w	sl, r4, #26
 801c82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c82e:	425b      	negs	r3, r3
 801c830:	454b      	cmp	r3, r9
 801c832:	dc01      	bgt.n	801c838 <_printf_float+0x2c4>
 801c834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c836:	e792      	b.n	801c75e <_printf_float+0x1ea>
 801c838:	2301      	movs	r3, #1
 801c83a:	4652      	mov	r2, sl
 801c83c:	4631      	mov	r1, r6
 801c83e:	4628      	mov	r0, r5
 801c840:	47b8      	blx	r7
 801c842:	3001      	adds	r0, #1
 801c844:	f43f aef7 	beq.w	801c636 <_printf_float+0xc2>
 801c848:	f109 0901 	add.w	r9, r9, #1
 801c84c:	e7ee      	b.n	801c82c <_printf_float+0x2b8>
 801c84e:	bf00      	nop
 801c850:	7fefffff 	.word	0x7fefffff
 801c854:	0803955c 	.word	0x0803955c
 801c858:	08039560 	.word	0x08039560
 801c85c:	08039568 	.word	0x08039568
 801c860:	08039564 	.word	0x08039564
 801c864:	08023e03 	.word	0x08023e03
 801c868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c86a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c86c:	429a      	cmp	r2, r3
 801c86e:	bfa8      	it	ge
 801c870:	461a      	movge	r2, r3
 801c872:	2a00      	cmp	r2, #0
 801c874:	4691      	mov	r9, r2
 801c876:	dc37      	bgt.n	801c8e8 <_printf_float+0x374>
 801c878:	f04f 0b00 	mov.w	fp, #0
 801c87c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c880:	f104 021a 	add.w	r2, r4, #26
 801c884:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c886:	9305      	str	r3, [sp, #20]
 801c888:	eba3 0309 	sub.w	r3, r3, r9
 801c88c:	455b      	cmp	r3, fp
 801c88e:	dc33      	bgt.n	801c8f8 <_printf_float+0x384>
 801c890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c894:	429a      	cmp	r2, r3
 801c896:	db3b      	blt.n	801c910 <_printf_float+0x39c>
 801c898:	6823      	ldr	r3, [r4, #0]
 801c89a:	07da      	lsls	r2, r3, #31
 801c89c:	d438      	bmi.n	801c910 <_printf_float+0x39c>
 801c89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c8a0:	9a05      	ldr	r2, [sp, #20]
 801c8a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c8a4:	1a9a      	subs	r2, r3, r2
 801c8a6:	eba3 0901 	sub.w	r9, r3, r1
 801c8aa:	4591      	cmp	r9, r2
 801c8ac:	bfa8      	it	ge
 801c8ae:	4691      	movge	r9, r2
 801c8b0:	f1b9 0f00 	cmp.w	r9, #0
 801c8b4:	dc35      	bgt.n	801c922 <_printf_float+0x3ae>
 801c8b6:	f04f 0800 	mov.w	r8, #0
 801c8ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c8be:	f104 0a1a 	add.w	sl, r4, #26
 801c8c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c8c6:	1a9b      	subs	r3, r3, r2
 801c8c8:	eba3 0309 	sub.w	r3, r3, r9
 801c8cc:	4543      	cmp	r3, r8
 801c8ce:	f77f af79 	ble.w	801c7c4 <_printf_float+0x250>
 801c8d2:	2301      	movs	r3, #1
 801c8d4:	4652      	mov	r2, sl
 801c8d6:	4631      	mov	r1, r6
 801c8d8:	4628      	mov	r0, r5
 801c8da:	47b8      	blx	r7
 801c8dc:	3001      	adds	r0, #1
 801c8de:	f43f aeaa 	beq.w	801c636 <_printf_float+0xc2>
 801c8e2:	f108 0801 	add.w	r8, r8, #1
 801c8e6:	e7ec      	b.n	801c8c2 <_printf_float+0x34e>
 801c8e8:	4613      	mov	r3, r2
 801c8ea:	4631      	mov	r1, r6
 801c8ec:	4642      	mov	r2, r8
 801c8ee:	4628      	mov	r0, r5
 801c8f0:	47b8      	blx	r7
 801c8f2:	3001      	adds	r0, #1
 801c8f4:	d1c0      	bne.n	801c878 <_printf_float+0x304>
 801c8f6:	e69e      	b.n	801c636 <_printf_float+0xc2>
 801c8f8:	2301      	movs	r3, #1
 801c8fa:	4631      	mov	r1, r6
 801c8fc:	4628      	mov	r0, r5
 801c8fe:	9205      	str	r2, [sp, #20]
 801c900:	47b8      	blx	r7
 801c902:	3001      	adds	r0, #1
 801c904:	f43f ae97 	beq.w	801c636 <_printf_float+0xc2>
 801c908:	9a05      	ldr	r2, [sp, #20]
 801c90a:	f10b 0b01 	add.w	fp, fp, #1
 801c90e:	e7b9      	b.n	801c884 <_printf_float+0x310>
 801c910:	ee18 3a10 	vmov	r3, s16
 801c914:	4652      	mov	r2, sl
 801c916:	4631      	mov	r1, r6
 801c918:	4628      	mov	r0, r5
 801c91a:	47b8      	blx	r7
 801c91c:	3001      	adds	r0, #1
 801c91e:	d1be      	bne.n	801c89e <_printf_float+0x32a>
 801c920:	e689      	b.n	801c636 <_printf_float+0xc2>
 801c922:	9a05      	ldr	r2, [sp, #20]
 801c924:	464b      	mov	r3, r9
 801c926:	4442      	add	r2, r8
 801c928:	4631      	mov	r1, r6
 801c92a:	4628      	mov	r0, r5
 801c92c:	47b8      	blx	r7
 801c92e:	3001      	adds	r0, #1
 801c930:	d1c1      	bne.n	801c8b6 <_printf_float+0x342>
 801c932:	e680      	b.n	801c636 <_printf_float+0xc2>
 801c934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c936:	2a01      	cmp	r2, #1
 801c938:	dc01      	bgt.n	801c93e <_printf_float+0x3ca>
 801c93a:	07db      	lsls	r3, r3, #31
 801c93c:	d538      	bpl.n	801c9b0 <_printf_float+0x43c>
 801c93e:	2301      	movs	r3, #1
 801c940:	4642      	mov	r2, r8
 801c942:	4631      	mov	r1, r6
 801c944:	4628      	mov	r0, r5
 801c946:	47b8      	blx	r7
 801c948:	3001      	adds	r0, #1
 801c94a:	f43f ae74 	beq.w	801c636 <_printf_float+0xc2>
 801c94e:	ee18 3a10 	vmov	r3, s16
 801c952:	4652      	mov	r2, sl
 801c954:	4631      	mov	r1, r6
 801c956:	4628      	mov	r0, r5
 801c958:	47b8      	blx	r7
 801c95a:	3001      	adds	r0, #1
 801c95c:	f43f ae6b 	beq.w	801c636 <_printf_float+0xc2>
 801c960:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c964:	2200      	movs	r2, #0
 801c966:	2300      	movs	r3, #0
 801c968:	f7e8 f936 	bl	8004bd8 <__aeabi_dcmpeq>
 801c96c:	b9d8      	cbnz	r0, 801c9a6 <_printf_float+0x432>
 801c96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c970:	f108 0201 	add.w	r2, r8, #1
 801c974:	3b01      	subs	r3, #1
 801c976:	4631      	mov	r1, r6
 801c978:	4628      	mov	r0, r5
 801c97a:	47b8      	blx	r7
 801c97c:	3001      	adds	r0, #1
 801c97e:	d10e      	bne.n	801c99e <_printf_float+0x42a>
 801c980:	e659      	b.n	801c636 <_printf_float+0xc2>
 801c982:	2301      	movs	r3, #1
 801c984:	4652      	mov	r2, sl
 801c986:	4631      	mov	r1, r6
 801c988:	4628      	mov	r0, r5
 801c98a:	47b8      	blx	r7
 801c98c:	3001      	adds	r0, #1
 801c98e:	f43f ae52 	beq.w	801c636 <_printf_float+0xc2>
 801c992:	f108 0801 	add.w	r8, r8, #1
 801c996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c998:	3b01      	subs	r3, #1
 801c99a:	4543      	cmp	r3, r8
 801c99c:	dcf1      	bgt.n	801c982 <_printf_float+0x40e>
 801c99e:	464b      	mov	r3, r9
 801c9a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801c9a4:	e6dc      	b.n	801c760 <_printf_float+0x1ec>
 801c9a6:	f04f 0800 	mov.w	r8, #0
 801c9aa:	f104 0a1a 	add.w	sl, r4, #26
 801c9ae:	e7f2      	b.n	801c996 <_printf_float+0x422>
 801c9b0:	2301      	movs	r3, #1
 801c9b2:	4642      	mov	r2, r8
 801c9b4:	e7df      	b.n	801c976 <_printf_float+0x402>
 801c9b6:	2301      	movs	r3, #1
 801c9b8:	464a      	mov	r2, r9
 801c9ba:	4631      	mov	r1, r6
 801c9bc:	4628      	mov	r0, r5
 801c9be:	47b8      	blx	r7
 801c9c0:	3001      	adds	r0, #1
 801c9c2:	f43f ae38 	beq.w	801c636 <_printf_float+0xc2>
 801c9c6:	f108 0801 	add.w	r8, r8, #1
 801c9ca:	68e3      	ldr	r3, [r4, #12]
 801c9cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c9ce:	1a5b      	subs	r3, r3, r1
 801c9d0:	4543      	cmp	r3, r8
 801c9d2:	dcf0      	bgt.n	801c9b6 <_printf_float+0x442>
 801c9d4:	e6fa      	b.n	801c7cc <_printf_float+0x258>
 801c9d6:	f04f 0800 	mov.w	r8, #0
 801c9da:	f104 0919 	add.w	r9, r4, #25
 801c9de:	e7f4      	b.n	801c9ca <_printf_float+0x456>

0801c9e0 <_printf_common>:
 801c9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c9e4:	4616      	mov	r6, r2
 801c9e6:	4699      	mov	r9, r3
 801c9e8:	688a      	ldr	r2, [r1, #8]
 801c9ea:	690b      	ldr	r3, [r1, #16]
 801c9ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c9f0:	4293      	cmp	r3, r2
 801c9f2:	bfb8      	it	lt
 801c9f4:	4613      	movlt	r3, r2
 801c9f6:	6033      	str	r3, [r6, #0]
 801c9f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c9fc:	4607      	mov	r7, r0
 801c9fe:	460c      	mov	r4, r1
 801ca00:	b10a      	cbz	r2, 801ca06 <_printf_common+0x26>
 801ca02:	3301      	adds	r3, #1
 801ca04:	6033      	str	r3, [r6, #0]
 801ca06:	6823      	ldr	r3, [r4, #0]
 801ca08:	0699      	lsls	r1, r3, #26
 801ca0a:	bf42      	ittt	mi
 801ca0c:	6833      	ldrmi	r3, [r6, #0]
 801ca0e:	3302      	addmi	r3, #2
 801ca10:	6033      	strmi	r3, [r6, #0]
 801ca12:	6825      	ldr	r5, [r4, #0]
 801ca14:	f015 0506 	ands.w	r5, r5, #6
 801ca18:	d106      	bne.n	801ca28 <_printf_common+0x48>
 801ca1a:	f104 0a19 	add.w	sl, r4, #25
 801ca1e:	68e3      	ldr	r3, [r4, #12]
 801ca20:	6832      	ldr	r2, [r6, #0]
 801ca22:	1a9b      	subs	r3, r3, r2
 801ca24:	42ab      	cmp	r3, r5
 801ca26:	dc26      	bgt.n	801ca76 <_printf_common+0x96>
 801ca28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ca2c:	1e13      	subs	r3, r2, #0
 801ca2e:	6822      	ldr	r2, [r4, #0]
 801ca30:	bf18      	it	ne
 801ca32:	2301      	movne	r3, #1
 801ca34:	0692      	lsls	r2, r2, #26
 801ca36:	d42b      	bmi.n	801ca90 <_printf_common+0xb0>
 801ca38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ca3c:	4649      	mov	r1, r9
 801ca3e:	4638      	mov	r0, r7
 801ca40:	47c0      	blx	r8
 801ca42:	3001      	adds	r0, #1
 801ca44:	d01e      	beq.n	801ca84 <_printf_common+0xa4>
 801ca46:	6823      	ldr	r3, [r4, #0]
 801ca48:	68e5      	ldr	r5, [r4, #12]
 801ca4a:	6832      	ldr	r2, [r6, #0]
 801ca4c:	f003 0306 	and.w	r3, r3, #6
 801ca50:	2b04      	cmp	r3, #4
 801ca52:	bf08      	it	eq
 801ca54:	1aad      	subeq	r5, r5, r2
 801ca56:	68a3      	ldr	r3, [r4, #8]
 801ca58:	6922      	ldr	r2, [r4, #16]
 801ca5a:	bf0c      	ite	eq
 801ca5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ca60:	2500      	movne	r5, #0
 801ca62:	4293      	cmp	r3, r2
 801ca64:	bfc4      	itt	gt
 801ca66:	1a9b      	subgt	r3, r3, r2
 801ca68:	18ed      	addgt	r5, r5, r3
 801ca6a:	2600      	movs	r6, #0
 801ca6c:	341a      	adds	r4, #26
 801ca6e:	42b5      	cmp	r5, r6
 801ca70:	d11a      	bne.n	801caa8 <_printf_common+0xc8>
 801ca72:	2000      	movs	r0, #0
 801ca74:	e008      	b.n	801ca88 <_printf_common+0xa8>
 801ca76:	2301      	movs	r3, #1
 801ca78:	4652      	mov	r2, sl
 801ca7a:	4649      	mov	r1, r9
 801ca7c:	4638      	mov	r0, r7
 801ca7e:	47c0      	blx	r8
 801ca80:	3001      	adds	r0, #1
 801ca82:	d103      	bne.n	801ca8c <_printf_common+0xac>
 801ca84:	f04f 30ff 	mov.w	r0, #4294967295
 801ca88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca8c:	3501      	adds	r5, #1
 801ca8e:	e7c6      	b.n	801ca1e <_printf_common+0x3e>
 801ca90:	18e1      	adds	r1, r4, r3
 801ca92:	1c5a      	adds	r2, r3, #1
 801ca94:	2030      	movs	r0, #48	; 0x30
 801ca96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ca9a:	4422      	add	r2, r4
 801ca9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801caa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801caa4:	3302      	adds	r3, #2
 801caa6:	e7c7      	b.n	801ca38 <_printf_common+0x58>
 801caa8:	2301      	movs	r3, #1
 801caaa:	4622      	mov	r2, r4
 801caac:	4649      	mov	r1, r9
 801caae:	4638      	mov	r0, r7
 801cab0:	47c0      	blx	r8
 801cab2:	3001      	adds	r0, #1
 801cab4:	d0e6      	beq.n	801ca84 <_printf_common+0xa4>
 801cab6:	3601      	adds	r6, #1
 801cab8:	e7d9      	b.n	801ca6e <_printf_common+0x8e>
	...

0801cabc <_printf_i>:
 801cabc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cac0:	7e0f      	ldrb	r7, [r1, #24]
 801cac2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cac4:	2f78      	cmp	r7, #120	; 0x78
 801cac6:	4691      	mov	r9, r2
 801cac8:	4680      	mov	r8, r0
 801caca:	460c      	mov	r4, r1
 801cacc:	469a      	mov	sl, r3
 801cace:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801cad2:	d807      	bhi.n	801cae4 <_printf_i+0x28>
 801cad4:	2f62      	cmp	r7, #98	; 0x62
 801cad6:	d80a      	bhi.n	801caee <_printf_i+0x32>
 801cad8:	2f00      	cmp	r7, #0
 801cada:	f000 80d8 	beq.w	801cc8e <_printf_i+0x1d2>
 801cade:	2f58      	cmp	r7, #88	; 0x58
 801cae0:	f000 80a3 	beq.w	801cc2a <_printf_i+0x16e>
 801cae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801caec:	e03a      	b.n	801cb64 <_printf_i+0xa8>
 801caee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801caf2:	2b15      	cmp	r3, #21
 801caf4:	d8f6      	bhi.n	801cae4 <_printf_i+0x28>
 801caf6:	a101      	add	r1, pc, #4	; (adr r1, 801cafc <_printf_i+0x40>)
 801caf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cafc:	0801cb55 	.word	0x0801cb55
 801cb00:	0801cb69 	.word	0x0801cb69
 801cb04:	0801cae5 	.word	0x0801cae5
 801cb08:	0801cae5 	.word	0x0801cae5
 801cb0c:	0801cae5 	.word	0x0801cae5
 801cb10:	0801cae5 	.word	0x0801cae5
 801cb14:	0801cb69 	.word	0x0801cb69
 801cb18:	0801cae5 	.word	0x0801cae5
 801cb1c:	0801cae5 	.word	0x0801cae5
 801cb20:	0801cae5 	.word	0x0801cae5
 801cb24:	0801cae5 	.word	0x0801cae5
 801cb28:	0801cc75 	.word	0x0801cc75
 801cb2c:	0801cb99 	.word	0x0801cb99
 801cb30:	0801cc57 	.word	0x0801cc57
 801cb34:	0801cae5 	.word	0x0801cae5
 801cb38:	0801cae5 	.word	0x0801cae5
 801cb3c:	0801cc97 	.word	0x0801cc97
 801cb40:	0801cae5 	.word	0x0801cae5
 801cb44:	0801cb99 	.word	0x0801cb99
 801cb48:	0801cae5 	.word	0x0801cae5
 801cb4c:	0801cae5 	.word	0x0801cae5
 801cb50:	0801cc5f 	.word	0x0801cc5f
 801cb54:	682b      	ldr	r3, [r5, #0]
 801cb56:	1d1a      	adds	r2, r3, #4
 801cb58:	681b      	ldr	r3, [r3, #0]
 801cb5a:	602a      	str	r2, [r5, #0]
 801cb5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cb60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801cb64:	2301      	movs	r3, #1
 801cb66:	e0a3      	b.n	801ccb0 <_printf_i+0x1f4>
 801cb68:	6820      	ldr	r0, [r4, #0]
 801cb6a:	6829      	ldr	r1, [r5, #0]
 801cb6c:	0606      	lsls	r6, r0, #24
 801cb6e:	f101 0304 	add.w	r3, r1, #4
 801cb72:	d50a      	bpl.n	801cb8a <_printf_i+0xce>
 801cb74:	680e      	ldr	r6, [r1, #0]
 801cb76:	602b      	str	r3, [r5, #0]
 801cb78:	2e00      	cmp	r6, #0
 801cb7a:	da03      	bge.n	801cb84 <_printf_i+0xc8>
 801cb7c:	232d      	movs	r3, #45	; 0x2d
 801cb7e:	4276      	negs	r6, r6
 801cb80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cb84:	485e      	ldr	r0, [pc, #376]	; (801cd00 <_printf_i+0x244>)
 801cb86:	230a      	movs	r3, #10
 801cb88:	e019      	b.n	801cbbe <_printf_i+0x102>
 801cb8a:	680e      	ldr	r6, [r1, #0]
 801cb8c:	602b      	str	r3, [r5, #0]
 801cb8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801cb92:	bf18      	it	ne
 801cb94:	b236      	sxthne	r6, r6
 801cb96:	e7ef      	b.n	801cb78 <_printf_i+0xbc>
 801cb98:	682b      	ldr	r3, [r5, #0]
 801cb9a:	6820      	ldr	r0, [r4, #0]
 801cb9c:	1d19      	adds	r1, r3, #4
 801cb9e:	6029      	str	r1, [r5, #0]
 801cba0:	0601      	lsls	r1, r0, #24
 801cba2:	d501      	bpl.n	801cba8 <_printf_i+0xec>
 801cba4:	681e      	ldr	r6, [r3, #0]
 801cba6:	e002      	b.n	801cbae <_printf_i+0xf2>
 801cba8:	0646      	lsls	r6, r0, #25
 801cbaa:	d5fb      	bpl.n	801cba4 <_printf_i+0xe8>
 801cbac:	881e      	ldrh	r6, [r3, #0]
 801cbae:	4854      	ldr	r0, [pc, #336]	; (801cd00 <_printf_i+0x244>)
 801cbb0:	2f6f      	cmp	r7, #111	; 0x6f
 801cbb2:	bf0c      	ite	eq
 801cbb4:	2308      	moveq	r3, #8
 801cbb6:	230a      	movne	r3, #10
 801cbb8:	2100      	movs	r1, #0
 801cbba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801cbbe:	6865      	ldr	r5, [r4, #4]
 801cbc0:	60a5      	str	r5, [r4, #8]
 801cbc2:	2d00      	cmp	r5, #0
 801cbc4:	bfa2      	ittt	ge
 801cbc6:	6821      	ldrge	r1, [r4, #0]
 801cbc8:	f021 0104 	bicge.w	r1, r1, #4
 801cbcc:	6021      	strge	r1, [r4, #0]
 801cbce:	b90e      	cbnz	r6, 801cbd4 <_printf_i+0x118>
 801cbd0:	2d00      	cmp	r5, #0
 801cbd2:	d04d      	beq.n	801cc70 <_printf_i+0x1b4>
 801cbd4:	4615      	mov	r5, r2
 801cbd6:	fbb6 f1f3 	udiv	r1, r6, r3
 801cbda:	fb03 6711 	mls	r7, r3, r1, r6
 801cbde:	5dc7      	ldrb	r7, [r0, r7]
 801cbe0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801cbe4:	4637      	mov	r7, r6
 801cbe6:	42bb      	cmp	r3, r7
 801cbe8:	460e      	mov	r6, r1
 801cbea:	d9f4      	bls.n	801cbd6 <_printf_i+0x11a>
 801cbec:	2b08      	cmp	r3, #8
 801cbee:	d10b      	bne.n	801cc08 <_printf_i+0x14c>
 801cbf0:	6823      	ldr	r3, [r4, #0]
 801cbf2:	07de      	lsls	r6, r3, #31
 801cbf4:	d508      	bpl.n	801cc08 <_printf_i+0x14c>
 801cbf6:	6923      	ldr	r3, [r4, #16]
 801cbf8:	6861      	ldr	r1, [r4, #4]
 801cbfa:	4299      	cmp	r1, r3
 801cbfc:	bfde      	ittt	le
 801cbfe:	2330      	movle	r3, #48	; 0x30
 801cc00:	f805 3c01 	strble.w	r3, [r5, #-1]
 801cc04:	f105 35ff 	addle.w	r5, r5, #4294967295
 801cc08:	1b52      	subs	r2, r2, r5
 801cc0a:	6122      	str	r2, [r4, #16]
 801cc0c:	f8cd a000 	str.w	sl, [sp]
 801cc10:	464b      	mov	r3, r9
 801cc12:	aa03      	add	r2, sp, #12
 801cc14:	4621      	mov	r1, r4
 801cc16:	4640      	mov	r0, r8
 801cc18:	f7ff fee2 	bl	801c9e0 <_printf_common>
 801cc1c:	3001      	adds	r0, #1
 801cc1e:	d14c      	bne.n	801ccba <_printf_i+0x1fe>
 801cc20:	f04f 30ff 	mov.w	r0, #4294967295
 801cc24:	b004      	add	sp, #16
 801cc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc2a:	4835      	ldr	r0, [pc, #212]	; (801cd00 <_printf_i+0x244>)
 801cc2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801cc30:	6829      	ldr	r1, [r5, #0]
 801cc32:	6823      	ldr	r3, [r4, #0]
 801cc34:	f851 6b04 	ldr.w	r6, [r1], #4
 801cc38:	6029      	str	r1, [r5, #0]
 801cc3a:	061d      	lsls	r5, r3, #24
 801cc3c:	d514      	bpl.n	801cc68 <_printf_i+0x1ac>
 801cc3e:	07df      	lsls	r7, r3, #31
 801cc40:	bf44      	itt	mi
 801cc42:	f043 0320 	orrmi.w	r3, r3, #32
 801cc46:	6023      	strmi	r3, [r4, #0]
 801cc48:	b91e      	cbnz	r6, 801cc52 <_printf_i+0x196>
 801cc4a:	6823      	ldr	r3, [r4, #0]
 801cc4c:	f023 0320 	bic.w	r3, r3, #32
 801cc50:	6023      	str	r3, [r4, #0]
 801cc52:	2310      	movs	r3, #16
 801cc54:	e7b0      	b.n	801cbb8 <_printf_i+0xfc>
 801cc56:	6823      	ldr	r3, [r4, #0]
 801cc58:	f043 0320 	orr.w	r3, r3, #32
 801cc5c:	6023      	str	r3, [r4, #0]
 801cc5e:	2378      	movs	r3, #120	; 0x78
 801cc60:	4828      	ldr	r0, [pc, #160]	; (801cd04 <_printf_i+0x248>)
 801cc62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801cc66:	e7e3      	b.n	801cc30 <_printf_i+0x174>
 801cc68:	0659      	lsls	r1, r3, #25
 801cc6a:	bf48      	it	mi
 801cc6c:	b2b6      	uxthmi	r6, r6
 801cc6e:	e7e6      	b.n	801cc3e <_printf_i+0x182>
 801cc70:	4615      	mov	r5, r2
 801cc72:	e7bb      	b.n	801cbec <_printf_i+0x130>
 801cc74:	682b      	ldr	r3, [r5, #0]
 801cc76:	6826      	ldr	r6, [r4, #0]
 801cc78:	6961      	ldr	r1, [r4, #20]
 801cc7a:	1d18      	adds	r0, r3, #4
 801cc7c:	6028      	str	r0, [r5, #0]
 801cc7e:	0635      	lsls	r5, r6, #24
 801cc80:	681b      	ldr	r3, [r3, #0]
 801cc82:	d501      	bpl.n	801cc88 <_printf_i+0x1cc>
 801cc84:	6019      	str	r1, [r3, #0]
 801cc86:	e002      	b.n	801cc8e <_printf_i+0x1d2>
 801cc88:	0670      	lsls	r0, r6, #25
 801cc8a:	d5fb      	bpl.n	801cc84 <_printf_i+0x1c8>
 801cc8c:	8019      	strh	r1, [r3, #0]
 801cc8e:	2300      	movs	r3, #0
 801cc90:	6123      	str	r3, [r4, #16]
 801cc92:	4615      	mov	r5, r2
 801cc94:	e7ba      	b.n	801cc0c <_printf_i+0x150>
 801cc96:	682b      	ldr	r3, [r5, #0]
 801cc98:	1d1a      	adds	r2, r3, #4
 801cc9a:	602a      	str	r2, [r5, #0]
 801cc9c:	681d      	ldr	r5, [r3, #0]
 801cc9e:	6862      	ldr	r2, [r4, #4]
 801cca0:	2100      	movs	r1, #0
 801cca2:	4628      	mov	r0, r5
 801cca4:	f7e7 fb24 	bl	80042f0 <memchr>
 801cca8:	b108      	cbz	r0, 801ccae <_printf_i+0x1f2>
 801ccaa:	1b40      	subs	r0, r0, r5
 801ccac:	6060      	str	r0, [r4, #4]
 801ccae:	6863      	ldr	r3, [r4, #4]
 801ccb0:	6123      	str	r3, [r4, #16]
 801ccb2:	2300      	movs	r3, #0
 801ccb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ccb8:	e7a8      	b.n	801cc0c <_printf_i+0x150>
 801ccba:	6923      	ldr	r3, [r4, #16]
 801ccbc:	462a      	mov	r2, r5
 801ccbe:	4649      	mov	r1, r9
 801ccc0:	4640      	mov	r0, r8
 801ccc2:	47d0      	blx	sl
 801ccc4:	3001      	adds	r0, #1
 801ccc6:	d0ab      	beq.n	801cc20 <_printf_i+0x164>
 801ccc8:	6823      	ldr	r3, [r4, #0]
 801ccca:	079b      	lsls	r3, r3, #30
 801cccc:	d413      	bmi.n	801ccf6 <_printf_i+0x23a>
 801ccce:	68e0      	ldr	r0, [r4, #12]
 801ccd0:	9b03      	ldr	r3, [sp, #12]
 801ccd2:	4298      	cmp	r0, r3
 801ccd4:	bfb8      	it	lt
 801ccd6:	4618      	movlt	r0, r3
 801ccd8:	e7a4      	b.n	801cc24 <_printf_i+0x168>
 801ccda:	2301      	movs	r3, #1
 801ccdc:	4632      	mov	r2, r6
 801ccde:	4649      	mov	r1, r9
 801cce0:	4640      	mov	r0, r8
 801cce2:	47d0      	blx	sl
 801cce4:	3001      	adds	r0, #1
 801cce6:	d09b      	beq.n	801cc20 <_printf_i+0x164>
 801cce8:	3501      	adds	r5, #1
 801ccea:	68e3      	ldr	r3, [r4, #12]
 801ccec:	9903      	ldr	r1, [sp, #12]
 801ccee:	1a5b      	subs	r3, r3, r1
 801ccf0:	42ab      	cmp	r3, r5
 801ccf2:	dcf2      	bgt.n	801ccda <_printf_i+0x21e>
 801ccf4:	e7eb      	b.n	801ccce <_printf_i+0x212>
 801ccf6:	2500      	movs	r5, #0
 801ccf8:	f104 0619 	add.w	r6, r4, #25
 801ccfc:	e7f5      	b.n	801ccea <_printf_i+0x22e>
 801ccfe:	bf00      	nop
 801cd00:	0803956c 	.word	0x0803956c
 801cd04:	0803957d 	.word	0x0803957d

0801cd08 <realloc>:
 801cd08:	4b02      	ldr	r3, [pc, #8]	; (801cd14 <realloc+0xc>)
 801cd0a:	460a      	mov	r2, r1
 801cd0c:	4601      	mov	r1, r0
 801cd0e:	6818      	ldr	r0, [r3, #0]
 801cd10:	f002 bf65 	b.w	801fbde <_realloc_r>
 801cd14:	200005fc 	.word	0x200005fc

0801cd18 <_sbrk_r>:
 801cd18:	b538      	push	{r3, r4, r5, lr}
 801cd1a:	4d06      	ldr	r5, [pc, #24]	; (801cd34 <_sbrk_r+0x1c>)
 801cd1c:	2300      	movs	r3, #0
 801cd1e:	4604      	mov	r4, r0
 801cd20:	4608      	mov	r0, r1
 801cd22:	602b      	str	r3, [r5, #0]
 801cd24:	f7f8 fc88 	bl	8015638 <_sbrk>
 801cd28:	1c43      	adds	r3, r0, #1
 801cd2a:	d102      	bne.n	801cd32 <_sbrk_r+0x1a>
 801cd2c:	682b      	ldr	r3, [r5, #0]
 801cd2e:	b103      	cbz	r3, 801cd32 <_sbrk_r+0x1a>
 801cd30:	6023      	str	r3, [r4, #0]
 801cd32:	bd38      	pop	{r3, r4, r5, pc}
 801cd34:	20014248 	.word	0x20014248

0801cd38 <siprintf>:
 801cd38:	b40e      	push	{r1, r2, r3}
 801cd3a:	b500      	push	{lr}
 801cd3c:	b09c      	sub	sp, #112	; 0x70
 801cd3e:	ab1d      	add	r3, sp, #116	; 0x74
 801cd40:	9002      	str	r0, [sp, #8]
 801cd42:	9006      	str	r0, [sp, #24]
 801cd44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801cd48:	4809      	ldr	r0, [pc, #36]	; (801cd70 <siprintf+0x38>)
 801cd4a:	9107      	str	r1, [sp, #28]
 801cd4c:	9104      	str	r1, [sp, #16]
 801cd4e:	4909      	ldr	r1, [pc, #36]	; (801cd74 <siprintf+0x3c>)
 801cd50:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd54:	9105      	str	r1, [sp, #20]
 801cd56:	6800      	ldr	r0, [r0, #0]
 801cd58:	9301      	str	r3, [sp, #4]
 801cd5a:	a902      	add	r1, sp, #8
 801cd5c:	f002 ffca 	bl	801fcf4 <_svfiprintf_r>
 801cd60:	9b02      	ldr	r3, [sp, #8]
 801cd62:	2200      	movs	r2, #0
 801cd64:	701a      	strb	r2, [r3, #0]
 801cd66:	b01c      	add	sp, #112	; 0x70
 801cd68:	f85d eb04 	ldr.w	lr, [sp], #4
 801cd6c:	b003      	add	sp, #12
 801cd6e:	4770      	bx	lr
 801cd70:	200005fc 	.word	0x200005fc
 801cd74:	ffff0208 	.word	0xffff0208

0801cd78 <__sread>:
 801cd78:	b510      	push	{r4, lr}
 801cd7a:	460c      	mov	r4, r1
 801cd7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd80:	f003 f8b8 	bl	801fef4 <_read_r>
 801cd84:	2800      	cmp	r0, #0
 801cd86:	bfab      	itete	ge
 801cd88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801cd8a:	89a3      	ldrhlt	r3, [r4, #12]
 801cd8c:	181b      	addge	r3, r3, r0
 801cd8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cd92:	bfac      	ite	ge
 801cd94:	6563      	strge	r3, [r4, #84]	; 0x54
 801cd96:	81a3      	strhlt	r3, [r4, #12]
 801cd98:	bd10      	pop	{r4, pc}

0801cd9a <__swrite>:
 801cd9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd9e:	461f      	mov	r7, r3
 801cda0:	898b      	ldrh	r3, [r1, #12]
 801cda2:	05db      	lsls	r3, r3, #23
 801cda4:	4605      	mov	r5, r0
 801cda6:	460c      	mov	r4, r1
 801cda8:	4616      	mov	r6, r2
 801cdaa:	d505      	bpl.n	801cdb8 <__swrite+0x1e>
 801cdac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cdb0:	2302      	movs	r3, #2
 801cdb2:	2200      	movs	r2, #0
 801cdb4:	f002 fa0c 	bl	801f1d0 <_lseek_r>
 801cdb8:	89a3      	ldrh	r3, [r4, #12]
 801cdba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cdbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cdc2:	81a3      	strh	r3, [r4, #12]
 801cdc4:	4632      	mov	r2, r6
 801cdc6:	463b      	mov	r3, r7
 801cdc8:	4628      	mov	r0, r5
 801cdca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cdce:	f000 bf5f 	b.w	801dc90 <_write_r>

0801cdd2 <__sseek>:
 801cdd2:	b510      	push	{r4, lr}
 801cdd4:	460c      	mov	r4, r1
 801cdd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cdda:	f002 f9f9 	bl	801f1d0 <_lseek_r>
 801cdde:	1c43      	adds	r3, r0, #1
 801cde0:	89a3      	ldrh	r3, [r4, #12]
 801cde2:	bf15      	itete	ne
 801cde4:	6560      	strne	r0, [r4, #84]	; 0x54
 801cde6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cdea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cdee:	81a3      	strheq	r3, [r4, #12]
 801cdf0:	bf18      	it	ne
 801cdf2:	81a3      	strhne	r3, [r4, #12]
 801cdf4:	bd10      	pop	{r4, pc}

0801cdf6 <__sclose>:
 801cdf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cdfa:	f000 bfc9 	b.w	801dd90 <_close_r>

0801cdfe <strchr>:
 801cdfe:	b2c9      	uxtb	r1, r1
 801ce00:	4603      	mov	r3, r0
 801ce02:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ce06:	b11a      	cbz	r2, 801ce10 <strchr+0x12>
 801ce08:	428a      	cmp	r2, r1
 801ce0a:	d1f9      	bne.n	801ce00 <strchr+0x2>
 801ce0c:	4618      	mov	r0, r3
 801ce0e:	4770      	bx	lr
 801ce10:	2900      	cmp	r1, #0
 801ce12:	bf18      	it	ne
 801ce14:	2300      	movne	r3, #0
 801ce16:	e7f9      	b.n	801ce0c <strchr+0xe>

0801ce18 <strcpy>:
 801ce18:	4603      	mov	r3, r0
 801ce1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ce1e:	f803 2b01 	strb.w	r2, [r3], #1
 801ce22:	2a00      	cmp	r2, #0
 801ce24:	d1f9      	bne.n	801ce1a <strcpy+0x2>
 801ce26:	4770      	bx	lr

0801ce28 <strncmp>:
 801ce28:	b510      	push	{r4, lr}
 801ce2a:	b17a      	cbz	r2, 801ce4c <strncmp+0x24>
 801ce2c:	4603      	mov	r3, r0
 801ce2e:	3901      	subs	r1, #1
 801ce30:	1884      	adds	r4, r0, r2
 801ce32:	f813 0b01 	ldrb.w	r0, [r3], #1
 801ce36:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ce3a:	4290      	cmp	r0, r2
 801ce3c:	d101      	bne.n	801ce42 <strncmp+0x1a>
 801ce3e:	42a3      	cmp	r3, r4
 801ce40:	d101      	bne.n	801ce46 <strncmp+0x1e>
 801ce42:	1a80      	subs	r0, r0, r2
 801ce44:	bd10      	pop	{r4, pc}
 801ce46:	2800      	cmp	r0, #0
 801ce48:	d1f3      	bne.n	801ce32 <strncmp+0xa>
 801ce4a:	e7fa      	b.n	801ce42 <strncmp+0x1a>
 801ce4c:	4610      	mov	r0, r2
 801ce4e:	e7f9      	b.n	801ce44 <strncmp+0x1c>

0801ce50 <strncpy>:
 801ce50:	b510      	push	{r4, lr}
 801ce52:	3901      	subs	r1, #1
 801ce54:	4603      	mov	r3, r0
 801ce56:	b132      	cbz	r2, 801ce66 <strncpy+0x16>
 801ce58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ce5c:	f803 4b01 	strb.w	r4, [r3], #1
 801ce60:	3a01      	subs	r2, #1
 801ce62:	2c00      	cmp	r4, #0
 801ce64:	d1f7      	bne.n	801ce56 <strncpy+0x6>
 801ce66:	441a      	add	r2, r3
 801ce68:	2100      	movs	r1, #0
 801ce6a:	4293      	cmp	r3, r2
 801ce6c:	d100      	bne.n	801ce70 <strncpy+0x20>
 801ce6e:	bd10      	pop	{r4, pc}
 801ce70:	f803 1b01 	strb.w	r1, [r3], #1
 801ce74:	e7f9      	b.n	801ce6a <strncpy+0x1a>

0801ce76 <sulp>:
 801ce76:	b570      	push	{r4, r5, r6, lr}
 801ce78:	4604      	mov	r4, r0
 801ce7a:	460d      	mov	r5, r1
 801ce7c:	ec45 4b10 	vmov	d0, r4, r5
 801ce80:	4616      	mov	r6, r2
 801ce82:	f002 fd47 	bl	801f914 <__ulp>
 801ce86:	ec51 0b10 	vmov	r0, r1, d0
 801ce8a:	b17e      	cbz	r6, 801ceac <sulp+0x36>
 801ce8c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801ce90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	dd09      	ble.n	801ceac <sulp+0x36>
 801ce98:	051b      	lsls	r3, r3, #20
 801ce9a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801ce9e:	2400      	movs	r4, #0
 801cea0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801cea4:	4622      	mov	r2, r4
 801cea6:	462b      	mov	r3, r5
 801cea8:	f7e7 fc2e 	bl	8004708 <__aeabi_dmul>
 801ceac:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ceb0 <_strtod_l>:
 801ceb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ceb4:	ed2d 8b02 	vpush	{d8}
 801ceb8:	b09d      	sub	sp, #116	; 0x74
 801ceba:	461f      	mov	r7, r3
 801cebc:	2300      	movs	r3, #0
 801cebe:	9318      	str	r3, [sp, #96]	; 0x60
 801cec0:	4ba2      	ldr	r3, [pc, #648]	; (801d14c <_strtod_l+0x29c>)
 801cec2:	9213      	str	r2, [sp, #76]	; 0x4c
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	9305      	str	r3, [sp, #20]
 801cec8:	4604      	mov	r4, r0
 801ceca:	4618      	mov	r0, r3
 801cecc:	4688      	mov	r8, r1
 801cece:	f7e7 fa01 	bl	80042d4 <strlen>
 801ced2:	f04f 0a00 	mov.w	sl, #0
 801ced6:	4605      	mov	r5, r0
 801ced8:	f04f 0b00 	mov.w	fp, #0
 801cedc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801cee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cee2:	781a      	ldrb	r2, [r3, #0]
 801cee4:	2a2b      	cmp	r2, #43	; 0x2b
 801cee6:	d04e      	beq.n	801cf86 <_strtod_l+0xd6>
 801cee8:	d83b      	bhi.n	801cf62 <_strtod_l+0xb2>
 801ceea:	2a0d      	cmp	r2, #13
 801ceec:	d834      	bhi.n	801cf58 <_strtod_l+0xa8>
 801ceee:	2a08      	cmp	r2, #8
 801cef0:	d834      	bhi.n	801cf5c <_strtod_l+0xac>
 801cef2:	2a00      	cmp	r2, #0
 801cef4:	d03e      	beq.n	801cf74 <_strtod_l+0xc4>
 801cef6:	2300      	movs	r3, #0
 801cef8:	930a      	str	r3, [sp, #40]	; 0x28
 801cefa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801cefc:	7833      	ldrb	r3, [r6, #0]
 801cefe:	2b30      	cmp	r3, #48	; 0x30
 801cf00:	f040 80b0 	bne.w	801d064 <_strtod_l+0x1b4>
 801cf04:	7873      	ldrb	r3, [r6, #1]
 801cf06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801cf0a:	2b58      	cmp	r3, #88	; 0x58
 801cf0c:	d168      	bne.n	801cfe0 <_strtod_l+0x130>
 801cf0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cf10:	9301      	str	r3, [sp, #4]
 801cf12:	ab18      	add	r3, sp, #96	; 0x60
 801cf14:	9702      	str	r7, [sp, #8]
 801cf16:	9300      	str	r3, [sp, #0]
 801cf18:	4a8d      	ldr	r2, [pc, #564]	; (801d150 <_strtod_l+0x2a0>)
 801cf1a:	ab19      	add	r3, sp, #100	; 0x64
 801cf1c:	a917      	add	r1, sp, #92	; 0x5c
 801cf1e:	4620      	mov	r0, r4
 801cf20:	f001 fe3a 	bl	801eb98 <__gethex>
 801cf24:	f010 0707 	ands.w	r7, r0, #7
 801cf28:	4605      	mov	r5, r0
 801cf2a:	d005      	beq.n	801cf38 <_strtod_l+0x88>
 801cf2c:	2f06      	cmp	r7, #6
 801cf2e:	d12c      	bne.n	801cf8a <_strtod_l+0xda>
 801cf30:	3601      	adds	r6, #1
 801cf32:	2300      	movs	r3, #0
 801cf34:	9617      	str	r6, [sp, #92]	; 0x5c
 801cf36:	930a      	str	r3, [sp, #40]	; 0x28
 801cf38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	f040 8590 	bne.w	801da60 <_strtod_l+0xbb0>
 801cf40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cf42:	b1eb      	cbz	r3, 801cf80 <_strtod_l+0xd0>
 801cf44:	4652      	mov	r2, sl
 801cf46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801cf4a:	ec43 2b10 	vmov	d0, r2, r3
 801cf4e:	b01d      	add	sp, #116	; 0x74
 801cf50:	ecbd 8b02 	vpop	{d8}
 801cf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf58:	2a20      	cmp	r2, #32
 801cf5a:	d1cc      	bne.n	801cef6 <_strtod_l+0x46>
 801cf5c:	3301      	adds	r3, #1
 801cf5e:	9317      	str	r3, [sp, #92]	; 0x5c
 801cf60:	e7be      	b.n	801cee0 <_strtod_l+0x30>
 801cf62:	2a2d      	cmp	r2, #45	; 0x2d
 801cf64:	d1c7      	bne.n	801cef6 <_strtod_l+0x46>
 801cf66:	2201      	movs	r2, #1
 801cf68:	920a      	str	r2, [sp, #40]	; 0x28
 801cf6a:	1c5a      	adds	r2, r3, #1
 801cf6c:	9217      	str	r2, [sp, #92]	; 0x5c
 801cf6e:	785b      	ldrb	r3, [r3, #1]
 801cf70:	2b00      	cmp	r3, #0
 801cf72:	d1c2      	bne.n	801cefa <_strtod_l+0x4a>
 801cf74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cf76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	f040 856e 	bne.w	801da5c <_strtod_l+0xbac>
 801cf80:	4652      	mov	r2, sl
 801cf82:	465b      	mov	r3, fp
 801cf84:	e7e1      	b.n	801cf4a <_strtod_l+0x9a>
 801cf86:	2200      	movs	r2, #0
 801cf88:	e7ee      	b.n	801cf68 <_strtod_l+0xb8>
 801cf8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cf8c:	b13a      	cbz	r2, 801cf9e <_strtod_l+0xee>
 801cf8e:	2135      	movs	r1, #53	; 0x35
 801cf90:	a81a      	add	r0, sp, #104	; 0x68
 801cf92:	f002 fdca 	bl	801fb2a <__copybits>
 801cf96:	9918      	ldr	r1, [sp, #96]	; 0x60
 801cf98:	4620      	mov	r0, r4
 801cf9a:	f002 f989 	bl	801f2b0 <_Bfree>
 801cf9e:	3f01      	subs	r7, #1
 801cfa0:	2f04      	cmp	r7, #4
 801cfa2:	d806      	bhi.n	801cfb2 <_strtod_l+0x102>
 801cfa4:	e8df f007 	tbb	[pc, r7]
 801cfa8:	1714030a 	.word	0x1714030a
 801cfac:	0a          	.byte	0x0a
 801cfad:	00          	.byte	0x00
 801cfae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801cfb2:	0728      	lsls	r0, r5, #28
 801cfb4:	d5c0      	bpl.n	801cf38 <_strtod_l+0x88>
 801cfb6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801cfba:	e7bd      	b.n	801cf38 <_strtod_l+0x88>
 801cfbc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801cfc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801cfc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801cfc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801cfca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801cfce:	e7f0      	b.n	801cfb2 <_strtod_l+0x102>
 801cfd0:	f8df b180 	ldr.w	fp, [pc, #384]	; 801d154 <_strtod_l+0x2a4>
 801cfd4:	e7ed      	b.n	801cfb2 <_strtod_l+0x102>
 801cfd6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801cfda:	f04f 3aff 	mov.w	sl, #4294967295
 801cfde:	e7e8      	b.n	801cfb2 <_strtod_l+0x102>
 801cfe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cfe2:	1c5a      	adds	r2, r3, #1
 801cfe4:	9217      	str	r2, [sp, #92]	; 0x5c
 801cfe6:	785b      	ldrb	r3, [r3, #1]
 801cfe8:	2b30      	cmp	r3, #48	; 0x30
 801cfea:	d0f9      	beq.n	801cfe0 <_strtod_l+0x130>
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	d0a3      	beq.n	801cf38 <_strtod_l+0x88>
 801cff0:	2301      	movs	r3, #1
 801cff2:	f04f 0900 	mov.w	r9, #0
 801cff6:	9304      	str	r3, [sp, #16]
 801cff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cffa:	9308      	str	r3, [sp, #32]
 801cffc:	f8cd 901c 	str.w	r9, [sp, #28]
 801d000:	464f      	mov	r7, r9
 801d002:	220a      	movs	r2, #10
 801d004:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801d006:	7806      	ldrb	r6, [r0, #0]
 801d008:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801d00c:	b2d9      	uxtb	r1, r3
 801d00e:	2909      	cmp	r1, #9
 801d010:	d92a      	bls.n	801d068 <_strtod_l+0x1b8>
 801d012:	9905      	ldr	r1, [sp, #20]
 801d014:	462a      	mov	r2, r5
 801d016:	f7ff ff07 	bl	801ce28 <strncmp>
 801d01a:	b398      	cbz	r0, 801d084 <_strtod_l+0x1d4>
 801d01c:	2000      	movs	r0, #0
 801d01e:	4632      	mov	r2, r6
 801d020:	463d      	mov	r5, r7
 801d022:	9005      	str	r0, [sp, #20]
 801d024:	4603      	mov	r3, r0
 801d026:	2a65      	cmp	r2, #101	; 0x65
 801d028:	d001      	beq.n	801d02e <_strtod_l+0x17e>
 801d02a:	2a45      	cmp	r2, #69	; 0x45
 801d02c:	d118      	bne.n	801d060 <_strtod_l+0x1b0>
 801d02e:	b91d      	cbnz	r5, 801d038 <_strtod_l+0x188>
 801d030:	9a04      	ldr	r2, [sp, #16]
 801d032:	4302      	orrs	r2, r0
 801d034:	d09e      	beq.n	801cf74 <_strtod_l+0xc4>
 801d036:	2500      	movs	r5, #0
 801d038:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801d03c:	f108 0201 	add.w	r2, r8, #1
 801d040:	9217      	str	r2, [sp, #92]	; 0x5c
 801d042:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d046:	2a2b      	cmp	r2, #43	; 0x2b
 801d048:	d075      	beq.n	801d136 <_strtod_l+0x286>
 801d04a:	2a2d      	cmp	r2, #45	; 0x2d
 801d04c:	d07b      	beq.n	801d146 <_strtod_l+0x296>
 801d04e:	f04f 0c00 	mov.w	ip, #0
 801d052:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801d056:	2909      	cmp	r1, #9
 801d058:	f240 8082 	bls.w	801d160 <_strtod_l+0x2b0>
 801d05c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801d060:	2600      	movs	r6, #0
 801d062:	e09d      	b.n	801d1a0 <_strtod_l+0x2f0>
 801d064:	2300      	movs	r3, #0
 801d066:	e7c4      	b.n	801cff2 <_strtod_l+0x142>
 801d068:	2f08      	cmp	r7, #8
 801d06a:	bfd8      	it	le
 801d06c:	9907      	ldrle	r1, [sp, #28]
 801d06e:	f100 0001 	add.w	r0, r0, #1
 801d072:	bfda      	itte	le
 801d074:	fb02 3301 	mlale	r3, r2, r1, r3
 801d078:	9307      	strle	r3, [sp, #28]
 801d07a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801d07e:	3701      	adds	r7, #1
 801d080:	9017      	str	r0, [sp, #92]	; 0x5c
 801d082:	e7bf      	b.n	801d004 <_strtod_l+0x154>
 801d084:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d086:	195a      	adds	r2, r3, r5
 801d088:	9217      	str	r2, [sp, #92]	; 0x5c
 801d08a:	5d5a      	ldrb	r2, [r3, r5]
 801d08c:	2f00      	cmp	r7, #0
 801d08e:	d037      	beq.n	801d100 <_strtod_l+0x250>
 801d090:	9005      	str	r0, [sp, #20]
 801d092:	463d      	mov	r5, r7
 801d094:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801d098:	2b09      	cmp	r3, #9
 801d09a:	d912      	bls.n	801d0c2 <_strtod_l+0x212>
 801d09c:	2301      	movs	r3, #1
 801d09e:	e7c2      	b.n	801d026 <_strtod_l+0x176>
 801d0a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d0a2:	1c5a      	adds	r2, r3, #1
 801d0a4:	9217      	str	r2, [sp, #92]	; 0x5c
 801d0a6:	785a      	ldrb	r2, [r3, #1]
 801d0a8:	3001      	adds	r0, #1
 801d0aa:	2a30      	cmp	r2, #48	; 0x30
 801d0ac:	d0f8      	beq.n	801d0a0 <_strtod_l+0x1f0>
 801d0ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801d0b2:	2b08      	cmp	r3, #8
 801d0b4:	f200 84d9 	bhi.w	801da6a <_strtod_l+0xbba>
 801d0b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d0ba:	9005      	str	r0, [sp, #20]
 801d0bc:	2000      	movs	r0, #0
 801d0be:	9308      	str	r3, [sp, #32]
 801d0c0:	4605      	mov	r5, r0
 801d0c2:	3a30      	subs	r2, #48	; 0x30
 801d0c4:	f100 0301 	add.w	r3, r0, #1
 801d0c8:	d014      	beq.n	801d0f4 <_strtod_l+0x244>
 801d0ca:	9905      	ldr	r1, [sp, #20]
 801d0cc:	4419      	add	r1, r3
 801d0ce:	9105      	str	r1, [sp, #20]
 801d0d0:	462b      	mov	r3, r5
 801d0d2:	eb00 0e05 	add.w	lr, r0, r5
 801d0d6:	210a      	movs	r1, #10
 801d0d8:	4573      	cmp	r3, lr
 801d0da:	d113      	bne.n	801d104 <_strtod_l+0x254>
 801d0dc:	182b      	adds	r3, r5, r0
 801d0de:	2b08      	cmp	r3, #8
 801d0e0:	f105 0501 	add.w	r5, r5, #1
 801d0e4:	4405      	add	r5, r0
 801d0e6:	dc1c      	bgt.n	801d122 <_strtod_l+0x272>
 801d0e8:	9907      	ldr	r1, [sp, #28]
 801d0ea:	230a      	movs	r3, #10
 801d0ec:	fb03 2301 	mla	r3, r3, r1, r2
 801d0f0:	9307      	str	r3, [sp, #28]
 801d0f2:	2300      	movs	r3, #0
 801d0f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d0f6:	1c51      	adds	r1, r2, #1
 801d0f8:	9117      	str	r1, [sp, #92]	; 0x5c
 801d0fa:	7852      	ldrb	r2, [r2, #1]
 801d0fc:	4618      	mov	r0, r3
 801d0fe:	e7c9      	b.n	801d094 <_strtod_l+0x1e4>
 801d100:	4638      	mov	r0, r7
 801d102:	e7d2      	b.n	801d0aa <_strtod_l+0x1fa>
 801d104:	2b08      	cmp	r3, #8
 801d106:	dc04      	bgt.n	801d112 <_strtod_l+0x262>
 801d108:	9e07      	ldr	r6, [sp, #28]
 801d10a:	434e      	muls	r6, r1
 801d10c:	9607      	str	r6, [sp, #28]
 801d10e:	3301      	adds	r3, #1
 801d110:	e7e2      	b.n	801d0d8 <_strtod_l+0x228>
 801d112:	f103 0c01 	add.w	ip, r3, #1
 801d116:	f1bc 0f10 	cmp.w	ip, #16
 801d11a:	bfd8      	it	le
 801d11c:	fb01 f909 	mulle.w	r9, r1, r9
 801d120:	e7f5      	b.n	801d10e <_strtod_l+0x25e>
 801d122:	2d10      	cmp	r5, #16
 801d124:	bfdc      	itt	le
 801d126:	230a      	movle	r3, #10
 801d128:	fb03 2909 	mlale	r9, r3, r9, r2
 801d12c:	e7e1      	b.n	801d0f2 <_strtod_l+0x242>
 801d12e:	2300      	movs	r3, #0
 801d130:	9305      	str	r3, [sp, #20]
 801d132:	2301      	movs	r3, #1
 801d134:	e77c      	b.n	801d030 <_strtod_l+0x180>
 801d136:	f04f 0c00 	mov.w	ip, #0
 801d13a:	f108 0202 	add.w	r2, r8, #2
 801d13e:	9217      	str	r2, [sp, #92]	; 0x5c
 801d140:	f898 2002 	ldrb.w	r2, [r8, #2]
 801d144:	e785      	b.n	801d052 <_strtod_l+0x1a2>
 801d146:	f04f 0c01 	mov.w	ip, #1
 801d14a:	e7f6      	b.n	801d13a <_strtod_l+0x28a>
 801d14c:	080396d8 	.word	0x080396d8
 801d150:	08039590 	.word	0x08039590
 801d154:	7ff00000 	.word	0x7ff00000
 801d158:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d15a:	1c51      	adds	r1, r2, #1
 801d15c:	9117      	str	r1, [sp, #92]	; 0x5c
 801d15e:	7852      	ldrb	r2, [r2, #1]
 801d160:	2a30      	cmp	r2, #48	; 0x30
 801d162:	d0f9      	beq.n	801d158 <_strtod_l+0x2a8>
 801d164:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801d168:	2908      	cmp	r1, #8
 801d16a:	f63f af79 	bhi.w	801d060 <_strtod_l+0x1b0>
 801d16e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801d172:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d174:	9206      	str	r2, [sp, #24]
 801d176:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d178:	1c51      	adds	r1, r2, #1
 801d17a:	9117      	str	r1, [sp, #92]	; 0x5c
 801d17c:	7852      	ldrb	r2, [r2, #1]
 801d17e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801d182:	2e09      	cmp	r6, #9
 801d184:	d937      	bls.n	801d1f6 <_strtod_l+0x346>
 801d186:	9e06      	ldr	r6, [sp, #24]
 801d188:	1b89      	subs	r1, r1, r6
 801d18a:	2908      	cmp	r1, #8
 801d18c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801d190:	dc02      	bgt.n	801d198 <_strtod_l+0x2e8>
 801d192:	4576      	cmp	r6, lr
 801d194:	bfa8      	it	ge
 801d196:	4676      	movge	r6, lr
 801d198:	f1bc 0f00 	cmp.w	ip, #0
 801d19c:	d000      	beq.n	801d1a0 <_strtod_l+0x2f0>
 801d19e:	4276      	negs	r6, r6
 801d1a0:	2d00      	cmp	r5, #0
 801d1a2:	d14d      	bne.n	801d240 <_strtod_l+0x390>
 801d1a4:	9904      	ldr	r1, [sp, #16]
 801d1a6:	4301      	orrs	r1, r0
 801d1a8:	f47f aec6 	bne.w	801cf38 <_strtod_l+0x88>
 801d1ac:	2b00      	cmp	r3, #0
 801d1ae:	f47f aee1 	bne.w	801cf74 <_strtod_l+0xc4>
 801d1b2:	2a69      	cmp	r2, #105	; 0x69
 801d1b4:	d027      	beq.n	801d206 <_strtod_l+0x356>
 801d1b6:	dc24      	bgt.n	801d202 <_strtod_l+0x352>
 801d1b8:	2a49      	cmp	r2, #73	; 0x49
 801d1ba:	d024      	beq.n	801d206 <_strtod_l+0x356>
 801d1bc:	2a4e      	cmp	r2, #78	; 0x4e
 801d1be:	f47f aed9 	bne.w	801cf74 <_strtod_l+0xc4>
 801d1c2:	499f      	ldr	r1, [pc, #636]	; (801d440 <_strtod_l+0x590>)
 801d1c4:	a817      	add	r0, sp, #92	; 0x5c
 801d1c6:	f001 ff3f 	bl	801f048 <__match>
 801d1ca:	2800      	cmp	r0, #0
 801d1cc:	f43f aed2 	beq.w	801cf74 <_strtod_l+0xc4>
 801d1d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d1d2:	781b      	ldrb	r3, [r3, #0]
 801d1d4:	2b28      	cmp	r3, #40	; 0x28
 801d1d6:	d12d      	bne.n	801d234 <_strtod_l+0x384>
 801d1d8:	499a      	ldr	r1, [pc, #616]	; (801d444 <_strtod_l+0x594>)
 801d1da:	aa1a      	add	r2, sp, #104	; 0x68
 801d1dc:	a817      	add	r0, sp, #92	; 0x5c
 801d1de:	f001 ff47 	bl	801f070 <__hexnan>
 801d1e2:	2805      	cmp	r0, #5
 801d1e4:	d126      	bne.n	801d234 <_strtod_l+0x384>
 801d1e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d1e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801d1ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801d1f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801d1f4:	e6a0      	b.n	801cf38 <_strtod_l+0x88>
 801d1f6:	210a      	movs	r1, #10
 801d1f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 801d1fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801d200:	e7b9      	b.n	801d176 <_strtod_l+0x2c6>
 801d202:	2a6e      	cmp	r2, #110	; 0x6e
 801d204:	e7db      	b.n	801d1be <_strtod_l+0x30e>
 801d206:	4990      	ldr	r1, [pc, #576]	; (801d448 <_strtod_l+0x598>)
 801d208:	a817      	add	r0, sp, #92	; 0x5c
 801d20a:	f001 ff1d 	bl	801f048 <__match>
 801d20e:	2800      	cmp	r0, #0
 801d210:	f43f aeb0 	beq.w	801cf74 <_strtod_l+0xc4>
 801d214:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d216:	498d      	ldr	r1, [pc, #564]	; (801d44c <_strtod_l+0x59c>)
 801d218:	3b01      	subs	r3, #1
 801d21a:	a817      	add	r0, sp, #92	; 0x5c
 801d21c:	9317      	str	r3, [sp, #92]	; 0x5c
 801d21e:	f001 ff13 	bl	801f048 <__match>
 801d222:	b910      	cbnz	r0, 801d22a <_strtod_l+0x37a>
 801d224:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d226:	3301      	adds	r3, #1
 801d228:	9317      	str	r3, [sp, #92]	; 0x5c
 801d22a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801d45c <_strtod_l+0x5ac>
 801d22e:	f04f 0a00 	mov.w	sl, #0
 801d232:	e681      	b.n	801cf38 <_strtod_l+0x88>
 801d234:	4886      	ldr	r0, [pc, #536]	; (801d450 <_strtod_l+0x5a0>)
 801d236:	f002 fe6f 	bl	801ff18 <nan>
 801d23a:	ec5b ab10 	vmov	sl, fp, d0
 801d23e:	e67b      	b.n	801cf38 <_strtod_l+0x88>
 801d240:	9b05      	ldr	r3, [sp, #20]
 801d242:	9807      	ldr	r0, [sp, #28]
 801d244:	1af3      	subs	r3, r6, r3
 801d246:	2f00      	cmp	r7, #0
 801d248:	bf08      	it	eq
 801d24a:	462f      	moveq	r7, r5
 801d24c:	2d10      	cmp	r5, #16
 801d24e:	9306      	str	r3, [sp, #24]
 801d250:	46a8      	mov	r8, r5
 801d252:	bfa8      	it	ge
 801d254:	f04f 0810 	movge.w	r8, #16
 801d258:	f7e7 f9dc 	bl	8004614 <__aeabi_ui2d>
 801d25c:	2d09      	cmp	r5, #9
 801d25e:	4682      	mov	sl, r0
 801d260:	468b      	mov	fp, r1
 801d262:	dd13      	ble.n	801d28c <_strtod_l+0x3dc>
 801d264:	4b7b      	ldr	r3, [pc, #492]	; (801d454 <_strtod_l+0x5a4>)
 801d266:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801d26a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801d26e:	f7e7 fa4b 	bl	8004708 <__aeabi_dmul>
 801d272:	4682      	mov	sl, r0
 801d274:	4648      	mov	r0, r9
 801d276:	468b      	mov	fp, r1
 801d278:	f7e7 f9cc 	bl	8004614 <__aeabi_ui2d>
 801d27c:	4602      	mov	r2, r0
 801d27e:	460b      	mov	r3, r1
 801d280:	4650      	mov	r0, sl
 801d282:	4659      	mov	r1, fp
 801d284:	f7e7 f88a 	bl	800439c <__adddf3>
 801d288:	4682      	mov	sl, r0
 801d28a:	468b      	mov	fp, r1
 801d28c:	2d0f      	cmp	r5, #15
 801d28e:	dc38      	bgt.n	801d302 <_strtod_l+0x452>
 801d290:	9b06      	ldr	r3, [sp, #24]
 801d292:	2b00      	cmp	r3, #0
 801d294:	f43f ae50 	beq.w	801cf38 <_strtod_l+0x88>
 801d298:	dd24      	ble.n	801d2e4 <_strtod_l+0x434>
 801d29a:	2b16      	cmp	r3, #22
 801d29c:	dc0b      	bgt.n	801d2b6 <_strtod_l+0x406>
 801d29e:	496d      	ldr	r1, [pc, #436]	; (801d454 <_strtod_l+0x5a4>)
 801d2a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d2a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d2a8:	4652      	mov	r2, sl
 801d2aa:	465b      	mov	r3, fp
 801d2ac:	f7e7 fa2c 	bl	8004708 <__aeabi_dmul>
 801d2b0:	4682      	mov	sl, r0
 801d2b2:	468b      	mov	fp, r1
 801d2b4:	e640      	b.n	801cf38 <_strtod_l+0x88>
 801d2b6:	9a06      	ldr	r2, [sp, #24]
 801d2b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801d2bc:	4293      	cmp	r3, r2
 801d2be:	db20      	blt.n	801d302 <_strtod_l+0x452>
 801d2c0:	4c64      	ldr	r4, [pc, #400]	; (801d454 <_strtod_l+0x5a4>)
 801d2c2:	f1c5 050f 	rsb	r5, r5, #15
 801d2c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801d2ca:	4652      	mov	r2, sl
 801d2cc:	465b      	mov	r3, fp
 801d2ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d2d2:	f7e7 fa19 	bl	8004708 <__aeabi_dmul>
 801d2d6:	9b06      	ldr	r3, [sp, #24]
 801d2d8:	1b5d      	subs	r5, r3, r5
 801d2da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801d2de:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d2e2:	e7e3      	b.n	801d2ac <_strtod_l+0x3fc>
 801d2e4:	9b06      	ldr	r3, [sp, #24]
 801d2e6:	3316      	adds	r3, #22
 801d2e8:	db0b      	blt.n	801d302 <_strtod_l+0x452>
 801d2ea:	9b05      	ldr	r3, [sp, #20]
 801d2ec:	1b9e      	subs	r6, r3, r6
 801d2ee:	4b59      	ldr	r3, [pc, #356]	; (801d454 <_strtod_l+0x5a4>)
 801d2f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801d2f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d2f8:	4650      	mov	r0, sl
 801d2fa:	4659      	mov	r1, fp
 801d2fc:	f7e7 fb2e 	bl	800495c <__aeabi_ddiv>
 801d300:	e7d6      	b.n	801d2b0 <_strtod_l+0x400>
 801d302:	9b06      	ldr	r3, [sp, #24]
 801d304:	eba5 0808 	sub.w	r8, r5, r8
 801d308:	4498      	add	r8, r3
 801d30a:	f1b8 0f00 	cmp.w	r8, #0
 801d30e:	dd74      	ble.n	801d3fa <_strtod_l+0x54a>
 801d310:	f018 030f 	ands.w	r3, r8, #15
 801d314:	d00a      	beq.n	801d32c <_strtod_l+0x47c>
 801d316:	494f      	ldr	r1, [pc, #316]	; (801d454 <_strtod_l+0x5a4>)
 801d318:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d31c:	4652      	mov	r2, sl
 801d31e:	465b      	mov	r3, fp
 801d320:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d324:	f7e7 f9f0 	bl	8004708 <__aeabi_dmul>
 801d328:	4682      	mov	sl, r0
 801d32a:	468b      	mov	fp, r1
 801d32c:	f038 080f 	bics.w	r8, r8, #15
 801d330:	d04f      	beq.n	801d3d2 <_strtod_l+0x522>
 801d332:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801d336:	dd22      	ble.n	801d37e <_strtod_l+0x4ce>
 801d338:	2500      	movs	r5, #0
 801d33a:	462e      	mov	r6, r5
 801d33c:	9507      	str	r5, [sp, #28]
 801d33e:	9505      	str	r5, [sp, #20]
 801d340:	2322      	movs	r3, #34	; 0x22
 801d342:	f8df b118 	ldr.w	fp, [pc, #280]	; 801d45c <_strtod_l+0x5ac>
 801d346:	6023      	str	r3, [r4, #0]
 801d348:	f04f 0a00 	mov.w	sl, #0
 801d34c:	9b07      	ldr	r3, [sp, #28]
 801d34e:	2b00      	cmp	r3, #0
 801d350:	f43f adf2 	beq.w	801cf38 <_strtod_l+0x88>
 801d354:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d356:	4620      	mov	r0, r4
 801d358:	f001 ffaa 	bl	801f2b0 <_Bfree>
 801d35c:	9905      	ldr	r1, [sp, #20]
 801d35e:	4620      	mov	r0, r4
 801d360:	f001 ffa6 	bl	801f2b0 <_Bfree>
 801d364:	4631      	mov	r1, r6
 801d366:	4620      	mov	r0, r4
 801d368:	f001 ffa2 	bl	801f2b0 <_Bfree>
 801d36c:	9907      	ldr	r1, [sp, #28]
 801d36e:	4620      	mov	r0, r4
 801d370:	f001 ff9e 	bl	801f2b0 <_Bfree>
 801d374:	4629      	mov	r1, r5
 801d376:	4620      	mov	r0, r4
 801d378:	f001 ff9a 	bl	801f2b0 <_Bfree>
 801d37c:	e5dc      	b.n	801cf38 <_strtod_l+0x88>
 801d37e:	4b36      	ldr	r3, [pc, #216]	; (801d458 <_strtod_l+0x5a8>)
 801d380:	9304      	str	r3, [sp, #16]
 801d382:	2300      	movs	r3, #0
 801d384:	ea4f 1828 	mov.w	r8, r8, asr #4
 801d388:	4650      	mov	r0, sl
 801d38a:	4659      	mov	r1, fp
 801d38c:	4699      	mov	r9, r3
 801d38e:	f1b8 0f01 	cmp.w	r8, #1
 801d392:	dc21      	bgt.n	801d3d8 <_strtod_l+0x528>
 801d394:	b10b      	cbz	r3, 801d39a <_strtod_l+0x4ea>
 801d396:	4682      	mov	sl, r0
 801d398:	468b      	mov	fp, r1
 801d39a:	4b2f      	ldr	r3, [pc, #188]	; (801d458 <_strtod_l+0x5a8>)
 801d39c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801d3a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801d3a4:	4652      	mov	r2, sl
 801d3a6:	465b      	mov	r3, fp
 801d3a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 801d3ac:	f7e7 f9ac 	bl	8004708 <__aeabi_dmul>
 801d3b0:	4b2a      	ldr	r3, [pc, #168]	; (801d45c <_strtod_l+0x5ac>)
 801d3b2:	460a      	mov	r2, r1
 801d3b4:	400b      	ands	r3, r1
 801d3b6:	492a      	ldr	r1, [pc, #168]	; (801d460 <_strtod_l+0x5b0>)
 801d3b8:	428b      	cmp	r3, r1
 801d3ba:	4682      	mov	sl, r0
 801d3bc:	d8bc      	bhi.n	801d338 <_strtod_l+0x488>
 801d3be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801d3c2:	428b      	cmp	r3, r1
 801d3c4:	bf86      	itte	hi
 801d3c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801d464 <_strtod_l+0x5b4>
 801d3ca:	f04f 3aff 	movhi.w	sl, #4294967295
 801d3ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801d3d2:	2300      	movs	r3, #0
 801d3d4:	9304      	str	r3, [sp, #16]
 801d3d6:	e084      	b.n	801d4e2 <_strtod_l+0x632>
 801d3d8:	f018 0f01 	tst.w	r8, #1
 801d3dc:	d005      	beq.n	801d3ea <_strtod_l+0x53a>
 801d3de:	9b04      	ldr	r3, [sp, #16]
 801d3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3e4:	f7e7 f990 	bl	8004708 <__aeabi_dmul>
 801d3e8:	2301      	movs	r3, #1
 801d3ea:	9a04      	ldr	r2, [sp, #16]
 801d3ec:	3208      	adds	r2, #8
 801d3ee:	f109 0901 	add.w	r9, r9, #1
 801d3f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 801d3f6:	9204      	str	r2, [sp, #16]
 801d3f8:	e7c9      	b.n	801d38e <_strtod_l+0x4de>
 801d3fa:	d0ea      	beq.n	801d3d2 <_strtod_l+0x522>
 801d3fc:	f1c8 0800 	rsb	r8, r8, #0
 801d400:	f018 020f 	ands.w	r2, r8, #15
 801d404:	d00a      	beq.n	801d41c <_strtod_l+0x56c>
 801d406:	4b13      	ldr	r3, [pc, #76]	; (801d454 <_strtod_l+0x5a4>)
 801d408:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d40c:	4650      	mov	r0, sl
 801d40e:	4659      	mov	r1, fp
 801d410:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d414:	f7e7 faa2 	bl	800495c <__aeabi_ddiv>
 801d418:	4682      	mov	sl, r0
 801d41a:	468b      	mov	fp, r1
 801d41c:	ea5f 1828 	movs.w	r8, r8, asr #4
 801d420:	d0d7      	beq.n	801d3d2 <_strtod_l+0x522>
 801d422:	f1b8 0f1f 	cmp.w	r8, #31
 801d426:	dd1f      	ble.n	801d468 <_strtod_l+0x5b8>
 801d428:	2500      	movs	r5, #0
 801d42a:	462e      	mov	r6, r5
 801d42c:	9507      	str	r5, [sp, #28]
 801d42e:	9505      	str	r5, [sp, #20]
 801d430:	2322      	movs	r3, #34	; 0x22
 801d432:	f04f 0a00 	mov.w	sl, #0
 801d436:	f04f 0b00 	mov.w	fp, #0
 801d43a:	6023      	str	r3, [r4, #0]
 801d43c:	e786      	b.n	801d34c <_strtod_l+0x49c>
 801d43e:	bf00      	nop
 801d440:	080231f7 	.word	0x080231f7
 801d444:	080395a4 	.word	0x080395a4
 801d448:	08039561 	.word	0x08039561
 801d44c:	080395e3 	.word	0x080395e3
 801d450:	080255f0 	.word	0x080255f0
 801d454:	08039770 	.word	0x08039770
 801d458:	08039748 	.word	0x08039748
 801d45c:	7ff00000 	.word	0x7ff00000
 801d460:	7ca00000 	.word	0x7ca00000
 801d464:	7fefffff 	.word	0x7fefffff
 801d468:	f018 0310 	ands.w	r3, r8, #16
 801d46c:	bf18      	it	ne
 801d46e:	236a      	movne	r3, #106	; 0x6a
 801d470:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801d820 <_strtod_l+0x970>
 801d474:	9304      	str	r3, [sp, #16]
 801d476:	4650      	mov	r0, sl
 801d478:	4659      	mov	r1, fp
 801d47a:	2300      	movs	r3, #0
 801d47c:	f018 0f01 	tst.w	r8, #1
 801d480:	d004      	beq.n	801d48c <_strtod_l+0x5dc>
 801d482:	e9d9 2300 	ldrd	r2, r3, [r9]
 801d486:	f7e7 f93f 	bl	8004708 <__aeabi_dmul>
 801d48a:	2301      	movs	r3, #1
 801d48c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801d490:	f109 0908 	add.w	r9, r9, #8
 801d494:	d1f2      	bne.n	801d47c <_strtod_l+0x5cc>
 801d496:	b10b      	cbz	r3, 801d49c <_strtod_l+0x5ec>
 801d498:	4682      	mov	sl, r0
 801d49a:	468b      	mov	fp, r1
 801d49c:	9b04      	ldr	r3, [sp, #16]
 801d49e:	b1c3      	cbz	r3, 801d4d2 <_strtod_l+0x622>
 801d4a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801d4a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801d4a8:	2b00      	cmp	r3, #0
 801d4aa:	4659      	mov	r1, fp
 801d4ac:	dd11      	ble.n	801d4d2 <_strtod_l+0x622>
 801d4ae:	2b1f      	cmp	r3, #31
 801d4b0:	f340 8124 	ble.w	801d6fc <_strtod_l+0x84c>
 801d4b4:	2b34      	cmp	r3, #52	; 0x34
 801d4b6:	bfde      	ittt	le
 801d4b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801d4bc:	f04f 33ff 	movle.w	r3, #4294967295
 801d4c0:	fa03 f202 	lslle.w	r2, r3, r2
 801d4c4:	f04f 0a00 	mov.w	sl, #0
 801d4c8:	bfcc      	ite	gt
 801d4ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801d4ce:	ea02 0b01 	andle.w	fp, r2, r1
 801d4d2:	2200      	movs	r2, #0
 801d4d4:	2300      	movs	r3, #0
 801d4d6:	4650      	mov	r0, sl
 801d4d8:	4659      	mov	r1, fp
 801d4da:	f7e7 fb7d 	bl	8004bd8 <__aeabi_dcmpeq>
 801d4de:	2800      	cmp	r0, #0
 801d4e0:	d1a2      	bne.n	801d428 <_strtod_l+0x578>
 801d4e2:	9b07      	ldr	r3, [sp, #28]
 801d4e4:	9300      	str	r3, [sp, #0]
 801d4e6:	9908      	ldr	r1, [sp, #32]
 801d4e8:	462b      	mov	r3, r5
 801d4ea:	463a      	mov	r2, r7
 801d4ec:	4620      	mov	r0, r4
 801d4ee:	f001 ff47 	bl	801f380 <__s2b>
 801d4f2:	9007      	str	r0, [sp, #28]
 801d4f4:	2800      	cmp	r0, #0
 801d4f6:	f43f af1f 	beq.w	801d338 <_strtod_l+0x488>
 801d4fa:	9b05      	ldr	r3, [sp, #20]
 801d4fc:	1b9e      	subs	r6, r3, r6
 801d4fe:	9b06      	ldr	r3, [sp, #24]
 801d500:	2b00      	cmp	r3, #0
 801d502:	bfb4      	ite	lt
 801d504:	4633      	movlt	r3, r6
 801d506:	2300      	movge	r3, #0
 801d508:	930c      	str	r3, [sp, #48]	; 0x30
 801d50a:	9b06      	ldr	r3, [sp, #24]
 801d50c:	2500      	movs	r5, #0
 801d50e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d512:	9312      	str	r3, [sp, #72]	; 0x48
 801d514:	462e      	mov	r6, r5
 801d516:	9b07      	ldr	r3, [sp, #28]
 801d518:	4620      	mov	r0, r4
 801d51a:	6859      	ldr	r1, [r3, #4]
 801d51c:	f001 fe88 	bl	801f230 <_Balloc>
 801d520:	9005      	str	r0, [sp, #20]
 801d522:	2800      	cmp	r0, #0
 801d524:	f43f af0c 	beq.w	801d340 <_strtod_l+0x490>
 801d528:	9b07      	ldr	r3, [sp, #28]
 801d52a:	691a      	ldr	r2, [r3, #16]
 801d52c:	3202      	adds	r2, #2
 801d52e:	f103 010c 	add.w	r1, r3, #12
 801d532:	0092      	lsls	r2, r2, #2
 801d534:	300c      	adds	r0, #12
 801d536:	f7fe fe6d 	bl	801c214 <memcpy>
 801d53a:	ec4b ab10 	vmov	d0, sl, fp
 801d53e:	aa1a      	add	r2, sp, #104	; 0x68
 801d540:	a919      	add	r1, sp, #100	; 0x64
 801d542:	4620      	mov	r0, r4
 801d544:	f002 fa62 	bl	801fa0c <__d2b>
 801d548:	ec4b ab18 	vmov	d8, sl, fp
 801d54c:	9018      	str	r0, [sp, #96]	; 0x60
 801d54e:	2800      	cmp	r0, #0
 801d550:	f43f aef6 	beq.w	801d340 <_strtod_l+0x490>
 801d554:	2101      	movs	r1, #1
 801d556:	4620      	mov	r0, r4
 801d558:	f001 ffac 	bl	801f4b4 <__i2b>
 801d55c:	4606      	mov	r6, r0
 801d55e:	2800      	cmp	r0, #0
 801d560:	f43f aeee 	beq.w	801d340 <_strtod_l+0x490>
 801d564:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d566:	9904      	ldr	r1, [sp, #16]
 801d568:	2b00      	cmp	r3, #0
 801d56a:	bfab      	itete	ge
 801d56c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801d56e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801d570:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801d572:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801d576:	bfac      	ite	ge
 801d578:	eb03 0902 	addge.w	r9, r3, r2
 801d57c:	1ad7      	sublt	r7, r2, r3
 801d57e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d580:	eba3 0801 	sub.w	r8, r3, r1
 801d584:	4490      	add	r8, r2
 801d586:	4ba1      	ldr	r3, [pc, #644]	; (801d80c <_strtod_l+0x95c>)
 801d588:	f108 38ff 	add.w	r8, r8, #4294967295
 801d58c:	4598      	cmp	r8, r3
 801d58e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d592:	f280 80c7 	bge.w	801d724 <_strtod_l+0x874>
 801d596:	eba3 0308 	sub.w	r3, r3, r8
 801d59a:	2b1f      	cmp	r3, #31
 801d59c:	eba2 0203 	sub.w	r2, r2, r3
 801d5a0:	f04f 0101 	mov.w	r1, #1
 801d5a4:	f300 80b1 	bgt.w	801d70a <_strtod_l+0x85a>
 801d5a8:	fa01 f303 	lsl.w	r3, r1, r3
 801d5ac:	930d      	str	r3, [sp, #52]	; 0x34
 801d5ae:	2300      	movs	r3, #0
 801d5b0:	9308      	str	r3, [sp, #32]
 801d5b2:	eb09 0802 	add.w	r8, r9, r2
 801d5b6:	9b04      	ldr	r3, [sp, #16]
 801d5b8:	45c1      	cmp	r9, r8
 801d5ba:	4417      	add	r7, r2
 801d5bc:	441f      	add	r7, r3
 801d5be:	464b      	mov	r3, r9
 801d5c0:	bfa8      	it	ge
 801d5c2:	4643      	movge	r3, r8
 801d5c4:	42bb      	cmp	r3, r7
 801d5c6:	bfa8      	it	ge
 801d5c8:	463b      	movge	r3, r7
 801d5ca:	2b00      	cmp	r3, #0
 801d5cc:	bfc2      	ittt	gt
 801d5ce:	eba8 0803 	subgt.w	r8, r8, r3
 801d5d2:	1aff      	subgt	r7, r7, r3
 801d5d4:	eba9 0903 	subgt.w	r9, r9, r3
 801d5d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d5da:	2b00      	cmp	r3, #0
 801d5dc:	dd17      	ble.n	801d60e <_strtod_l+0x75e>
 801d5de:	4631      	mov	r1, r6
 801d5e0:	461a      	mov	r2, r3
 801d5e2:	4620      	mov	r0, r4
 801d5e4:	f002 f826 	bl	801f634 <__pow5mult>
 801d5e8:	4606      	mov	r6, r0
 801d5ea:	2800      	cmp	r0, #0
 801d5ec:	f43f aea8 	beq.w	801d340 <_strtod_l+0x490>
 801d5f0:	4601      	mov	r1, r0
 801d5f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d5f4:	4620      	mov	r0, r4
 801d5f6:	f001 ff73 	bl	801f4e0 <__multiply>
 801d5fa:	900b      	str	r0, [sp, #44]	; 0x2c
 801d5fc:	2800      	cmp	r0, #0
 801d5fe:	f43f ae9f 	beq.w	801d340 <_strtod_l+0x490>
 801d602:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d604:	4620      	mov	r0, r4
 801d606:	f001 fe53 	bl	801f2b0 <_Bfree>
 801d60a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d60c:	9318      	str	r3, [sp, #96]	; 0x60
 801d60e:	f1b8 0f00 	cmp.w	r8, #0
 801d612:	f300 808c 	bgt.w	801d72e <_strtod_l+0x87e>
 801d616:	9b06      	ldr	r3, [sp, #24]
 801d618:	2b00      	cmp	r3, #0
 801d61a:	dd08      	ble.n	801d62e <_strtod_l+0x77e>
 801d61c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d61e:	9905      	ldr	r1, [sp, #20]
 801d620:	4620      	mov	r0, r4
 801d622:	f002 f807 	bl	801f634 <__pow5mult>
 801d626:	9005      	str	r0, [sp, #20]
 801d628:	2800      	cmp	r0, #0
 801d62a:	f43f ae89 	beq.w	801d340 <_strtod_l+0x490>
 801d62e:	2f00      	cmp	r7, #0
 801d630:	dd08      	ble.n	801d644 <_strtod_l+0x794>
 801d632:	9905      	ldr	r1, [sp, #20]
 801d634:	463a      	mov	r2, r7
 801d636:	4620      	mov	r0, r4
 801d638:	f002 f856 	bl	801f6e8 <__lshift>
 801d63c:	9005      	str	r0, [sp, #20]
 801d63e:	2800      	cmp	r0, #0
 801d640:	f43f ae7e 	beq.w	801d340 <_strtod_l+0x490>
 801d644:	f1b9 0f00 	cmp.w	r9, #0
 801d648:	dd08      	ble.n	801d65c <_strtod_l+0x7ac>
 801d64a:	4631      	mov	r1, r6
 801d64c:	464a      	mov	r2, r9
 801d64e:	4620      	mov	r0, r4
 801d650:	f002 f84a 	bl	801f6e8 <__lshift>
 801d654:	4606      	mov	r6, r0
 801d656:	2800      	cmp	r0, #0
 801d658:	f43f ae72 	beq.w	801d340 <_strtod_l+0x490>
 801d65c:	9a05      	ldr	r2, [sp, #20]
 801d65e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d660:	4620      	mov	r0, r4
 801d662:	f002 f8cd 	bl	801f800 <__mdiff>
 801d666:	4605      	mov	r5, r0
 801d668:	2800      	cmp	r0, #0
 801d66a:	f43f ae69 	beq.w	801d340 <_strtod_l+0x490>
 801d66e:	68c3      	ldr	r3, [r0, #12]
 801d670:	930b      	str	r3, [sp, #44]	; 0x2c
 801d672:	2300      	movs	r3, #0
 801d674:	60c3      	str	r3, [r0, #12]
 801d676:	4631      	mov	r1, r6
 801d678:	f002 f8a6 	bl	801f7c8 <__mcmp>
 801d67c:	2800      	cmp	r0, #0
 801d67e:	da60      	bge.n	801d742 <_strtod_l+0x892>
 801d680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d682:	ea53 030a 	orrs.w	r3, r3, sl
 801d686:	f040 8082 	bne.w	801d78e <_strtod_l+0x8de>
 801d68a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d68e:	2b00      	cmp	r3, #0
 801d690:	d17d      	bne.n	801d78e <_strtod_l+0x8de>
 801d692:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d696:	0d1b      	lsrs	r3, r3, #20
 801d698:	051b      	lsls	r3, r3, #20
 801d69a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801d69e:	d976      	bls.n	801d78e <_strtod_l+0x8de>
 801d6a0:	696b      	ldr	r3, [r5, #20]
 801d6a2:	b913      	cbnz	r3, 801d6aa <_strtod_l+0x7fa>
 801d6a4:	692b      	ldr	r3, [r5, #16]
 801d6a6:	2b01      	cmp	r3, #1
 801d6a8:	dd71      	ble.n	801d78e <_strtod_l+0x8de>
 801d6aa:	4629      	mov	r1, r5
 801d6ac:	2201      	movs	r2, #1
 801d6ae:	4620      	mov	r0, r4
 801d6b0:	f002 f81a 	bl	801f6e8 <__lshift>
 801d6b4:	4631      	mov	r1, r6
 801d6b6:	4605      	mov	r5, r0
 801d6b8:	f002 f886 	bl	801f7c8 <__mcmp>
 801d6bc:	2800      	cmp	r0, #0
 801d6be:	dd66      	ble.n	801d78e <_strtod_l+0x8de>
 801d6c0:	9904      	ldr	r1, [sp, #16]
 801d6c2:	4a53      	ldr	r2, [pc, #332]	; (801d810 <_strtod_l+0x960>)
 801d6c4:	465b      	mov	r3, fp
 801d6c6:	2900      	cmp	r1, #0
 801d6c8:	f000 8081 	beq.w	801d7ce <_strtod_l+0x91e>
 801d6cc:	ea02 010b 	and.w	r1, r2, fp
 801d6d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801d6d4:	dc7b      	bgt.n	801d7ce <_strtod_l+0x91e>
 801d6d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801d6da:	f77f aea9 	ble.w	801d430 <_strtod_l+0x580>
 801d6de:	4b4d      	ldr	r3, [pc, #308]	; (801d814 <_strtod_l+0x964>)
 801d6e0:	4650      	mov	r0, sl
 801d6e2:	4659      	mov	r1, fp
 801d6e4:	2200      	movs	r2, #0
 801d6e6:	f7e7 f80f 	bl	8004708 <__aeabi_dmul>
 801d6ea:	460b      	mov	r3, r1
 801d6ec:	4303      	orrs	r3, r0
 801d6ee:	bf08      	it	eq
 801d6f0:	2322      	moveq	r3, #34	; 0x22
 801d6f2:	4682      	mov	sl, r0
 801d6f4:	468b      	mov	fp, r1
 801d6f6:	bf08      	it	eq
 801d6f8:	6023      	streq	r3, [r4, #0]
 801d6fa:	e62b      	b.n	801d354 <_strtod_l+0x4a4>
 801d6fc:	f04f 32ff 	mov.w	r2, #4294967295
 801d700:	fa02 f303 	lsl.w	r3, r2, r3
 801d704:	ea03 0a0a 	and.w	sl, r3, sl
 801d708:	e6e3      	b.n	801d4d2 <_strtod_l+0x622>
 801d70a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801d70e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801d712:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801d716:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801d71a:	fa01 f308 	lsl.w	r3, r1, r8
 801d71e:	9308      	str	r3, [sp, #32]
 801d720:	910d      	str	r1, [sp, #52]	; 0x34
 801d722:	e746      	b.n	801d5b2 <_strtod_l+0x702>
 801d724:	2300      	movs	r3, #0
 801d726:	9308      	str	r3, [sp, #32]
 801d728:	2301      	movs	r3, #1
 801d72a:	930d      	str	r3, [sp, #52]	; 0x34
 801d72c:	e741      	b.n	801d5b2 <_strtod_l+0x702>
 801d72e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d730:	4642      	mov	r2, r8
 801d732:	4620      	mov	r0, r4
 801d734:	f001 ffd8 	bl	801f6e8 <__lshift>
 801d738:	9018      	str	r0, [sp, #96]	; 0x60
 801d73a:	2800      	cmp	r0, #0
 801d73c:	f47f af6b 	bne.w	801d616 <_strtod_l+0x766>
 801d740:	e5fe      	b.n	801d340 <_strtod_l+0x490>
 801d742:	465f      	mov	r7, fp
 801d744:	d16e      	bne.n	801d824 <_strtod_l+0x974>
 801d746:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d748:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d74c:	b342      	cbz	r2, 801d7a0 <_strtod_l+0x8f0>
 801d74e:	4a32      	ldr	r2, [pc, #200]	; (801d818 <_strtod_l+0x968>)
 801d750:	4293      	cmp	r3, r2
 801d752:	d128      	bne.n	801d7a6 <_strtod_l+0x8f6>
 801d754:	9b04      	ldr	r3, [sp, #16]
 801d756:	4651      	mov	r1, sl
 801d758:	b1eb      	cbz	r3, 801d796 <_strtod_l+0x8e6>
 801d75a:	4b2d      	ldr	r3, [pc, #180]	; (801d810 <_strtod_l+0x960>)
 801d75c:	403b      	ands	r3, r7
 801d75e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d762:	f04f 32ff 	mov.w	r2, #4294967295
 801d766:	d819      	bhi.n	801d79c <_strtod_l+0x8ec>
 801d768:	0d1b      	lsrs	r3, r3, #20
 801d76a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d76e:	fa02 f303 	lsl.w	r3, r2, r3
 801d772:	4299      	cmp	r1, r3
 801d774:	d117      	bne.n	801d7a6 <_strtod_l+0x8f6>
 801d776:	4b29      	ldr	r3, [pc, #164]	; (801d81c <_strtod_l+0x96c>)
 801d778:	429f      	cmp	r7, r3
 801d77a:	d102      	bne.n	801d782 <_strtod_l+0x8d2>
 801d77c:	3101      	adds	r1, #1
 801d77e:	f43f addf 	beq.w	801d340 <_strtod_l+0x490>
 801d782:	4b23      	ldr	r3, [pc, #140]	; (801d810 <_strtod_l+0x960>)
 801d784:	403b      	ands	r3, r7
 801d786:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801d78a:	f04f 0a00 	mov.w	sl, #0
 801d78e:	9b04      	ldr	r3, [sp, #16]
 801d790:	2b00      	cmp	r3, #0
 801d792:	d1a4      	bne.n	801d6de <_strtod_l+0x82e>
 801d794:	e5de      	b.n	801d354 <_strtod_l+0x4a4>
 801d796:	f04f 33ff 	mov.w	r3, #4294967295
 801d79a:	e7ea      	b.n	801d772 <_strtod_l+0x8c2>
 801d79c:	4613      	mov	r3, r2
 801d79e:	e7e8      	b.n	801d772 <_strtod_l+0x8c2>
 801d7a0:	ea53 030a 	orrs.w	r3, r3, sl
 801d7a4:	d08c      	beq.n	801d6c0 <_strtod_l+0x810>
 801d7a6:	9b08      	ldr	r3, [sp, #32]
 801d7a8:	b1db      	cbz	r3, 801d7e2 <_strtod_l+0x932>
 801d7aa:	423b      	tst	r3, r7
 801d7ac:	d0ef      	beq.n	801d78e <_strtod_l+0x8de>
 801d7ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d7b0:	9a04      	ldr	r2, [sp, #16]
 801d7b2:	4650      	mov	r0, sl
 801d7b4:	4659      	mov	r1, fp
 801d7b6:	b1c3      	cbz	r3, 801d7ea <_strtod_l+0x93a>
 801d7b8:	f7ff fb5d 	bl	801ce76 <sulp>
 801d7bc:	4602      	mov	r2, r0
 801d7be:	460b      	mov	r3, r1
 801d7c0:	ec51 0b18 	vmov	r0, r1, d8
 801d7c4:	f7e6 fdea 	bl	800439c <__adddf3>
 801d7c8:	4682      	mov	sl, r0
 801d7ca:	468b      	mov	fp, r1
 801d7cc:	e7df      	b.n	801d78e <_strtod_l+0x8de>
 801d7ce:	4013      	ands	r3, r2
 801d7d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801d7d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801d7d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801d7dc:	f04f 3aff 	mov.w	sl, #4294967295
 801d7e0:	e7d5      	b.n	801d78e <_strtod_l+0x8de>
 801d7e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d7e4:	ea13 0f0a 	tst.w	r3, sl
 801d7e8:	e7e0      	b.n	801d7ac <_strtod_l+0x8fc>
 801d7ea:	f7ff fb44 	bl	801ce76 <sulp>
 801d7ee:	4602      	mov	r2, r0
 801d7f0:	460b      	mov	r3, r1
 801d7f2:	ec51 0b18 	vmov	r0, r1, d8
 801d7f6:	f7e6 fdcf 	bl	8004398 <__aeabi_dsub>
 801d7fa:	2200      	movs	r2, #0
 801d7fc:	2300      	movs	r3, #0
 801d7fe:	4682      	mov	sl, r0
 801d800:	468b      	mov	fp, r1
 801d802:	f7e7 f9e9 	bl	8004bd8 <__aeabi_dcmpeq>
 801d806:	2800      	cmp	r0, #0
 801d808:	d0c1      	beq.n	801d78e <_strtod_l+0x8de>
 801d80a:	e611      	b.n	801d430 <_strtod_l+0x580>
 801d80c:	fffffc02 	.word	0xfffffc02
 801d810:	7ff00000 	.word	0x7ff00000
 801d814:	39500000 	.word	0x39500000
 801d818:	000fffff 	.word	0x000fffff
 801d81c:	7fefffff 	.word	0x7fefffff
 801d820:	080395b8 	.word	0x080395b8
 801d824:	4631      	mov	r1, r6
 801d826:	4628      	mov	r0, r5
 801d828:	f002 f94c 	bl	801fac4 <__ratio>
 801d82c:	ec59 8b10 	vmov	r8, r9, d0
 801d830:	ee10 0a10 	vmov	r0, s0
 801d834:	2200      	movs	r2, #0
 801d836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d83a:	4649      	mov	r1, r9
 801d83c:	f7e7 f9e0 	bl	8004c00 <__aeabi_dcmple>
 801d840:	2800      	cmp	r0, #0
 801d842:	d07a      	beq.n	801d93a <_strtod_l+0xa8a>
 801d844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d846:	2b00      	cmp	r3, #0
 801d848:	d04a      	beq.n	801d8e0 <_strtod_l+0xa30>
 801d84a:	4b95      	ldr	r3, [pc, #596]	; (801daa0 <_strtod_l+0xbf0>)
 801d84c:	2200      	movs	r2, #0
 801d84e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801d852:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801daa0 <_strtod_l+0xbf0>
 801d856:	f04f 0800 	mov.w	r8, #0
 801d85a:	4b92      	ldr	r3, [pc, #584]	; (801daa4 <_strtod_l+0xbf4>)
 801d85c:	403b      	ands	r3, r7
 801d85e:	930d      	str	r3, [sp, #52]	; 0x34
 801d860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d862:	4b91      	ldr	r3, [pc, #580]	; (801daa8 <_strtod_l+0xbf8>)
 801d864:	429a      	cmp	r2, r3
 801d866:	f040 80b0 	bne.w	801d9ca <_strtod_l+0xb1a>
 801d86a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d86e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801d872:	ec4b ab10 	vmov	d0, sl, fp
 801d876:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d87a:	f002 f84b 	bl	801f914 <__ulp>
 801d87e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d882:	ec53 2b10 	vmov	r2, r3, d0
 801d886:	f7e6 ff3f 	bl	8004708 <__aeabi_dmul>
 801d88a:	4652      	mov	r2, sl
 801d88c:	465b      	mov	r3, fp
 801d88e:	f7e6 fd85 	bl	800439c <__adddf3>
 801d892:	460b      	mov	r3, r1
 801d894:	4983      	ldr	r1, [pc, #524]	; (801daa4 <_strtod_l+0xbf4>)
 801d896:	4a85      	ldr	r2, [pc, #532]	; (801daac <_strtod_l+0xbfc>)
 801d898:	4019      	ands	r1, r3
 801d89a:	4291      	cmp	r1, r2
 801d89c:	4682      	mov	sl, r0
 801d89e:	d960      	bls.n	801d962 <_strtod_l+0xab2>
 801d8a0:	ee18 3a90 	vmov	r3, s17
 801d8a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801d8a8:	4293      	cmp	r3, r2
 801d8aa:	d104      	bne.n	801d8b6 <_strtod_l+0xa06>
 801d8ac:	ee18 3a10 	vmov	r3, s16
 801d8b0:	3301      	adds	r3, #1
 801d8b2:	f43f ad45 	beq.w	801d340 <_strtod_l+0x490>
 801d8b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 801dab8 <_strtod_l+0xc08>
 801d8ba:	f04f 3aff 	mov.w	sl, #4294967295
 801d8be:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d8c0:	4620      	mov	r0, r4
 801d8c2:	f001 fcf5 	bl	801f2b0 <_Bfree>
 801d8c6:	9905      	ldr	r1, [sp, #20]
 801d8c8:	4620      	mov	r0, r4
 801d8ca:	f001 fcf1 	bl	801f2b0 <_Bfree>
 801d8ce:	4631      	mov	r1, r6
 801d8d0:	4620      	mov	r0, r4
 801d8d2:	f001 fced 	bl	801f2b0 <_Bfree>
 801d8d6:	4629      	mov	r1, r5
 801d8d8:	4620      	mov	r0, r4
 801d8da:	f001 fce9 	bl	801f2b0 <_Bfree>
 801d8de:	e61a      	b.n	801d516 <_strtod_l+0x666>
 801d8e0:	f1ba 0f00 	cmp.w	sl, #0
 801d8e4:	d11b      	bne.n	801d91e <_strtod_l+0xa6e>
 801d8e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d8ea:	b9f3      	cbnz	r3, 801d92a <_strtod_l+0xa7a>
 801d8ec:	4b6c      	ldr	r3, [pc, #432]	; (801daa0 <_strtod_l+0xbf0>)
 801d8ee:	2200      	movs	r2, #0
 801d8f0:	4640      	mov	r0, r8
 801d8f2:	4649      	mov	r1, r9
 801d8f4:	f7e7 f97a 	bl	8004bec <__aeabi_dcmplt>
 801d8f8:	b9d0      	cbnz	r0, 801d930 <_strtod_l+0xa80>
 801d8fa:	4640      	mov	r0, r8
 801d8fc:	4649      	mov	r1, r9
 801d8fe:	4b6c      	ldr	r3, [pc, #432]	; (801dab0 <_strtod_l+0xc00>)
 801d900:	2200      	movs	r2, #0
 801d902:	f7e6 ff01 	bl	8004708 <__aeabi_dmul>
 801d906:	4680      	mov	r8, r0
 801d908:	4689      	mov	r9, r1
 801d90a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801d90e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801d912:	9315      	str	r3, [sp, #84]	; 0x54
 801d914:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801d918:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801d91c:	e79d      	b.n	801d85a <_strtod_l+0x9aa>
 801d91e:	f1ba 0f01 	cmp.w	sl, #1
 801d922:	d102      	bne.n	801d92a <_strtod_l+0xa7a>
 801d924:	2f00      	cmp	r7, #0
 801d926:	f43f ad83 	beq.w	801d430 <_strtod_l+0x580>
 801d92a:	4b62      	ldr	r3, [pc, #392]	; (801dab4 <_strtod_l+0xc04>)
 801d92c:	2200      	movs	r2, #0
 801d92e:	e78e      	b.n	801d84e <_strtod_l+0x99e>
 801d930:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801dab0 <_strtod_l+0xc00>
 801d934:	f04f 0800 	mov.w	r8, #0
 801d938:	e7e7      	b.n	801d90a <_strtod_l+0xa5a>
 801d93a:	4b5d      	ldr	r3, [pc, #372]	; (801dab0 <_strtod_l+0xc00>)
 801d93c:	4640      	mov	r0, r8
 801d93e:	4649      	mov	r1, r9
 801d940:	2200      	movs	r2, #0
 801d942:	f7e6 fee1 	bl	8004708 <__aeabi_dmul>
 801d946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d948:	4680      	mov	r8, r0
 801d94a:	4689      	mov	r9, r1
 801d94c:	b933      	cbnz	r3, 801d95c <_strtod_l+0xaac>
 801d94e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d952:	900e      	str	r0, [sp, #56]	; 0x38
 801d954:	930f      	str	r3, [sp, #60]	; 0x3c
 801d956:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801d95a:	e7dd      	b.n	801d918 <_strtod_l+0xa68>
 801d95c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801d960:	e7f9      	b.n	801d956 <_strtod_l+0xaa6>
 801d962:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801d966:	9b04      	ldr	r3, [sp, #16]
 801d968:	2b00      	cmp	r3, #0
 801d96a:	d1a8      	bne.n	801d8be <_strtod_l+0xa0e>
 801d96c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d970:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d972:	0d1b      	lsrs	r3, r3, #20
 801d974:	051b      	lsls	r3, r3, #20
 801d976:	429a      	cmp	r2, r3
 801d978:	d1a1      	bne.n	801d8be <_strtod_l+0xa0e>
 801d97a:	4640      	mov	r0, r8
 801d97c:	4649      	mov	r1, r9
 801d97e:	f7e7 fa0b 	bl	8004d98 <__aeabi_d2lz>
 801d982:	f7e6 fe93 	bl	80046ac <__aeabi_l2d>
 801d986:	4602      	mov	r2, r0
 801d988:	460b      	mov	r3, r1
 801d98a:	4640      	mov	r0, r8
 801d98c:	4649      	mov	r1, r9
 801d98e:	f7e6 fd03 	bl	8004398 <__aeabi_dsub>
 801d992:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d994:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d998:	ea43 030a 	orr.w	r3, r3, sl
 801d99c:	4313      	orrs	r3, r2
 801d99e:	4680      	mov	r8, r0
 801d9a0:	4689      	mov	r9, r1
 801d9a2:	d055      	beq.n	801da50 <_strtod_l+0xba0>
 801d9a4:	a336      	add	r3, pc, #216	; (adr r3, 801da80 <_strtod_l+0xbd0>)
 801d9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9aa:	f7e7 f91f 	bl	8004bec <__aeabi_dcmplt>
 801d9ae:	2800      	cmp	r0, #0
 801d9b0:	f47f acd0 	bne.w	801d354 <_strtod_l+0x4a4>
 801d9b4:	a334      	add	r3, pc, #208	; (adr r3, 801da88 <_strtod_l+0xbd8>)
 801d9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9ba:	4640      	mov	r0, r8
 801d9bc:	4649      	mov	r1, r9
 801d9be:	f7e7 f933 	bl	8004c28 <__aeabi_dcmpgt>
 801d9c2:	2800      	cmp	r0, #0
 801d9c4:	f43f af7b 	beq.w	801d8be <_strtod_l+0xa0e>
 801d9c8:	e4c4      	b.n	801d354 <_strtod_l+0x4a4>
 801d9ca:	9b04      	ldr	r3, [sp, #16]
 801d9cc:	b333      	cbz	r3, 801da1c <_strtod_l+0xb6c>
 801d9ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d9d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d9d4:	d822      	bhi.n	801da1c <_strtod_l+0xb6c>
 801d9d6:	a32e      	add	r3, pc, #184	; (adr r3, 801da90 <_strtod_l+0xbe0>)
 801d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9dc:	4640      	mov	r0, r8
 801d9de:	4649      	mov	r1, r9
 801d9e0:	f7e7 f90e 	bl	8004c00 <__aeabi_dcmple>
 801d9e4:	b1a0      	cbz	r0, 801da10 <_strtod_l+0xb60>
 801d9e6:	4649      	mov	r1, r9
 801d9e8:	4640      	mov	r0, r8
 801d9ea:	f7e7 f965 	bl	8004cb8 <__aeabi_d2uiz>
 801d9ee:	2801      	cmp	r0, #1
 801d9f0:	bf38      	it	cc
 801d9f2:	2001      	movcc	r0, #1
 801d9f4:	f7e6 fe0e 	bl	8004614 <__aeabi_ui2d>
 801d9f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d9fa:	4680      	mov	r8, r0
 801d9fc:	4689      	mov	r9, r1
 801d9fe:	bb23      	cbnz	r3, 801da4a <_strtod_l+0xb9a>
 801da00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801da04:	9010      	str	r0, [sp, #64]	; 0x40
 801da06:	9311      	str	r3, [sp, #68]	; 0x44
 801da08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801da0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801da10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801da14:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801da18:	1a9b      	subs	r3, r3, r2
 801da1a:	9309      	str	r3, [sp, #36]	; 0x24
 801da1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801da20:	eeb0 0a48 	vmov.f32	s0, s16
 801da24:	eef0 0a68 	vmov.f32	s1, s17
 801da28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801da2c:	f001 ff72 	bl	801f914 <__ulp>
 801da30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801da34:	ec53 2b10 	vmov	r2, r3, d0
 801da38:	f7e6 fe66 	bl	8004708 <__aeabi_dmul>
 801da3c:	ec53 2b18 	vmov	r2, r3, d8
 801da40:	f7e6 fcac 	bl	800439c <__adddf3>
 801da44:	4682      	mov	sl, r0
 801da46:	468b      	mov	fp, r1
 801da48:	e78d      	b.n	801d966 <_strtod_l+0xab6>
 801da4a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801da4e:	e7db      	b.n	801da08 <_strtod_l+0xb58>
 801da50:	a311      	add	r3, pc, #68	; (adr r3, 801da98 <_strtod_l+0xbe8>)
 801da52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da56:	f7e7 f8c9 	bl	8004bec <__aeabi_dcmplt>
 801da5a:	e7b2      	b.n	801d9c2 <_strtod_l+0xb12>
 801da5c:	2300      	movs	r3, #0
 801da5e:	930a      	str	r3, [sp, #40]	; 0x28
 801da60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801da62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801da64:	6013      	str	r3, [r2, #0]
 801da66:	f7ff ba6b 	b.w	801cf40 <_strtod_l+0x90>
 801da6a:	2a65      	cmp	r2, #101	; 0x65
 801da6c:	f43f ab5f 	beq.w	801d12e <_strtod_l+0x27e>
 801da70:	2a45      	cmp	r2, #69	; 0x45
 801da72:	f43f ab5c 	beq.w	801d12e <_strtod_l+0x27e>
 801da76:	2301      	movs	r3, #1
 801da78:	f7ff bb94 	b.w	801d1a4 <_strtod_l+0x2f4>
 801da7c:	f3af 8000 	nop.w
 801da80:	94a03595 	.word	0x94a03595
 801da84:	3fdfffff 	.word	0x3fdfffff
 801da88:	35afe535 	.word	0x35afe535
 801da8c:	3fe00000 	.word	0x3fe00000
 801da90:	ffc00000 	.word	0xffc00000
 801da94:	41dfffff 	.word	0x41dfffff
 801da98:	94a03595 	.word	0x94a03595
 801da9c:	3fcfffff 	.word	0x3fcfffff
 801daa0:	3ff00000 	.word	0x3ff00000
 801daa4:	7ff00000 	.word	0x7ff00000
 801daa8:	7fe00000 	.word	0x7fe00000
 801daac:	7c9fffff 	.word	0x7c9fffff
 801dab0:	3fe00000 	.word	0x3fe00000
 801dab4:	bff00000 	.word	0xbff00000
 801dab8:	7fefffff 	.word	0x7fefffff

0801dabc <strtod>:
 801dabc:	460a      	mov	r2, r1
 801dabe:	4601      	mov	r1, r0
 801dac0:	4802      	ldr	r0, [pc, #8]	; (801dacc <strtod+0x10>)
 801dac2:	4b03      	ldr	r3, [pc, #12]	; (801dad0 <strtod+0x14>)
 801dac4:	6800      	ldr	r0, [r0, #0]
 801dac6:	f7ff b9f3 	b.w	801ceb0 <_strtod_l>
 801daca:	bf00      	nop
 801dacc:	200005fc 	.word	0x200005fc
 801dad0:	20000664 	.word	0x20000664

0801dad4 <_strtol_l.constprop.0>:
 801dad4:	2b01      	cmp	r3, #1
 801dad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dada:	d001      	beq.n	801dae0 <_strtol_l.constprop.0+0xc>
 801dadc:	2b24      	cmp	r3, #36	; 0x24
 801dade:	d906      	bls.n	801daee <_strtol_l.constprop.0+0x1a>
 801dae0:	f7fe f93e 	bl	801bd60 <__errno>
 801dae4:	2316      	movs	r3, #22
 801dae6:	6003      	str	r3, [r0, #0]
 801dae8:	2000      	movs	r0, #0
 801daea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801daee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801dbd4 <_strtol_l.constprop.0+0x100>
 801daf2:	460d      	mov	r5, r1
 801daf4:	462e      	mov	r6, r5
 801daf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801dafa:	f814 700c 	ldrb.w	r7, [r4, ip]
 801dafe:	f017 0708 	ands.w	r7, r7, #8
 801db02:	d1f7      	bne.n	801daf4 <_strtol_l.constprop.0+0x20>
 801db04:	2c2d      	cmp	r4, #45	; 0x2d
 801db06:	d132      	bne.n	801db6e <_strtol_l.constprop.0+0x9a>
 801db08:	782c      	ldrb	r4, [r5, #0]
 801db0a:	2701      	movs	r7, #1
 801db0c:	1cb5      	adds	r5, r6, #2
 801db0e:	2b00      	cmp	r3, #0
 801db10:	d05b      	beq.n	801dbca <_strtol_l.constprop.0+0xf6>
 801db12:	2b10      	cmp	r3, #16
 801db14:	d109      	bne.n	801db2a <_strtol_l.constprop.0+0x56>
 801db16:	2c30      	cmp	r4, #48	; 0x30
 801db18:	d107      	bne.n	801db2a <_strtol_l.constprop.0+0x56>
 801db1a:	782c      	ldrb	r4, [r5, #0]
 801db1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801db20:	2c58      	cmp	r4, #88	; 0x58
 801db22:	d14d      	bne.n	801dbc0 <_strtol_l.constprop.0+0xec>
 801db24:	786c      	ldrb	r4, [r5, #1]
 801db26:	2310      	movs	r3, #16
 801db28:	3502      	adds	r5, #2
 801db2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801db2e:	f108 38ff 	add.w	r8, r8, #4294967295
 801db32:	f04f 0c00 	mov.w	ip, #0
 801db36:	fbb8 f9f3 	udiv	r9, r8, r3
 801db3a:	4666      	mov	r6, ip
 801db3c:	fb03 8a19 	mls	sl, r3, r9, r8
 801db40:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801db44:	f1be 0f09 	cmp.w	lr, #9
 801db48:	d816      	bhi.n	801db78 <_strtol_l.constprop.0+0xa4>
 801db4a:	4674      	mov	r4, lr
 801db4c:	42a3      	cmp	r3, r4
 801db4e:	dd24      	ble.n	801db9a <_strtol_l.constprop.0+0xc6>
 801db50:	f1bc 0f00 	cmp.w	ip, #0
 801db54:	db1e      	blt.n	801db94 <_strtol_l.constprop.0+0xc0>
 801db56:	45b1      	cmp	r9, r6
 801db58:	d31c      	bcc.n	801db94 <_strtol_l.constprop.0+0xc0>
 801db5a:	d101      	bne.n	801db60 <_strtol_l.constprop.0+0x8c>
 801db5c:	45a2      	cmp	sl, r4
 801db5e:	db19      	blt.n	801db94 <_strtol_l.constprop.0+0xc0>
 801db60:	fb06 4603 	mla	r6, r6, r3, r4
 801db64:	f04f 0c01 	mov.w	ip, #1
 801db68:	f815 4b01 	ldrb.w	r4, [r5], #1
 801db6c:	e7e8      	b.n	801db40 <_strtol_l.constprop.0+0x6c>
 801db6e:	2c2b      	cmp	r4, #43	; 0x2b
 801db70:	bf04      	itt	eq
 801db72:	782c      	ldrbeq	r4, [r5, #0]
 801db74:	1cb5      	addeq	r5, r6, #2
 801db76:	e7ca      	b.n	801db0e <_strtol_l.constprop.0+0x3a>
 801db78:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801db7c:	f1be 0f19 	cmp.w	lr, #25
 801db80:	d801      	bhi.n	801db86 <_strtol_l.constprop.0+0xb2>
 801db82:	3c37      	subs	r4, #55	; 0x37
 801db84:	e7e2      	b.n	801db4c <_strtol_l.constprop.0+0x78>
 801db86:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801db8a:	f1be 0f19 	cmp.w	lr, #25
 801db8e:	d804      	bhi.n	801db9a <_strtol_l.constprop.0+0xc6>
 801db90:	3c57      	subs	r4, #87	; 0x57
 801db92:	e7db      	b.n	801db4c <_strtol_l.constprop.0+0x78>
 801db94:	f04f 3cff 	mov.w	ip, #4294967295
 801db98:	e7e6      	b.n	801db68 <_strtol_l.constprop.0+0x94>
 801db9a:	f1bc 0f00 	cmp.w	ip, #0
 801db9e:	da05      	bge.n	801dbac <_strtol_l.constprop.0+0xd8>
 801dba0:	2322      	movs	r3, #34	; 0x22
 801dba2:	6003      	str	r3, [r0, #0]
 801dba4:	4646      	mov	r6, r8
 801dba6:	b942      	cbnz	r2, 801dbba <_strtol_l.constprop.0+0xe6>
 801dba8:	4630      	mov	r0, r6
 801dbaa:	e79e      	b.n	801daea <_strtol_l.constprop.0+0x16>
 801dbac:	b107      	cbz	r7, 801dbb0 <_strtol_l.constprop.0+0xdc>
 801dbae:	4276      	negs	r6, r6
 801dbb0:	2a00      	cmp	r2, #0
 801dbb2:	d0f9      	beq.n	801dba8 <_strtol_l.constprop.0+0xd4>
 801dbb4:	f1bc 0f00 	cmp.w	ip, #0
 801dbb8:	d000      	beq.n	801dbbc <_strtol_l.constprop.0+0xe8>
 801dbba:	1e69      	subs	r1, r5, #1
 801dbbc:	6011      	str	r1, [r2, #0]
 801dbbe:	e7f3      	b.n	801dba8 <_strtol_l.constprop.0+0xd4>
 801dbc0:	2430      	movs	r4, #48	; 0x30
 801dbc2:	2b00      	cmp	r3, #0
 801dbc4:	d1b1      	bne.n	801db2a <_strtol_l.constprop.0+0x56>
 801dbc6:	2308      	movs	r3, #8
 801dbc8:	e7af      	b.n	801db2a <_strtol_l.constprop.0+0x56>
 801dbca:	2c30      	cmp	r4, #48	; 0x30
 801dbcc:	d0a5      	beq.n	801db1a <_strtol_l.constprop.0+0x46>
 801dbce:	230a      	movs	r3, #10
 801dbd0:	e7ab      	b.n	801db2a <_strtol_l.constprop.0+0x56>
 801dbd2:	bf00      	nop
 801dbd4:	080393f5 	.word	0x080393f5

0801dbd8 <strtol>:
 801dbd8:	4613      	mov	r3, r2
 801dbda:	460a      	mov	r2, r1
 801dbdc:	4601      	mov	r1, r0
 801dbde:	4802      	ldr	r0, [pc, #8]	; (801dbe8 <strtol+0x10>)
 801dbe0:	6800      	ldr	r0, [r0, #0]
 801dbe2:	f7ff bf77 	b.w	801dad4 <_strtol_l.constprop.0>
 801dbe6:	bf00      	nop
 801dbe8:	200005fc 	.word	0x200005fc

0801dbec <__swbuf_r>:
 801dbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dbee:	460e      	mov	r6, r1
 801dbf0:	4614      	mov	r4, r2
 801dbf2:	4605      	mov	r5, r0
 801dbf4:	b118      	cbz	r0, 801dbfe <__swbuf_r+0x12>
 801dbf6:	6983      	ldr	r3, [r0, #24]
 801dbf8:	b90b      	cbnz	r3, 801dbfe <__swbuf_r+0x12>
 801dbfa:	f7fe f9d1 	bl	801bfa0 <__sinit>
 801dbfe:	4b21      	ldr	r3, [pc, #132]	; (801dc84 <__swbuf_r+0x98>)
 801dc00:	429c      	cmp	r4, r3
 801dc02:	d12b      	bne.n	801dc5c <__swbuf_r+0x70>
 801dc04:	686c      	ldr	r4, [r5, #4]
 801dc06:	69a3      	ldr	r3, [r4, #24]
 801dc08:	60a3      	str	r3, [r4, #8]
 801dc0a:	89a3      	ldrh	r3, [r4, #12]
 801dc0c:	071a      	lsls	r2, r3, #28
 801dc0e:	d52f      	bpl.n	801dc70 <__swbuf_r+0x84>
 801dc10:	6923      	ldr	r3, [r4, #16]
 801dc12:	b36b      	cbz	r3, 801dc70 <__swbuf_r+0x84>
 801dc14:	6923      	ldr	r3, [r4, #16]
 801dc16:	6820      	ldr	r0, [r4, #0]
 801dc18:	1ac0      	subs	r0, r0, r3
 801dc1a:	6963      	ldr	r3, [r4, #20]
 801dc1c:	b2f6      	uxtb	r6, r6
 801dc1e:	4283      	cmp	r3, r0
 801dc20:	4637      	mov	r7, r6
 801dc22:	dc04      	bgt.n	801dc2e <__swbuf_r+0x42>
 801dc24:	4621      	mov	r1, r4
 801dc26:	4628      	mov	r0, r5
 801dc28:	f7fe f926 	bl	801be78 <_fflush_r>
 801dc2c:	bb30      	cbnz	r0, 801dc7c <__swbuf_r+0x90>
 801dc2e:	68a3      	ldr	r3, [r4, #8]
 801dc30:	3b01      	subs	r3, #1
 801dc32:	60a3      	str	r3, [r4, #8]
 801dc34:	6823      	ldr	r3, [r4, #0]
 801dc36:	1c5a      	adds	r2, r3, #1
 801dc38:	6022      	str	r2, [r4, #0]
 801dc3a:	701e      	strb	r6, [r3, #0]
 801dc3c:	6963      	ldr	r3, [r4, #20]
 801dc3e:	3001      	adds	r0, #1
 801dc40:	4283      	cmp	r3, r0
 801dc42:	d004      	beq.n	801dc4e <__swbuf_r+0x62>
 801dc44:	89a3      	ldrh	r3, [r4, #12]
 801dc46:	07db      	lsls	r3, r3, #31
 801dc48:	d506      	bpl.n	801dc58 <__swbuf_r+0x6c>
 801dc4a:	2e0a      	cmp	r6, #10
 801dc4c:	d104      	bne.n	801dc58 <__swbuf_r+0x6c>
 801dc4e:	4621      	mov	r1, r4
 801dc50:	4628      	mov	r0, r5
 801dc52:	f7fe f911 	bl	801be78 <_fflush_r>
 801dc56:	b988      	cbnz	r0, 801dc7c <__swbuf_r+0x90>
 801dc58:	4638      	mov	r0, r7
 801dc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc5c:	4b0a      	ldr	r3, [pc, #40]	; (801dc88 <__swbuf_r+0x9c>)
 801dc5e:	429c      	cmp	r4, r3
 801dc60:	d101      	bne.n	801dc66 <__swbuf_r+0x7a>
 801dc62:	68ac      	ldr	r4, [r5, #8]
 801dc64:	e7cf      	b.n	801dc06 <__swbuf_r+0x1a>
 801dc66:	4b09      	ldr	r3, [pc, #36]	; (801dc8c <__swbuf_r+0xa0>)
 801dc68:	429c      	cmp	r4, r3
 801dc6a:	bf08      	it	eq
 801dc6c:	68ec      	ldreq	r4, [r5, #12]
 801dc6e:	e7ca      	b.n	801dc06 <__swbuf_r+0x1a>
 801dc70:	4621      	mov	r1, r4
 801dc72:	4628      	mov	r0, r5
 801dc74:	f000 f81e 	bl	801dcb4 <__swsetup_r>
 801dc78:	2800      	cmp	r0, #0
 801dc7a:	d0cb      	beq.n	801dc14 <__swbuf_r+0x28>
 801dc7c:	f04f 37ff 	mov.w	r7, #4294967295
 801dc80:	e7ea      	b.n	801dc58 <__swbuf_r+0x6c>
 801dc82:	bf00      	nop
 801dc84:	08039518 	.word	0x08039518
 801dc88:	08039538 	.word	0x08039538
 801dc8c:	080394f8 	.word	0x080394f8

0801dc90 <_write_r>:
 801dc90:	b538      	push	{r3, r4, r5, lr}
 801dc92:	4d07      	ldr	r5, [pc, #28]	; (801dcb0 <_write_r+0x20>)
 801dc94:	4604      	mov	r4, r0
 801dc96:	4608      	mov	r0, r1
 801dc98:	4611      	mov	r1, r2
 801dc9a:	2200      	movs	r2, #0
 801dc9c:	602a      	str	r2, [r5, #0]
 801dc9e:	461a      	mov	r2, r3
 801dca0:	f7f7 fcbb 	bl	801561a <_write>
 801dca4:	1c43      	adds	r3, r0, #1
 801dca6:	d102      	bne.n	801dcae <_write_r+0x1e>
 801dca8:	682b      	ldr	r3, [r5, #0]
 801dcaa:	b103      	cbz	r3, 801dcae <_write_r+0x1e>
 801dcac:	6023      	str	r3, [r4, #0]
 801dcae:	bd38      	pop	{r3, r4, r5, pc}
 801dcb0:	20014248 	.word	0x20014248

0801dcb4 <__swsetup_r>:
 801dcb4:	4b32      	ldr	r3, [pc, #200]	; (801dd80 <__swsetup_r+0xcc>)
 801dcb6:	b570      	push	{r4, r5, r6, lr}
 801dcb8:	681d      	ldr	r5, [r3, #0]
 801dcba:	4606      	mov	r6, r0
 801dcbc:	460c      	mov	r4, r1
 801dcbe:	b125      	cbz	r5, 801dcca <__swsetup_r+0x16>
 801dcc0:	69ab      	ldr	r3, [r5, #24]
 801dcc2:	b913      	cbnz	r3, 801dcca <__swsetup_r+0x16>
 801dcc4:	4628      	mov	r0, r5
 801dcc6:	f7fe f96b 	bl	801bfa0 <__sinit>
 801dcca:	4b2e      	ldr	r3, [pc, #184]	; (801dd84 <__swsetup_r+0xd0>)
 801dccc:	429c      	cmp	r4, r3
 801dcce:	d10f      	bne.n	801dcf0 <__swsetup_r+0x3c>
 801dcd0:	686c      	ldr	r4, [r5, #4]
 801dcd2:	89a3      	ldrh	r3, [r4, #12]
 801dcd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dcd8:	0719      	lsls	r1, r3, #28
 801dcda:	d42c      	bmi.n	801dd36 <__swsetup_r+0x82>
 801dcdc:	06dd      	lsls	r5, r3, #27
 801dcde:	d411      	bmi.n	801dd04 <__swsetup_r+0x50>
 801dce0:	2309      	movs	r3, #9
 801dce2:	6033      	str	r3, [r6, #0]
 801dce4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801dce8:	81a3      	strh	r3, [r4, #12]
 801dcea:	f04f 30ff 	mov.w	r0, #4294967295
 801dcee:	e03e      	b.n	801dd6e <__swsetup_r+0xba>
 801dcf0:	4b25      	ldr	r3, [pc, #148]	; (801dd88 <__swsetup_r+0xd4>)
 801dcf2:	429c      	cmp	r4, r3
 801dcf4:	d101      	bne.n	801dcfa <__swsetup_r+0x46>
 801dcf6:	68ac      	ldr	r4, [r5, #8]
 801dcf8:	e7eb      	b.n	801dcd2 <__swsetup_r+0x1e>
 801dcfa:	4b24      	ldr	r3, [pc, #144]	; (801dd8c <__swsetup_r+0xd8>)
 801dcfc:	429c      	cmp	r4, r3
 801dcfe:	bf08      	it	eq
 801dd00:	68ec      	ldreq	r4, [r5, #12]
 801dd02:	e7e6      	b.n	801dcd2 <__swsetup_r+0x1e>
 801dd04:	0758      	lsls	r0, r3, #29
 801dd06:	d512      	bpl.n	801dd2e <__swsetup_r+0x7a>
 801dd08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dd0a:	b141      	cbz	r1, 801dd1e <__swsetup_r+0x6a>
 801dd0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dd10:	4299      	cmp	r1, r3
 801dd12:	d002      	beq.n	801dd1a <__swsetup_r+0x66>
 801dd14:	4630      	mov	r0, r6
 801dd16:	f7fe faad 	bl	801c274 <_free_r>
 801dd1a:	2300      	movs	r3, #0
 801dd1c:	6363      	str	r3, [r4, #52]	; 0x34
 801dd1e:	89a3      	ldrh	r3, [r4, #12]
 801dd20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801dd24:	81a3      	strh	r3, [r4, #12]
 801dd26:	2300      	movs	r3, #0
 801dd28:	6063      	str	r3, [r4, #4]
 801dd2a:	6923      	ldr	r3, [r4, #16]
 801dd2c:	6023      	str	r3, [r4, #0]
 801dd2e:	89a3      	ldrh	r3, [r4, #12]
 801dd30:	f043 0308 	orr.w	r3, r3, #8
 801dd34:	81a3      	strh	r3, [r4, #12]
 801dd36:	6923      	ldr	r3, [r4, #16]
 801dd38:	b94b      	cbnz	r3, 801dd4e <__swsetup_r+0x9a>
 801dd3a:	89a3      	ldrh	r3, [r4, #12]
 801dd3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801dd40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801dd44:	d003      	beq.n	801dd4e <__swsetup_r+0x9a>
 801dd46:	4621      	mov	r1, r4
 801dd48:	4630      	mov	r0, r6
 801dd4a:	f7fe fa13 	bl	801c174 <__smakebuf_r>
 801dd4e:	89a0      	ldrh	r0, [r4, #12]
 801dd50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dd54:	f010 0301 	ands.w	r3, r0, #1
 801dd58:	d00a      	beq.n	801dd70 <__swsetup_r+0xbc>
 801dd5a:	2300      	movs	r3, #0
 801dd5c:	60a3      	str	r3, [r4, #8]
 801dd5e:	6963      	ldr	r3, [r4, #20]
 801dd60:	425b      	negs	r3, r3
 801dd62:	61a3      	str	r3, [r4, #24]
 801dd64:	6923      	ldr	r3, [r4, #16]
 801dd66:	b943      	cbnz	r3, 801dd7a <__swsetup_r+0xc6>
 801dd68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801dd6c:	d1ba      	bne.n	801dce4 <__swsetup_r+0x30>
 801dd6e:	bd70      	pop	{r4, r5, r6, pc}
 801dd70:	0781      	lsls	r1, r0, #30
 801dd72:	bf58      	it	pl
 801dd74:	6963      	ldrpl	r3, [r4, #20]
 801dd76:	60a3      	str	r3, [r4, #8]
 801dd78:	e7f4      	b.n	801dd64 <__swsetup_r+0xb0>
 801dd7a:	2000      	movs	r0, #0
 801dd7c:	e7f7      	b.n	801dd6e <__swsetup_r+0xba>
 801dd7e:	bf00      	nop
 801dd80:	200005fc 	.word	0x200005fc
 801dd84:	08039518 	.word	0x08039518
 801dd88:	08039538 	.word	0x08039538
 801dd8c:	080394f8 	.word	0x080394f8

0801dd90 <_close_r>:
 801dd90:	b538      	push	{r3, r4, r5, lr}
 801dd92:	4d06      	ldr	r5, [pc, #24]	; (801ddac <_close_r+0x1c>)
 801dd94:	2300      	movs	r3, #0
 801dd96:	4604      	mov	r4, r0
 801dd98:	4608      	mov	r0, r1
 801dd9a:	602b      	str	r3, [r5, #0]
 801dd9c:	f7f7 fc66 	bl	801566c <_close>
 801dda0:	1c43      	adds	r3, r0, #1
 801dda2:	d102      	bne.n	801ddaa <_close_r+0x1a>
 801dda4:	682b      	ldr	r3, [r5, #0]
 801dda6:	b103      	cbz	r3, 801ddaa <_close_r+0x1a>
 801dda8:	6023      	str	r3, [r4, #0]
 801ddaa:	bd38      	pop	{r3, r4, r5, pc}
 801ddac:	20014248 	.word	0x20014248

0801ddb0 <quorem>:
 801ddb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddb4:	6903      	ldr	r3, [r0, #16]
 801ddb6:	690c      	ldr	r4, [r1, #16]
 801ddb8:	42a3      	cmp	r3, r4
 801ddba:	4607      	mov	r7, r0
 801ddbc:	f2c0 8081 	blt.w	801dec2 <quorem+0x112>
 801ddc0:	3c01      	subs	r4, #1
 801ddc2:	f101 0814 	add.w	r8, r1, #20
 801ddc6:	f100 0514 	add.w	r5, r0, #20
 801ddca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ddce:	9301      	str	r3, [sp, #4]
 801ddd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ddd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ddd8:	3301      	adds	r3, #1
 801ddda:	429a      	cmp	r2, r3
 801dddc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801dde0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801dde4:	fbb2 f6f3 	udiv	r6, r2, r3
 801dde8:	d331      	bcc.n	801de4e <quorem+0x9e>
 801ddea:	f04f 0e00 	mov.w	lr, #0
 801ddee:	4640      	mov	r0, r8
 801ddf0:	46ac      	mov	ip, r5
 801ddf2:	46f2      	mov	sl, lr
 801ddf4:	f850 2b04 	ldr.w	r2, [r0], #4
 801ddf8:	b293      	uxth	r3, r2
 801ddfa:	fb06 e303 	mla	r3, r6, r3, lr
 801ddfe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801de02:	b29b      	uxth	r3, r3
 801de04:	ebaa 0303 	sub.w	r3, sl, r3
 801de08:	f8dc a000 	ldr.w	sl, [ip]
 801de0c:	0c12      	lsrs	r2, r2, #16
 801de0e:	fa13 f38a 	uxtah	r3, r3, sl
 801de12:	fb06 e202 	mla	r2, r6, r2, lr
 801de16:	9300      	str	r3, [sp, #0]
 801de18:	9b00      	ldr	r3, [sp, #0]
 801de1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801de1e:	b292      	uxth	r2, r2
 801de20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801de24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801de28:	f8bd 3000 	ldrh.w	r3, [sp]
 801de2c:	4581      	cmp	r9, r0
 801de2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801de32:	f84c 3b04 	str.w	r3, [ip], #4
 801de36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801de3a:	d2db      	bcs.n	801ddf4 <quorem+0x44>
 801de3c:	f855 300b 	ldr.w	r3, [r5, fp]
 801de40:	b92b      	cbnz	r3, 801de4e <quorem+0x9e>
 801de42:	9b01      	ldr	r3, [sp, #4]
 801de44:	3b04      	subs	r3, #4
 801de46:	429d      	cmp	r5, r3
 801de48:	461a      	mov	r2, r3
 801de4a:	d32e      	bcc.n	801deaa <quorem+0xfa>
 801de4c:	613c      	str	r4, [r7, #16]
 801de4e:	4638      	mov	r0, r7
 801de50:	f001 fcba 	bl	801f7c8 <__mcmp>
 801de54:	2800      	cmp	r0, #0
 801de56:	db24      	blt.n	801dea2 <quorem+0xf2>
 801de58:	3601      	adds	r6, #1
 801de5a:	4628      	mov	r0, r5
 801de5c:	f04f 0c00 	mov.w	ip, #0
 801de60:	f858 2b04 	ldr.w	r2, [r8], #4
 801de64:	f8d0 e000 	ldr.w	lr, [r0]
 801de68:	b293      	uxth	r3, r2
 801de6a:	ebac 0303 	sub.w	r3, ip, r3
 801de6e:	0c12      	lsrs	r2, r2, #16
 801de70:	fa13 f38e 	uxtah	r3, r3, lr
 801de74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801de78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801de7c:	b29b      	uxth	r3, r3
 801de7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801de82:	45c1      	cmp	r9, r8
 801de84:	f840 3b04 	str.w	r3, [r0], #4
 801de88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801de8c:	d2e8      	bcs.n	801de60 <quorem+0xb0>
 801de8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801de92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801de96:	b922      	cbnz	r2, 801dea2 <quorem+0xf2>
 801de98:	3b04      	subs	r3, #4
 801de9a:	429d      	cmp	r5, r3
 801de9c:	461a      	mov	r2, r3
 801de9e:	d30a      	bcc.n	801deb6 <quorem+0x106>
 801dea0:	613c      	str	r4, [r7, #16]
 801dea2:	4630      	mov	r0, r6
 801dea4:	b003      	add	sp, #12
 801dea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801deaa:	6812      	ldr	r2, [r2, #0]
 801deac:	3b04      	subs	r3, #4
 801deae:	2a00      	cmp	r2, #0
 801deb0:	d1cc      	bne.n	801de4c <quorem+0x9c>
 801deb2:	3c01      	subs	r4, #1
 801deb4:	e7c7      	b.n	801de46 <quorem+0x96>
 801deb6:	6812      	ldr	r2, [r2, #0]
 801deb8:	3b04      	subs	r3, #4
 801deba:	2a00      	cmp	r2, #0
 801debc:	d1f0      	bne.n	801dea0 <quorem+0xf0>
 801debe:	3c01      	subs	r4, #1
 801dec0:	e7eb      	b.n	801de9a <quorem+0xea>
 801dec2:	2000      	movs	r0, #0
 801dec4:	e7ee      	b.n	801dea4 <quorem+0xf4>
	...

0801dec8 <_dtoa_r>:
 801dec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801decc:	ed2d 8b04 	vpush	{d8-d9}
 801ded0:	ec57 6b10 	vmov	r6, r7, d0
 801ded4:	b093      	sub	sp, #76	; 0x4c
 801ded6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ded8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801dedc:	9106      	str	r1, [sp, #24]
 801dede:	ee10 aa10 	vmov	sl, s0
 801dee2:	4604      	mov	r4, r0
 801dee4:	9209      	str	r2, [sp, #36]	; 0x24
 801dee6:	930c      	str	r3, [sp, #48]	; 0x30
 801dee8:	46bb      	mov	fp, r7
 801deea:	b975      	cbnz	r5, 801df0a <_dtoa_r+0x42>
 801deec:	2010      	movs	r0, #16
 801deee:	f7fe f981 	bl	801c1f4 <malloc>
 801def2:	4602      	mov	r2, r0
 801def4:	6260      	str	r0, [r4, #36]	; 0x24
 801def6:	b920      	cbnz	r0, 801df02 <_dtoa_r+0x3a>
 801def8:	4ba7      	ldr	r3, [pc, #668]	; (801e198 <_dtoa_r+0x2d0>)
 801defa:	21ea      	movs	r1, #234	; 0xea
 801defc:	48a7      	ldr	r0, [pc, #668]	; (801e19c <_dtoa_r+0x2d4>)
 801defe:	f002 f827 	bl	801ff50 <__assert_func>
 801df02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801df06:	6005      	str	r5, [r0, #0]
 801df08:	60c5      	str	r5, [r0, #12]
 801df0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801df0c:	6819      	ldr	r1, [r3, #0]
 801df0e:	b151      	cbz	r1, 801df26 <_dtoa_r+0x5e>
 801df10:	685a      	ldr	r2, [r3, #4]
 801df12:	604a      	str	r2, [r1, #4]
 801df14:	2301      	movs	r3, #1
 801df16:	4093      	lsls	r3, r2
 801df18:	608b      	str	r3, [r1, #8]
 801df1a:	4620      	mov	r0, r4
 801df1c:	f001 f9c8 	bl	801f2b0 <_Bfree>
 801df20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801df22:	2200      	movs	r2, #0
 801df24:	601a      	str	r2, [r3, #0]
 801df26:	1e3b      	subs	r3, r7, #0
 801df28:	bfaa      	itet	ge
 801df2a:	2300      	movge	r3, #0
 801df2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801df30:	f8c8 3000 	strge.w	r3, [r8]
 801df34:	4b9a      	ldr	r3, [pc, #616]	; (801e1a0 <_dtoa_r+0x2d8>)
 801df36:	bfbc      	itt	lt
 801df38:	2201      	movlt	r2, #1
 801df3a:	f8c8 2000 	strlt.w	r2, [r8]
 801df3e:	ea33 030b 	bics.w	r3, r3, fp
 801df42:	d11b      	bne.n	801df7c <_dtoa_r+0xb4>
 801df44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801df46:	f242 730f 	movw	r3, #9999	; 0x270f
 801df4a:	6013      	str	r3, [r2, #0]
 801df4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801df50:	4333      	orrs	r3, r6
 801df52:	f000 8592 	beq.w	801ea7a <_dtoa_r+0xbb2>
 801df56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801df58:	b963      	cbnz	r3, 801df74 <_dtoa_r+0xac>
 801df5a:	4b92      	ldr	r3, [pc, #584]	; (801e1a4 <_dtoa_r+0x2dc>)
 801df5c:	e022      	b.n	801dfa4 <_dtoa_r+0xdc>
 801df5e:	4b92      	ldr	r3, [pc, #584]	; (801e1a8 <_dtoa_r+0x2e0>)
 801df60:	9301      	str	r3, [sp, #4]
 801df62:	3308      	adds	r3, #8
 801df64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801df66:	6013      	str	r3, [r2, #0]
 801df68:	9801      	ldr	r0, [sp, #4]
 801df6a:	b013      	add	sp, #76	; 0x4c
 801df6c:	ecbd 8b04 	vpop	{d8-d9}
 801df70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df74:	4b8b      	ldr	r3, [pc, #556]	; (801e1a4 <_dtoa_r+0x2dc>)
 801df76:	9301      	str	r3, [sp, #4]
 801df78:	3303      	adds	r3, #3
 801df7a:	e7f3      	b.n	801df64 <_dtoa_r+0x9c>
 801df7c:	2200      	movs	r2, #0
 801df7e:	2300      	movs	r3, #0
 801df80:	4650      	mov	r0, sl
 801df82:	4659      	mov	r1, fp
 801df84:	f7e6 fe28 	bl	8004bd8 <__aeabi_dcmpeq>
 801df88:	ec4b ab19 	vmov	d9, sl, fp
 801df8c:	4680      	mov	r8, r0
 801df8e:	b158      	cbz	r0, 801dfa8 <_dtoa_r+0xe0>
 801df90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801df92:	2301      	movs	r3, #1
 801df94:	6013      	str	r3, [r2, #0]
 801df96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801df98:	2b00      	cmp	r3, #0
 801df9a:	f000 856b 	beq.w	801ea74 <_dtoa_r+0xbac>
 801df9e:	4883      	ldr	r0, [pc, #524]	; (801e1ac <_dtoa_r+0x2e4>)
 801dfa0:	6018      	str	r0, [r3, #0]
 801dfa2:	1e43      	subs	r3, r0, #1
 801dfa4:	9301      	str	r3, [sp, #4]
 801dfa6:	e7df      	b.n	801df68 <_dtoa_r+0xa0>
 801dfa8:	ec4b ab10 	vmov	d0, sl, fp
 801dfac:	aa10      	add	r2, sp, #64	; 0x40
 801dfae:	a911      	add	r1, sp, #68	; 0x44
 801dfb0:	4620      	mov	r0, r4
 801dfb2:	f001 fd2b 	bl	801fa0c <__d2b>
 801dfb6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801dfba:	ee08 0a10 	vmov	s16, r0
 801dfbe:	2d00      	cmp	r5, #0
 801dfc0:	f000 8084 	beq.w	801e0cc <_dtoa_r+0x204>
 801dfc4:	ee19 3a90 	vmov	r3, s19
 801dfc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801dfcc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801dfd0:	4656      	mov	r6, sl
 801dfd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801dfd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801dfda:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801dfde:	4b74      	ldr	r3, [pc, #464]	; (801e1b0 <_dtoa_r+0x2e8>)
 801dfe0:	2200      	movs	r2, #0
 801dfe2:	4630      	mov	r0, r6
 801dfe4:	4639      	mov	r1, r7
 801dfe6:	f7e6 f9d7 	bl	8004398 <__aeabi_dsub>
 801dfea:	a365      	add	r3, pc, #404	; (adr r3, 801e180 <_dtoa_r+0x2b8>)
 801dfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dff0:	f7e6 fb8a 	bl	8004708 <__aeabi_dmul>
 801dff4:	a364      	add	r3, pc, #400	; (adr r3, 801e188 <_dtoa_r+0x2c0>)
 801dff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dffa:	f7e6 f9cf 	bl	800439c <__adddf3>
 801dffe:	4606      	mov	r6, r0
 801e000:	4628      	mov	r0, r5
 801e002:	460f      	mov	r7, r1
 801e004:	f7e6 fb16 	bl	8004634 <__aeabi_i2d>
 801e008:	a361      	add	r3, pc, #388	; (adr r3, 801e190 <_dtoa_r+0x2c8>)
 801e00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e00e:	f7e6 fb7b 	bl	8004708 <__aeabi_dmul>
 801e012:	4602      	mov	r2, r0
 801e014:	460b      	mov	r3, r1
 801e016:	4630      	mov	r0, r6
 801e018:	4639      	mov	r1, r7
 801e01a:	f7e6 f9bf 	bl	800439c <__adddf3>
 801e01e:	4606      	mov	r6, r0
 801e020:	460f      	mov	r7, r1
 801e022:	f7e6 fe21 	bl	8004c68 <__aeabi_d2iz>
 801e026:	2200      	movs	r2, #0
 801e028:	9000      	str	r0, [sp, #0]
 801e02a:	2300      	movs	r3, #0
 801e02c:	4630      	mov	r0, r6
 801e02e:	4639      	mov	r1, r7
 801e030:	f7e6 fddc 	bl	8004bec <__aeabi_dcmplt>
 801e034:	b150      	cbz	r0, 801e04c <_dtoa_r+0x184>
 801e036:	9800      	ldr	r0, [sp, #0]
 801e038:	f7e6 fafc 	bl	8004634 <__aeabi_i2d>
 801e03c:	4632      	mov	r2, r6
 801e03e:	463b      	mov	r3, r7
 801e040:	f7e6 fdca 	bl	8004bd8 <__aeabi_dcmpeq>
 801e044:	b910      	cbnz	r0, 801e04c <_dtoa_r+0x184>
 801e046:	9b00      	ldr	r3, [sp, #0]
 801e048:	3b01      	subs	r3, #1
 801e04a:	9300      	str	r3, [sp, #0]
 801e04c:	9b00      	ldr	r3, [sp, #0]
 801e04e:	2b16      	cmp	r3, #22
 801e050:	d85a      	bhi.n	801e108 <_dtoa_r+0x240>
 801e052:	9a00      	ldr	r2, [sp, #0]
 801e054:	4b57      	ldr	r3, [pc, #348]	; (801e1b4 <_dtoa_r+0x2ec>)
 801e056:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e05e:	ec51 0b19 	vmov	r0, r1, d9
 801e062:	f7e6 fdc3 	bl	8004bec <__aeabi_dcmplt>
 801e066:	2800      	cmp	r0, #0
 801e068:	d050      	beq.n	801e10c <_dtoa_r+0x244>
 801e06a:	9b00      	ldr	r3, [sp, #0]
 801e06c:	3b01      	subs	r3, #1
 801e06e:	9300      	str	r3, [sp, #0]
 801e070:	2300      	movs	r3, #0
 801e072:	930b      	str	r3, [sp, #44]	; 0x2c
 801e074:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e076:	1b5d      	subs	r5, r3, r5
 801e078:	1e6b      	subs	r3, r5, #1
 801e07a:	9305      	str	r3, [sp, #20]
 801e07c:	bf45      	ittet	mi
 801e07e:	f1c5 0301 	rsbmi	r3, r5, #1
 801e082:	9304      	strmi	r3, [sp, #16]
 801e084:	2300      	movpl	r3, #0
 801e086:	2300      	movmi	r3, #0
 801e088:	bf4c      	ite	mi
 801e08a:	9305      	strmi	r3, [sp, #20]
 801e08c:	9304      	strpl	r3, [sp, #16]
 801e08e:	9b00      	ldr	r3, [sp, #0]
 801e090:	2b00      	cmp	r3, #0
 801e092:	db3d      	blt.n	801e110 <_dtoa_r+0x248>
 801e094:	9b05      	ldr	r3, [sp, #20]
 801e096:	9a00      	ldr	r2, [sp, #0]
 801e098:	920a      	str	r2, [sp, #40]	; 0x28
 801e09a:	4413      	add	r3, r2
 801e09c:	9305      	str	r3, [sp, #20]
 801e09e:	2300      	movs	r3, #0
 801e0a0:	9307      	str	r3, [sp, #28]
 801e0a2:	9b06      	ldr	r3, [sp, #24]
 801e0a4:	2b09      	cmp	r3, #9
 801e0a6:	f200 8089 	bhi.w	801e1bc <_dtoa_r+0x2f4>
 801e0aa:	2b05      	cmp	r3, #5
 801e0ac:	bfc4      	itt	gt
 801e0ae:	3b04      	subgt	r3, #4
 801e0b0:	9306      	strgt	r3, [sp, #24]
 801e0b2:	9b06      	ldr	r3, [sp, #24]
 801e0b4:	f1a3 0302 	sub.w	r3, r3, #2
 801e0b8:	bfcc      	ite	gt
 801e0ba:	2500      	movgt	r5, #0
 801e0bc:	2501      	movle	r5, #1
 801e0be:	2b03      	cmp	r3, #3
 801e0c0:	f200 8087 	bhi.w	801e1d2 <_dtoa_r+0x30a>
 801e0c4:	e8df f003 	tbb	[pc, r3]
 801e0c8:	59383a2d 	.word	0x59383a2d
 801e0cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801e0d0:	441d      	add	r5, r3
 801e0d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801e0d6:	2b20      	cmp	r3, #32
 801e0d8:	bfc1      	itttt	gt
 801e0da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801e0de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801e0e2:	fa0b f303 	lslgt.w	r3, fp, r3
 801e0e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 801e0ea:	bfda      	itte	le
 801e0ec:	f1c3 0320 	rsble	r3, r3, #32
 801e0f0:	fa06 f003 	lslle.w	r0, r6, r3
 801e0f4:	4318      	orrgt	r0, r3
 801e0f6:	f7e6 fa8d 	bl	8004614 <__aeabi_ui2d>
 801e0fa:	2301      	movs	r3, #1
 801e0fc:	4606      	mov	r6, r0
 801e0fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801e102:	3d01      	subs	r5, #1
 801e104:	930e      	str	r3, [sp, #56]	; 0x38
 801e106:	e76a      	b.n	801dfde <_dtoa_r+0x116>
 801e108:	2301      	movs	r3, #1
 801e10a:	e7b2      	b.n	801e072 <_dtoa_r+0x1aa>
 801e10c:	900b      	str	r0, [sp, #44]	; 0x2c
 801e10e:	e7b1      	b.n	801e074 <_dtoa_r+0x1ac>
 801e110:	9b04      	ldr	r3, [sp, #16]
 801e112:	9a00      	ldr	r2, [sp, #0]
 801e114:	1a9b      	subs	r3, r3, r2
 801e116:	9304      	str	r3, [sp, #16]
 801e118:	4253      	negs	r3, r2
 801e11a:	9307      	str	r3, [sp, #28]
 801e11c:	2300      	movs	r3, #0
 801e11e:	930a      	str	r3, [sp, #40]	; 0x28
 801e120:	e7bf      	b.n	801e0a2 <_dtoa_r+0x1da>
 801e122:	2300      	movs	r3, #0
 801e124:	9308      	str	r3, [sp, #32]
 801e126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e128:	2b00      	cmp	r3, #0
 801e12a:	dc55      	bgt.n	801e1d8 <_dtoa_r+0x310>
 801e12c:	2301      	movs	r3, #1
 801e12e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801e132:	461a      	mov	r2, r3
 801e134:	9209      	str	r2, [sp, #36]	; 0x24
 801e136:	e00c      	b.n	801e152 <_dtoa_r+0x28a>
 801e138:	2301      	movs	r3, #1
 801e13a:	e7f3      	b.n	801e124 <_dtoa_r+0x25c>
 801e13c:	2300      	movs	r3, #0
 801e13e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e140:	9308      	str	r3, [sp, #32]
 801e142:	9b00      	ldr	r3, [sp, #0]
 801e144:	4413      	add	r3, r2
 801e146:	9302      	str	r3, [sp, #8]
 801e148:	3301      	adds	r3, #1
 801e14a:	2b01      	cmp	r3, #1
 801e14c:	9303      	str	r3, [sp, #12]
 801e14e:	bfb8      	it	lt
 801e150:	2301      	movlt	r3, #1
 801e152:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801e154:	2200      	movs	r2, #0
 801e156:	6042      	str	r2, [r0, #4]
 801e158:	2204      	movs	r2, #4
 801e15a:	f102 0614 	add.w	r6, r2, #20
 801e15e:	429e      	cmp	r6, r3
 801e160:	6841      	ldr	r1, [r0, #4]
 801e162:	d93d      	bls.n	801e1e0 <_dtoa_r+0x318>
 801e164:	4620      	mov	r0, r4
 801e166:	f001 f863 	bl	801f230 <_Balloc>
 801e16a:	9001      	str	r0, [sp, #4]
 801e16c:	2800      	cmp	r0, #0
 801e16e:	d13b      	bne.n	801e1e8 <_dtoa_r+0x320>
 801e170:	4b11      	ldr	r3, [pc, #68]	; (801e1b8 <_dtoa_r+0x2f0>)
 801e172:	4602      	mov	r2, r0
 801e174:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801e178:	e6c0      	b.n	801defc <_dtoa_r+0x34>
 801e17a:	2301      	movs	r3, #1
 801e17c:	e7df      	b.n	801e13e <_dtoa_r+0x276>
 801e17e:	bf00      	nop
 801e180:	636f4361 	.word	0x636f4361
 801e184:	3fd287a7 	.word	0x3fd287a7
 801e188:	8b60c8b3 	.word	0x8b60c8b3
 801e18c:	3fc68a28 	.word	0x3fc68a28
 801e190:	509f79fb 	.word	0x509f79fb
 801e194:	3fd34413 	.word	0x3fd34413
 801e198:	080395ed 	.word	0x080395ed
 801e19c:	08039604 	.word	0x08039604
 801e1a0:	7ff00000 	.word	0x7ff00000
 801e1a4:	080395e9 	.word	0x080395e9
 801e1a8:	080395e0 	.word	0x080395e0
 801e1ac:	08023e04 	.word	0x08023e04
 801e1b0:	3ff80000 	.word	0x3ff80000
 801e1b4:	08039770 	.word	0x08039770
 801e1b8:	0803965f 	.word	0x0803965f
 801e1bc:	2501      	movs	r5, #1
 801e1be:	2300      	movs	r3, #0
 801e1c0:	9306      	str	r3, [sp, #24]
 801e1c2:	9508      	str	r5, [sp, #32]
 801e1c4:	f04f 33ff 	mov.w	r3, #4294967295
 801e1c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801e1cc:	2200      	movs	r2, #0
 801e1ce:	2312      	movs	r3, #18
 801e1d0:	e7b0      	b.n	801e134 <_dtoa_r+0x26c>
 801e1d2:	2301      	movs	r3, #1
 801e1d4:	9308      	str	r3, [sp, #32]
 801e1d6:	e7f5      	b.n	801e1c4 <_dtoa_r+0x2fc>
 801e1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801e1de:	e7b8      	b.n	801e152 <_dtoa_r+0x28a>
 801e1e0:	3101      	adds	r1, #1
 801e1e2:	6041      	str	r1, [r0, #4]
 801e1e4:	0052      	lsls	r2, r2, #1
 801e1e6:	e7b8      	b.n	801e15a <_dtoa_r+0x292>
 801e1e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e1ea:	9a01      	ldr	r2, [sp, #4]
 801e1ec:	601a      	str	r2, [r3, #0]
 801e1ee:	9b03      	ldr	r3, [sp, #12]
 801e1f0:	2b0e      	cmp	r3, #14
 801e1f2:	f200 809d 	bhi.w	801e330 <_dtoa_r+0x468>
 801e1f6:	2d00      	cmp	r5, #0
 801e1f8:	f000 809a 	beq.w	801e330 <_dtoa_r+0x468>
 801e1fc:	9b00      	ldr	r3, [sp, #0]
 801e1fe:	2b00      	cmp	r3, #0
 801e200:	dd32      	ble.n	801e268 <_dtoa_r+0x3a0>
 801e202:	4ab7      	ldr	r2, [pc, #732]	; (801e4e0 <_dtoa_r+0x618>)
 801e204:	f003 030f 	and.w	r3, r3, #15
 801e208:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801e20c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e210:	9b00      	ldr	r3, [sp, #0]
 801e212:	05d8      	lsls	r0, r3, #23
 801e214:	ea4f 1723 	mov.w	r7, r3, asr #4
 801e218:	d516      	bpl.n	801e248 <_dtoa_r+0x380>
 801e21a:	4bb2      	ldr	r3, [pc, #712]	; (801e4e4 <_dtoa_r+0x61c>)
 801e21c:	ec51 0b19 	vmov	r0, r1, d9
 801e220:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e224:	f7e6 fb9a 	bl	800495c <__aeabi_ddiv>
 801e228:	f007 070f 	and.w	r7, r7, #15
 801e22c:	4682      	mov	sl, r0
 801e22e:	468b      	mov	fp, r1
 801e230:	2503      	movs	r5, #3
 801e232:	4eac      	ldr	r6, [pc, #688]	; (801e4e4 <_dtoa_r+0x61c>)
 801e234:	b957      	cbnz	r7, 801e24c <_dtoa_r+0x384>
 801e236:	4642      	mov	r2, r8
 801e238:	464b      	mov	r3, r9
 801e23a:	4650      	mov	r0, sl
 801e23c:	4659      	mov	r1, fp
 801e23e:	f7e6 fb8d 	bl	800495c <__aeabi_ddiv>
 801e242:	4682      	mov	sl, r0
 801e244:	468b      	mov	fp, r1
 801e246:	e028      	b.n	801e29a <_dtoa_r+0x3d2>
 801e248:	2502      	movs	r5, #2
 801e24a:	e7f2      	b.n	801e232 <_dtoa_r+0x36a>
 801e24c:	07f9      	lsls	r1, r7, #31
 801e24e:	d508      	bpl.n	801e262 <_dtoa_r+0x39a>
 801e250:	4640      	mov	r0, r8
 801e252:	4649      	mov	r1, r9
 801e254:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e258:	f7e6 fa56 	bl	8004708 <__aeabi_dmul>
 801e25c:	3501      	adds	r5, #1
 801e25e:	4680      	mov	r8, r0
 801e260:	4689      	mov	r9, r1
 801e262:	107f      	asrs	r7, r7, #1
 801e264:	3608      	adds	r6, #8
 801e266:	e7e5      	b.n	801e234 <_dtoa_r+0x36c>
 801e268:	f000 809b 	beq.w	801e3a2 <_dtoa_r+0x4da>
 801e26c:	9b00      	ldr	r3, [sp, #0]
 801e26e:	4f9d      	ldr	r7, [pc, #628]	; (801e4e4 <_dtoa_r+0x61c>)
 801e270:	425e      	negs	r6, r3
 801e272:	4b9b      	ldr	r3, [pc, #620]	; (801e4e0 <_dtoa_r+0x618>)
 801e274:	f006 020f 	and.w	r2, r6, #15
 801e278:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e280:	ec51 0b19 	vmov	r0, r1, d9
 801e284:	f7e6 fa40 	bl	8004708 <__aeabi_dmul>
 801e288:	1136      	asrs	r6, r6, #4
 801e28a:	4682      	mov	sl, r0
 801e28c:	468b      	mov	fp, r1
 801e28e:	2300      	movs	r3, #0
 801e290:	2502      	movs	r5, #2
 801e292:	2e00      	cmp	r6, #0
 801e294:	d17a      	bne.n	801e38c <_dtoa_r+0x4c4>
 801e296:	2b00      	cmp	r3, #0
 801e298:	d1d3      	bne.n	801e242 <_dtoa_r+0x37a>
 801e29a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e29c:	2b00      	cmp	r3, #0
 801e29e:	f000 8082 	beq.w	801e3a6 <_dtoa_r+0x4de>
 801e2a2:	4b91      	ldr	r3, [pc, #580]	; (801e4e8 <_dtoa_r+0x620>)
 801e2a4:	2200      	movs	r2, #0
 801e2a6:	4650      	mov	r0, sl
 801e2a8:	4659      	mov	r1, fp
 801e2aa:	f7e6 fc9f 	bl	8004bec <__aeabi_dcmplt>
 801e2ae:	2800      	cmp	r0, #0
 801e2b0:	d079      	beq.n	801e3a6 <_dtoa_r+0x4de>
 801e2b2:	9b03      	ldr	r3, [sp, #12]
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d076      	beq.n	801e3a6 <_dtoa_r+0x4de>
 801e2b8:	9b02      	ldr	r3, [sp, #8]
 801e2ba:	2b00      	cmp	r3, #0
 801e2bc:	dd36      	ble.n	801e32c <_dtoa_r+0x464>
 801e2be:	9b00      	ldr	r3, [sp, #0]
 801e2c0:	4650      	mov	r0, sl
 801e2c2:	4659      	mov	r1, fp
 801e2c4:	1e5f      	subs	r7, r3, #1
 801e2c6:	2200      	movs	r2, #0
 801e2c8:	4b88      	ldr	r3, [pc, #544]	; (801e4ec <_dtoa_r+0x624>)
 801e2ca:	f7e6 fa1d 	bl	8004708 <__aeabi_dmul>
 801e2ce:	9e02      	ldr	r6, [sp, #8]
 801e2d0:	4682      	mov	sl, r0
 801e2d2:	468b      	mov	fp, r1
 801e2d4:	3501      	adds	r5, #1
 801e2d6:	4628      	mov	r0, r5
 801e2d8:	f7e6 f9ac 	bl	8004634 <__aeabi_i2d>
 801e2dc:	4652      	mov	r2, sl
 801e2de:	465b      	mov	r3, fp
 801e2e0:	f7e6 fa12 	bl	8004708 <__aeabi_dmul>
 801e2e4:	4b82      	ldr	r3, [pc, #520]	; (801e4f0 <_dtoa_r+0x628>)
 801e2e6:	2200      	movs	r2, #0
 801e2e8:	f7e6 f858 	bl	800439c <__adddf3>
 801e2ec:	46d0      	mov	r8, sl
 801e2ee:	46d9      	mov	r9, fp
 801e2f0:	4682      	mov	sl, r0
 801e2f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801e2f6:	2e00      	cmp	r6, #0
 801e2f8:	d158      	bne.n	801e3ac <_dtoa_r+0x4e4>
 801e2fa:	4b7e      	ldr	r3, [pc, #504]	; (801e4f4 <_dtoa_r+0x62c>)
 801e2fc:	2200      	movs	r2, #0
 801e2fe:	4640      	mov	r0, r8
 801e300:	4649      	mov	r1, r9
 801e302:	f7e6 f849 	bl	8004398 <__aeabi_dsub>
 801e306:	4652      	mov	r2, sl
 801e308:	465b      	mov	r3, fp
 801e30a:	4680      	mov	r8, r0
 801e30c:	4689      	mov	r9, r1
 801e30e:	f7e6 fc8b 	bl	8004c28 <__aeabi_dcmpgt>
 801e312:	2800      	cmp	r0, #0
 801e314:	f040 8295 	bne.w	801e842 <_dtoa_r+0x97a>
 801e318:	4652      	mov	r2, sl
 801e31a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801e31e:	4640      	mov	r0, r8
 801e320:	4649      	mov	r1, r9
 801e322:	f7e6 fc63 	bl	8004bec <__aeabi_dcmplt>
 801e326:	2800      	cmp	r0, #0
 801e328:	f040 8289 	bne.w	801e83e <_dtoa_r+0x976>
 801e32c:	ec5b ab19 	vmov	sl, fp, d9
 801e330:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e332:	2b00      	cmp	r3, #0
 801e334:	f2c0 8148 	blt.w	801e5c8 <_dtoa_r+0x700>
 801e338:	9a00      	ldr	r2, [sp, #0]
 801e33a:	2a0e      	cmp	r2, #14
 801e33c:	f300 8144 	bgt.w	801e5c8 <_dtoa_r+0x700>
 801e340:	4b67      	ldr	r3, [pc, #412]	; (801e4e0 <_dtoa_r+0x618>)
 801e342:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e346:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e34a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e34c:	2b00      	cmp	r3, #0
 801e34e:	f280 80d5 	bge.w	801e4fc <_dtoa_r+0x634>
 801e352:	9b03      	ldr	r3, [sp, #12]
 801e354:	2b00      	cmp	r3, #0
 801e356:	f300 80d1 	bgt.w	801e4fc <_dtoa_r+0x634>
 801e35a:	f040 826f 	bne.w	801e83c <_dtoa_r+0x974>
 801e35e:	4b65      	ldr	r3, [pc, #404]	; (801e4f4 <_dtoa_r+0x62c>)
 801e360:	2200      	movs	r2, #0
 801e362:	4640      	mov	r0, r8
 801e364:	4649      	mov	r1, r9
 801e366:	f7e6 f9cf 	bl	8004708 <__aeabi_dmul>
 801e36a:	4652      	mov	r2, sl
 801e36c:	465b      	mov	r3, fp
 801e36e:	f7e6 fc51 	bl	8004c14 <__aeabi_dcmpge>
 801e372:	9e03      	ldr	r6, [sp, #12]
 801e374:	4637      	mov	r7, r6
 801e376:	2800      	cmp	r0, #0
 801e378:	f040 8245 	bne.w	801e806 <_dtoa_r+0x93e>
 801e37c:	9d01      	ldr	r5, [sp, #4]
 801e37e:	2331      	movs	r3, #49	; 0x31
 801e380:	f805 3b01 	strb.w	r3, [r5], #1
 801e384:	9b00      	ldr	r3, [sp, #0]
 801e386:	3301      	adds	r3, #1
 801e388:	9300      	str	r3, [sp, #0]
 801e38a:	e240      	b.n	801e80e <_dtoa_r+0x946>
 801e38c:	07f2      	lsls	r2, r6, #31
 801e38e:	d505      	bpl.n	801e39c <_dtoa_r+0x4d4>
 801e390:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e394:	f7e6 f9b8 	bl	8004708 <__aeabi_dmul>
 801e398:	3501      	adds	r5, #1
 801e39a:	2301      	movs	r3, #1
 801e39c:	1076      	asrs	r6, r6, #1
 801e39e:	3708      	adds	r7, #8
 801e3a0:	e777      	b.n	801e292 <_dtoa_r+0x3ca>
 801e3a2:	2502      	movs	r5, #2
 801e3a4:	e779      	b.n	801e29a <_dtoa_r+0x3d2>
 801e3a6:	9f00      	ldr	r7, [sp, #0]
 801e3a8:	9e03      	ldr	r6, [sp, #12]
 801e3aa:	e794      	b.n	801e2d6 <_dtoa_r+0x40e>
 801e3ac:	9901      	ldr	r1, [sp, #4]
 801e3ae:	4b4c      	ldr	r3, [pc, #304]	; (801e4e0 <_dtoa_r+0x618>)
 801e3b0:	4431      	add	r1, r6
 801e3b2:	910d      	str	r1, [sp, #52]	; 0x34
 801e3b4:	9908      	ldr	r1, [sp, #32]
 801e3b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801e3ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e3be:	2900      	cmp	r1, #0
 801e3c0:	d043      	beq.n	801e44a <_dtoa_r+0x582>
 801e3c2:	494d      	ldr	r1, [pc, #308]	; (801e4f8 <_dtoa_r+0x630>)
 801e3c4:	2000      	movs	r0, #0
 801e3c6:	f7e6 fac9 	bl	800495c <__aeabi_ddiv>
 801e3ca:	4652      	mov	r2, sl
 801e3cc:	465b      	mov	r3, fp
 801e3ce:	f7e5 ffe3 	bl	8004398 <__aeabi_dsub>
 801e3d2:	9d01      	ldr	r5, [sp, #4]
 801e3d4:	4682      	mov	sl, r0
 801e3d6:	468b      	mov	fp, r1
 801e3d8:	4649      	mov	r1, r9
 801e3da:	4640      	mov	r0, r8
 801e3dc:	f7e6 fc44 	bl	8004c68 <__aeabi_d2iz>
 801e3e0:	4606      	mov	r6, r0
 801e3e2:	f7e6 f927 	bl	8004634 <__aeabi_i2d>
 801e3e6:	4602      	mov	r2, r0
 801e3e8:	460b      	mov	r3, r1
 801e3ea:	4640      	mov	r0, r8
 801e3ec:	4649      	mov	r1, r9
 801e3ee:	f7e5 ffd3 	bl	8004398 <__aeabi_dsub>
 801e3f2:	3630      	adds	r6, #48	; 0x30
 801e3f4:	f805 6b01 	strb.w	r6, [r5], #1
 801e3f8:	4652      	mov	r2, sl
 801e3fa:	465b      	mov	r3, fp
 801e3fc:	4680      	mov	r8, r0
 801e3fe:	4689      	mov	r9, r1
 801e400:	f7e6 fbf4 	bl	8004bec <__aeabi_dcmplt>
 801e404:	2800      	cmp	r0, #0
 801e406:	d163      	bne.n	801e4d0 <_dtoa_r+0x608>
 801e408:	4642      	mov	r2, r8
 801e40a:	464b      	mov	r3, r9
 801e40c:	4936      	ldr	r1, [pc, #216]	; (801e4e8 <_dtoa_r+0x620>)
 801e40e:	2000      	movs	r0, #0
 801e410:	f7e5 ffc2 	bl	8004398 <__aeabi_dsub>
 801e414:	4652      	mov	r2, sl
 801e416:	465b      	mov	r3, fp
 801e418:	f7e6 fbe8 	bl	8004bec <__aeabi_dcmplt>
 801e41c:	2800      	cmp	r0, #0
 801e41e:	f040 80b5 	bne.w	801e58c <_dtoa_r+0x6c4>
 801e422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e424:	429d      	cmp	r5, r3
 801e426:	d081      	beq.n	801e32c <_dtoa_r+0x464>
 801e428:	4b30      	ldr	r3, [pc, #192]	; (801e4ec <_dtoa_r+0x624>)
 801e42a:	2200      	movs	r2, #0
 801e42c:	4650      	mov	r0, sl
 801e42e:	4659      	mov	r1, fp
 801e430:	f7e6 f96a 	bl	8004708 <__aeabi_dmul>
 801e434:	4b2d      	ldr	r3, [pc, #180]	; (801e4ec <_dtoa_r+0x624>)
 801e436:	4682      	mov	sl, r0
 801e438:	468b      	mov	fp, r1
 801e43a:	4640      	mov	r0, r8
 801e43c:	4649      	mov	r1, r9
 801e43e:	2200      	movs	r2, #0
 801e440:	f7e6 f962 	bl	8004708 <__aeabi_dmul>
 801e444:	4680      	mov	r8, r0
 801e446:	4689      	mov	r9, r1
 801e448:	e7c6      	b.n	801e3d8 <_dtoa_r+0x510>
 801e44a:	4650      	mov	r0, sl
 801e44c:	4659      	mov	r1, fp
 801e44e:	f7e6 f95b 	bl	8004708 <__aeabi_dmul>
 801e452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e454:	9d01      	ldr	r5, [sp, #4]
 801e456:	930f      	str	r3, [sp, #60]	; 0x3c
 801e458:	4682      	mov	sl, r0
 801e45a:	468b      	mov	fp, r1
 801e45c:	4649      	mov	r1, r9
 801e45e:	4640      	mov	r0, r8
 801e460:	f7e6 fc02 	bl	8004c68 <__aeabi_d2iz>
 801e464:	4606      	mov	r6, r0
 801e466:	f7e6 f8e5 	bl	8004634 <__aeabi_i2d>
 801e46a:	3630      	adds	r6, #48	; 0x30
 801e46c:	4602      	mov	r2, r0
 801e46e:	460b      	mov	r3, r1
 801e470:	4640      	mov	r0, r8
 801e472:	4649      	mov	r1, r9
 801e474:	f7e5 ff90 	bl	8004398 <__aeabi_dsub>
 801e478:	f805 6b01 	strb.w	r6, [r5], #1
 801e47c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e47e:	429d      	cmp	r5, r3
 801e480:	4680      	mov	r8, r0
 801e482:	4689      	mov	r9, r1
 801e484:	f04f 0200 	mov.w	r2, #0
 801e488:	d124      	bne.n	801e4d4 <_dtoa_r+0x60c>
 801e48a:	4b1b      	ldr	r3, [pc, #108]	; (801e4f8 <_dtoa_r+0x630>)
 801e48c:	4650      	mov	r0, sl
 801e48e:	4659      	mov	r1, fp
 801e490:	f7e5 ff84 	bl	800439c <__adddf3>
 801e494:	4602      	mov	r2, r0
 801e496:	460b      	mov	r3, r1
 801e498:	4640      	mov	r0, r8
 801e49a:	4649      	mov	r1, r9
 801e49c:	f7e6 fbc4 	bl	8004c28 <__aeabi_dcmpgt>
 801e4a0:	2800      	cmp	r0, #0
 801e4a2:	d173      	bne.n	801e58c <_dtoa_r+0x6c4>
 801e4a4:	4652      	mov	r2, sl
 801e4a6:	465b      	mov	r3, fp
 801e4a8:	4913      	ldr	r1, [pc, #76]	; (801e4f8 <_dtoa_r+0x630>)
 801e4aa:	2000      	movs	r0, #0
 801e4ac:	f7e5 ff74 	bl	8004398 <__aeabi_dsub>
 801e4b0:	4602      	mov	r2, r0
 801e4b2:	460b      	mov	r3, r1
 801e4b4:	4640      	mov	r0, r8
 801e4b6:	4649      	mov	r1, r9
 801e4b8:	f7e6 fb98 	bl	8004bec <__aeabi_dcmplt>
 801e4bc:	2800      	cmp	r0, #0
 801e4be:	f43f af35 	beq.w	801e32c <_dtoa_r+0x464>
 801e4c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801e4c4:	1e6b      	subs	r3, r5, #1
 801e4c6:	930f      	str	r3, [sp, #60]	; 0x3c
 801e4c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801e4cc:	2b30      	cmp	r3, #48	; 0x30
 801e4ce:	d0f8      	beq.n	801e4c2 <_dtoa_r+0x5fa>
 801e4d0:	9700      	str	r7, [sp, #0]
 801e4d2:	e049      	b.n	801e568 <_dtoa_r+0x6a0>
 801e4d4:	4b05      	ldr	r3, [pc, #20]	; (801e4ec <_dtoa_r+0x624>)
 801e4d6:	f7e6 f917 	bl	8004708 <__aeabi_dmul>
 801e4da:	4680      	mov	r8, r0
 801e4dc:	4689      	mov	r9, r1
 801e4de:	e7bd      	b.n	801e45c <_dtoa_r+0x594>
 801e4e0:	08039770 	.word	0x08039770
 801e4e4:	08039748 	.word	0x08039748
 801e4e8:	3ff00000 	.word	0x3ff00000
 801e4ec:	40240000 	.word	0x40240000
 801e4f0:	401c0000 	.word	0x401c0000
 801e4f4:	40140000 	.word	0x40140000
 801e4f8:	3fe00000 	.word	0x3fe00000
 801e4fc:	9d01      	ldr	r5, [sp, #4]
 801e4fe:	4656      	mov	r6, sl
 801e500:	465f      	mov	r7, fp
 801e502:	4642      	mov	r2, r8
 801e504:	464b      	mov	r3, r9
 801e506:	4630      	mov	r0, r6
 801e508:	4639      	mov	r1, r7
 801e50a:	f7e6 fa27 	bl	800495c <__aeabi_ddiv>
 801e50e:	f7e6 fbab 	bl	8004c68 <__aeabi_d2iz>
 801e512:	4682      	mov	sl, r0
 801e514:	f7e6 f88e 	bl	8004634 <__aeabi_i2d>
 801e518:	4642      	mov	r2, r8
 801e51a:	464b      	mov	r3, r9
 801e51c:	f7e6 f8f4 	bl	8004708 <__aeabi_dmul>
 801e520:	4602      	mov	r2, r0
 801e522:	460b      	mov	r3, r1
 801e524:	4630      	mov	r0, r6
 801e526:	4639      	mov	r1, r7
 801e528:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801e52c:	f7e5 ff34 	bl	8004398 <__aeabi_dsub>
 801e530:	f805 6b01 	strb.w	r6, [r5], #1
 801e534:	9e01      	ldr	r6, [sp, #4]
 801e536:	9f03      	ldr	r7, [sp, #12]
 801e538:	1bae      	subs	r6, r5, r6
 801e53a:	42b7      	cmp	r7, r6
 801e53c:	4602      	mov	r2, r0
 801e53e:	460b      	mov	r3, r1
 801e540:	d135      	bne.n	801e5ae <_dtoa_r+0x6e6>
 801e542:	f7e5 ff2b 	bl	800439c <__adddf3>
 801e546:	4642      	mov	r2, r8
 801e548:	464b      	mov	r3, r9
 801e54a:	4606      	mov	r6, r0
 801e54c:	460f      	mov	r7, r1
 801e54e:	f7e6 fb6b 	bl	8004c28 <__aeabi_dcmpgt>
 801e552:	b9d0      	cbnz	r0, 801e58a <_dtoa_r+0x6c2>
 801e554:	4642      	mov	r2, r8
 801e556:	464b      	mov	r3, r9
 801e558:	4630      	mov	r0, r6
 801e55a:	4639      	mov	r1, r7
 801e55c:	f7e6 fb3c 	bl	8004bd8 <__aeabi_dcmpeq>
 801e560:	b110      	cbz	r0, 801e568 <_dtoa_r+0x6a0>
 801e562:	f01a 0f01 	tst.w	sl, #1
 801e566:	d110      	bne.n	801e58a <_dtoa_r+0x6c2>
 801e568:	4620      	mov	r0, r4
 801e56a:	ee18 1a10 	vmov	r1, s16
 801e56e:	f000 fe9f 	bl	801f2b0 <_Bfree>
 801e572:	2300      	movs	r3, #0
 801e574:	9800      	ldr	r0, [sp, #0]
 801e576:	702b      	strb	r3, [r5, #0]
 801e578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e57a:	3001      	adds	r0, #1
 801e57c:	6018      	str	r0, [r3, #0]
 801e57e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e580:	2b00      	cmp	r3, #0
 801e582:	f43f acf1 	beq.w	801df68 <_dtoa_r+0xa0>
 801e586:	601d      	str	r5, [r3, #0]
 801e588:	e4ee      	b.n	801df68 <_dtoa_r+0xa0>
 801e58a:	9f00      	ldr	r7, [sp, #0]
 801e58c:	462b      	mov	r3, r5
 801e58e:	461d      	mov	r5, r3
 801e590:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e594:	2a39      	cmp	r2, #57	; 0x39
 801e596:	d106      	bne.n	801e5a6 <_dtoa_r+0x6de>
 801e598:	9a01      	ldr	r2, [sp, #4]
 801e59a:	429a      	cmp	r2, r3
 801e59c:	d1f7      	bne.n	801e58e <_dtoa_r+0x6c6>
 801e59e:	9901      	ldr	r1, [sp, #4]
 801e5a0:	2230      	movs	r2, #48	; 0x30
 801e5a2:	3701      	adds	r7, #1
 801e5a4:	700a      	strb	r2, [r1, #0]
 801e5a6:	781a      	ldrb	r2, [r3, #0]
 801e5a8:	3201      	adds	r2, #1
 801e5aa:	701a      	strb	r2, [r3, #0]
 801e5ac:	e790      	b.n	801e4d0 <_dtoa_r+0x608>
 801e5ae:	4ba6      	ldr	r3, [pc, #664]	; (801e848 <_dtoa_r+0x980>)
 801e5b0:	2200      	movs	r2, #0
 801e5b2:	f7e6 f8a9 	bl	8004708 <__aeabi_dmul>
 801e5b6:	2200      	movs	r2, #0
 801e5b8:	2300      	movs	r3, #0
 801e5ba:	4606      	mov	r6, r0
 801e5bc:	460f      	mov	r7, r1
 801e5be:	f7e6 fb0b 	bl	8004bd8 <__aeabi_dcmpeq>
 801e5c2:	2800      	cmp	r0, #0
 801e5c4:	d09d      	beq.n	801e502 <_dtoa_r+0x63a>
 801e5c6:	e7cf      	b.n	801e568 <_dtoa_r+0x6a0>
 801e5c8:	9a08      	ldr	r2, [sp, #32]
 801e5ca:	2a00      	cmp	r2, #0
 801e5cc:	f000 80d7 	beq.w	801e77e <_dtoa_r+0x8b6>
 801e5d0:	9a06      	ldr	r2, [sp, #24]
 801e5d2:	2a01      	cmp	r2, #1
 801e5d4:	f300 80ba 	bgt.w	801e74c <_dtoa_r+0x884>
 801e5d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e5da:	2a00      	cmp	r2, #0
 801e5dc:	f000 80b2 	beq.w	801e744 <_dtoa_r+0x87c>
 801e5e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801e5e4:	9e07      	ldr	r6, [sp, #28]
 801e5e6:	9d04      	ldr	r5, [sp, #16]
 801e5e8:	9a04      	ldr	r2, [sp, #16]
 801e5ea:	441a      	add	r2, r3
 801e5ec:	9204      	str	r2, [sp, #16]
 801e5ee:	9a05      	ldr	r2, [sp, #20]
 801e5f0:	2101      	movs	r1, #1
 801e5f2:	441a      	add	r2, r3
 801e5f4:	4620      	mov	r0, r4
 801e5f6:	9205      	str	r2, [sp, #20]
 801e5f8:	f000 ff5c 	bl	801f4b4 <__i2b>
 801e5fc:	4607      	mov	r7, r0
 801e5fe:	2d00      	cmp	r5, #0
 801e600:	dd0c      	ble.n	801e61c <_dtoa_r+0x754>
 801e602:	9b05      	ldr	r3, [sp, #20]
 801e604:	2b00      	cmp	r3, #0
 801e606:	dd09      	ble.n	801e61c <_dtoa_r+0x754>
 801e608:	42ab      	cmp	r3, r5
 801e60a:	9a04      	ldr	r2, [sp, #16]
 801e60c:	bfa8      	it	ge
 801e60e:	462b      	movge	r3, r5
 801e610:	1ad2      	subs	r2, r2, r3
 801e612:	9204      	str	r2, [sp, #16]
 801e614:	9a05      	ldr	r2, [sp, #20]
 801e616:	1aed      	subs	r5, r5, r3
 801e618:	1ad3      	subs	r3, r2, r3
 801e61a:	9305      	str	r3, [sp, #20]
 801e61c:	9b07      	ldr	r3, [sp, #28]
 801e61e:	b31b      	cbz	r3, 801e668 <_dtoa_r+0x7a0>
 801e620:	9b08      	ldr	r3, [sp, #32]
 801e622:	2b00      	cmp	r3, #0
 801e624:	f000 80af 	beq.w	801e786 <_dtoa_r+0x8be>
 801e628:	2e00      	cmp	r6, #0
 801e62a:	dd13      	ble.n	801e654 <_dtoa_r+0x78c>
 801e62c:	4639      	mov	r1, r7
 801e62e:	4632      	mov	r2, r6
 801e630:	4620      	mov	r0, r4
 801e632:	f000 ffff 	bl	801f634 <__pow5mult>
 801e636:	ee18 2a10 	vmov	r2, s16
 801e63a:	4601      	mov	r1, r0
 801e63c:	4607      	mov	r7, r0
 801e63e:	4620      	mov	r0, r4
 801e640:	f000 ff4e 	bl	801f4e0 <__multiply>
 801e644:	ee18 1a10 	vmov	r1, s16
 801e648:	4680      	mov	r8, r0
 801e64a:	4620      	mov	r0, r4
 801e64c:	f000 fe30 	bl	801f2b0 <_Bfree>
 801e650:	ee08 8a10 	vmov	s16, r8
 801e654:	9b07      	ldr	r3, [sp, #28]
 801e656:	1b9a      	subs	r2, r3, r6
 801e658:	d006      	beq.n	801e668 <_dtoa_r+0x7a0>
 801e65a:	ee18 1a10 	vmov	r1, s16
 801e65e:	4620      	mov	r0, r4
 801e660:	f000 ffe8 	bl	801f634 <__pow5mult>
 801e664:	ee08 0a10 	vmov	s16, r0
 801e668:	2101      	movs	r1, #1
 801e66a:	4620      	mov	r0, r4
 801e66c:	f000 ff22 	bl	801f4b4 <__i2b>
 801e670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e672:	2b00      	cmp	r3, #0
 801e674:	4606      	mov	r6, r0
 801e676:	f340 8088 	ble.w	801e78a <_dtoa_r+0x8c2>
 801e67a:	461a      	mov	r2, r3
 801e67c:	4601      	mov	r1, r0
 801e67e:	4620      	mov	r0, r4
 801e680:	f000 ffd8 	bl	801f634 <__pow5mult>
 801e684:	9b06      	ldr	r3, [sp, #24]
 801e686:	2b01      	cmp	r3, #1
 801e688:	4606      	mov	r6, r0
 801e68a:	f340 8081 	ble.w	801e790 <_dtoa_r+0x8c8>
 801e68e:	f04f 0800 	mov.w	r8, #0
 801e692:	6933      	ldr	r3, [r6, #16]
 801e694:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801e698:	6918      	ldr	r0, [r3, #16]
 801e69a:	f000 febb 	bl	801f414 <__hi0bits>
 801e69e:	f1c0 0020 	rsb	r0, r0, #32
 801e6a2:	9b05      	ldr	r3, [sp, #20]
 801e6a4:	4418      	add	r0, r3
 801e6a6:	f010 001f 	ands.w	r0, r0, #31
 801e6aa:	f000 8092 	beq.w	801e7d2 <_dtoa_r+0x90a>
 801e6ae:	f1c0 0320 	rsb	r3, r0, #32
 801e6b2:	2b04      	cmp	r3, #4
 801e6b4:	f340 808a 	ble.w	801e7cc <_dtoa_r+0x904>
 801e6b8:	f1c0 001c 	rsb	r0, r0, #28
 801e6bc:	9b04      	ldr	r3, [sp, #16]
 801e6be:	4403      	add	r3, r0
 801e6c0:	9304      	str	r3, [sp, #16]
 801e6c2:	9b05      	ldr	r3, [sp, #20]
 801e6c4:	4403      	add	r3, r0
 801e6c6:	4405      	add	r5, r0
 801e6c8:	9305      	str	r3, [sp, #20]
 801e6ca:	9b04      	ldr	r3, [sp, #16]
 801e6cc:	2b00      	cmp	r3, #0
 801e6ce:	dd07      	ble.n	801e6e0 <_dtoa_r+0x818>
 801e6d0:	ee18 1a10 	vmov	r1, s16
 801e6d4:	461a      	mov	r2, r3
 801e6d6:	4620      	mov	r0, r4
 801e6d8:	f001 f806 	bl	801f6e8 <__lshift>
 801e6dc:	ee08 0a10 	vmov	s16, r0
 801e6e0:	9b05      	ldr	r3, [sp, #20]
 801e6e2:	2b00      	cmp	r3, #0
 801e6e4:	dd05      	ble.n	801e6f2 <_dtoa_r+0x82a>
 801e6e6:	4631      	mov	r1, r6
 801e6e8:	461a      	mov	r2, r3
 801e6ea:	4620      	mov	r0, r4
 801e6ec:	f000 fffc 	bl	801f6e8 <__lshift>
 801e6f0:	4606      	mov	r6, r0
 801e6f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	d06e      	beq.n	801e7d6 <_dtoa_r+0x90e>
 801e6f8:	ee18 0a10 	vmov	r0, s16
 801e6fc:	4631      	mov	r1, r6
 801e6fe:	f001 f863 	bl	801f7c8 <__mcmp>
 801e702:	2800      	cmp	r0, #0
 801e704:	da67      	bge.n	801e7d6 <_dtoa_r+0x90e>
 801e706:	9b00      	ldr	r3, [sp, #0]
 801e708:	3b01      	subs	r3, #1
 801e70a:	ee18 1a10 	vmov	r1, s16
 801e70e:	9300      	str	r3, [sp, #0]
 801e710:	220a      	movs	r2, #10
 801e712:	2300      	movs	r3, #0
 801e714:	4620      	mov	r0, r4
 801e716:	f000 fded 	bl	801f2f4 <__multadd>
 801e71a:	9b08      	ldr	r3, [sp, #32]
 801e71c:	ee08 0a10 	vmov	s16, r0
 801e720:	2b00      	cmp	r3, #0
 801e722:	f000 81b1 	beq.w	801ea88 <_dtoa_r+0xbc0>
 801e726:	2300      	movs	r3, #0
 801e728:	4639      	mov	r1, r7
 801e72a:	220a      	movs	r2, #10
 801e72c:	4620      	mov	r0, r4
 801e72e:	f000 fde1 	bl	801f2f4 <__multadd>
 801e732:	9b02      	ldr	r3, [sp, #8]
 801e734:	2b00      	cmp	r3, #0
 801e736:	4607      	mov	r7, r0
 801e738:	f300 808e 	bgt.w	801e858 <_dtoa_r+0x990>
 801e73c:	9b06      	ldr	r3, [sp, #24]
 801e73e:	2b02      	cmp	r3, #2
 801e740:	dc51      	bgt.n	801e7e6 <_dtoa_r+0x91e>
 801e742:	e089      	b.n	801e858 <_dtoa_r+0x990>
 801e744:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e746:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801e74a:	e74b      	b.n	801e5e4 <_dtoa_r+0x71c>
 801e74c:	9b03      	ldr	r3, [sp, #12]
 801e74e:	1e5e      	subs	r6, r3, #1
 801e750:	9b07      	ldr	r3, [sp, #28]
 801e752:	42b3      	cmp	r3, r6
 801e754:	bfbf      	itttt	lt
 801e756:	9b07      	ldrlt	r3, [sp, #28]
 801e758:	9607      	strlt	r6, [sp, #28]
 801e75a:	1af2      	sublt	r2, r6, r3
 801e75c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801e75e:	bfb6      	itet	lt
 801e760:	189b      	addlt	r3, r3, r2
 801e762:	1b9e      	subge	r6, r3, r6
 801e764:	930a      	strlt	r3, [sp, #40]	; 0x28
 801e766:	9b03      	ldr	r3, [sp, #12]
 801e768:	bfb8      	it	lt
 801e76a:	2600      	movlt	r6, #0
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	bfb7      	itett	lt
 801e770:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801e774:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801e778:	1a9d      	sublt	r5, r3, r2
 801e77a:	2300      	movlt	r3, #0
 801e77c:	e734      	b.n	801e5e8 <_dtoa_r+0x720>
 801e77e:	9e07      	ldr	r6, [sp, #28]
 801e780:	9d04      	ldr	r5, [sp, #16]
 801e782:	9f08      	ldr	r7, [sp, #32]
 801e784:	e73b      	b.n	801e5fe <_dtoa_r+0x736>
 801e786:	9a07      	ldr	r2, [sp, #28]
 801e788:	e767      	b.n	801e65a <_dtoa_r+0x792>
 801e78a:	9b06      	ldr	r3, [sp, #24]
 801e78c:	2b01      	cmp	r3, #1
 801e78e:	dc18      	bgt.n	801e7c2 <_dtoa_r+0x8fa>
 801e790:	f1ba 0f00 	cmp.w	sl, #0
 801e794:	d115      	bne.n	801e7c2 <_dtoa_r+0x8fa>
 801e796:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e79a:	b993      	cbnz	r3, 801e7c2 <_dtoa_r+0x8fa>
 801e79c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e7a0:	0d1b      	lsrs	r3, r3, #20
 801e7a2:	051b      	lsls	r3, r3, #20
 801e7a4:	b183      	cbz	r3, 801e7c8 <_dtoa_r+0x900>
 801e7a6:	9b04      	ldr	r3, [sp, #16]
 801e7a8:	3301      	adds	r3, #1
 801e7aa:	9304      	str	r3, [sp, #16]
 801e7ac:	9b05      	ldr	r3, [sp, #20]
 801e7ae:	3301      	adds	r3, #1
 801e7b0:	9305      	str	r3, [sp, #20]
 801e7b2:	f04f 0801 	mov.w	r8, #1
 801e7b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7b8:	2b00      	cmp	r3, #0
 801e7ba:	f47f af6a 	bne.w	801e692 <_dtoa_r+0x7ca>
 801e7be:	2001      	movs	r0, #1
 801e7c0:	e76f      	b.n	801e6a2 <_dtoa_r+0x7da>
 801e7c2:	f04f 0800 	mov.w	r8, #0
 801e7c6:	e7f6      	b.n	801e7b6 <_dtoa_r+0x8ee>
 801e7c8:	4698      	mov	r8, r3
 801e7ca:	e7f4      	b.n	801e7b6 <_dtoa_r+0x8ee>
 801e7cc:	f43f af7d 	beq.w	801e6ca <_dtoa_r+0x802>
 801e7d0:	4618      	mov	r0, r3
 801e7d2:	301c      	adds	r0, #28
 801e7d4:	e772      	b.n	801e6bc <_dtoa_r+0x7f4>
 801e7d6:	9b03      	ldr	r3, [sp, #12]
 801e7d8:	2b00      	cmp	r3, #0
 801e7da:	dc37      	bgt.n	801e84c <_dtoa_r+0x984>
 801e7dc:	9b06      	ldr	r3, [sp, #24]
 801e7de:	2b02      	cmp	r3, #2
 801e7e0:	dd34      	ble.n	801e84c <_dtoa_r+0x984>
 801e7e2:	9b03      	ldr	r3, [sp, #12]
 801e7e4:	9302      	str	r3, [sp, #8]
 801e7e6:	9b02      	ldr	r3, [sp, #8]
 801e7e8:	b96b      	cbnz	r3, 801e806 <_dtoa_r+0x93e>
 801e7ea:	4631      	mov	r1, r6
 801e7ec:	2205      	movs	r2, #5
 801e7ee:	4620      	mov	r0, r4
 801e7f0:	f000 fd80 	bl	801f2f4 <__multadd>
 801e7f4:	4601      	mov	r1, r0
 801e7f6:	4606      	mov	r6, r0
 801e7f8:	ee18 0a10 	vmov	r0, s16
 801e7fc:	f000 ffe4 	bl	801f7c8 <__mcmp>
 801e800:	2800      	cmp	r0, #0
 801e802:	f73f adbb 	bgt.w	801e37c <_dtoa_r+0x4b4>
 801e806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e808:	9d01      	ldr	r5, [sp, #4]
 801e80a:	43db      	mvns	r3, r3
 801e80c:	9300      	str	r3, [sp, #0]
 801e80e:	f04f 0800 	mov.w	r8, #0
 801e812:	4631      	mov	r1, r6
 801e814:	4620      	mov	r0, r4
 801e816:	f000 fd4b 	bl	801f2b0 <_Bfree>
 801e81a:	2f00      	cmp	r7, #0
 801e81c:	f43f aea4 	beq.w	801e568 <_dtoa_r+0x6a0>
 801e820:	f1b8 0f00 	cmp.w	r8, #0
 801e824:	d005      	beq.n	801e832 <_dtoa_r+0x96a>
 801e826:	45b8      	cmp	r8, r7
 801e828:	d003      	beq.n	801e832 <_dtoa_r+0x96a>
 801e82a:	4641      	mov	r1, r8
 801e82c:	4620      	mov	r0, r4
 801e82e:	f000 fd3f 	bl	801f2b0 <_Bfree>
 801e832:	4639      	mov	r1, r7
 801e834:	4620      	mov	r0, r4
 801e836:	f000 fd3b 	bl	801f2b0 <_Bfree>
 801e83a:	e695      	b.n	801e568 <_dtoa_r+0x6a0>
 801e83c:	2600      	movs	r6, #0
 801e83e:	4637      	mov	r7, r6
 801e840:	e7e1      	b.n	801e806 <_dtoa_r+0x93e>
 801e842:	9700      	str	r7, [sp, #0]
 801e844:	4637      	mov	r7, r6
 801e846:	e599      	b.n	801e37c <_dtoa_r+0x4b4>
 801e848:	40240000 	.word	0x40240000
 801e84c:	9b08      	ldr	r3, [sp, #32]
 801e84e:	2b00      	cmp	r3, #0
 801e850:	f000 80ca 	beq.w	801e9e8 <_dtoa_r+0xb20>
 801e854:	9b03      	ldr	r3, [sp, #12]
 801e856:	9302      	str	r3, [sp, #8]
 801e858:	2d00      	cmp	r5, #0
 801e85a:	dd05      	ble.n	801e868 <_dtoa_r+0x9a0>
 801e85c:	4639      	mov	r1, r7
 801e85e:	462a      	mov	r2, r5
 801e860:	4620      	mov	r0, r4
 801e862:	f000 ff41 	bl	801f6e8 <__lshift>
 801e866:	4607      	mov	r7, r0
 801e868:	f1b8 0f00 	cmp.w	r8, #0
 801e86c:	d05b      	beq.n	801e926 <_dtoa_r+0xa5e>
 801e86e:	6879      	ldr	r1, [r7, #4]
 801e870:	4620      	mov	r0, r4
 801e872:	f000 fcdd 	bl	801f230 <_Balloc>
 801e876:	4605      	mov	r5, r0
 801e878:	b928      	cbnz	r0, 801e886 <_dtoa_r+0x9be>
 801e87a:	4b87      	ldr	r3, [pc, #540]	; (801ea98 <_dtoa_r+0xbd0>)
 801e87c:	4602      	mov	r2, r0
 801e87e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801e882:	f7ff bb3b 	b.w	801defc <_dtoa_r+0x34>
 801e886:	693a      	ldr	r2, [r7, #16]
 801e888:	3202      	adds	r2, #2
 801e88a:	0092      	lsls	r2, r2, #2
 801e88c:	f107 010c 	add.w	r1, r7, #12
 801e890:	300c      	adds	r0, #12
 801e892:	f7fd fcbf 	bl	801c214 <memcpy>
 801e896:	2201      	movs	r2, #1
 801e898:	4629      	mov	r1, r5
 801e89a:	4620      	mov	r0, r4
 801e89c:	f000 ff24 	bl	801f6e8 <__lshift>
 801e8a0:	9b01      	ldr	r3, [sp, #4]
 801e8a2:	f103 0901 	add.w	r9, r3, #1
 801e8a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e8aa:	4413      	add	r3, r2
 801e8ac:	9305      	str	r3, [sp, #20]
 801e8ae:	f00a 0301 	and.w	r3, sl, #1
 801e8b2:	46b8      	mov	r8, r7
 801e8b4:	9304      	str	r3, [sp, #16]
 801e8b6:	4607      	mov	r7, r0
 801e8b8:	4631      	mov	r1, r6
 801e8ba:	ee18 0a10 	vmov	r0, s16
 801e8be:	f7ff fa77 	bl	801ddb0 <quorem>
 801e8c2:	4641      	mov	r1, r8
 801e8c4:	9002      	str	r0, [sp, #8]
 801e8c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801e8ca:	ee18 0a10 	vmov	r0, s16
 801e8ce:	f000 ff7b 	bl	801f7c8 <__mcmp>
 801e8d2:	463a      	mov	r2, r7
 801e8d4:	9003      	str	r0, [sp, #12]
 801e8d6:	4631      	mov	r1, r6
 801e8d8:	4620      	mov	r0, r4
 801e8da:	f000 ff91 	bl	801f800 <__mdiff>
 801e8de:	68c2      	ldr	r2, [r0, #12]
 801e8e0:	f109 3bff 	add.w	fp, r9, #4294967295
 801e8e4:	4605      	mov	r5, r0
 801e8e6:	bb02      	cbnz	r2, 801e92a <_dtoa_r+0xa62>
 801e8e8:	4601      	mov	r1, r0
 801e8ea:	ee18 0a10 	vmov	r0, s16
 801e8ee:	f000 ff6b 	bl	801f7c8 <__mcmp>
 801e8f2:	4602      	mov	r2, r0
 801e8f4:	4629      	mov	r1, r5
 801e8f6:	4620      	mov	r0, r4
 801e8f8:	9207      	str	r2, [sp, #28]
 801e8fa:	f000 fcd9 	bl	801f2b0 <_Bfree>
 801e8fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801e902:	ea43 0102 	orr.w	r1, r3, r2
 801e906:	9b04      	ldr	r3, [sp, #16]
 801e908:	430b      	orrs	r3, r1
 801e90a:	464d      	mov	r5, r9
 801e90c:	d10f      	bne.n	801e92e <_dtoa_r+0xa66>
 801e90e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e912:	d02a      	beq.n	801e96a <_dtoa_r+0xaa2>
 801e914:	9b03      	ldr	r3, [sp, #12]
 801e916:	2b00      	cmp	r3, #0
 801e918:	dd02      	ble.n	801e920 <_dtoa_r+0xa58>
 801e91a:	9b02      	ldr	r3, [sp, #8]
 801e91c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801e920:	f88b a000 	strb.w	sl, [fp]
 801e924:	e775      	b.n	801e812 <_dtoa_r+0x94a>
 801e926:	4638      	mov	r0, r7
 801e928:	e7ba      	b.n	801e8a0 <_dtoa_r+0x9d8>
 801e92a:	2201      	movs	r2, #1
 801e92c:	e7e2      	b.n	801e8f4 <_dtoa_r+0xa2c>
 801e92e:	9b03      	ldr	r3, [sp, #12]
 801e930:	2b00      	cmp	r3, #0
 801e932:	db04      	blt.n	801e93e <_dtoa_r+0xa76>
 801e934:	9906      	ldr	r1, [sp, #24]
 801e936:	430b      	orrs	r3, r1
 801e938:	9904      	ldr	r1, [sp, #16]
 801e93a:	430b      	orrs	r3, r1
 801e93c:	d122      	bne.n	801e984 <_dtoa_r+0xabc>
 801e93e:	2a00      	cmp	r2, #0
 801e940:	ddee      	ble.n	801e920 <_dtoa_r+0xa58>
 801e942:	ee18 1a10 	vmov	r1, s16
 801e946:	2201      	movs	r2, #1
 801e948:	4620      	mov	r0, r4
 801e94a:	f000 fecd 	bl	801f6e8 <__lshift>
 801e94e:	4631      	mov	r1, r6
 801e950:	ee08 0a10 	vmov	s16, r0
 801e954:	f000 ff38 	bl	801f7c8 <__mcmp>
 801e958:	2800      	cmp	r0, #0
 801e95a:	dc03      	bgt.n	801e964 <_dtoa_r+0xa9c>
 801e95c:	d1e0      	bne.n	801e920 <_dtoa_r+0xa58>
 801e95e:	f01a 0f01 	tst.w	sl, #1
 801e962:	d0dd      	beq.n	801e920 <_dtoa_r+0xa58>
 801e964:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e968:	d1d7      	bne.n	801e91a <_dtoa_r+0xa52>
 801e96a:	2339      	movs	r3, #57	; 0x39
 801e96c:	f88b 3000 	strb.w	r3, [fp]
 801e970:	462b      	mov	r3, r5
 801e972:	461d      	mov	r5, r3
 801e974:	3b01      	subs	r3, #1
 801e976:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801e97a:	2a39      	cmp	r2, #57	; 0x39
 801e97c:	d071      	beq.n	801ea62 <_dtoa_r+0xb9a>
 801e97e:	3201      	adds	r2, #1
 801e980:	701a      	strb	r2, [r3, #0]
 801e982:	e746      	b.n	801e812 <_dtoa_r+0x94a>
 801e984:	2a00      	cmp	r2, #0
 801e986:	dd07      	ble.n	801e998 <_dtoa_r+0xad0>
 801e988:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e98c:	d0ed      	beq.n	801e96a <_dtoa_r+0xaa2>
 801e98e:	f10a 0301 	add.w	r3, sl, #1
 801e992:	f88b 3000 	strb.w	r3, [fp]
 801e996:	e73c      	b.n	801e812 <_dtoa_r+0x94a>
 801e998:	9b05      	ldr	r3, [sp, #20]
 801e99a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801e99e:	4599      	cmp	r9, r3
 801e9a0:	d047      	beq.n	801ea32 <_dtoa_r+0xb6a>
 801e9a2:	ee18 1a10 	vmov	r1, s16
 801e9a6:	2300      	movs	r3, #0
 801e9a8:	220a      	movs	r2, #10
 801e9aa:	4620      	mov	r0, r4
 801e9ac:	f000 fca2 	bl	801f2f4 <__multadd>
 801e9b0:	45b8      	cmp	r8, r7
 801e9b2:	ee08 0a10 	vmov	s16, r0
 801e9b6:	f04f 0300 	mov.w	r3, #0
 801e9ba:	f04f 020a 	mov.w	r2, #10
 801e9be:	4641      	mov	r1, r8
 801e9c0:	4620      	mov	r0, r4
 801e9c2:	d106      	bne.n	801e9d2 <_dtoa_r+0xb0a>
 801e9c4:	f000 fc96 	bl	801f2f4 <__multadd>
 801e9c8:	4680      	mov	r8, r0
 801e9ca:	4607      	mov	r7, r0
 801e9cc:	f109 0901 	add.w	r9, r9, #1
 801e9d0:	e772      	b.n	801e8b8 <_dtoa_r+0x9f0>
 801e9d2:	f000 fc8f 	bl	801f2f4 <__multadd>
 801e9d6:	4639      	mov	r1, r7
 801e9d8:	4680      	mov	r8, r0
 801e9da:	2300      	movs	r3, #0
 801e9dc:	220a      	movs	r2, #10
 801e9de:	4620      	mov	r0, r4
 801e9e0:	f000 fc88 	bl	801f2f4 <__multadd>
 801e9e4:	4607      	mov	r7, r0
 801e9e6:	e7f1      	b.n	801e9cc <_dtoa_r+0xb04>
 801e9e8:	9b03      	ldr	r3, [sp, #12]
 801e9ea:	9302      	str	r3, [sp, #8]
 801e9ec:	9d01      	ldr	r5, [sp, #4]
 801e9ee:	ee18 0a10 	vmov	r0, s16
 801e9f2:	4631      	mov	r1, r6
 801e9f4:	f7ff f9dc 	bl	801ddb0 <quorem>
 801e9f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801e9fc:	9b01      	ldr	r3, [sp, #4]
 801e9fe:	f805 ab01 	strb.w	sl, [r5], #1
 801ea02:	1aea      	subs	r2, r5, r3
 801ea04:	9b02      	ldr	r3, [sp, #8]
 801ea06:	4293      	cmp	r3, r2
 801ea08:	dd09      	ble.n	801ea1e <_dtoa_r+0xb56>
 801ea0a:	ee18 1a10 	vmov	r1, s16
 801ea0e:	2300      	movs	r3, #0
 801ea10:	220a      	movs	r2, #10
 801ea12:	4620      	mov	r0, r4
 801ea14:	f000 fc6e 	bl	801f2f4 <__multadd>
 801ea18:	ee08 0a10 	vmov	s16, r0
 801ea1c:	e7e7      	b.n	801e9ee <_dtoa_r+0xb26>
 801ea1e:	9b02      	ldr	r3, [sp, #8]
 801ea20:	2b00      	cmp	r3, #0
 801ea22:	bfc8      	it	gt
 801ea24:	461d      	movgt	r5, r3
 801ea26:	9b01      	ldr	r3, [sp, #4]
 801ea28:	bfd8      	it	le
 801ea2a:	2501      	movle	r5, #1
 801ea2c:	441d      	add	r5, r3
 801ea2e:	f04f 0800 	mov.w	r8, #0
 801ea32:	ee18 1a10 	vmov	r1, s16
 801ea36:	2201      	movs	r2, #1
 801ea38:	4620      	mov	r0, r4
 801ea3a:	f000 fe55 	bl	801f6e8 <__lshift>
 801ea3e:	4631      	mov	r1, r6
 801ea40:	ee08 0a10 	vmov	s16, r0
 801ea44:	f000 fec0 	bl	801f7c8 <__mcmp>
 801ea48:	2800      	cmp	r0, #0
 801ea4a:	dc91      	bgt.n	801e970 <_dtoa_r+0xaa8>
 801ea4c:	d102      	bne.n	801ea54 <_dtoa_r+0xb8c>
 801ea4e:	f01a 0f01 	tst.w	sl, #1
 801ea52:	d18d      	bne.n	801e970 <_dtoa_r+0xaa8>
 801ea54:	462b      	mov	r3, r5
 801ea56:	461d      	mov	r5, r3
 801ea58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ea5c:	2a30      	cmp	r2, #48	; 0x30
 801ea5e:	d0fa      	beq.n	801ea56 <_dtoa_r+0xb8e>
 801ea60:	e6d7      	b.n	801e812 <_dtoa_r+0x94a>
 801ea62:	9a01      	ldr	r2, [sp, #4]
 801ea64:	429a      	cmp	r2, r3
 801ea66:	d184      	bne.n	801e972 <_dtoa_r+0xaaa>
 801ea68:	9b00      	ldr	r3, [sp, #0]
 801ea6a:	3301      	adds	r3, #1
 801ea6c:	9300      	str	r3, [sp, #0]
 801ea6e:	2331      	movs	r3, #49	; 0x31
 801ea70:	7013      	strb	r3, [r2, #0]
 801ea72:	e6ce      	b.n	801e812 <_dtoa_r+0x94a>
 801ea74:	4b09      	ldr	r3, [pc, #36]	; (801ea9c <_dtoa_r+0xbd4>)
 801ea76:	f7ff ba95 	b.w	801dfa4 <_dtoa_r+0xdc>
 801ea7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ea7c:	2b00      	cmp	r3, #0
 801ea7e:	f47f aa6e 	bne.w	801df5e <_dtoa_r+0x96>
 801ea82:	4b07      	ldr	r3, [pc, #28]	; (801eaa0 <_dtoa_r+0xbd8>)
 801ea84:	f7ff ba8e 	b.w	801dfa4 <_dtoa_r+0xdc>
 801ea88:	9b02      	ldr	r3, [sp, #8]
 801ea8a:	2b00      	cmp	r3, #0
 801ea8c:	dcae      	bgt.n	801e9ec <_dtoa_r+0xb24>
 801ea8e:	9b06      	ldr	r3, [sp, #24]
 801ea90:	2b02      	cmp	r3, #2
 801ea92:	f73f aea8 	bgt.w	801e7e6 <_dtoa_r+0x91e>
 801ea96:	e7a9      	b.n	801e9ec <_dtoa_r+0xb24>
 801ea98:	0803965f 	.word	0x0803965f
 801ea9c:	08023e03 	.word	0x08023e03
 801eaa0:	080395e0 	.word	0x080395e0

0801eaa4 <_fstat_r>:
 801eaa4:	b538      	push	{r3, r4, r5, lr}
 801eaa6:	4d07      	ldr	r5, [pc, #28]	; (801eac4 <_fstat_r+0x20>)
 801eaa8:	2300      	movs	r3, #0
 801eaaa:	4604      	mov	r4, r0
 801eaac:	4608      	mov	r0, r1
 801eaae:	4611      	mov	r1, r2
 801eab0:	602b      	str	r3, [r5, #0]
 801eab2:	f7f6 fdde 	bl	8015672 <_fstat>
 801eab6:	1c43      	adds	r3, r0, #1
 801eab8:	d102      	bne.n	801eac0 <_fstat_r+0x1c>
 801eaba:	682b      	ldr	r3, [r5, #0]
 801eabc:	b103      	cbz	r3, 801eac0 <_fstat_r+0x1c>
 801eabe:	6023      	str	r3, [r4, #0]
 801eac0:	bd38      	pop	{r3, r4, r5, pc}
 801eac2:	bf00      	nop
 801eac4:	20014248 	.word	0x20014248

0801eac8 <rshift>:
 801eac8:	6903      	ldr	r3, [r0, #16]
 801eaca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801eace:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ead2:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ead6:	f100 0414 	add.w	r4, r0, #20
 801eada:	dd45      	ble.n	801eb68 <rshift+0xa0>
 801eadc:	f011 011f 	ands.w	r1, r1, #31
 801eae0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801eae4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801eae8:	d10c      	bne.n	801eb04 <rshift+0x3c>
 801eaea:	f100 0710 	add.w	r7, r0, #16
 801eaee:	4629      	mov	r1, r5
 801eaf0:	42b1      	cmp	r1, r6
 801eaf2:	d334      	bcc.n	801eb5e <rshift+0x96>
 801eaf4:	1a9b      	subs	r3, r3, r2
 801eaf6:	009b      	lsls	r3, r3, #2
 801eaf8:	1eea      	subs	r2, r5, #3
 801eafa:	4296      	cmp	r6, r2
 801eafc:	bf38      	it	cc
 801eafe:	2300      	movcc	r3, #0
 801eb00:	4423      	add	r3, r4
 801eb02:	e015      	b.n	801eb30 <rshift+0x68>
 801eb04:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801eb08:	f1c1 0820 	rsb	r8, r1, #32
 801eb0c:	40cf      	lsrs	r7, r1
 801eb0e:	f105 0e04 	add.w	lr, r5, #4
 801eb12:	46a1      	mov	r9, r4
 801eb14:	4576      	cmp	r6, lr
 801eb16:	46f4      	mov	ip, lr
 801eb18:	d815      	bhi.n	801eb46 <rshift+0x7e>
 801eb1a:	1a9a      	subs	r2, r3, r2
 801eb1c:	0092      	lsls	r2, r2, #2
 801eb1e:	3a04      	subs	r2, #4
 801eb20:	3501      	adds	r5, #1
 801eb22:	42ae      	cmp	r6, r5
 801eb24:	bf38      	it	cc
 801eb26:	2200      	movcc	r2, #0
 801eb28:	18a3      	adds	r3, r4, r2
 801eb2a:	50a7      	str	r7, [r4, r2]
 801eb2c:	b107      	cbz	r7, 801eb30 <rshift+0x68>
 801eb2e:	3304      	adds	r3, #4
 801eb30:	1b1a      	subs	r2, r3, r4
 801eb32:	42a3      	cmp	r3, r4
 801eb34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801eb38:	bf08      	it	eq
 801eb3a:	2300      	moveq	r3, #0
 801eb3c:	6102      	str	r2, [r0, #16]
 801eb3e:	bf08      	it	eq
 801eb40:	6143      	streq	r3, [r0, #20]
 801eb42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb46:	f8dc c000 	ldr.w	ip, [ip]
 801eb4a:	fa0c fc08 	lsl.w	ip, ip, r8
 801eb4e:	ea4c 0707 	orr.w	r7, ip, r7
 801eb52:	f849 7b04 	str.w	r7, [r9], #4
 801eb56:	f85e 7b04 	ldr.w	r7, [lr], #4
 801eb5a:	40cf      	lsrs	r7, r1
 801eb5c:	e7da      	b.n	801eb14 <rshift+0x4c>
 801eb5e:	f851 cb04 	ldr.w	ip, [r1], #4
 801eb62:	f847 cf04 	str.w	ip, [r7, #4]!
 801eb66:	e7c3      	b.n	801eaf0 <rshift+0x28>
 801eb68:	4623      	mov	r3, r4
 801eb6a:	e7e1      	b.n	801eb30 <rshift+0x68>

0801eb6c <__hexdig_fun>:
 801eb6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801eb70:	2b09      	cmp	r3, #9
 801eb72:	d802      	bhi.n	801eb7a <__hexdig_fun+0xe>
 801eb74:	3820      	subs	r0, #32
 801eb76:	b2c0      	uxtb	r0, r0
 801eb78:	4770      	bx	lr
 801eb7a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801eb7e:	2b05      	cmp	r3, #5
 801eb80:	d801      	bhi.n	801eb86 <__hexdig_fun+0x1a>
 801eb82:	3847      	subs	r0, #71	; 0x47
 801eb84:	e7f7      	b.n	801eb76 <__hexdig_fun+0xa>
 801eb86:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801eb8a:	2b05      	cmp	r3, #5
 801eb8c:	d801      	bhi.n	801eb92 <__hexdig_fun+0x26>
 801eb8e:	3827      	subs	r0, #39	; 0x27
 801eb90:	e7f1      	b.n	801eb76 <__hexdig_fun+0xa>
 801eb92:	2000      	movs	r0, #0
 801eb94:	4770      	bx	lr
	...

0801eb98 <__gethex>:
 801eb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb9c:	ed2d 8b02 	vpush	{d8}
 801eba0:	b089      	sub	sp, #36	; 0x24
 801eba2:	ee08 0a10 	vmov	s16, r0
 801eba6:	9304      	str	r3, [sp, #16]
 801eba8:	4bb4      	ldr	r3, [pc, #720]	; (801ee7c <__gethex+0x2e4>)
 801ebaa:	681b      	ldr	r3, [r3, #0]
 801ebac:	9301      	str	r3, [sp, #4]
 801ebae:	4618      	mov	r0, r3
 801ebb0:	468b      	mov	fp, r1
 801ebb2:	4690      	mov	r8, r2
 801ebb4:	f7e5 fb8e 	bl	80042d4 <strlen>
 801ebb8:	9b01      	ldr	r3, [sp, #4]
 801ebba:	f8db 2000 	ldr.w	r2, [fp]
 801ebbe:	4403      	add	r3, r0
 801ebc0:	4682      	mov	sl, r0
 801ebc2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801ebc6:	9305      	str	r3, [sp, #20]
 801ebc8:	1c93      	adds	r3, r2, #2
 801ebca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801ebce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801ebd2:	32fe      	adds	r2, #254	; 0xfe
 801ebd4:	18d1      	adds	r1, r2, r3
 801ebd6:	461f      	mov	r7, r3
 801ebd8:	f813 0b01 	ldrb.w	r0, [r3], #1
 801ebdc:	9100      	str	r1, [sp, #0]
 801ebde:	2830      	cmp	r0, #48	; 0x30
 801ebe0:	d0f8      	beq.n	801ebd4 <__gethex+0x3c>
 801ebe2:	f7ff ffc3 	bl	801eb6c <__hexdig_fun>
 801ebe6:	4604      	mov	r4, r0
 801ebe8:	2800      	cmp	r0, #0
 801ebea:	d13a      	bne.n	801ec62 <__gethex+0xca>
 801ebec:	9901      	ldr	r1, [sp, #4]
 801ebee:	4652      	mov	r2, sl
 801ebf0:	4638      	mov	r0, r7
 801ebf2:	f7fe f919 	bl	801ce28 <strncmp>
 801ebf6:	4605      	mov	r5, r0
 801ebf8:	2800      	cmp	r0, #0
 801ebfa:	d168      	bne.n	801ecce <__gethex+0x136>
 801ebfc:	f817 000a 	ldrb.w	r0, [r7, sl]
 801ec00:	eb07 060a 	add.w	r6, r7, sl
 801ec04:	f7ff ffb2 	bl	801eb6c <__hexdig_fun>
 801ec08:	2800      	cmp	r0, #0
 801ec0a:	d062      	beq.n	801ecd2 <__gethex+0x13a>
 801ec0c:	4633      	mov	r3, r6
 801ec0e:	7818      	ldrb	r0, [r3, #0]
 801ec10:	2830      	cmp	r0, #48	; 0x30
 801ec12:	461f      	mov	r7, r3
 801ec14:	f103 0301 	add.w	r3, r3, #1
 801ec18:	d0f9      	beq.n	801ec0e <__gethex+0x76>
 801ec1a:	f7ff ffa7 	bl	801eb6c <__hexdig_fun>
 801ec1e:	2301      	movs	r3, #1
 801ec20:	fab0 f480 	clz	r4, r0
 801ec24:	0964      	lsrs	r4, r4, #5
 801ec26:	4635      	mov	r5, r6
 801ec28:	9300      	str	r3, [sp, #0]
 801ec2a:	463a      	mov	r2, r7
 801ec2c:	4616      	mov	r6, r2
 801ec2e:	3201      	adds	r2, #1
 801ec30:	7830      	ldrb	r0, [r6, #0]
 801ec32:	f7ff ff9b 	bl	801eb6c <__hexdig_fun>
 801ec36:	2800      	cmp	r0, #0
 801ec38:	d1f8      	bne.n	801ec2c <__gethex+0x94>
 801ec3a:	9901      	ldr	r1, [sp, #4]
 801ec3c:	4652      	mov	r2, sl
 801ec3e:	4630      	mov	r0, r6
 801ec40:	f7fe f8f2 	bl	801ce28 <strncmp>
 801ec44:	b980      	cbnz	r0, 801ec68 <__gethex+0xd0>
 801ec46:	b94d      	cbnz	r5, 801ec5c <__gethex+0xc4>
 801ec48:	eb06 050a 	add.w	r5, r6, sl
 801ec4c:	462a      	mov	r2, r5
 801ec4e:	4616      	mov	r6, r2
 801ec50:	3201      	adds	r2, #1
 801ec52:	7830      	ldrb	r0, [r6, #0]
 801ec54:	f7ff ff8a 	bl	801eb6c <__hexdig_fun>
 801ec58:	2800      	cmp	r0, #0
 801ec5a:	d1f8      	bne.n	801ec4e <__gethex+0xb6>
 801ec5c:	1bad      	subs	r5, r5, r6
 801ec5e:	00ad      	lsls	r5, r5, #2
 801ec60:	e004      	b.n	801ec6c <__gethex+0xd4>
 801ec62:	2400      	movs	r4, #0
 801ec64:	4625      	mov	r5, r4
 801ec66:	e7e0      	b.n	801ec2a <__gethex+0x92>
 801ec68:	2d00      	cmp	r5, #0
 801ec6a:	d1f7      	bne.n	801ec5c <__gethex+0xc4>
 801ec6c:	7833      	ldrb	r3, [r6, #0]
 801ec6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ec72:	2b50      	cmp	r3, #80	; 0x50
 801ec74:	d13b      	bne.n	801ecee <__gethex+0x156>
 801ec76:	7873      	ldrb	r3, [r6, #1]
 801ec78:	2b2b      	cmp	r3, #43	; 0x2b
 801ec7a:	d02c      	beq.n	801ecd6 <__gethex+0x13e>
 801ec7c:	2b2d      	cmp	r3, #45	; 0x2d
 801ec7e:	d02e      	beq.n	801ecde <__gethex+0x146>
 801ec80:	1c71      	adds	r1, r6, #1
 801ec82:	f04f 0900 	mov.w	r9, #0
 801ec86:	7808      	ldrb	r0, [r1, #0]
 801ec88:	f7ff ff70 	bl	801eb6c <__hexdig_fun>
 801ec8c:	1e43      	subs	r3, r0, #1
 801ec8e:	b2db      	uxtb	r3, r3
 801ec90:	2b18      	cmp	r3, #24
 801ec92:	d82c      	bhi.n	801ecee <__gethex+0x156>
 801ec94:	f1a0 0210 	sub.w	r2, r0, #16
 801ec98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801ec9c:	f7ff ff66 	bl	801eb6c <__hexdig_fun>
 801eca0:	1e43      	subs	r3, r0, #1
 801eca2:	b2db      	uxtb	r3, r3
 801eca4:	2b18      	cmp	r3, #24
 801eca6:	d91d      	bls.n	801ece4 <__gethex+0x14c>
 801eca8:	f1b9 0f00 	cmp.w	r9, #0
 801ecac:	d000      	beq.n	801ecb0 <__gethex+0x118>
 801ecae:	4252      	negs	r2, r2
 801ecb0:	4415      	add	r5, r2
 801ecb2:	f8cb 1000 	str.w	r1, [fp]
 801ecb6:	b1e4      	cbz	r4, 801ecf2 <__gethex+0x15a>
 801ecb8:	9b00      	ldr	r3, [sp, #0]
 801ecba:	2b00      	cmp	r3, #0
 801ecbc:	bf14      	ite	ne
 801ecbe:	2700      	movne	r7, #0
 801ecc0:	2706      	moveq	r7, #6
 801ecc2:	4638      	mov	r0, r7
 801ecc4:	b009      	add	sp, #36	; 0x24
 801ecc6:	ecbd 8b02 	vpop	{d8}
 801ecca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecce:	463e      	mov	r6, r7
 801ecd0:	4625      	mov	r5, r4
 801ecd2:	2401      	movs	r4, #1
 801ecd4:	e7ca      	b.n	801ec6c <__gethex+0xd4>
 801ecd6:	f04f 0900 	mov.w	r9, #0
 801ecda:	1cb1      	adds	r1, r6, #2
 801ecdc:	e7d3      	b.n	801ec86 <__gethex+0xee>
 801ecde:	f04f 0901 	mov.w	r9, #1
 801ece2:	e7fa      	b.n	801ecda <__gethex+0x142>
 801ece4:	230a      	movs	r3, #10
 801ece6:	fb03 0202 	mla	r2, r3, r2, r0
 801ecea:	3a10      	subs	r2, #16
 801ecec:	e7d4      	b.n	801ec98 <__gethex+0x100>
 801ecee:	4631      	mov	r1, r6
 801ecf0:	e7df      	b.n	801ecb2 <__gethex+0x11a>
 801ecf2:	1bf3      	subs	r3, r6, r7
 801ecf4:	3b01      	subs	r3, #1
 801ecf6:	4621      	mov	r1, r4
 801ecf8:	2b07      	cmp	r3, #7
 801ecfa:	dc0b      	bgt.n	801ed14 <__gethex+0x17c>
 801ecfc:	ee18 0a10 	vmov	r0, s16
 801ed00:	f000 fa96 	bl	801f230 <_Balloc>
 801ed04:	4604      	mov	r4, r0
 801ed06:	b940      	cbnz	r0, 801ed1a <__gethex+0x182>
 801ed08:	4b5d      	ldr	r3, [pc, #372]	; (801ee80 <__gethex+0x2e8>)
 801ed0a:	4602      	mov	r2, r0
 801ed0c:	21de      	movs	r1, #222	; 0xde
 801ed0e:	485d      	ldr	r0, [pc, #372]	; (801ee84 <__gethex+0x2ec>)
 801ed10:	f001 f91e 	bl	801ff50 <__assert_func>
 801ed14:	3101      	adds	r1, #1
 801ed16:	105b      	asrs	r3, r3, #1
 801ed18:	e7ee      	b.n	801ecf8 <__gethex+0x160>
 801ed1a:	f100 0914 	add.w	r9, r0, #20
 801ed1e:	f04f 0b00 	mov.w	fp, #0
 801ed22:	f1ca 0301 	rsb	r3, sl, #1
 801ed26:	f8cd 9008 	str.w	r9, [sp, #8]
 801ed2a:	f8cd b000 	str.w	fp, [sp]
 801ed2e:	9306      	str	r3, [sp, #24]
 801ed30:	42b7      	cmp	r7, r6
 801ed32:	d340      	bcc.n	801edb6 <__gethex+0x21e>
 801ed34:	9802      	ldr	r0, [sp, #8]
 801ed36:	9b00      	ldr	r3, [sp, #0]
 801ed38:	f840 3b04 	str.w	r3, [r0], #4
 801ed3c:	eba0 0009 	sub.w	r0, r0, r9
 801ed40:	1080      	asrs	r0, r0, #2
 801ed42:	0146      	lsls	r6, r0, #5
 801ed44:	6120      	str	r0, [r4, #16]
 801ed46:	4618      	mov	r0, r3
 801ed48:	f000 fb64 	bl	801f414 <__hi0bits>
 801ed4c:	1a30      	subs	r0, r6, r0
 801ed4e:	f8d8 6000 	ldr.w	r6, [r8]
 801ed52:	42b0      	cmp	r0, r6
 801ed54:	dd63      	ble.n	801ee1e <__gethex+0x286>
 801ed56:	1b87      	subs	r7, r0, r6
 801ed58:	4639      	mov	r1, r7
 801ed5a:	4620      	mov	r0, r4
 801ed5c:	f000 ff08 	bl	801fb70 <__any_on>
 801ed60:	4682      	mov	sl, r0
 801ed62:	b1a8      	cbz	r0, 801ed90 <__gethex+0x1f8>
 801ed64:	1e7b      	subs	r3, r7, #1
 801ed66:	1159      	asrs	r1, r3, #5
 801ed68:	f003 021f 	and.w	r2, r3, #31
 801ed6c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801ed70:	f04f 0a01 	mov.w	sl, #1
 801ed74:	fa0a f202 	lsl.w	r2, sl, r2
 801ed78:	420a      	tst	r2, r1
 801ed7a:	d009      	beq.n	801ed90 <__gethex+0x1f8>
 801ed7c:	4553      	cmp	r3, sl
 801ed7e:	dd05      	ble.n	801ed8c <__gethex+0x1f4>
 801ed80:	1eb9      	subs	r1, r7, #2
 801ed82:	4620      	mov	r0, r4
 801ed84:	f000 fef4 	bl	801fb70 <__any_on>
 801ed88:	2800      	cmp	r0, #0
 801ed8a:	d145      	bne.n	801ee18 <__gethex+0x280>
 801ed8c:	f04f 0a02 	mov.w	sl, #2
 801ed90:	4639      	mov	r1, r7
 801ed92:	4620      	mov	r0, r4
 801ed94:	f7ff fe98 	bl	801eac8 <rshift>
 801ed98:	443d      	add	r5, r7
 801ed9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ed9e:	42ab      	cmp	r3, r5
 801eda0:	da4c      	bge.n	801ee3c <__gethex+0x2a4>
 801eda2:	ee18 0a10 	vmov	r0, s16
 801eda6:	4621      	mov	r1, r4
 801eda8:	f000 fa82 	bl	801f2b0 <_Bfree>
 801edac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801edae:	2300      	movs	r3, #0
 801edb0:	6013      	str	r3, [r2, #0]
 801edb2:	27a3      	movs	r7, #163	; 0xa3
 801edb4:	e785      	b.n	801ecc2 <__gethex+0x12a>
 801edb6:	1e73      	subs	r3, r6, #1
 801edb8:	9a05      	ldr	r2, [sp, #20]
 801edba:	9303      	str	r3, [sp, #12]
 801edbc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801edc0:	4293      	cmp	r3, r2
 801edc2:	d019      	beq.n	801edf8 <__gethex+0x260>
 801edc4:	f1bb 0f20 	cmp.w	fp, #32
 801edc8:	d107      	bne.n	801edda <__gethex+0x242>
 801edca:	9b02      	ldr	r3, [sp, #8]
 801edcc:	9a00      	ldr	r2, [sp, #0]
 801edce:	f843 2b04 	str.w	r2, [r3], #4
 801edd2:	9302      	str	r3, [sp, #8]
 801edd4:	2300      	movs	r3, #0
 801edd6:	9300      	str	r3, [sp, #0]
 801edd8:	469b      	mov	fp, r3
 801edda:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801edde:	f7ff fec5 	bl	801eb6c <__hexdig_fun>
 801ede2:	9b00      	ldr	r3, [sp, #0]
 801ede4:	f000 000f 	and.w	r0, r0, #15
 801ede8:	fa00 f00b 	lsl.w	r0, r0, fp
 801edec:	4303      	orrs	r3, r0
 801edee:	9300      	str	r3, [sp, #0]
 801edf0:	f10b 0b04 	add.w	fp, fp, #4
 801edf4:	9b03      	ldr	r3, [sp, #12]
 801edf6:	e00d      	b.n	801ee14 <__gethex+0x27c>
 801edf8:	9b03      	ldr	r3, [sp, #12]
 801edfa:	9a06      	ldr	r2, [sp, #24]
 801edfc:	4413      	add	r3, r2
 801edfe:	42bb      	cmp	r3, r7
 801ee00:	d3e0      	bcc.n	801edc4 <__gethex+0x22c>
 801ee02:	4618      	mov	r0, r3
 801ee04:	9901      	ldr	r1, [sp, #4]
 801ee06:	9307      	str	r3, [sp, #28]
 801ee08:	4652      	mov	r2, sl
 801ee0a:	f7fe f80d 	bl	801ce28 <strncmp>
 801ee0e:	9b07      	ldr	r3, [sp, #28]
 801ee10:	2800      	cmp	r0, #0
 801ee12:	d1d7      	bne.n	801edc4 <__gethex+0x22c>
 801ee14:	461e      	mov	r6, r3
 801ee16:	e78b      	b.n	801ed30 <__gethex+0x198>
 801ee18:	f04f 0a03 	mov.w	sl, #3
 801ee1c:	e7b8      	b.n	801ed90 <__gethex+0x1f8>
 801ee1e:	da0a      	bge.n	801ee36 <__gethex+0x29e>
 801ee20:	1a37      	subs	r7, r6, r0
 801ee22:	4621      	mov	r1, r4
 801ee24:	ee18 0a10 	vmov	r0, s16
 801ee28:	463a      	mov	r2, r7
 801ee2a:	f000 fc5d 	bl	801f6e8 <__lshift>
 801ee2e:	1bed      	subs	r5, r5, r7
 801ee30:	4604      	mov	r4, r0
 801ee32:	f100 0914 	add.w	r9, r0, #20
 801ee36:	f04f 0a00 	mov.w	sl, #0
 801ee3a:	e7ae      	b.n	801ed9a <__gethex+0x202>
 801ee3c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801ee40:	42a8      	cmp	r0, r5
 801ee42:	dd72      	ble.n	801ef2a <__gethex+0x392>
 801ee44:	1b45      	subs	r5, r0, r5
 801ee46:	42ae      	cmp	r6, r5
 801ee48:	dc36      	bgt.n	801eeb8 <__gethex+0x320>
 801ee4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ee4e:	2b02      	cmp	r3, #2
 801ee50:	d02a      	beq.n	801eea8 <__gethex+0x310>
 801ee52:	2b03      	cmp	r3, #3
 801ee54:	d02c      	beq.n	801eeb0 <__gethex+0x318>
 801ee56:	2b01      	cmp	r3, #1
 801ee58:	d11c      	bne.n	801ee94 <__gethex+0x2fc>
 801ee5a:	42ae      	cmp	r6, r5
 801ee5c:	d11a      	bne.n	801ee94 <__gethex+0x2fc>
 801ee5e:	2e01      	cmp	r6, #1
 801ee60:	d112      	bne.n	801ee88 <__gethex+0x2f0>
 801ee62:	9a04      	ldr	r2, [sp, #16]
 801ee64:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ee68:	6013      	str	r3, [r2, #0]
 801ee6a:	2301      	movs	r3, #1
 801ee6c:	6123      	str	r3, [r4, #16]
 801ee6e:	f8c9 3000 	str.w	r3, [r9]
 801ee72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ee74:	2762      	movs	r7, #98	; 0x62
 801ee76:	601c      	str	r4, [r3, #0]
 801ee78:	e723      	b.n	801ecc2 <__gethex+0x12a>
 801ee7a:	bf00      	nop
 801ee7c:	080396d8 	.word	0x080396d8
 801ee80:	0803965f 	.word	0x0803965f
 801ee84:	08039670 	.word	0x08039670
 801ee88:	1e71      	subs	r1, r6, #1
 801ee8a:	4620      	mov	r0, r4
 801ee8c:	f000 fe70 	bl	801fb70 <__any_on>
 801ee90:	2800      	cmp	r0, #0
 801ee92:	d1e6      	bne.n	801ee62 <__gethex+0x2ca>
 801ee94:	ee18 0a10 	vmov	r0, s16
 801ee98:	4621      	mov	r1, r4
 801ee9a:	f000 fa09 	bl	801f2b0 <_Bfree>
 801ee9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eea0:	2300      	movs	r3, #0
 801eea2:	6013      	str	r3, [r2, #0]
 801eea4:	2750      	movs	r7, #80	; 0x50
 801eea6:	e70c      	b.n	801ecc2 <__gethex+0x12a>
 801eea8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eeaa:	2b00      	cmp	r3, #0
 801eeac:	d1f2      	bne.n	801ee94 <__gethex+0x2fc>
 801eeae:	e7d8      	b.n	801ee62 <__gethex+0x2ca>
 801eeb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eeb2:	2b00      	cmp	r3, #0
 801eeb4:	d1d5      	bne.n	801ee62 <__gethex+0x2ca>
 801eeb6:	e7ed      	b.n	801ee94 <__gethex+0x2fc>
 801eeb8:	1e6f      	subs	r7, r5, #1
 801eeba:	f1ba 0f00 	cmp.w	sl, #0
 801eebe:	d131      	bne.n	801ef24 <__gethex+0x38c>
 801eec0:	b127      	cbz	r7, 801eecc <__gethex+0x334>
 801eec2:	4639      	mov	r1, r7
 801eec4:	4620      	mov	r0, r4
 801eec6:	f000 fe53 	bl	801fb70 <__any_on>
 801eeca:	4682      	mov	sl, r0
 801eecc:	117b      	asrs	r3, r7, #5
 801eece:	2101      	movs	r1, #1
 801eed0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801eed4:	f007 071f 	and.w	r7, r7, #31
 801eed8:	fa01 f707 	lsl.w	r7, r1, r7
 801eedc:	421f      	tst	r7, r3
 801eede:	4629      	mov	r1, r5
 801eee0:	4620      	mov	r0, r4
 801eee2:	bf18      	it	ne
 801eee4:	f04a 0a02 	orrne.w	sl, sl, #2
 801eee8:	1b76      	subs	r6, r6, r5
 801eeea:	f7ff fded 	bl	801eac8 <rshift>
 801eeee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801eef2:	2702      	movs	r7, #2
 801eef4:	f1ba 0f00 	cmp.w	sl, #0
 801eef8:	d048      	beq.n	801ef8c <__gethex+0x3f4>
 801eefa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801eefe:	2b02      	cmp	r3, #2
 801ef00:	d015      	beq.n	801ef2e <__gethex+0x396>
 801ef02:	2b03      	cmp	r3, #3
 801ef04:	d017      	beq.n	801ef36 <__gethex+0x39e>
 801ef06:	2b01      	cmp	r3, #1
 801ef08:	d109      	bne.n	801ef1e <__gethex+0x386>
 801ef0a:	f01a 0f02 	tst.w	sl, #2
 801ef0e:	d006      	beq.n	801ef1e <__gethex+0x386>
 801ef10:	f8d9 0000 	ldr.w	r0, [r9]
 801ef14:	ea4a 0a00 	orr.w	sl, sl, r0
 801ef18:	f01a 0f01 	tst.w	sl, #1
 801ef1c:	d10e      	bne.n	801ef3c <__gethex+0x3a4>
 801ef1e:	f047 0710 	orr.w	r7, r7, #16
 801ef22:	e033      	b.n	801ef8c <__gethex+0x3f4>
 801ef24:	f04f 0a01 	mov.w	sl, #1
 801ef28:	e7d0      	b.n	801eecc <__gethex+0x334>
 801ef2a:	2701      	movs	r7, #1
 801ef2c:	e7e2      	b.n	801eef4 <__gethex+0x35c>
 801ef2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ef30:	f1c3 0301 	rsb	r3, r3, #1
 801ef34:	9315      	str	r3, [sp, #84]	; 0x54
 801ef36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ef38:	2b00      	cmp	r3, #0
 801ef3a:	d0f0      	beq.n	801ef1e <__gethex+0x386>
 801ef3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ef40:	f104 0314 	add.w	r3, r4, #20
 801ef44:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ef48:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ef4c:	f04f 0c00 	mov.w	ip, #0
 801ef50:	4618      	mov	r0, r3
 801ef52:	f853 2b04 	ldr.w	r2, [r3], #4
 801ef56:	f1b2 3fff 	cmp.w	r2, #4294967295
 801ef5a:	d01c      	beq.n	801ef96 <__gethex+0x3fe>
 801ef5c:	3201      	adds	r2, #1
 801ef5e:	6002      	str	r2, [r0, #0]
 801ef60:	2f02      	cmp	r7, #2
 801ef62:	f104 0314 	add.w	r3, r4, #20
 801ef66:	d13f      	bne.n	801efe8 <__gethex+0x450>
 801ef68:	f8d8 2000 	ldr.w	r2, [r8]
 801ef6c:	3a01      	subs	r2, #1
 801ef6e:	42b2      	cmp	r2, r6
 801ef70:	d10a      	bne.n	801ef88 <__gethex+0x3f0>
 801ef72:	1171      	asrs	r1, r6, #5
 801ef74:	2201      	movs	r2, #1
 801ef76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ef7a:	f006 061f 	and.w	r6, r6, #31
 801ef7e:	fa02 f606 	lsl.w	r6, r2, r6
 801ef82:	421e      	tst	r6, r3
 801ef84:	bf18      	it	ne
 801ef86:	4617      	movne	r7, r2
 801ef88:	f047 0720 	orr.w	r7, r7, #32
 801ef8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ef8e:	601c      	str	r4, [r3, #0]
 801ef90:	9b04      	ldr	r3, [sp, #16]
 801ef92:	601d      	str	r5, [r3, #0]
 801ef94:	e695      	b.n	801ecc2 <__gethex+0x12a>
 801ef96:	4299      	cmp	r1, r3
 801ef98:	f843 cc04 	str.w	ip, [r3, #-4]
 801ef9c:	d8d8      	bhi.n	801ef50 <__gethex+0x3b8>
 801ef9e:	68a3      	ldr	r3, [r4, #8]
 801efa0:	459b      	cmp	fp, r3
 801efa2:	db19      	blt.n	801efd8 <__gethex+0x440>
 801efa4:	6861      	ldr	r1, [r4, #4]
 801efa6:	ee18 0a10 	vmov	r0, s16
 801efaa:	3101      	adds	r1, #1
 801efac:	f000 f940 	bl	801f230 <_Balloc>
 801efb0:	4681      	mov	r9, r0
 801efb2:	b918      	cbnz	r0, 801efbc <__gethex+0x424>
 801efb4:	4b1a      	ldr	r3, [pc, #104]	; (801f020 <__gethex+0x488>)
 801efb6:	4602      	mov	r2, r0
 801efb8:	2184      	movs	r1, #132	; 0x84
 801efba:	e6a8      	b.n	801ed0e <__gethex+0x176>
 801efbc:	6922      	ldr	r2, [r4, #16]
 801efbe:	3202      	adds	r2, #2
 801efc0:	f104 010c 	add.w	r1, r4, #12
 801efc4:	0092      	lsls	r2, r2, #2
 801efc6:	300c      	adds	r0, #12
 801efc8:	f7fd f924 	bl	801c214 <memcpy>
 801efcc:	4621      	mov	r1, r4
 801efce:	ee18 0a10 	vmov	r0, s16
 801efd2:	f000 f96d 	bl	801f2b0 <_Bfree>
 801efd6:	464c      	mov	r4, r9
 801efd8:	6923      	ldr	r3, [r4, #16]
 801efda:	1c5a      	adds	r2, r3, #1
 801efdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801efe0:	6122      	str	r2, [r4, #16]
 801efe2:	2201      	movs	r2, #1
 801efe4:	615a      	str	r2, [r3, #20]
 801efe6:	e7bb      	b.n	801ef60 <__gethex+0x3c8>
 801efe8:	6922      	ldr	r2, [r4, #16]
 801efea:	455a      	cmp	r2, fp
 801efec:	dd0b      	ble.n	801f006 <__gethex+0x46e>
 801efee:	2101      	movs	r1, #1
 801eff0:	4620      	mov	r0, r4
 801eff2:	f7ff fd69 	bl	801eac8 <rshift>
 801eff6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801effa:	3501      	adds	r5, #1
 801effc:	42ab      	cmp	r3, r5
 801effe:	f6ff aed0 	blt.w	801eda2 <__gethex+0x20a>
 801f002:	2701      	movs	r7, #1
 801f004:	e7c0      	b.n	801ef88 <__gethex+0x3f0>
 801f006:	f016 061f 	ands.w	r6, r6, #31
 801f00a:	d0fa      	beq.n	801f002 <__gethex+0x46a>
 801f00c:	4453      	add	r3, sl
 801f00e:	f1c6 0620 	rsb	r6, r6, #32
 801f012:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801f016:	f000 f9fd 	bl	801f414 <__hi0bits>
 801f01a:	42b0      	cmp	r0, r6
 801f01c:	dbe7      	blt.n	801efee <__gethex+0x456>
 801f01e:	e7f0      	b.n	801f002 <__gethex+0x46a>
 801f020:	0803965f 	.word	0x0803965f

0801f024 <L_shift>:
 801f024:	f1c2 0208 	rsb	r2, r2, #8
 801f028:	0092      	lsls	r2, r2, #2
 801f02a:	b570      	push	{r4, r5, r6, lr}
 801f02c:	f1c2 0620 	rsb	r6, r2, #32
 801f030:	6843      	ldr	r3, [r0, #4]
 801f032:	6804      	ldr	r4, [r0, #0]
 801f034:	fa03 f506 	lsl.w	r5, r3, r6
 801f038:	432c      	orrs	r4, r5
 801f03a:	40d3      	lsrs	r3, r2
 801f03c:	6004      	str	r4, [r0, #0]
 801f03e:	f840 3f04 	str.w	r3, [r0, #4]!
 801f042:	4288      	cmp	r0, r1
 801f044:	d3f4      	bcc.n	801f030 <L_shift+0xc>
 801f046:	bd70      	pop	{r4, r5, r6, pc}

0801f048 <__match>:
 801f048:	b530      	push	{r4, r5, lr}
 801f04a:	6803      	ldr	r3, [r0, #0]
 801f04c:	3301      	adds	r3, #1
 801f04e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f052:	b914      	cbnz	r4, 801f05a <__match+0x12>
 801f054:	6003      	str	r3, [r0, #0]
 801f056:	2001      	movs	r0, #1
 801f058:	bd30      	pop	{r4, r5, pc}
 801f05a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f05e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801f062:	2d19      	cmp	r5, #25
 801f064:	bf98      	it	ls
 801f066:	3220      	addls	r2, #32
 801f068:	42a2      	cmp	r2, r4
 801f06a:	d0f0      	beq.n	801f04e <__match+0x6>
 801f06c:	2000      	movs	r0, #0
 801f06e:	e7f3      	b.n	801f058 <__match+0x10>

0801f070 <__hexnan>:
 801f070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f074:	680b      	ldr	r3, [r1, #0]
 801f076:	115e      	asrs	r6, r3, #5
 801f078:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f07c:	f013 031f 	ands.w	r3, r3, #31
 801f080:	b087      	sub	sp, #28
 801f082:	bf18      	it	ne
 801f084:	3604      	addne	r6, #4
 801f086:	2500      	movs	r5, #0
 801f088:	1f37      	subs	r7, r6, #4
 801f08a:	4690      	mov	r8, r2
 801f08c:	6802      	ldr	r2, [r0, #0]
 801f08e:	9301      	str	r3, [sp, #4]
 801f090:	4682      	mov	sl, r0
 801f092:	f846 5c04 	str.w	r5, [r6, #-4]
 801f096:	46b9      	mov	r9, r7
 801f098:	463c      	mov	r4, r7
 801f09a:	9502      	str	r5, [sp, #8]
 801f09c:	46ab      	mov	fp, r5
 801f09e:	7851      	ldrb	r1, [r2, #1]
 801f0a0:	1c53      	adds	r3, r2, #1
 801f0a2:	9303      	str	r3, [sp, #12]
 801f0a4:	b341      	cbz	r1, 801f0f8 <__hexnan+0x88>
 801f0a6:	4608      	mov	r0, r1
 801f0a8:	9205      	str	r2, [sp, #20]
 801f0aa:	9104      	str	r1, [sp, #16]
 801f0ac:	f7ff fd5e 	bl	801eb6c <__hexdig_fun>
 801f0b0:	2800      	cmp	r0, #0
 801f0b2:	d14f      	bne.n	801f154 <__hexnan+0xe4>
 801f0b4:	9904      	ldr	r1, [sp, #16]
 801f0b6:	9a05      	ldr	r2, [sp, #20]
 801f0b8:	2920      	cmp	r1, #32
 801f0ba:	d818      	bhi.n	801f0ee <__hexnan+0x7e>
 801f0bc:	9b02      	ldr	r3, [sp, #8]
 801f0be:	459b      	cmp	fp, r3
 801f0c0:	dd13      	ble.n	801f0ea <__hexnan+0x7a>
 801f0c2:	454c      	cmp	r4, r9
 801f0c4:	d206      	bcs.n	801f0d4 <__hexnan+0x64>
 801f0c6:	2d07      	cmp	r5, #7
 801f0c8:	dc04      	bgt.n	801f0d4 <__hexnan+0x64>
 801f0ca:	462a      	mov	r2, r5
 801f0cc:	4649      	mov	r1, r9
 801f0ce:	4620      	mov	r0, r4
 801f0d0:	f7ff ffa8 	bl	801f024 <L_shift>
 801f0d4:	4544      	cmp	r4, r8
 801f0d6:	d950      	bls.n	801f17a <__hexnan+0x10a>
 801f0d8:	2300      	movs	r3, #0
 801f0da:	f1a4 0904 	sub.w	r9, r4, #4
 801f0de:	f844 3c04 	str.w	r3, [r4, #-4]
 801f0e2:	f8cd b008 	str.w	fp, [sp, #8]
 801f0e6:	464c      	mov	r4, r9
 801f0e8:	461d      	mov	r5, r3
 801f0ea:	9a03      	ldr	r2, [sp, #12]
 801f0ec:	e7d7      	b.n	801f09e <__hexnan+0x2e>
 801f0ee:	2929      	cmp	r1, #41	; 0x29
 801f0f0:	d156      	bne.n	801f1a0 <__hexnan+0x130>
 801f0f2:	3202      	adds	r2, #2
 801f0f4:	f8ca 2000 	str.w	r2, [sl]
 801f0f8:	f1bb 0f00 	cmp.w	fp, #0
 801f0fc:	d050      	beq.n	801f1a0 <__hexnan+0x130>
 801f0fe:	454c      	cmp	r4, r9
 801f100:	d206      	bcs.n	801f110 <__hexnan+0xa0>
 801f102:	2d07      	cmp	r5, #7
 801f104:	dc04      	bgt.n	801f110 <__hexnan+0xa0>
 801f106:	462a      	mov	r2, r5
 801f108:	4649      	mov	r1, r9
 801f10a:	4620      	mov	r0, r4
 801f10c:	f7ff ff8a 	bl	801f024 <L_shift>
 801f110:	4544      	cmp	r4, r8
 801f112:	d934      	bls.n	801f17e <__hexnan+0x10e>
 801f114:	f1a8 0204 	sub.w	r2, r8, #4
 801f118:	4623      	mov	r3, r4
 801f11a:	f853 1b04 	ldr.w	r1, [r3], #4
 801f11e:	f842 1f04 	str.w	r1, [r2, #4]!
 801f122:	429f      	cmp	r7, r3
 801f124:	d2f9      	bcs.n	801f11a <__hexnan+0xaa>
 801f126:	1b3b      	subs	r3, r7, r4
 801f128:	f023 0303 	bic.w	r3, r3, #3
 801f12c:	3304      	adds	r3, #4
 801f12e:	3401      	adds	r4, #1
 801f130:	3e03      	subs	r6, #3
 801f132:	42b4      	cmp	r4, r6
 801f134:	bf88      	it	hi
 801f136:	2304      	movhi	r3, #4
 801f138:	4443      	add	r3, r8
 801f13a:	2200      	movs	r2, #0
 801f13c:	f843 2b04 	str.w	r2, [r3], #4
 801f140:	429f      	cmp	r7, r3
 801f142:	d2fb      	bcs.n	801f13c <__hexnan+0xcc>
 801f144:	683b      	ldr	r3, [r7, #0]
 801f146:	b91b      	cbnz	r3, 801f150 <__hexnan+0xe0>
 801f148:	4547      	cmp	r7, r8
 801f14a:	d127      	bne.n	801f19c <__hexnan+0x12c>
 801f14c:	2301      	movs	r3, #1
 801f14e:	603b      	str	r3, [r7, #0]
 801f150:	2005      	movs	r0, #5
 801f152:	e026      	b.n	801f1a2 <__hexnan+0x132>
 801f154:	3501      	adds	r5, #1
 801f156:	2d08      	cmp	r5, #8
 801f158:	f10b 0b01 	add.w	fp, fp, #1
 801f15c:	dd06      	ble.n	801f16c <__hexnan+0xfc>
 801f15e:	4544      	cmp	r4, r8
 801f160:	d9c3      	bls.n	801f0ea <__hexnan+0x7a>
 801f162:	2300      	movs	r3, #0
 801f164:	f844 3c04 	str.w	r3, [r4, #-4]
 801f168:	2501      	movs	r5, #1
 801f16a:	3c04      	subs	r4, #4
 801f16c:	6822      	ldr	r2, [r4, #0]
 801f16e:	f000 000f 	and.w	r0, r0, #15
 801f172:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801f176:	6022      	str	r2, [r4, #0]
 801f178:	e7b7      	b.n	801f0ea <__hexnan+0x7a>
 801f17a:	2508      	movs	r5, #8
 801f17c:	e7b5      	b.n	801f0ea <__hexnan+0x7a>
 801f17e:	9b01      	ldr	r3, [sp, #4]
 801f180:	2b00      	cmp	r3, #0
 801f182:	d0df      	beq.n	801f144 <__hexnan+0xd4>
 801f184:	f04f 32ff 	mov.w	r2, #4294967295
 801f188:	f1c3 0320 	rsb	r3, r3, #32
 801f18c:	fa22 f303 	lsr.w	r3, r2, r3
 801f190:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801f194:	401a      	ands	r2, r3
 801f196:	f846 2c04 	str.w	r2, [r6, #-4]
 801f19a:	e7d3      	b.n	801f144 <__hexnan+0xd4>
 801f19c:	3f04      	subs	r7, #4
 801f19e:	e7d1      	b.n	801f144 <__hexnan+0xd4>
 801f1a0:	2004      	movs	r0, #4
 801f1a2:	b007      	add	sp, #28
 801f1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f1a8 <_isatty_r>:
 801f1a8:	b538      	push	{r3, r4, r5, lr}
 801f1aa:	4d06      	ldr	r5, [pc, #24]	; (801f1c4 <_isatty_r+0x1c>)
 801f1ac:	2300      	movs	r3, #0
 801f1ae:	4604      	mov	r4, r0
 801f1b0:	4608      	mov	r0, r1
 801f1b2:	602b      	str	r3, [r5, #0]
 801f1b4:	f7f6 fa62 	bl	801567c <_isatty>
 801f1b8:	1c43      	adds	r3, r0, #1
 801f1ba:	d102      	bne.n	801f1c2 <_isatty_r+0x1a>
 801f1bc:	682b      	ldr	r3, [r5, #0]
 801f1be:	b103      	cbz	r3, 801f1c2 <_isatty_r+0x1a>
 801f1c0:	6023      	str	r3, [r4, #0]
 801f1c2:	bd38      	pop	{r3, r4, r5, pc}
 801f1c4:	20014248 	.word	0x20014248

0801f1c8 <_localeconv_r>:
 801f1c8:	4800      	ldr	r0, [pc, #0]	; (801f1cc <_localeconv_r+0x4>)
 801f1ca:	4770      	bx	lr
 801f1cc:	20000754 	.word	0x20000754

0801f1d0 <_lseek_r>:
 801f1d0:	b538      	push	{r3, r4, r5, lr}
 801f1d2:	4d07      	ldr	r5, [pc, #28]	; (801f1f0 <_lseek_r+0x20>)
 801f1d4:	4604      	mov	r4, r0
 801f1d6:	4608      	mov	r0, r1
 801f1d8:	4611      	mov	r1, r2
 801f1da:	2200      	movs	r2, #0
 801f1dc:	602a      	str	r2, [r5, #0]
 801f1de:	461a      	mov	r2, r3
 801f1e0:	f7f6 fa4e 	bl	8015680 <_lseek>
 801f1e4:	1c43      	adds	r3, r0, #1
 801f1e6:	d102      	bne.n	801f1ee <_lseek_r+0x1e>
 801f1e8:	682b      	ldr	r3, [r5, #0]
 801f1ea:	b103      	cbz	r3, 801f1ee <_lseek_r+0x1e>
 801f1ec:	6023      	str	r3, [r4, #0]
 801f1ee:	bd38      	pop	{r3, r4, r5, pc}
 801f1f0:	20014248 	.word	0x20014248

0801f1f4 <__ascii_mbtowc>:
 801f1f4:	b082      	sub	sp, #8
 801f1f6:	b901      	cbnz	r1, 801f1fa <__ascii_mbtowc+0x6>
 801f1f8:	a901      	add	r1, sp, #4
 801f1fa:	b142      	cbz	r2, 801f20e <__ascii_mbtowc+0x1a>
 801f1fc:	b14b      	cbz	r3, 801f212 <__ascii_mbtowc+0x1e>
 801f1fe:	7813      	ldrb	r3, [r2, #0]
 801f200:	600b      	str	r3, [r1, #0]
 801f202:	7812      	ldrb	r2, [r2, #0]
 801f204:	1e10      	subs	r0, r2, #0
 801f206:	bf18      	it	ne
 801f208:	2001      	movne	r0, #1
 801f20a:	b002      	add	sp, #8
 801f20c:	4770      	bx	lr
 801f20e:	4610      	mov	r0, r2
 801f210:	e7fb      	b.n	801f20a <__ascii_mbtowc+0x16>
 801f212:	f06f 0001 	mvn.w	r0, #1
 801f216:	e7f8      	b.n	801f20a <__ascii_mbtowc+0x16>

0801f218 <__malloc_lock>:
 801f218:	4801      	ldr	r0, [pc, #4]	; (801f220 <__malloc_lock+0x8>)
 801f21a:	f7fc bf84 	b.w	801c126 <__retarget_lock_acquire_recursive>
 801f21e:	bf00      	nop
 801f220:	2001423c 	.word	0x2001423c

0801f224 <__malloc_unlock>:
 801f224:	4801      	ldr	r0, [pc, #4]	; (801f22c <__malloc_unlock+0x8>)
 801f226:	f7fc bf7f 	b.w	801c128 <__retarget_lock_release_recursive>
 801f22a:	bf00      	nop
 801f22c:	2001423c 	.word	0x2001423c

0801f230 <_Balloc>:
 801f230:	b570      	push	{r4, r5, r6, lr}
 801f232:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801f234:	4604      	mov	r4, r0
 801f236:	460d      	mov	r5, r1
 801f238:	b976      	cbnz	r6, 801f258 <_Balloc+0x28>
 801f23a:	2010      	movs	r0, #16
 801f23c:	f7fc ffda 	bl	801c1f4 <malloc>
 801f240:	4602      	mov	r2, r0
 801f242:	6260      	str	r0, [r4, #36]	; 0x24
 801f244:	b920      	cbnz	r0, 801f250 <_Balloc+0x20>
 801f246:	4b18      	ldr	r3, [pc, #96]	; (801f2a8 <_Balloc+0x78>)
 801f248:	4818      	ldr	r0, [pc, #96]	; (801f2ac <_Balloc+0x7c>)
 801f24a:	2166      	movs	r1, #102	; 0x66
 801f24c:	f000 fe80 	bl	801ff50 <__assert_func>
 801f250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f254:	6006      	str	r6, [r0, #0]
 801f256:	60c6      	str	r6, [r0, #12]
 801f258:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801f25a:	68f3      	ldr	r3, [r6, #12]
 801f25c:	b183      	cbz	r3, 801f280 <_Balloc+0x50>
 801f25e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f260:	68db      	ldr	r3, [r3, #12]
 801f262:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f266:	b9b8      	cbnz	r0, 801f298 <_Balloc+0x68>
 801f268:	2101      	movs	r1, #1
 801f26a:	fa01 f605 	lsl.w	r6, r1, r5
 801f26e:	1d72      	adds	r2, r6, #5
 801f270:	0092      	lsls	r2, r2, #2
 801f272:	4620      	mov	r0, r4
 801f274:	f000 fc9d 	bl	801fbb2 <_calloc_r>
 801f278:	b160      	cbz	r0, 801f294 <_Balloc+0x64>
 801f27a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f27e:	e00e      	b.n	801f29e <_Balloc+0x6e>
 801f280:	2221      	movs	r2, #33	; 0x21
 801f282:	2104      	movs	r1, #4
 801f284:	4620      	mov	r0, r4
 801f286:	f000 fc94 	bl	801fbb2 <_calloc_r>
 801f28a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f28c:	60f0      	str	r0, [r6, #12]
 801f28e:	68db      	ldr	r3, [r3, #12]
 801f290:	2b00      	cmp	r3, #0
 801f292:	d1e4      	bne.n	801f25e <_Balloc+0x2e>
 801f294:	2000      	movs	r0, #0
 801f296:	bd70      	pop	{r4, r5, r6, pc}
 801f298:	6802      	ldr	r2, [r0, #0]
 801f29a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f29e:	2300      	movs	r3, #0
 801f2a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f2a4:	e7f7      	b.n	801f296 <_Balloc+0x66>
 801f2a6:	bf00      	nop
 801f2a8:	080395ed 	.word	0x080395ed
 801f2ac:	080396ea 	.word	0x080396ea

0801f2b0 <_Bfree>:
 801f2b0:	b570      	push	{r4, r5, r6, lr}
 801f2b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801f2b4:	4605      	mov	r5, r0
 801f2b6:	460c      	mov	r4, r1
 801f2b8:	b976      	cbnz	r6, 801f2d8 <_Bfree+0x28>
 801f2ba:	2010      	movs	r0, #16
 801f2bc:	f7fc ff9a 	bl	801c1f4 <malloc>
 801f2c0:	4602      	mov	r2, r0
 801f2c2:	6268      	str	r0, [r5, #36]	; 0x24
 801f2c4:	b920      	cbnz	r0, 801f2d0 <_Bfree+0x20>
 801f2c6:	4b09      	ldr	r3, [pc, #36]	; (801f2ec <_Bfree+0x3c>)
 801f2c8:	4809      	ldr	r0, [pc, #36]	; (801f2f0 <_Bfree+0x40>)
 801f2ca:	218a      	movs	r1, #138	; 0x8a
 801f2cc:	f000 fe40 	bl	801ff50 <__assert_func>
 801f2d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f2d4:	6006      	str	r6, [r0, #0]
 801f2d6:	60c6      	str	r6, [r0, #12]
 801f2d8:	b13c      	cbz	r4, 801f2ea <_Bfree+0x3a>
 801f2da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801f2dc:	6862      	ldr	r2, [r4, #4]
 801f2de:	68db      	ldr	r3, [r3, #12]
 801f2e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f2e4:	6021      	str	r1, [r4, #0]
 801f2e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f2ea:	bd70      	pop	{r4, r5, r6, pc}
 801f2ec:	080395ed 	.word	0x080395ed
 801f2f0:	080396ea 	.word	0x080396ea

0801f2f4 <__multadd>:
 801f2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f2f8:	690d      	ldr	r5, [r1, #16]
 801f2fa:	4607      	mov	r7, r0
 801f2fc:	460c      	mov	r4, r1
 801f2fe:	461e      	mov	r6, r3
 801f300:	f101 0c14 	add.w	ip, r1, #20
 801f304:	2000      	movs	r0, #0
 801f306:	f8dc 3000 	ldr.w	r3, [ip]
 801f30a:	b299      	uxth	r1, r3
 801f30c:	fb02 6101 	mla	r1, r2, r1, r6
 801f310:	0c1e      	lsrs	r6, r3, #16
 801f312:	0c0b      	lsrs	r3, r1, #16
 801f314:	fb02 3306 	mla	r3, r2, r6, r3
 801f318:	b289      	uxth	r1, r1
 801f31a:	3001      	adds	r0, #1
 801f31c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f320:	4285      	cmp	r5, r0
 801f322:	f84c 1b04 	str.w	r1, [ip], #4
 801f326:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f32a:	dcec      	bgt.n	801f306 <__multadd+0x12>
 801f32c:	b30e      	cbz	r6, 801f372 <__multadd+0x7e>
 801f32e:	68a3      	ldr	r3, [r4, #8]
 801f330:	42ab      	cmp	r3, r5
 801f332:	dc19      	bgt.n	801f368 <__multadd+0x74>
 801f334:	6861      	ldr	r1, [r4, #4]
 801f336:	4638      	mov	r0, r7
 801f338:	3101      	adds	r1, #1
 801f33a:	f7ff ff79 	bl	801f230 <_Balloc>
 801f33e:	4680      	mov	r8, r0
 801f340:	b928      	cbnz	r0, 801f34e <__multadd+0x5a>
 801f342:	4602      	mov	r2, r0
 801f344:	4b0c      	ldr	r3, [pc, #48]	; (801f378 <__multadd+0x84>)
 801f346:	480d      	ldr	r0, [pc, #52]	; (801f37c <__multadd+0x88>)
 801f348:	21b5      	movs	r1, #181	; 0xb5
 801f34a:	f000 fe01 	bl	801ff50 <__assert_func>
 801f34e:	6922      	ldr	r2, [r4, #16]
 801f350:	3202      	adds	r2, #2
 801f352:	f104 010c 	add.w	r1, r4, #12
 801f356:	0092      	lsls	r2, r2, #2
 801f358:	300c      	adds	r0, #12
 801f35a:	f7fc ff5b 	bl	801c214 <memcpy>
 801f35e:	4621      	mov	r1, r4
 801f360:	4638      	mov	r0, r7
 801f362:	f7ff ffa5 	bl	801f2b0 <_Bfree>
 801f366:	4644      	mov	r4, r8
 801f368:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f36c:	3501      	adds	r5, #1
 801f36e:	615e      	str	r6, [r3, #20]
 801f370:	6125      	str	r5, [r4, #16]
 801f372:	4620      	mov	r0, r4
 801f374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f378:	0803965f 	.word	0x0803965f
 801f37c:	080396ea 	.word	0x080396ea

0801f380 <__s2b>:
 801f380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f384:	460c      	mov	r4, r1
 801f386:	4615      	mov	r5, r2
 801f388:	461f      	mov	r7, r3
 801f38a:	2209      	movs	r2, #9
 801f38c:	3308      	adds	r3, #8
 801f38e:	4606      	mov	r6, r0
 801f390:	fb93 f3f2 	sdiv	r3, r3, r2
 801f394:	2100      	movs	r1, #0
 801f396:	2201      	movs	r2, #1
 801f398:	429a      	cmp	r2, r3
 801f39a:	db09      	blt.n	801f3b0 <__s2b+0x30>
 801f39c:	4630      	mov	r0, r6
 801f39e:	f7ff ff47 	bl	801f230 <_Balloc>
 801f3a2:	b940      	cbnz	r0, 801f3b6 <__s2b+0x36>
 801f3a4:	4602      	mov	r2, r0
 801f3a6:	4b19      	ldr	r3, [pc, #100]	; (801f40c <__s2b+0x8c>)
 801f3a8:	4819      	ldr	r0, [pc, #100]	; (801f410 <__s2b+0x90>)
 801f3aa:	21ce      	movs	r1, #206	; 0xce
 801f3ac:	f000 fdd0 	bl	801ff50 <__assert_func>
 801f3b0:	0052      	lsls	r2, r2, #1
 801f3b2:	3101      	adds	r1, #1
 801f3b4:	e7f0      	b.n	801f398 <__s2b+0x18>
 801f3b6:	9b08      	ldr	r3, [sp, #32]
 801f3b8:	6143      	str	r3, [r0, #20]
 801f3ba:	2d09      	cmp	r5, #9
 801f3bc:	f04f 0301 	mov.w	r3, #1
 801f3c0:	6103      	str	r3, [r0, #16]
 801f3c2:	dd16      	ble.n	801f3f2 <__s2b+0x72>
 801f3c4:	f104 0909 	add.w	r9, r4, #9
 801f3c8:	46c8      	mov	r8, r9
 801f3ca:	442c      	add	r4, r5
 801f3cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f3d0:	4601      	mov	r1, r0
 801f3d2:	3b30      	subs	r3, #48	; 0x30
 801f3d4:	220a      	movs	r2, #10
 801f3d6:	4630      	mov	r0, r6
 801f3d8:	f7ff ff8c 	bl	801f2f4 <__multadd>
 801f3dc:	45a0      	cmp	r8, r4
 801f3de:	d1f5      	bne.n	801f3cc <__s2b+0x4c>
 801f3e0:	f1a5 0408 	sub.w	r4, r5, #8
 801f3e4:	444c      	add	r4, r9
 801f3e6:	1b2d      	subs	r5, r5, r4
 801f3e8:	1963      	adds	r3, r4, r5
 801f3ea:	42bb      	cmp	r3, r7
 801f3ec:	db04      	blt.n	801f3f8 <__s2b+0x78>
 801f3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f3f2:	340a      	adds	r4, #10
 801f3f4:	2509      	movs	r5, #9
 801f3f6:	e7f6      	b.n	801f3e6 <__s2b+0x66>
 801f3f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f3fc:	4601      	mov	r1, r0
 801f3fe:	3b30      	subs	r3, #48	; 0x30
 801f400:	220a      	movs	r2, #10
 801f402:	4630      	mov	r0, r6
 801f404:	f7ff ff76 	bl	801f2f4 <__multadd>
 801f408:	e7ee      	b.n	801f3e8 <__s2b+0x68>
 801f40a:	bf00      	nop
 801f40c:	0803965f 	.word	0x0803965f
 801f410:	080396ea 	.word	0x080396ea

0801f414 <__hi0bits>:
 801f414:	0c03      	lsrs	r3, r0, #16
 801f416:	041b      	lsls	r3, r3, #16
 801f418:	b9d3      	cbnz	r3, 801f450 <__hi0bits+0x3c>
 801f41a:	0400      	lsls	r0, r0, #16
 801f41c:	2310      	movs	r3, #16
 801f41e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f422:	bf04      	itt	eq
 801f424:	0200      	lsleq	r0, r0, #8
 801f426:	3308      	addeq	r3, #8
 801f428:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f42c:	bf04      	itt	eq
 801f42e:	0100      	lsleq	r0, r0, #4
 801f430:	3304      	addeq	r3, #4
 801f432:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f436:	bf04      	itt	eq
 801f438:	0080      	lsleq	r0, r0, #2
 801f43a:	3302      	addeq	r3, #2
 801f43c:	2800      	cmp	r0, #0
 801f43e:	db05      	blt.n	801f44c <__hi0bits+0x38>
 801f440:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801f444:	f103 0301 	add.w	r3, r3, #1
 801f448:	bf08      	it	eq
 801f44a:	2320      	moveq	r3, #32
 801f44c:	4618      	mov	r0, r3
 801f44e:	4770      	bx	lr
 801f450:	2300      	movs	r3, #0
 801f452:	e7e4      	b.n	801f41e <__hi0bits+0xa>

0801f454 <__lo0bits>:
 801f454:	6803      	ldr	r3, [r0, #0]
 801f456:	f013 0207 	ands.w	r2, r3, #7
 801f45a:	4601      	mov	r1, r0
 801f45c:	d00b      	beq.n	801f476 <__lo0bits+0x22>
 801f45e:	07da      	lsls	r2, r3, #31
 801f460:	d423      	bmi.n	801f4aa <__lo0bits+0x56>
 801f462:	0798      	lsls	r0, r3, #30
 801f464:	bf49      	itett	mi
 801f466:	085b      	lsrmi	r3, r3, #1
 801f468:	089b      	lsrpl	r3, r3, #2
 801f46a:	2001      	movmi	r0, #1
 801f46c:	600b      	strmi	r3, [r1, #0]
 801f46e:	bf5c      	itt	pl
 801f470:	600b      	strpl	r3, [r1, #0]
 801f472:	2002      	movpl	r0, #2
 801f474:	4770      	bx	lr
 801f476:	b298      	uxth	r0, r3
 801f478:	b9a8      	cbnz	r0, 801f4a6 <__lo0bits+0x52>
 801f47a:	0c1b      	lsrs	r3, r3, #16
 801f47c:	2010      	movs	r0, #16
 801f47e:	b2da      	uxtb	r2, r3
 801f480:	b90a      	cbnz	r2, 801f486 <__lo0bits+0x32>
 801f482:	3008      	adds	r0, #8
 801f484:	0a1b      	lsrs	r3, r3, #8
 801f486:	071a      	lsls	r2, r3, #28
 801f488:	bf04      	itt	eq
 801f48a:	091b      	lsreq	r3, r3, #4
 801f48c:	3004      	addeq	r0, #4
 801f48e:	079a      	lsls	r2, r3, #30
 801f490:	bf04      	itt	eq
 801f492:	089b      	lsreq	r3, r3, #2
 801f494:	3002      	addeq	r0, #2
 801f496:	07da      	lsls	r2, r3, #31
 801f498:	d403      	bmi.n	801f4a2 <__lo0bits+0x4e>
 801f49a:	085b      	lsrs	r3, r3, #1
 801f49c:	f100 0001 	add.w	r0, r0, #1
 801f4a0:	d005      	beq.n	801f4ae <__lo0bits+0x5a>
 801f4a2:	600b      	str	r3, [r1, #0]
 801f4a4:	4770      	bx	lr
 801f4a6:	4610      	mov	r0, r2
 801f4a8:	e7e9      	b.n	801f47e <__lo0bits+0x2a>
 801f4aa:	2000      	movs	r0, #0
 801f4ac:	4770      	bx	lr
 801f4ae:	2020      	movs	r0, #32
 801f4b0:	4770      	bx	lr
	...

0801f4b4 <__i2b>:
 801f4b4:	b510      	push	{r4, lr}
 801f4b6:	460c      	mov	r4, r1
 801f4b8:	2101      	movs	r1, #1
 801f4ba:	f7ff feb9 	bl	801f230 <_Balloc>
 801f4be:	4602      	mov	r2, r0
 801f4c0:	b928      	cbnz	r0, 801f4ce <__i2b+0x1a>
 801f4c2:	4b05      	ldr	r3, [pc, #20]	; (801f4d8 <__i2b+0x24>)
 801f4c4:	4805      	ldr	r0, [pc, #20]	; (801f4dc <__i2b+0x28>)
 801f4c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801f4ca:	f000 fd41 	bl	801ff50 <__assert_func>
 801f4ce:	2301      	movs	r3, #1
 801f4d0:	6144      	str	r4, [r0, #20]
 801f4d2:	6103      	str	r3, [r0, #16]
 801f4d4:	bd10      	pop	{r4, pc}
 801f4d6:	bf00      	nop
 801f4d8:	0803965f 	.word	0x0803965f
 801f4dc:	080396ea 	.word	0x080396ea

0801f4e0 <__multiply>:
 801f4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4e4:	4691      	mov	r9, r2
 801f4e6:	690a      	ldr	r2, [r1, #16]
 801f4e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f4ec:	429a      	cmp	r2, r3
 801f4ee:	bfb8      	it	lt
 801f4f0:	460b      	movlt	r3, r1
 801f4f2:	460c      	mov	r4, r1
 801f4f4:	bfbc      	itt	lt
 801f4f6:	464c      	movlt	r4, r9
 801f4f8:	4699      	movlt	r9, r3
 801f4fa:	6927      	ldr	r7, [r4, #16]
 801f4fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f500:	68a3      	ldr	r3, [r4, #8]
 801f502:	6861      	ldr	r1, [r4, #4]
 801f504:	eb07 060a 	add.w	r6, r7, sl
 801f508:	42b3      	cmp	r3, r6
 801f50a:	b085      	sub	sp, #20
 801f50c:	bfb8      	it	lt
 801f50e:	3101      	addlt	r1, #1
 801f510:	f7ff fe8e 	bl	801f230 <_Balloc>
 801f514:	b930      	cbnz	r0, 801f524 <__multiply+0x44>
 801f516:	4602      	mov	r2, r0
 801f518:	4b44      	ldr	r3, [pc, #272]	; (801f62c <__multiply+0x14c>)
 801f51a:	4845      	ldr	r0, [pc, #276]	; (801f630 <__multiply+0x150>)
 801f51c:	f240 115d 	movw	r1, #349	; 0x15d
 801f520:	f000 fd16 	bl	801ff50 <__assert_func>
 801f524:	f100 0514 	add.w	r5, r0, #20
 801f528:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f52c:	462b      	mov	r3, r5
 801f52e:	2200      	movs	r2, #0
 801f530:	4543      	cmp	r3, r8
 801f532:	d321      	bcc.n	801f578 <__multiply+0x98>
 801f534:	f104 0314 	add.w	r3, r4, #20
 801f538:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801f53c:	f109 0314 	add.w	r3, r9, #20
 801f540:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801f544:	9202      	str	r2, [sp, #8]
 801f546:	1b3a      	subs	r2, r7, r4
 801f548:	3a15      	subs	r2, #21
 801f54a:	f022 0203 	bic.w	r2, r2, #3
 801f54e:	3204      	adds	r2, #4
 801f550:	f104 0115 	add.w	r1, r4, #21
 801f554:	428f      	cmp	r7, r1
 801f556:	bf38      	it	cc
 801f558:	2204      	movcc	r2, #4
 801f55a:	9201      	str	r2, [sp, #4]
 801f55c:	9a02      	ldr	r2, [sp, #8]
 801f55e:	9303      	str	r3, [sp, #12]
 801f560:	429a      	cmp	r2, r3
 801f562:	d80c      	bhi.n	801f57e <__multiply+0x9e>
 801f564:	2e00      	cmp	r6, #0
 801f566:	dd03      	ble.n	801f570 <__multiply+0x90>
 801f568:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f56c:	2b00      	cmp	r3, #0
 801f56e:	d05a      	beq.n	801f626 <__multiply+0x146>
 801f570:	6106      	str	r6, [r0, #16]
 801f572:	b005      	add	sp, #20
 801f574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f578:	f843 2b04 	str.w	r2, [r3], #4
 801f57c:	e7d8      	b.n	801f530 <__multiply+0x50>
 801f57e:	f8b3 a000 	ldrh.w	sl, [r3]
 801f582:	f1ba 0f00 	cmp.w	sl, #0
 801f586:	d024      	beq.n	801f5d2 <__multiply+0xf2>
 801f588:	f104 0e14 	add.w	lr, r4, #20
 801f58c:	46a9      	mov	r9, r5
 801f58e:	f04f 0c00 	mov.w	ip, #0
 801f592:	f85e 2b04 	ldr.w	r2, [lr], #4
 801f596:	f8d9 1000 	ldr.w	r1, [r9]
 801f59a:	fa1f fb82 	uxth.w	fp, r2
 801f59e:	b289      	uxth	r1, r1
 801f5a0:	fb0a 110b 	mla	r1, sl, fp, r1
 801f5a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801f5a8:	f8d9 2000 	ldr.w	r2, [r9]
 801f5ac:	4461      	add	r1, ip
 801f5ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f5b2:	fb0a c20b 	mla	r2, sl, fp, ip
 801f5b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801f5ba:	b289      	uxth	r1, r1
 801f5bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f5c0:	4577      	cmp	r7, lr
 801f5c2:	f849 1b04 	str.w	r1, [r9], #4
 801f5c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f5ca:	d8e2      	bhi.n	801f592 <__multiply+0xb2>
 801f5cc:	9a01      	ldr	r2, [sp, #4]
 801f5ce:	f845 c002 	str.w	ip, [r5, r2]
 801f5d2:	9a03      	ldr	r2, [sp, #12]
 801f5d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801f5d8:	3304      	adds	r3, #4
 801f5da:	f1b9 0f00 	cmp.w	r9, #0
 801f5de:	d020      	beq.n	801f622 <__multiply+0x142>
 801f5e0:	6829      	ldr	r1, [r5, #0]
 801f5e2:	f104 0c14 	add.w	ip, r4, #20
 801f5e6:	46ae      	mov	lr, r5
 801f5e8:	f04f 0a00 	mov.w	sl, #0
 801f5ec:	f8bc b000 	ldrh.w	fp, [ip]
 801f5f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801f5f4:	fb09 220b 	mla	r2, r9, fp, r2
 801f5f8:	4492      	add	sl, r2
 801f5fa:	b289      	uxth	r1, r1
 801f5fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801f600:	f84e 1b04 	str.w	r1, [lr], #4
 801f604:	f85c 2b04 	ldr.w	r2, [ip], #4
 801f608:	f8be 1000 	ldrh.w	r1, [lr]
 801f60c:	0c12      	lsrs	r2, r2, #16
 801f60e:	fb09 1102 	mla	r1, r9, r2, r1
 801f612:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801f616:	4567      	cmp	r7, ip
 801f618:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801f61c:	d8e6      	bhi.n	801f5ec <__multiply+0x10c>
 801f61e:	9a01      	ldr	r2, [sp, #4]
 801f620:	50a9      	str	r1, [r5, r2]
 801f622:	3504      	adds	r5, #4
 801f624:	e79a      	b.n	801f55c <__multiply+0x7c>
 801f626:	3e01      	subs	r6, #1
 801f628:	e79c      	b.n	801f564 <__multiply+0x84>
 801f62a:	bf00      	nop
 801f62c:	0803965f 	.word	0x0803965f
 801f630:	080396ea 	.word	0x080396ea

0801f634 <__pow5mult>:
 801f634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f638:	4615      	mov	r5, r2
 801f63a:	f012 0203 	ands.w	r2, r2, #3
 801f63e:	4606      	mov	r6, r0
 801f640:	460f      	mov	r7, r1
 801f642:	d007      	beq.n	801f654 <__pow5mult+0x20>
 801f644:	4c25      	ldr	r4, [pc, #148]	; (801f6dc <__pow5mult+0xa8>)
 801f646:	3a01      	subs	r2, #1
 801f648:	2300      	movs	r3, #0
 801f64a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f64e:	f7ff fe51 	bl	801f2f4 <__multadd>
 801f652:	4607      	mov	r7, r0
 801f654:	10ad      	asrs	r5, r5, #2
 801f656:	d03d      	beq.n	801f6d4 <__pow5mult+0xa0>
 801f658:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801f65a:	b97c      	cbnz	r4, 801f67c <__pow5mult+0x48>
 801f65c:	2010      	movs	r0, #16
 801f65e:	f7fc fdc9 	bl	801c1f4 <malloc>
 801f662:	4602      	mov	r2, r0
 801f664:	6270      	str	r0, [r6, #36]	; 0x24
 801f666:	b928      	cbnz	r0, 801f674 <__pow5mult+0x40>
 801f668:	4b1d      	ldr	r3, [pc, #116]	; (801f6e0 <__pow5mult+0xac>)
 801f66a:	481e      	ldr	r0, [pc, #120]	; (801f6e4 <__pow5mult+0xb0>)
 801f66c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801f670:	f000 fc6e 	bl	801ff50 <__assert_func>
 801f674:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f678:	6004      	str	r4, [r0, #0]
 801f67a:	60c4      	str	r4, [r0, #12]
 801f67c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801f680:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f684:	b94c      	cbnz	r4, 801f69a <__pow5mult+0x66>
 801f686:	f240 2171 	movw	r1, #625	; 0x271
 801f68a:	4630      	mov	r0, r6
 801f68c:	f7ff ff12 	bl	801f4b4 <__i2b>
 801f690:	2300      	movs	r3, #0
 801f692:	f8c8 0008 	str.w	r0, [r8, #8]
 801f696:	4604      	mov	r4, r0
 801f698:	6003      	str	r3, [r0, #0]
 801f69a:	f04f 0900 	mov.w	r9, #0
 801f69e:	07eb      	lsls	r3, r5, #31
 801f6a0:	d50a      	bpl.n	801f6b8 <__pow5mult+0x84>
 801f6a2:	4639      	mov	r1, r7
 801f6a4:	4622      	mov	r2, r4
 801f6a6:	4630      	mov	r0, r6
 801f6a8:	f7ff ff1a 	bl	801f4e0 <__multiply>
 801f6ac:	4639      	mov	r1, r7
 801f6ae:	4680      	mov	r8, r0
 801f6b0:	4630      	mov	r0, r6
 801f6b2:	f7ff fdfd 	bl	801f2b0 <_Bfree>
 801f6b6:	4647      	mov	r7, r8
 801f6b8:	106d      	asrs	r5, r5, #1
 801f6ba:	d00b      	beq.n	801f6d4 <__pow5mult+0xa0>
 801f6bc:	6820      	ldr	r0, [r4, #0]
 801f6be:	b938      	cbnz	r0, 801f6d0 <__pow5mult+0x9c>
 801f6c0:	4622      	mov	r2, r4
 801f6c2:	4621      	mov	r1, r4
 801f6c4:	4630      	mov	r0, r6
 801f6c6:	f7ff ff0b 	bl	801f4e0 <__multiply>
 801f6ca:	6020      	str	r0, [r4, #0]
 801f6cc:	f8c0 9000 	str.w	r9, [r0]
 801f6d0:	4604      	mov	r4, r0
 801f6d2:	e7e4      	b.n	801f69e <__pow5mult+0x6a>
 801f6d4:	4638      	mov	r0, r7
 801f6d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f6da:	bf00      	nop
 801f6dc:	08039838 	.word	0x08039838
 801f6e0:	080395ed 	.word	0x080395ed
 801f6e4:	080396ea 	.word	0x080396ea

0801f6e8 <__lshift>:
 801f6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f6ec:	460c      	mov	r4, r1
 801f6ee:	6849      	ldr	r1, [r1, #4]
 801f6f0:	6923      	ldr	r3, [r4, #16]
 801f6f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f6f6:	68a3      	ldr	r3, [r4, #8]
 801f6f8:	4607      	mov	r7, r0
 801f6fa:	4691      	mov	r9, r2
 801f6fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f700:	f108 0601 	add.w	r6, r8, #1
 801f704:	42b3      	cmp	r3, r6
 801f706:	db0b      	blt.n	801f720 <__lshift+0x38>
 801f708:	4638      	mov	r0, r7
 801f70a:	f7ff fd91 	bl	801f230 <_Balloc>
 801f70e:	4605      	mov	r5, r0
 801f710:	b948      	cbnz	r0, 801f726 <__lshift+0x3e>
 801f712:	4602      	mov	r2, r0
 801f714:	4b2a      	ldr	r3, [pc, #168]	; (801f7c0 <__lshift+0xd8>)
 801f716:	482b      	ldr	r0, [pc, #172]	; (801f7c4 <__lshift+0xdc>)
 801f718:	f240 11d9 	movw	r1, #473	; 0x1d9
 801f71c:	f000 fc18 	bl	801ff50 <__assert_func>
 801f720:	3101      	adds	r1, #1
 801f722:	005b      	lsls	r3, r3, #1
 801f724:	e7ee      	b.n	801f704 <__lshift+0x1c>
 801f726:	2300      	movs	r3, #0
 801f728:	f100 0114 	add.w	r1, r0, #20
 801f72c:	f100 0210 	add.w	r2, r0, #16
 801f730:	4618      	mov	r0, r3
 801f732:	4553      	cmp	r3, sl
 801f734:	db37      	blt.n	801f7a6 <__lshift+0xbe>
 801f736:	6920      	ldr	r0, [r4, #16]
 801f738:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f73c:	f104 0314 	add.w	r3, r4, #20
 801f740:	f019 091f 	ands.w	r9, r9, #31
 801f744:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f748:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801f74c:	d02f      	beq.n	801f7ae <__lshift+0xc6>
 801f74e:	f1c9 0e20 	rsb	lr, r9, #32
 801f752:	468a      	mov	sl, r1
 801f754:	f04f 0c00 	mov.w	ip, #0
 801f758:	681a      	ldr	r2, [r3, #0]
 801f75a:	fa02 f209 	lsl.w	r2, r2, r9
 801f75e:	ea42 020c 	orr.w	r2, r2, ip
 801f762:	f84a 2b04 	str.w	r2, [sl], #4
 801f766:	f853 2b04 	ldr.w	r2, [r3], #4
 801f76a:	4298      	cmp	r0, r3
 801f76c:	fa22 fc0e 	lsr.w	ip, r2, lr
 801f770:	d8f2      	bhi.n	801f758 <__lshift+0x70>
 801f772:	1b03      	subs	r3, r0, r4
 801f774:	3b15      	subs	r3, #21
 801f776:	f023 0303 	bic.w	r3, r3, #3
 801f77a:	3304      	adds	r3, #4
 801f77c:	f104 0215 	add.w	r2, r4, #21
 801f780:	4290      	cmp	r0, r2
 801f782:	bf38      	it	cc
 801f784:	2304      	movcc	r3, #4
 801f786:	f841 c003 	str.w	ip, [r1, r3]
 801f78a:	f1bc 0f00 	cmp.w	ip, #0
 801f78e:	d001      	beq.n	801f794 <__lshift+0xac>
 801f790:	f108 0602 	add.w	r6, r8, #2
 801f794:	3e01      	subs	r6, #1
 801f796:	4638      	mov	r0, r7
 801f798:	612e      	str	r6, [r5, #16]
 801f79a:	4621      	mov	r1, r4
 801f79c:	f7ff fd88 	bl	801f2b0 <_Bfree>
 801f7a0:	4628      	mov	r0, r5
 801f7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f7a6:	f842 0f04 	str.w	r0, [r2, #4]!
 801f7aa:	3301      	adds	r3, #1
 801f7ac:	e7c1      	b.n	801f732 <__lshift+0x4a>
 801f7ae:	3904      	subs	r1, #4
 801f7b0:	f853 2b04 	ldr.w	r2, [r3], #4
 801f7b4:	f841 2f04 	str.w	r2, [r1, #4]!
 801f7b8:	4298      	cmp	r0, r3
 801f7ba:	d8f9      	bhi.n	801f7b0 <__lshift+0xc8>
 801f7bc:	e7ea      	b.n	801f794 <__lshift+0xac>
 801f7be:	bf00      	nop
 801f7c0:	0803965f 	.word	0x0803965f
 801f7c4:	080396ea 	.word	0x080396ea

0801f7c8 <__mcmp>:
 801f7c8:	b530      	push	{r4, r5, lr}
 801f7ca:	6902      	ldr	r2, [r0, #16]
 801f7cc:	690c      	ldr	r4, [r1, #16]
 801f7ce:	1b12      	subs	r2, r2, r4
 801f7d0:	d10e      	bne.n	801f7f0 <__mcmp+0x28>
 801f7d2:	f100 0314 	add.w	r3, r0, #20
 801f7d6:	3114      	adds	r1, #20
 801f7d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801f7dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801f7e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801f7e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801f7e8:	42a5      	cmp	r5, r4
 801f7ea:	d003      	beq.n	801f7f4 <__mcmp+0x2c>
 801f7ec:	d305      	bcc.n	801f7fa <__mcmp+0x32>
 801f7ee:	2201      	movs	r2, #1
 801f7f0:	4610      	mov	r0, r2
 801f7f2:	bd30      	pop	{r4, r5, pc}
 801f7f4:	4283      	cmp	r3, r0
 801f7f6:	d3f3      	bcc.n	801f7e0 <__mcmp+0x18>
 801f7f8:	e7fa      	b.n	801f7f0 <__mcmp+0x28>
 801f7fa:	f04f 32ff 	mov.w	r2, #4294967295
 801f7fe:	e7f7      	b.n	801f7f0 <__mcmp+0x28>

0801f800 <__mdiff>:
 801f800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f804:	460c      	mov	r4, r1
 801f806:	4606      	mov	r6, r0
 801f808:	4611      	mov	r1, r2
 801f80a:	4620      	mov	r0, r4
 801f80c:	4690      	mov	r8, r2
 801f80e:	f7ff ffdb 	bl	801f7c8 <__mcmp>
 801f812:	1e05      	subs	r5, r0, #0
 801f814:	d110      	bne.n	801f838 <__mdiff+0x38>
 801f816:	4629      	mov	r1, r5
 801f818:	4630      	mov	r0, r6
 801f81a:	f7ff fd09 	bl	801f230 <_Balloc>
 801f81e:	b930      	cbnz	r0, 801f82e <__mdiff+0x2e>
 801f820:	4b3a      	ldr	r3, [pc, #232]	; (801f90c <__mdiff+0x10c>)
 801f822:	4602      	mov	r2, r0
 801f824:	f240 2132 	movw	r1, #562	; 0x232
 801f828:	4839      	ldr	r0, [pc, #228]	; (801f910 <__mdiff+0x110>)
 801f82a:	f000 fb91 	bl	801ff50 <__assert_func>
 801f82e:	2301      	movs	r3, #1
 801f830:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f834:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f838:	bfa4      	itt	ge
 801f83a:	4643      	movge	r3, r8
 801f83c:	46a0      	movge	r8, r4
 801f83e:	4630      	mov	r0, r6
 801f840:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f844:	bfa6      	itte	ge
 801f846:	461c      	movge	r4, r3
 801f848:	2500      	movge	r5, #0
 801f84a:	2501      	movlt	r5, #1
 801f84c:	f7ff fcf0 	bl	801f230 <_Balloc>
 801f850:	b920      	cbnz	r0, 801f85c <__mdiff+0x5c>
 801f852:	4b2e      	ldr	r3, [pc, #184]	; (801f90c <__mdiff+0x10c>)
 801f854:	4602      	mov	r2, r0
 801f856:	f44f 7110 	mov.w	r1, #576	; 0x240
 801f85a:	e7e5      	b.n	801f828 <__mdiff+0x28>
 801f85c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801f860:	6926      	ldr	r6, [r4, #16]
 801f862:	60c5      	str	r5, [r0, #12]
 801f864:	f104 0914 	add.w	r9, r4, #20
 801f868:	f108 0514 	add.w	r5, r8, #20
 801f86c:	f100 0e14 	add.w	lr, r0, #20
 801f870:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801f874:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801f878:	f108 0210 	add.w	r2, r8, #16
 801f87c:	46f2      	mov	sl, lr
 801f87e:	2100      	movs	r1, #0
 801f880:	f859 3b04 	ldr.w	r3, [r9], #4
 801f884:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801f888:	fa1f f883 	uxth.w	r8, r3
 801f88c:	fa11 f18b 	uxtah	r1, r1, fp
 801f890:	0c1b      	lsrs	r3, r3, #16
 801f892:	eba1 0808 	sub.w	r8, r1, r8
 801f896:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801f89a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801f89e:	fa1f f888 	uxth.w	r8, r8
 801f8a2:	1419      	asrs	r1, r3, #16
 801f8a4:	454e      	cmp	r6, r9
 801f8a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801f8aa:	f84a 3b04 	str.w	r3, [sl], #4
 801f8ae:	d8e7      	bhi.n	801f880 <__mdiff+0x80>
 801f8b0:	1b33      	subs	r3, r6, r4
 801f8b2:	3b15      	subs	r3, #21
 801f8b4:	f023 0303 	bic.w	r3, r3, #3
 801f8b8:	3304      	adds	r3, #4
 801f8ba:	3415      	adds	r4, #21
 801f8bc:	42a6      	cmp	r6, r4
 801f8be:	bf38      	it	cc
 801f8c0:	2304      	movcc	r3, #4
 801f8c2:	441d      	add	r5, r3
 801f8c4:	4473      	add	r3, lr
 801f8c6:	469e      	mov	lr, r3
 801f8c8:	462e      	mov	r6, r5
 801f8ca:	4566      	cmp	r6, ip
 801f8cc:	d30e      	bcc.n	801f8ec <__mdiff+0xec>
 801f8ce:	f10c 0203 	add.w	r2, ip, #3
 801f8d2:	1b52      	subs	r2, r2, r5
 801f8d4:	f022 0203 	bic.w	r2, r2, #3
 801f8d8:	3d03      	subs	r5, #3
 801f8da:	45ac      	cmp	ip, r5
 801f8dc:	bf38      	it	cc
 801f8de:	2200      	movcc	r2, #0
 801f8e0:	441a      	add	r2, r3
 801f8e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801f8e6:	b17b      	cbz	r3, 801f908 <__mdiff+0x108>
 801f8e8:	6107      	str	r7, [r0, #16]
 801f8ea:	e7a3      	b.n	801f834 <__mdiff+0x34>
 801f8ec:	f856 8b04 	ldr.w	r8, [r6], #4
 801f8f0:	fa11 f288 	uxtah	r2, r1, r8
 801f8f4:	1414      	asrs	r4, r2, #16
 801f8f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801f8fa:	b292      	uxth	r2, r2
 801f8fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801f900:	f84e 2b04 	str.w	r2, [lr], #4
 801f904:	1421      	asrs	r1, r4, #16
 801f906:	e7e0      	b.n	801f8ca <__mdiff+0xca>
 801f908:	3f01      	subs	r7, #1
 801f90a:	e7ea      	b.n	801f8e2 <__mdiff+0xe2>
 801f90c:	0803965f 	.word	0x0803965f
 801f910:	080396ea 	.word	0x080396ea

0801f914 <__ulp>:
 801f914:	b082      	sub	sp, #8
 801f916:	ed8d 0b00 	vstr	d0, [sp]
 801f91a:	9b01      	ldr	r3, [sp, #4]
 801f91c:	4912      	ldr	r1, [pc, #72]	; (801f968 <__ulp+0x54>)
 801f91e:	4019      	ands	r1, r3
 801f920:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801f924:	2900      	cmp	r1, #0
 801f926:	dd05      	ble.n	801f934 <__ulp+0x20>
 801f928:	2200      	movs	r2, #0
 801f92a:	460b      	mov	r3, r1
 801f92c:	ec43 2b10 	vmov	d0, r2, r3
 801f930:	b002      	add	sp, #8
 801f932:	4770      	bx	lr
 801f934:	4249      	negs	r1, r1
 801f936:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801f93a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801f93e:	f04f 0200 	mov.w	r2, #0
 801f942:	f04f 0300 	mov.w	r3, #0
 801f946:	da04      	bge.n	801f952 <__ulp+0x3e>
 801f948:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801f94c:	fa41 f300 	asr.w	r3, r1, r0
 801f950:	e7ec      	b.n	801f92c <__ulp+0x18>
 801f952:	f1a0 0114 	sub.w	r1, r0, #20
 801f956:	291e      	cmp	r1, #30
 801f958:	bfda      	itte	le
 801f95a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801f95e:	fa20 f101 	lsrle.w	r1, r0, r1
 801f962:	2101      	movgt	r1, #1
 801f964:	460a      	mov	r2, r1
 801f966:	e7e1      	b.n	801f92c <__ulp+0x18>
 801f968:	7ff00000 	.word	0x7ff00000

0801f96c <__b2d>:
 801f96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f96e:	6905      	ldr	r5, [r0, #16]
 801f970:	f100 0714 	add.w	r7, r0, #20
 801f974:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801f978:	1f2e      	subs	r6, r5, #4
 801f97a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801f97e:	4620      	mov	r0, r4
 801f980:	f7ff fd48 	bl	801f414 <__hi0bits>
 801f984:	f1c0 0320 	rsb	r3, r0, #32
 801f988:	280a      	cmp	r0, #10
 801f98a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801fa08 <__b2d+0x9c>
 801f98e:	600b      	str	r3, [r1, #0]
 801f990:	dc14      	bgt.n	801f9bc <__b2d+0x50>
 801f992:	f1c0 0e0b 	rsb	lr, r0, #11
 801f996:	fa24 f10e 	lsr.w	r1, r4, lr
 801f99a:	42b7      	cmp	r7, r6
 801f99c:	ea41 030c 	orr.w	r3, r1, ip
 801f9a0:	bf34      	ite	cc
 801f9a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f9a6:	2100      	movcs	r1, #0
 801f9a8:	3015      	adds	r0, #21
 801f9aa:	fa04 f000 	lsl.w	r0, r4, r0
 801f9ae:	fa21 f10e 	lsr.w	r1, r1, lr
 801f9b2:	ea40 0201 	orr.w	r2, r0, r1
 801f9b6:	ec43 2b10 	vmov	d0, r2, r3
 801f9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f9bc:	42b7      	cmp	r7, r6
 801f9be:	bf3a      	itte	cc
 801f9c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f9c4:	f1a5 0608 	subcc.w	r6, r5, #8
 801f9c8:	2100      	movcs	r1, #0
 801f9ca:	380b      	subs	r0, #11
 801f9cc:	d017      	beq.n	801f9fe <__b2d+0x92>
 801f9ce:	f1c0 0c20 	rsb	ip, r0, #32
 801f9d2:	fa04 f500 	lsl.w	r5, r4, r0
 801f9d6:	42be      	cmp	r6, r7
 801f9d8:	fa21 f40c 	lsr.w	r4, r1, ip
 801f9dc:	ea45 0504 	orr.w	r5, r5, r4
 801f9e0:	bf8c      	ite	hi
 801f9e2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801f9e6:	2400      	movls	r4, #0
 801f9e8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801f9ec:	fa01 f000 	lsl.w	r0, r1, r0
 801f9f0:	fa24 f40c 	lsr.w	r4, r4, ip
 801f9f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801f9f8:	ea40 0204 	orr.w	r2, r0, r4
 801f9fc:	e7db      	b.n	801f9b6 <__b2d+0x4a>
 801f9fe:	ea44 030c 	orr.w	r3, r4, ip
 801fa02:	460a      	mov	r2, r1
 801fa04:	e7d7      	b.n	801f9b6 <__b2d+0x4a>
 801fa06:	bf00      	nop
 801fa08:	3ff00000 	.word	0x3ff00000

0801fa0c <__d2b>:
 801fa0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801fa10:	4689      	mov	r9, r1
 801fa12:	2101      	movs	r1, #1
 801fa14:	ec57 6b10 	vmov	r6, r7, d0
 801fa18:	4690      	mov	r8, r2
 801fa1a:	f7ff fc09 	bl	801f230 <_Balloc>
 801fa1e:	4604      	mov	r4, r0
 801fa20:	b930      	cbnz	r0, 801fa30 <__d2b+0x24>
 801fa22:	4602      	mov	r2, r0
 801fa24:	4b25      	ldr	r3, [pc, #148]	; (801fabc <__d2b+0xb0>)
 801fa26:	4826      	ldr	r0, [pc, #152]	; (801fac0 <__d2b+0xb4>)
 801fa28:	f240 310a 	movw	r1, #778	; 0x30a
 801fa2c:	f000 fa90 	bl	801ff50 <__assert_func>
 801fa30:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801fa34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801fa38:	bb35      	cbnz	r5, 801fa88 <__d2b+0x7c>
 801fa3a:	2e00      	cmp	r6, #0
 801fa3c:	9301      	str	r3, [sp, #4]
 801fa3e:	d028      	beq.n	801fa92 <__d2b+0x86>
 801fa40:	4668      	mov	r0, sp
 801fa42:	9600      	str	r6, [sp, #0]
 801fa44:	f7ff fd06 	bl	801f454 <__lo0bits>
 801fa48:	9900      	ldr	r1, [sp, #0]
 801fa4a:	b300      	cbz	r0, 801fa8e <__d2b+0x82>
 801fa4c:	9a01      	ldr	r2, [sp, #4]
 801fa4e:	f1c0 0320 	rsb	r3, r0, #32
 801fa52:	fa02 f303 	lsl.w	r3, r2, r3
 801fa56:	430b      	orrs	r3, r1
 801fa58:	40c2      	lsrs	r2, r0
 801fa5a:	6163      	str	r3, [r4, #20]
 801fa5c:	9201      	str	r2, [sp, #4]
 801fa5e:	9b01      	ldr	r3, [sp, #4]
 801fa60:	61a3      	str	r3, [r4, #24]
 801fa62:	2b00      	cmp	r3, #0
 801fa64:	bf14      	ite	ne
 801fa66:	2202      	movne	r2, #2
 801fa68:	2201      	moveq	r2, #1
 801fa6a:	6122      	str	r2, [r4, #16]
 801fa6c:	b1d5      	cbz	r5, 801faa4 <__d2b+0x98>
 801fa6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801fa72:	4405      	add	r5, r0
 801fa74:	f8c9 5000 	str.w	r5, [r9]
 801fa78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801fa7c:	f8c8 0000 	str.w	r0, [r8]
 801fa80:	4620      	mov	r0, r4
 801fa82:	b003      	add	sp, #12
 801fa84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fa88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801fa8c:	e7d5      	b.n	801fa3a <__d2b+0x2e>
 801fa8e:	6161      	str	r1, [r4, #20]
 801fa90:	e7e5      	b.n	801fa5e <__d2b+0x52>
 801fa92:	a801      	add	r0, sp, #4
 801fa94:	f7ff fcde 	bl	801f454 <__lo0bits>
 801fa98:	9b01      	ldr	r3, [sp, #4]
 801fa9a:	6163      	str	r3, [r4, #20]
 801fa9c:	2201      	movs	r2, #1
 801fa9e:	6122      	str	r2, [r4, #16]
 801faa0:	3020      	adds	r0, #32
 801faa2:	e7e3      	b.n	801fa6c <__d2b+0x60>
 801faa4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801faa8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801faac:	f8c9 0000 	str.w	r0, [r9]
 801fab0:	6918      	ldr	r0, [r3, #16]
 801fab2:	f7ff fcaf 	bl	801f414 <__hi0bits>
 801fab6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801faba:	e7df      	b.n	801fa7c <__d2b+0x70>
 801fabc:	0803965f 	.word	0x0803965f
 801fac0:	080396ea 	.word	0x080396ea

0801fac4 <__ratio>:
 801fac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fac8:	4688      	mov	r8, r1
 801faca:	4669      	mov	r1, sp
 801facc:	4681      	mov	r9, r0
 801face:	f7ff ff4d 	bl	801f96c <__b2d>
 801fad2:	a901      	add	r1, sp, #4
 801fad4:	4640      	mov	r0, r8
 801fad6:	ec55 4b10 	vmov	r4, r5, d0
 801fada:	f7ff ff47 	bl	801f96c <__b2d>
 801fade:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801fae2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801fae6:	eba3 0c02 	sub.w	ip, r3, r2
 801faea:	e9dd 3200 	ldrd	r3, r2, [sp]
 801faee:	1a9b      	subs	r3, r3, r2
 801faf0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801faf4:	ec51 0b10 	vmov	r0, r1, d0
 801faf8:	2b00      	cmp	r3, #0
 801fafa:	bfd6      	itet	le
 801fafc:	460a      	movle	r2, r1
 801fafe:	462a      	movgt	r2, r5
 801fb00:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801fb04:	468b      	mov	fp, r1
 801fb06:	462f      	mov	r7, r5
 801fb08:	bfd4      	ite	le
 801fb0a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801fb0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801fb12:	4620      	mov	r0, r4
 801fb14:	ee10 2a10 	vmov	r2, s0
 801fb18:	465b      	mov	r3, fp
 801fb1a:	4639      	mov	r1, r7
 801fb1c:	f7e4 ff1e 	bl	800495c <__aeabi_ddiv>
 801fb20:	ec41 0b10 	vmov	d0, r0, r1
 801fb24:	b003      	add	sp, #12
 801fb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb2a <__copybits>:
 801fb2a:	3901      	subs	r1, #1
 801fb2c:	b570      	push	{r4, r5, r6, lr}
 801fb2e:	1149      	asrs	r1, r1, #5
 801fb30:	6914      	ldr	r4, [r2, #16]
 801fb32:	3101      	adds	r1, #1
 801fb34:	f102 0314 	add.w	r3, r2, #20
 801fb38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801fb3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801fb40:	1f05      	subs	r5, r0, #4
 801fb42:	42a3      	cmp	r3, r4
 801fb44:	d30c      	bcc.n	801fb60 <__copybits+0x36>
 801fb46:	1aa3      	subs	r3, r4, r2
 801fb48:	3b11      	subs	r3, #17
 801fb4a:	f023 0303 	bic.w	r3, r3, #3
 801fb4e:	3211      	adds	r2, #17
 801fb50:	42a2      	cmp	r2, r4
 801fb52:	bf88      	it	hi
 801fb54:	2300      	movhi	r3, #0
 801fb56:	4418      	add	r0, r3
 801fb58:	2300      	movs	r3, #0
 801fb5a:	4288      	cmp	r0, r1
 801fb5c:	d305      	bcc.n	801fb6a <__copybits+0x40>
 801fb5e:	bd70      	pop	{r4, r5, r6, pc}
 801fb60:	f853 6b04 	ldr.w	r6, [r3], #4
 801fb64:	f845 6f04 	str.w	r6, [r5, #4]!
 801fb68:	e7eb      	b.n	801fb42 <__copybits+0x18>
 801fb6a:	f840 3b04 	str.w	r3, [r0], #4
 801fb6e:	e7f4      	b.n	801fb5a <__copybits+0x30>

0801fb70 <__any_on>:
 801fb70:	f100 0214 	add.w	r2, r0, #20
 801fb74:	6900      	ldr	r0, [r0, #16]
 801fb76:	114b      	asrs	r3, r1, #5
 801fb78:	4298      	cmp	r0, r3
 801fb7a:	b510      	push	{r4, lr}
 801fb7c:	db11      	blt.n	801fba2 <__any_on+0x32>
 801fb7e:	dd0a      	ble.n	801fb96 <__any_on+0x26>
 801fb80:	f011 011f 	ands.w	r1, r1, #31
 801fb84:	d007      	beq.n	801fb96 <__any_on+0x26>
 801fb86:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801fb8a:	fa24 f001 	lsr.w	r0, r4, r1
 801fb8e:	fa00 f101 	lsl.w	r1, r0, r1
 801fb92:	428c      	cmp	r4, r1
 801fb94:	d10b      	bne.n	801fbae <__any_on+0x3e>
 801fb96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801fb9a:	4293      	cmp	r3, r2
 801fb9c:	d803      	bhi.n	801fba6 <__any_on+0x36>
 801fb9e:	2000      	movs	r0, #0
 801fba0:	bd10      	pop	{r4, pc}
 801fba2:	4603      	mov	r3, r0
 801fba4:	e7f7      	b.n	801fb96 <__any_on+0x26>
 801fba6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801fbaa:	2900      	cmp	r1, #0
 801fbac:	d0f5      	beq.n	801fb9a <__any_on+0x2a>
 801fbae:	2001      	movs	r0, #1
 801fbb0:	e7f6      	b.n	801fba0 <__any_on+0x30>

0801fbb2 <_calloc_r>:
 801fbb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fbb4:	fba1 2402 	umull	r2, r4, r1, r2
 801fbb8:	b94c      	cbnz	r4, 801fbce <_calloc_r+0x1c>
 801fbba:	4611      	mov	r1, r2
 801fbbc:	9201      	str	r2, [sp, #4]
 801fbbe:	f7fc fbc5 	bl	801c34c <_malloc_r>
 801fbc2:	9a01      	ldr	r2, [sp, #4]
 801fbc4:	4605      	mov	r5, r0
 801fbc6:	b930      	cbnz	r0, 801fbd6 <_calloc_r+0x24>
 801fbc8:	4628      	mov	r0, r5
 801fbca:	b003      	add	sp, #12
 801fbcc:	bd30      	pop	{r4, r5, pc}
 801fbce:	220c      	movs	r2, #12
 801fbd0:	6002      	str	r2, [r0, #0]
 801fbd2:	2500      	movs	r5, #0
 801fbd4:	e7f8      	b.n	801fbc8 <_calloc_r+0x16>
 801fbd6:	4621      	mov	r1, r4
 801fbd8:	f7fc fb44 	bl	801c264 <memset>
 801fbdc:	e7f4      	b.n	801fbc8 <_calloc_r+0x16>

0801fbde <_realloc_r>:
 801fbde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fbe2:	4680      	mov	r8, r0
 801fbe4:	4614      	mov	r4, r2
 801fbe6:	460e      	mov	r6, r1
 801fbe8:	b921      	cbnz	r1, 801fbf4 <_realloc_r+0x16>
 801fbea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fbee:	4611      	mov	r1, r2
 801fbf0:	f7fc bbac 	b.w	801c34c <_malloc_r>
 801fbf4:	b92a      	cbnz	r2, 801fc02 <_realloc_r+0x24>
 801fbf6:	f7fc fb3d 	bl	801c274 <_free_r>
 801fbfa:	4625      	mov	r5, r4
 801fbfc:	4628      	mov	r0, r5
 801fbfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fc02:	f000 f9d5 	bl	801ffb0 <_malloc_usable_size_r>
 801fc06:	4284      	cmp	r4, r0
 801fc08:	4607      	mov	r7, r0
 801fc0a:	d802      	bhi.n	801fc12 <_realloc_r+0x34>
 801fc0c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801fc10:	d812      	bhi.n	801fc38 <_realloc_r+0x5a>
 801fc12:	4621      	mov	r1, r4
 801fc14:	4640      	mov	r0, r8
 801fc16:	f7fc fb99 	bl	801c34c <_malloc_r>
 801fc1a:	4605      	mov	r5, r0
 801fc1c:	2800      	cmp	r0, #0
 801fc1e:	d0ed      	beq.n	801fbfc <_realloc_r+0x1e>
 801fc20:	42bc      	cmp	r4, r7
 801fc22:	4622      	mov	r2, r4
 801fc24:	4631      	mov	r1, r6
 801fc26:	bf28      	it	cs
 801fc28:	463a      	movcs	r2, r7
 801fc2a:	f7fc faf3 	bl	801c214 <memcpy>
 801fc2e:	4631      	mov	r1, r6
 801fc30:	4640      	mov	r0, r8
 801fc32:	f7fc fb1f 	bl	801c274 <_free_r>
 801fc36:	e7e1      	b.n	801fbfc <_realloc_r+0x1e>
 801fc38:	4635      	mov	r5, r6
 801fc3a:	e7df      	b.n	801fbfc <_realloc_r+0x1e>

0801fc3c <__ssputs_r>:
 801fc3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fc40:	688e      	ldr	r6, [r1, #8]
 801fc42:	429e      	cmp	r6, r3
 801fc44:	4682      	mov	sl, r0
 801fc46:	460c      	mov	r4, r1
 801fc48:	4690      	mov	r8, r2
 801fc4a:	461f      	mov	r7, r3
 801fc4c:	d838      	bhi.n	801fcc0 <__ssputs_r+0x84>
 801fc4e:	898a      	ldrh	r2, [r1, #12]
 801fc50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801fc54:	d032      	beq.n	801fcbc <__ssputs_r+0x80>
 801fc56:	6825      	ldr	r5, [r4, #0]
 801fc58:	6909      	ldr	r1, [r1, #16]
 801fc5a:	eba5 0901 	sub.w	r9, r5, r1
 801fc5e:	6965      	ldr	r5, [r4, #20]
 801fc60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fc64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801fc68:	3301      	adds	r3, #1
 801fc6a:	444b      	add	r3, r9
 801fc6c:	106d      	asrs	r5, r5, #1
 801fc6e:	429d      	cmp	r5, r3
 801fc70:	bf38      	it	cc
 801fc72:	461d      	movcc	r5, r3
 801fc74:	0553      	lsls	r3, r2, #21
 801fc76:	d531      	bpl.n	801fcdc <__ssputs_r+0xa0>
 801fc78:	4629      	mov	r1, r5
 801fc7a:	f7fc fb67 	bl	801c34c <_malloc_r>
 801fc7e:	4606      	mov	r6, r0
 801fc80:	b950      	cbnz	r0, 801fc98 <__ssputs_r+0x5c>
 801fc82:	230c      	movs	r3, #12
 801fc84:	f8ca 3000 	str.w	r3, [sl]
 801fc88:	89a3      	ldrh	r3, [r4, #12]
 801fc8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fc8e:	81a3      	strh	r3, [r4, #12]
 801fc90:	f04f 30ff 	mov.w	r0, #4294967295
 801fc94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fc98:	6921      	ldr	r1, [r4, #16]
 801fc9a:	464a      	mov	r2, r9
 801fc9c:	f7fc faba 	bl	801c214 <memcpy>
 801fca0:	89a3      	ldrh	r3, [r4, #12]
 801fca2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801fca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fcaa:	81a3      	strh	r3, [r4, #12]
 801fcac:	6126      	str	r6, [r4, #16]
 801fcae:	6165      	str	r5, [r4, #20]
 801fcb0:	444e      	add	r6, r9
 801fcb2:	eba5 0509 	sub.w	r5, r5, r9
 801fcb6:	6026      	str	r6, [r4, #0]
 801fcb8:	60a5      	str	r5, [r4, #8]
 801fcba:	463e      	mov	r6, r7
 801fcbc:	42be      	cmp	r6, r7
 801fcbe:	d900      	bls.n	801fcc2 <__ssputs_r+0x86>
 801fcc0:	463e      	mov	r6, r7
 801fcc2:	6820      	ldr	r0, [r4, #0]
 801fcc4:	4632      	mov	r2, r6
 801fcc6:	4641      	mov	r1, r8
 801fcc8:	f7fc fab2 	bl	801c230 <memmove>
 801fccc:	68a3      	ldr	r3, [r4, #8]
 801fcce:	1b9b      	subs	r3, r3, r6
 801fcd0:	60a3      	str	r3, [r4, #8]
 801fcd2:	6823      	ldr	r3, [r4, #0]
 801fcd4:	4433      	add	r3, r6
 801fcd6:	6023      	str	r3, [r4, #0]
 801fcd8:	2000      	movs	r0, #0
 801fcda:	e7db      	b.n	801fc94 <__ssputs_r+0x58>
 801fcdc:	462a      	mov	r2, r5
 801fcde:	f7ff ff7e 	bl	801fbde <_realloc_r>
 801fce2:	4606      	mov	r6, r0
 801fce4:	2800      	cmp	r0, #0
 801fce6:	d1e1      	bne.n	801fcac <__ssputs_r+0x70>
 801fce8:	6921      	ldr	r1, [r4, #16]
 801fcea:	4650      	mov	r0, sl
 801fcec:	f7fc fac2 	bl	801c274 <_free_r>
 801fcf0:	e7c7      	b.n	801fc82 <__ssputs_r+0x46>
	...

0801fcf4 <_svfiprintf_r>:
 801fcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcf8:	4698      	mov	r8, r3
 801fcfa:	898b      	ldrh	r3, [r1, #12]
 801fcfc:	061b      	lsls	r3, r3, #24
 801fcfe:	b09d      	sub	sp, #116	; 0x74
 801fd00:	4607      	mov	r7, r0
 801fd02:	460d      	mov	r5, r1
 801fd04:	4614      	mov	r4, r2
 801fd06:	d50e      	bpl.n	801fd26 <_svfiprintf_r+0x32>
 801fd08:	690b      	ldr	r3, [r1, #16]
 801fd0a:	b963      	cbnz	r3, 801fd26 <_svfiprintf_r+0x32>
 801fd0c:	2140      	movs	r1, #64	; 0x40
 801fd0e:	f7fc fb1d 	bl	801c34c <_malloc_r>
 801fd12:	6028      	str	r0, [r5, #0]
 801fd14:	6128      	str	r0, [r5, #16]
 801fd16:	b920      	cbnz	r0, 801fd22 <_svfiprintf_r+0x2e>
 801fd18:	230c      	movs	r3, #12
 801fd1a:	603b      	str	r3, [r7, #0]
 801fd1c:	f04f 30ff 	mov.w	r0, #4294967295
 801fd20:	e0d1      	b.n	801fec6 <_svfiprintf_r+0x1d2>
 801fd22:	2340      	movs	r3, #64	; 0x40
 801fd24:	616b      	str	r3, [r5, #20]
 801fd26:	2300      	movs	r3, #0
 801fd28:	9309      	str	r3, [sp, #36]	; 0x24
 801fd2a:	2320      	movs	r3, #32
 801fd2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fd30:	f8cd 800c 	str.w	r8, [sp, #12]
 801fd34:	2330      	movs	r3, #48	; 0x30
 801fd36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801fee0 <_svfiprintf_r+0x1ec>
 801fd3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fd3e:	f04f 0901 	mov.w	r9, #1
 801fd42:	4623      	mov	r3, r4
 801fd44:	469a      	mov	sl, r3
 801fd46:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fd4a:	b10a      	cbz	r2, 801fd50 <_svfiprintf_r+0x5c>
 801fd4c:	2a25      	cmp	r2, #37	; 0x25
 801fd4e:	d1f9      	bne.n	801fd44 <_svfiprintf_r+0x50>
 801fd50:	ebba 0b04 	subs.w	fp, sl, r4
 801fd54:	d00b      	beq.n	801fd6e <_svfiprintf_r+0x7a>
 801fd56:	465b      	mov	r3, fp
 801fd58:	4622      	mov	r2, r4
 801fd5a:	4629      	mov	r1, r5
 801fd5c:	4638      	mov	r0, r7
 801fd5e:	f7ff ff6d 	bl	801fc3c <__ssputs_r>
 801fd62:	3001      	adds	r0, #1
 801fd64:	f000 80aa 	beq.w	801febc <_svfiprintf_r+0x1c8>
 801fd68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fd6a:	445a      	add	r2, fp
 801fd6c:	9209      	str	r2, [sp, #36]	; 0x24
 801fd6e:	f89a 3000 	ldrb.w	r3, [sl]
 801fd72:	2b00      	cmp	r3, #0
 801fd74:	f000 80a2 	beq.w	801febc <_svfiprintf_r+0x1c8>
 801fd78:	2300      	movs	r3, #0
 801fd7a:	f04f 32ff 	mov.w	r2, #4294967295
 801fd7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fd82:	f10a 0a01 	add.w	sl, sl, #1
 801fd86:	9304      	str	r3, [sp, #16]
 801fd88:	9307      	str	r3, [sp, #28]
 801fd8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fd8e:	931a      	str	r3, [sp, #104]	; 0x68
 801fd90:	4654      	mov	r4, sl
 801fd92:	2205      	movs	r2, #5
 801fd94:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fd98:	4851      	ldr	r0, [pc, #324]	; (801fee0 <_svfiprintf_r+0x1ec>)
 801fd9a:	f7e4 faa9 	bl	80042f0 <memchr>
 801fd9e:	9a04      	ldr	r2, [sp, #16]
 801fda0:	b9d8      	cbnz	r0, 801fdda <_svfiprintf_r+0xe6>
 801fda2:	06d0      	lsls	r0, r2, #27
 801fda4:	bf44      	itt	mi
 801fda6:	2320      	movmi	r3, #32
 801fda8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fdac:	0711      	lsls	r1, r2, #28
 801fdae:	bf44      	itt	mi
 801fdb0:	232b      	movmi	r3, #43	; 0x2b
 801fdb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fdb6:	f89a 3000 	ldrb.w	r3, [sl]
 801fdba:	2b2a      	cmp	r3, #42	; 0x2a
 801fdbc:	d015      	beq.n	801fdea <_svfiprintf_r+0xf6>
 801fdbe:	9a07      	ldr	r2, [sp, #28]
 801fdc0:	4654      	mov	r4, sl
 801fdc2:	2000      	movs	r0, #0
 801fdc4:	f04f 0c0a 	mov.w	ip, #10
 801fdc8:	4621      	mov	r1, r4
 801fdca:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fdce:	3b30      	subs	r3, #48	; 0x30
 801fdd0:	2b09      	cmp	r3, #9
 801fdd2:	d94e      	bls.n	801fe72 <_svfiprintf_r+0x17e>
 801fdd4:	b1b0      	cbz	r0, 801fe04 <_svfiprintf_r+0x110>
 801fdd6:	9207      	str	r2, [sp, #28]
 801fdd8:	e014      	b.n	801fe04 <_svfiprintf_r+0x110>
 801fdda:	eba0 0308 	sub.w	r3, r0, r8
 801fdde:	fa09 f303 	lsl.w	r3, r9, r3
 801fde2:	4313      	orrs	r3, r2
 801fde4:	9304      	str	r3, [sp, #16]
 801fde6:	46a2      	mov	sl, r4
 801fde8:	e7d2      	b.n	801fd90 <_svfiprintf_r+0x9c>
 801fdea:	9b03      	ldr	r3, [sp, #12]
 801fdec:	1d19      	adds	r1, r3, #4
 801fdee:	681b      	ldr	r3, [r3, #0]
 801fdf0:	9103      	str	r1, [sp, #12]
 801fdf2:	2b00      	cmp	r3, #0
 801fdf4:	bfbb      	ittet	lt
 801fdf6:	425b      	neglt	r3, r3
 801fdf8:	f042 0202 	orrlt.w	r2, r2, #2
 801fdfc:	9307      	strge	r3, [sp, #28]
 801fdfe:	9307      	strlt	r3, [sp, #28]
 801fe00:	bfb8      	it	lt
 801fe02:	9204      	strlt	r2, [sp, #16]
 801fe04:	7823      	ldrb	r3, [r4, #0]
 801fe06:	2b2e      	cmp	r3, #46	; 0x2e
 801fe08:	d10c      	bne.n	801fe24 <_svfiprintf_r+0x130>
 801fe0a:	7863      	ldrb	r3, [r4, #1]
 801fe0c:	2b2a      	cmp	r3, #42	; 0x2a
 801fe0e:	d135      	bne.n	801fe7c <_svfiprintf_r+0x188>
 801fe10:	9b03      	ldr	r3, [sp, #12]
 801fe12:	1d1a      	adds	r2, r3, #4
 801fe14:	681b      	ldr	r3, [r3, #0]
 801fe16:	9203      	str	r2, [sp, #12]
 801fe18:	2b00      	cmp	r3, #0
 801fe1a:	bfb8      	it	lt
 801fe1c:	f04f 33ff 	movlt.w	r3, #4294967295
 801fe20:	3402      	adds	r4, #2
 801fe22:	9305      	str	r3, [sp, #20]
 801fe24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801fef0 <_svfiprintf_r+0x1fc>
 801fe28:	7821      	ldrb	r1, [r4, #0]
 801fe2a:	2203      	movs	r2, #3
 801fe2c:	4650      	mov	r0, sl
 801fe2e:	f7e4 fa5f 	bl	80042f0 <memchr>
 801fe32:	b140      	cbz	r0, 801fe46 <_svfiprintf_r+0x152>
 801fe34:	2340      	movs	r3, #64	; 0x40
 801fe36:	eba0 000a 	sub.w	r0, r0, sl
 801fe3a:	fa03 f000 	lsl.w	r0, r3, r0
 801fe3e:	9b04      	ldr	r3, [sp, #16]
 801fe40:	4303      	orrs	r3, r0
 801fe42:	3401      	adds	r4, #1
 801fe44:	9304      	str	r3, [sp, #16]
 801fe46:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fe4a:	4826      	ldr	r0, [pc, #152]	; (801fee4 <_svfiprintf_r+0x1f0>)
 801fe4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fe50:	2206      	movs	r2, #6
 801fe52:	f7e4 fa4d 	bl	80042f0 <memchr>
 801fe56:	2800      	cmp	r0, #0
 801fe58:	d038      	beq.n	801fecc <_svfiprintf_r+0x1d8>
 801fe5a:	4b23      	ldr	r3, [pc, #140]	; (801fee8 <_svfiprintf_r+0x1f4>)
 801fe5c:	bb1b      	cbnz	r3, 801fea6 <_svfiprintf_r+0x1b2>
 801fe5e:	9b03      	ldr	r3, [sp, #12]
 801fe60:	3307      	adds	r3, #7
 801fe62:	f023 0307 	bic.w	r3, r3, #7
 801fe66:	3308      	adds	r3, #8
 801fe68:	9303      	str	r3, [sp, #12]
 801fe6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe6c:	4433      	add	r3, r6
 801fe6e:	9309      	str	r3, [sp, #36]	; 0x24
 801fe70:	e767      	b.n	801fd42 <_svfiprintf_r+0x4e>
 801fe72:	fb0c 3202 	mla	r2, ip, r2, r3
 801fe76:	460c      	mov	r4, r1
 801fe78:	2001      	movs	r0, #1
 801fe7a:	e7a5      	b.n	801fdc8 <_svfiprintf_r+0xd4>
 801fe7c:	2300      	movs	r3, #0
 801fe7e:	3401      	adds	r4, #1
 801fe80:	9305      	str	r3, [sp, #20]
 801fe82:	4619      	mov	r1, r3
 801fe84:	f04f 0c0a 	mov.w	ip, #10
 801fe88:	4620      	mov	r0, r4
 801fe8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fe8e:	3a30      	subs	r2, #48	; 0x30
 801fe90:	2a09      	cmp	r2, #9
 801fe92:	d903      	bls.n	801fe9c <_svfiprintf_r+0x1a8>
 801fe94:	2b00      	cmp	r3, #0
 801fe96:	d0c5      	beq.n	801fe24 <_svfiprintf_r+0x130>
 801fe98:	9105      	str	r1, [sp, #20]
 801fe9a:	e7c3      	b.n	801fe24 <_svfiprintf_r+0x130>
 801fe9c:	fb0c 2101 	mla	r1, ip, r1, r2
 801fea0:	4604      	mov	r4, r0
 801fea2:	2301      	movs	r3, #1
 801fea4:	e7f0      	b.n	801fe88 <_svfiprintf_r+0x194>
 801fea6:	ab03      	add	r3, sp, #12
 801fea8:	9300      	str	r3, [sp, #0]
 801feaa:	462a      	mov	r2, r5
 801feac:	4b0f      	ldr	r3, [pc, #60]	; (801feec <_svfiprintf_r+0x1f8>)
 801feae:	a904      	add	r1, sp, #16
 801feb0:	4638      	mov	r0, r7
 801feb2:	f7fc fb5f 	bl	801c574 <_printf_float>
 801feb6:	1c42      	adds	r2, r0, #1
 801feb8:	4606      	mov	r6, r0
 801feba:	d1d6      	bne.n	801fe6a <_svfiprintf_r+0x176>
 801febc:	89ab      	ldrh	r3, [r5, #12]
 801febe:	065b      	lsls	r3, r3, #25
 801fec0:	f53f af2c 	bmi.w	801fd1c <_svfiprintf_r+0x28>
 801fec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fec6:	b01d      	add	sp, #116	; 0x74
 801fec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fecc:	ab03      	add	r3, sp, #12
 801fece:	9300      	str	r3, [sp, #0]
 801fed0:	462a      	mov	r2, r5
 801fed2:	4b06      	ldr	r3, [pc, #24]	; (801feec <_svfiprintf_r+0x1f8>)
 801fed4:	a904      	add	r1, sp, #16
 801fed6:	4638      	mov	r0, r7
 801fed8:	f7fc fdf0 	bl	801cabc <_printf_i>
 801fedc:	e7eb      	b.n	801feb6 <_svfiprintf_r+0x1c2>
 801fede:	bf00      	nop
 801fee0:	08039844 	.word	0x08039844
 801fee4:	0803984e 	.word	0x0803984e
 801fee8:	0801c575 	.word	0x0801c575
 801feec:	0801fc3d 	.word	0x0801fc3d
 801fef0:	0803984a 	.word	0x0803984a

0801fef4 <_read_r>:
 801fef4:	b538      	push	{r3, r4, r5, lr}
 801fef6:	4d07      	ldr	r5, [pc, #28]	; (801ff14 <_read_r+0x20>)
 801fef8:	4604      	mov	r4, r0
 801fefa:	4608      	mov	r0, r1
 801fefc:	4611      	mov	r1, r2
 801fefe:	2200      	movs	r2, #0
 801ff00:	602a      	str	r2, [r5, #0]
 801ff02:	461a      	mov	r2, r3
 801ff04:	f7f5 fb7b 	bl	80155fe <_read>
 801ff08:	1c43      	adds	r3, r0, #1
 801ff0a:	d102      	bne.n	801ff12 <_read_r+0x1e>
 801ff0c:	682b      	ldr	r3, [r5, #0]
 801ff0e:	b103      	cbz	r3, 801ff12 <_read_r+0x1e>
 801ff10:	6023      	str	r3, [r4, #0]
 801ff12:	bd38      	pop	{r3, r4, r5, pc}
 801ff14:	20014248 	.word	0x20014248

0801ff18 <nan>:
 801ff18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ff20 <nan+0x8>
 801ff1c:	4770      	bx	lr
 801ff1e:	bf00      	nop
 801ff20:	00000000 	.word	0x00000000
 801ff24:	7ff80000 	.word	0x7ff80000

0801ff28 <nanf>:
 801ff28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ff30 <nanf+0x8>
 801ff2c:	4770      	bx	lr
 801ff2e:	bf00      	nop
 801ff30:	7fc00000 	.word	0x7fc00000

0801ff34 <__ascii_wctomb>:
 801ff34:	b149      	cbz	r1, 801ff4a <__ascii_wctomb+0x16>
 801ff36:	2aff      	cmp	r2, #255	; 0xff
 801ff38:	bf85      	ittet	hi
 801ff3a:	238a      	movhi	r3, #138	; 0x8a
 801ff3c:	6003      	strhi	r3, [r0, #0]
 801ff3e:	700a      	strbls	r2, [r1, #0]
 801ff40:	f04f 30ff 	movhi.w	r0, #4294967295
 801ff44:	bf98      	it	ls
 801ff46:	2001      	movls	r0, #1
 801ff48:	4770      	bx	lr
 801ff4a:	4608      	mov	r0, r1
 801ff4c:	4770      	bx	lr
	...

0801ff50 <__assert_func>:
 801ff50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ff52:	4614      	mov	r4, r2
 801ff54:	461a      	mov	r2, r3
 801ff56:	4b09      	ldr	r3, [pc, #36]	; (801ff7c <__assert_func+0x2c>)
 801ff58:	681b      	ldr	r3, [r3, #0]
 801ff5a:	4605      	mov	r5, r0
 801ff5c:	68d8      	ldr	r0, [r3, #12]
 801ff5e:	b14c      	cbz	r4, 801ff74 <__assert_func+0x24>
 801ff60:	4b07      	ldr	r3, [pc, #28]	; (801ff80 <__assert_func+0x30>)
 801ff62:	9100      	str	r1, [sp, #0]
 801ff64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ff68:	4906      	ldr	r1, [pc, #24]	; (801ff84 <__assert_func+0x34>)
 801ff6a:	462b      	mov	r3, r5
 801ff6c:	f000 f80e 	bl	801ff8c <fiprintf>
 801ff70:	f000 f980 	bl	8020274 <abort>
 801ff74:	4b04      	ldr	r3, [pc, #16]	; (801ff88 <__assert_func+0x38>)
 801ff76:	461c      	mov	r4, r3
 801ff78:	e7f3      	b.n	801ff62 <__assert_func+0x12>
 801ff7a:	bf00      	nop
 801ff7c:	200005fc 	.word	0x200005fc
 801ff80:	08039855 	.word	0x08039855
 801ff84:	08039862 	.word	0x08039862
 801ff88:	080255f0 	.word	0x080255f0

0801ff8c <fiprintf>:
 801ff8c:	b40e      	push	{r1, r2, r3}
 801ff8e:	b503      	push	{r0, r1, lr}
 801ff90:	4601      	mov	r1, r0
 801ff92:	ab03      	add	r3, sp, #12
 801ff94:	4805      	ldr	r0, [pc, #20]	; (801ffac <fiprintf+0x20>)
 801ff96:	f853 2b04 	ldr.w	r2, [r3], #4
 801ff9a:	6800      	ldr	r0, [r0, #0]
 801ff9c:	9301      	str	r3, [sp, #4]
 801ff9e:	f000 f839 	bl	8020014 <_vfiprintf_r>
 801ffa2:	b002      	add	sp, #8
 801ffa4:	f85d eb04 	ldr.w	lr, [sp], #4
 801ffa8:	b003      	add	sp, #12
 801ffaa:	4770      	bx	lr
 801ffac:	200005fc 	.word	0x200005fc

0801ffb0 <_malloc_usable_size_r>:
 801ffb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ffb4:	1f18      	subs	r0, r3, #4
 801ffb6:	2b00      	cmp	r3, #0
 801ffb8:	bfbc      	itt	lt
 801ffba:	580b      	ldrlt	r3, [r1, r0]
 801ffbc:	18c0      	addlt	r0, r0, r3
 801ffbe:	4770      	bx	lr

0801ffc0 <__sfputc_r>:
 801ffc0:	6893      	ldr	r3, [r2, #8]
 801ffc2:	3b01      	subs	r3, #1
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	b410      	push	{r4}
 801ffc8:	6093      	str	r3, [r2, #8]
 801ffca:	da08      	bge.n	801ffde <__sfputc_r+0x1e>
 801ffcc:	6994      	ldr	r4, [r2, #24]
 801ffce:	42a3      	cmp	r3, r4
 801ffd0:	db01      	blt.n	801ffd6 <__sfputc_r+0x16>
 801ffd2:	290a      	cmp	r1, #10
 801ffd4:	d103      	bne.n	801ffde <__sfputc_r+0x1e>
 801ffd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ffda:	f7fd be07 	b.w	801dbec <__swbuf_r>
 801ffde:	6813      	ldr	r3, [r2, #0]
 801ffe0:	1c58      	adds	r0, r3, #1
 801ffe2:	6010      	str	r0, [r2, #0]
 801ffe4:	7019      	strb	r1, [r3, #0]
 801ffe6:	4608      	mov	r0, r1
 801ffe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ffec:	4770      	bx	lr

0801ffee <__sfputs_r>:
 801ffee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fff0:	4606      	mov	r6, r0
 801fff2:	460f      	mov	r7, r1
 801fff4:	4614      	mov	r4, r2
 801fff6:	18d5      	adds	r5, r2, r3
 801fff8:	42ac      	cmp	r4, r5
 801fffa:	d101      	bne.n	8020000 <__sfputs_r+0x12>
 801fffc:	2000      	movs	r0, #0
 801fffe:	e007      	b.n	8020010 <__sfputs_r+0x22>
 8020000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020004:	463a      	mov	r2, r7
 8020006:	4630      	mov	r0, r6
 8020008:	f7ff ffda 	bl	801ffc0 <__sfputc_r>
 802000c:	1c43      	adds	r3, r0, #1
 802000e:	d1f3      	bne.n	801fff8 <__sfputs_r+0xa>
 8020010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020014 <_vfiprintf_r>:
 8020014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020018:	460d      	mov	r5, r1
 802001a:	b09d      	sub	sp, #116	; 0x74
 802001c:	4614      	mov	r4, r2
 802001e:	4698      	mov	r8, r3
 8020020:	4606      	mov	r6, r0
 8020022:	b118      	cbz	r0, 802002c <_vfiprintf_r+0x18>
 8020024:	6983      	ldr	r3, [r0, #24]
 8020026:	b90b      	cbnz	r3, 802002c <_vfiprintf_r+0x18>
 8020028:	f7fb ffba 	bl	801bfa0 <__sinit>
 802002c:	4b89      	ldr	r3, [pc, #548]	; (8020254 <_vfiprintf_r+0x240>)
 802002e:	429d      	cmp	r5, r3
 8020030:	d11b      	bne.n	802006a <_vfiprintf_r+0x56>
 8020032:	6875      	ldr	r5, [r6, #4]
 8020034:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020036:	07d9      	lsls	r1, r3, #31
 8020038:	d405      	bmi.n	8020046 <_vfiprintf_r+0x32>
 802003a:	89ab      	ldrh	r3, [r5, #12]
 802003c:	059a      	lsls	r2, r3, #22
 802003e:	d402      	bmi.n	8020046 <_vfiprintf_r+0x32>
 8020040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020042:	f7fc f870 	bl	801c126 <__retarget_lock_acquire_recursive>
 8020046:	89ab      	ldrh	r3, [r5, #12]
 8020048:	071b      	lsls	r3, r3, #28
 802004a:	d501      	bpl.n	8020050 <_vfiprintf_r+0x3c>
 802004c:	692b      	ldr	r3, [r5, #16]
 802004e:	b9eb      	cbnz	r3, 802008c <_vfiprintf_r+0x78>
 8020050:	4629      	mov	r1, r5
 8020052:	4630      	mov	r0, r6
 8020054:	f7fd fe2e 	bl	801dcb4 <__swsetup_r>
 8020058:	b1c0      	cbz	r0, 802008c <_vfiprintf_r+0x78>
 802005a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802005c:	07dc      	lsls	r4, r3, #31
 802005e:	d50e      	bpl.n	802007e <_vfiprintf_r+0x6a>
 8020060:	f04f 30ff 	mov.w	r0, #4294967295
 8020064:	b01d      	add	sp, #116	; 0x74
 8020066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802006a:	4b7b      	ldr	r3, [pc, #492]	; (8020258 <_vfiprintf_r+0x244>)
 802006c:	429d      	cmp	r5, r3
 802006e:	d101      	bne.n	8020074 <_vfiprintf_r+0x60>
 8020070:	68b5      	ldr	r5, [r6, #8]
 8020072:	e7df      	b.n	8020034 <_vfiprintf_r+0x20>
 8020074:	4b79      	ldr	r3, [pc, #484]	; (802025c <_vfiprintf_r+0x248>)
 8020076:	429d      	cmp	r5, r3
 8020078:	bf08      	it	eq
 802007a:	68f5      	ldreq	r5, [r6, #12]
 802007c:	e7da      	b.n	8020034 <_vfiprintf_r+0x20>
 802007e:	89ab      	ldrh	r3, [r5, #12]
 8020080:	0598      	lsls	r0, r3, #22
 8020082:	d4ed      	bmi.n	8020060 <_vfiprintf_r+0x4c>
 8020084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020086:	f7fc f84f 	bl	801c128 <__retarget_lock_release_recursive>
 802008a:	e7e9      	b.n	8020060 <_vfiprintf_r+0x4c>
 802008c:	2300      	movs	r3, #0
 802008e:	9309      	str	r3, [sp, #36]	; 0x24
 8020090:	2320      	movs	r3, #32
 8020092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020096:	f8cd 800c 	str.w	r8, [sp, #12]
 802009a:	2330      	movs	r3, #48	; 0x30
 802009c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020260 <_vfiprintf_r+0x24c>
 80200a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80200a4:	f04f 0901 	mov.w	r9, #1
 80200a8:	4623      	mov	r3, r4
 80200aa:	469a      	mov	sl, r3
 80200ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80200b0:	b10a      	cbz	r2, 80200b6 <_vfiprintf_r+0xa2>
 80200b2:	2a25      	cmp	r2, #37	; 0x25
 80200b4:	d1f9      	bne.n	80200aa <_vfiprintf_r+0x96>
 80200b6:	ebba 0b04 	subs.w	fp, sl, r4
 80200ba:	d00b      	beq.n	80200d4 <_vfiprintf_r+0xc0>
 80200bc:	465b      	mov	r3, fp
 80200be:	4622      	mov	r2, r4
 80200c0:	4629      	mov	r1, r5
 80200c2:	4630      	mov	r0, r6
 80200c4:	f7ff ff93 	bl	801ffee <__sfputs_r>
 80200c8:	3001      	adds	r0, #1
 80200ca:	f000 80aa 	beq.w	8020222 <_vfiprintf_r+0x20e>
 80200ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80200d0:	445a      	add	r2, fp
 80200d2:	9209      	str	r2, [sp, #36]	; 0x24
 80200d4:	f89a 3000 	ldrb.w	r3, [sl]
 80200d8:	2b00      	cmp	r3, #0
 80200da:	f000 80a2 	beq.w	8020222 <_vfiprintf_r+0x20e>
 80200de:	2300      	movs	r3, #0
 80200e0:	f04f 32ff 	mov.w	r2, #4294967295
 80200e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80200e8:	f10a 0a01 	add.w	sl, sl, #1
 80200ec:	9304      	str	r3, [sp, #16]
 80200ee:	9307      	str	r3, [sp, #28]
 80200f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80200f4:	931a      	str	r3, [sp, #104]	; 0x68
 80200f6:	4654      	mov	r4, sl
 80200f8:	2205      	movs	r2, #5
 80200fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80200fe:	4858      	ldr	r0, [pc, #352]	; (8020260 <_vfiprintf_r+0x24c>)
 8020100:	f7e4 f8f6 	bl	80042f0 <memchr>
 8020104:	9a04      	ldr	r2, [sp, #16]
 8020106:	b9d8      	cbnz	r0, 8020140 <_vfiprintf_r+0x12c>
 8020108:	06d1      	lsls	r1, r2, #27
 802010a:	bf44      	itt	mi
 802010c:	2320      	movmi	r3, #32
 802010e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020112:	0713      	lsls	r3, r2, #28
 8020114:	bf44      	itt	mi
 8020116:	232b      	movmi	r3, #43	; 0x2b
 8020118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802011c:	f89a 3000 	ldrb.w	r3, [sl]
 8020120:	2b2a      	cmp	r3, #42	; 0x2a
 8020122:	d015      	beq.n	8020150 <_vfiprintf_r+0x13c>
 8020124:	9a07      	ldr	r2, [sp, #28]
 8020126:	4654      	mov	r4, sl
 8020128:	2000      	movs	r0, #0
 802012a:	f04f 0c0a 	mov.w	ip, #10
 802012e:	4621      	mov	r1, r4
 8020130:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020134:	3b30      	subs	r3, #48	; 0x30
 8020136:	2b09      	cmp	r3, #9
 8020138:	d94e      	bls.n	80201d8 <_vfiprintf_r+0x1c4>
 802013a:	b1b0      	cbz	r0, 802016a <_vfiprintf_r+0x156>
 802013c:	9207      	str	r2, [sp, #28]
 802013e:	e014      	b.n	802016a <_vfiprintf_r+0x156>
 8020140:	eba0 0308 	sub.w	r3, r0, r8
 8020144:	fa09 f303 	lsl.w	r3, r9, r3
 8020148:	4313      	orrs	r3, r2
 802014a:	9304      	str	r3, [sp, #16]
 802014c:	46a2      	mov	sl, r4
 802014e:	e7d2      	b.n	80200f6 <_vfiprintf_r+0xe2>
 8020150:	9b03      	ldr	r3, [sp, #12]
 8020152:	1d19      	adds	r1, r3, #4
 8020154:	681b      	ldr	r3, [r3, #0]
 8020156:	9103      	str	r1, [sp, #12]
 8020158:	2b00      	cmp	r3, #0
 802015a:	bfbb      	ittet	lt
 802015c:	425b      	neglt	r3, r3
 802015e:	f042 0202 	orrlt.w	r2, r2, #2
 8020162:	9307      	strge	r3, [sp, #28]
 8020164:	9307      	strlt	r3, [sp, #28]
 8020166:	bfb8      	it	lt
 8020168:	9204      	strlt	r2, [sp, #16]
 802016a:	7823      	ldrb	r3, [r4, #0]
 802016c:	2b2e      	cmp	r3, #46	; 0x2e
 802016e:	d10c      	bne.n	802018a <_vfiprintf_r+0x176>
 8020170:	7863      	ldrb	r3, [r4, #1]
 8020172:	2b2a      	cmp	r3, #42	; 0x2a
 8020174:	d135      	bne.n	80201e2 <_vfiprintf_r+0x1ce>
 8020176:	9b03      	ldr	r3, [sp, #12]
 8020178:	1d1a      	adds	r2, r3, #4
 802017a:	681b      	ldr	r3, [r3, #0]
 802017c:	9203      	str	r2, [sp, #12]
 802017e:	2b00      	cmp	r3, #0
 8020180:	bfb8      	it	lt
 8020182:	f04f 33ff 	movlt.w	r3, #4294967295
 8020186:	3402      	adds	r4, #2
 8020188:	9305      	str	r3, [sp, #20]
 802018a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020270 <_vfiprintf_r+0x25c>
 802018e:	7821      	ldrb	r1, [r4, #0]
 8020190:	2203      	movs	r2, #3
 8020192:	4650      	mov	r0, sl
 8020194:	f7e4 f8ac 	bl	80042f0 <memchr>
 8020198:	b140      	cbz	r0, 80201ac <_vfiprintf_r+0x198>
 802019a:	2340      	movs	r3, #64	; 0x40
 802019c:	eba0 000a 	sub.w	r0, r0, sl
 80201a0:	fa03 f000 	lsl.w	r0, r3, r0
 80201a4:	9b04      	ldr	r3, [sp, #16]
 80201a6:	4303      	orrs	r3, r0
 80201a8:	3401      	adds	r4, #1
 80201aa:	9304      	str	r3, [sp, #16]
 80201ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80201b0:	482c      	ldr	r0, [pc, #176]	; (8020264 <_vfiprintf_r+0x250>)
 80201b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80201b6:	2206      	movs	r2, #6
 80201b8:	f7e4 f89a 	bl	80042f0 <memchr>
 80201bc:	2800      	cmp	r0, #0
 80201be:	d03f      	beq.n	8020240 <_vfiprintf_r+0x22c>
 80201c0:	4b29      	ldr	r3, [pc, #164]	; (8020268 <_vfiprintf_r+0x254>)
 80201c2:	bb1b      	cbnz	r3, 802020c <_vfiprintf_r+0x1f8>
 80201c4:	9b03      	ldr	r3, [sp, #12]
 80201c6:	3307      	adds	r3, #7
 80201c8:	f023 0307 	bic.w	r3, r3, #7
 80201cc:	3308      	adds	r3, #8
 80201ce:	9303      	str	r3, [sp, #12]
 80201d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80201d2:	443b      	add	r3, r7
 80201d4:	9309      	str	r3, [sp, #36]	; 0x24
 80201d6:	e767      	b.n	80200a8 <_vfiprintf_r+0x94>
 80201d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80201dc:	460c      	mov	r4, r1
 80201de:	2001      	movs	r0, #1
 80201e0:	e7a5      	b.n	802012e <_vfiprintf_r+0x11a>
 80201e2:	2300      	movs	r3, #0
 80201e4:	3401      	adds	r4, #1
 80201e6:	9305      	str	r3, [sp, #20]
 80201e8:	4619      	mov	r1, r3
 80201ea:	f04f 0c0a 	mov.w	ip, #10
 80201ee:	4620      	mov	r0, r4
 80201f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80201f4:	3a30      	subs	r2, #48	; 0x30
 80201f6:	2a09      	cmp	r2, #9
 80201f8:	d903      	bls.n	8020202 <_vfiprintf_r+0x1ee>
 80201fa:	2b00      	cmp	r3, #0
 80201fc:	d0c5      	beq.n	802018a <_vfiprintf_r+0x176>
 80201fe:	9105      	str	r1, [sp, #20]
 8020200:	e7c3      	b.n	802018a <_vfiprintf_r+0x176>
 8020202:	fb0c 2101 	mla	r1, ip, r1, r2
 8020206:	4604      	mov	r4, r0
 8020208:	2301      	movs	r3, #1
 802020a:	e7f0      	b.n	80201ee <_vfiprintf_r+0x1da>
 802020c:	ab03      	add	r3, sp, #12
 802020e:	9300      	str	r3, [sp, #0]
 8020210:	462a      	mov	r2, r5
 8020212:	4b16      	ldr	r3, [pc, #88]	; (802026c <_vfiprintf_r+0x258>)
 8020214:	a904      	add	r1, sp, #16
 8020216:	4630      	mov	r0, r6
 8020218:	f7fc f9ac 	bl	801c574 <_printf_float>
 802021c:	4607      	mov	r7, r0
 802021e:	1c78      	adds	r0, r7, #1
 8020220:	d1d6      	bne.n	80201d0 <_vfiprintf_r+0x1bc>
 8020222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020224:	07d9      	lsls	r1, r3, #31
 8020226:	d405      	bmi.n	8020234 <_vfiprintf_r+0x220>
 8020228:	89ab      	ldrh	r3, [r5, #12]
 802022a:	059a      	lsls	r2, r3, #22
 802022c:	d402      	bmi.n	8020234 <_vfiprintf_r+0x220>
 802022e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020230:	f7fb ff7a 	bl	801c128 <__retarget_lock_release_recursive>
 8020234:	89ab      	ldrh	r3, [r5, #12]
 8020236:	065b      	lsls	r3, r3, #25
 8020238:	f53f af12 	bmi.w	8020060 <_vfiprintf_r+0x4c>
 802023c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802023e:	e711      	b.n	8020064 <_vfiprintf_r+0x50>
 8020240:	ab03      	add	r3, sp, #12
 8020242:	9300      	str	r3, [sp, #0]
 8020244:	462a      	mov	r2, r5
 8020246:	4b09      	ldr	r3, [pc, #36]	; (802026c <_vfiprintf_r+0x258>)
 8020248:	a904      	add	r1, sp, #16
 802024a:	4630      	mov	r0, r6
 802024c:	f7fc fc36 	bl	801cabc <_printf_i>
 8020250:	e7e4      	b.n	802021c <_vfiprintf_r+0x208>
 8020252:	bf00      	nop
 8020254:	08039518 	.word	0x08039518
 8020258:	08039538 	.word	0x08039538
 802025c:	080394f8 	.word	0x080394f8
 8020260:	08039844 	.word	0x08039844
 8020264:	0803984e 	.word	0x0803984e
 8020268:	0801c575 	.word	0x0801c575
 802026c:	0801ffef 	.word	0x0801ffef
 8020270:	0803984a 	.word	0x0803984a

08020274 <abort>:
 8020274:	b508      	push	{r3, lr}
 8020276:	2006      	movs	r0, #6
 8020278:	f000 f82c 	bl	80202d4 <raise>
 802027c:	2001      	movs	r0, #1
 802027e:	f7f5 f9b8 	bl	80155f2 <_exit>

08020282 <_raise_r>:
 8020282:	291f      	cmp	r1, #31
 8020284:	b538      	push	{r3, r4, r5, lr}
 8020286:	4604      	mov	r4, r0
 8020288:	460d      	mov	r5, r1
 802028a:	d904      	bls.n	8020296 <_raise_r+0x14>
 802028c:	2316      	movs	r3, #22
 802028e:	6003      	str	r3, [r0, #0]
 8020290:	f04f 30ff 	mov.w	r0, #4294967295
 8020294:	bd38      	pop	{r3, r4, r5, pc}
 8020296:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020298:	b112      	cbz	r2, 80202a0 <_raise_r+0x1e>
 802029a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802029e:	b94b      	cbnz	r3, 80202b4 <_raise_r+0x32>
 80202a0:	4620      	mov	r0, r4
 80202a2:	f000 f831 	bl	8020308 <_getpid_r>
 80202a6:	462a      	mov	r2, r5
 80202a8:	4601      	mov	r1, r0
 80202aa:	4620      	mov	r0, r4
 80202ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80202b0:	f000 b818 	b.w	80202e4 <_kill_r>
 80202b4:	2b01      	cmp	r3, #1
 80202b6:	d00a      	beq.n	80202ce <_raise_r+0x4c>
 80202b8:	1c59      	adds	r1, r3, #1
 80202ba:	d103      	bne.n	80202c4 <_raise_r+0x42>
 80202bc:	2316      	movs	r3, #22
 80202be:	6003      	str	r3, [r0, #0]
 80202c0:	2001      	movs	r0, #1
 80202c2:	e7e7      	b.n	8020294 <_raise_r+0x12>
 80202c4:	2400      	movs	r4, #0
 80202c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80202ca:	4628      	mov	r0, r5
 80202cc:	4798      	blx	r3
 80202ce:	2000      	movs	r0, #0
 80202d0:	e7e0      	b.n	8020294 <_raise_r+0x12>
	...

080202d4 <raise>:
 80202d4:	4b02      	ldr	r3, [pc, #8]	; (80202e0 <raise+0xc>)
 80202d6:	4601      	mov	r1, r0
 80202d8:	6818      	ldr	r0, [r3, #0]
 80202da:	f7ff bfd2 	b.w	8020282 <_raise_r>
 80202de:	bf00      	nop
 80202e0:	200005fc 	.word	0x200005fc

080202e4 <_kill_r>:
 80202e4:	b538      	push	{r3, r4, r5, lr}
 80202e6:	4d07      	ldr	r5, [pc, #28]	; (8020304 <_kill_r+0x20>)
 80202e8:	2300      	movs	r3, #0
 80202ea:	4604      	mov	r4, r0
 80202ec:	4608      	mov	r0, r1
 80202ee:	4611      	mov	r1, r2
 80202f0:	602b      	str	r3, [r5, #0]
 80202f2:	f7f5 f976 	bl	80155e2 <_kill>
 80202f6:	1c43      	adds	r3, r0, #1
 80202f8:	d102      	bne.n	8020300 <_kill_r+0x1c>
 80202fa:	682b      	ldr	r3, [r5, #0]
 80202fc:	b103      	cbz	r3, 8020300 <_kill_r+0x1c>
 80202fe:	6023      	str	r3, [r4, #0]
 8020300:	bd38      	pop	{r3, r4, r5, pc}
 8020302:	bf00      	nop
 8020304:	20014248 	.word	0x20014248

08020308 <_getpid_r>:
 8020308:	f7f5 b969 	b.w	80155de <_getpid>
 802030c:	0000      	movs	r0, r0
	...

08020310 <exp>:
 8020310:	b538      	push	{r3, r4, r5, lr}
 8020312:	ed2d 8b02 	vpush	{d8}
 8020316:	ec55 4b10 	vmov	r4, r5, d0
 802031a:	f000 f8fd 	bl	8020518 <__ieee754_exp>
 802031e:	eeb0 8a40 	vmov.f32	s16, s0
 8020322:	eef0 8a60 	vmov.f32	s17, s1
 8020326:	ec45 4b10 	vmov	d0, r4, r5
 802032a:	f001 f8ed 	bl	8021508 <finite>
 802032e:	b168      	cbz	r0, 802034c <exp+0x3c>
 8020330:	a317      	add	r3, pc, #92	; (adr r3, 8020390 <exp+0x80>)
 8020332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020336:	4620      	mov	r0, r4
 8020338:	4629      	mov	r1, r5
 802033a:	f7e4 fc75 	bl	8004c28 <__aeabi_dcmpgt>
 802033e:	b160      	cbz	r0, 802035a <exp+0x4a>
 8020340:	f7fb fd0e 	bl	801bd60 <__errno>
 8020344:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8020380 <exp+0x70>
 8020348:	2322      	movs	r3, #34	; 0x22
 802034a:	6003      	str	r3, [r0, #0]
 802034c:	eeb0 0a48 	vmov.f32	s0, s16
 8020350:	eef0 0a68 	vmov.f32	s1, s17
 8020354:	ecbd 8b02 	vpop	{d8}
 8020358:	bd38      	pop	{r3, r4, r5, pc}
 802035a:	a30f      	add	r3, pc, #60	; (adr r3, 8020398 <exp+0x88>)
 802035c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020360:	4620      	mov	r0, r4
 8020362:	4629      	mov	r1, r5
 8020364:	f7e4 fc42 	bl	8004bec <__aeabi_dcmplt>
 8020368:	2800      	cmp	r0, #0
 802036a:	d0ef      	beq.n	802034c <exp+0x3c>
 802036c:	f7fb fcf8 	bl	801bd60 <__errno>
 8020370:	2322      	movs	r3, #34	; 0x22
 8020372:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8020388 <exp+0x78>
 8020376:	6003      	str	r3, [r0, #0]
 8020378:	e7e8      	b.n	802034c <exp+0x3c>
 802037a:	bf00      	nop
 802037c:	f3af 8000 	nop.w
 8020380:	00000000 	.word	0x00000000
 8020384:	7ff00000 	.word	0x7ff00000
	...
 8020390:	fefa39ef 	.word	0xfefa39ef
 8020394:	40862e42 	.word	0x40862e42
 8020398:	d52d3051 	.word	0xd52d3051
 802039c:	c0874910 	.word	0xc0874910

080203a0 <pow>:
 80203a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80203a2:	ed2d 8b02 	vpush	{d8}
 80203a6:	eeb0 8a40 	vmov.f32	s16, s0
 80203aa:	eef0 8a60 	vmov.f32	s17, s1
 80203ae:	ec55 4b11 	vmov	r4, r5, d1
 80203b2:	f000 fa35 	bl	8020820 <__ieee754_pow>
 80203b6:	4622      	mov	r2, r4
 80203b8:	462b      	mov	r3, r5
 80203ba:	4620      	mov	r0, r4
 80203bc:	4629      	mov	r1, r5
 80203be:	ec57 6b10 	vmov	r6, r7, d0
 80203c2:	f7e4 fc3b 	bl	8004c3c <__aeabi_dcmpun>
 80203c6:	2800      	cmp	r0, #0
 80203c8:	d13b      	bne.n	8020442 <pow+0xa2>
 80203ca:	ec51 0b18 	vmov	r0, r1, d8
 80203ce:	2200      	movs	r2, #0
 80203d0:	2300      	movs	r3, #0
 80203d2:	f7e4 fc01 	bl	8004bd8 <__aeabi_dcmpeq>
 80203d6:	b1b8      	cbz	r0, 8020408 <pow+0x68>
 80203d8:	2200      	movs	r2, #0
 80203da:	2300      	movs	r3, #0
 80203dc:	4620      	mov	r0, r4
 80203de:	4629      	mov	r1, r5
 80203e0:	f7e4 fbfa 	bl	8004bd8 <__aeabi_dcmpeq>
 80203e4:	2800      	cmp	r0, #0
 80203e6:	d146      	bne.n	8020476 <pow+0xd6>
 80203e8:	ec45 4b10 	vmov	d0, r4, r5
 80203ec:	f001 f88c 	bl	8021508 <finite>
 80203f0:	b338      	cbz	r0, 8020442 <pow+0xa2>
 80203f2:	2200      	movs	r2, #0
 80203f4:	2300      	movs	r3, #0
 80203f6:	4620      	mov	r0, r4
 80203f8:	4629      	mov	r1, r5
 80203fa:	f7e4 fbf7 	bl	8004bec <__aeabi_dcmplt>
 80203fe:	b300      	cbz	r0, 8020442 <pow+0xa2>
 8020400:	f7fb fcae 	bl	801bd60 <__errno>
 8020404:	2322      	movs	r3, #34	; 0x22
 8020406:	e01b      	b.n	8020440 <pow+0xa0>
 8020408:	ec47 6b10 	vmov	d0, r6, r7
 802040c:	f001 f87c 	bl	8021508 <finite>
 8020410:	b9e0      	cbnz	r0, 802044c <pow+0xac>
 8020412:	eeb0 0a48 	vmov.f32	s0, s16
 8020416:	eef0 0a68 	vmov.f32	s1, s17
 802041a:	f001 f875 	bl	8021508 <finite>
 802041e:	b1a8      	cbz	r0, 802044c <pow+0xac>
 8020420:	ec45 4b10 	vmov	d0, r4, r5
 8020424:	f001 f870 	bl	8021508 <finite>
 8020428:	b180      	cbz	r0, 802044c <pow+0xac>
 802042a:	4632      	mov	r2, r6
 802042c:	463b      	mov	r3, r7
 802042e:	4630      	mov	r0, r6
 8020430:	4639      	mov	r1, r7
 8020432:	f7e4 fc03 	bl	8004c3c <__aeabi_dcmpun>
 8020436:	2800      	cmp	r0, #0
 8020438:	d0e2      	beq.n	8020400 <pow+0x60>
 802043a:	f7fb fc91 	bl	801bd60 <__errno>
 802043e:	2321      	movs	r3, #33	; 0x21
 8020440:	6003      	str	r3, [r0, #0]
 8020442:	ecbd 8b02 	vpop	{d8}
 8020446:	ec47 6b10 	vmov	d0, r6, r7
 802044a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802044c:	2200      	movs	r2, #0
 802044e:	2300      	movs	r3, #0
 8020450:	4630      	mov	r0, r6
 8020452:	4639      	mov	r1, r7
 8020454:	f7e4 fbc0 	bl	8004bd8 <__aeabi_dcmpeq>
 8020458:	2800      	cmp	r0, #0
 802045a:	d0f2      	beq.n	8020442 <pow+0xa2>
 802045c:	eeb0 0a48 	vmov.f32	s0, s16
 8020460:	eef0 0a68 	vmov.f32	s1, s17
 8020464:	f001 f850 	bl	8021508 <finite>
 8020468:	2800      	cmp	r0, #0
 802046a:	d0ea      	beq.n	8020442 <pow+0xa2>
 802046c:	ec45 4b10 	vmov	d0, r4, r5
 8020470:	f001 f84a 	bl	8021508 <finite>
 8020474:	e7c3      	b.n	80203fe <pow+0x5e>
 8020476:	4f01      	ldr	r7, [pc, #4]	; (802047c <pow+0xdc>)
 8020478:	2600      	movs	r6, #0
 802047a:	e7e2      	b.n	8020442 <pow+0xa2>
 802047c:	3ff00000 	.word	0x3ff00000

08020480 <log10f>:
 8020480:	b508      	push	{r3, lr}
 8020482:	ed2d 8b02 	vpush	{d8}
 8020486:	eeb0 8a40 	vmov.f32	s16, s0
 802048a:	f000 ffa9 	bl	80213e0 <__ieee754_log10f>
 802048e:	eeb4 8a48 	vcmp.f32	s16, s16
 8020492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020496:	d60f      	bvs.n	80204b8 <log10f+0x38>
 8020498:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802049c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204a0:	d80a      	bhi.n	80204b8 <log10f+0x38>
 80204a2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80204a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204aa:	d108      	bne.n	80204be <log10f+0x3e>
 80204ac:	f7fb fc58 	bl	801bd60 <__errno>
 80204b0:	2322      	movs	r3, #34	; 0x22
 80204b2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80204d4 <log10f+0x54>
 80204b6:	6003      	str	r3, [r0, #0]
 80204b8:	ecbd 8b02 	vpop	{d8}
 80204bc:	bd08      	pop	{r3, pc}
 80204be:	f7fb fc4f 	bl	801bd60 <__errno>
 80204c2:	ecbd 8b02 	vpop	{d8}
 80204c6:	2321      	movs	r3, #33	; 0x21
 80204c8:	6003      	str	r3, [r0, #0]
 80204ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80204ce:	4802      	ldr	r0, [pc, #8]	; (80204d8 <log10f+0x58>)
 80204d0:	f7ff bd2a 	b.w	801ff28 <nanf>
 80204d4:	ff800000 	.word	0xff800000
 80204d8:	080255f0 	.word	0x080255f0

080204dc <sqrtf>:
 80204dc:	b508      	push	{r3, lr}
 80204de:	ed2d 8b02 	vpush	{d8}
 80204e2:	eeb0 8a40 	vmov.f32	s16, s0
 80204e6:	f000 ffd3 	bl	8021490 <__ieee754_sqrtf>
 80204ea:	eeb4 8a48 	vcmp.f32	s16, s16
 80204ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204f2:	d60c      	bvs.n	802050e <sqrtf+0x32>
 80204f4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8020514 <sqrtf+0x38>
 80204f8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80204fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020500:	d505      	bpl.n	802050e <sqrtf+0x32>
 8020502:	f7fb fc2d 	bl	801bd60 <__errno>
 8020506:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802050a:	2321      	movs	r3, #33	; 0x21
 802050c:	6003      	str	r3, [r0, #0]
 802050e:	ecbd 8b02 	vpop	{d8}
 8020512:	bd08      	pop	{r3, pc}
 8020514:	00000000 	.word	0x00000000

08020518 <__ieee754_exp>:
 8020518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802051c:	ec55 4b10 	vmov	r4, r5, d0
 8020520:	49b5      	ldr	r1, [pc, #724]	; (80207f8 <__ieee754_exp+0x2e0>)
 8020522:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8020526:	428b      	cmp	r3, r1
 8020528:	ed2d 8b04 	vpush	{d8-d9}
 802052c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8020530:	d93d      	bls.n	80205ae <__ieee754_exp+0x96>
 8020532:	49b2      	ldr	r1, [pc, #712]	; (80207fc <__ieee754_exp+0x2e4>)
 8020534:	428b      	cmp	r3, r1
 8020536:	d918      	bls.n	802056a <__ieee754_exp+0x52>
 8020538:	ee10 3a10 	vmov	r3, s0
 802053c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8020540:	4313      	orrs	r3, r2
 8020542:	d009      	beq.n	8020558 <__ieee754_exp+0x40>
 8020544:	ee10 2a10 	vmov	r2, s0
 8020548:	462b      	mov	r3, r5
 802054a:	4620      	mov	r0, r4
 802054c:	4629      	mov	r1, r5
 802054e:	f7e3 ff25 	bl	800439c <__adddf3>
 8020552:	4604      	mov	r4, r0
 8020554:	460d      	mov	r5, r1
 8020556:	e002      	b.n	802055e <__ieee754_exp+0x46>
 8020558:	b10e      	cbz	r6, 802055e <__ieee754_exp+0x46>
 802055a:	2400      	movs	r4, #0
 802055c:	2500      	movs	r5, #0
 802055e:	ecbd 8b04 	vpop	{d8-d9}
 8020562:	ec45 4b10 	vmov	d0, r4, r5
 8020566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802056a:	a38d      	add	r3, pc, #564	; (adr r3, 80207a0 <__ieee754_exp+0x288>)
 802056c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020570:	ee10 0a10 	vmov	r0, s0
 8020574:	4629      	mov	r1, r5
 8020576:	f7e4 fb57 	bl	8004c28 <__aeabi_dcmpgt>
 802057a:	4607      	mov	r7, r0
 802057c:	b130      	cbz	r0, 802058c <__ieee754_exp+0x74>
 802057e:	ecbd 8b04 	vpop	{d8-d9}
 8020582:	2000      	movs	r0, #0
 8020584:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020588:	f000 bfac 	b.w	80214e4 <__math_oflow>
 802058c:	a386      	add	r3, pc, #536	; (adr r3, 80207a8 <__ieee754_exp+0x290>)
 802058e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020592:	4620      	mov	r0, r4
 8020594:	4629      	mov	r1, r5
 8020596:	f7e4 fb29 	bl	8004bec <__aeabi_dcmplt>
 802059a:	2800      	cmp	r0, #0
 802059c:	f000 808b 	beq.w	80206b6 <__ieee754_exp+0x19e>
 80205a0:	ecbd 8b04 	vpop	{d8-d9}
 80205a4:	4638      	mov	r0, r7
 80205a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80205aa:	f000 bf92 	b.w	80214d2 <__math_uflow>
 80205ae:	4a94      	ldr	r2, [pc, #592]	; (8020800 <__ieee754_exp+0x2e8>)
 80205b0:	4293      	cmp	r3, r2
 80205b2:	f240 80ac 	bls.w	802070e <__ieee754_exp+0x1f6>
 80205b6:	4a93      	ldr	r2, [pc, #588]	; (8020804 <__ieee754_exp+0x2ec>)
 80205b8:	4293      	cmp	r3, r2
 80205ba:	d87c      	bhi.n	80206b6 <__ieee754_exp+0x19e>
 80205bc:	4b92      	ldr	r3, [pc, #584]	; (8020808 <__ieee754_exp+0x2f0>)
 80205be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80205c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205c6:	ee10 0a10 	vmov	r0, s0
 80205ca:	4629      	mov	r1, r5
 80205cc:	f7e3 fee4 	bl	8004398 <__aeabi_dsub>
 80205d0:	4b8e      	ldr	r3, [pc, #568]	; (802080c <__ieee754_exp+0x2f4>)
 80205d2:	00f7      	lsls	r7, r6, #3
 80205d4:	443b      	add	r3, r7
 80205d6:	ed93 7b00 	vldr	d7, [r3]
 80205da:	f1c6 0a01 	rsb	sl, r6, #1
 80205de:	4680      	mov	r8, r0
 80205e0:	4689      	mov	r9, r1
 80205e2:	ebaa 0a06 	sub.w	sl, sl, r6
 80205e6:	eeb0 8a47 	vmov.f32	s16, s14
 80205ea:	eef0 8a67 	vmov.f32	s17, s15
 80205ee:	ec53 2b18 	vmov	r2, r3, d8
 80205f2:	4640      	mov	r0, r8
 80205f4:	4649      	mov	r1, r9
 80205f6:	f7e3 fecf 	bl	8004398 <__aeabi_dsub>
 80205fa:	4604      	mov	r4, r0
 80205fc:	460d      	mov	r5, r1
 80205fe:	4622      	mov	r2, r4
 8020600:	462b      	mov	r3, r5
 8020602:	4620      	mov	r0, r4
 8020604:	4629      	mov	r1, r5
 8020606:	f7e4 f87f 	bl	8004708 <__aeabi_dmul>
 802060a:	a369      	add	r3, pc, #420	; (adr r3, 80207b0 <__ieee754_exp+0x298>)
 802060c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020610:	4606      	mov	r6, r0
 8020612:	460f      	mov	r7, r1
 8020614:	f7e4 f878 	bl	8004708 <__aeabi_dmul>
 8020618:	a367      	add	r3, pc, #412	; (adr r3, 80207b8 <__ieee754_exp+0x2a0>)
 802061a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802061e:	f7e3 febb 	bl	8004398 <__aeabi_dsub>
 8020622:	4632      	mov	r2, r6
 8020624:	463b      	mov	r3, r7
 8020626:	f7e4 f86f 	bl	8004708 <__aeabi_dmul>
 802062a:	a365      	add	r3, pc, #404	; (adr r3, 80207c0 <__ieee754_exp+0x2a8>)
 802062c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020630:	f7e3 feb4 	bl	800439c <__adddf3>
 8020634:	4632      	mov	r2, r6
 8020636:	463b      	mov	r3, r7
 8020638:	f7e4 f866 	bl	8004708 <__aeabi_dmul>
 802063c:	a362      	add	r3, pc, #392	; (adr r3, 80207c8 <__ieee754_exp+0x2b0>)
 802063e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020642:	f7e3 fea9 	bl	8004398 <__aeabi_dsub>
 8020646:	4632      	mov	r2, r6
 8020648:	463b      	mov	r3, r7
 802064a:	f7e4 f85d 	bl	8004708 <__aeabi_dmul>
 802064e:	a360      	add	r3, pc, #384	; (adr r3, 80207d0 <__ieee754_exp+0x2b8>)
 8020650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020654:	f7e3 fea2 	bl	800439c <__adddf3>
 8020658:	4632      	mov	r2, r6
 802065a:	463b      	mov	r3, r7
 802065c:	f7e4 f854 	bl	8004708 <__aeabi_dmul>
 8020660:	4602      	mov	r2, r0
 8020662:	460b      	mov	r3, r1
 8020664:	4620      	mov	r0, r4
 8020666:	4629      	mov	r1, r5
 8020668:	f7e3 fe96 	bl	8004398 <__aeabi_dsub>
 802066c:	4602      	mov	r2, r0
 802066e:	460b      	mov	r3, r1
 8020670:	4606      	mov	r6, r0
 8020672:	460f      	mov	r7, r1
 8020674:	4620      	mov	r0, r4
 8020676:	4629      	mov	r1, r5
 8020678:	f7e4 f846 	bl	8004708 <__aeabi_dmul>
 802067c:	ec41 0b19 	vmov	d9, r0, r1
 8020680:	f1ba 0f00 	cmp.w	sl, #0
 8020684:	d15d      	bne.n	8020742 <__ieee754_exp+0x22a>
 8020686:	2200      	movs	r2, #0
 8020688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802068c:	4630      	mov	r0, r6
 802068e:	4639      	mov	r1, r7
 8020690:	f7e3 fe82 	bl	8004398 <__aeabi_dsub>
 8020694:	4602      	mov	r2, r0
 8020696:	460b      	mov	r3, r1
 8020698:	ec51 0b19 	vmov	r0, r1, d9
 802069c:	f7e4 f95e 	bl	800495c <__aeabi_ddiv>
 80206a0:	4622      	mov	r2, r4
 80206a2:	462b      	mov	r3, r5
 80206a4:	f7e3 fe78 	bl	8004398 <__aeabi_dsub>
 80206a8:	4602      	mov	r2, r0
 80206aa:	460b      	mov	r3, r1
 80206ac:	2000      	movs	r0, #0
 80206ae:	4958      	ldr	r1, [pc, #352]	; (8020810 <__ieee754_exp+0x2f8>)
 80206b0:	f7e3 fe72 	bl	8004398 <__aeabi_dsub>
 80206b4:	e74d      	b.n	8020552 <__ieee754_exp+0x3a>
 80206b6:	4857      	ldr	r0, [pc, #348]	; (8020814 <__ieee754_exp+0x2fc>)
 80206b8:	a347      	add	r3, pc, #284	; (adr r3, 80207d8 <__ieee754_exp+0x2c0>)
 80206ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206be:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80206c2:	4629      	mov	r1, r5
 80206c4:	4620      	mov	r0, r4
 80206c6:	f7e4 f81f 	bl	8004708 <__aeabi_dmul>
 80206ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 80206ce:	f7e3 fe65 	bl	800439c <__adddf3>
 80206d2:	f7e4 fac9 	bl	8004c68 <__aeabi_d2iz>
 80206d6:	4682      	mov	sl, r0
 80206d8:	f7e3 ffac 	bl	8004634 <__aeabi_i2d>
 80206dc:	a340      	add	r3, pc, #256	; (adr r3, 80207e0 <__ieee754_exp+0x2c8>)
 80206de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206e2:	4606      	mov	r6, r0
 80206e4:	460f      	mov	r7, r1
 80206e6:	f7e4 f80f 	bl	8004708 <__aeabi_dmul>
 80206ea:	4602      	mov	r2, r0
 80206ec:	460b      	mov	r3, r1
 80206ee:	4620      	mov	r0, r4
 80206f0:	4629      	mov	r1, r5
 80206f2:	f7e3 fe51 	bl	8004398 <__aeabi_dsub>
 80206f6:	a33c      	add	r3, pc, #240	; (adr r3, 80207e8 <__ieee754_exp+0x2d0>)
 80206f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206fc:	4680      	mov	r8, r0
 80206fe:	4689      	mov	r9, r1
 8020700:	4630      	mov	r0, r6
 8020702:	4639      	mov	r1, r7
 8020704:	f7e4 f800 	bl	8004708 <__aeabi_dmul>
 8020708:	ec41 0b18 	vmov	d8, r0, r1
 802070c:	e76f      	b.n	80205ee <__ieee754_exp+0xd6>
 802070e:	4a42      	ldr	r2, [pc, #264]	; (8020818 <__ieee754_exp+0x300>)
 8020710:	4293      	cmp	r3, r2
 8020712:	d811      	bhi.n	8020738 <__ieee754_exp+0x220>
 8020714:	a336      	add	r3, pc, #216	; (adr r3, 80207f0 <__ieee754_exp+0x2d8>)
 8020716:	e9d3 2300 	ldrd	r2, r3, [r3]
 802071a:	ee10 0a10 	vmov	r0, s0
 802071e:	4629      	mov	r1, r5
 8020720:	f7e3 fe3c 	bl	800439c <__adddf3>
 8020724:	4b3a      	ldr	r3, [pc, #232]	; (8020810 <__ieee754_exp+0x2f8>)
 8020726:	2200      	movs	r2, #0
 8020728:	f7e4 fa7e 	bl	8004c28 <__aeabi_dcmpgt>
 802072c:	b138      	cbz	r0, 802073e <__ieee754_exp+0x226>
 802072e:	4b38      	ldr	r3, [pc, #224]	; (8020810 <__ieee754_exp+0x2f8>)
 8020730:	2200      	movs	r2, #0
 8020732:	4620      	mov	r0, r4
 8020734:	4629      	mov	r1, r5
 8020736:	e70a      	b.n	802054e <__ieee754_exp+0x36>
 8020738:	f04f 0a00 	mov.w	sl, #0
 802073c:	e75f      	b.n	80205fe <__ieee754_exp+0xe6>
 802073e:	4682      	mov	sl, r0
 8020740:	e75d      	b.n	80205fe <__ieee754_exp+0xe6>
 8020742:	4632      	mov	r2, r6
 8020744:	463b      	mov	r3, r7
 8020746:	2000      	movs	r0, #0
 8020748:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 802074c:	f7e3 fe24 	bl	8004398 <__aeabi_dsub>
 8020750:	4602      	mov	r2, r0
 8020752:	460b      	mov	r3, r1
 8020754:	ec51 0b19 	vmov	r0, r1, d9
 8020758:	f7e4 f900 	bl	800495c <__aeabi_ddiv>
 802075c:	4602      	mov	r2, r0
 802075e:	460b      	mov	r3, r1
 8020760:	ec51 0b18 	vmov	r0, r1, d8
 8020764:	f7e3 fe18 	bl	8004398 <__aeabi_dsub>
 8020768:	4642      	mov	r2, r8
 802076a:	464b      	mov	r3, r9
 802076c:	f7e3 fe14 	bl	8004398 <__aeabi_dsub>
 8020770:	4602      	mov	r2, r0
 8020772:	460b      	mov	r3, r1
 8020774:	2000      	movs	r0, #0
 8020776:	4926      	ldr	r1, [pc, #152]	; (8020810 <__ieee754_exp+0x2f8>)
 8020778:	f7e3 fe0e 	bl	8004398 <__aeabi_dsub>
 802077c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8020780:	4592      	cmp	sl, r2
 8020782:	db02      	blt.n	802078a <__ieee754_exp+0x272>
 8020784:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8020788:	e6e3      	b.n	8020552 <__ieee754_exp+0x3a>
 802078a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 802078e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8020792:	2200      	movs	r2, #0
 8020794:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8020798:	f7e3 ffb6 	bl	8004708 <__aeabi_dmul>
 802079c:	e6d9      	b.n	8020552 <__ieee754_exp+0x3a>
 802079e:	bf00      	nop
 80207a0:	fefa39ef 	.word	0xfefa39ef
 80207a4:	40862e42 	.word	0x40862e42
 80207a8:	d52d3051 	.word	0xd52d3051
 80207ac:	c0874910 	.word	0xc0874910
 80207b0:	72bea4d0 	.word	0x72bea4d0
 80207b4:	3e663769 	.word	0x3e663769
 80207b8:	c5d26bf1 	.word	0xc5d26bf1
 80207bc:	3ebbbd41 	.word	0x3ebbbd41
 80207c0:	af25de2c 	.word	0xaf25de2c
 80207c4:	3f11566a 	.word	0x3f11566a
 80207c8:	16bebd93 	.word	0x16bebd93
 80207cc:	3f66c16c 	.word	0x3f66c16c
 80207d0:	5555553e 	.word	0x5555553e
 80207d4:	3fc55555 	.word	0x3fc55555
 80207d8:	652b82fe 	.word	0x652b82fe
 80207dc:	3ff71547 	.word	0x3ff71547
 80207e0:	fee00000 	.word	0xfee00000
 80207e4:	3fe62e42 	.word	0x3fe62e42
 80207e8:	35793c76 	.word	0x35793c76
 80207ec:	3dea39ef 	.word	0x3dea39ef
 80207f0:	8800759c 	.word	0x8800759c
 80207f4:	7e37e43c 	.word	0x7e37e43c
 80207f8:	40862e41 	.word	0x40862e41
 80207fc:	7fefffff 	.word	0x7fefffff
 8020800:	3fd62e42 	.word	0x3fd62e42
 8020804:	3ff0a2b1 	.word	0x3ff0a2b1
 8020808:	080398a8 	.word	0x080398a8
 802080c:	080398b8 	.word	0x080398b8
 8020810:	3ff00000 	.word	0x3ff00000
 8020814:	08039898 	.word	0x08039898
 8020818:	3defffff 	.word	0x3defffff
 802081c:	00000000 	.word	0x00000000

08020820 <__ieee754_pow>:
 8020820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020824:	ed2d 8b06 	vpush	{d8-d10}
 8020828:	b089      	sub	sp, #36	; 0x24
 802082a:	ed8d 1b00 	vstr	d1, [sp]
 802082e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8020832:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8020836:	ea58 0102 	orrs.w	r1, r8, r2
 802083a:	ec57 6b10 	vmov	r6, r7, d0
 802083e:	d115      	bne.n	802086c <__ieee754_pow+0x4c>
 8020840:	19b3      	adds	r3, r6, r6
 8020842:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8020846:	4152      	adcs	r2, r2
 8020848:	4299      	cmp	r1, r3
 802084a:	4b89      	ldr	r3, [pc, #548]	; (8020a70 <__ieee754_pow+0x250>)
 802084c:	4193      	sbcs	r3, r2
 802084e:	f080 84d2 	bcs.w	80211f6 <__ieee754_pow+0x9d6>
 8020852:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020856:	4630      	mov	r0, r6
 8020858:	4639      	mov	r1, r7
 802085a:	f7e3 fd9f 	bl	800439c <__adddf3>
 802085e:	ec41 0b10 	vmov	d0, r0, r1
 8020862:	b009      	add	sp, #36	; 0x24
 8020864:	ecbd 8b06 	vpop	{d8-d10}
 8020868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802086c:	4b81      	ldr	r3, [pc, #516]	; (8020a74 <__ieee754_pow+0x254>)
 802086e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8020872:	429c      	cmp	r4, r3
 8020874:	ee10 aa10 	vmov	sl, s0
 8020878:	463d      	mov	r5, r7
 802087a:	dc06      	bgt.n	802088a <__ieee754_pow+0x6a>
 802087c:	d101      	bne.n	8020882 <__ieee754_pow+0x62>
 802087e:	2e00      	cmp	r6, #0
 8020880:	d1e7      	bne.n	8020852 <__ieee754_pow+0x32>
 8020882:	4598      	cmp	r8, r3
 8020884:	dc01      	bgt.n	802088a <__ieee754_pow+0x6a>
 8020886:	d10f      	bne.n	80208a8 <__ieee754_pow+0x88>
 8020888:	b172      	cbz	r2, 80208a8 <__ieee754_pow+0x88>
 802088a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 802088e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8020892:	ea55 050a 	orrs.w	r5, r5, sl
 8020896:	d1dc      	bne.n	8020852 <__ieee754_pow+0x32>
 8020898:	e9dd 3200 	ldrd	r3, r2, [sp]
 802089c:	18db      	adds	r3, r3, r3
 802089e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80208a2:	4152      	adcs	r2, r2
 80208a4:	429d      	cmp	r5, r3
 80208a6:	e7d0      	b.n	802084a <__ieee754_pow+0x2a>
 80208a8:	2d00      	cmp	r5, #0
 80208aa:	da3b      	bge.n	8020924 <__ieee754_pow+0x104>
 80208ac:	4b72      	ldr	r3, [pc, #456]	; (8020a78 <__ieee754_pow+0x258>)
 80208ae:	4598      	cmp	r8, r3
 80208b0:	dc51      	bgt.n	8020956 <__ieee754_pow+0x136>
 80208b2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80208b6:	4598      	cmp	r8, r3
 80208b8:	f340 84ac 	ble.w	8021214 <__ieee754_pow+0x9f4>
 80208bc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80208c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80208c4:	2b14      	cmp	r3, #20
 80208c6:	dd0f      	ble.n	80208e8 <__ieee754_pow+0xc8>
 80208c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80208cc:	fa22 f103 	lsr.w	r1, r2, r3
 80208d0:	fa01 f303 	lsl.w	r3, r1, r3
 80208d4:	4293      	cmp	r3, r2
 80208d6:	f040 849d 	bne.w	8021214 <__ieee754_pow+0x9f4>
 80208da:	f001 0101 	and.w	r1, r1, #1
 80208de:	f1c1 0302 	rsb	r3, r1, #2
 80208e2:	9304      	str	r3, [sp, #16]
 80208e4:	b182      	cbz	r2, 8020908 <__ieee754_pow+0xe8>
 80208e6:	e05f      	b.n	80209a8 <__ieee754_pow+0x188>
 80208e8:	2a00      	cmp	r2, #0
 80208ea:	d15b      	bne.n	80209a4 <__ieee754_pow+0x184>
 80208ec:	f1c3 0314 	rsb	r3, r3, #20
 80208f0:	fa48 f103 	asr.w	r1, r8, r3
 80208f4:	fa01 f303 	lsl.w	r3, r1, r3
 80208f8:	4543      	cmp	r3, r8
 80208fa:	f040 8488 	bne.w	802120e <__ieee754_pow+0x9ee>
 80208fe:	f001 0101 	and.w	r1, r1, #1
 8020902:	f1c1 0302 	rsb	r3, r1, #2
 8020906:	9304      	str	r3, [sp, #16]
 8020908:	4b5c      	ldr	r3, [pc, #368]	; (8020a7c <__ieee754_pow+0x25c>)
 802090a:	4598      	cmp	r8, r3
 802090c:	d132      	bne.n	8020974 <__ieee754_pow+0x154>
 802090e:	f1b9 0f00 	cmp.w	r9, #0
 8020912:	f280 8478 	bge.w	8021206 <__ieee754_pow+0x9e6>
 8020916:	4959      	ldr	r1, [pc, #356]	; (8020a7c <__ieee754_pow+0x25c>)
 8020918:	4632      	mov	r2, r6
 802091a:	463b      	mov	r3, r7
 802091c:	2000      	movs	r0, #0
 802091e:	f7e4 f81d 	bl	800495c <__aeabi_ddiv>
 8020922:	e79c      	b.n	802085e <__ieee754_pow+0x3e>
 8020924:	2300      	movs	r3, #0
 8020926:	9304      	str	r3, [sp, #16]
 8020928:	2a00      	cmp	r2, #0
 802092a:	d13d      	bne.n	80209a8 <__ieee754_pow+0x188>
 802092c:	4b51      	ldr	r3, [pc, #324]	; (8020a74 <__ieee754_pow+0x254>)
 802092e:	4598      	cmp	r8, r3
 8020930:	d1ea      	bne.n	8020908 <__ieee754_pow+0xe8>
 8020932:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8020936:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802093a:	ea53 030a 	orrs.w	r3, r3, sl
 802093e:	f000 845a 	beq.w	80211f6 <__ieee754_pow+0x9d6>
 8020942:	4b4f      	ldr	r3, [pc, #316]	; (8020a80 <__ieee754_pow+0x260>)
 8020944:	429c      	cmp	r4, r3
 8020946:	dd08      	ble.n	802095a <__ieee754_pow+0x13a>
 8020948:	f1b9 0f00 	cmp.w	r9, #0
 802094c:	f2c0 8457 	blt.w	80211fe <__ieee754_pow+0x9de>
 8020950:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020954:	e783      	b.n	802085e <__ieee754_pow+0x3e>
 8020956:	2302      	movs	r3, #2
 8020958:	e7e5      	b.n	8020926 <__ieee754_pow+0x106>
 802095a:	f1b9 0f00 	cmp.w	r9, #0
 802095e:	f04f 0000 	mov.w	r0, #0
 8020962:	f04f 0100 	mov.w	r1, #0
 8020966:	f6bf af7a 	bge.w	802085e <__ieee754_pow+0x3e>
 802096a:	e9dd 0300 	ldrd	r0, r3, [sp]
 802096e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8020972:	e774      	b.n	802085e <__ieee754_pow+0x3e>
 8020974:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8020978:	d106      	bne.n	8020988 <__ieee754_pow+0x168>
 802097a:	4632      	mov	r2, r6
 802097c:	463b      	mov	r3, r7
 802097e:	4630      	mov	r0, r6
 8020980:	4639      	mov	r1, r7
 8020982:	f7e3 fec1 	bl	8004708 <__aeabi_dmul>
 8020986:	e76a      	b.n	802085e <__ieee754_pow+0x3e>
 8020988:	4b3e      	ldr	r3, [pc, #248]	; (8020a84 <__ieee754_pow+0x264>)
 802098a:	4599      	cmp	r9, r3
 802098c:	d10c      	bne.n	80209a8 <__ieee754_pow+0x188>
 802098e:	2d00      	cmp	r5, #0
 8020990:	db0a      	blt.n	80209a8 <__ieee754_pow+0x188>
 8020992:	ec47 6b10 	vmov	d0, r6, r7
 8020996:	b009      	add	sp, #36	; 0x24
 8020998:	ecbd 8b06 	vpop	{d8-d10}
 802099c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209a0:	f000 bc6c 	b.w	802127c <__ieee754_sqrt>
 80209a4:	2300      	movs	r3, #0
 80209a6:	9304      	str	r3, [sp, #16]
 80209a8:	ec47 6b10 	vmov	d0, r6, r7
 80209ac:	f000 fda3 	bl	80214f6 <fabs>
 80209b0:	ec51 0b10 	vmov	r0, r1, d0
 80209b4:	f1ba 0f00 	cmp.w	sl, #0
 80209b8:	d129      	bne.n	8020a0e <__ieee754_pow+0x1ee>
 80209ba:	b124      	cbz	r4, 80209c6 <__ieee754_pow+0x1a6>
 80209bc:	4b2f      	ldr	r3, [pc, #188]	; (8020a7c <__ieee754_pow+0x25c>)
 80209be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80209c2:	429a      	cmp	r2, r3
 80209c4:	d123      	bne.n	8020a0e <__ieee754_pow+0x1ee>
 80209c6:	f1b9 0f00 	cmp.w	r9, #0
 80209ca:	da05      	bge.n	80209d8 <__ieee754_pow+0x1b8>
 80209cc:	4602      	mov	r2, r0
 80209ce:	460b      	mov	r3, r1
 80209d0:	2000      	movs	r0, #0
 80209d2:	492a      	ldr	r1, [pc, #168]	; (8020a7c <__ieee754_pow+0x25c>)
 80209d4:	f7e3 ffc2 	bl	800495c <__aeabi_ddiv>
 80209d8:	2d00      	cmp	r5, #0
 80209da:	f6bf af40 	bge.w	802085e <__ieee754_pow+0x3e>
 80209de:	9b04      	ldr	r3, [sp, #16]
 80209e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80209e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80209e8:	4323      	orrs	r3, r4
 80209ea:	d108      	bne.n	80209fe <__ieee754_pow+0x1de>
 80209ec:	4602      	mov	r2, r0
 80209ee:	460b      	mov	r3, r1
 80209f0:	4610      	mov	r0, r2
 80209f2:	4619      	mov	r1, r3
 80209f4:	f7e3 fcd0 	bl	8004398 <__aeabi_dsub>
 80209f8:	4602      	mov	r2, r0
 80209fa:	460b      	mov	r3, r1
 80209fc:	e78f      	b.n	802091e <__ieee754_pow+0xfe>
 80209fe:	9b04      	ldr	r3, [sp, #16]
 8020a00:	2b01      	cmp	r3, #1
 8020a02:	f47f af2c 	bne.w	802085e <__ieee754_pow+0x3e>
 8020a06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020a0a:	4619      	mov	r1, r3
 8020a0c:	e727      	b.n	802085e <__ieee754_pow+0x3e>
 8020a0e:	0feb      	lsrs	r3, r5, #31
 8020a10:	3b01      	subs	r3, #1
 8020a12:	9306      	str	r3, [sp, #24]
 8020a14:	9a06      	ldr	r2, [sp, #24]
 8020a16:	9b04      	ldr	r3, [sp, #16]
 8020a18:	4313      	orrs	r3, r2
 8020a1a:	d102      	bne.n	8020a22 <__ieee754_pow+0x202>
 8020a1c:	4632      	mov	r2, r6
 8020a1e:	463b      	mov	r3, r7
 8020a20:	e7e6      	b.n	80209f0 <__ieee754_pow+0x1d0>
 8020a22:	4b19      	ldr	r3, [pc, #100]	; (8020a88 <__ieee754_pow+0x268>)
 8020a24:	4598      	cmp	r8, r3
 8020a26:	f340 80fb 	ble.w	8020c20 <__ieee754_pow+0x400>
 8020a2a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8020a2e:	4598      	cmp	r8, r3
 8020a30:	4b13      	ldr	r3, [pc, #76]	; (8020a80 <__ieee754_pow+0x260>)
 8020a32:	dd0c      	ble.n	8020a4e <__ieee754_pow+0x22e>
 8020a34:	429c      	cmp	r4, r3
 8020a36:	dc0f      	bgt.n	8020a58 <__ieee754_pow+0x238>
 8020a38:	f1b9 0f00 	cmp.w	r9, #0
 8020a3c:	da0f      	bge.n	8020a5e <__ieee754_pow+0x23e>
 8020a3e:	2000      	movs	r0, #0
 8020a40:	b009      	add	sp, #36	; 0x24
 8020a42:	ecbd 8b06 	vpop	{d8-d10}
 8020a46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a4a:	f000 bd4b 	b.w	80214e4 <__math_oflow>
 8020a4e:	429c      	cmp	r4, r3
 8020a50:	dbf2      	blt.n	8020a38 <__ieee754_pow+0x218>
 8020a52:	4b0a      	ldr	r3, [pc, #40]	; (8020a7c <__ieee754_pow+0x25c>)
 8020a54:	429c      	cmp	r4, r3
 8020a56:	dd19      	ble.n	8020a8c <__ieee754_pow+0x26c>
 8020a58:	f1b9 0f00 	cmp.w	r9, #0
 8020a5c:	dcef      	bgt.n	8020a3e <__ieee754_pow+0x21e>
 8020a5e:	2000      	movs	r0, #0
 8020a60:	b009      	add	sp, #36	; 0x24
 8020a62:	ecbd 8b06 	vpop	{d8-d10}
 8020a66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a6a:	f000 bd32 	b.w	80214d2 <__math_uflow>
 8020a6e:	bf00      	nop
 8020a70:	fff00000 	.word	0xfff00000
 8020a74:	7ff00000 	.word	0x7ff00000
 8020a78:	433fffff 	.word	0x433fffff
 8020a7c:	3ff00000 	.word	0x3ff00000
 8020a80:	3fefffff 	.word	0x3fefffff
 8020a84:	3fe00000 	.word	0x3fe00000
 8020a88:	41e00000 	.word	0x41e00000
 8020a8c:	4b60      	ldr	r3, [pc, #384]	; (8020c10 <__ieee754_pow+0x3f0>)
 8020a8e:	2200      	movs	r2, #0
 8020a90:	f7e3 fc82 	bl	8004398 <__aeabi_dsub>
 8020a94:	a354      	add	r3, pc, #336	; (adr r3, 8020be8 <__ieee754_pow+0x3c8>)
 8020a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a9a:	4604      	mov	r4, r0
 8020a9c:	460d      	mov	r5, r1
 8020a9e:	f7e3 fe33 	bl	8004708 <__aeabi_dmul>
 8020aa2:	a353      	add	r3, pc, #332	; (adr r3, 8020bf0 <__ieee754_pow+0x3d0>)
 8020aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020aa8:	4606      	mov	r6, r0
 8020aaa:	460f      	mov	r7, r1
 8020aac:	4620      	mov	r0, r4
 8020aae:	4629      	mov	r1, r5
 8020ab0:	f7e3 fe2a 	bl	8004708 <__aeabi_dmul>
 8020ab4:	4b57      	ldr	r3, [pc, #348]	; (8020c14 <__ieee754_pow+0x3f4>)
 8020ab6:	4682      	mov	sl, r0
 8020ab8:	468b      	mov	fp, r1
 8020aba:	2200      	movs	r2, #0
 8020abc:	4620      	mov	r0, r4
 8020abe:	4629      	mov	r1, r5
 8020ac0:	f7e3 fe22 	bl	8004708 <__aeabi_dmul>
 8020ac4:	4602      	mov	r2, r0
 8020ac6:	460b      	mov	r3, r1
 8020ac8:	a14b      	add	r1, pc, #300	; (adr r1, 8020bf8 <__ieee754_pow+0x3d8>)
 8020aca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020ace:	f7e3 fc63 	bl	8004398 <__aeabi_dsub>
 8020ad2:	4622      	mov	r2, r4
 8020ad4:	462b      	mov	r3, r5
 8020ad6:	f7e3 fe17 	bl	8004708 <__aeabi_dmul>
 8020ada:	4602      	mov	r2, r0
 8020adc:	460b      	mov	r3, r1
 8020ade:	2000      	movs	r0, #0
 8020ae0:	494d      	ldr	r1, [pc, #308]	; (8020c18 <__ieee754_pow+0x3f8>)
 8020ae2:	f7e3 fc59 	bl	8004398 <__aeabi_dsub>
 8020ae6:	4622      	mov	r2, r4
 8020ae8:	4680      	mov	r8, r0
 8020aea:	4689      	mov	r9, r1
 8020aec:	462b      	mov	r3, r5
 8020aee:	4620      	mov	r0, r4
 8020af0:	4629      	mov	r1, r5
 8020af2:	f7e3 fe09 	bl	8004708 <__aeabi_dmul>
 8020af6:	4602      	mov	r2, r0
 8020af8:	460b      	mov	r3, r1
 8020afa:	4640      	mov	r0, r8
 8020afc:	4649      	mov	r1, r9
 8020afe:	f7e3 fe03 	bl	8004708 <__aeabi_dmul>
 8020b02:	a33f      	add	r3, pc, #252	; (adr r3, 8020c00 <__ieee754_pow+0x3e0>)
 8020b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b08:	f7e3 fdfe 	bl	8004708 <__aeabi_dmul>
 8020b0c:	4602      	mov	r2, r0
 8020b0e:	460b      	mov	r3, r1
 8020b10:	4650      	mov	r0, sl
 8020b12:	4659      	mov	r1, fp
 8020b14:	f7e3 fc40 	bl	8004398 <__aeabi_dsub>
 8020b18:	4602      	mov	r2, r0
 8020b1a:	460b      	mov	r3, r1
 8020b1c:	4680      	mov	r8, r0
 8020b1e:	4689      	mov	r9, r1
 8020b20:	4630      	mov	r0, r6
 8020b22:	4639      	mov	r1, r7
 8020b24:	f7e3 fc3a 	bl	800439c <__adddf3>
 8020b28:	2000      	movs	r0, #0
 8020b2a:	4632      	mov	r2, r6
 8020b2c:	463b      	mov	r3, r7
 8020b2e:	4604      	mov	r4, r0
 8020b30:	460d      	mov	r5, r1
 8020b32:	f7e3 fc31 	bl	8004398 <__aeabi_dsub>
 8020b36:	4602      	mov	r2, r0
 8020b38:	460b      	mov	r3, r1
 8020b3a:	4640      	mov	r0, r8
 8020b3c:	4649      	mov	r1, r9
 8020b3e:	f7e3 fc2b 	bl	8004398 <__aeabi_dsub>
 8020b42:	9b04      	ldr	r3, [sp, #16]
 8020b44:	9a06      	ldr	r2, [sp, #24]
 8020b46:	3b01      	subs	r3, #1
 8020b48:	4313      	orrs	r3, r2
 8020b4a:	4682      	mov	sl, r0
 8020b4c:	468b      	mov	fp, r1
 8020b4e:	f040 81e7 	bne.w	8020f20 <__ieee754_pow+0x700>
 8020b52:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8020c08 <__ieee754_pow+0x3e8>
 8020b56:	eeb0 8a47 	vmov.f32	s16, s14
 8020b5a:	eef0 8a67 	vmov.f32	s17, s15
 8020b5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8020b62:	2600      	movs	r6, #0
 8020b64:	4632      	mov	r2, r6
 8020b66:	463b      	mov	r3, r7
 8020b68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020b6c:	f7e3 fc14 	bl	8004398 <__aeabi_dsub>
 8020b70:	4622      	mov	r2, r4
 8020b72:	462b      	mov	r3, r5
 8020b74:	f7e3 fdc8 	bl	8004708 <__aeabi_dmul>
 8020b78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020b7c:	4680      	mov	r8, r0
 8020b7e:	4689      	mov	r9, r1
 8020b80:	4650      	mov	r0, sl
 8020b82:	4659      	mov	r1, fp
 8020b84:	f7e3 fdc0 	bl	8004708 <__aeabi_dmul>
 8020b88:	4602      	mov	r2, r0
 8020b8a:	460b      	mov	r3, r1
 8020b8c:	4640      	mov	r0, r8
 8020b8e:	4649      	mov	r1, r9
 8020b90:	f7e3 fc04 	bl	800439c <__adddf3>
 8020b94:	4632      	mov	r2, r6
 8020b96:	463b      	mov	r3, r7
 8020b98:	4680      	mov	r8, r0
 8020b9a:	4689      	mov	r9, r1
 8020b9c:	4620      	mov	r0, r4
 8020b9e:	4629      	mov	r1, r5
 8020ba0:	f7e3 fdb2 	bl	8004708 <__aeabi_dmul>
 8020ba4:	460b      	mov	r3, r1
 8020ba6:	4604      	mov	r4, r0
 8020ba8:	460d      	mov	r5, r1
 8020baa:	4602      	mov	r2, r0
 8020bac:	4649      	mov	r1, r9
 8020bae:	4640      	mov	r0, r8
 8020bb0:	f7e3 fbf4 	bl	800439c <__adddf3>
 8020bb4:	4b19      	ldr	r3, [pc, #100]	; (8020c1c <__ieee754_pow+0x3fc>)
 8020bb6:	4299      	cmp	r1, r3
 8020bb8:	ec45 4b19 	vmov	d9, r4, r5
 8020bbc:	4606      	mov	r6, r0
 8020bbe:	460f      	mov	r7, r1
 8020bc0:	468b      	mov	fp, r1
 8020bc2:	f340 82f1 	ble.w	80211a8 <__ieee754_pow+0x988>
 8020bc6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8020bca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8020bce:	4303      	orrs	r3, r0
 8020bd0:	f000 81e4 	beq.w	8020f9c <__ieee754_pow+0x77c>
 8020bd4:	ec51 0b18 	vmov	r0, r1, d8
 8020bd8:	2200      	movs	r2, #0
 8020bda:	2300      	movs	r3, #0
 8020bdc:	f7e4 f806 	bl	8004bec <__aeabi_dcmplt>
 8020be0:	3800      	subs	r0, #0
 8020be2:	bf18      	it	ne
 8020be4:	2001      	movne	r0, #1
 8020be6:	e72b      	b.n	8020a40 <__ieee754_pow+0x220>
 8020be8:	60000000 	.word	0x60000000
 8020bec:	3ff71547 	.word	0x3ff71547
 8020bf0:	f85ddf44 	.word	0xf85ddf44
 8020bf4:	3e54ae0b 	.word	0x3e54ae0b
 8020bf8:	55555555 	.word	0x55555555
 8020bfc:	3fd55555 	.word	0x3fd55555
 8020c00:	652b82fe 	.word	0x652b82fe
 8020c04:	3ff71547 	.word	0x3ff71547
 8020c08:	00000000 	.word	0x00000000
 8020c0c:	bff00000 	.word	0xbff00000
 8020c10:	3ff00000 	.word	0x3ff00000
 8020c14:	3fd00000 	.word	0x3fd00000
 8020c18:	3fe00000 	.word	0x3fe00000
 8020c1c:	408fffff 	.word	0x408fffff
 8020c20:	4bd5      	ldr	r3, [pc, #852]	; (8020f78 <__ieee754_pow+0x758>)
 8020c22:	402b      	ands	r3, r5
 8020c24:	2200      	movs	r2, #0
 8020c26:	b92b      	cbnz	r3, 8020c34 <__ieee754_pow+0x414>
 8020c28:	4bd4      	ldr	r3, [pc, #848]	; (8020f7c <__ieee754_pow+0x75c>)
 8020c2a:	f7e3 fd6d 	bl	8004708 <__aeabi_dmul>
 8020c2e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8020c32:	460c      	mov	r4, r1
 8020c34:	1523      	asrs	r3, r4, #20
 8020c36:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020c3a:	4413      	add	r3, r2
 8020c3c:	9305      	str	r3, [sp, #20]
 8020c3e:	4bd0      	ldr	r3, [pc, #832]	; (8020f80 <__ieee754_pow+0x760>)
 8020c40:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8020c44:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8020c48:	429c      	cmp	r4, r3
 8020c4a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8020c4e:	dd08      	ble.n	8020c62 <__ieee754_pow+0x442>
 8020c50:	4bcc      	ldr	r3, [pc, #816]	; (8020f84 <__ieee754_pow+0x764>)
 8020c52:	429c      	cmp	r4, r3
 8020c54:	f340 8162 	ble.w	8020f1c <__ieee754_pow+0x6fc>
 8020c58:	9b05      	ldr	r3, [sp, #20]
 8020c5a:	3301      	adds	r3, #1
 8020c5c:	9305      	str	r3, [sp, #20]
 8020c5e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8020c62:	2400      	movs	r4, #0
 8020c64:	00e3      	lsls	r3, r4, #3
 8020c66:	9307      	str	r3, [sp, #28]
 8020c68:	4bc7      	ldr	r3, [pc, #796]	; (8020f88 <__ieee754_pow+0x768>)
 8020c6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020c6e:	ed93 7b00 	vldr	d7, [r3]
 8020c72:	4629      	mov	r1, r5
 8020c74:	ec53 2b17 	vmov	r2, r3, d7
 8020c78:	eeb0 9a47 	vmov.f32	s18, s14
 8020c7c:	eef0 9a67 	vmov.f32	s19, s15
 8020c80:	4682      	mov	sl, r0
 8020c82:	f7e3 fb89 	bl	8004398 <__aeabi_dsub>
 8020c86:	4652      	mov	r2, sl
 8020c88:	4606      	mov	r6, r0
 8020c8a:	460f      	mov	r7, r1
 8020c8c:	462b      	mov	r3, r5
 8020c8e:	ec51 0b19 	vmov	r0, r1, d9
 8020c92:	f7e3 fb83 	bl	800439c <__adddf3>
 8020c96:	4602      	mov	r2, r0
 8020c98:	460b      	mov	r3, r1
 8020c9a:	2000      	movs	r0, #0
 8020c9c:	49bb      	ldr	r1, [pc, #748]	; (8020f8c <__ieee754_pow+0x76c>)
 8020c9e:	f7e3 fe5d 	bl	800495c <__aeabi_ddiv>
 8020ca2:	ec41 0b1a 	vmov	d10, r0, r1
 8020ca6:	4602      	mov	r2, r0
 8020ca8:	460b      	mov	r3, r1
 8020caa:	4630      	mov	r0, r6
 8020cac:	4639      	mov	r1, r7
 8020cae:	f7e3 fd2b 	bl	8004708 <__aeabi_dmul>
 8020cb2:	2300      	movs	r3, #0
 8020cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020cb8:	9302      	str	r3, [sp, #8]
 8020cba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8020cbe:	46ab      	mov	fp, r5
 8020cc0:	106d      	asrs	r5, r5, #1
 8020cc2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8020cc6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8020cca:	ec41 0b18 	vmov	d8, r0, r1
 8020cce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8020cd2:	2200      	movs	r2, #0
 8020cd4:	4640      	mov	r0, r8
 8020cd6:	4649      	mov	r1, r9
 8020cd8:	4614      	mov	r4, r2
 8020cda:	461d      	mov	r5, r3
 8020cdc:	f7e3 fd14 	bl	8004708 <__aeabi_dmul>
 8020ce0:	4602      	mov	r2, r0
 8020ce2:	460b      	mov	r3, r1
 8020ce4:	4630      	mov	r0, r6
 8020ce6:	4639      	mov	r1, r7
 8020ce8:	f7e3 fb56 	bl	8004398 <__aeabi_dsub>
 8020cec:	ec53 2b19 	vmov	r2, r3, d9
 8020cf0:	4606      	mov	r6, r0
 8020cf2:	460f      	mov	r7, r1
 8020cf4:	4620      	mov	r0, r4
 8020cf6:	4629      	mov	r1, r5
 8020cf8:	f7e3 fb4e 	bl	8004398 <__aeabi_dsub>
 8020cfc:	4602      	mov	r2, r0
 8020cfe:	460b      	mov	r3, r1
 8020d00:	4650      	mov	r0, sl
 8020d02:	4659      	mov	r1, fp
 8020d04:	f7e3 fb48 	bl	8004398 <__aeabi_dsub>
 8020d08:	4642      	mov	r2, r8
 8020d0a:	464b      	mov	r3, r9
 8020d0c:	f7e3 fcfc 	bl	8004708 <__aeabi_dmul>
 8020d10:	4602      	mov	r2, r0
 8020d12:	460b      	mov	r3, r1
 8020d14:	4630      	mov	r0, r6
 8020d16:	4639      	mov	r1, r7
 8020d18:	f7e3 fb3e 	bl	8004398 <__aeabi_dsub>
 8020d1c:	ec53 2b1a 	vmov	r2, r3, d10
 8020d20:	f7e3 fcf2 	bl	8004708 <__aeabi_dmul>
 8020d24:	ec53 2b18 	vmov	r2, r3, d8
 8020d28:	ec41 0b19 	vmov	d9, r0, r1
 8020d2c:	ec51 0b18 	vmov	r0, r1, d8
 8020d30:	f7e3 fcea 	bl	8004708 <__aeabi_dmul>
 8020d34:	a37c      	add	r3, pc, #496	; (adr r3, 8020f28 <__ieee754_pow+0x708>)
 8020d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d3a:	4604      	mov	r4, r0
 8020d3c:	460d      	mov	r5, r1
 8020d3e:	f7e3 fce3 	bl	8004708 <__aeabi_dmul>
 8020d42:	a37b      	add	r3, pc, #492	; (adr r3, 8020f30 <__ieee754_pow+0x710>)
 8020d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d48:	f7e3 fb28 	bl	800439c <__adddf3>
 8020d4c:	4622      	mov	r2, r4
 8020d4e:	462b      	mov	r3, r5
 8020d50:	f7e3 fcda 	bl	8004708 <__aeabi_dmul>
 8020d54:	a378      	add	r3, pc, #480	; (adr r3, 8020f38 <__ieee754_pow+0x718>)
 8020d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d5a:	f7e3 fb1f 	bl	800439c <__adddf3>
 8020d5e:	4622      	mov	r2, r4
 8020d60:	462b      	mov	r3, r5
 8020d62:	f7e3 fcd1 	bl	8004708 <__aeabi_dmul>
 8020d66:	a376      	add	r3, pc, #472	; (adr r3, 8020f40 <__ieee754_pow+0x720>)
 8020d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d6c:	f7e3 fb16 	bl	800439c <__adddf3>
 8020d70:	4622      	mov	r2, r4
 8020d72:	462b      	mov	r3, r5
 8020d74:	f7e3 fcc8 	bl	8004708 <__aeabi_dmul>
 8020d78:	a373      	add	r3, pc, #460	; (adr r3, 8020f48 <__ieee754_pow+0x728>)
 8020d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d7e:	f7e3 fb0d 	bl	800439c <__adddf3>
 8020d82:	4622      	mov	r2, r4
 8020d84:	462b      	mov	r3, r5
 8020d86:	f7e3 fcbf 	bl	8004708 <__aeabi_dmul>
 8020d8a:	a371      	add	r3, pc, #452	; (adr r3, 8020f50 <__ieee754_pow+0x730>)
 8020d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d90:	f7e3 fb04 	bl	800439c <__adddf3>
 8020d94:	4622      	mov	r2, r4
 8020d96:	4606      	mov	r6, r0
 8020d98:	460f      	mov	r7, r1
 8020d9a:	462b      	mov	r3, r5
 8020d9c:	4620      	mov	r0, r4
 8020d9e:	4629      	mov	r1, r5
 8020da0:	f7e3 fcb2 	bl	8004708 <__aeabi_dmul>
 8020da4:	4602      	mov	r2, r0
 8020da6:	460b      	mov	r3, r1
 8020da8:	4630      	mov	r0, r6
 8020daa:	4639      	mov	r1, r7
 8020dac:	f7e3 fcac 	bl	8004708 <__aeabi_dmul>
 8020db0:	4642      	mov	r2, r8
 8020db2:	4604      	mov	r4, r0
 8020db4:	460d      	mov	r5, r1
 8020db6:	464b      	mov	r3, r9
 8020db8:	ec51 0b18 	vmov	r0, r1, d8
 8020dbc:	f7e3 faee 	bl	800439c <__adddf3>
 8020dc0:	ec53 2b19 	vmov	r2, r3, d9
 8020dc4:	f7e3 fca0 	bl	8004708 <__aeabi_dmul>
 8020dc8:	4622      	mov	r2, r4
 8020dca:	462b      	mov	r3, r5
 8020dcc:	f7e3 fae6 	bl	800439c <__adddf3>
 8020dd0:	4642      	mov	r2, r8
 8020dd2:	4682      	mov	sl, r0
 8020dd4:	468b      	mov	fp, r1
 8020dd6:	464b      	mov	r3, r9
 8020dd8:	4640      	mov	r0, r8
 8020dda:	4649      	mov	r1, r9
 8020ddc:	f7e3 fc94 	bl	8004708 <__aeabi_dmul>
 8020de0:	4b6b      	ldr	r3, [pc, #428]	; (8020f90 <__ieee754_pow+0x770>)
 8020de2:	2200      	movs	r2, #0
 8020de4:	4606      	mov	r6, r0
 8020de6:	460f      	mov	r7, r1
 8020de8:	f7e3 fad8 	bl	800439c <__adddf3>
 8020dec:	4652      	mov	r2, sl
 8020dee:	465b      	mov	r3, fp
 8020df0:	f7e3 fad4 	bl	800439c <__adddf3>
 8020df4:	2000      	movs	r0, #0
 8020df6:	4604      	mov	r4, r0
 8020df8:	460d      	mov	r5, r1
 8020dfa:	4602      	mov	r2, r0
 8020dfc:	460b      	mov	r3, r1
 8020dfe:	4640      	mov	r0, r8
 8020e00:	4649      	mov	r1, r9
 8020e02:	f7e3 fc81 	bl	8004708 <__aeabi_dmul>
 8020e06:	4b62      	ldr	r3, [pc, #392]	; (8020f90 <__ieee754_pow+0x770>)
 8020e08:	4680      	mov	r8, r0
 8020e0a:	4689      	mov	r9, r1
 8020e0c:	2200      	movs	r2, #0
 8020e0e:	4620      	mov	r0, r4
 8020e10:	4629      	mov	r1, r5
 8020e12:	f7e3 fac1 	bl	8004398 <__aeabi_dsub>
 8020e16:	4632      	mov	r2, r6
 8020e18:	463b      	mov	r3, r7
 8020e1a:	f7e3 fabd 	bl	8004398 <__aeabi_dsub>
 8020e1e:	4602      	mov	r2, r0
 8020e20:	460b      	mov	r3, r1
 8020e22:	4650      	mov	r0, sl
 8020e24:	4659      	mov	r1, fp
 8020e26:	f7e3 fab7 	bl	8004398 <__aeabi_dsub>
 8020e2a:	ec53 2b18 	vmov	r2, r3, d8
 8020e2e:	f7e3 fc6b 	bl	8004708 <__aeabi_dmul>
 8020e32:	4622      	mov	r2, r4
 8020e34:	4606      	mov	r6, r0
 8020e36:	460f      	mov	r7, r1
 8020e38:	462b      	mov	r3, r5
 8020e3a:	ec51 0b19 	vmov	r0, r1, d9
 8020e3e:	f7e3 fc63 	bl	8004708 <__aeabi_dmul>
 8020e42:	4602      	mov	r2, r0
 8020e44:	460b      	mov	r3, r1
 8020e46:	4630      	mov	r0, r6
 8020e48:	4639      	mov	r1, r7
 8020e4a:	f7e3 faa7 	bl	800439c <__adddf3>
 8020e4e:	4606      	mov	r6, r0
 8020e50:	460f      	mov	r7, r1
 8020e52:	4602      	mov	r2, r0
 8020e54:	460b      	mov	r3, r1
 8020e56:	4640      	mov	r0, r8
 8020e58:	4649      	mov	r1, r9
 8020e5a:	f7e3 fa9f 	bl	800439c <__adddf3>
 8020e5e:	a33e      	add	r3, pc, #248	; (adr r3, 8020f58 <__ieee754_pow+0x738>)
 8020e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e64:	2000      	movs	r0, #0
 8020e66:	4604      	mov	r4, r0
 8020e68:	460d      	mov	r5, r1
 8020e6a:	f7e3 fc4d 	bl	8004708 <__aeabi_dmul>
 8020e6e:	4642      	mov	r2, r8
 8020e70:	ec41 0b18 	vmov	d8, r0, r1
 8020e74:	464b      	mov	r3, r9
 8020e76:	4620      	mov	r0, r4
 8020e78:	4629      	mov	r1, r5
 8020e7a:	f7e3 fa8d 	bl	8004398 <__aeabi_dsub>
 8020e7e:	4602      	mov	r2, r0
 8020e80:	460b      	mov	r3, r1
 8020e82:	4630      	mov	r0, r6
 8020e84:	4639      	mov	r1, r7
 8020e86:	f7e3 fa87 	bl	8004398 <__aeabi_dsub>
 8020e8a:	a335      	add	r3, pc, #212	; (adr r3, 8020f60 <__ieee754_pow+0x740>)
 8020e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e90:	f7e3 fc3a 	bl	8004708 <__aeabi_dmul>
 8020e94:	a334      	add	r3, pc, #208	; (adr r3, 8020f68 <__ieee754_pow+0x748>)
 8020e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e9a:	4606      	mov	r6, r0
 8020e9c:	460f      	mov	r7, r1
 8020e9e:	4620      	mov	r0, r4
 8020ea0:	4629      	mov	r1, r5
 8020ea2:	f7e3 fc31 	bl	8004708 <__aeabi_dmul>
 8020ea6:	4602      	mov	r2, r0
 8020ea8:	460b      	mov	r3, r1
 8020eaa:	4630      	mov	r0, r6
 8020eac:	4639      	mov	r1, r7
 8020eae:	f7e3 fa75 	bl	800439c <__adddf3>
 8020eb2:	9a07      	ldr	r2, [sp, #28]
 8020eb4:	4b37      	ldr	r3, [pc, #220]	; (8020f94 <__ieee754_pow+0x774>)
 8020eb6:	4413      	add	r3, r2
 8020eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ebc:	f7e3 fa6e 	bl	800439c <__adddf3>
 8020ec0:	4682      	mov	sl, r0
 8020ec2:	9805      	ldr	r0, [sp, #20]
 8020ec4:	468b      	mov	fp, r1
 8020ec6:	f7e3 fbb5 	bl	8004634 <__aeabi_i2d>
 8020eca:	9a07      	ldr	r2, [sp, #28]
 8020ecc:	4b32      	ldr	r3, [pc, #200]	; (8020f98 <__ieee754_pow+0x778>)
 8020ece:	4413      	add	r3, r2
 8020ed0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020ed4:	4606      	mov	r6, r0
 8020ed6:	460f      	mov	r7, r1
 8020ed8:	4652      	mov	r2, sl
 8020eda:	465b      	mov	r3, fp
 8020edc:	ec51 0b18 	vmov	r0, r1, d8
 8020ee0:	f7e3 fa5c 	bl	800439c <__adddf3>
 8020ee4:	4642      	mov	r2, r8
 8020ee6:	464b      	mov	r3, r9
 8020ee8:	f7e3 fa58 	bl	800439c <__adddf3>
 8020eec:	4632      	mov	r2, r6
 8020eee:	463b      	mov	r3, r7
 8020ef0:	f7e3 fa54 	bl	800439c <__adddf3>
 8020ef4:	2000      	movs	r0, #0
 8020ef6:	4632      	mov	r2, r6
 8020ef8:	463b      	mov	r3, r7
 8020efa:	4604      	mov	r4, r0
 8020efc:	460d      	mov	r5, r1
 8020efe:	f7e3 fa4b 	bl	8004398 <__aeabi_dsub>
 8020f02:	4642      	mov	r2, r8
 8020f04:	464b      	mov	r3, r9
 8020f06:	f7e3 fa47 	bl	8004398 <__aeabi_dsub>
 8020f0a:	ec53 2b18 	vmov	r2, r3, d8
 8020f0e:	f7e3 fa43 	bl	8004398 <__aeabi_dsub>
 8020f12:	4602      	mov	r2, r0
 8020f14:	460b      	mov	r3, r1
 8020f16:	4650      	mov	r0, sl
 8020f18:	4659      	mov	r1, fp
 8020f1a:	e610      	b.n	8020b3e <__ieee754_pow+0x31e>
 8020f1c:	2401      	movs	r4, #1
 8020f1e:	e6a1      	b.n	8020c64 <__ieee754_pow+0x444>
 8020f20:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8020f70 <__ieee754_pow+0x750>
 8020f24:	e617      	b.n	8020b56 <__ieee754_pow+0x336>
 8020f26:	bf00      	nop
 8020f28:	4a454eef 	.word	0x4a454eef
 8020f2c:	3fca7e28 	.word	0x3fca7e28
 8020f30:	93c9db65 	.word	0x93c9db65
 8020f34:	3fcd864a 	.word	0x3fcd864a
 8020f38:	a91d4101 	.word	0xa91d4101
 8020f3c:	3fd17460 	.word	0x3fd17460
 8020f40:	518f264d 	.word	0x518f264d
 8020f44:	3fd55555 	.word	0x3fd55555
 8020f48:	db6fabff 	.word	0xdb6fabff
 8020f4c:	3fdb6db6 	.word	0x3fdb6db6
 8020f50:	33333303 	.word	0x33333303
 8020f54:	3fe33333 	.word	0x3fe33333
 8020f58:	e0000000 	.word	0xe0000000
 8020f5c:	3feec709 	.word	0x3feec709
 8020f60:	dc3a03fd 	.word	0xdc3a03fd
 8020f64:	3feec709 	.word	0x3feec709
 8020f68:	145b01f5 	.word	0x145b01f5
 8020f6c:	be3e2fe0 	.word	0xbe3e2fe0
 8020f70:	00000000 	.word	0x00000000
 8020f74:	3ff00000 	.word	0x3ff00000
 8020f78:	7ff00000 	.word	0x7ff00000
 8020f7c:	43400000 	.word	0x43400000
 8020f80:	0003988e 	.word	0x0003988e
 8020f84:	000bb679 	.word	0x000bb679
 8020f88:	080398c8 	.word	0x080398c8
 8020f8c:	3ff00000 	.word	0x3ff00000
 8020f90:	40080000 	.word	0x40080000
 8020f94:	080398e8 	.word	0x080398e8
 8020f98:	080398d8 	.word	0x080398d8
 8020f9c:	a3b5      	add	r3, pc, #724	; (adr r3, 8021274 <__ieee754_pow+0xa54>)
 8020f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fa2:	4640      	mov	r0, r8
 8020fa4:	4649      	mov	r1, r9
 8020fa6:	f7e3 f9f9 	bl	800439c <__adddf3>
 8020faa:	4622      	mov	r2, r4
 8020fac:	ec41 0b1a 	vmov	d10, r0, r1
 8020fb0:	462b      	mov	r3, r5
 8020fb2:	4630      	mov	r0, r6
 8020fb4:	4639      	mov	r1, r7
 8020fb6:	f7e3 f9ef 	bl	8004398 <__aeabi_dsub>
 8020fba:	4602      	mov	r2, r0
 8020fbc:	460b      	mov	r3, r1
 8020fbe:	ec51 0b1a 	vmov	r0, r1, d10
 8020fc2:	f7e3 fe31 	bl	8004c28 <__aeabi_dcmpgt>
 8020fc6:	2800      	cmp	r0, #0
 8020fc8:	f47f ae04 	bne.w	8020bd4 <__ieee754_pow+0x3b4>
 8020fcc:	4aa4      	ldr	r2, [pc, #656]	; (8021260 <__ieee754_pow+0xa40>)
 8020fce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020fd2:	4293      	cmp	r3, r2
 8020fd4:	f340 8108 	ble.w	80211e8 <__ieee754_pow+0x9c8>
 8020fd8:	151b      	asrs	r3, r3, #20
 8020fda:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8020fde:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8020fe2:	fa4a f303 	asr.w	r3, sl, r3
 8020fe6:	445b      	add	r3, fp
 8020fe8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8020fec:	4e9d      	ldr	r6, [pc, #628]	; (8021264 <__ieee754_pow+0xa44>)
 8020fee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8020ff2:	4116      	asrs	r6, r2
 8020ff4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8020ff8:	2000      	movs	r0, #0
 8020ffa:	ea23 0106 	bic.w	r1, r3, r6
 8020ffe:	f1c2 0214 	rsb	r2, r2, #20
 8021002:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8021006:	fa4a fa02 	asr.w	sl, sl, r2
 802100a:	f1bb 0f00 	cmp.w	fp, #0
 802100e:	4602      	mov	r2, r0
 8021010:	460b      	mov	r3, r1
 8021012:	4620      	mov	r0, r4
 8021014:	4629      	mov	r1, r5
 8021016:	bfb8      	it	lt
 8021018:	f1ca 0a00 	rsblt	sl, sl, #0
 802101c:	f7e3 f9bc 	bl	8004398 <__aeabi_dsub>
 8021020:	ec41 0b19 	vmov	d9, r0, r1
 8021024:	4642      	mov	r2, r8
 8021026:	464b      	mov	r3, r9
 8021028:	ec51 0b19 	vmov	r0, r1, d9
 802102c:	f7e3 f9b6 	bl	800439c <__adddf3>
 8021030:	a37b      	add	r3, pc, #492	; (adr r3, 8021220 <__ieee754_pow+0xa00>)
 8021032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021036:	2000      	movs	r0, #0
 8021038:	4604      	mov	r4, r0
 802103a:	460d      	mov	r5, r1
 802103c:	f7e3 fb64 	bl	8004708 <__aeabi_dmul>
 8021040:	ec53 2b19 	vmov	r2, r3, d9
 8021044:	4606      	mov	r6, r0
 8021046:	460f      	mov	r7, r1
 8021048:	4620      	mov	r0, r4
 802104a:	4629      	mov	r1, r5
 802104c:	f7e3 f9a4 	bl	8004398 <__aeabi_dsub>
 8021050:	4602      	mov	r2, r0
 8021052:	460b      	mov	r3, r1
 8021054:	4640      	mov	r0, r8
 8021056:	4649      	mov	r1, r9
 8021058:	f7e3 f99e 	bl	8004398 <__aeabi_dsub>
 802105c:	a372      	add	r3, pc, #456	; (adr r3, 8021228 <__ieee754_pow+0xa08>)
 802105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021062:	f7e3 fb51 	bl	8004708 <__aeabi_dmul>
 8021066:	a372      	add	r3, pc, #456	; (adr r3, 8021230 <__ieee754_pow+0xa10>)
 8021068:	e9d3 2300 	ldrd	r2, r3, [r3]
 802106c:	4680      	mov	r8, r0
 802106e:	4689      	mov	r9, r1
 8021070:	4620      	mov	r0, r4
 8021072:	4629      	mov	r1, r5
 8021074:	f7e3 fb48 	bl	8004708 <__aeabi_dmul>
 8021078:	4602      	mov	r2, r0
 802107a:	460b      	mov	r3, r1
 802107c:	4640      	mov	r0, r8
 802107e:	4649      	mov	r1, r9
 8021080:	f7e3 f98c 	bl	800439c <__adddf3>
 8021084:	4604      	mov	r4, r0
 8021086:	460d      	mov	r5, r1
 8021088:	4602      	mov	r2, r0
 802108a:	460b      	mov	r3, r1
 802108c:	4630      	mov	r0, r6
 802108e:	4639      	mov	r1, r7
 8021090:	f7e3 f984 	bl	800439c <__adddf3>
 8021094:	4632      	mov	r2, r6
 8021096:	463b      	mov	r3, r7
 8021098:	4680      	mov	r8, r0
 802109a:	4689      	mov	r9, r1
 802109c:	f7e3 f97c 	bl	8004398 <__aeabi_dsub>
 80210a0:	4602      	mov	r2, r0
 80210a2:	460b      	mov	r3, r1
 80210a4:	4620      	mov	r0, r4
 80210a6:	4629      	mov	r1, r5
 80210a8:	f7e3 f976 	bl	8004398 <__aeabi_dsub>
 80210ac:	4642      	mov	r2, r8
 80210ae:	4606      	mov	r6, r0
 80210b0:	460f      	mov	r7, r1
 80210b2:	464b      	mov	r3, r9
 80210b4:	4640      	mov	r0, r8
 80210b6:	4649      	mov	r1, r9
 80210b8:	f7e3 fb26 	bl	8004708 <__aeabi_dmul>
 80210bc:	a35e      	add	r3, pc, #376	; (adr r3, 8021238 <__ieee754_pow+0xa18>)
 80210be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210c2:	4604      	mov	r4, r0
 80210c4:	460d      	mov	r5, r1
 80210c6:	f7e3 fb1f 	bl	8004708 <__aeabi_dmul>
 80210ca:	a35d      	add	r3, pc, #372	; (adr r3, 8021240 <__ieee754_pow+0xa20>)
 80210cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210d0:	f7e3 f962 	bl	8004398 <__aeabi_dsub>
 80210d4:	4622      	mov	r2, r4
 80210d6:	462b      	mov	r3, r5
 80210d8:	f7e3 fb16 	bl	8004708 <__aeabi_dmul>
 80210dc:	a35a      	add	r3, pc, #360	; (adr r3, 8021248 <__ieee754_pow+0xa28>)
 80210de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210e2:	f7e3 f95b 	bl	800439c <__adddf3>
 80210e6:	4622      	mov	r2, r4
 80210e8:	462b      	mov	r3, r5
 80210ea:	f7e3 fb0d 	bl	8004708 <__aeabi_dmul>
 80210ee:	a358      	add	r3, pc, #352	; (adr r3, 8021250 <__ieee754_pow+0xa30>)
 80210f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210f4:	f7e3 f950 	bl	8004398 <__aeabi_dsub>
 80210f8:	4622      	mov	r2, r4
 80210fa:	462b      	mov	r3, r5
 80210fc:	f7e3 fb04 	bl	8004708 <__aeabi_dmul>
 8021100:	a355      	add	r3, pc, #340	; (adr r3, 8021258 <__ieee754_pow+0xa38>)
 8021102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021106:	f7e3 f949 	bl	800439c <__adddf3>
 802110a:	4622      	mov	r2, r4
 802110c:	462b      	mov	r3, r5
 802110e:	f7e3 fafb 	bl	8004708 <__aeabi_dmul>
 8021112:	4602      	mov	r2, r0
 8021114:	460b      	mov	r3, r1
 8021116:	4640      	mov	r0, r8
 8021118:	4649      	mov	r1, r9
 802111a:	f7e3 f93d 	bl	8004398 <__aeabi_dsub>
 802111e:	4604      	mov	r4, r0
 8021120:	460d      	mov	r5, r1
 8021122:	4602      	mov	r2, r0
 8021124:	460b      	mov	r3, r1
 8021126:	4640      	mov	r0, r8
 8021128:	4649      	mov	r1, r9
 802112a:	f7e3 faed 	bl	8004708 <__aeabi_dmul>
 802112e:	2200      	movs	r2, #0
 8021130:	ec41 0b19 	vmov	d9, r0, r1
 8021134:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021138:	4620      	mov	r0, r4
 802113a:	4629      	mov	r1, r5
 802113c:	f7e3 f92c 	bl	8004398 <__aeabi_dsub>
 8021140:	4602      	mov	r2, r0
 8021142:	460b      	mov	r3, r1
 8021144:	ec51 0b19 	vmov	r0, r1, d9
 8021148:	f7e3 fc08 	bl	800495c <__aeabi_ddiv>
 802114c:	4632      	mov	r2, r6
 802114e:	4604      	mov	r4, r0
 8021150:	460d      	mov	r5, r1
 8021152:	463b      	mov	r3, r7
 8021154:	4640      	mov	r0, r8
 8021156:	4649      	mov	r1, r9
 8021158:	f7e3 fad6 	bl	8004708 <__aeabi_dmul>
 802115c:	4632      	mov	r2, r6
 802115e:	463b      	mov	r3, r7
 8021160:	f7e3 f91c 	bl	800439c <__adddf3>
 8021164:	4602      	mov	r2, r0
 8021166:	460b      	mov	r3, r1
 8021168:	4620      	mov	r0, r4
 802116a:	4629      	mov	r1, r5
 802116c:	f7e3 f914 	bl	8004398 <__aeabi_dsub>
 8021170:	4642      	mov	r2, r8
 8021172:	464b      	mov	r3, r9
 8021174:	f7e3 f910 	bl	8004398 <__aeabi_dsub>
 8021178:	460b      	mov	r3, r1
 802117a:	4602      	mov	r2, r0
 802117c:	493a      	ldr	r1, [pc, #232]	; (8021268 <__ieee754_pow+0xa48>)
 802117e:	2000      	movs	r0, #0
 8021180:	f7e3 f90a 	bl	8004398 <__aeabi_dsub>
 8021184:	ec41 0b10 	vmov	d0, r0, r1
 8021188:	ee10 3a90 	vmov	r3, s1
 802118c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8021190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021194:	da2b      	bge.n	80211ee <__ieee754_pow+0x9ce>
 8021196:	4650      	mov	r0, sl
 8021198:	f000 f9c2 	bl	8021520 <scalbn>
 802119c:	ec51 0b10 	vmov	r0, r1, d0
 80211a0:	ec53 2b18 	vmov	r2, r3, d8
 80211a4:	f7ff bbed 	b.w	8020982 <__ieee754_pow+0x162>
 80211a8:	4b30      	ldr	r3, [pc, #192]	; (802126c <__ieee754_pow+0xa4c>)
 80211aa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80211ae:	429e      	cmp	r6, r3
 80211b0:	f77f af0c 	ble.w	8020fcc <__ieee754_pow+0x7ac>
 80211b4:	4b2e      	ldr	r3, [pc, #184]	; (8021270 <__ieee754_pow+0xa50>)
 80211b6:	440b      	add	r3, r1
 80211b8:	4303      	orrs	r3, r0
 80211ba:	d009      	beq.n	80211d0 <__ieee754_pow+0x9b0>
 80211bc:	ec51 0b18 	vmov	r0, r1, d8
 80211c0:	2200      	movs	r2, #0
 80211c2:	2300      	movs	r3, #0
 80211c4:	f7e3 fd12 	bl	8004bec <__aeabi_dcmplt>
 80211c8:	3800      	subs	r0, #0
 80211ca:	bf18      	it	ne
 80211cc:	2001      	movne	r0, #1
 80211ce:	e447      	b.n	8020a60 <__ieee754_pow+0x240>
 80211d0:	4622      	mov	r2, r4
 80211d2:	462b      	mov	r3, r5
 80211d4:	f7e3 f8e0 	bl	8004398 <__aeabi_dsub>
 80211d8:	4642      	mov	r2, r8
 80211da:	464b      	mov	r3, r9
 80211dc:	f7e3 fd1a 	bl	8004c14 <__aeabi_dcmpge>
 80211e0:	2800      	cmp	r0, #0
 80211e2:	f43f aef3 	beq.w	8020fcc <__ieee754_pow+0x7ac>
 80211e6:	e7e9      	b.n	80211bc <__ieee754_pow+0x99c>
 80211e8:	f04f 0a00 	mov.w	sl, #0
 80211ec:	e71a      	b.n	8021024 <__ieee754_pow+0x804>
 80211ee:	ec51 0b10 	vmov	r0, r1, d0
 80211f2:	4619      	mov	r1, r3
 80211f4:	e7d4      	b.n	80211a0 <__ieee754_pow+0x980>
 80211f6:	491c      	ldr	r1, [pc, #112]	; (8021268 <__ieee754_pow+0xa48>)
 80211f8:	2000      	movs	r0, #0
 80211fa:	f7ff bb30 	b.w	802085e <__ieee754_pow+0x3e>
 80211fe:	2000      	movs	r0, #0
 8021200:	2100      	movs	r1, #0
 8021202:	f7ff bb2c 	b.w	802085e <__ieee754_pow+0x3e>
 8021206:	4630      	mov	r0, r6
 8021208:	4639      	mov	r1, r7
 802120a:	f7ff bb28 	b.w	802085e <__ieee754_pow+0x3e>
 802120e:	9204      	str	r2, [sp, #16]
 8021210:	f7ff bb7a 	b.w	8020908 <__ieee754_pow+0xe8>
 8021214:	2300      	movs	r3, #0
 8021216:	f7ff bb64 	b.w	80208e2 <__ieee754_pow+0xc2>
 802121a:	bf00      	nop
 802121c:	f3af 8000 	nop.w
 8021220:	00000000 	.word	0x00000000
 8021224:	3fe62e43 	.word	0x3fe62e43
 8021228:	fefa39ef 	.word	0xfefa39ef
 802122c:	3fe62e42 	.word	0x3fe62e42
 8021230:	0ca86c39 	.word	0x0ca86c39
 8021234:	be205c61 	.word	0xbe205c61
 8021238:	72bea4d0 	.word	0x72bea4d0
 802123c:	3e663769 	.word	0x3e663769
 8021240:	c5d26bf1 	.word	0xc5d26bf1
 8021244:	3ebbbd41 	.word	0x3ebbbd41
 8021248:	af25de2c 	.word	0xaf25de2c
 802124c:	3f11566a 	.word	0x3f11566a
 8021250:	16bebd93 	.word	0x16bebd93
 8021254:	3f66c16c 	.word	0x3f66c16c
 8021258:	5555553e 	.word	0x5555553e
 802125c:	3fc55555 	.word	0x3fc55555
 8021260:	3fe00000 	.word	0x3fe00000
 8021264:	000fffff 	.word	0x000fffff
 8021268:	3ff00000 	.word	0x3ff00000
 802126c:	4090cbff 	.word	0x4090cbff
 8021270:	3f6f3400 	.word	0x3f6f3400
 8021274:	652b82fe 	.word	0x652b82fe
 8021278:	3c971547 	.word	0x3c971547

0802127c <__ieee754_sqrt>:
 802127c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021280:	ec55 4b10 	vmov	r4, r5, d0
 8021284:	4e55      	ldr	r6, [pc, #340]	; (80213dc <__ieee754_sqrt+0x160>)
 8021286:	43ae      	bics	r6, r5
 8021288:	ee10 0a10 	vmov	r0, s0
 802128c:	ee10 3a10 	vmov	r3, s0
 8021290:	462a      	mov	r2, r5
 8021292:	4629      	mov	r1, r5
 8021294:	d110      	bne.n	80212b8 <__ieee754_sqrt+0x3c>
 8021296:	ee10 2a10 	vmov	r2, s0
 802129a:	462b      	mov	r3, r5
 802129c:	f7e3 fa34 	bl	8004708 <__aeabi_dmul>
 80212a0:	4602      	mov	r2, r0
 80212a2:	460b      	mov	r3, r1
 80212a4:	4620      	mov	r0, r4
 80212a6:	4629      	mov	r1, r5
 80212a8:	f7e3 f878 	bl	800439c <__adddf3>
 80212ac:	4604      	mov	r4, r0
 80212ae:	460d      	mov	r5, r1
 80212b0:	ec45 4b10 	vmov	d0, r4, r5
 80212b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80212b8:	2d00      	cmp	r5, #0
 80212ba:	dc10      	bgt.n	80212de <__ieee754_sqrt+0x62>
 80212bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80212c0:	4330      	orrs	r0, r6
 80212c2:	d0f5      	beq.n	80212b0 <__ieee754_sqrt+0x34>
 80212c4:	b15d      	cbz	r5, 80212de <__ieee754_sqrt+0x62>
 80212c6:	ee10 2a10 	vmov	r2, s0
 80212ca:	462b      	mov	r3, r5
 80212cc:	ee10 0a10 	vmov	r0, s0
 80212d0:	f7e3 f862 	bl	8004398 <__aeabi_dsub>
 80212d4:	4602      	mov	r2, r0
 80212d6:	460b      	mov	r3, r1
 80212d8:	f7e3 fb40 	bl	800495c <__aeabi_ddiv>
 80212dc:	e7e6      	b.n	80212ac <__ieee754_sqrt+0x30>
 80212de:	1512      	asrs	r2, r2, #20
 80212e0:	d074      	beq.n	80213cc <__ieee754_sqrt+0x150>
 80212e2:	07d4      	lsls	r4, r2, #31
 80212e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80212e8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80212ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80212f0:	bf5e      	ittt	pl
 80212f2:	0fda      	lsrpl	r2, r3, #31
 80212f4:	005b      	lslpl	r3, r3, #1
 80212f6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80212fa:	2400      	movs	r4, #0
 80212fc:	0fda      	lsrs	r2, r3, #31
 80212fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8021302:	107f      	asrs	r7, r7, #1
 8021304:	005b      	lsls	r3, r3, #1
 8021306:	2516      	movs	r5, #22
 8021308:	4620      	mov	r0, r4
 802130a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 802130e:	1886      	adds	r6, r0, r2
 8021310:	428e      	cmp	r6, r1
 8021312:	bfde      	ittt	le
 8021314:	1b89      	suble	r1, r1, r6
 8021316:	18b0      	addle	r0, r6, r2
 8021318:	18a4      	addle	r4, r4, r2
 802131a:	0049      	lsls	r1, r1, #1
 802131c:	3d01      	subs	r5, #1
 802131e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8021322:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8021326:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802132a:	d1f0      	bne.n	802130e <__ieee754_sqrt+0x92>
 802132c:	462a      	mov	r2, r5
 802132e:	f04f 0e20 	mov.w	lr, #32
 8021332:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8021336:	4281      	cmp	r1, r0
 8021338:	eb06 0c05 	add.w	ip, r6, r5
 802133c:	dc02      	bgt.n	8021344 <__ieee754_sqrt+0xc8>
 802133e:	d113      	bne.n	8021368 <__ieee754_sqrt+0xec>
 8021340:	459c      	cmp	ip, r3
 8021342:	d811      	bhi.n	8021368 <__ieee754_sqrt+0xec>
 8021344:	f1bc 0f00 	cmp.w	ip, #0
 8021348:	eb0c 0506 	add.w	r5, ip, r6
 802134c:	da43      	bge.n	80213d6 <__ieee754_sqrt+0x15a>
 802134e:	2d00      	cmp	r5, #0
 8021350:	db41      	blt.n	80213d6 <__ieee754_sqrt+0x15a>
 8021352:	f100 0801 	add.w	r8, r0, #1
 8021356:	1a09      	subs	r1, r1, r0
 8021358:	459c      	cmp	ip, r3
 802135a:	bf88      	it	hi
 802135c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8021360:	eba3 030c 	sub.w	r3, r3, ip
 8021364:	4432      	add	r2, r6
 8021366:	4640      	mov	r0, r8
 8021368:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 802136c:	f1be 0e01 	subs.w	lr, lr, #1
 8021370:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8021374:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021378:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802137c:	d1db      	bne.n	8021336 <__ieee754_sqrt+0xba>
 802137e:	430b      	orrs	r3, r1
 8021380:	d006      	beq.n	8021390 <__ieee754_sqrt+0x114>
 8021382:	1c50      	adds	r0, r2, #1
 8021384:	bf13      	iteet	ne
 8021386:	3201      	addne	r2, #1
 8021388:	3401      	addeq	r4, #1
 802138a:	4672      	moveq	r2, lr
 802138c:	f022 0201 	bicne.w	r2, r2, #1
 8021390:	1063      	asrs	r3, r4, #1
 8021392:	0852      	lsrs	r2, r2, #1
 8021394:	07e1      	lsls	r1, r4, #31
 8021396:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 802139a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 802139e:	bf48      	it	mi
 80213a0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80213a4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80213a8:	4614      	mov	r4, r2
 80213aa:	e781      	b.n	80212b0 <__ieee754_sqrt+0x34>
 80213ac:	0ad9      	lsrs	r1, r3, #11
 80213ae:	3815      	subs	r0, #21
 80213b0:	055b      	lsls	r3, r3, #21
 80213b2:	2900      	cmp	r1, #0
 80213b4:	d0fa      	beq.n	80213ac <__ieee754_sqrt+0x130>
 80213b6:	02cd      	lsls	r5, r1, #11
 80213b8:	d50a      	bpl.n	80213d0 <__ieee754_sqrt+0x154>
 80213ba:	f1c2 0420 	rsb	r4, r2, #32
 80213be:	fa23 f404 	lsr.w	r4, r3, r4
 80213c2:	1e55      	subs	r5, r2, #1
 80213c4:	4093      	lsls	r3, r2
 80213c6:	4321      	orrs	r1, r4
 80213c8:	1b42      	subs	r2, r0, r5
 80213ca:	e78a      	b.n	80212e2 <__ieee754_sqrt+0x66>
 80213cc:	4610      	mov	r0, r2
 80213ce:	e7f0      	b.n	80213b2 <__ieee754_sqrt+0x136>
 80213d0:	0049      	lsls	r1, r1, #1
 80213d2:	3201      	adds	r2, #1
 80213d4:	e7ef      	b.n	80213b6 <__ieee754_sqrt+0x13a>
 80213d6:	4680      	mov	r8, r0
 80213d8:	e7bd      	b.n	8021356 <__ieee754_sqrt+0xda>
 80213da:	bf00      	nop
 80213dc:	7ff00000 	.word	0x7ff00000

080213e0 <__ieee754_log10f>:
 80213e0:	b508      	push	{r3, lr}
 80213e2:	ee10 2a10 	vmov	r2, s0
 80213e6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80213ea:	ed2d 8b02 	vpush	{d8}
 80213ee:	d108      	bne.n	8021402 <__ieee754_log10f+0x22>
 80213f0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8021478 <__ieee754_log10f+0x98>
 80213f4:	eddf 7a21 	vldr	s15, [pc, #132]	; 802147c <__ieee754_log10f+0x9c>
 80213f8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80213fc:	ecbd 8b02 	vpop	{d8}
 8021400:	bd08      	pop	{r3, pc}
 8021402:	2a00      	cmp	r2, #0
 8021404:	da02      	bge.n	802140c <__ieee754_log10f+0x2c>
 8021406:	ee30 7a40 	vsub.f32	s14, s0, s0
 802140a:	e7f3      	b.n	80213f4 <__ieee754_log10f+0x14>
 802140c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8021410:	db02      	blt.n	8021418 <__ieee754_log10f+0x38>
 8021412:	ee30 0a00 	vadd.f32	s0, s0, s0
 8021416:	e7f1      	b.n	80213fc <__ieee754_log10f+0x1c>
 8021418:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 802141c:	bfbf      	itttt	lt
 802141e:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8021480 <__ieee754_log10f+0xa0>
 8021422:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8021426:	f06f 0118 	mvnlt.w	r1, #24
 802142a:	ee17 2a90 	vmovlt	r2, s15
 802142e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8021432:	bfa8      	it	ge
 8021434:	2100      	movge	r1, #0
 8021436:	3b7f      	subs	r3, #127	; 0x7f
 8021438:	440b      	add	r3, r1
 802143a:	0fd9      	lsrs	r1, r3, #31
 802143c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8021440:	ee07 3a90 	vmov	s15, r3
 8021444:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8021448:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 802144c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8021450:	ee00 3a10 	vmov	s0, r3
 8021454:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8021458:	f000 f8e8 	bl	802162c <__ieee754_logf>
 802145c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8021484 <__ieee754_log10f+0xa4>
 8021460:	ee20 0a27 	vmul.f32	s0, s0, s15
 8021464:	eddf 7a08 	vldr	s15, [pc, #32]	; 8021488 <__ieee754_log10f+0xa8>
 8021468:	eea8 0a27 	vfma.f32	s0, s16, s15
 802146c:	eddf 7a07 	vldr	s15, [pc, #28]	; 802148c <__ieee754_log10f+0xac>
 8021470:	eea8 0a27 	vfma.f32	s0, s16, s15
 8021474:	e7c2      	b.n	80213fc <__ieee754_log10f+0x1c>
 8021476:	bf00      	nop
 8021478:	cc000000 	.word	0xcc000000
 802147c:	00000000 	.word	0x00000000
 8021480:	4c000000 	.word	0x4c000000
 8021484:	3ede5bd9 	.word	0x3ede5bd9
 8021488:	355427db 	.word	0x355427db
 802148c:	3e9a2080 	.word	0x3e9a2080

08021490 <__ieee754_sqrtf>:
 8021490:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8021494:	4770      	bx	lr

08021496 <with_errno>:
 8021496:	b570      	push	{r4, r5, r6, lr}
 8021498:	4604      	mov	r4, r0
 802149a:	460d      	mov	r5, r1
 802149c:	4616      	mov	r6, r2
 802149e:	f7fa fc5f 	bl	801bd60 <__errno>
 80214a2:	4629      	mov	r1, r5
 80214a4:	6006      	str	r6, [r0, #0]
 80214a6:	4620      	mov	r0, r4
 80214a8:	bd70      	pop	{r4, r5, r6, pc}

080214aa <xflow>:
 80214aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80214ac:	4614      	mov	r4, r2
 80214ae:	461d      	mov	r5, r3
 80214b0:	b108      	cbz	r0, 80214b6 <xflow+0xc>
 80214b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80214b6:	e9cd 2300 	strd	r2, r3, [sp]
 80214ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80214be:	4620      	mov	r0, r4
 80214c0:	4629      	mov	r1, r5
 80214c2:	f7e3 f921 	bl	8004708 <__aeabi_dmul>
 80214c6:	2222      	movs	r2, #34	; 0x22
 80214c8:	b003      	add	sp, #12
 80214ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80214ce:	f7ff bfe2 	b.w	8021496 <with_errno>

080214d2 <__math_uflow>:
 80214d2:	b508      	push	{r3, lr}
 80214d4:	2200      	movs	r2, #0
 80214d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80214da:	f7ff ffe6 	bl	80214aa <xflow>
 80214de:	ec41 0b10 	vmov	d0, r0, r1
 80214e2:	bd08      	pop	{r3, pc}

080214e4 <__math_oflow>:
 80214e4:	b508      	push	{r3, lr}
 80214e6:	2200      	movs	r2, #0
 80214e8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80214ec:	f7ff ffdd 	bl	80214aa <xflow>
 80214f0:	ec41 0b10 	vmov	d0, r0, r1
 80214f4:	bd08      	pop	{r3, pc}

080214f6 <fabs>:
 80214f6:	ec51 0b10 	vmov	r0, r1, d0
 80214fa:	ee10 2a10 	vmov	r2, s0
 80214fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8021502:	ec43 2b10 	vmov	d0, r2, r3
 8021506:	4770      	bx	lr

08021508 <finite>:
 8021508:	b082      	sub	sp, #8
 802150a:	ed8d 0b00 	vstr	d0, [sp]
 802150e:	9801      	ldr	r0, [sp, #4]
 8021510:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8021514:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8021518:	0fc0      	lsrs	r0, r0, #31
 802151a:	b002      	add	sp, #8
 802151c:	4770      	bx	lr
	...

08021520 <scalbn>:
 8021520:	b570      	push	{r4, r5, r6, lr}
 8021522:	ec55 4b10 	vmov	r4, r5, d0
 8021526:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802152a:	4606      	mov	r6, r0
 802152c:	462b      	mov	r3, r5
 802152e:	b99a      	cbnz	r2, 8021558 <scalbn+0x38>
 8021530:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8021534:	4323      	orrs	r3, r4
 8021536:	d036      	beq.n	80215a6 <scalbn+0x86>
 8021538:	4b39      	ldr	r3, [pc, #228]	; (8021620 <scalbn+0x100>)
 802153a:	4629      	mov	r1, r5
 802153c:	ee10 0a10 	vmov	r0, s0
 8021540:	2200      	movs	r2, #0
 8021542:	f7e3 f8e1 	bl	8004708 <__aeabi_dmul>
 8021546:	4b37      	ldr	r3, [pc, #220]	; (8021624 <scalbn+0x104>)
 8021548:	429e      	cmp	r6, r3
 802154a:	4604      	mov	r4, r0
 802154c:	460d      	mov	r5, r1
 802154e:	da10      	bge.n	8021572 <scalbn+0x52>
 8021550:	a32b      	add	r3, pc, #172	; (adr r3, 8021600 <scalbn+0xe0>)
 8021552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021556:	e03a      	b.n	80215ce <scalbn+0xae>
 8021558:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802155c:	428a      	cmp	r2, r1
 802155e:	d10c      	bne.n	802157a <scalbn+0x5a>
 8021560:	ee10 2a10 	vmov	r2, s0
 8021564:	4620      	mov	r0, r4
 8021566:	4629      	mov	r1, r5
 8021568:	f7e2 ff18 	bl	800439c <__adddf3>
 802156c:	4604      	mov	r4, r0
 802156e:	460d      	mov	r5, r1
 8021570:	e019      	b.n	80215a6 <scalbn+0x86>
 8021572:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8021576:	460b      	mov	r3, r1
 8021578:	3a36      	subs	r2, #54	; 0x36
 802157a:	4432      	add	r2, r6
 802157c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8021580:	428a      	cmp	r2, r1
 8021582:	dd08      	ble.n	8021596 <scalbn+0x76>
 8021584:	2d00      	cmp	r5, #0
 8021586:	a120      	add	r1, pc, #128	; (adr r1, 8021608 <scalbn+0xe8>)
 8021588:	e9d1 0100 	ldrd	r0, r1, [r1]
 802158c:	da1c      	bge.n	80215c8 <scalbn+0xa8>
 802158e:	a120      	add	r1, pc, #128	; (adr r1, 8021610 <scalbn+0xf0>)
 8021590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021594:	e018      	b.n	80215c8 <scalbn+0xa8>
 8021596:	2a00      	cmp	r2, #0
 8021598:	dd08      	ble.n	80215ac <scalbn+0x8c>
 802159a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802159e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80215a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80215a6:	ec45 4b10 	vmov	d0, r4, r5
 80215aa:	bd70      	pop	{r4, r5, r6, pc}
 80215ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80215b0:	da19      	bge.n	80215e6 <scalbn+0xc6>
 80215b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80215b6:	429e      	cmp	r6, r3
 80215b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80215bc:	dd0a      	ble.n	80215d4 <scalbn+0xb4>
 80215be:	a112      	add	r1, pc, #72	; (adr r1, 8021608 <scalbn+0xe8>)
 80215c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80215c4:	2b00      	cmp	r3, #0
 80215c6:	d1e2      	bne.n	802158e <scalbn+0x6e>
 80215c8:	a30f      	add	r3, pc, #60	; (adr r3, 8021608 <scalbn+0xe8>)
 80215ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215ce:	f7e3 f89b 	bl	8004708 <__aeabi_dmul>
 80215d2:	e7cb      	b.n	802156c <scalbn+0x4c>
 80215d4:	a10a      	add	r1, pc, #40	; (adr r1, 8021600 <scalbn+0xe0>)
 80215d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80215da:	2b00      	cmp	r3, #0
 80215dc:	d0b8      	beq.n	8021550 <scalbn+0x30>
 80215de:	a10e      	add	r1, pc, #56	; (adr r1, 8021618 <scalbn+0xf8>)
 80215e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80215e4:	e7b4      	b.n	8021550 <scalbn+0x30>
 80215e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80215ea:	3236      	adds	r2, #54	; 0x36
 80215ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80215f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80215f4:	4620      	mov	r0, r4
 80215f6:	4b0c      	ldr	r3, [pc, #48]	; (8021628 <scalbn+0x108>)
 80215f8:	2200      	movs	r2, #0
 80215fa:	e7e8      	b.n	80215ce <scalbn+0xae>
 80215fc:	f3af 8000 	nop.w
 8021600:	c2f8f359 	.word	0xc2f8f359
 8021604:	01a56e1f 	.word	0x01a56e1f
 8021608:	8800759c 	.word	0x8800759c
 802160c:	7e37e43c 	.word	0x7e37e43c
 8021610:	8800759c 	.word	0x8800759c
 8021614:	fe37e43c 	.word	0xfe37e43c
 8021618:	c2f8f359 	.word	0xc2f8f359
 802161c:	81a56e1f 	.word	0x81a56e1f
 8021620:	43500000 	.word	0x43500000
 8021624:	ffff3cb0 	.word	0xffff3cb0
 8021628:	3c900000 	.word	0x3c900000

0802162c <__ieee754_logf>:
 802162c:	ee10 3a10 	vmov	r3, s0
 8021630:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8021634:	d106      	bne.n	8021644 <__ieee754_logf+0x18>
 8021636:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80217cc <__ieee754_logf+0x1a0>
 802163a:	eddf 7a65 	vldr	s15, [pc, #404]	; 80217d0 <__ieee754_logf+0x1a4>
 802163e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8021642:	4770      	bx	lr
 8021644:	2b00      	cmp	r3, #0
 8021646:	da02      	bge.n	802164e <__ieee754_logf+0x22>
 8021648:	ee30 7a40 	vsub.f32	s14, s0, s0
 802164c:	e7f5      	b.n	802163a <__ieee754_logf+0xe>
 802164e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8021652:	db02      	blt.n	802165a <__ieee754_logf+0x2e>
 8021654:	ee30 0a00 	vadd.f32	s0, s0, s0
 8021658:	4770      	bx	lr
 802165a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802165e:	bfb8      	it	lt
 8021660:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80217d4 <__ieee754_logf+0x1a8>
 8021664:	485c      	ldr	r0, [pc, #368]	; (80217d8 <__ieee754_logf+0x1ac>)
 8021666:	bfbe      	ittt	lt
 8021668:	ee60 7a27 	vmullt.f32	s15, s0, s15
 802166c:	f06f 0118 	mvnlt.w	r1, #24
 8021670:	ee17 3a90 	vmovlt	r3, s15
 8021674:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8021678:	f3c3 0316 	ubfx	r3, r3, #0, #23
 802167c:	4418      	add	r0, r3
 802167e:	bfa8      	it	ge
 8021680:	2100      	movge	r1, #0
 8021682:	3a7f      	subs	r2, #127	; 0x7f
 8021684:	440a      	add	r2, r1
 8021686:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 802168a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 802168e:	4319      	orrs	r1, r3
 8021690:	ee00 1a10 	vmov	s0, r1
 8021694:	4951      	ldr	r1, [pc, #324]	; (80217dc <__ieee754_logf+0x1b0>)
 8021696:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 802169a:	f103 000f 	add.w	r0, r3, #15
 802169e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80216a2:	4001      	ands	r1, r0
 80216a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80216a8:	bb89      	cbnz	r1, 802170e <__ieee754_logf+0xe2>
 80216aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80216ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216b2:	d10f      	bne.n	80216d4 <__ieee754_logf+0xa8>
 80216b4:	2a00      	cmp	r2, #0
 80216b6:	f000 8085 	beq.w	80217c4 <__ieee754_logf+0x198>
 80216ba:	ee07 2a90 	vmov	s15, r2
 80216be:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80217e0 <__ieee754_logf+0x1b4>
 80216c2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80217e4 <__ieee754_logf+0x1b8>
 80216c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80216ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 80216ce:	eea7 0a87 	vfma.f32	s0, s15, s14
 80216d2:	4770      	bx	lr
 80216d4:	eddf 6a44 	vldr	s13, [pc, #272]	; 80217e8 <__ieee754_logf+0x1bc>
 80216d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80216dc:	eee0 7a66 	vfms.f32	s15, s0, s13
 80216e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80216e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80216e8:	b912      	cbnz	r2, 80216f0 <__ieee754_logf+0xc4>
 80216ea:	ee30 0a47 	vsub.f32	s0, s0, s14
 80216ee:	4770      	bx	lr
 80216f0:	ee07 2a90 	vmov	s15, r2
 80216f4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80217e0 <__ieee754_logf+0x1b4>
 80216f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80216fc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8021700:	ee37 0a40 	vsub.f32	s0, s14, s0
 8021704:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80217e4 <__ieee754_logf+0x1b8>
 8021708:	ee97 0a87 	vfnms.f32	s0, s15, s14
 802170c:	4770      	bx	lr
 802170e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8021712:	ee70 7a27 	vadd.f32	s15, s0, s15
 8021716:	eddf 5a35 	vldr	s11, [pc, #212]	; 80217ec <__ieee754_logf+0x1c0>
 802171a:	eddf 4a35 	vldr	s9, [pc, #212]	; 80217f0 <__ieee754_logf+0x1c4>
 802171e:	4935      	ldr	r1, [pc, #212]	; (80217f4 <__ieee754_logf+0x1c8>)
 8021720:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8021724:	4419      	add	r1, r3
 8021726:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 802172a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 802172e:	430b      	orrs	r3, r1
 8021730:	2b00      	cmp	r3, #0
 8021732:	ee07 2a90 	vmov	s15, r2
 8021736:	ee26 5a06 	vmul.f32	s10, s12, s12
 802173a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802173e:	ee25 7a05 	vmul.f32	s14, s10, s10
 8021742:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80217f8 <__ieee754_logf+0x1cc>
 8021746:	eee7 7a25 	vfma.f32	s15, s14, s11
 802174a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80217fc <__ieee754_logf+0x1d0>
 802174e:	eee7 5a87 	vfma.f32	s11, s15, s14
 8021752:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8021800 <__ieee754_logf+0x1d4>
 8021756:	eee7 7a24 	vfma.f32	s15, s14, s9
 802175a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8021804 <__ieee754_logf+0x1d8>
 802175e:	eee7 4a87 	vfma.f32	s9, s15, s14
 8021762:	eddf 7a29 	vldr	s15, [pc, #164]	; 8021808 <__ieee754_logf+0x1dc>
 8021766:	eee4 7a87 	vfma.f32	s15, s9, s14
 802176a:	ee67 7a85 	vmul.f32	s15, s15, s10
 802176e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8021772:	dd1c      	ble.n	80217ae <__ieee754_logf+0x182>
 8021774:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8021778:	ee20 7a07 	vmul.f32	s14, s0, s14
 802177c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8021780:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021784:	ee67 7a86 	vmul.f32	s15, s15, s12
 8021788:	b922      	cbnz	r2, 8021794 <__ieee754_logf+0x168>
 802178a:	ee77 7a67 	vsub.f32	s15, s14, s15
 802178e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8021792:	4770      	bx	lr
 8021794:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80217e0 <__ieee754_logf+0x1b4>
 8021798:	eee6 7a86 	vfma.f32	s15, s13, s12
 802179c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80217a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80217a4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80217e4 <__ieee754_logf+0x1b8>
 80217a8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80217ac:	4770      	bx	lr
 80217ae:	ee70 7a67 	vsub.f32	s15, s0, s15
 80217b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80217b6:	2a00      	cmp	r2, #0
 80217b8:	d0e9      	beq.n	802178e <__ieee754_logf+0x162>
 80217ba:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80217e0 <__ieee754_logf+0x1b4>
 80217be:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80217c2:	e7ed      	b.n	80217a0 <__ieee754_logf+0x174>
 80217c4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80217d0 <__ieee754_logf+0x1a4>
 80217c8:	4770      	bx	lr
 80217ca:	bf00      	nop
 80217cc:	cc000000 	.word	0xcc000000
 80217d0:	00000000 	.word	0x00000000
 80217d4:	4c000000 	.word	0x4c000000
 80217d8:	004afb20 	.word	0x004afb20
 80217dc:	007ffff0 	.word	0x007ffff0
 80217e0:	3717f7d1 	.word	0x3717f7d1
 80217e4:	3f317180 	.word	0x3f317180
 80217e8:	3eaaaaab 	.word	0x3eaaaaab
 80217ec:	3e1cd04f 	.word	0x3e1cd04f
 80217f0:	3e178897 	.word	0x3e178897
 80217f4:	ffcf5c30 	.word	0xffcf5c30
 80217f8:	3e638e29 	.word	0x3e638e29
 80217fc:	3ecccccd 	.word	0x3ecccccd
 8021800:	3e3a3325 	.word	0x3e3a3325
 8021804:	3e924925 	.word	0x3e924925
 8021808:	3f2aaaab 	.word	0x3f2aaaab

0802180c <_init>:
 802180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802180e:	bf00      	nop
 8021810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021812:	bc08      	pop	{r3}
 8021814:	469e      	mov	lr, r3
 8021816:	4770      	bx	lr

08021818 <_fini>:
 8021818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802181a:	bf00      	nop
 802181c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802181e:	bc08      	pop	{r3}
 8021820:	469e      	mov	lr, r3
 8021822:	4770      	bx	lr
 8021824:	0000      	movs	r0, r0
	...
